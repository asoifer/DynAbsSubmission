digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 813622"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 813623"];
3 [label="param CompilationEmitTests(this) 813624"];
4 [label="param EmitMetadataTestBase(this) 813625"];
5 [label="param CSharpTestBase(this) 813626"];
6 [label="param CommonTestBase(this) 813627"];
7 [label="param TestBase(this) 813628"];
8 [label="_temp 813629"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 813630"];
10 [label="param EmitRefAssembly_PrivatePropertySetter(this) 813631"];
11 [label="CSharpCompilation comp = CreateCompilation(@'\npublic class C\n{\n    public int PrivateSetter { get; private set; }\n}\n'); 813632"];
12 [label="@'\npublic class C\n{\n    public int PrivateSetter { get; private set; }\n}\n' 813633"];
13 [label="param operator(string source) 813634"];
14 [label="source 813635"];
15 [label="new CSharpTestSource(source) 813636"];
16 [label="param CSharpTestSource(object value) 813637"];
17 [label="param CSharpTestSource(this) 813638"];
18 [label="Value 813639"];
19 [label="CSharpCompilation comp = CreateCompilation(@'\npublic class C\n{\n    public int PrivateSetter { get; private set; }\n}\n'); 813640"];
20 [label="CreateCompilation(@'\npublic class C\n{\n    public int PrivateSetter { get; private set; }\n}\n') 813641"];
21 [label="param CreateCompilation(CSharpTestSource source) 813642"];
22 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 813643"];
23 [label="param CreateCompilation(CSharpCompilationOptions options = null) 813644"];
24 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 813645"];
25 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 813646"];
26 [label="param CreateCompilation(string assemblyName = '') 813647"];
27 [label="param CreateCompilation(string sourceFileName = '') 813648"];
28 [label="param CreateCompilation(bool skipUsesIsNullable = false) 813649"];
29 [label="source 813650"];
30 [label="targetFramework 813651"];
31 [label="references 813652"];
32 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 813653"];
33 [label="param GetReferences(TargetFramework tf) 813654"];
34 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 813655"];
35 [label="var references = GetReferences(tf); 813656"];
36 [label="GetReferences(tf) 813657"];
37 [label="param GetReferences(TargetFramework targetFramework) 813658"];
38 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 813659"];
39 [label="StandardReferences 813660"];
40 [label="RuntimeUtilities.IsCoreClrRuntime 813661"];
41 [label="Mscorlib46ExtendedReferences 813662"];
42 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 813663"];
43 [label="TestBase.ValueTupleRef 813664"];
44 [label="TestReferences.NetFx.ValueTuple.tuplelib 813665"];
45 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 813666"];
46 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 813667"];
47 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 813668"];
48 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 813669"];
49 [label="return references; 813670"];
50 [label="options 813671"];
51 [label="parseOptions 813672"];
52 [label="assemblyName 813673"];
53 [label="sourceFileName 813674"];
54 [label="skipUsesIsNullable 813675"];
55 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 813676"];
56 [label="param CreateEmptyCompilation(CSharpTestSource source) 813677"];
57 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 813678"];
58 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 813679"];
59 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 813680"];
60 [label="param CreateEmptyCompilation(string assemblyName = '') 813681"];
61 [label="param CreateEmptyCompilation(string sourceFileName = '') 813682"];
62 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 813683"];
63 [label="source 813684"];
64 [label="references 813685"];
65 [label="options 813686"];
66 [label="parseOptions 813687"];
67 [label="assemblyName 813688"];
68 [label="sourceFileName 813689"];
69 [label="skipUsesIsNullable 813690"];
70 [label="null 813691"];
71 [label="experimentalFeature: null 813692"];
72 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 813693"];
73 [label="param CreateCompilationCore(CSharpTestSource source) 813694"];
74 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 813695"];
75 [label="param CreateCompilationCore(CSharpCompilationOptions options) 813696"];
76 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 813697"];
77 [label="param CreateCompilationCore(string assemblyName) 813698"];
78 [label="param CreateCompilationCore(string sourceFileName) 813699"];
79 [label="param CreateCompilationCore(bool skipUsesIsNullable) 813700"];
80 [label="param CreateCompilationCore(MessageID? experimentalFeature) 813701"];
81 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 813702"];
82 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 813703"];
83 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 813704"];
84 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 813705"];
85 [label="param GetSyntaxTrees(string sourceFileName = '') 813706"];
86 [label="param GetSyntaxTrees(this) 813707"];
87 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 813708"];
88 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 813709"];
89 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 813710"];
90 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 813711"];
91 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 813712"];
92 [label="param Parse(string text) 813713"];
93 [label="param Parse(string filename = '') 813714"];
94 [label="param Parse(CSharpParseOptions options = null) 813715"];
95 [label="param Parse(Encoding encoding = null) 813716"];
96 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 813717"];
97 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 813718"];
98 [label="options = TestOptions.Regular; 813719"];
99 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 813720"];
100 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 813721"];
101 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 813722"];
102 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 813723"];
103 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 813724"];
104 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 813725"];
105 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 813726"];
106 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 813727"];
107 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 813728"];
108 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 813729"];
109 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 813730"];
110 [label="param CheckSerializable(SyntaxTree tree) 813731"];
111 [label="var stream = new MemoryStream(); 813732"];
112 [label="var root = tree.GetRoot(); 813733"];
113 [label="var root = tree.GetRoot(); 813734"];
114 [label="root.SerializeTo(stream); 813735"];
115 [label="root.SerializeTo(stream); 813736"];
116 [label="root.SerializeTo(stream); 813737"];
117 [label="stream.Position = 0; 813738"];
118 [label="stream.Position 813739"];
119 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 813740"];
120 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 813741"];
121 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 813742"];
122 [label="return tree; 813743"];
123 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 813744"];
124 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 813745"];
125 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 813746"];
126 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 813747"];
127 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 813748"];
128 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 813749"];
129 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 813750"];
130 [label="hasTopLevelStatements 813751"];
131 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 813752"];
132 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 813753"];
133 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 813754"];
134 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 813755"];
135 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 813756"];
136 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 813757"];
137 [label="param ValidateIOperations(Func<Compilation> createCompilation) 813758"];
138 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 813759"];
139 [label="return; 813760"];
140 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 813761"];
141 [label="var compilation = createCompilationLambda(); 813762"];
142 [label="var compilation = createCompilationLambda(); 813763"];
143 [label="return Guid.NewGuid().ToString('D'); 813764"];
144 [label="var compilation = createCompilationLambda(); 813765"];
145 [label="OutputKind.ConsoleApplication 813766"];
146 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 813767"];
147 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 813768"];
148 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 813769"];
149 [label="OutputKind.DynamicallyLinkedLibrary 813770"];
150 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 813771"];
151 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 813772"];
152 [label="true 813773"];
153 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 813774"];
154 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 813775"];
155 [label="param Create(string? assemblyName) 813776"];
156 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 813777"];
157 [label="param Create(IEnumerable<MetadataReference>? references = null) 813778"];
158 [label="param Create(CSharpCompilationOptions? options = null) 813779"];
159 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 813780"];
160 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 813781"];
161 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 813782"];
162 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 813783"];
163 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 813784"];
164 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 813785"];
165 [label="param Create(string? assemblyName) 813786"];
166 [label="param Create(CSharpCompilationOptions options) 813787"];
167 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 813788"];
168 [label="param Create(IEnumerable<MetadataReference>? references) 813789"];
169 [label="param Create(CSharpCompilation? previousSubmission) 813790"];
170 [label="param Create(Type? returnType) 813791"];
171 [label="param Create(Type? hostObjectType) 813792"];
172 [label="param Create(bool isSubmission) 813793"];
173 [label="RoslynDebug.Assert(options != null); 813794"];
174 [label="RoslynDebug.Assert(options != null); 813795"];
175 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 813796"];
176 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 813797"];
177 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 813798"];
178 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813799"];
179 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813800"];
180 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813801"];
181 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813802"];
182 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813803"];
183 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813804"];
184 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813805"];
185 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813806"];
186 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813807"];
187 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 813808"];
188 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 813809"];
189 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 813810"];
190 [label="param SyntaxAndDeclarationManager(string scriptClassName) 813811"];
191 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 813812"];
192 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 813813"];
193 [label="param SyntaxAndDeclarationManager(bool isSubmission) 813814"];
194 [label="param SyntaxAndDeclarationManager(State state) 813815"];
195 [label="param SyntaxAndDeclarationManager(this) 813816"];
196 [label="externalSyntaxTrees 813817"];
197 [label="scriptClassName 813818"];
198 [label="resolver 813819"];
199 [label="messageProvider 813820"];
200 [label="isSubmission 813821"];
201 [label="param SyntaxAndDeclarationManager(this) 813822"];
202 [label="param SyntaxAndDeclarationManager(this) 813823"];
203 [label="_lazyState 813824"];
204 [label="_lazyState 813825"];
205 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 813826"];
206 [label="param CSharpCompilation(string? assemblyName) 813827"];
207 [label="param CSharpCompilation(CSharpCompilationOptions options) 813828"];
208 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 813829"];
209 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 813830"];
210 [label="param CSharpCompilation(Type? submissionReturnType) 813831"];
211 [label="param CSharpCompilation(Type? hostObjectType) 813832"];
212 [label="param CSharpCompilation(bool isSubmission) 813833"];
213 [label="param CSharpCompilation(ReferenceManager? referenceManager) 813834"];
214 [label="param CSharpCompilation(bool reuseReferenceManager) 813835"];
215 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 813836"];
216 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 813837"];
217 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 813838"];
218 [label="param CSharpCompilation(this) 813839"];
219 [label="assemblyName 813840"];
220 [label="options 813841"];
221 [label="references 813842"];
222 [label="previousSubmission 813843"];
223 [label="submissionReturnType 813844"];
224 [label="hostObjectType 813845"];
225 [label="isSubmission 813846"];
226 [label="referenceManager 813847"];
227 [label="reuseReferenceManager 813848"];
228 [label="syntaxAndDeclarations 813849"];
229 [label="syntaxAndDeclarations.ExternalSyntaxTrees 813850"];
230 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 813851"];
231 [label="semanticModelProvider 813852"];
232 [label="eventQueue 813853"];
233 [label="param CSharpCompilation(this) 813854"];
234 [label="param CSharpCompilation(string? assemblyName) 813855"];
235 [label="param CSharpCompilation(CSharpCompilationOptions options) 813856"];
236 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 813857"];
237 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 813858"];
238 [label="param CSharpCompilation(Type? submissionReturnType) 813859"];
239 [label="param CSharpCompilation(Type? hostObjectType) 813860"];
240 [label="param CSharpCompilation(bool isSubmission) 813861"];
241 [label="param CSharpCompilation(ReferenceManager? referenceManager) 813862"];
242 [label="param CSharpCompilation(bool reuseReferenceManager) 813863"];
243 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 813864"];
244 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 813865"];
245 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 813866"];
246 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 813867"];
247 [label="param CSharpCompilation(this) 813868"];
248 [label="assemblyName 813869"];
249 [label="references 813870"];
250 [label="features 813871"];
251 [label="isSubmission 813872"];
252 [label="semanticModelProvider 813873"];
253 [label="eventQueue 813874"];
254 [label="param CSharpCompilation(this) 813875"];
255 [label="param CSharpCompilation(this) 813876"];
256 [label="_options 813877"];
257 [label="_globalImports 813878"];
258 [label="_previousSubmissionImports 813879"];
259 [label="_globalNamespaceAlias 813880"];
260 [label="_scriptClass 813881"];
261 [label="_lazyHostObjectTypeSymbol 813882"];
262 [label="_lazyImportInfos 813883"];
263 [label="_conversions 813884"];
264 [label="_anonymousTypeManager 813885"];
265 [label="_lazyGlobalNamespace 813886"];
266 [label="builtInOperators 813887"];
267 [label="_lazyAssemblySymbol 813888"];
268 [label="_referenceManager 813889"];
269 [label="_syntaxAndDeclarations 813890"];
270 [label="_lazyEntryPoint 813891"];
271 [label="_lazyEmitNullablePublicOnly 813892"];
272 [label="_lazyCompilationUnitCompletedTrees 813893"];
273 [label="NullableAnalysisData 813894"];
274 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 813895"];
275 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 813896"];
276 [label="_externAliasTargets 813897"];
277 [label="_moduleInitializerMethods 813898"];
278 [label="_binderFactories 813899"];
279 [label="_ignoreAccessibilityBinderFactories 813900"];
280 [label="_lazyDeclarationDiagnostics 813901"];
281 [label="_declarationDiagnosticsFrozen 813902"];
282 [label="new DiagnosticBag() 813903"];
283 [label="_additionalCodegenWarnings = new DiagnosticBag() 813904"];
284 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 813905"];
285 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 813906"];
286 [label="WellKnownMemberSignatureComparer 813907"];
287 [label="_options 813908"];
288 [label="this.builtInOperators = new BuiltInOperators(this); 813909"];
289 [label="this.builtInOperators = new BuiltInOperators(this); 813910"];
290 [label="new BuiltInOperators(this) 813911"];
291 [label="param BuiltInOperators(CSharpCompilation compilation) 813912"];
292 [label="param BuiltInOperators(this) 813913"];
293 [label="_compilation 813914"];
294 [label="_builtInUnaryOperators 813915"];
295 [label="_builtInOperators 813916"];
296 [label="_compilation 813917"];
297 [label="this.builtInOperators 813918"];
298 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 813919"];
299 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 813920"];
300 [label="_scriptClass 813921"];
301 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 813922"];
302 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 813923"];
303 [label="_globalImports 813924"];
304 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 813925"];
305 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 813926"];
306 [label="_previousSubmissionImports 813927"];
307 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 813928"];
308 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 813929"];
309 [label="_globalNamespaceAlias 813930"];
310 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 813931"];
311 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 813932"];
312 [label="_anonymousTypeManager 813933"];
313 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 813934"];
314 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 813935"];
315 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 813936"];
316 [label="LanguageVersion? result = null; 813937"];
317 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 813938"];
318 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 813939"];
319 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 813940"];
320 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 813941"];
321 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 813942"];
322 [label="this.LanguageVersion 813943"];
323 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 813944"];
324 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 813945"];
325 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 813946"];
326 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 813947"];
327 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 813948"];
328 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 813949"];
329 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 813950"];
330 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 813951"];
331 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 813952"];
332 [label="this.Options 813953"];
333 [label="get\n            {\n                return _options;\n            } 813954"];
334 [label="return _options; 813955"];
335 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 813956"];
336 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 813957"];
337 [label="_referenceManager 813958"];
338 [label="_syntaxAndDeclarations 813959"];
339 [label="Debug.Assert(_lazyAssemblySymbol is null); 813960"];
340 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 813961"];
341 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 813962"];
342 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 813963"];
343 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 813964"];
344 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 813965"];
345 [label="compilation.AddSyntaxTrees(syntaxTrees) 813966"];
346 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 813967"];
347 [label="param AddSyntaxTrees(this) 813968"];
348 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 813969"];
349 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 813970"];
350 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 813971"];
351 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 813972"];
352 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 813973"];
353 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 813974"];
354 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 813975"];
355 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 813976"];
356 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 813977"];
357 [label="bool reuseReferenceManager = true; 813978"];
358 [label="int i = 0; 813979"];
359 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 813980"];
360 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 813981"];
361 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 813982"];
362 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 813983"];
363 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 813984"];
364 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 813985"];
365 [label="externalSyntaxTrees.Add(tree); 813986"];
366 [label="externalSyntaxTrees.Add(tree); 813987"];
367 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 813988"];
368 [label="i++; 813989"];
369 [label="externalSyntaxTrees.Free(); 813990"];
370 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 813991"];
371 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 813992"];
372 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 813993"];
373 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 813994"];
374 [label="param AddSyntaxTrees(this) 813995"];
375 [label="var scriptClassName = this.ScriptClassName; 813996"];
376 [label="var resolver = this.Resolver; 813997"];
377 [label="var messageProvider = this.MessageProvider; 813998"];
378 [label="var isSubmission = this.IsSubmission; 813999"];
379 [label="var state = _lazyState; 814000"];
380 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 814001"];
381 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 814002"];
382 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 814003"];
383 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 814004"];
384 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 814005"];
385 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 814006"];
386 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 814007"];
387 [label="param WithExternalSyntaxTrees(this) 814008"];
388 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 814009"];
389 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 814010"];
390 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 814011"];
391 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 814012"];
392 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 814013"];
393 [label="param SyntaxAndDeclarationManager(string scriptClassName) 814014"];
394 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 814015"];
395 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 814016"];
396 [label="param SyntaxAndDeclarationManager(bool isSubmission) 814017"];
397 [label="param SyntaxAndDeclarationManager(State state) 814018"];
398 [label="param SyntaxAndDeclarationManager(this) 814019"];
399 [label="param SyntaxAndDeclarationManager(this) 814020"];
400 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 814021"];
401 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 814022"];
402 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 814023"];
403 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 814024"];
404 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 814025"];
405 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 814026"];
406 [label="param Update(ReferenceManager referenceManager) 814027"];
407 [label="param Update(bool reuseReferenceManager) 814028"];
408 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 814029"];
409 [label="param Update(this) 814030"];
410 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814031"];
411 [label="this.PreviousSubmission 814032"];
412 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 814033"];
413 [label="ScriptCompilationInfo 814034"];
414 [label="ScriptCompilationInfo?.PreviousScriptCompilation 814035"];
415 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814036"];
416 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814037"];
417 [label="this.SubmissionReturnType 814038"];
418 [label="=> ScriptCompilationInfo 814039"];
419 [label="ScriptCompilationInfo 814040"];
420 [label="this.HostObjectType 814041"];
421 [label="=> ScriptCompilationInfo 814042"];
422 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814043"];
423 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814044"];
424 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814045"];
425 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 814046"];
426 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 814047"];
427 [label="param CSharpCompilation(string? assemblyName) 814048"];
428 [label="param CSharpCompilation(CSharpCompilationOptions options) 814049"];
429 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 814050"];
430 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 814051"];
431 [label="param CSharpCompilation(Type? submissionReturnType) 814052"];
432 [label="param CSharpCompilation(Type? hostObjectType) 814053"];
433 [label="param CSharpCompilation(bool isSubmission) 814054"];
434 [label="param CSharpCompilation(ReferenceManager? referenceManager) 814055"];
435 [label="param CSharpCompilation(bool reuseReferenceManager) 814056"];
436 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 814057"];
437 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 814058"];
438 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 814059"];
439 [label="param CSharpCompilation(this) 814060"];
440 [label="previousSubmission 814061"];
441 [label="submissionReturnType 814062"];
442 [label="hostObjectType 814063"];
443 [label="syntaxAndDeclarations.ExternalSyntaxTrees 814064"];
444 [label="eventQueue 814065"];
445 [label="param CSharpCompilation(this) 814066"];
446 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 814067"];
447 [label="param CSharpCompilation(Type? submissionReturnType) 814068"];
448 [label="param CSharpCompilation(Type? hostObjectType) 814069"];
449 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 814070"];
450 [label="param CSharpCompilation(this) 814071"];
451 [label="eventQueue 814072"];
452 [label="param CSharpCompilation(this) 814073"];
453 [label="_options 814074"];
454 [label="_globalImports 814075"];
455 [label="_previousSubmissionImports 814076"];
456 [label="_globalNamespaceAlias 814077"];
457 [label="_scriptClass 814078"];
458 [label="_lazyHostObjectTypeSymbol 814079"];
459 [label="_lazyImportInfos 814080"];
460 [label="_conversions 814081"];
461 [label="_anonymousTypeManager 814082"];
462 [label="_lazyGlobalNamespace 814083"];
463 [label="builtInOperators 814084"];
464 [label="_lazyAssemblySymbol 814085"];
465 [label="_referenceManager 814086"];
466 [label="_syntaxAndDeclarations 814087"];
467 [label="_lazyEntryPoint 814088"];
468 [label="_lazyEmitNullablePublicOnly 814089"];
469 [label="_lazyCompilationUnitCompletedTrees 814090"];
470 [label="NullableAnalysisData 814091"];
471 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 814092"];
472 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 814093"];
473 [label="_externAliasTargets 814094"];
474 [label="_moduleInitializerMethods 814095"];
475 [label="_binderFactories 814096"];
476 [label="_ignoreAccessibilityBinderFactories 814097"];
477 [label="_lazyDeclarationDiagnostics 814098"];
478 [label="_declarationDiagnosticsFrozen 814099"];
479 [label="new DiagnosticBag() 814100"];
480 [label="_additionalCodegenWarnings = new DiagnosticBag() 814101"];
481 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 814102"];
482 [label="this.builtInOperators = new BuiltInOperators(this); 814103"];
483 [label="this.builtInOperators = new BuiltInOperators(this); 814104"];
484 [label="new BuiltInOperators(this) 814105"];
485 [label="param BuiltInOperators(CSharpCompilation compilation) 814106"];
486 [label="param BuiltInOperators(this) 814107"];
487 [label="_compilation 814108"];
488 [label="_builtInUnaryOperators 814109"];
489 [label="_builtInOperators 814110"];
490 [label="_compilation 814111"];
491 [label="this.builtInOperators 814112"];
492 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 814113"];
493 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 814114"];
494 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 814115"];
495 [label="LanguageVersion? result = null; 814116"];
496 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 814117"];
497 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 814118"];
498 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 814119"];
499 [label="result = version; 814120"];
500 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 814121"];
501 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 814122"];
502 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 814123"];
503 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 814124"];
504 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 814125"];
505 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 814126"];
506 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 814127"];
507 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 814128"];
508 [label="referenceManager.AssertCanReuseForCompilation(this); 814129"];
509 [label="referenceManager.AssertCanReuseForCompilation(this); 814130"];
510 [label="_referenceManager 814131"];
511 [label="Debug.Assert(_lazyAssemblySymbol is null); 814132"];
512 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 814133"];
513 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 814134"];
514 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 814135"];
515 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 814136"];
516 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 814137"];
517 [label="return compilation; 814138"];
518 [label="var compilation = createCompilationLambda(); 814139"];
519 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 814140"];
520 [label="IsNullableEnabled(compilation) 814141"];
521 [label="param IsNullableEnabled(CSharpCompilation compilation) 814142"];
522 [label="compilation.SyntaxTrees 814143"];
523 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 814144"];
524 [label="_syntaxAndDeclarations.GetLazyState() 814145"];
525 [label="param GetLazyState(this) 814146"];
526 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814147"];
527 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814148"];
528 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 814149"];
529 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 814150"];
530 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 814151"];
531 [label="param CreateState(string scriptClassName) 814152"];
532 [label="param CreateState(SourceReferenceResolver resolver) 814153"];
533 [label="param CreateState(CommonMessageProvider messageProvider) 814154"];
534 [label="param CreateState(bool isSubmission) 814155"];
535 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 814156"];
536 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 814157"];
537 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 814158"];
538 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 814159"];
539 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 814160"];
540 [label="var declTable = DeclarationTable.Empty; 814161"];
541 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 814162"];
542 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814163"];
543 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814164"];
544 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814165"];
545 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814166"];
546 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814167"];
547 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814168"];
548 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814169"];
549 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814170"];
550 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814171"];
551 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814172"];
552 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 814173"];
553 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 814174"];
554 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 814175"];
555 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 814176"];
556 [label="param AppendAllSyntaxTrees(string scriptClassName) 814177"];
557 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 814178"];
558 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 814179"];
559 [label="param AppendAllSyntaxTrees(bool isSubmission) 814180"];
560 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 814181"];
561 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 814182"];
562 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 814183"];
563 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 814184"];
564 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 814185"];
565 [label="var sourceCodeKind = tree.Options.Kind; 814186"];
566 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 814187"];
567 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 814188"];
568 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 814189"];
569 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 814190"];
570 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 814191"];
571 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 814192"];
572 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 814193"];
573 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 814194"];
574 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 814195"];
575 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 814196"];
576 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 814197"];
577 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 814198"];
578 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 814199"];
579 [label="declMapBuilder.Add(tree, lazyRoot); 814200"];
580 [label="declMapBuilder.Add(tree, lazyRoot); 814201"];
581 [label="declMapBuilder.Add(tree, lazyRoot); 814202"];
582 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 814203"];
583 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 814204"];
584 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 814205"];
585 [label="treesBuilder.Add(tree); 814206"];
586 [label="treesBuilder.Add(tree); 814207"];
587 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 814208"];
588 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 814209"];
589 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 814210"];
590 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 814211"];
591 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 814212"];
592 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 814213"];
593 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 814214"];
594 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 814215"];
595 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 814216"];
596 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 814217"];
597 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 814218"];
598 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 814219"];
599 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 814220"];
600 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 814221"];
601 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 814222"];
602 [label="param State(DeclarationTable declarationTable) 814223"];
603 [label="param State(this) 814224"];
604 [label="OrdinalMap 814225"];
605 [label="LoadDirectiveMap 814226"];
606 [label="LoadedSyntaxTreeMap 814227"];
607 [label="RootNamespaces 814228"];
608 [label="DeclarationTable 814229"];
609 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 814230"];
610 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 814231"];
611 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 814232"];
612 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 814233"];
613 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 814234"];
614 [label="this.SyntaxTrees 814235"];
615 [label="this.OrdinalMap 814236"];
616 [label="this.LoadDirectiveMap 814237"];
617 [label="this.LoadedSyntaxTreeMap 814238"];
618 [label="this.RootNamespaces 814239"];
619 [label="this.DeclarationTable 814240"];
620 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 814241"];
621 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 814242"];
622 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 814243"];
623 [label="return _lazyState; 814244"];
624 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 814245"];
625 [label="var trees = compilation.SyntaxTrees; 814246"];
626 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 814247"];
627 [label="var options = (CSharpParseOptions)trees[0].Options; 814248"];
628 [label="var options = (CSharpParseOptions)trees[0].Options; 814249"];
629 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 814250"];
630 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 814251"];
631 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 814252"];
632 [label="return compilation; 814253"];
633 [label="using (var output = new MemoryStream())\n            using (var metadataOutput = new MemoryStream())\n            {\n                EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false));\n                CustomAssert.True(emitResult.Success);\n                emitResult.Diagnostics.Verify();\n\n                VerifyMethods(output, 'C', new[] { 'System.Int32 C.<PrivateSetter>k__BackingField', 'System.Int32 C.PrivateSetter.get', 'void C.PrivateSetter.set',\n                    'C..ctor()', 'System.Int32 C.PrivateSetter { get; private set; }' });\n                VerifyMethods(metadataOutput, 'C', new[] { 'System.Int32 C.PrivateSetter.get', 'C..ctor()', 'System.Int32 C.PrivateSetter { get; }' });\n                VerifyMvid(output, hasMvidSection: false);\n                VerifyMvid(metadataOutput, hasMvidSection: true);\n            } 814254"];
634 [label="using (var metadataOutput = new MemoryStream())\n            {\n                EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false));\n                CustomAssert.True(emitResult.Success);\n                emitResult.Diagnostics.Verify();\n\n                VerifyMethods(output, 'C', new[] { 'System.Int32 C.<PrivateSetter>k__BackingField', 'System.Int32 C.PrivateSetter.get', 'void C.PrivateSetter.set',\n                    'C..ctor()', 'System.Int32 C.PrivateSetter { get; private set; }' });\n                VerifyMethods(metadataOutput, 'C', new[] { 'System.Int32 C.PrivateSetter.get', 'C..ctor()', 'System.Int32 C.PrivateSetter { get; }' });\n                VerifyMvid(output, hasMvidSection: false);\n                VerifyMvid(metadataOutput, hasMvidSection: true);\n            } 814255"];
635 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 814256"];
636 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 814257"];
637 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 814258"];
638 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 814259"];
639 [label="get { return _options; } 814260"];
640 [label="return _options; 814261"];
641 [label="get { return _syntaxAndDeclarations.MessageProvider; } 814262"];
642 [label="return _syntaxAndDeclarations.MessageProvider; 814263"];
643 [label="param CreateModuleBuilder(EmitOptions emitOptions) 814264"];
644 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 814265"];
645 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 814266"];
646 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 814267"];
647 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 814268"];
648 [label="param CreateModuleBuilder(CompilationTestData? testData) 814269"];
649 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 814270"];
650 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 814271"];
651 [label="param CreateModuleBuilder(this) 814272"];
652 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 814273"];
653 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 814274"];
654 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 814275"];
655 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 814276"];
656 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 814277"];
657 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 814278"];
658 [label="param GetRuntimeMetadataVersion(this) 814279"];
659 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 814280"];
660 [label="GetRuntimeMetadataVersion(emitOptions) 814281"];
661 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 814282"];
662 [label="param GetRuntimeMetadataVersion(this) 814283"];
663 [label="Assembly 814284"];
664 [label="get\n            {\n                return SourceAssembly;\n            } 814285"];
665 [label="SourceAssembly 814286"];
666 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 814287"];
667 [label="GetBoundReferenceManager() 814288"];
668 [label="param GetBoundReferenceManager(this) 814289"];
669 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814290"];
670 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 814291"];
671 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 814292"];
672 [label="get { return this.Declarations.ReferenceDirectives; } 814293"];
673 [label="this.Declarations 814294"];
674 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 814295"];
675 [label="_syntaxAndDeclarations.GetLazyState() 814296"];
676 [label="param GetLazyState(this) 814297"];
677 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 814298"];
678 [label="return this.Declarations.ReferenceDirectives; 814299"];
679 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 814300"];
680 [label="_syntaxAndDeclarations.GetLazyState() 814301"];
681 [label="Debug.Assert(_lazyAssemblySymbol is object); 814302"];
682 [label="return _referenceManager; 814303"];
683 [label="GetBoundReferenceManager(); 814304"];
684 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814305"];
685 [label="return _lazyAssemblySymbol; 814306"];
686 [label="return SourceAssembly; 814307"];
687 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 814308"];
688 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 814309"];
689 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 814310"];
690 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 814311"];
691 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 814312"];
692 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 814313"];
693 [label="return runtimeMDVersion; 814314"];
694 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 814315"];
695 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 814316"];
696 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 814317"];
697 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 814318"];
698 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 814319"];
699 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 814320"];
700 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 814321"];
701 [label="get { return SourceAssembly.IsDelaySigned; } 814322"];
702 [label="SourceAssembly 814323"];
703 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 814324"];
704 [label="GetBoundReferenceManager() 814325"];
705 [label="return _referenceManager; 814326"];
706 [label="GetBoundReferenceManager(); 814327"];
707 [label="return SourceAssembly.IsDelaySigned; 814328"];
708 [label="SourceAssembly.IsDelaySigned 814329"];
709 [label="get\n            {\n                return _options;\n            } 814330"];
710 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 814331"];
711 [label="Declarations 814332"];
712 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 814333"];
713 [label="_syntaxAndDeclarations.GetLazyState() 814334"];
714 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814335"];
715 [label="return Declarations.GetMergedRoot(this); 814336"];
716 [label="return Declarations.GetMergedRoot(this); 814337"];
717 [label="return Declarations.GetMergedRoot(this); 814338"];
718 [label="_syntaxAndDeclarations.GetLazyState() 814339"];
719 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814340"];
720 [label="get { return SourceAssembly.StrongNameKeys; } 814341"];
721 [label="SourceAssembly 814342"];
722 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 814343"];
723 [label="GetBoundReferenceManager() 814344"];
724 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814345"];
725 [label="return _referenceManager; 814346"];
726 [label="GetBoundReferenceManager(); 814347"];
727 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814348"];
728 [label="return SourceAssembly.StrongNameKeys; 814349"];
729 [label="SourceAssembly.StrongNameKeys 814350"];
730 [label="get\n            {\n                return _options;\n            } 814351"];
731 [label="=> 0x30 814352"];
732 [label="0x30 814353"];
733 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 814354"];
734 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 814355"];
735 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 814356"];
736 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 814357"];
737 [label="PEModuleBuilder moduleBeingBuilt; 814358"];
738 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 814359"];
739 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 814360"];
740 [label="_options.OutputKind.IsValid() 814361"];
741 [label="_options.OutputKind 814362"];
742 [label="SourceAssembly 814363"];
743 [label="return _referenceManager; 814364"];
744 [label="GetBoundReferenceManager(); 814365"];
745 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814366"];
746 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 814367"];
747 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 814368"];
748 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 814369"];
749 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 814370"];
750 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 814371"];
751 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 814372"];
752 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 814373"];
753 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 814374"];
754 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 814375"];
755 [label="param PEAssemblyBuilder(OutputKind outputKind) 814376"];
756 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 814377"];
757 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 814378"];
758 [label="param PEAssemblyBuilder(this) 814379"];
759 [label="sourceAssembly 814380"];
760 [label="emitOptions 814381"];
761 [label="outputKind 814382"];
762 [label="serializationProperties 814383"];
763 [label="manifestResources 814384"];
764 [label="ImmutableArray<NamedTypeSymbol>.Empty 814385"];
765 [label="param PEAssemblyBuilder(this) 814386"];
766 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 814387"];
767 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 814388"];
768 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 814389"];
769 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 814390"];
770 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 814391"];
771 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 814392"];
772 [label="param PEAssemblyBuilderBase(this) 814393"];
773 [label="0 814394"];
774 [label="sourceAssembly.Modules[0] 814395"];
775 [label="emitOptions 814396"];
776 [label="outputKind 814397"];
777 [label="serializationProperties 814398"];
778 [label="manifestResources 814399"];
779 [label="param PEAssemblyBuilderBase(this) 814400"];
780 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 814401"];
781 [label="param PEModuleBuilder(EmitOptions emitOptions) 814402"];
782 [label="param PEModuleBuilder(OutputKind outputKind) 814403"];
783 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 814404"];
784 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 814405"];
785 [label="param PEModuleBuilder(this) 814406"];
786 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 814407"];
787 [label="sourceModule 814408"];
788 [label="serializationProperties 814409"];
789 [label="manifestResources 814410"];
790 [label="outputKind 814411"];
791 [label="emitOptions 814412"];
792 [label="new ModuleCompilationState() 814413"];
793 [label="param ModuleCompilationState(this) 814414"];
794 [label="param PEModuleBuilder(this) 814415"];
795 [label="param PEModuleBuilder(this) 814416"];
796 [label="get\n            {\n                return true;\n            } 814417"];
797 [label="return true; 814418"];
798 [label="param PEModuleBuilder(this) 814419"];
799 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 814420"];
800 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 814421"];
801 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 814422"];
802 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 814423"];
803 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 814424"];
804 [label="new ConcurrentSet<TypeSymbol>() 814425"];
805 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 814426"];
806 [label="_embeddedTypesManagerOpt 814427"];
807 [label="_metadataName 814428"];
808 [label="_fixedImplementationTypes 814429"];
809 [label="_needsGeneratedAttributes 814430"];
810 [label="_needsGeneratedAttributes_IsFrozen 814431"];
811 [label="var specifiedName = sourceModule.MetadataName; 814432"];
812 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 814433"];
813 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 814434"];
814 [label="_metadataName 814435"];
815 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 814436"];
816 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 814437"];
817 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 814438"];
818 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 814439"];
819 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 814440"];
820 [label="_sourceAssembly 814441"];
821 [label="_lazyEmbeddedAttribute 814442"];
822 [label="_lazyIsReadOnlyAttribute 814443"];
823 [label="_lazyIsByRefLikeAttribute 814444"];
824 [label="_lazyIsUnmanagedAttribute 814445"];
825 [label="_lazyNullableAttribute 814446"];
826 [label="_lazyNullableContextAttribute 814447"];
827 [label="_lazyNullablePublicOnlyAttribute 814448"];
828 [label="_lazyNativeIntegerAttribute 814449"];
829 [label="_metadataName 814450"];
830 [label="Debug.Assert(sourceAssembly is object); 814451"];
831 [label="_sourceAssembly 814452"];
832 [label="_additionalTypes = additionalTypes.NullToEmpty(); 814453"];
833 [label="_additionalTypes 814454"];
834 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 814455"];
835 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 814456"];
836 [label="(emitOptions.OutputNameOverride == null) 814457"];
837 [label="sourceAssembly.MetadataName 814458"];
838 [label="_metadataName 814459"];
839 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 814460"];
840 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 814461"];
841 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 814462"];
842 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 814463"];
843 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 814464"];
844 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 814465"];
845 [label="moduleBeingBuilt.SourceLinkStreamOpt 814466"];
846 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 814467"];
847 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 814468"];
848 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 814469"];
849 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 814470"];
850 [label="return moduleBeingBuilt; 814471"];
851 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 814472"];
852 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 814473"];
853 [label="param CompileMethods(bool emittingPdb) 814474"];
854 [label="param CompileMethods(bool emitMetadataOnly) 814475"];
855 [label="param CompileMethods(bool emitTestCoverageData) 814476"];
856 [label="param CompileMethods(DiagnosticBag diagnostics) 814477"];
857 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 814478"];
858 [label="param CompileMethods(CancellationToken cancellationToken) 814479"];
859 [label="param CompileMethods(this) 814480"];
860 [label="PooledHashSet<int>? excludeDiagnostics = null; 814481"];
861 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 814482"];
862 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 814483"];
863 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 814484"];
864 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 814485"];
865 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 814486"];
866 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 814487"];
867 [label="param GetDiagnostics(CompilationStage stage) 814488"];
868 [label="param GetDiagnostics(bool includeEarlierStages) 814489"];
869 [label="param GetDiagnostics(CancellationToken cancellationToken) 814490"];
870 [label="param GetDiagnostics(this) 814491"];
871 [label="var diagnostics = DiagnosticBag.GetInstance(); 814492"];
872 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 814493"];
873 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 814494"];
874 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 814495"];
875 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 814496"];
876 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 814497"];
877 [label="param GetDiagnostics(CompilationStage stage) 814498"];
878 [label="param GetDiagnostics(bool includeEarlierStages) 814499"];
879 [label="param GetDiagnostics(DiagnosticBag diagnostics) 814500"];
880 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 814501"];
881 [label="param GetDiagnostics(this) 814502"];
882 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 814503"];
883 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 814504"];
884 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 814505"];
885 [label="this.SyntaxTrees 814506"];
886 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 814507"];
887 [label="_syntaxAndDeclarations.GetLazyState() 814508"];
888 [label="param GetLazyState(this) 814509"];
889 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814510"];
890 [label="var syntaxTrees = this.SyntaxTrees; 814511"];
891 [label="this.Options 814512"];
892 [label="get\n            {\n                return _options;\n            } 814513"];
893 [label="return _options; 814514"];
894 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 814515"];
895 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 814516"];
896 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 814517"];
897 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 814518"];
898 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 814519"];
899 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 814520"];
900 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 814521"];
901 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 814522"];
902 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 814523"];
903 [label="ImmutableArray<LoadDirective> loadDirectives; 814524"];
904 [label="loadDirectives 814525"];
905 [label="syntaxAndDeclarations.GetLazyState() 814526"];
906 [label="param GetLazyState(this) 814527"];
907 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 814528"];
908 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 814529"];
909 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 814530"];
910 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 814531"];
911 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 814532"];
912 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 814533"];
913 [label="cancellationToken.ThrowIfCancellationRequested(); 814534"];
914 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 814535"];
915 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 814536"];
916 [label="CheckAssemblyName(builder); 814537"];
917 [label="CheckAssemblyName(builder); 814538"];
918 [label="CheckAssemblyName(builder); 814539"];
919 [label="Options 814540"];
920 [label="get\n            {\n                return _options;\n            } 814541"];
921 [label="return _options; 814542"];
922 [label="builder.AddRange(Options.Errors); 814543"];
923 [label="Options 814544"];
924 [label="get\n            {\n                return _options;\n            } 814545"];
925 [label="return _options; 814546"];
926 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 814547"];
927 [label="cancellationToken.ThrowIfCancellationRequested(); 814548"];
928 [label="GetBoundReferenceManager() 814549"];
929 [label="param GetBoundReferenceManager(this) 814550"];
930 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814551"];
931 [label="return _referenceManager; 814552"];
932 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 814553"];
933 [label="cancellationToken.ThrowIfCancellationRequested(); 814554"];
934 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 814555"];
935 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 814556"];
936 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 814557"];
937 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 814558"];
938 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 814559"];
939 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 814560"];
940 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 814561"];
941 [label="param GetSourceDeclarationDiagnostics(this) 814562"];
942 [label="GlobalImports 814563"];
943 [label="=> _globalImports.Value 814564"];
944 [label="_globalImports.Value 814565"];
945 [label="_globalImports.Value 814566"];
946 [label="=> Imports.FromGlobalUsings(this) 814567"];
947 [label="this 814568"];
948 [label="Imports.FromGlobalUsings(this) 814569"];
949 [label="Imports.FromGlobalUsings(this) 814570"];
950 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 814571"];
951 [label="ScriptCompilationInfo 814572"];
952 [label="ScriptCompilationInfo?.PreviousScriptCompilation 814573"];
953 [label="GlobalImports.Complete(cancellationToken); 814574"];
954 [label="GlobalImports.Complete(cancellationToken); 814575"];
955 [label="GlobalImports.Complete(cancellationToken); 814576"];
956 [label="SourceLocation? location = null; 814577"];
957 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 814578"];
958 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 814579"];
959 [label="Assembly 814580"];
960 [label="get\n            {\n                return SourceAssembly;\n            } 814581"];
961 [label="SourceAssembly 814582"];
962 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 814583"];
963 [label="GetBoundReferenceManager() 814584"];
964 [label="param GetBoundReferenceManager(this) 814585"];
965 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814586"];
966 [label="return _referenceManager; 814587"];
967 [label="GetBoundReferenceManager(); 814588"];
968 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814589"];
969 [label="Assembly.ForceComplete(location, cancellationToken); 814590"];
970 [label="Assembly.ForceComplete(location, cancellationToken); 814591"];
971 [label="Assembly.ForceComplete(location, cancellationToken); 814592"];
972 [label="Assembly.ForceComplete(location, cancellationToken); 814593"];
973 [label="Assembly.ForceComplete(location, cancellationToken); 814594"];
974 [label="SourceAssembly 814595"];
975 [label="GetBoundReferenceManager() 814596"];
976 [label="GetBoundReferenceManager(); 814597"];
977 [label="Declarations 814598"];
978 [label="_syntaxAndDeclarations.GetLazyState() 814599"];
979 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814600"];
980 [label="return Declarations.GetMergedRoot(this); 814601"];
981 [label="_syntaxAndDeclarations.GetLazyState() 814602"];
982 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814603"];
983 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 814604"];
984 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 814605"];
985 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 814606"];
986 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 814607"];
987 [label="var diagnostics = new DiagnosticBag(); 814608"];
988 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 814609"];
989 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 814610"];
990 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 814611"];
991 [label="return _lazyDeclarationDiagnostics; 814612"];
992 [label="param SymbolDeclaredEvent(Symbol symbol) 814613"];
993 [label="param SymbolDeclaredEvent(this) 814614"];
994 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 814615"];
995 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 814616"];
996 [label="param GetUnaliasedReferencedAssemblies(this) 814617"];
997 [label="GetBoundReferenceManager() 814618"];
998 [label="param GetBoundReferenceManager(this) 814619"];
999 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814620"];
1000 [label="return _referenceManager; 814621"];
1001 [label="var referenceManager = GetBoundReferenceManager(); 814622"];
1002 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 814623"];
1003 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 814624"];
1004 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 814625"];
1005 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 814626"];
1006 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 814627"];
1007 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 814628"];
1008 [label="return _additionalCodegenWarnings; 814629"];
1009 [label="GetBoundReferenceManager(); 814630"];
1010 [label="param GetSpecialType(SpecialType specialType) 814631"];
1011 [label="param GetSpecialType(this) 814632"];
1012 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 814633"];
1013 [label="NamedTypeSymbol result; 814634"];
1014 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 814635"];
1015 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 814636"];
1016 [label="Assembly 814637"];
1017 [label="GetBoundReferenceManager(); 814638"];
1018 [label="result = Assembly.GetSpecialType(specialType); 814639"];
1019 [label="result = Assembly.GetSpecialType(specialType); 814640"];
1020 [label="Debug.Assert(result.SpecialType == specialType); 814641"];
1021 [label="return result; 814642"];
1022 [label="param GetBinder(CSharpSyntaxNode syntax) 814643"];
1023 [label="param GetBinder(this) 814644"];
1024 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 814645"];
1025 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 814646"];
1026 [label="GetBinderFactory(syntax.SyntaxTree) 814647"];
1027 [label="param GetBinderFactory(SyntaxTree syntaxTree) 814648"];
1028 [label="param GetBinderFactory(bool ignoreAccessibility = false) 814649"];
1029 [label="param GetBinderFactory(this) 814650"];
1030 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 814651"];
1031 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 814652"];
1032 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 814653"];
1033 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 814654"];
1034 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 814655"];
1035 [label="param GetBinderFactory(SyntaxTree syntaxTree) 814656"];
1036 [label="param GetBinderFactory(bool ignoreAccessibility) 814657"];
1037 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 814658"];
1038 [label="param GetBinderFactory(this) 814659"];
1039 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 814660"];
1040 [label="ignoreAccessibility 814661"];
1041 [label="_binderFactories 814662"];
1042 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 814663"];
1043 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 814664"];
1044 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 814665"];
1045 [label="GetSyntaxTreeOrdinal(syntaxTree) 814666"];
1046 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 814667"];
1047 [label="param GetSyntaxTreeOrdinal(this) 814668"];
1048 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 814669"];
1049 [label="this.ContainsSyntaxTree(tree) 814670"];
1050 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 814671"];
1051 [label="param ContainsSyntaxTree(this) 814672"];
1052 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814673"];
1053 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814674"];
1054 [label="_syntaxAndDeclarations.GetLazyState() 814675"];
1055 [label="param GetLazyState(this) 814676"];
1056 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814677"];
1057 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814678"];
1058 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814679"];
1059 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814680"];
1060 [label="_syntaxAndDeclarations.GetLazyState() 814681"];
1061 [label="param GetLazyState(this) 814682"];
1062 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814683"];
1063 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 814684"];
1064 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 814685"];
1065 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 814686"];
1066 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 814687"];
1067 [label="this.SyntaxTrees 814688"];
1068 [label="param GetLazyState(this) 814689"];
1069 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 814690"];
1070 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 814691"];
1071 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 814692"];
1072 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 814693"];
1073 [label="BinderFactory? previousFactory; 814694"];
1074 [label="var previousWeakReference = binderFactories[treeNum]; 814695"];
1075 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 814696"];
1076 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 814697"];
1077 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 814698"];
1078 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 814699"];
1079 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 814700"];
1080 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 814701"];
1081 [label="param AddNewFactory(SyntaxTree syntaxTree) 814702"];
1082 [label="param AddNewFactory(bool ignoreAccessibility) 814703"];
1083 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 814704"];
1084 [label="param AddNewFactory(this) 814705"];
1085 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814706"];
1086 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814707"];
1087 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814708"];
1088 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814709"];
1089 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814710"];
1090 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 814711"];
1091 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 814712"];
1092 [label="BinderFactory? previousFactory; 814713"];
1093 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 814714"];
1094 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 814715"];
1095 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 814716"];
1096 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 814717"];
1097 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 814718"];
1098 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 814719"];
1099 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 814720"];
1100 [label="return newFactory; 814721"];
1101 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 814722"];
1102 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 814723"];
1103 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 814724"];
1104 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 814725"];
1105 [label="GetAllUnaliasedModules(modules); 814726"];
1106 [label="GetAllUnaliasedModules(modules) 814727"];
1107 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 814728"];
1108 [label="param GetAllUnaliasedModules(this) 814729"];
1109 [label="Assembly 814730"];
1110 [label="get\n            {\n                return SourceAssembly;\n            } 814731"];
1111 [label="GetBoundReferenceManager(); 814732"];
1112 [label="modules.AddRange(Assembly.Modules); 814733"];
1113 [label="modules.AddRange(Assembly.Modules); 814734"];
1114 [label="GetBoundReferenceManager() 814735"];
1115 [label="param GetBoundReferenceManager(this) 814736"];
1116 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814737"];
1117 [label="return _referenceManager; 814738"];
1118 [label="var referenceManager = GetBoundReferenceManager(); 814739"];
1119 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 814740"];
1120 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 814741"];
1121 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 814742"];
1122 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 814743"];
1123 [label="GetAllUnaliasedModules(modules); 814744"];
1124 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 814745"];
1125 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 814746"];
1126 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 814747"];
1127 [label="modules.Free(); 814748"];
1128 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 814749"];
1129 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 814750"];
1130 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 814751"];
1131 [label="return _lazyGlobalNamespace; 814752"];
1132 [label="get\n            {\n                return Assembly.Modules[0];\n            } 814753"];
1133 [label="Assembly 814754"];
1134 [label="get\n            {\n                return SourceAssembly;\n            } 814755"];
1135 [label="SourceAssembly 814756"];
1136 [label="GetBoundReferenceManager() 814757"];
1137 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814758"];
1138 [label="return _referenceManager; 814759"];
1139 [label="GetBoundReferenceManager(); 814760"];
1140 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814761"];
1141 [label="return Assembly.Modules[0]; 814762"];
1142 [label="return Assembly.Modules[0]; 814763"];
1143 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 814764"];
1144 [label="param IsNullableAnalysisEnabledIn(this) 814765"];
1145 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 814766"];
1146 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 814767"];
1147 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 814768"];
1148 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 814769"];
1149 [label="param IsNullableAnalysisEnabledIn(this) 814770"];
1150 [label="GetNullableAnalysisValue() 814771"];
1151 [label="param GetNullableAnalysisValue(this) 814772"];
1152 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 814773"];
1153 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 814774"];
1154 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 814775"];
1155 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 814776"];
1156 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 814777"];
1157 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 814778"];
1158 [label="Options 814779"];
1159 [label="get\n            {\n                return _options;\n            } 814780"];
1160 [label="return _options; 814781"];
1161 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 814782"];
1162 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 814783"];
1163 [label="param GetBinderFactory(SyntaxTree syntaxTree) 814784"];
1164 [label="param GetBinderFactory(bool ignoreAccessibility = false) 814785"];
1165 [label="param GetBinderFactory(this) 814786"];
1166 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 814787"];
1167 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 814788"];
1168 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 814789"];
1169 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 814790"];
1170 [label="param GetBinderFactory(SyntaxTree syntaxTree) 814791"];
1171 [label="param GetBinderFactory(bool ignoreAccessibility) 814792"];
1172 [label="param GetBinderFactory(this) 814793"];
1173 [label="ignoreAccessibility 814794"];
1174 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 814795"];
1175 [label="GetSyntaxTreeOrdinal(syntaxTree) 814796"];
1176 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 814797"];
1177 [label="param GetSyntaxTreeOrdinal(this) 814798"];
1178 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 814799"];
1179 [label="this.ContainsSyntaxTree(tree) 814800"];
1180 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 814801"];
1181 [label="param ContainsSyntaxTree(this) 814802"];
1182 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814803"];
1183 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814804"];
1184 [label="_syntaxAndDeclarations.GetLazyState() 814805"];
1185 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814806"];
1186 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 814807"];
1187 [label="_syntaxAndDeclarations.GetLazyState() 814808"];
1188 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814809"];
1189 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 814810"];
1190 [label="BinderFactory? previousFactory; 814811"];
1191 [label="var previousWeakReference = binderFactories[treeNum]; 814812"];
1192 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 814813"];
1193 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 814814"];
1194 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 814815"];
1195 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 814816"];
1196 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 814817"];
1197 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 814818"];
1198 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 814819"];
1199 [label="param AddNewFactory(SyntaxTree syntaxTree) 814820"];
1200 [label="param AddNewFactory(bool ignoreAccessibility) 814821"];
1201 [label="param AddNewFactory(this) 814822"];
1202 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814823"];
1203 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814824"];
1204 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814825"];
1205 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 814826"];
1206 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 814827"];
1207 [label="BinderFactory? previousFactory; 814828"];
1208 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 814829"];
1209 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 814830"];
1210 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 814831"];
1211 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 814832"];
1212 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 814833"];
1213 [label="get\n            {\n                return Assembly.Modules[0];\n            } 814834"];
1214 [label="Assembly 814835"];
1215 [label="get\n            {\n                return SourceAssembly;\n            } 814836"];
1216 [label="SourceAssembly 814837"];
1217 [label="GetBoundReferenceManager() 814838"];
1218 [label="GetBoundReferenceManager(); 814839"];
1219 [label="return Assembly.Modules[0]; 814840"];
1220 [label="GetBoundReferenceManager(); 814841"];
1221 [label="Debug.Assert(result.SpecialType == specialType); 814842"];
1222 [label="return previousFactory; 814843"];
1223 [label="GetBoundReferenceManager(); 814844"];
1224 [label="Debug.Assert(result.SpecialType == specialType); 814845"];
1225 [label="GetBoundReferenceManager(); 814846"];
1226 [label="param ShouldEmitNullableAttributes(Symbol symbol) 814847"];
1227 [label="param ShouldEmitNullableAttributes(this) 814848"];
1228 [label="RoslynDebug.Assert(symbol is object); 814849"];
1229 [label="RoslynDebug.Assert(symbol is object); 814850"];
1230 [label="Debug.Assert(symbol.IsDefinition); 814851"];
1231 [label="SourceModule 814852"];
1232 [label="get\n            {\n                return Assembly.Modules[0];\n            } 814853"];
1233 [label="Assembly 814854"];
1234 [label="get\n            {\n                return SourceAssembly;\n            } 814855"];
1235 [label="SourceAssembly 814856"];
1236 [label="GetBoundReferenceManager() 814857"];
1237 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814858"];
1238 [label="return _referenceManager; 814859"];
1239 [label="GetBoundReferenceManager(); 814860"];
1240 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814861"];
1241 [label="return Assembly.Modules[0]; 814862"];
1242 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 814863"];
1243 [label="EmitNullablePublicOnly 814864"];
1244 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 814865"];
1245 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 814866"];
1246 [label="SyntaxTrees 814867"];
1247 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 814868"];
1248 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 814869"];
1249 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 814870"];
1250 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 814871"];
1251 [label="_lazyEmitNullablePublicOnly 814872"];
1252 [label="return _lazyEmitNullablePublicOnly.Value(); 814873"];
1253 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 814874"];
1254 [label="return true; 814875"];
1255 [label="Debug.Assert(symbol.IsDefinition); 814876"];
1256 [label="GetBoundReferenceManager(); 814877"];
1257 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 814878"];
1258 [label="GetBoundReferenceManager(); 814879"];
1259 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 814880"];
1260 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 814881"];
1261 [label="param IsFeatureEnabled(MessageID feature) 814882"];
1262 [label="compilation.SyntaxTrees 814883"];
1263 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 814884"];
1264 [label="_syntaxAndDeclarations.GetLazyState() 814885"];
1265 [label="param GetLazyState(this) 814886"];
1266 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 814887"];
1267 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 814888"];
1268 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 814889"];
1269 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 814890"];
1270 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 814891"];
1271 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 814892"];
1272 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 814893"];
1273 [label="_declarationDiagnosticsFrozen = true; 814894"];
1274 [label="_declarationDiagnosticsFrozen 814895"];
1275 [label="_needsGeneratedAttributes_IsFrozen = true; 814896"];
1276 [label="_needsGeneratedAttributes_IsFrozen 814897"];
1277 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 814898"];
1278 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 814899"];
1279 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 814900"];
1280 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 814901"];
1281 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 814902"];
1282 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 814903"];
1283 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 814904"];
1284 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 814905"];
1285 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 814906"];
1286 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 814907"];
1287 [label="param GetClsComplianceDiagnostics(this) 814908"];
1288 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 814909"];
1289 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 814910"];
1290 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 814911"];
1291 [label="var builder = DiagnosticBag.GetInstance(); 814912"];
1292 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 814913"];
1293 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 814914"];
1294 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 814915"];
1295 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 814916"];
1296 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 814917"];
1297 [label="param CheckCompliance(CSharpCompilation compilation) 814918"];
1298 [label="param CheckCompliance(DiagnosticBag diagnostics) 814919"];
1299 [label="param CheckCompliance(CancellationToken cancellationToken) 814920"];
1300 [label="param CheckCompliance(SyntaxTree filterTree = null) 814921"];
1301 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 814922"];
1302 [label="var queue = new ConcurrentQueue<Diagnostic>(); 814923"];
1303 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 814924"];
1304 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 814925"];
1305 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 814926"];
1306 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 814927"];
1307 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 814928"];
1308 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 814929"];
1309 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 814930"];
1310 [label="param ClsComplianceChecker(CSharpCompilation compilation) 814931"];
1311 [label="param ClsComplianceChecker(SyntaxTree filterTree) 814932"];
1312 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 814933"];
1313 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 814934"];
1314 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 814935"];
1315 [label="param ClsComplianceChecker(this) 814936"];
1316 [label="param ClsComplianceChecker(this) 814937"];
1317 [label="_compilation 814938"];
1318 [label="_filterTree 814939"];
1319 [label="_filterSpanWithinTree 814940"];
1320 [label="_diagnostics 814941"];
1321 [label="_declaredOrInheritedCompliance 814942"];
1322 [label="_compilerTasks 814943"];
1323 [label="_compilation 814944"];
1324 [label="_filterTree 814945"];
1325 [label="_filterSpanWithinTree 814946"];
1326 [label="_diagnostics 814947"];
1327 [label="_cancellationToken 814948"];
1328 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 814949"];
1329 [label="_declaredOrInheritedCompliance 814950"];
1330 [label="ConcurrentAnalysis 814951"];
1331 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 814952"];
1332 [label="null 814953"];
1333 [label="_filterTree == null 814954"];
1334 [label="_compilation.Options 814955"];
1335 [label="get\n            {\n                return _options;\n            } 814956"];
1336 [label="return _options; 814957"];
1337 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 814958"];
1338 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 814959"];
1339 [label="_compilerTasks = new ConcurrentStack<Task>(); 814960"];
1340 [label="_compilerTasks 814961"];
1341 [label="compilation.Assembly 814962"];
1342 [label="get\n            {\n                return SourceAssembly;\n            } 814963"];
1343 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 814964"];
1344 [label="return _referenceManager; 814965"];
1345 [label="GetBoundReferenceManager(); 814966"];
1346 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 814967"];
1347 [label="checker.Visit(compilation.Assembly); 814968"];
1348 [label="checker.Visit(compilation.Assembly); 814969"];
1349 [label="checker.Visit(compilation.Assembly); 814970"];
1350 [label="param VisitAssembly(AssemblySymbol symbol) 814971"];
1351 [label="param VisitAssembly(this) 814972"];
1352 [label="_cancellationToken.ThrowIfCancellationRequested(); 814973"];
1353 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 814974"];
1354 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 814975"];
1355 [label="GetDeclaredOrInheritedCompliance(symbol) 814976"];
1356 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 814977"];
1357 [label="param GetDeclaredOrInheritedCompliance(this) 814978"];
1358 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 814979"];
1359 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 814980"];
1360 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 814981"];
1361 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 814982"];
1362 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 814983"];
1363 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 814984"];
1364 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 814985"];
1365 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 814986"];
1366 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 814987"];
1367 [label="Compliance compliance; 814988"];
1368 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 814989"];
1369 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 814990"];
1370 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 814991"];
1371 [label="Location ignoredLocation; 814992"];
1372 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 814993"];
1373 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 814994"];
1374 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 814995"];
1375 [label="param GetDeclaredCompliance(Symbol symbol) 814996"];
1376 [label="param GetDeclaredCompliance(out Location attributeLocation) 814997"];
1377 [label="param GetDeclaredCompliance(this) 814998"];
1378 [label="attributeLocation = null; 814999"];
1379 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 815000"];
1380 [label="return null; 815001"];
1381 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 815002"];
1382 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 815003"];
1383 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 815004"];
1384 [label="compliance = Compliance.ImpliedFalse; 815005"];
1385 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 815006"];
1386 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 815007"];
1387 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 815008"];
1388 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 815009"];
1389 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 815010"];
1390 [label="IsTrue(assemblyCompliance) 815011"];
1391 [label="param IsTrue(Compliance compliance) 815012"];
1392 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 815013"];
1393 [label="return false; 815014"];
1394 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 815015"];
1395 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 815016"];
1396 [label="ModuleSymbol module = symbol.Modules[i]; 815017"];
1397 [label="Location attributeLocation; 815018"];
1398 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 815019"];
1399 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 815020"];
1400 [label="GetDeclaredCompliance(module, out attributeLocation) 815021"];
1401 [label="param GetDeclaredCompliance(Symbol symbol) 815022"];
1402 [label="param GetDeclaredCompliance(out Location attributeLocation) 815023"];
1403 [label="param GetDeclaredCompliance(this) 815024"];
1404 [label="attributeLocation = null; 815025"];
1405 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 815026"];
1406 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 815027"];
1407 [label="i == 0 815028"];
1408 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 815029"];
1409 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 815030"];
1410 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 815031"];
1411 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 815032"];
1412 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 815033"];
1413 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 815034"];
1414 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 815035"];
1415 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 815036"];
1416 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 815037"];
1417 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 815038"];
1418 [label="GetDeclaredOrInheritedCompliance(sourceModule) 815039"];
1419 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 815040"];
1420 [label="param GetDeclaredOrInheritedCompliance(this) 815041"];
1421 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815042"];
1422 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815043"];
1423 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 815044"];
1424 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 815045"];
1425 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 815046"];
1426 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 815047"];
1427 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 815048"];
1428 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 815049"];
1429 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 815050"];
1430 [label="Compliance compliance; 815051"];
1431 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 815052"];
1432 [label="Location ignoredLocation; 815053"];
1433 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 815054"];
1434 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 815055"];
1435 [label="param GetDeclaredCompliance(out Location attributeLocation) 815056"];
1436 [label="param GetDeclaredCompliance(this) 815057"];
1437 [label="attributeLocation = null; 815058"];
1438 [label="return null; 815059"];
1439 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 815060"];
1440 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 815061"];
1441 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 815062"];
1442 [label="GetInheritedCompliance(symbol) 815063"];
1443 [label="param GetInheritedCompliance(Symbol symbol) 815064"];
1444 [label="param GetInheritedCompliance(this) 815065"];
1445 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 815066"];
1446 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 815067"];
1447 [label="System.Diagnostics.Debug.Assert((object)containing != null); 815068"];
1448 [label="System.Diagnostics.Debug.Assert((object)containing != null); 815069"];
1449 [label="return GetDeclaredOrInheritedCompliance(containing); 815070"];
1450 [label="GetDeclaredOrInheritedCompliance(containing) 815071"];
1451 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 815072"];
1452 [label="param GetDeclaredOrInheritedCompliance(this) 815073"];
1453 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815074"];
1454 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815075"];
1455 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 815076"];
1456 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 815077"];
1457 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 815078"];
1458 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 815079"];
1459 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 815080"];
1460 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 815081"];
1461 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 815082"];
1462 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 815083"];
1463 [label="return compliance; 815084"];
1464 [label="IsTrue(GetInheritedCompliance(symbol)) 815085"];
1465 [label="param IsTrue(Compliance compliance) 815086"];
1466 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 815087"];
1467 [label="return false; 815088"];
1468 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 815089"];
1469 [label="param IsTrue(Compliance compliance) 815090"];
1470 [label="Visit(symbol.GlobalNamespace); 815091"];
1471 [label="Visit(symbol.GlobalNamespace); 815092"];
1472 [label="param VisitNamespace(NamespaceSymbol symbol) 815093"];
1473 [label="param VisitNamespace(this) 815094"];
1474 [label="_cancellationToken.ThrowIfCancellationRequested(); 815095"];
1475 [label="if (DoNotVisit(symbol)) return; 815096"];
1476 [label="DoNotVisit(symbol) 815097"];
1477 [label="param DoNotVisit(Symbol symbol) 815098"];
1478 [label="param DoNotVisit(this) 815099"];
1479 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 815100"];
1480 [label="return false; 815101"];
1481 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 815102"];
1482 [label="GetDeclaredOrInheritedCompliance(symbol) 815103"];
1483 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 815104"];
1484 [label="param GetDeclaredOrInheritedCompliance(this) 815105"];
1485 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815106"];
1486 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815107"];
1487 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 815108"];
1488 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 815109"];
1489 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 815110"];
1490 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 815111"];
1491 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815112"];
1492 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 815113"];
1493 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 815114"];
1494 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 815115"];
1495 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 815116"];
1496 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 815117"];
1497 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 815118"];
1498 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 815119"];
1499 [label="return compliance; 815120"];
1500 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 815121"];
1501 [label="param IsTrue(Compliance compliance) 815122"];
1502 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 815123"];
1503 [label="return false; 815124"];
1504 [label="ConcurrentAnalysis 815125"];
1505 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 815126"];
1506 [label="null 815127"];
1507 [label="_filterTree == null 815128"];
1508 [label="_compilation.Options 815129"];
1509 [label="get\n            {\n                return _options;\n            } 815130"];
1510 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 815131"];
1511 [label="VisitNamespaceMembersAsTasks(symbol); 815132"];
1512 [label="VisitNamespaceMembersAsTasks(symbol) 815133"];
1513 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 815134"];
1514 [label="param VisitNamespaceMembersAsTasks(this) 815135"];
1515 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 815136"];
1516 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 815137"];
1517 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 815138"];
1518 [label="VisitNamespaceMembersAsTasks(symbol); 815139"];
1519 [label="checker.WaitForWorkers() 815140"];
1520 [label="param WaitForWorkers(this) 815141"];
1521 [label="var tasks = _compilerTasks; 815142"];
1522 [label="if (tasks == null)\n            {\n                return;\n            } 815143"];
1523 [label="if (tasks == null)\n            {\n                return;\n            } 815144"];
1524 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 815145"];
1525 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 815146"];
1526 [label="curTask.GetAwaiter().GetResult(); 815147"];
1527 [label="checker.WaitForWorkers(); 815148"];
1528 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 815149"];
1529 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 815150"];
1530 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 815151"];
1531 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 815152"];
1532 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 815153"];
1533 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 815154"];
1534 [label="return _lazyClsComplianceDiagnostics; 815155"];
1535 [label="return result.AsImmutable().Concat(clsDiagnostics); 815156"];
1536 [label="return result.AsImmutable().Concat(clsDiagnostics); 815157"];
1537 [label="return result.AsImmutable().Concat(clsDiagnostics); 815158"];
1538 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 815159"];
1539 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 815160"];
1540 [label="cancellationToken.ThrowIfCancellationRequested(); 815161"];
1541 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 815162"];
1542 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 815163"];
1543 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 815164"];
1544 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 815165"];
1545 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 815166"];
1546 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 815167"];
1547 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 815168"];
1548 [label="return diagnostics.ToReadOnlyAndFree(); 815169"];
1549 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 815170"];
1550 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 815171"];
1551 [label="excludeDiagnostics?.Free(); 815172"];
1552 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 815173"];
1553 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 815174"];
1554 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 815175"];
1555 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 815176"];
1556 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815177"];
1557 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815178"];
1558 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815179"];
1559 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815180"];
1560 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815181"];
1561 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815182"];
1562 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815183"];
1563 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815184"];
1564 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 815185"];
1565 [label="param CompileMethodBodies(CSharpCompilation compilation) 815186"];
1566 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 815187"];
1567 [label="param CompileMethodBodies(bool emittingPdb) 815188"];
1568 [label="param CompileMethodBodies(bool emitTestCoverageData) 815189"];
1569 [label="param CompileMethodBodies(bool hasDeclarationErrors) 815190"];
1570 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 815191"];
1571 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 815192"];
1572 [label="param CompileMethodBodies(CancellationToken cancellationToken) 815193"];
1573 [label="Debug.Assert(compilation != null); 815194"];
1574 [label="Debug.Assert(compilation != null); 815195"];
1575 [label="Debug.Assert(diagnostics != null); 815196"];
1576 [label="Debug.Assert(diagnostics != null); 815197"];
1577 [label="compilation.PreviousSubmission 815198"];
1578 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 815199"];
1579 [label="ScriptCompilationInfo 815200"];
1580 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 815201"];
1581 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 815202"];
1582 [label="MethodSymbol entryPoint = null; 815203"];
1583 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 815204"];
1584 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 815205"];
1585 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 815206"];
1586 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 815207"];
1587 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 815208"];
1588 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 815209"];
1589 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 815210"];
1590 [label="param GetEntryPoint(CSharpCompilation compilation) 815211"];
1591 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 815212"];
1592 [label="param GetEntryPoint(bool hasDeclarationErrors) 815213"];
1593 [label="param GetEntryPoint(DiagnosticBag diagnostics) 815214"];
1594 [label="param GetEntryPoint(CancellationToken cancellationToken) 815215"];
1595 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 815216"];
1596 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 815217"];
1597 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 815218"];
1598 [label="param GetEntryPointAndDiagnostics(this) 815219"];
1599 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 815220"];
1600 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 815221"];
1601 [label="EntryPoint? entryPoint; 815222"];
1602 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 815223"];
1603 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 815224"];
1604 [label="GetBoundReferenceManager(); 815225"];
1605 [label="this.Options 815226"];
1606 [label="return _options; 815227"];
1607 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 815228"];
1608 [label="this.ScriptClass 815229"];
1609 [label="get { return _scriptClass.Value; } 815230"];
1610 [label="return _scriptClass.Value; 815231"];
1611 [label="_scriptClass.Value 815232"];
1612 [label="param BindScriptClass(this) 815233"];
1613 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 815234"];
1614 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 815235"];
1615 [label="get { return this.SourceModule.GetPublicSymbol(); } 815236"];
1616 [label="this.SourceModule 815237"];
1617 [label="get\n            {\n                return Assembly.Modules[0];\n            } 815238"];
1618 [label="GetBoundReferenceManager(); 815239"];
1619 [label="return this.SourceModule.GetPublicSymbol(); 815240"];
1620 [label="get\n            {\n                return this.SyntaxTrees;\n            } 815241"];
1621 [label="this.SyntaxTrees 815242"];
1622 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 815243"];
1623 [label="param GetLazyState(this) 815244"];
1624 [label="return this.SyntaxTrees; 815245"];
1625 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 815246"];
1626 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 815247"];
1627 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 815248"];
1628 [label="null 815249"];
1629 [label="ImmutableArray<Diagnostic>.Empty 815250"];
1630 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 815251"];
1631 [label="param EntryPoint(MethodSymbol? methodSymbol) 815252"];
1632 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 815253"];
1633 [label="param EntryPoint(this) 815254"];
1634 [label="MethodSymbol 815255"];
1635 [label="this.MethodSymbol 815256"];
1636 [label="this.Diagnostics 815257"];
1637 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 815258"];
1638 [label="entryPoint = EntryPoint.None; 815259"];
1639 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 815260"];
1640 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 815261"];
1641 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 815262"];
1642 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 815263"];
1643 [label="return _lazyEntryPoint; 815264"];
1644 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 815265"];
1645 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 815266"];
1646 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 815267"];
1647 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 815268"];
1648 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 815269"];
1649 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 815270"];
1650 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 815271"];
1651 [label="return null; 815272"];
1652 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815273"];
1653 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815274"];
1654 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815275"];
1655 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815276"];
1656 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815277"];
1657 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815278"];
1658 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815279"];
1659 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815280"];
1660 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815281"];
1661 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 815282"];
1662 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 815283"];
1663 [label="param MethodCompiler(CSharpCompilation compilation) 815284"];
1664 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 815285"];
1665 [label="param MethodCompiler(bool emittingPdb) 815286"];
1666 [label="param MethodCompiler(bool emitTestCoverageData) 815287"];
1667 [label="param MethodCompiler(bool hasDeclarationErrors) 815288"];
1668 [label="param MethodCompiler(DiagnosticBag diagnostics) 815289"];
1669 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 815290"];
1670 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 815291"];
1671 [label="param MethodCompiler(CancellationToken cancellationToken) 815292"];
1672 [label="param MethodCompiler(this) 815293"];
1673 [label="param MethodCompiler(this) 815294"];
1674 [label="_compilation 815295"];
1675 [label="_emittingPdb 815296"];
1676 [label="_emitTestCoverageData 815297"];
1677 [label="_diagnostics 815298"];
1678 [label="_hasDeclarationErrors 815299"];
1679 [label="_moduleBeingBuiltOpt 815300"];
1680 [label="_filterOpt 815301"];
1681 [label="_debugDocumentProvider 815302"];
1682 [label="_entryPointOpt 815303"];
1683 [label="_compilerTasks 815304"];
1684 [label="_globalHasErrors 815305"];
1685 [label="Debug.Assert(compilation != null); 815306"];
1686 [label="Debug.Assert(compilation != null); 815307"];
1687 [label="Debug.Assert(diagnostics != null); 815308"];
1688 [label="Debug.Assert(diagnostics != null); 815309"];
1689 [label="_compilation 815310"];
1690 [label="_moduleBeingBuiltOpt 815311"];
1691 [label="_emittingPdb 815312"];
1692 [label="_cancellationToken 815313"];
1693 [label="_diagnostics 815314"];
1694 [label="_filterOpt 815315"];
1695 [label="_entryPointOpt 815316"];
1696 [label="_hasDeclarationErrors 815317"];
1697 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 815318"];
1698 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 815319"];
1699 [label="param SetGlobalErrorIfTrue(bool arg) 815320"];
1700 [label="param SetGlobalErrorIfTrue(this) 815321"];
1701 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 815322"];
1702 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 815323"];
1703 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 815324"];
1704 [label="_emitTestCoverageData 815325"];
1705 [label="compilation.Options 815326"];
1706 [label="get\n            {\n                return _options;\n            } 815327"];
1707 [label="return _options; 815328"];
1708 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 815329"];
1709 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 815330"];
1710 [label="methodCompiler._compilerTasks 815331"];
1711 [label="compilation.SourceModule 815332"];
1712 [label="get\n            {\n                return Assembly.Modules[0];\n            } 815333"];
1713 [label="Assembly 815334"];
1714 [label="get\n            {\n                return SourceAssembly;\n            } 815335"];
1715 [label="SourceAssembly 815336"];
1716 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815337"];
1717 [label="GetBoundReferenceManager() 815338"];
1718 [label="param GetBoundReferenceManager(this) 815339"];
1719 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 815340"];
1720 [label="return _referenceManager; 815341"];
1721 [label="GetBoundReferenceManager(); 815342"];
1722 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 815343"];
1723 [label="return Assembly.Modules[0]; 815344"];
1724 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 815345"];
1725 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 815346"];
1726 [label="param CompileNamespace(NamespaceSymbol symbol) 815347"];
1727 [label="param CompileNamespace(this) 815348"];
1728 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 815349"];
1729 [label="s.Accept(this, null); 815350"];
1730 [label="s.Accept(this, null); 815351"];
1731 [label="s.Accept(this, null); 815352"];
1732 [label="param VisitNamedType(NamedTypeSymbol symbol) 815353"];
1733 [label="param VisitNamedType(TypeCompilationState arg) 815354"];
1734 [label="param VisitNamedType(this) 815355"];
1735 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 815356"];
1736 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 815357"];
1737 [label="PassesFilter(_filterOpt, symbol) 815358"];
1738 [label="param PassesFilter(Predicate<Symbol> filterOpt) 815359"];
1739 [label="param PassesFilter(Symbol symbol) 815360"];
1740 [label="return (filterOpt == null) || filterOpt(symbol); 815361"];
1741 [label="return (filterOpt == null) || filterOpt(symbol); 815362"];
1742 [label="arg = null; 815363"];
1743 [label="_cancellationToken.ThrowIfCancellationRequested(); 815364"];
1744 [label="_compilation.Options 815365"];
1745 [label="get\n            {\n                return _options;\n            } 815366"];
1746 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 815367"];
1747 [label="Task worker = CompileNamedTypeAsync(symbol); 815368"];
1748 [label="CompileNamedTypeAsync(symbol) 815369"];
1749 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 815370"];
1750 [label="param CompileNamedTypeAsync(this) 815371"];
1751 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 815372"];
1752 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 815373"];
1753 [label="Task worker = CompileNamedTypeAsync(symbol); 815374"];
1754 [label="_compilerTasks.Push(worker); 815375"];
1755 [label="return null; 815376"];
1756 [label="s.Accept(this, null); 815377"];
1757 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 815378"];
1758 [label="methodCompiler.WaitForWorkers() 815379"];
1759 [label="param WaitForWorkers(this) 815380"];
1760 [label="var tasks = _compilerTasks; 815381"];
1761 [label="if (tasks == null)\n            {\n                return;\n            } 815382"];
1762 [label="if (tasks == null)\n            {\n                return;\n            } 815383"];
1763 [label="Task curTask; 815384"];
1764 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 815385"];
1765 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 815386"];
1766 [label="curTask.GetAwaiter().GetResult(); 815387"];
1767 [label="methodCompiler.WaitForWorkers(); 815388"];
1768 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 815389"];
1769 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 815390"];
1770 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 815391"];
1771 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 815392"];
1772 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 815393"];
1773 [label="=> _additionalTypes 815394"];
1774 [label="_additionalTypes 815395"];
1775 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 815396"];
1776 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 815397"];
1777 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 815398"];
1778 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 815399"];
1779 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 815400"];
1780 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 815401"];
1781 [label="param CompileSynthesizedMethods(this) 815402"];
1782 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 815403"];
1783 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 815404"];
1784 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 815405"];
1785 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 815406"];
1786 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 815407"];
1787 [label="param GetEmbeddedTypes(this) 815408"];
1788 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 815409"];
1789 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 815410"];
1790 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 815411"];
1791 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 815412"];
1792 [label="param CreateEmbeddedAttributesIfNeeded(this) 815413"];
1793 [label="GetNeedsGeneratedAttributes() 815414"];
1794 [label="param GetNeedsGeneratedAttributes(this) 815415"];
1795 [label="_needsGeneratedAttributes_IsFrozen = true; 815416"];
1796 [label="_needsGeneratedAttributes_IsFrozen 815417"];
1797 [label="GetNeedsGeneratedAttributesInternal() 815418"];
1798 [label="param GetNeedsGeneratedAttributesInternal(this) 815419"];
1799 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 815420"];
1800 [label="return GetNeedsGeneratedAttributesInternal(); 815421"];
1801 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 815422"];
1802 [label="ShouldEmitNullablePublicOnlyAttribute() 815423"];
1803 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 815424"];
1804 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 815425"];
1805 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 815426"];
1806 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 815427"];
1807 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 815428"];
1808 [label="return; 815429"];
1809 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 815430"];
1810 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 815431"];
1811 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 815432"];
1812 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 815433"];
1813 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 815434"];
1814 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 815435"];
1815 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 815436"];
1816 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 815437"];
1817 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 815438"];
1818 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 815439"];
1819 [label="builder.AddIfNotNull(_lazyNullableAttribute); 815440"];
1820 [label="builder.AddIfNotNull(_lazyNullableAttribute); 815441"];
1821 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 815442"];
1822 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 815443"];
1823 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 815444"];
1824 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 815445"];
1825 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 815446"];
1826 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 815447"];
1827 [label="return builder.ToImmutableAndFree(); 815448"];
1828 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 815449"];
1829 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 815450"];
1830 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 815451"];
1831 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 815452"];
1832 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 815453"];
1833 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 815454"];
1834 [label="param CompileSynthesizedMethods(this) 815455"];
1835 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 815456"];
1836 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 815457"];
1837 [label="compilation.AnonymousTypeManager 815458"];
1838 [label="get\n            {\n                return _anonymousTypeManager;\n            } 815459"];
1839 [label="return _anonymousTypeManager; 815460"];
1840 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815461"];
1841 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815462"];
1842 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815463"];
1843 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815464"];
1844 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815465"];
1845 [label="param GetPreviousAnonymousTypes(this) 815466"];
1846 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 815467"];
1847 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815468"];
1848 [label="param GetNextAnonymousTypeIndex(this) 815469"];
1849 [label="return 0; 815470"];
1850 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 815471"];
1851 [label="methodCompiler.WaitForWorkers() 815472"];
1852 [label="param WaitForWorkers(this) 815473"];
1853 [label="var tasks = _compilerTasks; 815474"];
1854 [label="if (tasks == null)\n            {\n                return;\n            } 815475"];
1855 [label="if (tasks == null)\n            {\n                return;\n            } 815476"];
1856 [label="Task curTask; 815477"];
1857 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 815478"];
1858 [label="methodCompiler.WaitForWorkers(); 815479"];
1859 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 815480"];
1860 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 815481"];
1861 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 815482"];
1862 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 815483"];
1863 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 815484"];
1864 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 815485"];
1865 [label="compilation.AdditionalCodegenWarnings 815486"];
1866 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 815487"];
1867 [label="return _additionalCodegenWarnings; 815488"];
1868 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 815489"];
1869 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 815490"];
1870 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 815491"];
1871 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 815492"];
1872 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 815493"];
1873 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 815494"];
1874 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 815495"];
1875 [label="param WarnUnusedFields(CSharpCompilation compilation) 815496"];
1876 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 815497"];
1877 [label="param WarnUnusedFields(CancellationToken cancellationToken) 815498"];
1878 [label="compilation.Assembly 815499"];
1879 [label="get\n            {\n                return SourceAssembly;\n            } 815500"];
1880 [label="SourceAssembly 815501"];
1881 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815502"];
1882 [label="GetBoundReferenceManager() 815503"];
1883 [label="param GetBoundReferenceManager(this) 815504"];
1884 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 815505"];
1885 [label="return _referenceManager; 815506"];
1886 [label="GetBoundReferenceManager(); 815507"];
1887 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 815508"];
1888 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 815509"];
1889 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 815510"];
1890 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 815511"];
1891 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 815512"];
1892 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 815513"];
1893 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 815514"];
1894 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 815515"];
1895 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 815516"];
1896 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 815517"];
1897 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 815518"];
1898 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 815519"];
1899 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 815520"];
1900 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 815521"];
1901 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 815522"];
1902 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 815523"];
1903 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 815524"];
1904 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 815525"];
1905 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 815526"];
1906 [label="param GenerateModuleInitializer(this) 815527"];
1907 [label="Debug.Assert(_declarationDiagnosticsFrozen); 815528"];
1908 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 815529"];
1909 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 815530"];
1910 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 815531"];
1911 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 815532"];
1912 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 815533"];
1913 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 815534"];
1914 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 815535"];
1915 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 815536"];
1916 [label="return true; 815537"];
1917 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 815538"];
1918 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 815539"];
1919 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 815540"];
1920 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 815541"];
1921 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 815542"];
1922 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 815543"];
1923 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 815544"];
1924 [label="param GenerateResourcesAndDocumentationComments(this) 815545"];
1925 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 815546"];
1926 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 815547"];
1927 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 815548"];
1928 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 815549"];
1929 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 815550"];
1930 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 815551"];
1931 [label="SourceAssembly 815552"];
1932 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815553"];
1933 [label="GetBoundReferenceManager() 815554"];
1934 [label="param GetBoundReferenceManager(this) 815555"];
1935 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 815556"];
1936 [label="return _referenceManager; 815557"];
1937 [label="GetBoundReferenceManager(); 815558"];
1938 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 815559"];
1939 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 815560"];
1940 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 815561"];
1941 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 815562"];
1942 [label="AddedModulesResourceNames(resourceDiagnostics) 815563"];
1943 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 815564"];
1944 [label="param AddedModulesResourceNames(this) 815565"];
1945 [label="SourceAssembly 815566"];
1946 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815567"];
1947 [label="GetBoundReferenceManager() 815568"];
1948 [label="param GetBoundReferenceManager(this) 815569"];
1949 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 815570"];
1950 [label="return _referenceManager; 815571"];
1951 [label="GetBoundReferenceManager(); 815572"];
1952 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 815573"];
1953 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 815574"];
1954 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 815575"];
1955 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 815576"];
1956 [label="param AddedModulesResourceNames(this) 815577"];
1957 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 815578"];
1958 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 815579"];
1959 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 815580"];
1960 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 815581"];
1961 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 815582"];
1962 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 815583"];
1963 [label="cancellationToken.ThrowIfCancellationRequested(); 815584"];
1964 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 815585"];
1965 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 815586"];
1966 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 815587"];
1967 [label="new[] { '\\r\\n', '\\r', '\\n' } 815588"];
1968 [label="'\\r\\n' 815589"];
1969 [label="'\\r' 815590"];
1970 [label="'\\n' 815591"];
1971 [label="new[] { '\\r\\n', '\\r', '\\n' } 815592"];
1972 [label="new[] { '\\r\\n', '\\r', '\\n' } 815593"];
1973 [label="new[] { '\\r\\n', '\\r', '\\n' } 815594"];
1974 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 815595"];
1975 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 815596"];
1976 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 815597"];
1977 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 815598"];
1978 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 815599"];
1979 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 815600"];
1980 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 815601"];
1981 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 815602"];
1982 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 815603"];
1983 [label="param WriteDocumentationCommentXml(string? assemblyName) 815604"];
1984 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 815605"];
1985 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 815606"];
1986 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 815607"];
1987 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 815608"];
1988 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 815609"];
1989 [label="StreamWriter writer = null; 815610"];
1990 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 815611"];
1991 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 815612"];
1992 [label="compilation.SourceAssembly 815613"];
1993 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815614"];
1994 [label="GetBoundReferenceManager() 815615"];
1995 [label="param GetBoundReferenceManager(this) 815616"];
1996 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 815617"];
1997 [label="return _referenceManager; 815618"];
1998 [label="GetBoundReferenceManager(); 815619"];
1999 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 815620"];
2000 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815621"];
2001 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815622"];
2002 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815623"];
2003 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815624"];
2004 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815625"];
2005 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815626"];
2006 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815627"];
2007 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815628"];
2008 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 815629"];
2009 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 815630"];
2010 [label="param DocumentationCommentCompiler(string assemblyName) 815631"];
2011 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 815632"];
2012 [label="param DocumentationCommentCompiler(TextWriter writer) 815633"];
2013 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 815634"];
2014 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 815635"];
2015 [label="param DocumentationCommentCompiler(bool processIncludes) 815636"];
2016 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 815637"];
2017 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 815638"];
2018 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 815639"];
2019 [label="param DocumentationCommentCompiler(this) 815640"];
2020 [label="param DocumentationCommentCompiler(this) 815641"];
2021 [label="_assemblyName 815642"];
2022 [label="_compilation 815643"];
2023 [label="_writer 815644"];
2024 [label="_filterTree 815645"];
2025 [label="_filterSpanWithinTree 815646"];
2026 [label="_processIncludes 815647"];
2027 [label="_isForSingleSymbol 815648"];
2028 [label="_diagnostics 815649"];
2029 [label="_lazyComparer 815650"];
2030 [label="_includedFileCache 815651"];
2031 [label="_indentDepth 815652"];
2032 [label="_temporaryStringBuilders 815653"];
2033 [label="_assemblyName 815654"];
2034 [label="_compilation 815655"];
2035 [label="_writer 815656"];
2036 [label="_filterTree 815657"];
2037 [label="_filterSpanWithinTree 815658"];
2038 [label="_processIncludes 815659"];
2039 [label="_isForSingleSymbol 815660"];
2040 [label="_diagnostics 815661"];
2041 [label="_cancellationToken 815662"];
2042 [label="compilation.SourceAssembly 815663"];
2043 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815664"];
2044 [label="GetBoundReferenceManager() 815665"];
2045 [label="param GetBoundReferenceManager(this) 815666"];
2046 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 815667"];
2047 [label="return _referenceManager; 815668"];
2048 [label="GetBoundReferenceManager(); 815669"];
2049 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 815670"];
2050 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 815671"];
2051 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 815672"];
2052 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 815673"];
2053 [label="param VisitNamespace(NamespaceSymbol symbol) 815674"];
2054 [label="param VisitNamespace(this) 815675"];
2055 [label="_cancellationToken.ThrowIfCancellationRequested(); 815676"];
2056 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 815677"];
2057 [label="Debug.Assert(_assemblyName != null); 815678"];
2058 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 815679"];
2059 [label="WriteLine('<?xml version=\\'1.0\\'?>') 815680"];
2060 [label="param WriteLine(string message) 815681"];
2061 [label="param WriteLine(this) 815682"];
2062 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815683"];
2063 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815684"];
2064 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815685"];
2065 [label="WriteLine('<doc>'); 815686"];
2066 [label="WriteLine('<doc>') 815687"];
2067 [label="param WriteLine(string message) 815688"];
2068 [label="param WriteLine(this) 815689"];
2069 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815690"];
2070 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815691"];
2071 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815692"];
2072 [label="Indent() 815693"];
2073 [label="param Indent(this) 815694"];
2074 [label="_indentDepth 815695"];
2075 [label="Indent(); 815696"];
2076 [label="_compilation.Options 815697"];
2077 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 815698"];
2078 [label="WriteLine('<assembly>'); 815699"];
2079 [label="WriteLine('<assembly>') 815700"];
2080 [label="param WriteLine(string message) 815701"];
2081 [label="param WriteLine(this) 815702"];
2082 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815703"];
2083 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815704"];
2084 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815705"];
2085 [label="Indent() 815706"];
2086 [label="param Indent(this) 815707"];
2087 [label="_indentDepth 815708"];
2088 [label="Indent(); 815709"];
2089 [label="WriteLine('<name>{0}</name>', _assemblyName); 815710"];
2090 [label="WriteLine('<name>{0}</name>', _assemblyName) 815711"];
2091 [label="WriteLine('<name>{0}</name>', _assemblyName) 815712"];
2092 [label="param WriteLine(string format) 815713"];
2093 [label="param WriteLine(params object[] args) 815714"];
2094 [label="param WriteLine(this) 815715"];
2095 [label="WriteLine(string.Format(format, args)); 815716"];
2096 [label="WriteLine(string.Format(format, args)); 815717"];
2097 [label="WriteLine(string.Format(format, args)); 815718"];
2098 [label="WriteLine(string.Format(format, args)) 815719"];
2099 [label="param WriteLine(string message) 815720"];
2100 [label="param WriteLine(this) 815721"];
2101 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815722"];
2102 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815723"];
2103 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815724"];
2104 [label="WriteLine(string.Format(format, args)); 815725"];
2105 [label="Unindent() 815726"];
2106 [label="param Unindent(this) 815727"];
2107 [label="_indentDepth 815728"];
2108 [label="Debug.Assert(_indentDepth >= 0); 815729"];
2109 [label="Debug.Assert(_indentDepth >= 0); 815730"];
2110 [label="Unindent(); 815731"];
2111 [label="WriteLine('</assembly>'); 815732"];
2112 [label="WriteLine('</assembly>') 815733"];
2113 [label="param WriteLine(string message) 815734"];
2114 [label="param WriteLine(this) 815735"];
2115 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815736"];
2116 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815737"];
2117 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815738"];
2118 [label="WriteLine('<members>'); 815739"];
2119 [label="WriteLine('<members>') 815740"];
2120 [label="param WriteLine(string message) 815741"];
2121 [label="param WriteLine(this) 815742"];
2122 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815743"];
2123 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815744"];
2124 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815745"];
2125 [label="Indent() 815746"];
2126 [label="param Indent(this) 815747"];
2127 [label="_indentDepth 815748"];
2128 [label="Indent(); 815749"];
2129 [label="Debug.Assert(!_isForSingleSymbol); 815750"];
2130 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 815751"];
2131 [label="_cancellationToken.ThrowIfCancellationRequested(); 815752"];
2132 [label="s.Accept(this); 815753"];
2133 [label="s.Accept(this); 815754"];
2134 [label="s.Accept(this); 815755"];
2135 [label="param VisitNamedType(NamedTypeSymbol symbol) 815756"];
2136 [label="param VisitNamedType(this) 815757"];
2137 [label="_cancellationToken.ThrowIfCancellationRequested(); 815758"];
2138 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 815759"];
2139 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 815760"];
2140 [label="DefaultVisit(symbol); 815761"];
2141 [label="DefaultVisit(symbol) 815762"];
2142 [label="param DefaultVisit(Symbol symbol) 815763"];
2143 [label="param DefaultVisit(this) 815764"];
2144 [label="_cancellationToken.ThrowIfCancellationRequested(); 815765"];
2145 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 815766"];
2146 [label="ShouldSkip(symbol) 815767"];
2147 [label="param ShouldSkip(Symbol symbol) 815768"];
2148 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 815769"];
2149 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 815770"];
2150 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 815771"];
2151 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 815772"];
2152 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 815773"];
2153 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 815774"];
2154 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 815775"];
2155 [label="DocumentationMode maxDocumentationMode; 815776"];
2156 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 815777"];
2157 [label="docCommentNodes 815778"];
2158 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 815779"];
2159 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 815780"];
2160 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 815781"];
2161 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 815782"];
2162 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 815783"];
2163 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 815784"];
2164 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 815785"];
2165 [label="param TryGetDocumentationCommentNodes(this) 815786"];
2166 [label="maxDocumentationMode = DocumentationMode.None; 815787"];
2167 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 815788"];
2168 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 815789"];
2169 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 815790"];
2170 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 815791"];
2171 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 815792"];
2172 [label="currDocumentationMode > maxDocumentationMode 815793"];
2173 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 815794"];
2174 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 815795"];
2175 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 815796"];
2176 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 815797"];
2177 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 815798"];
2178 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 815799"];
2179 [label="return true; 815800"];
2180 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 815801"];
2181 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 815802"];
2182 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 815803"];
2183 [label="return; 815804"];
2184 [label="DefaultVisit(symbol); 815805"];
2185 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 815806"];
2186 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 815807"];
2187 [label="_cancellationToken.ThrowIfCancellationRequested(); 815808"];
2188 [label="member.Accept(this); 815809"];
2189 [label="member.Accept(this); 815810"];
2190 [label="member.Accept(this); 815811"];
2191 [label="return; 815812"];
2192 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 815813"];
2193 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 815814"];
2194 [label="DocumentationMode maxDocumentationMode; 815815"];
2195 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 815816"];
2196 [label="docCommentNodes 815817"];
2197 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 815818"];
2198 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 815819"];
2199 [label="maxDocumentationMode = DocumentationMode.None; 815820"];
2200 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 815821"];
2201 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 815822"];
2202 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 815823"];
2203 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 815824"];
2204 [label="currDocumentationMode > maxDocumentationMode 815825"];
2205 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 815826"];
2206 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 815827"];
2207 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 815828"];
2208 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 815829"];
2209 [label="return true; 815830"];
2210 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 815831"];
2211 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 815832"];
2212 [label="return; 815833"];
2213 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 815834"];
2214 [label="Unindent() 815835"];
2215 [label="Debug.Assert(_indentDepth >= 0); 815836"];
2216 [label="Unindent(); 815837"];
2217 [label="WriteLine('</members>'); 815838"];
2218 [label="WriteLine('</members>') 815839"];
2219 [label="param WriteLine(string message) 815840"];
2220 [label="param WriteLine(this) 815841"];
2221 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815842"];
2222 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815843"];
2223 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815844"];
2224 [label="Unindent() 815845"];
2225 [label="_indentDepth 815846"];
2226 [label="Debug.Assert(_indentDepth >= 0); 815847"];
2227 [label="Debug.Assert(_indentDepth >= 0); 815848"];
2228 [label="Unindent(); 815849"];
2229 [label="WriteLine('</doc>'); 815850"];
2230 [label="WriteLine('</doc>') 815851"];
2231 [label="param WriteLine(string message) 815852"];
2232 [label="param WriteLine(this) 815853"];
2233 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815854"];
2234 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815855"];
2235 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 815856"];
2236 [label="Debug.Assert(compiler._indentDepth == 0); 815857"];
2237 [label="Debug.Assert(compiler._indentDepth == 0); 815858"];
2238 [label="writer?.Flush(); 815859"];
2239 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 815860"];
2240 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 815861"];
2241 [label="compilation.SyntaxTrees 815862"];
2242 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 815863"];
2243 [label="_syntaxAndDeclarations.GetLazyState() 815864"];
2244 [label="param GetLazyState(this) 815865"];
2245 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 815866"];
2246 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 815867"];
2247 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 815868"];
2248 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 815869"];
2249 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 815870"];
2250 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 815871"];
2251 [label="param ReportUnprocessed(SyntaxTree tree) 815872"];
2252 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 815873"];
2253 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 815874"];
2254 [label="param ReportUnprocessed(CancellationToken cancellationToken) 815875"];
2255 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 815876"];
2256 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 815877"];
2257 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 815878"];
2258 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 815879"];
2259 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 815880"];
2260 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 815881"];
2261 [label="param ReportUnusedImports(SyntaxTree? filterTree) 815882"];
2262 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 815883"];
2263 [label="param ReportUnusedImports(CancellationToken cancellationToken) 815884"];
2264 [label="param ReportUnusedImports(this) 815885"];
2265 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 815886"];
2266 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 815887"];
2267 [label="CompleteTrees(filterTree); 815888"];
2268 [label="CompleteTrees(filterTree) 815889"];
2269 [label="param CompleteTrees(SyntaxTree? filterTree) 815890"];
2270 [label="param CompleteTrees(this) 815891"];
2271 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 815892"];
2272 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 815893"];
2273 [label="CompleteTrees(filterTree); 815894"];
2274 [label="get { return SourceAssembly.IsDelaySigned; } 815895"];
2275 [label="SourceAssembly 815896"];
2276 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815897"];
2277 [label="GetBoundReferenceManager() 815898"];
2278 [label="param GetBoundReferenceManager(this) 815899"];
2279 [label="GetBoundReferenceManager(); 815900"];
2280 [label="SourceAssembly.IsDelaySigned 815901"];
2281 [label="get { return SourceAssembly.StrongNameKeys; } 815902"];
2282 [label="SourceAssembly 815903"];
2283 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 815904"];
2284 [label="GetBoundReferenceManager() 815905"];
2285 [label="param GetBoundReferenceManager(this) 815906"];
2286 [label="GetBoundReferenceManager(); 815907"];
2287 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 815908"];
2288 [label="param GetCorLibraryReferenceToEmit(this) 815909"];
2289 [label="CorLibrary 815910"];
2290 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 815911"];
2291 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 815912"];
2292 [label="AssemblySymbol corLibrary = CorLibrary; 815913"];
2293 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 815914"];
2294 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 815915"];
2295 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 815916"];
2296 [label="return Translate(corLibrary, context.Diagnostics); 815917"];
2297 [label="return Translate(corLibrary, context.Diagnostics); 815918"];
2298 [label="Translate(corLibrary, context.Diagnostics) 815919"];
2299 [label="param Translate(AssemblySymbol assembly) 815920"];
2300 [label="param Translate(DiagnosticBag diagnostics) 815921"];
2301 [label="param Translate(this) 815922"];
2302 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 815923"];
2303 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 815924"];
2304 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 815925"];
2305 [label="Cci.IModuleReference reference; 815926"];
2306 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 815927"];
2307 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 815928"];
2308 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 815929"];
2309 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 815930"];
2310 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 815931"];
2311 [label="new AssemblyReference(assembly) 815932"];
2312 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 815933"];
2313 [label="param AssemblyReference(this) 815934"];
2314 [label="_targetAssembly 815935"];
2315 [label="Debug.Assert((object)assemblySymbol != null); 815936"];
2316 [label="Debug.Assert((object)assemblySymbol != null); 815937"];
2317 [label="_targetAssembly 815938"];
2318 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 815939"];
2319 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 815940"];
2320 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 815941"];
2321 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 815942"];
2322 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 815943"];
2323 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 815944"];
2324 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 815945"];
2325 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 815946"];
2326 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 815947"];
2327 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 815948"];
2328 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 815949"];
2329 [label="param ValidateReferencedAssembly(this) 815950"];
2330 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 815951"];
2331 [label="asmRef.Identity 815952"];
2332 [label="=> _targetAssembly.Identity 815953"];
2333 [label="_targetAssembly.Identity 815954"];
2334 [label="AssemblyIdentity refIdentity = asmRef.Identity; 815955"];
2335 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 815956"];
2336 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 815957"];
2337 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 815958"];
2338 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 815959"];
2339 [label="var refMachine = assembly.Machine; 815960"];
2340 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 815961"];
2341 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 815962"];
2342 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 815963"];
2343 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 815964"];
2344 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 815965"];
2345 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 815966"];
2346 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 815967"];
2347 [label="return cachedAsmRef; 815968"];
2348 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 815969"];
2349 [label="=> _targetAssembly.Identity 815970"];
2350 [label="_targetAssembly.Identity 815971"];
2351 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 815972"];
2352 [label="param GetAssemblyReferencesFromAddedModules(this) 815973"];
2353 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 815974"];
2354 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 815975"];
2355 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 815976"];
2356 [label="param GetAssemblyReferencesFromAddedModules(this) 815977"];
2357 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 815978"];
2358 [label="param GetFiles(EmitContext context) 815979"];
2359 [label="param GetFiles(this) 815980"];
2360 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 815981"];
2361 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 815982"];
2362 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 815983"];
2363 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 815984"];
2364 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 815985"];
2365 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 815986"];
2366 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 815987"];
2367 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 815988"];
2368 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 815989"];
2369 [label="var modules = sourceAssSymbol.Modules; 815990"];
2370 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 815991"];
2371 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 815992"];
2372 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 815993"];
2373 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 815994"];
2374 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 815995"];
2375 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 815996"];
2376 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 815997"];
2377 [label="builder.Free(); 815998"];
2378 [label="return lazyFiles; 815999"];
2379 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 816000"];
2380 [label="=> _embeddedTypesManagerOpt 816001"];
2381 [label="_embeddedTypesManagerOpt 816002"];
2382 [label="param GetAnonymousTypeDefinitions(EmitContext context) 816003"];
2383 [label="param GetAnonymousTypeDefinitions(this) 816004"];
2384 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 816005"];
2385 [label="Compilation.AnonymousTypeManager 816006"];
2386 [label="get\n            {\n                return _anonymousTypeManager;\n            } 816007"];
2387 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 816008"];
2388 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 816009"];
2389 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 816010"];
2390 [label="param GetAdditionalTopLevelTypeDefinitions(this) 816011"];
2391 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816012"];
2392 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 816013"];
2393 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 816014"];
2394 [label="=> _additionalTypes 816015"];
2395 [label="_additionalTypes 816016"];
2396 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816017"];
2397 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816018"];
2398 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 816019"];
2399 [label="param GetEmbeddedTypeDefinitions(this) 816020"];
2400 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816021"];
2401 [label="GetEmbeddedTypes(context.Diagnostics) 816022"];
2402 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 816023"];
2403 [label="param GetEmbeddedTypes(this) 816024"];
2404 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 816025"];
2405 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 816026"];
2406 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 816027"];
2407 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 816028"];
2408 [label="param CreateEmbeddedAttributesIfNeeded(this) 816029"];
2409 [label="GetNeedsGeneratedAttributes() 816030"];
2410 [label="param GetNeedsGeneratedAttributes(this) 816031"];
2411 [label="_needsGeneratedAttributes_IsFrozen = true; 816032"];
2412 [label="_needsGeneratedAttributes_IsFrozen 816033"];
2413 [label="GetNeedsGeneratedAttributesInternal() 816034"];
2414 [label="param GetNeedsGeneratedAttributesInternal(this) 816035"];
2415 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 816036"];
2416 [label="return GetNeedsGeneratedAttributesInternal(); 816037"];
2417 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 816038"];
2418 [label="ShouldEmitNullablePublicOnlyAttribute() 816039"];
2419 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 816040"];
2420 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 816041"];
2421 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 816042"];
2422 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 816043"];
2423 [label="return; 816044"];
2424 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 816045"];
2425 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 816046"];
2426 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 816047"];
2427 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 816048"];
2428 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 816049"];
2429 [label="builder.AddIfNotNull(_lazyNullableAttribute); 816050"];
2430 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 816051"];
2431 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 816052"];
2432 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 816053"];
2433 [label="return builder.ToImmutableAndFree(); 816054"];
2434 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816055"];
2435 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816056"];
2436 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 816057"];
2437 [label="param GetTopLevelSourceTypeDefinitions(this) 816058"];
2438 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 816059"];
2439 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 816060"];
2440 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 816061"];
2441 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 816062"];
2442 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 816063"];
2443 [label="var ns = namespacesToProcess.Pop(); 816064"];
2444 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 816065"];
2445 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 816066"];
2446 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 816067"];
2447 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 816068"];
2448 [label="param ShouldEmitNullableAttributes(Symbol symbol) 816069"];
2449 [label="param ShouldEmitNullableAttributes(this) 816070"];
2450 [label="RoslynDebug.Assert(symbol is object); 816071"];
2451 [label="Debug.Assert(symbol.IsDefinition); 816072"];
2452 [label="SourceModule 816073"];
2453 [label="get\n            {\n                return Assembly.Modules[0];\n            } 816074"];
2454 [label="Assembly 816075"];
2455 [label="get\n            {\n                return SourceAssembly;\n            } 816076"];
2456 [label="SourceAssembly 816077"];
2457 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 816078"];
2458 [label="GetBoundReferenceManager() 816079"];
2459 [label="param GetBoundReferenceManager(this) 816080"];
2460 [label="GetBoundReferenceManager(); 816081"];
2461 [label="return Assembly.Modules[0]; 816082"];
2462 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 816083"];
2463 [label="EmitNullablePublicOnly 816084"];
2464 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 816085"];
2465 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 816086"];
2466 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 816087"];
2467 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 816088"];
2468 [label="param SynthesizeNullableAttributeIfNecessary(this) 816089"];
2469 [label="Compilation.SourceModule 816090"];
2470 [label="get\n            {\n                return Assembly.Modules[0];\n            } 816091"];
2471 [label="Assembly 816092"];
2472 [label="SourceAssembly 816093"];
2473 [label="GetBoundReferenceManager() 816094"];
2474 [label="GetBoundReferenceManager(); 816095"];
2475 [label="return Assembly.Modules[0]; 816096"];
2476 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816097"];
2477 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816098"];
2478 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 816099"];
2479 [label="type.AddNullableTransforms(flagsBuilder); 816100"];
2480 [label="type.AddNullableTransforms(flagsBuilder); 816101"];
2481 [label="SynthesizedAttributeData attribute; 816102"];
2482 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 816103"];
2483 [label="attribute = null; 816104"];
2484 [label="flagsBuilder.Free(); 816105"];
2485 [label="return attribute; 816106"];
2486 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 816107"];
2487 [label="Debug.Assert(symbol.IsDefinition); 816108"];
2488 [label="GetBoundReferenceManager(); 816109"];
2489 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 816110"];
2490 [label="GetBoundReferenceManager(); 816111"];
2491 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816112"];
2492 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816113"];
2493 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 816114"];
2494 [label="param GetSynthesizedNestedTypes(this) 816115"];
2495 [label="return null; 816116"];
2496 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 816117"];
2497 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 816118"];
2498 [label="param GetSourceAssemblyAttributes(this) 816119"];
2499 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 816120"];
2500 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 816121"];
2501 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 816122"];
2502 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 816123"];
2503 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 816124"];
2504 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 816125"];
2505 [label="NamedTypeSymbol result; 816126"];
2506 [label="GetBoundReferenceManager(); 816127"];
2507 [label="Debug.Assert(result.SpecialType == specialType); 816128"];
2508 [label="SourceAssembly 816129"];
2509 [label="GetBoundReferenceManager() 816130"];
2510 [label="GetBoundReferenceManager(); 816131"];
2511 [label="GetBoundReferenceManager() 816132"];
2512 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 816133"];
2513 [label="param Translate(MethodSymbol methodSymbol) 816134"];
2514 [label="param Translate(SyntaxNode syntaxNodeOpt) 816135"];
2515 [label="param Translate(DiagnosticBag diagnostics) 816136"];
2516 [label="param Translate(BoundArgListOperator optArgList = null) 816137"];
2517 [label="param Translate(bool needDeclaration = false) 816138"];
2518 [label="param Translate(this) 816139"];
2519 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 816140"];
2520 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 816141"];
2521 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 816142"];
2522 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 816143"];
2523 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 816144"];
2524 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 816145"];
2525 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 816146"];
2526 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 816147"];
2527 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 816148"];
2528 [label="param Translate(MethodSymbol methodSymbol) 816149"];
2529 [label="param Translate(SyntaxNode syntaxNodeOpt) 816150"];
2530 [label="param Translate(DiagnosticBag diagnostics) 816151"];
2531 [label="param Translate(bool needDeclaration) 816152"];
2532 [label="param Translate(this) 816153"];
2533 [label="object reference; 816154"];
2534 [label="Cci.IMethodReference methodRef; 816155"];
2535 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 816156"];
2536 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 816157"];
2537 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 816158"];
2538 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816159"];
2539 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816160"];
2540 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 816161"];
2541 [label="bool typeIsGeneric = IsGenericType(container); 816162"];
2542 [label="IsGenericType(container) 816163"];
2543 [label="param IsGenericType(NamedTypeSymbol toCheck) 816164"];
2544 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816165"];
2545 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816166"];
2546 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816167"];
2547 [label="toCheck = toCheck.ContainingType; 816168"];
2548 [label="return false; 816169"];
2549 [label="bool typeIsGeneric = IsGenericType(container); 816170"];
2550 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816171"];
2551 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816172"];
2552 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816173"];
2553 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816174"];
2554 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816175"];
2555 [label="return methodSymbol.GetCciAdapter(); 816176"];
2556 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 816177"];
2557 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 816178"];
2558 [label="return unexpandedMethodRef; 816179"];
2559 [label="param Translate(TypeSymbol typeSymbol) 816180"];
2560 [label="param Translate(SyntaxNode syntaxNodeOpt) 816181"];
2561 [label="param Translate(DiagnosticBag diagnostics) 816182"];
2562 [label="param Translate(this) 816183"];
2563 [label="Debug.Assert(diagnostics != null); 816184"];
2564 [label="Debug.Assert(diagnostics != null); 816185"];
2565 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 816186"];
2566 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816187"];
2567 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816188"];
2568 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816189"];
2569 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816190"];
2570 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 816191"];
2571 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 816192"];
2572 [label="param Translate(SyntaxNode syntaxNodeOpt) 816193"];
2573 [label="param Translate(DiagnosticBag diagnostics) 816194"];
2574 [label="param Translate(bool fromImplements = false) 816195"];
2575 [label="param Translate(bool needDeclaration = false) 816196"];
2576 [label="param Translate(this) 816197"];
2577 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 816198"];
2578 [label="Debug.Assert(diagnostics != null); 816199"];
2579 [label="Debug.Assert(diagnostics != null); 816200"];
2580 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816201"];
2581 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816202"];
2582 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816203"];
2583 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816204"];
2584 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816205"];
2585 [label="object reference; 816206"];
2586 [label="Cci.INamedTypeReference typeRef; 816207"];
2587 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816208"];
2588 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816209"];
2589 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816210"];
2590 [label="IsGenericType(container) 816211"];
2591 [label="param IsGenericType(NamedTypeSymbol toCheck) 816212"];
2592 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816213"];
2593 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816214"];
2594 [label="return false; 816215"];
2595 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816216"];
2596 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816217"];
2597 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816218"];
2598 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 816219"];
2599 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 816220"];
2600 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 816221"];
2601 [label="param Translate(SyntaxNode syntaxNodeOpt) 816222"];
2602 [label="param Translate(DiagnosticBag diagnostics) 816223"];
2603 [label="param Translate(bool fromImplements = false) 816224"];
2604 [label="param Translate(bool needDeclaration = false) 816225"];
2605 [label="param Translate(this) 816226"];
2606 [label="Debug.Assert(diagnostics != null); 816227"];
2607 [label="Debug.Assert(diagnostics != null); 816228"];
2608 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816229"];
2609 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816230"];
2610 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816231"];
2611 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816232"];
2612 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816233"];
2613 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816234"];
2614 [label="param Translate(ModuleSymbol module) 816235"];
2615 [label="param Translate(DiagnosticBag diagnostics) 816236"];
2616 [label="param Translate(this) 816237"];
2617 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 816238"];
2618 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 816239"];
2619 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 816240"];
2620 [label="if ((object)module == null)\n            {\n                return null;\n            } 816241"];
2621 [label="if ((object)module == null)\n            {\n                return null;\n            } 816242"];
2622 [label="Cci.IModuleReference moduleRef; 816243"];
2623 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 816244"];
2624 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 816245"];
2625 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 816246"];
2626 [label="return moduleRef; 816247"];
2627 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816248"];
2628 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816249"];
2629 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816250"];
2630 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816251"];
2631 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816252"];
2632 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816253"];
2633 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 816254"];
2634 [label="param Translate(this) 816255"];
2635 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 816256"];
2636 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 816257"];
2637 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 816258"];
2638 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 816259"];
2639 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 816260"];
2640 [label="MustBeWrapped(@params.First()) 816261"];
2641 [label="param MustBeWrapped(ParameterSymbol param) 816262"];
2642 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816263"];
2643 [label="var container = param.ContainingSymbol; 816264"];
2644 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816265"];
2645 [label="ContainerIsGeneric(container) 816266"];
2646 [label="param ContainerIsGeneric(Symbol container) 816267"];
2647 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816268"];
2648 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816269"];
2649 [label="IsGenericType(container.ContainingType) 816270"];
2650 [label="param IsGenericType(NamedTypeSymbol toCheck) 816271"];
2651 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816272"];
2652 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816273"];
2653 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816274"];
2654 [label="toCheck = toCheck.ContainingType; 816275"];
2655 [label="return false; 816276"];
2656 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816277"];
2657 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816278"];
2658 [label="return false; 816279"];
2659 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 816280"];
2660 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 816281"];
2661 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 816282"];
2662 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 816283"];
2663 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 816284"];
2664 [label="param MustBeWrapped(ParameterSymbol param) 816285"];
2665 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816286"];
2666 [label="var container = param.ContainingSymbol; 816287"];
2667 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816288"];
2668 [label="ContainerIsGeneric(container) 816289"];
2669 [label="param ContainerIsGeneric(Symbol container) 816290"];
2670 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816291"];
2671 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816292"];
2672 [label="IsGenericType(container.ContainingType) 816293"];
2673 [label="param IsGenericType(NamedTypeSymbol toCheck) 816294"];
2674 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816295"];
2675 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816296"];
2676 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816297"];
2677 [label="toCheck = toCheck.ContainingType; 816298"];
2678 [label="return false; 816299"];
2679 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816300"];
2680 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816301"];
2681 [label="return false; 816302"];
2682 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 816303"];
2683 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 816304"];
2684 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 816305"];
2685 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 816306"];
2686 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816307"];
2687 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816308"];
2688 [label="param Translate(SyntaxNode syntaxNodeOpt) 816309"];
2689 [label="param Translate(DiagnosticBag diagnostics) 816310"];
2690 [label="param Translate(bool fromImplements = false) 816311"];
2691 [label="param Translate(bool needDeclaration = false) 816312"];
2692 [label="Debug.Assert(diagnostics != null); 816313"];
2693 [label="Debug.Assert(diagnostics != null); 816314"];
2694 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816315"];
2695 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816316"];
2696 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816317"];
2697 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816318"];
2698 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816319"];
2699 [label="object reference; 816320"];
2700 [label="Cci.INamedTypeReference typeRef; 816321"];
2701 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816322"];
2702 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816323"];
2703 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816324"];
2704 [label="IsGenericType(container) 816325"];
2705 [label="param IsGenericType(NamedTypeSymbol toCheck) 816326"];
2706 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816327"];
2707 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816328"];
2708 [label="return false; 816329"];
2709 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816330"];
2710 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816331"];
2711 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816332"];
2712 [label="param IsPlatformType(Cci.ITypeReference typeRef) 816333"];
2713 [label="param IsPlatformType(Cci.PlatformType platformType) 816334"];
2714 [label="param IsPlatformType(this) 816335"];
2715 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 816336"];
2716 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 816337"];
2717 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 816338"];
2718 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816339"];
2719 [label="return namedType.SpecialType == (SpecialType)platformType; 816340"];
2720 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816341"];
2721 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816342"];
2722 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816343"];
2723 [label="param Translate(SyntaxNode syntaxNodeOpt) 816344"];
2724 [label="param Translate(DiagnosticBag diagnostics) 816345"];
2725 [label="param Translate(bool fromImplements = false) 816346"];
2726 [label="param Translate(bool needDeclaration = false) 816347"];
2727 [label="Debug.Assert(diagnostics != null); 816348"];
2728 [label="Debug.Assert(diagnostics != null); 816349"];
2729 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816350"];
2730 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816351"];
2731 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816352"];
2732 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816353"];
2733 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816354"];
2734 [label="object reference; 816355"];
2735 [label="Cci.INamedTypeReference typeRef; 816356"];
2736 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816357"];
2737 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816358"];
2738 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816359"];
2739 [label="IsGenericType(container) 816360"];
2740 [label="param IsGenericType(NamedTypeSymbol toCheck) 816361"];
2741 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816362"];
2742 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816363"];
2743 [label="return false; 816364"];
2744 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816365"];
2745 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816366"];
2746 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816367"];
2747 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816368"];
2748 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816369"];
2749 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816370"];
2750 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816371"];
2751 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816372"];
2752 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816373"];
2753 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 816374"];
2754 [label="param MustBeWrapped(ParameterSymbol param) 816375"];
2755 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816376"];
2756 [label="var container = param.ContainingSymbol; 816377"];
2757 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816378"];
2758 [label="ContainerIsGeneric(container) 816379"];
2759 [label="param ContainerIsGeneric(Symbol container) 816380"];
2760 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816381"];
2761 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816382"];
2762 [label="IsGenericType(container.ContainingType) 816383"];
2763 [label="param IsGenericType(NamedTypeSymbol toCheck) 816384"];
2764 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816385"];
2765 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816386"];
2766 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816387"];
2767 [label="toCheck = toCheck.ContainingType; 816388"];
2768 [label="return false; 816389"];
2769 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816390"];
2770 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816391"];
2771 [label="param MustBeWrapped(ParameterSymbol param) 816392"];
2772 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816393"];
2773 [label="var container = param.ContainingSymbol; 816394"];
2774 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816395"];
2775 [label="ContainerIsGeneric(container) 816396"];
2776 [label="param ContainerIsGeneric(Symbol container) 816397"];
2777 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816398"];
2778 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816399"];
2779 [label="IsGenericType(container.ContainingType) 816400"];
2780 [label="param IsGenericType(NamedTypeSymbol toCheck) 816401"];
2781 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816402"];
2782 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816403"];
2783 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816404"];
2784 [label="toCheck = toCheck.ContainingType; 816405"];
2785 [label="return false; 816406"];
2786 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816407"];
2787 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816408"];
2788 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 816409"];
2789 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 816410"];
2790 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816411"];
2791 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816412"];
2792 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 816413"];
2793 [label="bool typeIsGeneric = IsGenericType(container); 816414"];
2794 [label="IsGenericType(container) 816415"];
2795 [label="param IsGenericType(NamedTypeSymbol toCheck) 816416"];
2796 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816417"];
2797 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816418"];
2798 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816419"];
2799 [label="toCheck = toCheck.ContainingType; 816420"];
2800 [label="return false; 816421"];
2801 [label="bool typeIsGeneric = IsGenericType(container); 816422"];
2802 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816423"];
2803 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816424"];
2804 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816425"];
2805 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816426"];
2806 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816427"];
2807 [label="toCheck = toCheck.ContainingType; 816428"];
2808 [label="param GetSourceAssemblySecurityAttributes(this) 816429"];
2809 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 816430"];
2810 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 816431"];
2811 [label="return Translate(corLibrary, context.Diagnostics); 816432"];
2812 [label="param Translate(DiagnosticBag diagnostics) 816433"];
2813 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 816434"];
2814 [label="return (Cci.IAssemblyReference)reference; 816435"];
2815 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 816436"];
2816 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 816437"];
2817 [label="param GetSourceModuleAttributes(this) 816438"];
2818 [label="return SourceModule.GetCustomAttributesToEmit(this); 816439"];
2819 [label="return SourceModule.GetCustomAttributesToEmit(this); 816440"];
2820 [label="return SourceModule.GetCustomAttributesToEmit(this); 816441"];
2821 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 816442"];
2822 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816443"];
2823 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 816444"];
2824 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816445"];
2825 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 816446"];
2826 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 816447"];
2827 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 816448"];
2828 [label="return GetNeedsGeneratedAttributesInternal(); 816449"];
2829 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 816450"];
2830 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 816451"];
2831 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 816452"];
2832 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 816453"];
2833 [label="return; 816454"];
2834 [label="Debug.Assert(symbol.IsDefinition); 816455"];
2835 [label="GetBoundReferenceManager(); 816456"];
2836 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 816457"];
2837 [label="GetBoundReferenceManager(); 816458"];
2838 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816459"];
2839 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816460"];
2840 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 816461"];
2841 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 816462"];
2842 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 816463"];
2843 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 816464"];
2844 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 816465"];
2845 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 816466"];
2846 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 816467"];
2847 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 816468"];
2848 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 816469"];
2849 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 816470"];
2850 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 816471"];
2851 [label="param SynthesizeNullableAttributeIfNecessary(this) 816472"];
2852 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 816473"];
2853 [label="return null; 816474"];
2854 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816475"];
2855 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816476"];
2856 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816477"];
2857 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816478"];
2858 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816479"];
2859 [label="object reference; 816480"];
2860 [label="Cci.INamedTypeReference typeRef; 816481"];
2861 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816482"];
2862 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816483"];
2863 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816484"];
2864 [label="IsGenericType(container) 816485"];
2865 [label="param IsGenericType(NamedTypeSymbol toCheck) 816486"];
2866 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816487"];
2867 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816488"];
2868 [label="return false; 816489"];
2869 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816490"];
2870 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816491"];
2871 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816492"];
2872 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 816493"];
2873 [label="Debug.Assert(symbol.IsDefinition); 816494"];
2874 [label="GetBoundReferenceManager(); 816495"];
2875 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 816496"];
2876 [label="GetBoundReferenceManager(); 816497"];
2877 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816498"];
2878 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816499"];
2879 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 816500"];
2880 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 816501"];
2881 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816502"];
2882 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816503"];
2883 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 816504"];
2884 [label="bool typeIsGeneric = IsGenericType(container); 816505"];
2885 [label="IsGenericType(container) 816506"];
2886 [label="param IsGenericType(NamedTypeSymbol toCheck) 816507"];
2887 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816508"];
2888 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816509"];
2889 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816510"];
2890 [label="toCheck = toCheck.ContainingType; 816511"];
2891 [label="return false; 816512"];
2892 [label="bool typeIsGeneric = IsGenericType(container); 816513"];
2893 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816514"];
2894 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816515"];
2895 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816516"];
2896 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816517"];
2897 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816518"];
2898 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816519"];
2899 [label="param Translate(SyntaxNode syntaxNodeOpt) 816520"];
2900 [label="param Translate(DiagnosticBag diagnostics) 816521"];
2901 [label="param Translate(bool fromImplements = false) 816522"];
2902 [label="param Translate(bool needDeclaration = false) 816523"];
2903 [label="Debug.Assert(diagnostics != null); 816524"];
2904 [label="Debug.Assert(diagnostics != null); 816525"];
2905 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816526"];
2906 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816527"];
2907 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816528"];
2908 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816529"];
2909 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816530"];
2910 [label="object reference; 816531"];
2911 [label="Cci.INamedTypeReference typeRef; 816532"];
2912 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816533"];
2913 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816534"];
2914 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816535"];
2915 [label="IsGenericType(container) 816536"];
2916 [label="param IsGenericType(NamedTypeSymbol toCheck) 816537"];
2917 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816538"];
2918 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816539"];
2919 [label="return false; 816540"];
2920 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816541"];
2921 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816542"];
2922 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816543"];
2923 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816544"];
2924 [label="param GetExportedTypes(DiagnosticBag diagnostics) 816545"];
2925 [label="param GetExportedTypes(this) 816546"];
2926 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 816547"];
2927 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 816548"];
2928 [label="CalculateExportedTypes() 816549"];
2929 [label="param CalculateExportedTypes(this) 816550"];
2930 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 816551"];
2931 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 816552"];
2932 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 816553"];
2933 [label="var modules = sourceAssembly.Modules; 816554"];
2934 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 816555"];
2935 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 816556"];
2936 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 816557"];
2937 [label="sourceAssembly.DeclaringCompilation.Options 816558"];
2938 [label="get\n            {\n                return _options;\n            } 816559"];
2939 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 816560"];
2940 [label="GetForwardedTypes(sourceAssembly, builder); 816561"];
2941 [label="GetForwardedTypes(sourceAssembly, builder); 816562"];
2942 [label="GetForwardedTypes(sourceAssembly, builder) 816563"];
2943 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 816564"];
2944 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 816565"];
2945 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 816566"];
2946 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 816567"];
2947 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 816568"];
2948 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 816569"];
2949 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 816570"];
2950 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 816571"];
2951 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 816572"];
2952 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 816573"];
2953 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 816574"];
2954 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 816575"];
2955 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 816576"];
2956 [label="sourceAssembly.DeclaringCompilation.Options 816577"];
2957 [label="get\n            {\n                return _options;\n            } 816578"];
2958 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 816579"];
2959 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 816580"];
2960 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 816581"];
2961 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 816582"];
2962 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 816583"];
2963 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 816584"];
2964 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 816585"];
2965 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 816586"];
2966 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 816587"];
2967 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 816588"];
2968 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 816589"];
2969 [label="return seenTopLevelForwardedTypes; 816590"];
2970 [label="GetForwardedTypes(sourceAssembly, builder); 816591"];
2971 [label="return builder.ToImmutableAndFree(); 816592"];
2972 [label="_lazyExportedTypes = CalculateExportedTypes(); 816593"];
2973 [label="_lazyExportedTypes 816594"];
2974 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 816595"];
2975 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 816596"];
2976 [label="return _lazyExportedTypes; 816597"];
2977 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 816598"];
2978 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 816599"];
2979 [label="param AddEmbeddedResourcesFromAddedModules(this) 816600"];
2980 [label="var modules = _sourceAssembly.Modules; 816601"];
2981 [label="int count = modules.Length; 816602"];
2982 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 816603"];
2983 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 816604"];
2984 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 816605"];
2985 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 816606"];
2986 [label="EmitResult emitResult = comp.Emit(output, metadataPEStream: metadataOutput,\n                    options: new EmitOptions(includePrivateMembers: false)); 816607"];
2987 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816608"];
2988 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816609"];
2989 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816610"];
2990 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816611"];
2991 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816612"];
2992 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816613"];
2993 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 816614"];
2994 [label="return this; 816615"];
2995 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816616"];
2996 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816617"];
2997 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816618"];
2998 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816619"];
2999 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816620"];
3000 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816621"];
3001 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816622"];
3002 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816623"];
3003 [label="param Translate(SyntaxNode syntaxNodeOpt) 816624"];
3004 [label="param Translate(DiagnosticBag diagnostics) 816625"];
3005 [label="param Translate(bool fromImplements = false) 816626"];
3006 [label="param Translate(bool needDeclaration = false) 816627"];
3007 [label="Debug.Assert(diagnostics != null); 816628"];
3008 [label="Debug.Assert(diagnostics != null); 816629"];
3009 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816630"];
3010 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816631"];
3011 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816632"];
3012 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816633"];
3013 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816634"];
3014 [label="object reference; 816635"];
3015 [label="Cci.INamedTypeReference typeRef; 816636"];
3016 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816637"];
3017 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816638"];
3018 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816639"];
3019 [label="IsGenericType(container) 816640"];
3020 [label="param IsGenericType(NamedTypeSymbol toCheck) 816641"];
3021 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816642"];
3022 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816643"];
3023 [label="return false; 816644"];
3024 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816645"];
3025 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816646"];
3026 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816647"];
3027 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816648"];
3028 [label="=> _sourceAssembly 816649"];
3029 [label="_sourceAssembly 816650"];
3030 [label="=> _metadataName 816651"];
3031 [label="_metadataName 816652"];
3032 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 816653"];
3033 [label="param MemberVisibility(Symbol symbol) 816654"];
3034 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 816655"];
3035 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 816656"];
3036 [label="return Cci.TypeMemberVisibility.Private; 816657"];
3037 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816658"];
3038 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816659"];
3039 [label="param Translate(SyntaxNode syntaxNodeOpt) 816660"];
3040 [label="param Translate(DiagnosticBag diagnostics) 816661"];
3041 [label="param Translate(bool fromImplements = false) 816662"];
3042 [label="param Translate(bool needDeclaration = false) 816663"];
3043 [label="Debug.Assert(diagnostics != null); 816664"];
3044 [label="Debug.Assert(diagnostics != null); 816665"];
3045 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816666"];
3046 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816667"];
3047 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816668"];
3048 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816669"];
3049 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816670"];
3050 [label="object reference; 816671"];
3051 [label="Cci.INamedTypeReference typeRef; 816672"];
3052 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816673"];
3053 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816674"];
3054 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816675"];
3055 [label="IsGenericType(container) 816676"];
3056 [label="param IsGenericType(NamedTypeSymbol toCheck) 816677"];
3057 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816678"];
3058 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816679"];
3059 [label="return false; 816680"];
3060 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816681"];
3061 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816682"];
3062 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816683"];
3063 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816684"];
3064 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816685"];
3065 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816686"];
3066 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816687"];
3067 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816688"];
3068 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816689"];
3069 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816690"];
3070 [label="return Cci.TypeMemberVisibility.Public; 816691"];
3071 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816692"];
3072 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816693"];
3073 [label="param Translate(SyntaxNode syntaxNodeOpt) 816694"];
3074 [label="param Translate(DiagnosticBag diagnostics) 816695"];
3075 [label="param Translate(bool fromImplements = false) 816696"];
3076 [label="param Translate(bool needDeclaration = false) 816697"];
3077 [label="Debug.Assert(diagnostics != null); 816698"];
3078 [label="Debug.Assert(diagnostics != null); 816699"];
3079 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816700"];
3080 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816701"];
3081 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816702"];
3082 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816703"];
3083 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816704"];
3084 [label="object reference; 816705"];
3085 [label="Cci.INamedTypeReference typeRef; 816706"];
3086 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816707"];
3087 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816708"];
3088 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816709"];
3089 [label="IsGenericType(container) 816710"];
3090 [label="param IsGenericType(NamedTypeSymbol toCheck) 816711"];
3091 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816712"];
3092 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816713"];
3093 [label="return false; 816714"];
3094 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816715"];
3095 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816716"];
3096 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816717"];
3097 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816718"];
3098 [label="get { return _metadataName; } 816719"];
3099 [label="return _metadataName; 816720"];
3100 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816721"];
3101 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816722"];
3102 [label="param Translate(SyntaxNode syntaxNodeOpt) 816723"];
3103 [label="param Translate(DiagnosticBag diagnostics) 816724"];
3104 [label="param Translate(bool fromImplements = false) 816725"];
3105 [label="param Translate(bool needDeclaration = false) 816726"];
3106 [label="Debug.Assert(diagnostics != null); 816727"];
3107 [label="Debug.Assert(diagnostics != null); 816728"];
3108 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816729"];
3109 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816730"];
3110 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816731"];
3111 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816732"];
3112 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816733"];
3113 [label="object reference; 816734"];
3114 [label="Cci.INamedTypeReference typeRef; 816735"];
3115 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816736"];
3116 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816737"];
3117 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816738"];
3118 [label="IsGenericType(container) 816739"];
3119 [label="param IsGenericType(NamedTypeSymbol toCheck) 816740"];
3120 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816741"];
3121 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816742"];
3122 [label="return false; 816743"];
3123 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816744"];
3124 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816745"];
3125 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816746"];
3126 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 816747"];
3127 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816748"];
3128 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816749"];
3129 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816750"];
3130 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816751"];
3131 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816752"];
3132 [label="object reference; 816753"];
3133 [label="Cci.INamedTypeReference typeRef; 816754"];
3134 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816755"];
3135 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816756"];
3136 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816757"];
3137 [label="IsGenericType(container) 816758"];
3138 [label="param IsGenericType(NamedTypeSymbol toCheck) 816759"];
3139 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816760"];
3140 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816761"];
3141 [label="return false; 816762"];
3142 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816763"];
3143 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816764"];
3144 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816765"];
3145 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 816766"];
3146 [label="GetBoundReferenceManager(); 816767"];
3147 [label="Debug.Assert(result.SpecialType == specialType); 816768"];
3148 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 816769"];
3149 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 816770"];
3150 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816771"];
3151 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816772"];
3152 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 816773"];
3153 [label="bool typeIsGeneric = IsGenericType(container); 816774"];
3154 [label="IsGenericType(container) 816775"];
3155 [label="param IsGenericType(NamedTypeSymbol toCheck) 816776"];
3156 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816777"];
3157 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816778"];
3158 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816779"];
3159 [label="toCheck = toCheck.ContainingType; 816780"];
3160 [label="return false; 816781"];
3161 [label="bool typeIsGeneric = IsGenericType(container); 816782"];
3162 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816783"];
3163 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816784"];
3164 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816785"];
3165 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816786"];
3166 [label="param MustBeWrapped(ParameterSymbol param) 816787"];
3167 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816788"];
3168 [label="var container = param.ContainingSymbol; 816789"];
3169 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816790"];
3170 [label="ContainerIsGeneric(container) 816791"];
3171 [label="param ContainerIsGeneric(Symbol container) 816792"];
3172 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816793"];
3173 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816794"];
3174 [label="IsGenericType(container.ContainingType) 816795"];
3175 [label="param IsGenericType(NamedTypeSymbol toCheck) 816796"];
3176 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816797"];
3177 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816798"];
3178 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816799"];
3179 [label="toCheck = toCheck.ContainingType; 816800"];
3180 [label="return false; 816801"];
3181 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816802"];
3182 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816803"];
3183 [label="param MustBeWrapped(ParameterSymbol param) 816804"];
3184 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816805"];
3185 [label="var container = param.ContainingSymbol; 816806"];
3186 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816807"];
3187 [label="ContainerIsGeneric(container) 816808"];
3188 [label="param ContainerIsGeneric(Symbol container) 816809"];
3189 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816810"];
3190 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816811"];
3191 [label="IsGenericType(container.ContainingType) 816812"];
3192 [label="param IsGenericType(NamedTypeSymbol toCheck) 816813"];
3193 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816814"];
3194 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816815"];
3195 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816816"];
3196 [label="toCheck = toCheck.ContainingType; 816817"];
3197 [label="return false; 816818"];
3198 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816819"];
3199 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816820"];
3200 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 816821"];
3201 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 816822"];
3202 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 816823"];
3203 [label="GetBoundReferenceManager(); 816824"];
3204 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 816825"];
3205 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 816826"];
3206 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816827"];
3207 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816828"];
3208 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 816829"];
3209 [label="bool typeIsGeneric = IsGenericType(container); 816830"];
3210 [label="IsGenericType(container) 816831"];
3211 [label="param IsGenericType(NamedTypeSymbol toCheck) 816832"];
3212 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816833"];
3213 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816834"];
3214 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816835"];
3215 [label="toCheck = toCheck.ContainingType; 816836"];
3216 [label="return false; 816837"];
3217 [label="bool typeIsGeneric = IsGenericType(container); 816838"];
3218 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816839"];
3219 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816840"];
3220 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816841"];
3221 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816842"];
3222 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816843"];
3223 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816844"];
3224 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816845"];
3225 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816846"];
3226 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816847"];
3227 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816848"];
3228 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816849"];
3229 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816850"];
3230 [label="param Translate(SyntaxNode syntaxNodeOpt) 816851"];
3231 [label="param Translate(DiagnosticBag diagnostics) 816852"];
3232 [label="param Translate(bool fromImplements = false) 816853"];
3233 [label="param Translate(bool needDeclaration = false) 816854"];
3234 [label="Debug.Assert(diagnostics != null); 816855"];
3235 [label="Debug.Assert(diagnostics != null); 816856"];
3236 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816857"];
3237 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816858"];
3238 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816859"];
3239 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816860"];
3240 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816861"];
3241 [label="object reference; 816862"];
3242 [label="Cci.INamedTypeReference typeRef; 816863"];
3243 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 816864"];
3244 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816865"];
3245 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816866"];
3246 [label="IsGenericType(container) 816867"];
3247 [label="param IsGenericType(NamedTypeSymbol toCheck) 816868"];
3248 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816869"];
3249 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816870"];
3250 [label="return false; 816871"];
3251 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816872"];
3252 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 816873"];
3253 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 816874"];
3254 [label="param MustBeWrapped(ParameterSymbol param) 816875"];
3255 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816876"];
3256 [label="var container = param.ContainingSymbol; 816877"];
3257 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816878"];
3258 [label="ContainerIsGeneric(container) 816879"];
3259 [label="param ContainerIsGeneric(Symbol container) 816880"];
3260 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816881"];
3261 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816882"];
3262 [label="IsGenericType(container.ContainingType) 816883"];
3263 [label="param IsGenericType(NamedTypeSymbol toCheck) 816884"];
3264 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816885"];
3265 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816886"];
3266 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816887"];
3267 [label="toCheck = toCheck.ContainingType; 816888"];
3268 [label="return false; 816889"];
3269 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816890"];
3270 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816891"];
3271 [label="param MustBeWrapped(ParameterSymbol param) 816892"];
3272 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 816893"];
3273 [label="var container = param.ContainingSymbol; 816894"];
3274 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 816895"];
3275 [label="ContainerIsGeneric(container) 816896"];
3276 [label="param ContainerIsGeneric(Symbol container) 816897"];
3277 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816898"];
3278 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816899"];
3279 [label="IsGenericType(container.ContainingType) 816900"];
3280 [label="param IsGenericType(NamedTypeSymbol toCheck) 816901"];
3281 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816902"];
3282 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816903"];
3283 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816904"];
3284 [label="toCheck = toCheck.ContainingType; 816905"];
3285 [label="return false; 816906"];
3286 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816907"];
3287 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 816908"];
3288 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816909"];
3289 [label="toCheck = toCheck.ContainingType; 816910"];
3290 [label="Debug.Assert(symbol.IsDefinition); 816911"];
3291 [label="GetBoundReferenceManager(); 816912"];
3292 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 816913"];
3293 [label="GetBoundReferenceManager(); 816914"];
3294 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816915"];
3295 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816916"];
3296 [label="param SynthesizeNullableAttributeIfNecessary(this) 816917"];
3297 [label="return Translate(corLibrary, context.Diagnostics); 816918"];
3298 [label="param Translate(DiagnosticBag diagnostics) 816919"];
3299 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 816920"];
3300 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 816921"];
3301 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 816922"];
3302 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 816923"];
3303 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 816924"];
3304 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 816925"];
3305 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 816926"];
3306 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 816927"];
3307 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 816928"];
3308 [label="var modules = sourceAssSymbol.Modules; 816929"];
3309 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 816930"];
3310 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 816931"];
3311 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 816932"];
3312 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 816933"];
3313 [label="return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>(); 816934"];
3314 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816935"];
3315 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 816936"];
3316 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 816937"];
3317 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 816938"];
3318 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 816939"];
3319 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 816940"];
3320 [label="return GetNeedsGeneratedAttributesInternal(); 816941"];
3321 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 816942"];
3322 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 816943"];
3323 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 816944"];
3324 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 816945"];
3325 [label="return; 816946"];
3326 [label="get\n            {\n                return SourceAssembly;\n            } 816947"];
3327 [label="SourceAssembly 816948"];
3328 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 816949"];
3329 [label="GetBoundReferenceManager() 816950"];
3330 [label="param GetBoundReferenceManager(this) 816951"];
3331 [label="GetBoundReferenceManager(); 816952"];
3332 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 816953"];
3333 [label="param GetUnaliasedReferencedAssemblies(this) 816954"];
3334 [label="GetBoundReferenceManager() 816955"];
3335 [label="param GetBoundReferenceManager(this) 816956"];
3336 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 816957"];
3337 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 816958"];
3338 [label="Debug.Assert(symbol.IsDefinition); 816959"];
3339 [label="GetBoundReferenceManager(); 816960"];
3340 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 816961"];
3341 [label="GetBoundReferenceManager(); 816962"];
3342 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816963"];
3343 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 816964"];
3344 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 816965"];
3345 [label="GetBoundReferenceManager(); 816966"];
3346 [label="Debug.Assert(result.SpecialType == specialType); 816967"];
3347 [label="GetBoundReferenceManager(); 816968"];
3348 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 816969"];
3349 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 816970"];
3350 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816971"];
3351 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 816972"];
3352 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 816973"];
3353 [label="bool typeIsGeneric = IsGenericType(container); 816974"];
3354 [label="IsGenericType(container) 816975"];
3355 [label="param IsGenericType(NamedTypeSymbol toCheck) 816976"];
3356 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816977"];
3357 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 816978"];
3358 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 816979"];
3359 [label="toCheck = toCheck.ContainingType; 816980"];
3360 [label="return false; 816981"];
3361 [label="bool typeIsGeneric = IsGenericType(container); 816982"];
3362 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816983"];
3363 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816984"];
3364 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 816985"];
3365 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 816986"];
3366 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816987"];
3367 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 816988"];
3368 [label="param Translate(SyntaxNode syntaxNodeOpt) 816989"];
3369 [label="param Translate(DiagnosticBag diagnostics) 816990"];
3370 [label="param Translate(bool fromImplements = false) 816991"];
3371 [label="param Translate(bool needDeclaration = false) 816992"];
3372 [label="Debug.Assert(diagnostics != null); 816993"];
3373 [label="Debug.Assert(diagnostics != null); 816994"];
3374 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816995"];
3375 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 816996"];
3376 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 816997"];
3377 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816998"];
3378 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 816999"];
3379 [label="object reference; 817000"];
3380 [label="Cci.INamedTypeReference typeRef; 817001"];
3381 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 817002"];
3382 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817003"];
3383 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817004"];
3384 [label="IsGenericType(container) 817005"];
3385 [label="param IsGenericType(NamedTypeSymbol toCheck) 817006"];
3386 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817007"];
3387 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817008"];
3388 [label="return false; 817009"];
3389 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817010"];
3390 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817011"];
3391 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 817012"];
3392 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 817013"];
3393 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 817014"];
3394 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 817015"];
3395 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 817016"];
3396 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 817017"];
3397 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 817018"];
3398 [label="param MustBeWrapped(ParameterSymbol param) 817019"];
3399 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 817020"];
3400 [label="var container = param.ContainingSymbol; 817021"];
3401 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 817022"];
3402 [label="ContainerIsGeneric(container) 817023"];
3403 [label="param ContainerIsGeneric(Symbol container) 817024"];
3404 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817025"];
3405 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817026"];
3406 [label="IsGenericType(container.ContainingType) 817027"];
3407 [label="param IsGenericType(NamedTypeSymbol toCheck) 817028"];
3408 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817029"];
3409 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817030"];
3410 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 817031"];
3411 [label="toCheck = toCheck.ContainingType; 817032"];
3412 [label="return false; 817033"];
3413 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817034"];
3414 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817035"];
3415 [label="param MustBeWrapped(ParameterSymbol param) 817036"];
3416 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 817037"];
3417 [label="var container = param.ContainingSymbol; 817038"];
3418 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 817039"];
3419 [label="ContainerIsGeneric(container) 817040"];
3420 [label="param ContainerIsGeneric(Symbol container) 817041"];
3421 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817042"];
3422 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817043"];
3423 [label="IsGenericType(container.ContainingType) 817044"];
3424 [label="param IsGenericType(NamedTypeSymbol toCheck) 817045"];
3425 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817046"];
3426 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817047"];
3427 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 817048"];
3428 [label="toCheck = toCheck.ContainingType; 817049"];
3429 [label="return false; 817050"];
3430 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817051"];
3431 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 817052"];
3432 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 817053"];
3433 [label="toCheck = toCheck.ContainingType; 817054"];
3434 [label="return Translate(corLibrary, context.Diagnostics); 817055"];
3435 [label="param Translate(DiagnosticBag diagnostics) 817056"];
3436 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 817057"];
3437 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 817058"];
3438 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 817059"];
3439 [label="param SynthesizeNullableAttributeIfNecessary(this) 817060"];
3440 [label="object reference; 817061"];
3441 [label="Cci.INamedTypeReference typeRef; 817062"];
3442 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 817063"];
3443 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817064"];
3444 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817065"];
3445 [label="IsGenericType(container) 817066"];
3446 [label="param IsGenericType(NamedTypeSymbol toCheck) 817067"];
3447 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817068"];
3448 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 817069"];
3449 [label="return false; 817070"];
3450 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817071"];
3451 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 817072"];
3452 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 817073"];
3453 [label="GetBoundReferenceManager(); 817074"];
3454 [label="CustomAssert.True(emitResult.Success); 817075"];
3455 [label="emitResult.Diagnostics.Verify(); 817076"];
3456 [label="emitResult.Diagnostics 817077"];
3457 [label="param Verify(this ImmutableArray<Diagnostic> actual) 817078"];
3458 [label="param Verify(params DiagnosticDescription[] expected) 817079"];
3459 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 817080"];
3460 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 817081"];
3461 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 817082"];
3462 [label="param Verify(this IEnumerable<Diagnostic> actual) 817083"];
3463 [label="param Verify(params DiagnosticDescription[] expected) 817084"];
3464 [label="Verify(actual, expected, errorCodeOnly: false); 817085"];
3465 [label="Verify(actual, expected, errorCodeOnly: false); 817086"];
3466 [label="Verify(actual, expected, errorCodeOnly: false); 817087"];
3467 [label="Verify(actual, expected, errorCodeOnly: false) 817088"];
3468 [label="param Verify(IEnumerable<Diagnostic> actual) 817089"];
3469 [label="param Verify(DiagnosticDescription[] expected) 817090"];
3470 [label="param Verify(bool errorCodeOnly) 817091"];
3471 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 817092"];
3472 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 817093"];
3473 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 817094"];
3474 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 817095"];
3475 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 817096"];
3476 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 817097"];
3477 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 817098"];
3478 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 817099"];
3479 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 817100"];
3480 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 817101"];
3481 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 817102"];
3482 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 817103"];
3483 [label="{ } 817104"];
3484 [label="None = { } 817105"];
3485 [label="null 817106"];
3486 [label="Any = null 817107"];
3487 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 817108"];
3488 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 817109"];
3489 [label="DiagnosticDescription.GetAssertText(expected, actual) 817110"];
3490 [label="param GetAssertText(DiagnosticDescription[] expected) 817111"];
3491 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 817112"];
3492 [label="const int CSharp = 1; 817113"];
3493 [label="const int VisualBasic = 2; 817114"];
3494 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 817115"];
3495 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 817116"];
3496 [label="actual.Any() && actual.First() is CSDiagnostic 817117"];
3497 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 817118"];
3498 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 817119"];
3499 [label="int indentDepth = (language == CSharp) ? 4 : 1; 817120"];
3500 [label="(language == CSharp) 817121"];
3501 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 817122"];
3502 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 817123"];
3503 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 817124"];
3504 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 817125"];
3505 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 817126"];
3506 [label="IsSortedOrEmpty(expected) 817127"];
3507 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 817128"];
3508 [label="new LinePositionComparer() 817129"];
3509 [label="param LinePositionComparer(this) 817130"];
3510 [label="Instance = new LinePositionComparer() 817131"];
3511 [label="var comparer = LinePositionComparer.Instance; 817132"];
3512 [label="DiagnosticDescription last = null; 817133"];
3513 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 817134"];
3514 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 817135"];
3515 [label="return true; 817136"];
3516 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 817137"];
3517 [label="actual = Sort(actual); 817138"];
3518 [label="Sort(actual) 817139"];
3519 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 817140"];
3520 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 817141"];
3521 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 817142"];
3522 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 817143"];
3523 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 817144"];
3524 [label="var assertText = new StringBuilder(); 817145"];
3525 [label="assertText.AppendLine(); 817146"];
3526 [label="int i; 817147"];
3527 [label="assertText.AppendLine('Expected:'); 817148"];
3528 [label="assertText.AppendLine('Expected:'); 817149"];
3529 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 817150"];
3530 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 817151"];
3531 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 817152"];
3532 [label="GetCommaSeparatedLines(assertText, expectedText); 817153"];
3533 [label="GetCommaSeparatedLines(assertText, expectedText); 817154"];
3534 [label="GetCommaSeparatedLines(assertText, expectedText) 817155"];
3535 [label="param GetCommaSeparatedLines(StringBuilder sb) 817156"];
3536 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 817157"];
3537 [label="int n = lines.Count; 817158"];
3538 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 817159"];
3539 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 817160"];
3540 [label="GetCommaSeparatedLines(assertText, expectedText); 817161"];
3541 [label="assertText.AppendLine('Actual:'); 817162"];
3542 [label="assertText.AppendLine('Actual:'); 817163"];
3543 [label="var actualText = ArrayBuilder<string>.GetInstance(); 817164"];
3544 [label="var e = actual.GetEnumerator(); 817165"];
3545 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 817166"];
3546 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 817167"];
3547 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 817168"];
3548 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 817169"];
3549 [label="assertText.AppendLine('Diff:'); 817170"];
3550 [label="assertText.AppendLine('Diff:'); 817171"];
3551 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 817172"];
3552 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 817173"];
3553 [label="new[] { '\\r', '\\n' } 817174"];
3554 [label="'\\r' 817175"];
3555 [label="'\\n' 817176"];
3556 [label="new[] { '\\r', '\\n' } 817177"];
3557 [label="new[] { '\\r', '\\n' } 817178"];
3558 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 817179"];
3559 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 817180"];
3560 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 817181"];
3561 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 817182"];
3562 [label="param DiffReport(IEnumerable<T> expected) 817183"];
3563 [label="param DiffReport(IEnumerable<T> actual) 817184"];
3564 [label="param DiffReport(string separator) 817185"];
3565 [label="param DiffReport(IEqualityComparer<T> comparer = null) 817186"];
3566 [label="param DiffReport(Func<T, string> toString = null) 817187"];
3567 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 817188"];
3568 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 817189"];
3569 [label="(comparer != null) 817190"];
3570 [label="EqualityComparer<T>.Default 817191"];
3571 [label="new LCS<T>(EqualityComparer<T>.Default) 817192"];
3572 [label="param LCS(IEqualityComparer<T> comparer) 817193"];
3573 [label="param LCS(this) 817194"];
3574 [label="1 817195"];
3575 [label="DeleteCost = 1 817196"];
3576 [label="1 817197"];
3577 [label="InsertCost = 1 817198"];
3578 [label="2 817199"];
3579 [label="UpdateCost = 2 817200"];
3580 [label="param LongestCommonSubsequence(this) 817201"];
3581 [label="_comparer 817202"];
3582 [label="_comparer 817203"];
3583 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 817204"];
3584 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 817205"];
3585 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 817206"];
3586 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 817207"];
3587 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 817208"];
3588 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 817209"];
3589 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 817210"];
3590 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 817211"];
3591 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 817212"];
3592 [label="lcs.CalculateDiff(expectedList, actualList, toString) 817213"];
3593 [label="param CalculateDiff(IList<T> sequenceA) 817214"];
3594 [label="param CalculateDiff(IList<T> sequenceB) 817215"];
3595 [label="param CalculateDiff(Func<T, string> toString) 817216"];
3596 [label="param CalculateDiff(this) 817217"];
3597 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 817218"];
3598 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 817219"];
3599 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 817220"];
3600 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 817221"];
3601 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 817222"];
3602 [label="param GetEdits(TSequence sequenceA) 817223"];
3603 [label="param GetEdits(int lengthA) 817224"];
3604 [label="param GetEdits(TSequence sequenceB) 817225"];
3605 [label="param GetEdits(int lengthB) 817226"];
3606 [label="param GetEdits(this) 817227"];
3607 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 817228"];
3608 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 817229"];
3609 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 817230"];
3610 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 817231"];
3611 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 817232"];
3612 [label="param ComputeCostMatrix(TSequence sequenceA) 817233"];
3613 [label="param ComputeCostMatrix(int lengthA) 817234"];
3614 [label="param ComputeCostMatrix(TSequence sequenceB) 817235"];
3615 [label="param ComputeCostMatrix(int lengthB) 817236"];
3616 [label="param ComputeCostMatrix(this) 817237"];
3617 [label="var la = lengthA + 1; 817238"];
3618 [label="var la = lengthA + 1; 817239"];
3619 [label="var lb = lengthB + 1; 817240"];
3620 [label="var lb = lengthB + 1; 817241"];
3621 [label="var d = new int[la, lb]; 817242"];
3622 [label="d[0, 0] = 0; 817243"];
3623 [label="d[0, 0] 817244"];
3624 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 817245"];
3625 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 817246"];
3626 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 817247"];
3627 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 817248"];
3628 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 817249"];
3629 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 817250"];
3630 [label="return d; 817251"];
3631 [label="int i = lengthA; 817252"];
3632 [label="int j = lengthB; 817253"];
3633 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 817254"];
3634 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 817255"];
3635 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 817256"];
3636 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 817257"];
3637 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 817258"];
3638 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 817259"];
3639 [label="param GetEdits(this) 817260"];
3640 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 817261"];
3641 [label="param CalculateDiff(this) 817262"];
3642 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 817263"];
3643 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 817264"];
3644 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 817265"];
3645 [label="actualText.Free(); 817266"];
3646 [label="expectedText.Free(); 817267"];
3647 [label="return assertText.ToString(); 817268"];
3648 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 817269"];
3649 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 817270"];
3650 [label="emitResult.Diagnostics.Verify(); 817271"];
3651 [label="VerifyMethods(output, 'C', new[] { 'System.Int32 C.<PrivateSetter>k__BackingField', 'System.Int32 C.PrivateSetter.get', 'void C.PrivateSetter.set',\n                    'C..ctor()', 'System.Int32 C.PrivateSetter { get; private set; }' }); 817272"];
3652 [label="VerifyMethods(output, 'C', new[] { 'System.Int32 C.<PrivateSetter>k__BackingField', 'System.Int32 C.PrivateSetter.get', 'void C.PrivateSetter.set',\n                    'C..ctor()', 'System.Int32 C.PrivateSetter { get; private set; }' }); 817273"];
3653 [label="new[] { 'System.Int32 C.<PrivateSetter>k__BackingField', 'System.Int32 C.PrivateSetter.get', 'void C.PrivateSetter.set',\n                    'C..ctor()', 'System.Int32 C.PrivateSetter { get; private set; }' } 817274"];
3654 [label="VerifyMethods(output, 'C', new[] { 'System.Int32 C.<PrivateSetter>k__BackingField', 'System.Int32 C.PrivateSetter.get', 'void C.PrivateSetter.set',\n                    'C..ctor()', 'System.Int32 C.PrivateSetter { get; private set; }' }) 817275"];
3655 [label="param VerifyMethods(MemoryStream stream) 817276"];
3656 [label="param VerifyMethods(string containingType) 817277"];
3657 [label="param VerifyMethods(string[] expectedMethods) 817278"];
3658 [label="stream.Position = 0; 817279"];
3659 [label="stream.Position 817280"];
3660 [label="var metadataRef = AssemblyMetadata.CreateFromImage(stream.ToArray()).GetReference(); 817281"];
3661 [label="var metadataRef = AssemblyMetadata.CreateFromImage(stream.ToArray()).GetReference(); 817282"];
3662 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817283"];
3663 [label="MscorlibRef 817284"];
3664 [label="s_mscorlibRef.Value 817285"];
3665 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817286"];
3666 [label="new[] { MscorlibRef, metadataRef } 817287"];
3667 [label="new[] { MscorlibRef, metadataRef } 817288"];
3668 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817289"];
3669 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817290"];
3670 [label="new CSharpTestSource(source) 817291"];
3671 [label="param CSharpTestSource(this) 817292"];
3672 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 817293"];
3673 [label="=> CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 817294"];
3674 [label="skipUsesIsNullable 817295"];
3675 [label="null 817296"];
3676 [label="experimentalFeature: null 817297"];
3677 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 817298"];
3678 [label="param CreateCompilationCore(bool skipUsesIsNullable) 817299"];
3679 [label="param CreateCompilationCore(MessageID? experimentalFeature) 817300"];
3680 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 817301"];
3681 [label="var stream = new MemoryStream(); 817302"];
3682 [label="var root = tree.GetRoot(); 817303"];
3683 [label="root.SerializeTo(stream); 817304"];
3684 [label="root.SerializeTo(stream); 817305"];
3685 [label="root.SerializeTo(stream); 817306"];
3686 [label="stream.Position = 0; 817307"];
3687 [label="stream.Position 817308"];
3688 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 817309"];
3689 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 817310"];
3690 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 817311"];
3691 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 817312"];
3692 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 817313"];
3693 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 817314"];
3694 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 817315"];
3695 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 817316"];
3696 [label="param ValidateIOperations(Func<Compilation> createCompilation) 817317"];
3697 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 817318"];
3698 [label="return; 817319"];
3699 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 817320"];
3700 [label="var compilation = createCompilationLambda(); 817321"];
3701 [label="return Guid.NewGuid().ToString('D'); 817322"];
3702 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 817323"];
3703 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 817324"];
3704 [label="param Create(CSharpCompilation? previousSubmission) 817325"];
3705 [label="param Create(Type? returnType) 817326"];
3706 [label="param Create(Type? hostObjectType) 817327"];
3707 [label="param Create(bool isSubmission) 817328"];
3708 [label="RoslynDebug.Assert(options != null); 817329"];
3709 [label="RoslynDebug.Assert(options != null); 817330"];
3710 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 817331"];
3711 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817332"];
3712 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817333"];
3713 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817334"];
3714 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817335"];
3715 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817336"];
3716 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817337"];
3717 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 817338"];
3718 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 817339"];
3719 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 817340"];
3720 [label="param SyntaxAndDeclarationManager(bool isSubmission) 817341"];
3721 [label="param SyntaxAndDeclarationManager(State state) 817342"];
3722 [label="param SyntaxAndDeclarationManager(this) 817343"];
3723 [label="externalSyntaxTrees 817344"];
3724 [label="messageProvider 817345"];
3725 [label="isSubmission 817346"];
3726 [label="param SyntaxAndDeclarationManager(this) 817347"];
3727 [label="_lazyState 817348"];
3728 [label="_lazyState 817349"];
3729 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 817350"];
3730 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817351"];
3731 [label="param CSharpCompilation(Type? submissionReturnType) 817352"];
3732 [label="param CSharpCompilation(Type? hostObjectType) 817353"];
3733 [label="param CSharpCompilation(bool isSubmission) 817354"];
3734 [label="param CSharpCompilation(ReferenceManager? referenceManager) 817355"];
3735 [label="param CSharpCompilation(bool reuseReferenceManager) 817356"];
3736 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 817357"];
3737 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 817358"];
3738 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 817359"];
3739 [label="param CSharpCompilation(this) 817360"];
3740 [label="previousSubmission 817361"];
3741 [label="submissionReturnType 817362"];
3742 [label="hostObjectType 817363"];
3743 [label="isSubmission 817364"];
3744 [label="referenceManager 817365"];
3745 [label="reuseReferenceManager 817366"];
3746 [label="syntaxAndDeclarations 817367"];
3747 [label="semanticModelProvider 817368"];
3748 [label="eventQueue 817369"];
3749 [label="param CSharpCompilation(this) 817370"];
3750 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817371"];
3751 [label="param CSharpCompilation(Type? submissionReturnType) 817372"];
3752 [label="param CSharpCompilation(Type? hostObjectType) 817373"];
3753 [label="param CSharpCompilation(bool isSubmission) 817374"];
3754 [label="param CSharpCompilation(ReferenceManager? referenceManager) 817375"];
3755 [label="param CSharpCompilation(bool reuseReferenceManager) 817376"];
3756 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 817377"];
3757 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 817378"];
3758 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 817379"];
3759 [label="param CSharpCompilation(this) 817380"];
3760 [label="isSubmission 817381"];
3761 [label="semanticModelProvider 817382"];
3762 [label="eventQueue 817383"];
3763 [label="param CSharpCompilation(this) 817384"];
3764 [label="_options 817385"];
3765 [label="_globalImports 817386"];
3766 [label="_previousSubmissionImports 817387"];
3767 [label="_globalNamespaceAlias 817388"];
3768 [label="_scriptClass 817389"];
3769 [label="_lazyHostObjectTypeSymbol 817390"];
3770 [label="_lazyImportInfos 817391"];
3771 [label="_conversions 817392"];
3772 [label="_anonymousTypeManager 817393"];
3773 [label="_lazyGlobalNamespace 817394"];
3774 [label="builtInOperators 817395"];
3775 [label="_lazyAssemblySymbol 817396"];
3776 [label="_referenceManager 817397"];
3777 [label="_syntaxAndDeclarations 817398"];
3778 [label="_lazyEntryPoint 817399"];
3779 [label="_lazyEmitNullablePublicOnly 817400"];
3780 [label="_lazyCompilationUnitCompletedTrees 817401"];
3781 [label="NullableAnalysisData 817402"];
3782 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 817403"];
3783 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 817404"];
3784 [label="_externAliasTargets 817405"];
3785 [label="_moduleInitializerMethods 817406"];
3786 [label="_binderFactories 817407"];
3787 [label="_ignoreAccessibilityBinderFactories 817408"];
3788 [label="_lazyDeclarationDiagnostics 817409"];
3789 [label="_declarationDiagnosticsFrozen 817410"];
3790 [label="new DiagnosticBag() 817411"];
3791 [label="_additionalCodegenWarnings = new DiagnosticBag() 817412"];
3792 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 817413"];
3793 [label="this.builtInOperators = new BuiltInOperators(this); 817414"];
3794 [label="this.builtInOperators = new BuiltInOperators(this); 817415"];
3795 [label="new BuiltInOperators(this) 817416"];
3796 [label="param BuiltInOperators(CSharpCompilation compilation) 817417"];
3797 [label="param BuiltInOperators(this) 817418"];
3798 [label="_compilation 817419"];
3799 [label="_builtInUnaryOperators 817420"];
3800 [label="_builtInOperators 817421"];
3801 [label="_compilation 817422"];
3802 [label="this.builtInOperators 817423"];
3803 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 817424"];
3804 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 817425"];
3805 [label="LanguageVersion? result = null; 817426"];
3806 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 817427"];
3807 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 817428"];
3808 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 817429"];
3809 [label="this.LanguageVersion 817430"];
3810 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 817431"];
3811 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817432"];
3812 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817433"];
3813 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817434"];
3814 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817435"];
3815 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817436"];
3816 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817437"];
3817 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 817438"];
3818 [label="this.Options 817439"];
3819 [label="get\n            {\n                return _options;\n            } 817440"];
3820 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 817441"];
3821 [label="_syntaxAndDeclarations 817442"];
3822 [label="Debug.Assert(_lazyAssemblySymbol is null); 817443"];
3823 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 817444"];
3824 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 817445"];
3825 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 817446"];
3826 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 817447"];
3827 [label="int i = 0; 817448"];
3828 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 817449"];
3829 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 817450"];
3830 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 817451"];
3831 [label="i++; 817452"];
3832 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 817453"];
3833 [label="var scriptClassName = this.ScriptClassName; 817454"];
3834 [label="var resolver = this.Resolver; 817455"];
3835 [label="var messageProvider = this.MessageProvider; 817456"];
3836 [label="var isSubmission = this.IsSubmission; 817457"];
3837 [label="this.PreviousSubmission 817458"];
3838 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817459"];
3839 [label="param CSharpCompilation(Type? submissionReturnType) 817460"];
3840 [label="param CSharpCompilation(Type? hostObjectType) 817461"];
3841 [label="previousSubmission 817462"];
3842 [label="submissionReturnType 817463"];
3843 [label="hostObjectType 817464"];
3844 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817465"];
3845 [label="param CSharpCompilation(Type? submissionReturnType) 817466"];
3846 [label="param CSharpCompilation(Type? hostObjectType) 817467"];
3847 [label="_compilation 817468"];
3848 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 817469"];
3849 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817470"];
3850 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817471"];
3851 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817472"];
3852 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817473"];
3853 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817474"];
3854 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817475"];
3855 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 817476"];
3856 [label="Debug.Assert(_lazyAssemblySymbol is null); 817477"];
3857 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 817478"];
3858 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 817479"];
3859 [label="IsNullableEnabled(compilation) 817480"];
3860 [label="compilation.SyntaxTrees 817481"];
3861 [label="_syntaxAndDeclarations.GetLazyState() 817482"];
3862 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 817483"];
3863 [label="param CreateState(SourceReferenceResolver resolver) 817484"];
3864 [label="param CreateState(CommonMessageProvider messageProvider) 817485"];
3865 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 817486"];
3866 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 817487"];
3867 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 817488"];
3868 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 817489"];
3869 [label="var sourceCodeKind = tree.Options.Kind; 817490"];
3870 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 817491"];
3871 [label="OrdinalMap 817492"];
3872 [label="LoadDirectiveMap 817493"];
3873 [label="LoadedSyntaxTreeMap 817494"];
3874 [label="RootNamespaces 817495"];
3875 [label="DeclarationTable 817496"];
3876 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 817497"];
3877 [label="var options = (CSharpParseOptions)trees[0].Options; 817498"];
3878 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 817499"];
3879 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 817500"];
3880 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817501"];
3881 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817502"];
3882 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817503"];
3883 [label="compWithMetadata.GetMember<NamedTypeSymbol>(containingType) 817504"];
3884 [label="param GetMember(this CSharpCompilation compilation) 817505"];
3885 [label="param GetMember(string qualifiedName) 817506"];
3886 [label="compilation.GlobalNamespace 817507"];
3887 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 817508"];
3888 [label="Debug.Assert(_lazyAssemblySymbol is object); 817509"];
3889 [label="GetBoundReferenceManager(); 817510"];
3890 [label="return (T)compilation.GlobalNamespace.GetMember(qualifiedName); 817511"];
3891 [label="return (T)compilation.GlobalNamespace.GetMember(qualifiedName); 817512"];
3892 [label="compilation.GlobalNamespace.GetMember(qualifiedName) 817513"];
3893 [label="param GetMember(this NamespaceOrTypeSymbol container) 817514"];
3894 [label="param GetMember(string qualifiedName) 817515"];
3895 [label="NamespaceOrTypeSymbol lastContainer; 817516"];
3896 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 817517"];
3897 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 817518"];
3898 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 817519"];
3899 [label="GetMembers(container, qualifiedName, out lastContainer) 817520"];
3900 [label="param GetMembers(NamespaceOrTypeSymbol container) 817521"];
3901 [label="param GetMembers(string qualifiedName) 817522"];
3902 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 817523"];
3903 [label="var parts = SplitMemberName(qualifiedName); 817524"];
3904 [label="SplitMemberName(qualifiedName) 817525"];
3905 [label="param SplitMemberName(string name) 817526"];
3906 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 817527"];
3907 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 817528"];
3908 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 817529"];
3909 [label="var builder = ArrayBuilder<string>.GetInstance(); 817530"];
3910 [label="string part = name; 817531"];
3911 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 817532"];
3912 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 817533"];
3913 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 817534"];
3914 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 817535"];
3915 [label="builder.ReverseContents(); 817536"];
3916 [label="return builder.ToImmutableAndFree(); 817537"];
3917 [label="lastContainer = container; 817538"];
3918 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 817539"];
3919 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 817540"];
3920 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 817541"];
3921 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 817542"];
3922 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 817543"];
3923 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 817544"];
3924 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 817545"];
3925 [label="param SymbolDeclaredEvent(Symbol symbol) 817546"];
3926 [label="param SymbolDeclaredEvent(this) 817547"];
3927 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 817548"];
3928 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 817549"];
3929 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 817550"];
3930 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 817551"];
3931 [label="return members.Single(); 817552"];
3932 [label="'ROSLYN_DIFFTOOL' 817553"];
3933 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 817554"];
3934 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 817555"];
3935 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817556"];
3936 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())) 817557"];
3937 [label="param Equal(IEnumerable<T> expected) 817558"];
3938 [label="param Equal(IEnumerable<T> actual) 817559"];
3939 [label="param Equal(IEqualityComparer<T> comparer = null) 817560"];
3940 [label="param Equal(string message = null) 817561"];
3941 [label="param Equal(string itemSeparator = null) 817562"];
3942 [label="param Equal(Func<T, string> itemInspector = null) 817563"];
3943 [label="param Equal(string expectedValueSourcePath = null) 817564"];
3944 [label="param Equal(int expectedValueSourceLine = 0) 817565"];
3945 [label="var toReturn = true; 817566"];
3946 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 817567"];
3947 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 817568"];
3948 [label="CustomAssert.NotNull(actual); 817569"];
3949 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817570"];
3950 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817571"];
3951 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817572"];
3952 [label="SequenceEqual(expected, actual, comparer) 817573"];
3953 [label="param SequenceEqual(IEnumerable<T> expected) 817574"];
3954 [label="param SequenceEqual(IEnumerable<T> actual) 817575"];
3955 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 817576"];
3956 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 817577"];
3957 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 817578"];
3958 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 817579"];
3959 [label="var enumerator1 = expected.GetEnumerator(); 817580"];
3960 [label="var enumerator2 = actual.GetEnumerator(); 817581"];
3961 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 817582"];
3962 [label="var hasNext1 = enumerator1.MoveNext(); 817583"];
3963 [label="var hasNext2 = enumerator2.MoveNext(); 817584"];
3964 [label="var hasNext2 = enumerator2.MoveNext(); 817585"];
3965 [label="param ToTestDisplayString(this Symbol symbol) 817586"];
3966 [label="return symbol.ToDisplayString(SymbolDisplayFormat.TestFormat); 817587"];
3967 [label="return symbol.ToDisplayString(SymbolDisplayFormat.TestFormat); 817588"];
3968 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 817589"];
3969 [label="if (!hasNext1)\n                {\n                    break;\n                } 817590"];
3970 [label="var value1 = enumerator1.Current; 817591"];
3971 [label="var value2 = enumerator2.Current; 817592"];
3972 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817593"];
3973 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817594"];
3974 [label="comparer != null 817595"];
3975 [label="new AssertEqualityComparer<T>() 817596"];
3976 [label="param AssertEqualityComparer(this) 817597"];
3977 [label="s_instance = new AssertEqualityComparer<T>() 817598"];
3978 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817599"];
3979 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817600"];
3980 [label="AssertEqualityComparer<T>.Equals(value1, value2) 817601"];
3981 [label="param Equals(T left) 817602"];
3982 [label="param Equals(T right) 817603"];
3983 [label="return s_instance.Equals(left, right); 817604"];
3984 [label="return s_instance.Equals(left, right); 817605"];
3985 [label="s_instance.Equals(left, right) 817606"];
3986 [label="param Equals(T x) 817607"];
3987 [label="param Equals(T y) 817608"];
3988 [label="param Equals(this) 817609"];
3989 [label="CanBeNull() 817610"];
3990 [label="var type = typeof(T); 817611"];
3991 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 817612"];
3992 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 817613"];
3993 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 817614"];
3994 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 817615"];
3995 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 817616"];
3996 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 817617"];
3997 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 817618"];
3998 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 817619"];
3999 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 817620"];
4000 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 817621"];
4001 [label="return equatable.Equals(y); 817622"];
4002 [label="return true; 817623"];
4003 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817624"];
4004 [label="return true; 817625"];
4005 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817626"];
4006 [label="VerifyMethods(metadataOutput, 'C', new[] { 'System.Int32 C.PrivateSetter.get', 'C..ctor()', 'System.Int32 C.PrivateSetter { get; }' }); 817627"];
4007 [label="VerifyMethods(metadataOutput, 'C', new[] { 'System.Int32 C.PrivateSetter.get', 'C..ctor()', 'System.Int32 C.PrivateSetter { get; }' }); 817628"];
4008 [label="new[] { 'System.Int32 C.PrivateSetter.get', 'C..ctor()', 'System.Int32 C.PrivateSetter { get; }' } 817629"];
4009 [label="VerifyMethods(metadataOutput, 'C', new[] { 'System.Int32 C.PrivateSetter.get', 'C..ctor()', 'System.Int32 C.PrivateSetter { get; }' }) 817630"];
4010 [label="param VerifyMethods(MemoryStream stream) 817631"];
4011 [label="param VerifyMethods(string containingType) 817632"];
4012 [label="param VerifyMethods(string[] expectedMethods) 817633"];
4013 [label="stream.Position = 0; 817634"];
4014 [label="stream.Position 817635"];
4015 [label="var metadataRef = AssemblyMetadata.CreateFromImage(stream.ToArray()).GetReference(); 817636"];
4016 [label="var metadataRef = AssemblyMetadata.CreateFromImage(stream.ToArray()).GetReference(); 817637"];
4017 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817638"];
4018 [label="MscorlibRef 817639"];
4019 [label="s_mscorlibRef.Value 817640"];
4020 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817641"];
4021 [label="new[] { MscorlibRef, metadataRef } 817642"];
4022 [label="var compWithMetadata = CreateEmptyCompilation('', references: new[] { MscorlibRef, metadataRef },\n                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All)); 817643"];
4023 [label="new CSharpTestSource(source) 817644"];
4024 [label="param CSharpTestSource(this) 817645"];
4025 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 817646"];
4026 [label="=> CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 817647"];
4027 [label="skipUsesIsNullable 817648"];
4028 [label="null 817649"];
4029 [label="experimentalFeature: null 817650"];
4030 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 817651"];
4031 [label="param CreateCompilationCore(bool skipUsesIsNullable) 817652"];
4032 [label="param CreateCompilationCore(MessageID? experimentalFeature) 817653"];
4033 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 817654"];
4034 [label="var stream = new MemoryStream(); 817655"];
4035 [label="var root = tree.GetRoot(); 817656"];
4036 [label="root.SerializeTo(stream); 817657"];
4037 [label="root.SerializeTo(stream); 817658"];
4038 [label="root.SerializeTo(stream); 817659"];
4039 [label="stream.Position = 0; 817660"];
4040 [label="stream.Position 817661"];
4041 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 817662"];
4042 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 817663"];
4043 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 817664"];
4044 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 817665"];
4045 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 817666"];
4046 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 817667"];
4047 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 817668"];
4048 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 817669"];
4049 [label="param ValidateIOperations(Func<Compilation> createCompilation) 817670"];
4050 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 817671"];
4051 [label="return; 817672"];
4052 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 817673"];
4053 [label="var compilation = createCompilationLambda(); 817674"];
4054 [label="return Guid.NewGuid().ToString('D'); 817675"];
4055 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 817676"];
4056 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 817677"];
4057 [label="param Create(CSharpCompilation? previousSubmission) 817678"];
4058 [label="param Create(Type? returnType) 817679"];
4059 [label="param Create(Type? hostObjectType) 817680"];
4060 [label="param Create(bool isSubmission) 817681"];
4061 [label="RoslynDebug.Assert(options != null); 817682"];
4062 [label="RoslynDebug.Assert(options != null); 817683"];
4063 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 817684"];
4064 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817685"];
4065 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817686"];
4066 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817687"];
4067 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817688"];
4068 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817689"];
4069 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 817690"];
4070 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 817691"];
4071 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 817692"];
4072 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 817693"];
4073 [label="param SyntaxAndDeclarationManager(bool isSubmission) 817694"];
4074 [label="param SyntaxAndDeclarationManager(State state) 817695"];
4075 [label="param SyntaxAndDeclarationManager(this) 817696"];
4076 [label="externalSyntaxTrees 817697"];
4077 [label="messageProvider 817698"];
4078 [label="isSubmission 817699"];
4079 [label="param SyntaxAndDeclarationManager(this) 817700"];
4080 [label="_lazyState 817701"];
4081 [label="_lazyState 817702"];
4082 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 817703"];
4083 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817704"];
4084 [label="param CSharpCompilation(Type? submissionReturnType) 817705"];
4085 [label="param CSharpCompilation(Type? hostObjectType) 817706"];
4086 [label="param CSharpCompilation(bool isSubmission) 817707"];
4087 [label="param CSharpCompilation(ReferenceManager? referenceManager) 817708"];
4088 [label="param CSharpCompilation(bool reuseReferenceManager) 817709"];
4089 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 817710"];
4090 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 817711"];
4091 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 817712"];
4092 [label="param CSharpCompilation(this) 817713"];
4093 [label="previousSubmission 817714"];
4094 [label="submissionReturnType 817715"];
4095 [label="hostObjectType 817716"];
4096 [label="isSubmission 817717"];
4097 [label="referenceManager 817718"];
4098 [label="reuseReferenceManager 817719"];
4099 [label="syntaxAndDeclarations 817720"];
4100 [label="semanticModelProvider 817721"];
4101 [label="eventQueue 817722"];
4102 [label="param CSharpCompilation(this) 817723"];
4103 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817724"];
4104 [label="param CSharpCompilation(Type? submissionReturnType) 817725"];
4105 [label="param CSharpCompilation(Type? hostObjectType) 817726"];
4106 [label="param CSharpCompilation(bool isSubmission) 817727"];
4107 [label="param CSharpCompilation(ReferenceManager? referenceManager) 817728"];
4108 [label="param CSharpCompilation(bool reuseReferenceManager) 817729"];
4109 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 817730"];
4110 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 817731"];
4111 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 817732"];
4112 [label="param CSharpCompilation(this) 817733"];
4113 [label="isSubmission 817734"];
4114 [label="semanticModelProvider 817735"];
4115 [label="eventQueue 817736"];
4116 [label="param CSharpCompilation(this) 817737"];
4117 [label="_options 817738"];
4118 [label="_globalImports 817739"];
4119 [label="_previousSubmissionImports 817740"];
4120 [label="_globalNamespaceAlias 817741"];
4121 [label="_scriptClass 817742"];
4122 [label="_lazyHostObjectTypeSymbol 817743"];
4123 [label="_lazyImportInfos 817744"];
4124 [label="_conversions 817745"];
4125 [label="_anonymousTypeManager 817746"];
4126 [label="_lazyGlobalNamespace 817747"];
4127 [label="builtInOperators 817748"];
4128 [label="_lazyAssemblySymbol 817749"];
4129 [label="_referenceManager 817750"];
4130 [label="_syntaxAndDeclarations 817751"];
4131 [label="_lazyEntryPoint 817752"];
4132 [label="_lazyEmitNullablePublicOnly 817753"];
4133 [label="_lazyCompilationUnitCompletedTrees 817754"];
4134 [label="NullableAnalysisData 817755"];
4135 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 817756"];
4136 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 817757"];
4137 [label="_externAliasTargets 817758"];
4138 [label="_moduleInitializerMethods 817759"];
4139 [label="_binderFactories 817760"];
4140 [label="_ignoreAccessibilityBinderFactories 817761"];
4141 [label="_lazyDeclarationDiagnostics 817762"];
4142 [label="_declarationDiagnosticsFrozen 817763"];
4143 [label="new DiagnosticBag() 817764"];
4144 [label="_additionalCodegenWarnings = new DiagnosticBag() 817765"];
4145 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 817766"];
4146 [label="this.builtInOperators = new BuiltInOperators(this); 817767"];
4147 [label="this.builtInOperators = new BuiltInOperators(this); 817768"];
4148 [label="new BuiltInOperators(this) 817769"];
4149 [label="param BuiltInOperators(CSharpCompilation compilation) 817770"];
4150 [label="param BuiltInOperators(this) 817771"];
4151 [label="_compilation 817772"];
4152 [label="_builtInUnaryOperators 817773"];
4153 [label="_builtInOperators 817774"];
4154 [label="_compilation 817775"];
4155 [label="this.builtInOperators 817776"];
4156 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 817777"];
4157 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 817778"];
4158 [label="LanguageVersion? result = null; 817779"];
4159 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 817780"];
4160 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 817781"];
4161 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 817782"];
4162 [label="this.LanguageVersion 817783"];
4163 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 817784"];
4164 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817785"];
4165 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817786"];
4166 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817787"];
4167 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817788"];
4168 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817789"];
4169 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817790"];
4170 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 817791"];
4171 [label="this.Options 817792"];
4172 [label="get\n            {\n                return _options;\n            } 817793"];
4173 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 817794"];
4174 [label="_syntaxAndDeclarations 817795"];
4175 [label="Debug.Assert(_lazyAssemblySymbol is null); 817796"];
4176 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 817797"];
4177 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 817798"];
4178 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 817799"];
4179 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 817800"];
4180 [label="int i = 0; 817801"];
4181 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 817802"];
4182 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 817803"];
4183 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 817804"];
4184 [label="i++; 817805"];
4185 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 817806"];
4186 [label="var scriptClassName = this.ScriptClassName; 817807"];
4187 [label="var resolver = this.Resolver; 817808"];
4188 [label="var messageProvider = this.MessageProvider; 817809"];
4189 [label="var isSubmission = this.IsSubmission; 817810"];
4190 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817811"];
4191 [label="param CSharpCompilation(Type? submissionReturnType) 817812"];
4192 [label="param CSharpCompilation(Type? hostObjectType) 817813"];
4193 [label="previousSubmission 817814"];
4194 [label="submissionReturnType 817815"];
4195 [label="hostObjectType 817816"];
4196 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 817817"];
4197 [label="param CSharpCompilation(Type? submissionReturnType) 817818"];
4198 [label="param CSharpCompilation(Type? hostObjectType) 817819"];
4199 [label="_compilation 817820"];
4200 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 817821"];
4201 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817822"];
4202 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817823"];
4203 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817824"];
4204 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817825"];
4205 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817826"];
4206 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 817827"];
4207 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 817828"];
4208 [label="Debug.Assert(_lazyAssemblySymbol is null); 817829"];
4209 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 817830"];
4210 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 817831"];
4211 [label="IsNullableEnabled(compilation) 817832"];
4212 [label="compilation.SyntaxTrees 817833"];
4213 [label="_syntaxAndDeclarations.GetLazyState() 817834"];
4214 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 817835"];
4215 [label="param CreateState(CommonMessageProvider messageProvider) 817836"];
4216 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 817837"];
4217 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 817838"];
4218 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 817839"];
4219 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 817840"];
4220 [label="var sourceCodeKind = tree.Options.Kind; 817841"];
4221 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 817842"];
4222 [label="OrdinalMap 817843"];
4223 [label="LoadDirectiveMap 817844"];
4224 [label="LoadedSyntaxTreeMap 817845"];
4225 [label="RootNamespaces 817846"];
4226 [label="DeclarationTable 817847"];
4227 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 817848"];
4228 [label="var options = (CSharpParseOptions)trees[0].Options; 817849"];
4229 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 817850"];
4230 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 817851"];
4231 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817852"];
4232 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817853"];
4233 [label="compWithMetadata.GetMember<NamedTypeSymbol>(containingType) 817854"];
4234 [label="param GetMember(string qualifiedName) 817855"];
4235 [label="compilation.GlobalNamespace 817856"];
4236 [label="Debug.Assert(_lazyAssemblySymbol is object); 817857"];
4237 [label="GetBoundReferenceManager(); 817858"];
4238 [label="return (T)compilation.GlobalNamespace.GetMember(qualifiedName); 817859"];
4239 [label="compilation.GlobalNamespace.GetMember(qualifiedName) 817860"];
4240 [label="param GetMember(string qualifiedName) 817861"];
4241 [label="NamespaceOrTypeSymbol lastContainer; 817862"];
4242 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 817863"];
4243 [label="var members = GetMembers(container, qualifiedName, out lastContainer); 817864"];
4244 [label="GetMembers(container, qualifiedName, out lastContainer) 817865"];
4245 [label="param GetMembers(string qualifiedName) 817866"];
4246 [label="param GetMembers(out NamespaceOrTypeSymbol lastContainer) 817867"];
4247 [label="var parts = SplitMemberName(qualifiedName); 817868"];
4248 [label="SplitMemberName(qualifiedName) 817869"];
4249 [label="param SplitMemberName(string name) 817870"];
4250 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 817871"];
4251 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 817872"];
4252 [label="if (name.StartsWith('.', StringComparison.Ordinal))\n            {\n                return ImmutableArray.Create(name);\n            } 817873"];
4253 [label="var builder = ArrayBuilder<string>.GetInstance(); 817874"];
4254 [label="string part = name; 817875"];
4255 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 817876"];
4256 [label="while (part.Length > 0)\n            {\n                builder.Add(MetadataHelpers.SplitQualifiedName(part, out part));\n            } 817877"];
4257 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 817878"];
4258 [label="builder.Add(MetadataHelpers.SplitQualifiedName(part, out part)); 817879"];
4259 [label="builder.ReverseContents(); 817880"];
4260 [label="return builder.ToImmutableAndFree(); 817881"];
4261 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 817882"];
4262 [label="for (int i = 0; i < parts.Length - 1; i++)\n            {\n                var nestedContainer = (NamespaceOrTypeSymbol)lastContainer.GetMember(parts[i]);\n                if (nestedContainer == null)\n                {\n                    // If there wasn't a nested namespace or type with that name, assume it's a\n                    // member name that includes dots (e.g. explicit interface implementation).\n                    return lastContainer.GetMembers(string.Join('.', parts.Skip(i)));\n                }\n                else\n                {\n                    lastContainer = nestedContainer;\n                }\n            } 817883"];
4263 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 817884"];
4264 [label="return lastContainer.GetMembers(parts[parts.Length - 1]); 817885"];
4265 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 817886"];
4266 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 817887"];
4267 [label="param SymbolDeclaredEvent(Symbol symbol) 817888"];
4268 [label="param SymbolDeclaredEvent(this) 817889"];
4269 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 817890"];
4270 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 817891"];
4271 [label="if (members.Length == 0)\n            {\n                return null;\n            }\n            else if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 817892"];
4272 [label="if (members.Length > 1)\n            {\n                CustomAssert.True(false, 'Found multiple members of specified name:\\r\\n' + string.Join('\\r\\n', members));\n            } 817893"];
4273 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817894"];
4274 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())) 817895"];
4275 [label="param Equal(IEnumerable<T> expected) 817896"];
4276 [label="param Equal(IEqualityComparer<T> comparer = null) 817897"];
4277 [label="param Equal(string message = null) 817898"];
4278 [label="param Equal(string itemSeparator = null) 817899"];
4279 [label="param Equal(Func<T, string> itemInspector = null) 817900"];
4280 [label="param Equal(string expectedValueSourcePath = null) 817901"];
4281 [label="param Equal(int expectedValueSourceLine = 0) 817902"];
4282 [label="var toReturn = true; 817903"];
4283 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 817904"];
4284 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 817905"];
4285 [label="CustomAssert.NotNull(actual); 817906"];
4286 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817907"];
4287 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817908"];
4288 [label="SequenceEqual(expected, actual, comparer) 817909"];
4289 [label="param SequenceEqual(IEnumerable<T> expected) 817910"];
4290 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 817911"];
4291 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 817912"];
4292 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 817913"];
4293 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 817914"];
4294 [label="var enumerator1 = expected.GetEnumerator(); 817915"];
4295 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 817916"];
4296 [label="var hasNext1 = enumerator1.MoveNext(); 817917"];
4297 [label="var hasNext2 = enumerator2.MoveNext(); 817918"];
4298 [label="return symbol.ToDisplayString(SymbolDisplayFormat.TestFormat); 817919"];
4299 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 817920"];
4300 [label="if (!hasNext1)\n                {\n                    break;\n                } 817921"];
4301 [label="var value1 = enumerator1.Current; 817922"];
4302 [label="var value2 = enumerator2.Current; 817923"];
4303 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817924"];
4304 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817925"];
4305 [label="comparer != null 817926"];
4306 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817927"];
4307 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 817928"];
4308 [label="AssertEqualityComparer<T>.Equals(value1, value2) 817929"];
4309 [label="param Equals(T left) 817930"];
4310 [label="param Equals(T right) 817931"];
4311 [label="return s_instance.Equals(left, right); 817932"];
4312 [label="return s_instance.Equals(left, right); 817933"];
4313 [label="s_instance.Equals(left, right) 817934"];
4314 [label="param Equals(T x) 817935"];
4315 [label="param Equals(T y) 817936"];
4316 [label="param Equals(this) 817937"];
4317 [label="CanBeNull() 817938"];
4318 [label="var type = typeof(T); 817939"];
4319 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 817940"];
4320 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 817941"];
4321 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 817942"];
4322 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 817943"];
4323 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 817944"];
4324 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 817945"];
4325 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 817946"];
4326 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 817947"];
4327 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 817948"];
4328 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 817949"];
4329 [label="return equatable.Equals(y); 817950"];
4330 [label="return true; 817951"];
4331 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 817952"];
4332 [label="return true; 817953"];
4333 [label="AssertEx.Equal(\n                expectedMethods,\n                compWithMetadata.GetMember<NamedTypeSymbol>(containingType).GetMembers().Select(m => m.ToTestDisplayString())); 817954"];
4334 [label="VerifyMvid(output, hasMvidSection: false); 817955"];
4335 [label="VerifyMvid(output, hasMvidSection: false); 817956"];
4336 [label="VerifyMvid(output, hasMvidSection: false) 817957"];
4337 [label="param VerifyMvid(MemoryStream stream) 817958"];
4338 [label="param VerifyMvid(bool hasMvidSection) 817959"];
4339 [label="param VerifyMvid(this) 817960"];
4340 [label="stream.Position = 0; 817961"];
4341 [label="stream.Position 817962"];
4342 [label="using (var reader = new PEReader(stream))\n            {\n                var metadataReader = reader.GetMetadataReader();\n                Guid mvidFromModuleDefinition = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);\n\n                stream.Position = 0;\n                var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream);\n\n                CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition);\n                if (hasMvidSection)\n                {\n                    CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader);\n                }\n                else\n                {\n                    CustomAssert.Equal(Guid.Empty, mvidFromMvidReader);\n                }\n            } 817963"];
4343 [label="using (var reader = new PEReader(stream))\n            {\n                var metadataReader = reader.GetMetadataReader();\n                Guid mvidFromModuleDefinition = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);\n\n                stream.Position = 0;\n                var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream);\n\n                CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition);\n                if (hasMvidSection)\n                {\n                    CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader);\n                }\n                else\n                {\n                    CustomAssert.Equal(Guid.Empty, mvidFromMvidReader);\n                }\n            } 817964"];
4344 [label="var metadataReader = reader.GetMetadataReader(); 817965"];
4345 [label="Guid mvidFromModuleDefinition = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid); 817966"];
4346 [label="stream.Position = 0; 817967"];
4347 [label="stream.Position 817968"];
4348 [label="var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream); 817969"];
4349 [label="var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream); 817970"];
4350 [label="CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition); 817971"];
4351 [label="CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition); 817972"];
4352 [label="if (hasMvidSection)\n                {\n                    CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader);\n                }\n                else\n                {\n                    CustomAssert.Equal(Guid.Empty, mvidFromMvidReader);\n                } 817973"];
4353 [label="CustomAssert.Equal(Guid.Empty, mvidFromMvidReader); 817974"];
4354 [label="CustomAssert.Equal(Guid.Empty, mvidFromMvidReader); 817975"];
4355 [label="VerifyMvid(metadataOutput, hasMvidSection: true); 817976"];
4356 [label="VerifyMvid(metadataOutput, hasMvidSection: true); 817977"];
4357 [label="VerifyMvid(metadataOutput, hasMvidSection: true) 817978"];
4358 [label="param VerifyMvid(MemoryStream stream) 817979"];
4359 [label="param VerifyMvid(bool hasMvidSection) 817980"];
4360 [label="param VerifyMvid(this) 817981"];
4361 [label="stream.Position = 0; 817982"];
4362 [label="stream.Position 817983"];
4363 [label="using (var reader = new PEReader(stream))\n            {\n                var metadataReader = reader.GetMetadataReader();\n                Guid mvidFromModuleDefinition = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);\n\n                stream.Position = 0;\n                var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream);\n\n                CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition);\n                if (hasMvidSection)\n                {\n                    CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader);\n                }\n                else\n                {\n                    CustomAssert.Equal(Guid.Empty, mvidFromMvidReader);\n                }\n            } 817984"];
4364 [label="using (var reader = new PEReader(stream))\n            {\n                var metadataReader = reader.GetMetadataReader();\n                Guid mvidFromModuleDefinition = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);\n\n                stream.Position = 0;\n                var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream);\n\n                CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition);\n                if (hasMvidSection)\n                {\n                    CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader);\n                }\n                else\n                {\n                    CustomAssert.Equal(Guid.Empty, mvidFromMvidReader);\n                }\n            } 817985"];
4365 [label="stream.Position = 0; 817986"];
4366 [label="stream.Position 817987"];
4367 [label="var mvidFromMvidReader = BuildTasks.MvidReader.ReadAssemblyMvidOrEmpty(stream); 817988"];
4368 [label="CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition); 817989"];
4369 [label="CustomAssert.NotEqual(Guid.Empty, mvidFromModuleDefinition); 817990"];
4370 [label="if (hasMvidSection)\n                {\n                    CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader);\n                }\n                else\n                {\n                    CustomAssert.Equal(Guid.Empty, mvidFromMvidReader);\n                } 817991"];
4371 [label="CustomAssert.Equal(mvidFromModuleDefinition, mvidFromMvidReader); 817992"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 1;
13 -> 11;
13 -> 12;
14 -> 13;
14 -> 12;
15 -> 12;
16 -> 14;
16 -> 15;
17 -> 15;
18 -> 16;
18 -> 17;
18 -> 15;
19 -> 15;
19 -> 1;
20 -> 1;
21 -> 19;
21 -> 20;
22 -> 11;
22 -> 20;
23 -> 11;
23 -> 20;
24 -> 11;
24 -> 20;
25 -> 11;
25 -> 20;
26 -> 11;
26 -> 20;
27 -> 11;
27 -> 20;
28 -> 11;
28 -> 20;
29 -> 21;
29 -> 20;
30 -> 25;
30 -> 20;
31 -> 22;
31 -> 20;
32 -> 20;
33 -> 30;
33 -> 32;
34 -> 31;
34 -> 32;
35 -> 33;
35 -> 32;
36 -> 32;
37 -> 35;
37 -> 36;
38 -> 37;
38 -> 36;
39 -> 38;
40 -> 0;
40 -> 39;
41 -> 40;
42 -> 41;
43 -> 41;
44 -> 0;
44 -> 43;
45 -> 44;
45 -> 42;
45 -> 41;
46 -> 45;
46 -> 39;
47 -> 32;
48 -> 34;
48 -> 47;
48 -> 32;
49 -> 46;
49 -> 48;
50 -> 23;
50 -> 20;
51 -> 24;
51 -> 20;
52 -> 26;
52 -> 20;
53 -> 27;
53 -> 20;
54 -> 28;
54 -> 20;
55 -> 20;
56 -> 29;
56 -> 55;
57 -> 49;
57 -> 55;
58 -> 50;
58 -> 55;
59 -> 51;
59 -> 55;
60 -> 52;
60 -> 55;
61 -> 53;
61 -> 55;
62 -> 54;
62 -> 55;
63 -> 56;
63 -> 55;
64 -> 57;
64 -> 55;
65 -> 58;
65 -> 55;
66 -> 59;
66 -> 55;
67 -> 60;
67 -> 55;
68 -> 61;
68 -> 55;
69 -> 62;
69 -> 55;
70 -> 55;
71 -> 70;
71 -> 55;
72 -> 55;
73 -> 63;
73 -> 72;
74 -> 64;
74 -> 72;
75 -> 65;
75 -> 72;
76 -> 66;
76 -> 72;
77 -> 67;
77 -> 72;
78 -> 68;
78 -> 72;
79 -> 69;
79 -> 72;
80 -> 71;
80 -> 72;
81 -> 76;
81 -> 72;
82 -> 78;
82 -> 72;
83 -> 72;
84 -> 81;
84 -> 83;
85 -> 82;
85 -> 83;
86 -> 73;
86 -> 83;
87 -> 86;
87 -> 18;
87 -> 83;
88 -> 87;
89 -> 85;
89 -> 87;
90 -> 84;
90 -> 87;
91 -> 87;
92 -> 88;
92 -> 91;
93 -> 89;
93 -> 91;
94 -> 90;
94 -> 91;
95 -> 88;
95 -> 91;
96 -> 91;
97 -> 94;
97 -> 96;
97 -> 91;
98 -> 0;
98 -> 97;
99 -> 92;
99 -> 91;
100 -> 0;
100 -> 91;
101 -> 100;
101 -> 95;
101 -> 91;
102 -> 91;
103 -> 99;
103 -> 101;
103 -> 102;
103 -> 0;
103 -> 91;
104 -> 103;
104 -> 91;
105 -> 98;
105 -> 91;
106 -> 93;
106 -> 91;
107 -> 91;
108 -> 104;
108 -> 105;
108 -> 106;
108 -> 107;
108 -> 103;
108 -> 0;
108 -> 91;
109 -> 91;
110 -> 108;
110 -> 109;
111 -> 109;
112 -> 109;
113 -> 110;
113 -> 108;
113 -> 112;
113 -> 109;
114 -> 111;
114 -> 109;
115 -> 109;
116 -> 113;
116 -> 108;
116 -> 112;
116 -> 114;
116 -> 115;
116 -> 111;
116 -> 109;
117 -> 109;
118 -> 117;
118 -> 111;
118 -> 109;
119 -> 111;
119 -> 109;
120 -> 109;
121 -> 119;
121 -> 120;
121 -> 111;
121 -> 118;
121 -> 109;
122 -> 110;
122 -> 109;
123 -> 122;
123 -> 88;
123 -> 87;
124 -> 88;
124 -> 72;
125 -> 72;
126 -> 75;
126 -> 125;
126 -> 72;
127 -> 124;
127 -> 126;
128 -> 126;
129 -> 127;
129 -> 128;
129 -> 88;
129 -> 123;
129 -> 108;
129 -> 126;
130 -> 129;
130 -> 126;
131 -> 0;
131 -> 130;
132 -> 0;
132 -> 72;
133 -> 80;
133 -> 72;
134 -> 77;
134 -> 124;
134 -> 74;
134 -> 131;
134 -> 72;
135 -> 134;
135 -> 72;
136 -> 72;
137 -> 135;
137 -> 136;
138 -> 0;
138 -> 136;
139 -> 138;
140 -> 72;
141 -> 134;
141 -> 88;
141 -> 123;
141 -> 108;
141 -> 45;
141 -> 0;
141 -> 42;
141 -> 72;
142 -> 72;
143 -> 142;
144 -> 141;
144 -> 143;
144 -> 72;
145 -> 0;
147 -> 145;
147 -> 146;
148 -> 147;
149 -> 0;
151 -> 149;
151 -> 150;
153 -> 151;
153 -> 152;
154 -> 153;
155 -> 141;
155 -> 142;
156 -> 141;
156 -> 142;
157 -> 141;
157 -> 142;
158 -> 141;
158 -> 142;
159 -> 155;
159 -> 142;
160 -> 158;
160 -> 142;
161 -> 156;
161 -> 142;
162 -> 157;
162 -> 142;
163 -> 142;
164 -> 142;
165 -> 159;
165 -> 164;
166 -> 160;
166 -> 164;
167 -> 161;
167 -> 164;
168 -> 162;
168 -> 164;
169 -> 163;
169 -> 164;
170 -> 163;
170 -> 164;
171 -> 163;
171 -> 164;
172 -> 163;
172 -> 164;
173 -> 164;
174 -> 166;
174 -> 173;
174 -> 164;
175 -> 172;
175 -> 164;
176 -> 168;
176 -> 164;
177 -> 176;
177 -> 144;
177 -> 164;
178 -> 165;
178 -> 164;
179 -> 166;
179 -> 164;
180 -> 177;
180 -> 164;
181 -> 169;
181 -> 164;
182 -> 170;
182 -> 164;
183 -> 171;
183 -> 164;
184 -> 172;
184 -> 164;
185 -> 164;
186 -> 0;
186 -> 164;
187 -> 166;
187 -> 177;
187 -> 164;
188 -> 164;
189 -> 186;
189 -> 188;
190 -> 187;
190 -> 188;
191 -> 187;
191 -> 188;
192 -> 186;
192 -> 188;
193 -> 184;
193 -> 188;
194 -> 185;
194 -> 188;
195 -> 185;
195 -> 188;
196 -> 189;
196 -> 188;
197 -> 190;
197 -> 188;
198 -> 191;
198 -> 188;
199 -> 192;
199 -> 188;
200 -> 193;
200 -> 188;
201 -> 188;
202 -> 201;
202 -> 196;
202 -> 197;
202 -> 198;
202 -> 199;
202 -> 200;
202 -> 0;
202 -> 177;
202 -> 188;
203 -> 201;
203 -> 188;
204 -> 194;
204 -> 201;
204 -> 188;
205 -> 164;
206 -> 178;
206 -> 205;
207 -> 179;
207 -> 205;
208 -> 180;
208 -> 205;
209 -> 181;
209 -> 205;
210 -> 182;
210 -> 205;
211 -> 183;
211 -> 205;
212 -> 184;
212 -> 205;
213 -> 185;
213 -> 205;
214 -> 185;
214 -> 205;
215 -> 185;
215 -> 205;
216 -> 185;
216 -> 205;
217 -> 185;
217 -> 205;
218 -> 185;
218 -> 205;
219 -> 206;
219 -> 205;
220 -> 207;
220 -> 205;
221 -> 208;
221 -> 205;
222 -> 209;
222 -> 205;
223 -> 210;
223 -> 205;
224 -> 211;
224 -> 205;
225 -> 212;
225 -> 205;
226 -> 213;
226 -> 205;
227 -> 214;
227 -> 205;
228 -> 215;
228 -> 205;
229 -> 215;
229 -> 202;
229 -> 205;
230 -> 229;
230 -> 202;
230 -> 203;
230 -> 204;
230 -> 205;
231 -> 216;
231 -> 205;
232 -> 217;
232 -> 205;
233 -> 205;
234 -> 219;
234 -> 233;
235 -> 220;
235 -> 233;
236 -> 221;
236 -> 233;
237 -> 222;
237 -> 233;
238 -> 223;
238 -> 233;
239 -> 224;
239 -> 233;
240 -> 225;
240 -> 233;
241 -> 226;
241 -> 233;
242 -> 227;
242 -> 233;
243 -> 228;
243 -> 233;
244 -> 230;
244 -> 233;
245 -> 231;
245 -> 233;
246 -> 232;
246 -> 233;
247 -> 218;
247 -> 233;
248 -> 234;
248 -> 233;
249 -> 236;
249 -> 233;
250 -> 244;
250 -> 233;
251 -> 240;
251 -> 233;
252 -> 245;
252 -> 233;
253 -> 246;
253 -> 233;
254 -> 233;
255 -> 254;
255 -> 248;
255 -> 249;
255 -> 250;
255 -> 251;
255 -> 252;
255 -> 253;
255 -> 177;
255 -> 230;
255 -> 233;
256 -> 254;
256 -> 233;
257 -> 254;
257 -> 233;
258 -> 254;
258 -> 233;
259 -> 254;
259 -> 233;
260 -> 254;
260 -> 233;
261 -> 254;
261 -> 233;
262 -> 254;
262 -> 233;
263 -> 254;
263 -> 233;
264 -> 254;
264 -> 233;
265 -> 254;
265 -> 233;
266 -> 254;
266 -> 233;
267 -> 254;
267 -> 233;
268 -> 254;
268 -> 233;
269 -> 254;
269 -> 233;
270 -> 254;
270 -> 233;
271 -> 254;
271 -> 233;
272 -> 254;
272 -> 233;
273 -> 254;
273 -> 233;
274 -> 254;
274 -> 233;
275 -> 254;
275 -> 233;
276 -> 254;
276 -> 233;
277 -> 254;
277 -> 233;
278 -> 254;
278 -> 233;
279 -> 254;
279 -> 233;
280 -> 254;
280 -> 233;
281 -> 254;
281 -> 233;
282 -> 233;
283 -> 282;
283 -> 254;
283 -> 233;
284 -> 254;
284 -> 233;
285 -> 284;
285 -> 255;
285 -> 256;
285 -> 257;
285 -> 258;
285 -> 259;
285 -> 260;
285 -> 261;
285 -> 262;
285 -> 263;
285 -> 264;
285 -> 265;
285 -> 266;
285 -> 267;
285 -> 268;
285 -> 269;
285 -> 270;
285 -> 271;
285 -> 272;
285 -> 273;
285 -> 274;
285 -> 275;
285 -> 276;
285 -> 277;
285 -> 278;
285 -> 279;
285 -> 280;
285 -> 281;
285 -> 283;
285 -> 282;
285 -> 233;
286 -> 285;
286 -> 254;
286 -> 233;
287 -> 235;
287 -> 254;
287 -> 233;
288 -> 254;
288 -> 233;
289 -> 233;
290 -> 233;
291 -> 288;
291 -> 290;
292 -> 289;
292 -> 290;
293 -> 292;
293 -> 290;
294 -> 292;
294 -> 290;
295 -> 292;
295 -> 290;
296 -> 291;
296 -> 292;
296 -> 290;
297 -> 289;
297 -> 254;
297 -> 233;
298 -> 254;
298 -> 285;
298 -> 233;
299 -> 298;
299 -> 285;
299 -> 286;
299 -> 287;
299 -> 297;
299 -> 296;
299 -> 294;
299 -> 295;
299 -> 233;
300 -> 299;
300 -> 254;
300 -> 233;
301 -> 254;
301 -> 299;
301 -> 233;
302 -> 301;
302 -> 299;
302 -> 300;
302 -> 233;
303 -> 302;
303 -> 254;
303 -> 233;
304 -> 254;
304 -> 302;
304 -> 233;
305 -> 304;
305 -> 302;
305 -> 303;
305 -> 233;
306 -> 305;
306 -> 254;
306 -> 233;
307 -> 254;
307 -> 305;
307 -> 233;
308 -> 307;
308 -> 305;
308 -> 306;
308 -> 233;
309 -> 308;
309 -> 254;
309 -> 233;
310 -> 254;
310 -> 233;
311 -> 310;
311 -> 308;
311 -> 309;
311 -> 233;
312 -> 311;
312 -> 254;
312 -> 233;
313 -> 243;
313 -> 311;
313 -> 233;
314 -> 233;
315 -> 313;
315 -> 314;
316 -> 314;
317 -> 315;
317 -> 314;
318 -> 317;
318 -> 311;
318 -> 312;
318 -> 314;
319 -> 0;
319 -> 314;
320 -> 319;
320 -> 316;
320 -> 314;
321 -> 320;
321 -> 233;
322 -> 321;
322 -> 254;
322 -> 233;
323 -> 240;
323 -> 233;
324 -> 323;
325 -> 237;
325 -> 324;
325 -> 323;
326 -> 238;
326 -> 324;
326 -> 323;
327 -> 325;
327 -> 326;
327 -> 323;
328 -> 239;
328 -> 324;
328 -> 323;
329 -> 327;
329 -> 328;
329 -> 323;
330 -> 242;
330 -> 233;
331 -> 254;
331 -> 311;
331 -> 312;
331 -> 322;
331 -> 330;
332 -> 330;
333 -> 254;
333 -> 332;
334 -> 333;
334 -> 331;
334 -> 332;
335 -> 241;
335 -> 330;
336 -> 331;
336 -> 334;
336 -> 335;
336 -> 330;
337 -> 336;
337 -> 254;
337 -> 330;
338 -> 243;
338 -> 254;
338 -> 233;
339 -> 254;
339 -> 336;
339 -> 233;
340 -> 233;
341 -> 254;
341 -> 336;
341 -> 340;
341 -> 233;
342 -> 164;
343 -> 167;
343 -> 342;
343 -> 164;
344 -> 167;
344 -> 343;
345 -> 343;
346 -> 344;
346 -> 345;
347 -> 185;
347 -> 345;
348 -> 345;
349 -> 346;
349 -> 348;
349 -> 345;
350 -> 346;
350 -> 345;
351 -> 350;
351 -> 336;
351 -> 337;
351 -> 338;
351 -> 345;
352 -> 345;
353 -> 347;
353 -> 351;
353 -> 345;
354 -> 352;
354 -> 345;
355 -> 353;
355 -> 351;
355 -> 345;
356 -> 354;
356 -> 355;
356 -> 352;
356 -> 351;
356 -> 345;
357 -> 345;
358 -> 345;
359 -> 346;
359 -> 345;
360 -> 359;
360 -> 356;
360 -> 345;
361 -> 360;
362 -> 360;
363 -> 360;
364 -> 347;
364 -> 363;
364 -> 360;
365 -> 360;
366 -> 352;
366 -> 365;
366 -> 363;
366 -> 360;
367 -> 357;
367 -> 360;
367 -> 366;
368 -> 358;
368 -> 360;
369 -> 352;
369 -> 366;
369 -> 345;
370 -> 347;
370 -> 369;
370 -> 345;
371 -> 346;
371 -> 345;
372 -> 345;
373 -> 371;
373 -> 372;
374 -> 353;
374 -> 372;
375 -> 374;
375 -> 369;
375 -> 372;
376 -> 374;
376 -> 369;
376 -> 372;
377 -> 374;
377 -> 369;
377 -> 372;
378 -> 374;
378 -> 369;
378 -> 372;
379 -> 374;
379 -> 369;
379 -> 372;
380 -> 373;
380 -> 372;
381 -> 374;
381 -> 369;
381 -> 380;
381 -> 372;
382 -> 372;
383 -> 379;
383 -> 382;
383 -> 372;
384 -> 381;
384 -> 383;
385 -> 383;
386 -> 384;
386 -> 385;
387 -> 374;
387 -> 385;
388 -> 386;
388 -> 385;
389 -> 387;
389 -> 381;
389 -> 385;
390 -> 385;
391 -> 385;
392 -> 388;
392 -> 391;
393 -> 389;
393 -> 391;
394 -> 389;
394 -> 391;
395 -> 389;
395 -> 391;
396 -> 389;
396 -> 391;
397 -> 390;
397 -> 391;
398 -> 390;
398 -> 391;
399 -> 391;
399 -> 392;
399 -> 393;
399 -> 394;
399 -> 395;
399 -> 396;
399 -> 381;
400 -> 390;
400 -> 383;
401 -> 400;
401 -> 345;
402 -> 347;
402 -> 399;
402 -> 345;
403 -> 367;
403 -> 345;
404 -> 401;
404 -> 345;
405 -> 345;
406 -> 402;
406 -> 405;
407 -> 403;
407 -> 405;
408 -> 404;
408 -> 405;
409 -> 347;
409 -> 405;
410 -> 409;
410 -> 399;
410 -> 405;
411 -> 405;
412 -> 409;
412 -> 411;
413 -> 412;
413 -> 399;
413 -> 411;
414 -> 413;
414 -> 411;
415 -> 414;
415 -> 405;
416 -> 409;
416 -> 399;
416 -> 391;
416 -> 397;
416 -> 405;
417 -> 405;
418 -> 416;
418 -> 417;
419 -> 418;
419 -> 416;
419 -> 417;
420 -> 405;
421 -> 419;
421 -> 420;
422 -> 406;
422 -> 405;
423 -> 407;
423 -> 405;
424 -> 408;
424 -> 405;
425 -> 405;
426 -> 405;
427 -> 410;
427 -> 426;
428 -> 410;
428 -> 426;
429 -> 410;
429 -> 426;
430 -> 415;
430 -> 426;
431 -> 419;
431 -> 426;
432 -> 421;
432 -> 426;
433 -> 421;
433 -> 426;
434 -> 422;
434 -> 426;
435 -> 423;
435 -> 426;
436 -> 424;
436 -> 426;
437 -> 421;
437 -> 426;
438 -> 425;
438 -> 426;
439 -> 425;
439 -> 426;
440 -> 430;
440 -> 426;
441 -> 431;
441 -> 426;
442 -> 432;
442 -> 426;
443 -> 436;
443 -> 421;
443 -> 426;
444 -> 438;
444 -> 426;
445 -> 426;
446 -> 440;
446 -> 445;
447 -> 441;
447 -> 445;
448 -> 442;
448 -> 445;
449 -> 444;
449 -> 445;
450 -> 439;
450 -> 445;
451 -> 449;
451 -> 445;
452 -> 445;
453 -> 452;
453 -> 445;
454 -> 452;
454 -> 445;
455 -> 452;
455 -> 445;
456 -> 452;
456 -> 445;
457 -> 452;
457 -> 445;
458 -> 452;
458 -> 445;
459 -> 452;
459 -> 445;
460 -> 452;
460 -> 445;
461 -> 452;
461 -> 445;
462 -> 452;
462 -> 445;
463 -> 452;
463 -> 445;
464 -> 452;
464 -> 445;
465 -> 452;
465 -> 445;
466 -> 452;
466 -> 445;
467 -> 452;
467 -> 445;
468 -> 452;
468 -> 445;
469 -> 452;
469 -> 445;
470 -> 452;
470 -> 445;
471 -> 452;
471 -> 445;
472 -> 452;
472 -> 445;
473 -> 452;
473 -> 445;
474 -> 452;
474 -> 445;
475 -> 452;
475 -> 445;
476 -> 452;
476 -> 445;
477 -> 452;
477 -> 445;
478 -> 452;
478 -> 445;
479 -> 445;
480 -> 479;
480 -> 452;
480 -> 445;
481 -> 452;
481 -> 445;
482 -> 452;
482 -> 445;
483 -> 445;
484 -> 445;
485 -> 482;
485 -> 484;
486 -> 483;
486 -> 484;
487 -> 486;
487 -> 484;
488 -> 486;
488 -> 484;
489 -> 486;
489 -> 484;
490 -> 485;
490 -> 486;
490 -> 484;
491 -> 483;
491 -> 452;
491 -> 445;
492 -> 452;
492 -> 445;
493 -> 445;
494 -> 443;
494 -> 493;
495 -> 493;
496 -> 494;
496 -> 493;
497 -> 496;
497 -> 443;
498 -> 496;
499 -> 497;
499 -> 498;
500 -> 433;
500 -> 445;
501 -> 500;
502 -> 446;
502 -> 501;
502 -> 500;
503 -> 447;
503 -> 501;
503 -> 500;
504 -> 502;
504 -> 503;
504 -> 500;
505 -> 448;
505 -> 501;
505 -> 500;
506 -> 504;
506 -> 505;
506 -> 500;
507 -> 434;
507 -> 435;
508 -> 452;
508 -> 435;
509 -> 434;
509 -> 508;
509 -> 443;
509 -> 499;
509 -> 435;
510 -> 434;
510 -> 452;
510 -> 435;
511 -> 452;
511 -> 509;
511 -> 445;
512 -> 445;
513 -> 452;
513 -> 509;
513 -> 512;
513 -> 445;
514 -> 425;
514 -> 345;
515 -> 514;
515 -> 343;
516 -> 515;
516 -> 509;
516 -> 164;
517 -> 515;
517 -> 164;
518 -> 141;
518 -> 517;
518 -> 509;
518 -> 510;
518 -> 436;
518 -> 72;
519 -> 518;
519 -> 72;
520 -> 72;
521 -> 519;
521 -> 520;
522 -> 520;
523 -> 521;
523 -> 522;
524 -> 522;
525 -> 523;
525 -> 518;
525 -> 524;
526 -> 524;
527 -> 525;
527 -> 518;
527 -> 526;
527 -> 524;
528 -> 525;
528 -> 518;
528 -> 527;
529 -> 527;
530 -> 528;
530 -> 529;
531 -> 528;
531 -> 529;
532 -> 528;
532 -> 529;
533 -> 528;
533 -> 529;
534 -> 528;
534 -> 529;
535 -> 529;
536 -> 529;
537 -> 529;
538 -> 529;
539 -> 529;
540 -> 0;
540 -> 529;
541 -> 530;
541 -> 529;
542 -> 535;
542 -> 541;
543 -> 541;
544 -> 531;
544 -> 541;
545 -> 532;
545 -> 541;
546 -> 533;
546 -> 541;
547 -> 534;
547 -> 541;
548 -> 536;
548 -> 541;
549 -> 537;
549 -> 541;
550 -> 538;
550 -> 541;
551 -> 539;
551 -> 541;
552 -> 540;
552 -> 541;
553 -> 541;
554 -> 542;
554 -> 553;
555 -> 543;
555 -> 553;
556 -> 544;
556 -> 553;
557 -> 545;
557 -> 553;
558 -> 546;
558 -> 553;
559 -> 547;
559 -> 553;
560 -> 548;
560 -> 553;
561 -> 549;
561 -> 553;
562 -> 550;
562 -> 553;
563 -> 551;
563 -> 553;
564 -> 552;
564 -> 553;
565 -> 555;
565 -> 518;
565 -> 553;
566 -> 565;
566 -> 0;
566 -> 553;
567 -> 555;
567 -> 553;
568 -> 556;
568 -> 553;
569 -> 559;
569 -> 553;
570 -> 563;
570 -> 553;
571 -> 564;
571 -> 553;
572 -> 553;
573 -> 567;
573 -> 572;
574 -> 568;
574 -> 572;
575 -> 569;
575 -> 572;
576 -> 570;
576 -> 572;
577 -> 571;
577 -> 572;
578 -> 573;
578 -> 574;
578 -> 575;
578 -> 572;
579 -> 573;
579 -> 572;
580 -> 578;
580 -> 572;
581 -> 576;
581 -> 579;
581 -> 580;
581 -> 539;
581 -> 578;
581 -> 572;
582 -> 578;
582 -> 572;
583 -> 577;
583 -> 582;
583 -> 0;
583 -> 581;
583 -> 572;
584 -> 553;
585 -> 555;
585 -> 553;
586 -> 554;
586 -> 585;
586 -> 535;
586 -> 583;
586 -> 553;
587 -> 555;
587 -> 553;
588 -> 560;
588 -> 536;
588 -> 553;
589 -> 560;
589 -> 587;
589 -> 588;
589 -> 536;
589 -> 586;
589 -> 553;
590 -> 535;
590 -> 589;
590 -> 529;
591 -> 536;
591 -> 589;
591 -> 529;
592 -> 537;
592 -> 529;
593 -> 538;
593 -> 529;
594 -> 583;
594 -> 529;
595 -> 529;
596 -> 529;
597 -> 590;
597 -> 596;
598 -> 591;
598 -> 596;
599 -> 592;
599 -> 596;
600 -> 593;
600 -> 596;
601 -> 591;
601 -> 596;
602 -> 594;
602 -> 596;
603 -> 595;
603 -> 596;
604 -> 603;
604 -> 596;
605 -> 603;
605 -> 596;
606 -> 603;
606 -> 596;
607 -> 603;
607 -> 596;
608 -> 603;
608 -> 596;
609 -> 597;
609 -> 596;
610 -> 597;
610 -> 590;
610 -> 596;
611 -> 597;
611 -> 596;
612 -> 601;
612 -> 609;
612 -> 596;
613 -> 0;
613 -> 596;
614 -> 597;
614 -> 603;
614 -> 596;
615 -> 598;
615 -> 603;
615 -> 596;
616 -> 599;
616 -> 603;
616 -> 596;
617 -> 600;
617 -> 603;
617 -> 596;
618 -> 601;
618 -> 603;
618 -> 596;
619 -> 602;
619 -> 603;
619 -> 596;
620 -> 595;
620 -> 527;
621 -> 527;
622 -> 528;
622 -> 620;
622 -> 621;
622 -> 615;
622 -> 616;
622 -> 617;
622 -> 618;
622 -> 619;
622 -> 614;
622 -> 612;
622 -> 590;
622 -> 592;
622 -> 593;
622 -> 527;
623 -> 525;
623 -> 622;
623 -> 524;
624 -> 623;
624 -> 522;
625 -> 624;
625 -> 520;
626 -> 625;
626 -> 622;
626 -> 520;
627 -> 520;
628 -> 625;
628 -> 627;
628 -> 622;
628 -> 520;
629 -> 0;
629 -> 520;
630 -> 628;
630 -> 629;
630 -> 520;
631 -> 79;
631 -> 630;
631 -> 72;
632 -> 518;
632 -> 72;
633 -> 1;
634 -> 1;
635 -> 633;
635 -> 1;
636 -> 634;
636 -> 1;
637 -> 1;
638 -> 635;
638 -> 637;
638 -> 636;
638 -> 632;
638 -> 633;
638 -> 634;
638 -> 630;
638 -> 1;
639 -> 638;
639 -> 637;
640 -> 639;
640 -> 638;
640 -> 637;
641 -> 638;
641 -> 637;
642 -> 641;
642 -> 640;
642 -> 637;
643 -> 638;
643 -> 637;
644 -> 638;
644 -> 637;
645 -> 638;
645 -> 637;
646 -> 638;
646 -> 637;
647 -> 638;
647 -> 637;
648 -> 638;
648 -> 637;
649 -> 638;
649 -> 637;
650 -> 638;
650 -> 637;
651 -> 638;
651 -> 637;
652 -> 651;
652 -> 642;
652 -> 637;
653 -> 643;
653 -> 637;
654 -> 649;
654 -> 637;
655 -> 637;
656 -> 653;
656 -> 655;
657 -> 654;
657 -> 655;
658 -> 651;
658 -> 655;
659 -> 656;
659 -> 655;
660 -> 655;
661 -> 659;
661 -> 660;
662 -> 658;
662 -> 660;
663 -> 660;
664 -> 662;
664 -> 663;
665 -> 663;
666 -> 664;
666 -> 665;
667 -> 665;
668 -> 666;
668 -> 667;
669 -> 668;
669 -> 642;
669 -> 667;
670 -> 668;
670 -> 669;
671 -> 669;
672 -> 670;
672 -> 671;
673 -> 671;
674 -> 672;
674 -> 673;
675 -> 673;
676 -> 674;
676 -> 670;
676 -> 675;
677 -> 676;
677 -> 673;
678 -> 677;
678 -> 671;
679 -> 670;
679 -> 671;
680 -> 671;
681 -> 668;
681 -> 678;
681 -> 669;
682 -> 668;
682 -> 678;
682 -> 667;
683 -> 682;
683 -> 665;
684 -> 666;
684 -> 678;
684 -> 665;
685 -> 666;
685 -> 684;
685 -> 665;
686 -> 685;
686 -> 663;
687 -> 686;
687 -> 660;
688 -> 687;
688 -> 660;
689 -> 687;
689 -> 684;
689 -> 688;
690 -> 689;
690 -> 655;
691 -> 655;
692 -> 690;
692 -> 691;
692 -> 655;
693 -> 690;
693 -> 692;
694 -> 693;
694 -> 637;
695 -> 637;
696 -> 694;
696 -> 695;
696 -> 637;
697 -> 643;
697 -> 637;
698 -> 694;
698 -> 637;
699 -> 637;
700 -> 697;
700 -> 698;
700 -> 699;
700 -> 651;
700 -> 684;
700 -> 637;
701 -> 700;
701 -> 699;
702 -> 699;
703 -> 701;
703 -> 702;
704 -> 702;
705 -> 703;
705 -> 700;
705 -> 704;
706 -> 705;
706 -> 702;
707 -> 703;
707 -> 699;
708 -> 699;
709 -> 707;
709 -> 708;
710 -> 707;
710 -> 708;
711 -> 708;
712 -> 710;
712 -> 711;
713 -> 711;
714 -> 713;
715 -> 712;
715 -> 708;
716 -> 710;
716 -> 708;
717 -> 708;
718 -> 717;
719 -> 718;
720 -> 700;
720 -> 699;
721 -> 699;
722 -> 720;
722 -> 721;
723 -> 721;
724 -> 722;
724 -> 715;
724 -> 723;
725 -> 722;
725 -> 715;
725 -> 723;
726 -> 725;
726 -> 721;
727 -> 722;
727 -> 715;
727 -> 721;
728 -> 727;
728 -> 699;
729 -> 699;
730 -> 728;
730 -> 729;
731 -> 700;
731 -> 699;
732 -> 699;
733 -> 700;
733 -> 732;
733 -> 730;
733 -> 637;
734 -> 637;
735 -> 647;
735 -> 734;
735 -> 637;
736 -> 735;
737 -> 637;
738 -> 651;
738 -> 733;
738 -> 637;
739 -> 651;
739 -> 733;
739 -> 738;
740 -> 739;
740 -> 738;
741 -> 651;
741 -> 733;
741 -> 740;
742 -> 738;
743 -> 742;
743 -> 733;
744 -> 743;
744 -> 742;
745 -> 742;
745 -> 733;
745 -> 741;
746 -> 745;
746 -> 738;
747 -> 643;
747 -> 738;
748 -> 741;
748 -> 738;
749 -> 733;
749 -> 738;
750 -> 736;
750 -> 738;
751 -> 738;
752 -> 738;
753 -> 746;
753 -> 752;
754 -> 747;
754 -> 752;
755 -> 748;
755 -> 752;
756 -> 749;
756 -> 752;
757 -> 750;
757 -> 752;
758 -> 751;
758 -> 752;
759 -> 753;
759 -> 752;
760 -> 754;
760 -> 752;
761 -> 755;
761 -> 752;
762 -> 756;
762 -> 752;
763 -> 757;
763 -> 752;
764 -> 0;
764 -> 752;
765 -> 752;
766 -> 759;
766 -> 765;
767 -> 760;
767 -> 765;
768 -> 761;
768 -> 765;
769 -> 762;
769 -> 765;
770 -> 763;
770 -> 765;
771 -> 764;
771 -> 765;
772 -> 758;
772 -> 765;
773 -> 765;
774 -> 766;
774 -> 745;
774 -> 773;
774 -> 765;
775 -> 767;
775 -> 765;
776 -> 768;
776 -> 765;
777 -> 769;
777 -> 765;
778 -> 770;
778 -> 765;
779 -> 765;
780 -> 774;
780 -> 779;
781 -> 775;
781 -> 779;
782 -> 776;
782 -> 779;
783 -> 777;
783 -> 779;
784 -> 778;
784 -> 779;
785 -> 772;
785 -> 779;
786 -> 780;
786 -> 774;
786 -> 779;
787 -> 780;
787 -> 779;
788 -> 783;
788 -> 779;
789 -> 784;
789 -> 779;
790 -> 782;
790 -> 779;
791 -> 781;
791 -> 779;
792 -> 779;
793 -> 792;
794 -> 779;
795 -> 794;
795 -> 786;
795 -> 787;
795 -> 788;
795 -> 789;
795 -> 790;
795 -> 791;
795 -> 792;
795 -> 774;
795 -> 736;
795 -> 793;
795 -> 779;
796 -> 795;
796 -> 794;
797 -> 794;
798 -> 795;
798 -> 797;
798 -> 779;
799 -> 779;
800 -> 799;
800 -> 794;
800 -> 779;
801 -> 0;
801 -> 779;
802 -> 801;
802 -> 0;
802 -> 779;
803 -> 802;
803 -> 794;
803 -> 779;
804 -> 779;
805 -> 804;
805 -> 794;
805 -> 779;
806 -> 794;
806 -> 779;
807 -> 794;
807 -> 779;
808 -> 794;
808 -> 779;
809 -> 794;
809 -> 779;
810 -> 794;
810 -> 779;
811 -> 780;
811 -> 798;
811 -> 779;
812 -> 811;
812 -> 0;
812 -> 779;
813 -> 812;
813 -> 779;
814 -> 813;
814 -> 794;
814 -> 779;
815 -> 794;
815 -> 798;
815 -> 800;
815 -> 779;
816 -> 780;
816 -> 779;
817 -> 794;
817 -> 779;
818 -> 815;
818 -> 816;
818 -> 817;
818 -> 798;
818 -> 800;
818 -> 803;
818 -> 805;
818 -> 806;
818 -> 807;
818 -> 814;
818 -> 808;
818 -> 809;
818 -> 810;
818 -> 799;
818 -> 802;
818 -> 804;
818 -> 779;
819 -> 780;
819 -> 818;
819 -> 779;
820 -> 772;
820 -> 765;
821 -> 772;
821 -> 765;
822 -> 772;
822 -> 765;
823 -> 772;
823 -> 765;
824 -> 772;
824 -> 765;
825 -> 772;
825 -> 765;
826 -> 772;
826 -> 765;
827 -> 772;
827 -> 765;
828 -> 772;
828 -> 765;
829 -> 772;
829 -> 765;
830 -> 766;
830 -> 765;
831 -> 766;
831 -> 772;
831 -> 765;
832 -> 771;
832 -> 765;
833 -> 832;
833 -> 772;
833 -> 765;
834 -> 765;
835 -> 767;
835 -> 818;
835 -> 834;
835 -> 765;
836 -> 835;
836 -> 765;
837 -> 766;
837 -> 818;
837 -> 836;
838 -> 766;
838 -> 818;
838 -> 837;
838 -> 772;
838 -> 765;
839 -> 772;
839 -> 818;
839 -> 765;
840 -> 766;
840 -> 765;
841 -> 772;
841 -> 765;
842 -> 839;
842 -> 840;
842 -> 841;
842 -> 818;
842 -> 820;
842 -> 831;
842 -> 821;
842 -> 822;
842 -> 823;
842 -> 824;
842 -> 825;
842 -> 826;
842 -> 827;
842 -> 828;
842 -> 829;
842 -> 838;
842 -> 833;
842 -> 837;
842 -> 832;
842 -> 765;
843 -> 637;
844 -> 644;
844 -> 843;
844 -> 637;
845 -> 645;
845 -> 751;
845 -> 637;
846 -> 637;
847 -> 646;
847 -> 846;
847 -> 637;
848 -> 637;
849 -> 648;
849 -> 848;
849 -> 637;
850 -> 751;
850 -> 637;
851 -> 638;
851 -> 850;
851 -> 842;
851 -> 845;
851 -> 1;
852 -> 638;
852 -> 637;
853 -> 638;
853 -> 637;
854 -> 638;
854 -> 637;
855 -> 638;
855 -> 637;
856 -> 638;
856 -> 637;
857 -> 638;
857 -> 637;
858 -> 638;
858 -> 637;
859 -> 638;
859 -> 637;
860 -> 637;
861 -> 854;
861 -> 637;
862 -> 856;
862 -> 637;
863 -> 0;
863 -> 637;
864 -> 637;
865 -> 858;
865 -> 637;
866 -> 637;
867 -> 863;
867 -> 866;
868 -> 864;
868 -> 866;
869 -> 865;
869 -> 866;
870 -> 859;
870 -> 866;
871 -> 866;
872 -> 867;
872 -> 866;
873 -> 868;
873 -> 866;
874 -> 871;
874 -> 866;
875 -> 869;
875 -> 866;
876 -> 866;
877 -> 872;
877 -> 876;
878 -> 873;
878 -> 876;
879 -> 874;
879 -> 876;
880 -> 875;
880 -> 876;
881 -> 870;
881 -> 876;
882 -> 876;
883 -> 877;
883 -> 0;
883 -> 876;
884 -> 883;
884 -> 878;
884 -> 876;
885 -> 884;
886 -> 881;
886 -> 885;
887 -> 885;
888 -> 886;
888 -> 851;
888 -> 887;
889 -> 887;
890 -> 888;
890 -> 884;
891 -> 884;
892 -> 881;
892 -> 891;
893 -> 892;
893 -> 851;
893 -> 891;
894 -> 893;
894 -> 884;
895 -> 894;
896 -> 890;
896 -> 851;
896 -> 894;
897 -> 880;
897 -> 894;
898 -> 895;
898 -> 896;
898 -> 897;
898 -> 851;
898 -> 894;
899 -> 898;
899 -> 895;
900 -> 898;
900 -> 895;
901 -> 898;
901 -> 895;
902 -> 898;
902 -> 895;
903 -> 895;
904 -> 903;
904 -> 895;
905 -> 895;
906 -> 900;
906 -> 905;
907 -> 906;
907 -> 895;
908 -> 901;
908 -> 895;
909 -> 903;
909 -> 895;
910 -> 907;
910 -> 898;
910 -> 908;
910 -> 909;
910 -> 904;
910 -> 895;
911 -> 884;
912 -> 890;
912 -> 884;
913 -> 880;
913 -> 851;
913 -> 910;
913 -> 912;
914 -> 912;
914 -> 851;
914 -> 913;
915 -> 877;
915 -> 0;
915 -> 876;
916 -> 882;
916 -> 915;
917 -> 916;
917 -> 881;
917 -> 882;
917 -> 913;
917 -> 915;
918 -> 915;
919 -> 915;
920 -> 881;
920 -> 919;
921 -> 920;
921 -> 917;
921 -> 919;
922 -> 921;
922 -> 915;
923 -> 915;
924 -> 881;
924 -> 923;
925 -> 924;
925 -> 922;
925 -> 923;
926 -> 925;
926 -> 915;
927 -> 880;
927 -> 922;
927 -> 915;
928 -> 915;
929 -> 881;
929 -> 928;
930 -> 929;
930 -> 927;
930 -> 928;
931 -> 929;
931 -> 927;
931 -> 928;
932 -> 931;
932 -> 915;
933 -> 880;
933 -> 932;
933 -> 915;
934 -> 880;
934 -> 915;
935 -> 915;
936 -> 915;
937 -> 935;
937 -> 936;
938 -> 935;
938 -> 936;
939 -> 935;
939 -> 936;
940 -> 934;
940 -> 936;
941 -> 881;
941 -> 936;
942 -> 936;
943 -> 941;
943 -> 942;
944 -> 943;
944 -> 933;
944 -> 942;
945 -> 942;
946 -> 944;
946 -> 945;
947 -> 946;
947 -> 945;
948 -> 947;
948 -> 944;
948 -> 945;
949 -> 945;
950 -> 948;
950 -> 949;
951 -> 950;
951 -> 948;
951 -> 949;
952 -> 951;
952 -> 949;
953 -> 952;
953 -> 936;
954 -> 940;
954 -> 936;
955 -> 953;
955 -> 954;
955 -> 952;
955 -> 933;
955 -> 936;
956 -> 936;
957 -> 936;
958 -> 937;
958 -> 957;
958 -> 936;
959 -> 936;
960 -> 941;
960 -> 959;
961 -> 959;
962 -> 960;
962 -> 961;
963 -> 961;
964 -> 962;
964 -> 963;
965 -> 964;
965 -> 955;
965 -> 963;
966 -> 964;
966 -> 955;
966 -> 963;
967 -> 966;
967 -> 961;
968 -> 962;
968 -> 955;
968 -> 961;
969 -> 968;
969 -> 936;
970 -> 956;
970 -> 936;
971 -> 940;
971 -> 936;
972 -> 970;
972 -> 971;
972 -> 969;
972 -> 933;
972 -> 968;
972 -> 936;
973 -> 936;
974 -> 973;
975 -> 974;
976 -> 972;
976 -> 974;
977 -> 973;
978 -> 977;
979 -> 978;
980 -> 973;
981 -> 980;
982 -> 981;
983 -> 972;
983 -> 973;
984 -> 983;
984 -> 972;
984 -> 973;
985 -> 973;
986 -> 983;
986 -> 972;
986 -> 985;
986 -> 973;
987 -> 986;
988 -> 983;
988 -> 972;
988 -> 986;
989 -> 987;
989 -> 986;
990 -> 986;
991 -> 983;
991 -> 989;
991 -> 973;
992 -> 972;
992 -> 973;
993 -> 972;
993 -> 973;
994 -> 993;
994 -> 991;
994 -> 973;
995 -> 972;
995 -> 973;
996 -> 972;
996 -> 973;
997 -> 973;
998 -> 996;
998 -> 997;
999 -> 998;
999 -> 991;
999 -> 997;
1000 -> 998;
1000 -> 991;
1000 -> 997;
1001 -> 1000;
1001 -> 973;
1002 -> 973;
1003 -> 1002;
1003 -> 1001;
1003 -> 991;
1003 -> 973;
1004 -> 1002;
1004 -> 1003;
1005 -> 1001;
1005 -> 1004;
1005 -> 1002;
1006 -> 995;
1006 -> 1005;
1006 -> 1004;
1007 -> 972;
1007 -> 973;
1008 -> 1007;
1008 -> 1006;
1008 -> 973;
1009 -> 1008;
1009 -> 974;
1010 -> 972;
1010 -> 973;
1011 -> 972;
1011 -> 973;
1012 -> 1010;
1012 -> 0;
1012 -> 973;
1013 -> 973;
1014 -> 1010;
1014 -> 973;
1015 -> 1011;
1015 -> 1014;
1015 -> 1008;
1015 -> 973;
1016 -> 1015;
1017 -> 1016;
1018 -> 1016;
1018 -> 1015;
1019 -> 1010;
1019 -> 1015;
1020 -> 1018;
1020 -> 1010;
1020 -> 973;
1021 -> 1018;
1021 -> 973;
1022 -> 972;
1022 -> 973;
1023 -> 972;
1023 -> 973;
1024 -> 1022;
1024 -> 1021;
1024 -> 973;
1025 -> 973;
1026 -> 973;
1027 -> 1024;
1027 -> 1026;
1028 -> 1025;
1028 -> 1026;
1029 -> 1023;
1029 -> 1026;
1030 -> 1028;
1030 -> 1026;
1031 -> 1027;
1031 -> 1026;
1032 -> 1026;
1033 -> 1029;
1033 -> 1021;
1033 -> 1026;
1034 -> 1026;
1035 -> 1031;
1035 -> 1034;
1036 -> 1032;
1036 -> 1034;
1037 -> 1033;
1037 -> 1034;
1038 -> 1029;
1038 -> 1034;
1039 -> 1037;
1039 -> 1034;
1040 -> 1036;
1040 -> 1034;
1041 -> 1038;
1041 -> 1021;
1041 -> 1040;
1042 -> 1038;
1042 -> 1021;
1042 -> 1041;
1042 -> 1034;
1043 -> 1039;
1043 -> 1042;
1043 -> 1021;
1043 -> 1041;
1043 -> 1034;
1044 -> 1035;
1044 -> 1034;
1045 -> 1034;
1046 -> 1044;
1046 -> 1045;
1047 -> 1038;
1047 -> 1045;
1048 -> 1046;
1048 -> 1045;
1049 -> 1045;
1050 -> 1048;
1050 -> 1049;
1051 -> 1047;
1051 -> 1049;
1052 -> 1049;
1053 -> 1050;
1053 -> 1052;
1053 -> 1049;
1054 -> 1049;
1055 -> 1051;
1055 -> 1043;
1055 -> 1054;
1056 -> 1054;
1057 -> 1055;
1057 -> 1049;
1058 -> 1050;
1058 -> 1049;
1059 -> 1057;
1059 -> 1043;
1059 -> 1058;
1059 -> 1049;
1060 -> 1045;
1061 -> 1047;
1061 -> 1059;
1061 -> 1060;
1062 -> 1060;
1063 -> 1061;
1063 -> 1045;
1064 -> 1043;
1064 -> 1034;
1065 -> 1034;
1066 -> 1064;
1066 -> 1065;
1066 -> 1034;
1067 -> 1066;
1068 -> 1067;
1068 -> 1063;
1069 -> 1068;
1069 -> 1066;
1070 -> 1043;
1070 -> 1066;
1071 -> 1069;
1071 -> 1066;
1072 -> 1066;
1073 -> 1034;
1074 -> 1071;
1074 -> 1063;
1074 -> 1034;
1075 -> 1034;
1076 -> 1074;
1076 -> 1075;
1076 -> 1034;
1077 -> 1035;
1077 -> 1034;
1078 -> 1036;
1078 -> 1034;
1079 -> 1071;
1079 -> 1063;
1079 -> 1034;
1080 -> 1034;
1081 -> 1077;
1081 -> 1080;
1082 -> 1078;
1082 -> 1080;
1083 -> 1079;
1083 -> 1080;
1084 -> 1038;
1084 -> 1080;
1085 -> 1084;
1085 -> 1080;
1086 -> 1081;
1086 -> 1080;
1087 -> 1082;
1087 -> 1080;
1088 -> 1085;
1088 -> 1086;
1088 -> 1087;
1088 -> 1071;
1088 -> 1080;
1089 -> 1080;
1090 -> 1088;
1090 -> 1080;
1091 -> 1080;
1092 -> 1091;
1093 -> 1083;
1093 -> 1091;
1094 -> 1091;
1095 -> 1093;
1095 -> 1094;
1095 -> 1091;
1096 -> 1083;
1096 -> 1091;
1097 -> 1090;
1097 -> 1091;
1098 -> 1093;
1098 -> 1091;
1099 -> 1096;
1099 -> 1097;
1099 -> 1098;
1099 -> 1090;
1099 -> 1091;
1100 -> 1088;
1100 -> 1099;
1101 -> 1022;
1101 -> 973;
1102 -> 1100;
1102 -> 1025;
1103 -> 1102;
1103 -> 1100;
1103 -> 1025;
1104 -> 1103;
1105 -> 1104;
1105 -> 1103;
1106 -> 1103;
1107 -> 1105;
1107 -> 1106;
1108 -> 1102;
1108 -> 1106;
1109 -> 1106;
1110 -> 1108;
1110 -> 1109;
1111 -> 1110;
1111 -> 1109;
1112 -> 1110;
1112 -> 1106;
1113 -> 1107;
1113 -> 1112;
1113 -> 1104;
1113 -> 1110;
1113 -> 1106;
1114 -> 1106;
1115 -> 1108;
1115 -> 1114;
1116 -> 1115;
1116 -> 1113;
1116 -> 1114;
1117 -> 1115;
1117 -> 1113;
1117 -> 1114;
1118 -> 1117;
1118 -> 1106;
1119 -> 1106;
1120 -> 1119;
1120 -> 1118;
1120 -> 1113;
1120 -> 1106;
1121 -> 1119;
1121 -> 1120;
1122 -> 1118;
1122 -> 1121;
1122 -> 1119;
1123 -> 1103;
1124 -> 1102;
1124 -> 1103;
1125 -> 1124;
1125 -> 1122;
1125 -> 1103;
1126 -> 1103;
1127 -> 1104;
1127 -> 1125;
1127 -> 1103;
1128 -> 1102;
1128 -> 1127;
1128 -> 1103;
1129 -> 1125;
1129 -> 1103;
1130 -> 1103;
1131 -> 1102;
1131 -> 1128;
1131 -> 1025;
1132 -> 1100;
1132 -> 1025;
1133 -> 1025;
1134 -> 1132;
1134 -> 1133;
1135 -> 1133;
1136 -> 1135;
1137 -> 1134;
1137 -> 1131;
1137 -> 1136;
1138 -> 1134;
1138 -> 1131;
1138 -> 1136;
1139 -> 1138;
1139 -> 1135;
1140 -> 1134;
1140 -> 1131;
1140 -> 1135;
1141 -> 1140;
1141 -> 1025;
1142 -> 1025;
1143 -> 972;
1143 -> 973;
1144 -> 972;
1144 -> 973;
1145 -> 1143;
1145 -> 1141;
1145 -> 973;
1146 -> 973;
1147 -> 1145;
1147 -> 1146;
1148 -> 1145;
1148 -> 1146;
1149 -> 1144;
1149 -> 1146;
1150 -> 1146;
1151 -> 1149;
1151 -> 1150;
1152 -> 1150;
1153 -> 1151;
1153 -> 1152;
1153 -> 1141;
1153 -> 1150;
1154 -> 1153;
1154 -> 1150;
1155 -> 1154;
1155 -> 1146;
1156 -> 1148;
1156 -> 1146;
1157 -> 1147;
1157 -> 1156;
1157 -> 1153;
1157 -> 1141;
1157 -> 1146;
1158 -> 1146;
1159 -> 1149;
1159 -> 1158;
1160 -> 1159;
1160 -> 1157;
1160 -> 1158;
1161 -> 1146;
1162 -> 1160;
1162 -> 1155;
1162 -> 1146;
1163 -> 972;
1163 -> 973;
1164 -> 972;
1164 -> 973;
1165 -> 972;
1165 -> 973;
1166 -> 1164;
1166 -> 973;
1167 -> 1163;
1167 -> 973;
1168 -> 973;
1169 -> 973;
1170 -> 1167;
1170 -> 1169;
1171 -> 1168;
1171 -> 1169;
1172 -> 1165;
1172 -> 1169;
1173 -> 1171;
1173 -> 1169;
1174 -> 1170;
1174 -> 1169;
1175 -> 1169;
1176 -> 1174;
1176 -> 1175;
1177 -> 1172;
1177 -> 1175;
1178 -> 1176;
1178 -> 1175;
1179 -> 1175;
1180 -> 1178;
1180 -> 1179;
1181 -> 1177;
1181 -> 1179;
1182 -> 1179;
1183 -> 1180;
1183 -> 1182;
1183 -> 1179;
1184 -> 1179;
1185 -> 1184;
1186 -> 1180;
1186 -> 1179;
1187 -> 1175;
1188 -> 1187;
1189 -> 1169;
1190 -> 1169;
1191 -> 1162;
1191 -> 1169;
1192 -> 1169;
1193 -> 1191;
1193 -> 1192;
1193 -> 1169;
1194 -> 1190;
1194 -> 1169;
1195 -> 1191;
1195 -> 1194;
1195 -> 1162;
1195 -> 1169;
1196 -> 1170;
1196 -> 1169;
1197 -> 1171;
1197 -> 1169;
1198 -> 1169;
1199 -> 1196;
1199 -> 1198;
1200 -> 1197;
1200 -> 1198;
1201 -> 1172;
1201 -> 1198;
1202 -> 1201;
1202 -> 1198;
1203 -> 1199;
1203 -> 1198;
1204 -> 1200;
1204 -> 1198;
1205 -> 1198;
1206 -> 1198;
1207 -> 1206;
1208 -> 1206;
1209 -> 1195;
1209 -> 1208;
1209 -> 1206;
1210 -> 1207;
1210 -> 1206;
1211 -> 1195;
1211 -> 1210;
1211 -> 1206;
1212 -> 972;
1212 -> 973;
1213 -> 972;
1213 -> 973;
1214 -> 973;
1215 -> 1213;
1215 -> 1214;
1216 -> 1214;
1217 -> 1216;
1218 -> 1211;
1218 -> 1216;
1219 -> 973;
1220 -> 1211;
1221 -> 1211;
1221 -> 1010;
1221 -> 973;
1222 -> 1211;
1223 -> 1222;
1224 -> 1222;
1224 -> 1010;
1224 -> 973;
1225 -> 1222;
1225 -> 974;
1226 -> 972;
1226 -> 973;
1227 -> 972;
1227 -> 973;
1228 -> 1226;
1228 -> 973;
1229 -> 1228;
1229 -> 1222;
1229 -> 973;
1230 -> 1226;
1230 -> 1229;
1230 -> 973;
1231 -> 973;
1232 -> 1227;
1232 -> 1231;
1233 -> 1231;
1234 -> 1232;
1234 -> 1233;
1235 -> 1233;
1236 -> 1235;
1237 -> 1234;
1237 -> 1229;
1237 -> 1236;
1238 -> 1234;
1238 -> 1229;
1238 -> 1236;
1239 -> 1238;
1239 -> 1235;
1240 -> 1234;
1240 -> 1229;
1240 -> 1235;
1241 -> 1231;
1242 -> 1240;
1242 -> 973;
1243 -> 973;
1244 -> 1227;
1244 -> 1243;
1245 -> 1244;
1245 -> 1240;
1245 -> 1243;
1246 -> 1245;
1247 -> 1246;
1247 -> 1245;
1248 -> 1245;
1249 -> 1247;
1249 -> 1248;
1249 -> 1245;
1250 -> 1249;
1250 -> 1245;
1251 -> 1250;
1251 -> 1244;
1251 -> 1245;
1252 -> 1244;
1252 -> 1249;
1252 -> 1251;
1252 -> 1243;
1253 -> 1252;
1253 -> 973;
1254 -> 1253;
1255 -> 1226;
1255 -> 1254;
1255 -> 973;
1256 -> 1254;
1256 -> 1235;
1257 -> 1254;
1257 -> 973;
1258 -> 1254;
1258 -> 974;
1259 -> 993;
1259 -> 1254;
1259 -> 973;
1260 -> 972;
1260 -> 973;
1261 -> 972;
1261 -> 973;
1262 -> 973;
1263 -> 1260;
1263 -> 1262;
1264 -> 1262;
1265 -> 1263;
1265 -> 1254;
1265 -> 1264;
1266 -> 1264;
1267 -> 1265;
1267 -> 973;
1268 -> 1261;
1268 -> 973;
1269 -> 1267;
1269 -> 1268;
1269 -> 973;
1270 -> 973;
1271 -> 983;
1271 -> 1269;
1271 -> 973;
1272 -> 937;
1272 -> 936;
1273 -> 1272;
1274 -> 1273;
1274 -> 941;
1274 -> 1272;
1275 -> 1272;
1276 -> 1275;
1276 -> 941;
1276 -> 1272;
1277 -> 941;
1277 -> 1269;
1277 -> 1274;
1277 -> 1276;
1277 -> 936;
1278 -> 936;
1279 -> 939;
1279 -> 1278;
1279 -> 936;
1280 -> 937;
1280 -> 936;
1281 -> 938;
1281 -> 936;
1282 -> 940;
1282 -> 936;
1283 -> 936;
1284 -> 1280;
1284 -> 1283;
1285 -> 1281;
1285 -> 1283;
1286 -> 1282;
1286 -> 1283;
1287 -> 941;
1287 -> 1283;
1288 -> 1283;
1289 -> 1284;
1289 -> 1288;
1289 -> 1283;
1290 -> 1287;
1290 -> 1277;
1290 -> 1283;
1291 -> 1290;
1292 -> 1287;
1292 -> 1290;
1293 -> 1291;
1293 -> 1290;
1294 -> 1286;
1294 -> 1290;
1295 -> 1290;
1296 -> 1290;
1297 -> 1292;
1297 -> 1296;
1298 -> 1293;
1298 -> 1296;
1299 -> 1294;
1299 -> 1296;
1300 -> 1295;
1300 -> 1296;
1301 -> 1295;
1301 -> 1296;
1302 -> 1296;
1303 -> 1297;
1303 -> 1296;
1304 -> 1300;
1304 -> 1296;
1305 -> 1301;
1305 -> 1296;
1306 -> 1302;
1306 -> 1296;
1307 -> 1299;
1307 -> 1296;
1308 -> 1296;
1309 -> 1296;
1310 -> 1303;
1310 -> 1309;
1311 -> 1304;
1311 -> 1309;
1312 -> 1305;
1312 -> 1309;
1313 -> 1306;
1313 -> 1309;
1314 -> 1307;
1314 -> 1309;
1315 -> 1308;
1315 -> 1309;
1316 -> 1309;
1317 -> 1316;
1317 -> 1309;
1318 -> 1316;
1318 -> 1309;
1319 -> 1316;
1319 -> 1309;
1320 -> 1316;
1320 -> 1309;
1321 -> 1316;
1321 -> 1309;
1322 -> 1316;
1322 -> 1309;
1323 -> 1310;
1323 -> 1316;
1323 -> 1309;
1324 -> 1311;
1324 -> 1316;
1324 -> 1309;
1325 -> 1312;
1325 -> 1316;
1325 -> 1309;
1326 -> 1313;
1326 -> 1316;
1326 -> 1309;
1327 -> 1314;
1327 -> 1316;
1327 -> 1309;
1328 -> 0;
1328 -> 1309;
1329 -> 1328;
1329 -> 1316;
1329 -> 1309;
1330 -> 1309;
1331 -> 1316;
1331 -> 1330;
1332 -> 1330;
1333 -> 1331;
1333 -> 1316;
1333 -> 1318;
1333 -> 1324;
1333 -> 1332;
1333 -> 1330;
1334 -> 1330;
1335 -> 1331;
1335 -> 1316;
1335 -> 1317;
1335 -> 1323;
1335 -> 1334;
1336 -> 1335;
1336 -> 1316;
1336 -> 1328;
1336 -> 1334;
1337 -> 1333;
1337 -> 1336;
1337 -> 1316;
1337 -> 1328;
1337 -> 1330;
1338 -> 1337;
1338 -> 1309;
1339 -> 1338;
1340 -> 1339;
1340 -> 1316;
1340 -> 1338;
1341 -> 1296;
1342 -> 1297;
1342 -> 1341;
1343 -> 1342;
1343 -> 1328;
1343 -> 1341;
1344 -> 1342;
1344 -> 1328;
1344 -> 1341;
1345 -> 1344;
1345 -> 1341;
1346 -> 1342;
1346 -> 1328;
1346 -> 1341;
1347 -> 1346;
1347 -> 1296;
1348 -> 1347;
1348 -> 1308;
1348 -> 1346;
1348 -> 1316;
1348 -> 1317;
1348 -> 1323;
1348 -> 1318;
1348 -> 1324;
1348 -> 1319;
1348 -> 1325;
1348 -> 1320;
1348 -> 1326;
1348 -> 1321;
1348 -> 1329;
1348 -> 1322;
1348 -> 1340;
1348 -> 1327;
1348 -> 1295;
1348 -> 1302;
1348 -> 933;
1348 -> 1339;
1348 -> 1296;
1349 -> 1296;
1350 -> 1348;
1350 -> 1349;
1351 -> 1348;
1351 -> 1349;
1352 -> 1351;
1352 -> 1348;
1352 -> 1349;
1353 -> 1350;
1353 -> 1349;
1354 -> 1350;
1354 -> 1349;
1355 -> 1349;
1356 -> 1354;
1356 -> 1355;
1357 -> 1351;
1357 -> 1355;
1358 -> 1356;
1358 -> 1352;
1358 -> 0;
1358 -> 1355;
1359 -> 1355;
1360 -> 1356;
1360 -> 1352;
1360 -> 0;
1360 -> 1355;
1361 -> 1356;
1361 -> 1352;
1361 -> 0;
1361 -> 1360;
1362 -> 1356;
1362 -> 1352;
1362 -> 0;
1362 -> 1355;
1363 -> 1356;
1363 -> 1352;
1363 -> 0;
1363 -> 1355;
1364 -> 1356;
1364 -> 1352;
1364 -> 0;
1364 -> 1355;
1365 -> 1356;
1365 -> 1352;
1365 -> 0;
1365 -> 1355;
1366 -> 1356;
1366 -> 1352;
1366 -> 0;
1366 -> 1355;
1367 -> 1355;
1368 -> 1356;
1368 -> 1355;
1369 -> 1367;
1369 -> 1355;
1370 -> 1357;
1370 -> 1352;
1370 -> 1368;
1370 -> 1369;
1370 -> 1355;
1371 -> 1355;
1372 -> 1356;
1372 -> 1355;
1373 -> 1371;
1373 -> 1355;
1374 -> 1355;
1375 -> 1372;
1375 -> 1374;
1376 -> 1373;
1376 -> 1374;
1377 -> 1357;
1377 -> 1374;
1378 -> 1374;
1379 -> 1375;
1379 -> 1370;
1379 -> 1374;
1380 -> 1374;
1381 -> 1380;
1381 -> 1355;
1382 -> 1381;
1382 -> 1355;
1383 -> 1356;
1383 -> 1379;
1383 -> 0;
1383 -> 1382;
1384 -> 0;
1384 -> 1383;
1385 -> 1356;
1385 -> 1379;
1385 -> 0;
1385 -> 1355;
1386 -> 1385;
1386 -> 1355;
1387 -> 1384;
1387 -> 1386;
1388 -> 1387;
1388 -> 0;
1388 -> 1349;
1389 -> 1387;
1389 -> 1349;
1390 -> 1349;
1391 -> 1389;
1391 -> 1390;
1392 -> 1391;
1392 -> 1390;
1393 -> 1392;
1394 -> 1349;
1395 -> 1394;
1395 -> 1350;
1395 -> 1387;
1395 -> 1349;
1396 -> 1350;
1396 -> 1387;
1396 -> 1394;
1396 -> 1395;
1397 -> 1395;
1398 -> 1396;
1398 -> 1395;
1399 -> 1397;
1399 -> 1395;
1400 -> 1395;
1401 -> 1398;
1401 -> 1400;
1402 -> 1399;
1402 -> 1400;
1403 -> 1351;
1403 -> 1400;
1404 -> 1400;
1405 -> 1400;
1405 -> 1395;
1406 -> 1395;
1407 -> 1406;
1407 -> 1395;
1408 -> 1404;
1408 -> 1407;
1409 -> 1395;
1410 -> 1408;
1410 -> 1409;
1410 -> 1395;
1411 -> 1410;
1411 -> 1405;
1411 -> 1395;
1412 -> 1405;
1412 -> 1395;
1413 -> 1393;
1413 -> 1412;
1414 -> 1393;
1414 -> 1349;
1415 -> 1349;
1416 -> 1350;
1416 -> 1401;
1416 -> 1415;
1416 -> 1349;
1417 -> 1416;
1417 -> 1349;
1418 -> 1349;
1419 -> 1417;
1419 -> 1418;
1420 -> 1351;
1420 -> 1418;
1421 -> 1419;
1421 -> 1416;
1421 -> 0;
1421 -> 1418;
1422 -> 1418;
1423 -> 1419;
1423 -> 1416;
1423 -> 0;
1423 -> 1418;
1424 -> 1419;
1424 -> 1416;
1424 -> 0;
1424 -> 1423;
1425 -> 1419;
1425 -> 1416;
1425 -> 0;
1425 -> 1418;
1426 -> 1419;
1426 -> 1416;
1426 -> 0;
1426 -> 1418;
1427 -> 1419;
1427 -> 1416;
1427 -> 0;
1427 -> 1418;
1428 -> 1419;
1428 -> 1416;
1428 -> 0;
1428 -> 1418;
1429 -> 1419;
1429 -> 1416;
1429 -> 0;
1429 -> 1418;
1430 -> 1418;
1431 -> 1430;
1431 -> 1418;
1432 -> 1418;
1433 -> 1432;
1433 -> 1418;
1434 -> 1418;
1435 -> 1433;
1435 -> 1434;
1436 -> 1420;
1436 -> 1434;
1437 -> 1434;
1438 -> 1434;
1439 -> 1438;
1439 -> 1418;
1440 -> 1439;
1440 -> 1418;
1441 -> 1419;
1442 -> 1419;
1443 -> 1441;
1443 -> 1442;
1444 -> 1420;
1444 -> 1442;
1445 -> 1443;
1445 -> 1419;
1445 -> 0;
1445 -> 1442;
1446 -> 1443;
1446 -> 1419;
1446 -> 1442;
1447 -> 1442;
1448 -> 1446;
1448 -> 1447;
1448 -> 1442;
1449 -> 1446;
1449 -> 1442;
1450 -> 1442;
1451 -> 1449;
1451 -> 1450;
1452 -> 1444;
1452 -> 1450;
1453 -> 1451;
1453 -> 1419;
1453 -> 0;
1453 -> 1450;
1454 -> 1450;
1455 -> 1451;
1455 -> 1419;
1455 -> 0;
1455 -> 1450;
1456 -> 1451;
1456 -> 1419;
1456 -> 0;
1456 -> 1455;
1457 -> 1451;
1457 -> 1419;
1457 -> 0;
1457 -> 1450;
1458 -> 1451;
1458 -> 1419;
1458 -> 0;
1458 -> 1450;
1459 -> 1451;
1459 -> 1419;
1459 -> 0;
1459 -> 1450;
1460 -> 1451;
1460 -> 1419;
1460 -> 0;
1460 -> 1450;
1461 -> 1451;
1461 -> 1419;
1461 -> 0;
1461 -> 1450;
1462 -> 1452;
1462 -> 1419;
1462 -> 1451;
1462 -> 1450;
1463 -> 1462;
1464 -> 1419;
1465 -> 1463;
1465 -> 1464;
1466 -> 1465;
1466 -> 1464;
1467 -> 1466;
1468 -> 1349;
1469 -> 1467;
1469 -> 1468;
1470 -> 1350;
1470 -> 1462;
1470 -> 1349;
1471 -> 1349;
1472 -> 1470;
1472 -> 1471;
1473 -> 1470;
1473 -> 1471;
1474 -> 1473;
1474 -> 1470;
1474 -> 1471;
1475 -> 1472;
1475 -> 1471;
1476 -> 1471;
1477 -> 1475;
1477 -> 1476;
1478 -> 1473;
1478 -> 1476;
1479 -> 1477;
1479 -> 1474;
1479 -> 0;
1479 -> 1476;
1480 -> 1479;
1481 -> 1472;
1481 -> 1471;
1482 -> 1471;
1483 -> 1481;
1483 -> 1482;
1484 -> 1473;
1484 -> 1482;
1485 -> 1483;
1485 -> 1474;
1485 -> 0;
1485 -> 1482;
1486 -> 1482;
1487 -> 1483;
1487 -> 1474;
1487 -> 0;
1487 -> 1482;
1488 -> 1483;
1488 -> 1474;
1488 -> 1487;
1489 -> 1487;
1490 -> 1488;
1490 -> 1489;
1491 -> 1490;
1491 -> 1474;
1491 -> 0;
1491 -> 1489;
1492 -> 1489;
1493 -> 1490;
1493 -> 1474;
1493 -> 0;
1494 -> 1490;
1494 -> 1474;
1494 -> 0;
1494 -> 1489;
1495 -> 1490;
1495 -> 1474;
1495 -> 0;
1495 -> 1489;
1496 -> 1490;
1496 -> 1474;
1496 -> 0;
1496 -> 1489;
1497 -> 1490;
1497 -> 1474;
1497 -> 0;
1497 -> 1489;
1498 -> 1490;
1498 -> 1474;
1498 -> 0;
1498 -> 1489;
1499 -> 1490;
1500 -> 1471;
1501 -> 1499;
1501 -> 1500;
1502 -> 1501;
1502 -> 1500;
1503 -> 1502;
1504 -> 1471;
1505 -> 1473;
1505 -> 1504;
1506 -> 1504;
1507 -> 1505;
1507 -> 1490;
1507 -> 1506;
1507 -> 1504;
1508 -> 1504;
1509 -> 1505;
1509 -> 1490;
1509 -> 1508;
1510 -> 1507;
1510 -> 1471;
1511 -> 1472;
1511 -> 1510;
1512 -> 1510;
1513 -> 1511;
1513 -> 1512;
1514 -> 1473;
1514 -> 1512;
1515 -> 1513;
1515 -> 1490;
1515 -> 1512;
1516 -> 1515;
1517 -> 1514;
1517 -> 1515;
1518 -> 1510;
1519 -> 1296;
1520 -> 1308;
1520 -> 1519;
1521 -> 1520;
1521 -> 1517;
1521 -> 1519;
1522 -> 1519;
1523 -> 1521;
1523 -> 1522;
1523 -> 1519;
1524 -> 1519;
1525 -> 1521;
1525 -> 1524;
1525 -> 1517;
1525 -> 1519;
1526 -> 1525;
1527 -> 1296;
1528 -> 1302;
1528 -> 1296;
1529 -> 1528;
1529 -> 1526;
1529 -> 1296;
1530 -> 1287;
1530 -> 1526;
1530 -> 1290;
1531 -> 1291;
1531 -> 1290;
1532 -> 1530;
1532 -> 1531;
1532 -> 1526;
1532 -> 1290;
1533 -> 1287;
1533 -> 1532;
1533 -> 1283;
1534 -> 1287;
1534 -> 1532;
1534 -> 1283;
1535 -> 1277;
1535 -> 936;
1536 -> 1535;
1536 -> 1532;
1536 -> 936;
1537 -> 1534;
1537 -> 936;
1538 -> 915;
1539 -> 881;
1539 -> 1537;
1539 -> 1538;
1539 -> 915;
1540 -> 880;
1540 -> 1537;
1540 -> 876;
1541 -> 877;
1541 -> 0;
1541 -> 876;
1542 -> 879;
1542 -> 876;
1543 -> 882;
1543 -> 876;
1544 -> 880;
1544 -> 876;
1545 -> 1542;
1545 -> 1543;
1545 -> 1544;
1545 -> 881;
1545 -> 871;
1545 -> 1540;
1545 -> 876;
1546 -> 876;
1547 -> 866;
1548 -> 871;
1548 -> 1545;
1548 -> 866;
1549 -> 860;
1549 -> 637;
1550 -> 862;
1550 -> 1548;
1550 -> 1549;
1550 -> 865;
1550 -> 859;
1550 -> 851;
1550 -> 637;
1551 -> 860;
1551 -> 637;
1552 -> 852;
1552 -> 637;
1553 -> 854;
1553 -> 637;
1554 -> 853;
1554 -> 855;
1554 -> 1553;
1555 -> 1553;
1556 -> 859;
1556 -> 1553;
1557 -> 1552;
1557 -> 1553;
1558 -> 853;
1558 -> 1553;
1559 -> 855;
1559 -> 1553;
1560 -> 1550;
1560 -> 1553;
1561 -> 1555;
1561 -> 1553;
1562 -> 857;
1562 -> 1553;
1563 -> 858;
1563 -> 1553;
1564 -> 1553;
1565 -> 1556;
1565 -> 1564;
1566 -> 1557;
1566 -> 1564;
1567 -> 1558;
1567 -> 1564;
1568 -> 1559;
1568 -> 1564;
1569 -> 1560;
1569 -> 1564;
1570 -> 1561;
1570 -> 1564;
1571 -> 1562;
1571 -> 1564;
1572 -> 1563;
1572 -> 1564;
1573 -> 1564;
1574 -> 1565;
1574 -> 1573;
1574 -> 1564;
1575 -> 1564;
1576 -> 1570;
1576 -> 1575;
1576 -> 1564;
1577 -> 1564;
1578 -> 1565;
1578 -> 1577;
1579 -> 1578;
1579 -> 1550;
1579 -> 1577;
1580 -> 1579;
1580 -> 1564;
1581 -> 1564;
1582 -> 1564;
1583 -> 1571;
1583 -> 1564;
1584 -> 1565;
1584 -> 1583;
1585 -> 1566;
1585 -> 1583;
1586 -> 1569;
1586 -> 1583;
1587 -> 1570;
1587 -> 1583;
1588 -> 1572;
1588 -> 1583;
1589 -> 1583;
1590 -> 1584;
1590 -> 1589;
1591 -> 1585;
1591 -> 1589;
1592 -> 1586;
1592 -> 1589;
1593 -> 1587;
1593 -> 1589;
1594 -> 1588;
1594 -> 1589;
1595 -> 1594;
1595 -> 1589;
1596 -> 1589;
1597 -> 1595;
1597 -> 1596;
1598 -> 1590;
1598 -> 1596;
1599 -> 1596;
1600 -> 1598;
1600 -> 1550;
1600 -> 1599;
1600 -> 1596;
1601 -> 1600;
1602 -> 1598;
1602 -> 1600;
1603 -> 1600;
1604 -> 1602;
1604 -> 1603;
1605 -> 1600;
1606 -> 1605;
1606 -> 1602;
1607 -> 1606;
1607 -> 1600;
1608 -> 1600;
1609 -> 1598;
1609 -> 1608;
1610 -> 1609;
1610 -> 1602;
1610 -> 1608;
1611 -> 1608;
1612 -> 1610;
1612 -> 1611;
1613 -> 1612;
1613 -> 1610;
1613 -> 1611;
1614 -> 1611;
1615 -> 1613;
1615 -> 1614;
1616 -> 1614;
1617 -> 1615;
1617 -> 1616;
1618 -> 1617;
1618 -> 1616;
1619 -> 1617;
1619 -> 1614;
1620 -> 1613;
1620 -> 1614;
1621 -> 1614;
1622 -> 1620;
1622 -> 1621;
1623 -> 1622;
1623 -> 1619;
1623 -> 1621;
1624 -> 1623;
1624 -> 1614;
1625 -> 1624;
1625 -> 1600;
1626 -> 1607;
1626 -> 1625;
1626 -> 1600;
1627 -> 1602;
1627 -> 1626;
1629 -> 0;
1631 -> 1628;
1631 -> 1630;
1632 -> 1629;
1632 -> 1630;
1633 -> 1630;
1634 -> 1633;
1634 -> 1630;
1635 -> 1631;
1635 -> 1633;
1635 -> 1630;
1636 -> 1632;
1636 -> 1633;
1636 -> 1630;
1637 -> 1630;
1638 -> 1637;
1638 -> 1627;
1639 -> 1598;
1639 -> 1624;
1639 -> 1600;
1640 -> 1638;
1640 -> 1600;
1641 -> 1600;
1642 -> 1639;
1642 -> 1640;
1642 -> 1641;
1642 -> 1635;
1642 -> 1636;
1642 -> 1624;
1642 -> 0;
1642 -> 1600;
1643 -> 1598;
1643 -> 1642;
1643 -> 1596;
1644 -> 1643;
1644 -> 1589;
1645 -> 1644;
1645 -> 1642;
1645 -> 1589;
1646 -> 1644;
1646 -> 1642;
1646 -> 1589;
1647 -> 1593;
1647 -> 1646;
1647 -> 1555;
1647 -> 1642;
1647 -> 1589;
1648 -> 1644;
1648 -> 1647;
1648 -> 1589;
1649 -> 1589;
1650 -> 1648;
1650 -> 1649;
1650 -> 1589;
1651 -> 1650;
1652 -> 1565;
1652 -> 1564;
1653 -> 1566;
1653 -> 1564;
1654 -> 1567;
1654 -> 1564;
1655 -> 1568;
1655 -> 1564;
1656 -> 1569;
1656 -> 1564;
1657 -> 1570;
1657 -> 1564;
1658 -> 1571;
1658 -> 1564;
1659 -> 1651;
1659 -> 1564;
1660 -> 1572;
1660 -> 1564;
1661 -> 1564;
1662 -> 1564;
1663 -> 1652;
1663 -> 1662;
1664 -> 1653;
1664 -> 1662;
1665 -> 1654;
1665 -> 1662;
1666 -> 1655;
1666 -> 1662;
1667 -> 1656;
1667 -> 1662;
1668 -> 1657;
1668 -> 1662;
1669 -> 1658;
1669 -> 1662;
1670 -> 1659;
1670 -> 1662;
1671 -> 1660;
1671 -> 1662;
1672 -> 1661;
1672 -> 1662;
1673 -> 1662;
1674 -> 1673;
1674 -> 1662;
1675 -> 1673;
1675 -> 1662;
1676 -> 1673;
1676 -> 1662;
1677 -> 1673;
1677 -> 1662;
1678 -> 1673;
1678 -> 1662;
1679 -> 1673;
1679 -> 1662;
1680 -> 1673;
1680 -> 1662;
1681 -> 1673;
1681 -> 1662;
1682 -> 1673;
1682 -> 1662;
1683 -> 1673;
1683 -> 1662;
1684 -> 1673;
1684 -> 1662;
1685 -> 1662;
1686 -> 1663;
1686 -> 1685;
1686 -> 1662;
1687 -> 1662;
1688 -> 1668;
1688 -> 1687;
1688 -> 1662;
1689 -> 1663;
1689 -> 1673;
1689 -> 1662;
1690 -> 1664;
1690 -> 1673;
1690 -> 1662;
1691 -> 1665;
1691 -> 1673;
1691 -> 1662;
1692 -> 1671;
1692 -> 1673;
1692 -> 1662;
1693 -> 1668;
1693 -> 1673;
1693 -> 1662;
1694 -> 1669;
1694 -> 1673;
1694 -> 1662;
1695 -> 1670;
1695 -> 1673;
1695 -> 1662;
1696 -> 1667;
1696 -> 1673;
1696 -> 1662;
1697 -> 1667;
1697 -> 1662;
1698 -> 1662;
1699 -> 1697;
1699 -> 1698;
1700 -> 1673;
1700 -> 1698;
1701 -> 1699;
1701 -> 1698;
1702 -> 1662;
1703 -> 1665;
1703 -> 1666;
1703 -> 1662;
1704 -> 1666;
1704 -> 1673;
1704 -> 1662;
1705 -> 1564;
1706 -> 1565;
1706 -> 1705;
1707 -> 1706;
1707 -> 1647;
1707 -> 1705;
1708 -> 1707;
1708 -> 1564;
1709 -> 1708;
1710 -> 1709;
1710 -> 1661;
1710 -> 1708;
1711 -> 1564;
1712 -> 1565;
1712 -> 1711;
1713 -> 1711;
1714 -> 1712;
1714 -> 1713;
1715 -> 1713;
1716 -> 1714;
1716 -> 1715;
1717 -> 1715;
1718 -> 1716;
1718 -> 1717;
1719 -> 1718;
1719 -> 1647;
1719 -> 1717;
1720 -> 1718;
1720 -> 1647;
1720 -> 1717;
1721 -> 1720;
1721 -> 1715;
1722 -> 1716;
1722 -> 1647;
1722 -> 1715;
1723 -> 1711;
1724 -> 1722;
1724 -> 1564;
1725 -> 1564;
1726 -> 1724;
1726 -> 1725;
1727 -> 1661;
1727 -> 1725;
1728 -> 1726;
1728 -> 1722;
1728 -> 1725;
1729 -> 1727;
1729 -> 1728;
1730 -> 1728;
1731 -> 1729;
1731 -> 1730;
1731 -> 1728;
1731 -> 1673;
1731 -> 1674;
1731 -> 1689;
1731 -> 1675;
1731 -> 1691;
1731 -> 1676;
1731 -> 1704;
1731 -> 1677;
1731 -> 1693;
1731 -> 1678;
1731 -> 1696;
1731 -> 1679;
1731 -> 1690;
1731 -> 1680;
1731 -> 1694;
1731 -> 1681;
1731 -> 1682;
1731 -> 1695;
1731 -> 1683;
1731 -> 1710;
1731 -> 1684;
1731 -> 1692;
1731 -> 851;
1731 -> 1709;
1732 -> 1731;
1732 -> 1730;
1733 -> 1731;
1733 -> 1730;
1734 -> 1731;
1734 -> 1730;
1735 -> 1734;
1735 -> 1731;
1735 -> 1730;
1736 -> 1732;
1736 -> 1730;
1737 -> 1730;
1738 -> 1735;
1738 -> 1737;
1739 -> 1736;
1739 -> 1737;
1740 -> 1737;
1741 -> 1738;
1741 -> 1740;
1741 -> 1737;
1742 -> 1730;
1743 -> 1734;
1743 -> 1731;
1743 -> 1730;
1744 -> 1730;
1745 -> 1734;
1745 -> 1743;
1745 -> 1744;
1746 -> 1745;
1746 -> 1730;
1747 -> 1732;
1747 -> 1746;
1748 -> 1746;
1749 -> 1747;
1749 -> 1748;
1750 -> 1734;
1750 -> 1748;
1751 -> 1748;
1752 -> 1750;
1752 -> 1743;
1752 -> 1748;
1753 -> 1752;
1753 -> 1746;
1754 -> 1753;
1754 -> 1746;
1755 -> 1730;
1756 -> 1731;
1756 -> 1755;
1756 -> 1754;
1756 -> 1728;
1757 -> 1564;
1758 -> 1564;
1759 -> 1661;
1759 -> 1758;
1760 -> 1759;
1760 -> 1756;
1760 -> 1758;
1761 -> 1758;
1762 -> 1760;
1762 -> 1761;
1762 -> 1758;
1763 -> 1758;
1764 -> 1763;
1764 -> 1758;
1765 -> 1760;
1765 -> 1764;
1765 -> 1756;
1765 -> 1758;
1766 -> 1765;
1767 -> 1564;
1768 -> 1564;
1769 -> 1566;
1769 -> 1768;
1769 -> 1564;
1770 -> 1570;
1770 -> 1769;
1771 -> 1769;
1772 -> 1770;
1772 -> 1771;
1773 -> 1566;
1773 -> 1771;
1774 -> 1773;
1774 -> 1766;
1774 -> 1771;
1775 -> 1774;
1775 -> 1769;
1776 -> 1775;
1776 -> 1769;
1777 -> 1570;
1777 -> 1769;
1778 -> 1769;
1779 -> 1776;
1779 -> 1778;
1780 -> 1777;
1780 -> 1778;
1781 -> 1661;
1781 -> 1778;
1782 -> 1779;
1782 -> 1778;
1783 -> 1769;
1784 -> 1570;
1784 -> 1769;
1785 -> 1769;
1786 -> 1784;
1786 -> 1785;
1787 -> 1566;
1787 -> 1785;
1788 -> 1785;
1789 -> 1786;
1789 -> 1785;
1790 -> 1785;
1791 -> 1789;
1791 -> 1790;
1792 -> 1787;
1792 -> 1790;
1793 -> 1790;
1794 -> 1792;
1794 -> 1793;
1795 -> 1793;
1796 -> 1795;
1796 -> 1794;
1796 -> 1793;
1797 -> 1793;
1798 -> 1794;
1798 -> 1797;
1799 -> 1798;
1799 -> 1766;
1799 -> 1796;
1799 -> 1797;
1800 -> 1799;
1800 -> 1793;
1801 -> 1800;
1801 -> 1790;
1802 -> 1790;
1803 -> 1792;
1803 -> 1802;
1804 -> 1803;
1804 -> 1799;
1804 -> 1802;
1805 -> 1804;
1805 -> 1790;
1806 -> 1805;
1807 -> 1801;
1807 -> 1806;
1807 -> 1805;
1808 -> 1807;
1809 -> 1785;
1810 -> 1788;
1810 -> 1785;
1811 -> 1787;
1811 -> 1804;
1811 -> 1785;
1812 -> 1810;
1812 -> 1811;
1812 -> 1788;
1812 -> 1804;
1812 -> 1785;
1813 -> 1788;
1813 -> 1785;
1814 -> 1787;
1814 -> 1812;
1814 -> 1785;
1815 -> 1788;
1815 -> 1785;
1816 -> 1787;
1816 -> 1814;
1816 -> 1785;
1817 -> 1788;
1817 -> 1785;
1818 -> 1787;
1818 -> 1816;
1818 -> 1785;
1819 -> 1788;
1819 -> 1785;
1820 -> 1787;
1820 -> 1818;
1820 -> 1785;
1821 -> 1788;
1821 -> 1785;
1822 -> 1787;
1822 -> 1820;
1822 -> 1785;
1823 -> 1788;
1823 -> 1785;
1824 -> 1787;
1824 -> 1822;
1824 -> 1785;
1825 -> 1788;
1825 -> 1785;
1826 -> 1787;
1826 -> 1824;
1826 -> 1785;
1827 -> 1788;
1827 -> 1826;
1827 -> 1785;
1828 -> 1827;
1828 -> 1769;
1829 -> 1828;
1829 -> 1769;
1830 -> 1570;
1830 -> 1769;
1831 -> 1769;
1832 -> 1829;
1832 -> 1831;
1833 -> 1830;
1833 -> 1831;
1834 -> 1661;
1834 -> 1831;
1835 -> 1832;
1835 -> 1831;
1836 -> 1769;
1837 -> 1769;
1838 -> 1565;
1838 -> 1837;
1839 -> 1838;
1839 -> 1826;
1839 -> 1837;
1840 -> 1839;
1840 -> 1769;
1841 -> 1661;
1841 -> 1769;
1842 -> 1566;
1842 -> 1769;
1843 -> 1570;
1843 -> 1769;
1844 -> 1769;
1845 -> 1840;
1845 -> 1844;
1846 -> 0;
1846 -> 1844;
1847 -> 1840;
1847 -> 1846;
1847 -> 0;
1847 -> 1769;
1848 -> 1840;
1848 -> 1844;
1849 -> 1844;
1850 -> 1840;
1850 -> 1849;
1850 -> 1847;
1850 -> 1769;
1851 -> 1769;
1852 -> 1661;
1852 -> 1851;
1853 -> 1852;
1853 -> 1850;
1853 -> 1851;
1854 -> 1851;
1855 -> 1853;
1855 -> 1854;
1855 -> 1851;
1856 -> 1851;
1857 -> 1856;
1857 -> 1851;
1858 -> 1769;
1859 -> 1566;
1859 -> 1853;
1859 -> 1769;
1860 -> 1769;
1861 -> 1859;
1861 -> 1860;
1861 -> 1769;
1862 -> 1564;
1863 -> 1566;
1863 -> 1862;
1863 -> 1564;
1864 -> 1661;
1864 -> 1853;
1864 -> 1566;
1864 -> 1564;
1865 -> 1564;
1866 -> 1565;
1866 -> 1865;
1867 -> 1866;
1867 -> 1853;
1867 -> 1865;
1868 -> 1867;
1868 -> 1564;
1869 -> 1564;
1870 -> 1571;
1870 -> 1869;
1870 -> 1564;
1871 -> 1565;
1871 -> 1870;
1872 -> 1570;
1872 -> 1870;
1873 -> 1572;
1873 -> 1870;
1874 -> 1870;
1875 -> 1871;
1875 -> 1874;
1876 -> 1872;
1876 -> 1874;
1877 -> 1873;
1877 -> 1874;
1878 -> 1874;
1879 -> 1875;
1879 -> 1878;
1880 -> 1878;
1881 -> 1879;
1881 -> 1880;
1882 -> 1880;
1883 -> 1881;
1883 -> 1882;
1884 -> 1883;
1884 -> 1868;
1884 -> 1882;
1885 -> 1883;
1885 -> 1868;
1885 -> 1882;
1886 -> 1885;
1886 -> 1880;
1887 -> 1881;
1887 -> 1868;
1887 -> 1880;
1888 -> 1887;
1888 -> 1874;
1889 -> 1877;
1889 -> 1874;
1890 -> 1889;
1890 -> 1888;
1890 -> 851;
1890 -> 1887;
1890 -> 1874;
1891 -> 1874;
1892 -> 1876;
1892 -> 1890;
1892 -> 1874;
1893 -> 1870;
1894 -> 1870;
1895 -> 1566;
1895 -> 1894;
1895 -> 1870;
1896 -> 1651;
1896 -> 1894;
1896 -> 1870;
1897 -> 1895;
1897 -> 1896;
1897 -> 1870;
1898 -> 1553;
1899 -> 1555;
1899 -> 1553;
1900 -> 1899;
1900 -> 1892;
1900 -> 1553;
1901 -> 1552;
1901 -> 1900;
1902 -> 1555;
1902 -> 1900;
1903 -> 1900;
1904 -> 1901;
1904 -> 1903;
1905 -> 1902;
1905 -> 1903;
1906 -> 859;
1906 -> 1903;
1907 -> 1906;
1907 -> 1900;
1907 -> 1903;
1908 -> 1906;
1908 -> 1900;
1908 -> 1903;
1909 -> 1900;
1910 -> 856;
1910 -> 1553;
1911 -> 1555;
1911 -> 1553;
1912 -> 858;
1912 -> 1553;
1913 -> 1910;
1913 -> 1911;
1913 -> 1912;
1913 -> 859;
1913 -> 1900;
1913 -> 851;
1913 -> 1553;
1914 -> 1553;
1915 -> 1550;
1915 -> 1913;
1915 -> 1553;
1916 -> 637;
1917 -> 638;
1917 -> 1916;
1917 -> 1913;
1917 -> 1;
1918 -> 638;
1918 -> 637;
1919 -> 638;
1919 -> 637;
1920 -> 638;
1920 -> 637;
1921 -> 638;
1921 -> 637;
1922 -> 638;
1922 -> 637;
1923 -> 638;
1923 -> 637;
1924 -> 638;
1924 -> 637;
1925 -> 637;
1926 -> 1918;
1926 -> 637;
1927 -> 1920;
1927 -> 637;
1928 -> 1925;
1928 -> 637;
1929 -> 1924;
1929 -> 1926;
1929 -> 1927;
1929 -> 1928;
1929 -> 1917;
1929 -> 1925;
1929 -> 637;
1930 -> 1918;
1930 -> 1929;
1930 -> 637;
1931 -> 637;
1932 -> 1924;
1932 -> 1931;
1933 -> 1931;
1934 -> 1932;
1934 -> 1933;
1935 -> 1934;
1935 -> 1929;
1935 -> 1933;
1936 -> 1934;
1936 -> 1929;
1936 -> 1933;
1937 -> 1936;
1937 -> 1931;
1938 -> 1932;
1938 -> 1929;
1938 -> 1931;
1939 -> 1938;
1939 -> 637;
1940 -> 637;
1941 -> 1925;
1941 -> 637;
1942 -> 637;
1943 -> 1941;
1943 -> 1942;
1944 -> 1924;
1944 -> 1942;
1945 -> 1942;
1946 -> 1944;
1946 -> 1945;
1947 -> 1945;
1948 -> 1946;
1948 -> 1947;
1949 -> 1948;
1949 -> 1939;
1949 -> 1947;
1950 -> 1948;
1950 -> 1939;
1950 -> 1947;
1951 -> 1950;
1951 -> 1945;
1952 -> 1946;
1952 -> 1939;
1952 -> 1945;
1953 -> 1952;
1953 -> 1942;
1954 -> 1942;
1955 -> 1954;
1955 -> 1953;
1955 -> 1952;
1955 -> 1942;
1956 -> 1942;
1957 -> 1956;
1957 -> 637;
1958 -> 1922;
1958 -> 637;
1959 -> 1925;
1959 -> 637;
1960 -> 1923;
1960 -> 637;
1961 -> 1958;
1961 -> 1959;
1961 -> 1960;
1961 -> 1924;
1961 -> 1952;
1961 -> 1917;
1961 -> 637;
1962 -> 637;
1963 -> 1923;
1963 -> 1917;
1963 -> 1961;
1963 -> 637;
1964 -> 637;
1965 -> 1921;
1965 -> 637;
1966 -> 637;
1971 -> 1968;
1971 -> 1967;
1972 -> 1969;
1972 -> 1967;
1973 -> 1970;
1973 -> 1967;
1974 -> 1967;
1975 -> 1924;
1975 -> 637;
1976 -> 1965;
1976 -> 637;
1977 -> 1919;
1977 -> 637;
1978 -> 1964;
1978 -> 637;
1979 -> 1923;
1979 -> 637;
1980 -> 637;
1981 -> 637;
1982 -> 1975;
1982 -> 1981;
1983 -> 1976;
1983 -> 1981;
1984 -> 1977;
1984 -> 1981;
1985 -> 1978;
1985 -> 1981;
1986 -> 1979;
1986 -> 1981;
1987 -> 1980;
1987 -> 1981;
1988 -> 1980;
1988 -> 1981;
1989 -> 1981;
1990 -> 1981;
1991 -> 1984;
1991 -> 1990;
1991 -> 1981;
1992 -> 1981;
1993 -> 1982;
1993 -> 1992;
1994 -> 1992;
1995 -> 1993;
1995 -> 1994;
1996 -> 1995;
1996 -> 1963;
1996 -> 1994;
1997 -> 1995;
1997 -> 1963;
1997 -> 1994;
1998 -> 1997;
1998 -> 1992;
1999 -> 1993;
1999 -> 1963;
1999 -> 1992;
2000 -> 1999;
2000 -> 1981;
2001 -> 2000;
2001 -> 1983;
2001 -> 1981;
2002 -> 1982;
2002 -> 1981;
2003 -> 1989;
2003 -> 1981;
2004 -> 1987;
2004 -> 1981;
2005 -> 1988;
2005 -> 1981;
2006 -> 1981;
2007 -> 1985;
2007 -> 1981;
2008 -> 1986;
2008 -> 1981;
2009 -> 1981;
2010 -> 2001;
2010 -> 2009;
2011 -> 2002;
2011 -> 2009;
2012 -> 2003;
2012 -> 2009;
2013 -> 2004;
2013 -> 2009;
2014 -> 2005;
2014 -> 2009;
2015 -> 2006;
2015 -> 2009;
2016 -> 2006;
2016 -> 2009;
2017 -> 2007;
2017 -> 2009;
2018 -> 2008;
2018 -> 2009;
2019 -> 2006;
2019 -> 2009;
2020 -> 2009;
2021 -> 2020;
2021 -> 2009;
2022 -> 2020;
2022 -> 2009;
2023 -> 2020;
2023 -> 2009;
2024 -> 2020;
2024 -> 2009;
2025 -> 2020;
2025 -> 2009;
2026 -> 2020;
2026 -> 2009;
2027 -> 2020;
2027 -> 2009;
2028 -> 2020;
2028 -> 2009;
2029 -> 2020;
2029 -> 2009;
2030 -> 2020;
2030 -> 2009;
2031 -> 2020;
2031 -> 2009;
2032 -> 2020;
2032 -> 2009;
2033 -> 2010;
2033 -> 2020;
2033 -> 2009;
2034 -> 2011;
2034 -> 2020;
2034 -> 2009;
2035 -> 2012;
2035 -> 2020;
2035 -> 2009;
2036 -> 2013;
2036 -> 2020;
2036 -> 2009;
2037 -> 2014;
2037 -> 2020;
2037 -> 2009;
2038 -> 2015;
2038 -> 2020;
2038 -> 2009;
2039 -> 2016;
2039 -> 2020;
2039 -> 2009;
2040 -> 2017;
2040 -> 2020;
2040 -> 2009;
2041 -> 2018;
2041 -> 2020;
2041 -> 2009;
2042 -> 1981;
2043 -> 1982;
2043 -> 2042;
2044 -> 2042;
2045 -> 2043;
2045 -> 2044;
2046 -> 2045;
2046 -> 1999;
2046 -> 2044;
2047 -> 2045;
2047 -> 1999;
2047 -> 2044;
2048 -> 2047;
2048 -> 2042;
2049 -> 2043;
2049 -> 1999;
2049 -> 2042;
2050 -> 2049;
2050 -> 1981;
2051 -> 2050;
2051 -> 2006;
2051 -> 2049;
2051 -> 2020;
2051 -> 2021;
2051 -> 2033;
2051 -> 2022;
2051 -> 2034;
2051 -> 2023;
2051 -> 2035;
2051 -> 2024;
2051 -> 2036;
2051 -> 2025;
2051 -> 2037;
2051 -> 2026;
2051 -> 2038;
2051 -> 2027;
2051 -> 2039;
2051 -> 2028;
2051 -> 2040;
2051 -> 2029;
2051 -> 2030;
2051 -> 2031;
2051 -> 2032;
2051 -> 2041;
2051 -> 1980;
2051 -> 1964;
2051 -> 1963;
2051 -> 1981;
2052 -> 1981;
2053 -> 2051;
2053 -> 2052;
2054 -> 2051;
2054 -> 2052;
2055 -> 2054;
2055 -> 2051;
2055 -> 2052;
2056 -> 2053;
2056 -> 2055;
2056 -> 2052;
2057 -> 2056;
2058 -> 2056;
2059 -> 2056;
2060 -> 2058;
2060 -> 2059;
2061 -> 2054;
2061 -> 2059;
2062 -> 2061;
2062 -> 2055;
2062 -> 2059;
2063 -> 2059;
2064 -> 2062;
2065 -> 2056;
2066 -> 2056;
2067 -> 2065;
2067 -> 2066;
2068 -> 2054;
2068 -> 2066;
2069 -> 2068;
2069 -> 2055;
2069 -> 2066;
2070 -> 2066;
2071 -> 2069;
2072 -> 2056;
2073 -> 2054;
2073 -> 2072;
2074 -> 2073;
2074 -> 2055;
2074 -> 2072;
2075 -> 2056;
2076 -> 2056;
2077 -> 2076;
2077 -> 2056;
2078 -> 2077;
2079 -> 2077;
2080 -> 2078;
2080 -> 2079;
2081 -> 2054;
2081 -> 2079;
2082 -> 2081;
2082 -> 2055;
2082 -> 2079;
2083 -> 2079;
2084 -> 2082;
2085 -> 2077;
2086 -> 2054;
2086 -> 2085;
2087 -> 2086;
2087 -> 2055;
2087 -> 2074;
2087 -> 2085;
2088 -> 2077;
2089 -> 2077;
2090 -> 2054;
2090 -> 2055;
2090 -> 2089;
2090 -> 2077;
2091 -> 2077;
2092 -> 2089;
2092 -> 2091;
2093 -> 2089;
2093 -> 2091;
2094 -> 2054;
2094 -> 2091;
2095 -> 2092;
2095 -> 2091;
2096 -> 2093;
2096 -> 2091;
2097 -> 2095;
2097 -> 2096;
2097 -> 2091;
2098 -> 2091;
2099 -> 2097;
2099 -> 2098;
2100 -> 2094;
2100 -> 2098;
2101 -> 2100;
2101 -> 2055;
2101 -> 2098;
2102 -> 2098;
2103 -> 2101;
2104 -> 2091;
2105 -> 2077;
2106 -> 2054;
2106 -> 2105;
2107 -> 2106;
2107 -> 2055;
2107 -> 2074;
2107 -> 2087;
2107 -> 2105;
2108 -> 2105;
2109 -> 2106;
2109 -> 2055;
2109 -> 2074;
2109 -> 2087;
2109 -> 2107;
2109 -> 2108;
2109 -> 2105;
2110 -> 2077;
2111 -> 2077;
2112 -> 2077;
2113 -> 2111;
2113 -> 2112;
2114 -> 2054;
2114 -> 2112;
2115 -> 2114;
2115 -> 2055;
2115 -> 2112;
2116 -> 2112;
2117 -> 2115;
2118 -> 2056;
2119 -> 2056;
2120 -> 2118;
2120 -> 2119;
2121 -> 2054;
2121 -> 2119;
2122 -> 2121;
2122 -> 2055;
2122 -> 2119;
2123 -> 2119;
2124 -> 2122;
2125 -> 2056;
2126 -> 2054;
2126 -> 2125;
2127 -> 2126;
2127 -> 2055;
2127 -> 2074;
2127 -> 2087;
2127 -> 2107;
2127 -> 2125;
2128 -> 2056;
2129 -> 2054;
2129 -> 2055;
2129 -> 2052;
2130 -> 2053;
2130 -> 2055;
2130 -> 2074;
2130 -> 2087;
2130 -> 2107;
2130 -> 2127;
2130 -> 2052;
2131 -> 2054;
2131 -> 2055;
2131 -> 2074;
2131 -> 2087;
2131 -> 2107;
2131 -> 2127;
2131 -> 2130;
2132 -> 2054;
2132 -> 2130;
2133 -> 2132;
2133 -> 2130;
2133 -> 2131;
2133 -> 2055;
2133 -> 2074;
2133 -> 2087;
2133 -> 2107;
2133 -> 2127;
2134 -> 2130;
2135 -> 2133;
2135 -> 2134;
2136 -> 2133;
2136 -> 2134;
2137 -> 2136;
2137 -> 2133;
2137 -> 2134;
2138 -> 2134;
2139 -> 2136;
2139 -> 2137;
2139 -> 2138;
2139 -> 2134;
2140 -> 2135;
2140 -> 2134;
2141 -> 2134;
2142 -> 2140;
2142 -> 2141;
2143 -> 2136;
2143 -> 2141;
2144 -> 2143;
2144 -> 2137;
2144 -> 2141;
2145 -> 2142;
2145 -> 2141;
2146 -> 2141;
2147 -> 2145;
2147 -> 2146;
2148 -> 2147;
2148 -> 2146;
2149 -> 2148;
2149 -> 2144;
2149 -> 2146;
2150 -> 2141;
2151 -> 2143;
2151 -> 2149;
2151 -> 2150;
2151 -> 2141;
2152 -> 2142;
2152 -> 2141;
2153 -> 2152;
2153 -> 2149;
2153 -> 2141;
2154 -> 2153;
2154 -> 2141;
2155 -> 2141;
2156 -> 2141;
2157 -> 2156;
2157 -> 2141;
2158 -> 2142;
2158 -> 2141;
2159 -> 2155;
2159 -> 2141;
2160 -> 2156;
2160 -> 2141;
2161 -> 2141;
2162 -> 2158;
2162 -> 2161;
2163 -> 2159;
2163 -> 2161;
2164 -> 2160;
2164 -> 2161;
2165 -> 2143;
2165 -> 2161;
2166 -> 0;
2166 -> 2161;
2167 -> 2161;
2168 -> 2161;
2169 -> 2162;
2169 -> 2153;
2169 -> 2161;
2170 -> 2169;
2170 -> 2153;
2171 -> 2170;
2171 -> 2166;
2171 -> 2169;
2172 -> 2171;
2172 -> 2169;
2173 -> 2169;
2174 -> 2165;
2174 -> 2173;
2174 -> 2169;
2175 -> 2174;
2175 -> 2169;
2176 -> 2161;
2177 -> 2168;
2177 -> 2176;
2177 -> 2161;
2178 -> 0;
2178 -> 2177;
2179 -> 2161;
2180 -> 2179;
2180 -> 2141;
2181 -> 2178;
2181 -> 0;
2181 -> 2141;
2182 -> 2172;
2182 -> 0;
2182 -> 2181;
2183 -> 2181;
2184 -> 2134;
2185 -> 2136;
2185 -> 2174;
2185 -> 2134;
2186 -> 2135;
2186 -> 2174;
2186 -> 2185;
2187 -> 2136;
2187 -> 2186;
2188 -> 2136;
2188 -> 2186;
2189 -> 2188;
2189 -> 2186;
2189 -> 2187;
2190 -> 2186;
2191 -> 2189;
2192 -> 2189;
2193 -> 2189;
2194 -> 2189;
2195 -> 2189;
2196 -> 2195;
2196 -> 2189;
2197 -> 2194;
2197 -> 2189;
2198 -> 2195;
2198 -> 2189;
2199 -> 0;
2199 -> 2189;
2200 -> 2189;
2201 -> 2189;
2202 -> 2189;
2203 -> 2202;
2203 -> 2199;
2203 -> 2189;
2204 -> 2203;
2204 -> 2189;
2205 -> 2189;
2206 -> 2189;
2207 -> 2201;
2207 -> 2206;
2207 -> 2189;
2208 -> 0;
2208 -> 2207;
2209 -> 2189;
2210 -> 2208;
2210 -> 0;
2210 -> 2189;
2211 -> 2204;
2211 -> 0;
2211 -> 2210;
2212 -> 2210;
2213 -> 2053;
2213 -> 2189;
2213 -> 2052;
2214 -> 2213;
2215 -> 2214;
2216 -> 2213;
2217 -> 2213;
2218 -> 2213;
2219 -> 2217;
2219 -> 2218;
2220 -> 2054;
2220 -> 2218;
2221 -> 2220;
2221 -> 2189;
2221 -> 2218;
2222 -> 2218;
2223 -> 2221;
2224 -> 2213;
2225 -> 2224;
2225 -> 2189;
2225 -> 2214;
2226 -> 2224;
2227 -> 2224;
2227 -> 2189;
2227 -> 2214;
2227 -> 2225;
2227 -> 2226;
2228 -> 2213;
2229 -> 2213;
2230 -> 2213;
2231 -> 2229;
2231 -> 2230;
2232 -> 2054;
2232 -> 2230;
2233 -> 2232;
2233 -> 2189;
2233 -> 2230;
2234 -> 2230;
2235 -> 2233;
2236 -> 1981;
2237 -> 2006;
2237 -> 2225;
2237 -> 2236;
2237 -> 1981;
2238 -> 1989;
2238 -> 1981;
2239 -> 1981;
2240 -> 1987;
2240 -> 2239;
2240 -> 1981;
2241 -> 2240;
2242 -> 1982;
2242 -> 2241;
2243 -> 2241;
2244 -> 2242;
2244 -> 2225;
2244 -> 2243;
2245 -> 2243;
2246 -> 2244;
2246 -> 2240;
2247 -> 2246;
2248 -> 1985;
2248 -> 2246;
2249 -> 1986;
2249 -> 2246;
2250 -> 2246;
2251 -> 2247;
2251 -> 2250;
2252 -> 2247;
2252 -> 2250;
2253 -> 2248;
2253 -> 2250;
2254 -> 2249;
2254 -> 2250;
2255 -> 2251;
2255 -> 2250;
2256 -> 1922;
2256 -> 637;
2257 -> 1964;
2257 -> 637;
2258 -> 1923;
2258 -> 637;
2259 -> 2256;
2259 -> 2257;
2259 -> 2258;
2259 -> 1924;
2259 -> 2255;
2259 -> 637;
2260 -> 637;
2261 -> 638;
2261 -> 637;
2262 -> 638;
2262 -> 637;
2263 -> 638;
2263 -> 637;
2264 -> 638;
2264 -> 637;
2265 -> 637;
2266 -> 2264;
2266 -> 2259;
2266 -> 2265;
2266 -> 637;
2267 -> 2261;
2267 -> 637;
2268 -> 637;
2269 -> 2267;
2269 -> 2268;
2270 -> 2264;
2270 -> 2268;
2271 -> 2268;
2272 -> 2270;
2272 -> 2259;
2272 -> 2271;
2272 -> 2268;
2273 -> 637;
2274 -> 638;
2274 -> 637;
2275 -> 637;
2276 -> 2274;
2276 -> 2275;
2277 -> 2275;
2278 -> 2276;
2278 -> 2277;
2279 -> 2259;
2279 -> 2275;
2280 -> 637;
2281 -> 638;
2281 -> 637;
2282 -> 637;
2283 -> 2281;
2283 -> 2282;
2284 -> 2282;
2285 -> 2283;
2285 -> 2284;
2286 -> 2259;
2286 -> 2282;
2287 -> 638;
2287 -> 637;
2288 -> 638;
2288 -> 637;
2289 -> 637;
2290 -> 2288;
2290 -> 2289;
2291 -> 2290;
2291 -> 2259;
2291 -> 2289;
2292 -> 2291;
2292 -> 637;
2293 -> 2292;
2293 -> 2259;
2293 -> 637;
2294 -> 2292;
2294 -> 637;
2295 -> 2288;
2295 -> 2259;
2295 -> 637;
2296 -> 2292;
2296 -> 2293;
2297 -> 2287;
2297 -> 2259;
2297 -> 2293;
2298 -> 2293;
2299 -> 2296;
2299 -> 2298;
2300 -> 2297;
2300 -> 2298;
2301 -> 2288;
2301 -> 2298;
2302 -> 2301;
2302 -> 2259;
2302 -> 2298;
2303 -> 2299;
2303 -> 2298;
2304 -> 2302;
2304 -> 2303;
2304 -> 2298;
2305 -> 2298;
2306 -> 2299;
2306 -> 2298;
2307 -> 2305;
2307 -> 2298;
2308 -> 2301;
2308 -> 2259;
2308 -> 2306;
2308 -> 2307;
2308 -> 2298;
2309 -> 2299;
2309 -> 2298;
2310 -> 2298;
2311 -> 2298;
2312 -> 2309;
2312 -> 2311;
2313 -> 2310;
2313 -> 2311;
2314 -> 2313;
2314 -> 2311;
2315 -> 2311;
2316 -> 2312;
2316 -> 2315;
2316 -> 2311;
2317 -> 2312;
2317 -> 2313;
2317 -> 2311;
2318 -> 2299;
2318 -> 2298;
2319 -> 2310;
2319 -> 2298;
2320 -> 2301;
2320 -> 2308;
2320 -> 2318;
2320 -> 2319;
2320 -> 2317;
2320 -> 2298;
2321 -> 2320;
2321 -> 2310;
2321 -> 2298;
2322 -> 2299;
2322 -> 2321;
2323 -> 2320;
2323 -> 2321;
2324 -> 2300;
2324 -> 2321;
2325 -> 2321;
2326 -> 2322;
2326 -> 2325;
2327 -> 2323;
2327 -> 2325;
2328 -> 2324;
2328 -> 2325;
2329 -> 2301;
2329 -> 2325;
2330 -> 2329;
2330 -> 2320;
2330 -> 2325;
2331 -> 2325;
2332 -> 2327;
2332 -> 2331;
2333 -> 2332;
2333 -> 2320;
2333 -> 2331;
2334 -> 2333;
2334 -> 2325;
2335 -> 2330;
2335 -> 2320;
2335 -> 2325;
2336 -> 2329;
2336 -> 2320;
2336 -> 0;
2336 -> 2325;
2337 -> 2334;
2337 -> 2320;
2337 -> 2325;
2338 -> 2336;
2338 -> 2337;
2338 -> 2325;
2339 -> 2326;
2339 -> 2320;
2339 -> 2325;
2340 -> 2326;
2340 -> 2320;
2340 -> 2325;
2341 -> 2325;
2342 -> 2329;
2342 -> 2320;
2342 -> 2341;
2342 -> 2325;
2343 -> 2321;
2344 -> 2298;
2345 -> 2299;
2345 -> 2320;
2345 -> 2344;
2345 -> 2298;
2346 -> 2320;
2346 -> 2298;
2347 -> 2320;
2347 -> 2298;
2348 -> 638;
2348 -> 2347;
2348 -> 2345;
2348 -> 1;
2349 -> 638;
2349 -> 637;
2350 -> 2349;
2350 -> 2348;
2350 -> 637;
2351 -> 638;
2351 -> 637;
2352 -> 638;
2352 -> 637;
2353 -> 2352;
2353 -> 2350;
2353 -> 637;
2354 -> 637;
2355 -> 2354;
2355 -> 2353;
2355 -> 2350;
2355 -> 637;
2356 -> 637;
2357 -> 638;
2357 -> 2356;
2357 -> 2350;
2357 -> 1;
2358 -> 638;
2358 -> 637;
2359 -> 638;
2359 -> 637;
2360 -> 2358;
2360 -> 2357;
2360 -> 637;
2361 -> 2359;
2361 -> 2357;
2361 -> 2360;
2362 -> 2358;
2362 -> 2360;
2363 -> 2360;
2364 -> 2361;
2364 -> 2363;
2365 -> 2362;
2365 -> 2363;
2366 -> 2359;
2366 -> 2363;
2367 -> 2364;
2367 -> 2357;
2367 -> 2363;
2368 -> 2367;
2369 -> 2364;
2369 -> 2357;
2369 -> 2367;
2370 -> 2367;
2371 -> 2370;
2371 -> 2369;
2371 -> 2357;
2371 -> 2367;
2372 -> 2365;
2372 -> 2357;
2372 -> 2367;
2373 -> 2366;
2373 -> 2357;
2373 -> 2372;
2374 -> 2364;
2374 -> 2367;
2375 -> 2368;
2375 -> 2367;
2376 -> 2367;
2377 -> 2368;
2377 -> 2375;
2377 -> 2367;
2378 -> 2375;
2378 -> 2363;
2379 -> 638;
2379 -> 2378;
2379 -> 2377;
2379 -> 2375;
2379 -> 1;
2380 -> 638;
2380 -> 637;
2381 -> 2380;
2381 -> 2379;
2381 -> 637;
2382 -> 638;
2382 -> 637;
2383 -> 638;
2383 -> 637;
2384 -> 2382;
2384 -> 2381;
2384 -> 637;
2385 -> 637;
2386 -> 2383;
2386 -> 2381;
2386 -> 2385;
2387 -> 2386;
2387 -> 637;
2388 -> 637;
2389 -> 638;
2389 -> 637;
2390 -> 638;
2390 -> 637;
2391 -> 2389;
2391 -> 2387;
2391 -> 637;
2392 -> 637;
2393 -> 2391;
2393 -> 2392;
2394 -> 2390;
2394 -> 2392;
2395 -> 2394;
2395 -> 2387;
2395 -> 2392;
2396 -> 2395;
2396 -> 637;
2397 -> 637;
2398 -> 638;
2398 -> 637;
2399 -> 638;
2399 -> 637;
2400 -> 2398;
2400 -> 2396;
2400 -> 637;
2401 -> 637;
2402 -> 2400;
2402 -> 2401;
2403 -> 2399;
2403 -> 2401;
2404 -> 2401;
2405 -> 2402;
2405 -> 2401;
2406 -> 2401;
2407 -> 2405;
2407 -> 2406;
2408 -> 2403;
2408 -> 2406;
2409 -> 2406;
2410 -> 2408;
2410 -> 2409;
2411 -> 2409;
2412 -> 2411;
2412 -> 2410;
2412 -> 2409;
2413 -> 2409;
2414 -> 2410;
2414 -> 2413;
2415 -> 2414;
2415 -> 2396;
2415 -> 2412;
2415 -> 2413;
2416 -> 2415;
2416 -> 2409;
2417 -> 2416;
2417 -> 2406;
2418 -> 2406;
2419 -> 2408;
2419 -> 2418;
2420 -> 2415;
2420 -> 2406;
2421 -> 2420;
2422 -> 2417;
2422 -> 2421;
2422 -> 2420;
2423 -> 2422;
2424 -> 2401;
2425 -> 2404;
2425 -> 2401;
2426 -> 2404;
2426 -> 2401;
2427 -> 2404;
2427 -> 2401;
2428 -> 2404;
2428 -> 2401;
2429 -> 2404;
2429 -> 2401;
2430 -> 2404;
2430 -> 2401;
2431 -> 2404;
2431 -> 2401;
2432 -> 2404;
2432 -> 2401;
2433 -> 2404;
2433 -> 2415;
2433 -> 2401;
2434 -> 2433;
2434 -> 637;
2435 -> 637;
2436 -> 638;
2436 -> 637;
2437 -> 638;
2437 -> 637;
2438 -> 637;
2439 -> 2437;
2439 -> 2434;
2439 -> 637;
2440 -> 2438;
2440 -> 2439;
2440 -> 2434;
2440 -> 637;
2441 -> 637;
2442 -> 2438;
2442 -> 2440;
2442 -> 2441;
2442 -> 637;
2443 -> 2438;
2443 -> 2440;
2443 -> 2442;
2444 -> 2443;
2444 -> 2442;
2445 -> 2444;
2445 -> 2443;
2445 -> 0;
2446 -> 2445;
2447 -> 2444;
2447 -> 2443;
2447 -> 2445;
2448 -> 638;
2448 -> 637;
2449 -> 638;
2449 -> 637;
2450 -> 2448;
2450 -> 637;
2451 -> 2448;
2451 -> 2446;
2451 -> 637;
2452 -> 637;
2453 -> 2449;
2453 -> 2452;
2454 -> 2452;
2455 -> 2453;
2455 -> 2454;
2456 -> 2454;
2457 -> 2455;
2457 -> 2456;
2458 -> 2456;
2459 -> 2457;
2459 -> 2458;
2460 -> 2446;
2460 -> 2456;
2461 -> 2452;
2462 -> 2446;
2462 -> 637;
2463 -> 637;
2464 -> 2449;
2464 -> 2463;
2465 -> 638;
2465 -> 637;
2466 -> 638;
2466 -> 637;
2467 -> 638;
2467 -> 637;
2468 -> 638;
2468 -> 637;
2469 -> 637;
2470 -> 2468;
2470 -> 2446;
2470 -> 2469;
2471 -> 2469;
2472 -> 2471;
2473 -> 2472;
2474 -> 2470;
2474 -> 2472;
2475 -> 2469;
2476 -> 2470;
2476 -> 637;
2477 -> 2476;
2477 -> 2465;
2477 -> 2470;
2477 -> 637;
2478 -> 637;
2479 -> 2478;
2479 -> 637;
2480 -> 2467;
2480 -> 2479;
2480 -> 2446;
2480 -> 2478;
2480 -> 2470;
2480 -> 637;
2481 -> 637;
2482 -> 2478;
2482 -> 2480;
2482 -> 637;
2483 -> 2482;
2484 -> 2478;
2484 -> 2482;
2484 -> 637;
2485 -> 2483;
2485 -> 637;
2486 -> 638;
2486 -> 2485;
2486 -> 2484;
2486 -> 1;
2487 -> 2448;
2487 -> 2486;
2487 -> 637;
2488 -> 2486;
2488 -> 2456;
2489 -> 2486;
2489 -> 637;
2490 -> 2486;
2490 -> 2472;
2491 -> 2486;
2491 -> 637;
2492 -> 2491;
2492 -> 2465;
2492 -> 2486;
2492 -> 637;
2493 -> 638;
2493 -> 637;
2494 -> 638;
2494 -> 637;
2495 -> 637;
2496 -> 638;
2496 -> 2495;
2496 -> 2486;
2496 -> 1;
2497 -> 638;
2497 -> 637;
2498 -> 638;
2498 -> 637;
2499 -> 2498;
2499 -> 637;
2500 -> 2497;
2500 -> 637;
2501 -> 2498;
2501 -> 2496;
2501 -> 637;
2502 -> 2499;
2502 -> 2500;
2502 -> 2501;
2502 -> 2498;
2502 -> 2496;
2502 -> 637;
2503 -> 637;
2504 -> 2502;
2504 -> 0;
2504 -> 2503;
2505 -> 2503;
2506 -> 2502;
2507 -> 2502;
2507 -> 2503;
2508 -> 2503;
2509 -> 2508;
2510 -> 2502;
2510 -> 2508;
2511 -> 2503;
2512 -> 2503;
2513 -> 638;
2513 -> 637;
2514 -> 638;
2514 -> 637;
2515 -> 638;
2515 -> 637;
2516 -> 638;
2516 -> 637;
2517 -> 638;
2517 -> 637;
2518 -> 638;
2518 -> 637;
2519 -> 2513;
2519 -> 637;
2520 -> 2519;
2520 -> 2502;
2520 -> 637;
2521 -> 637;
2522 -> 2516;
2522 -> 2521;
2522 -> 637;
2523 -> 2513;
2523 -> 637;
2524 -> 2514;
2524 -> 637;
2525 -> 2515;
2525 -> 637;
2526 -> 2517;
2526 -> 637;
2527 -> 637;
2528 -> 2523;
2528 -> 2527;
2529 -> 2524;
2529 -> 2527;
2530 -> 2525;
2530 -> 2527;
2531 -> 2526;
2531 -> 2527;
2532 -> 2518;
2532 -> 2527;
2533 -> 2527;
2534 -> 2527;
2535 -> 2528;
2535 -> 2520;
2535 -> 2527;
2536 -> 2535;
2536 -> 2520;
2536 -> 2527;
2537 -> 2528;
2537 -> 2520;
2537 -> 2527;
2538 -> 2528;
2538 -> 2537;
2538 -> 2527;
2539 -> 2531;
2539 -> 2538;
2540 -> 2528;
2540 -> 2537;
2540 -> 2539;
2541 -> 2535;
2541 -> 2539;
2542 -> 2539;
2543 -> 2541;
2543 -> 2542;
2544 -> 2542;
2545 -> 2543;
2545 -> 2544;
2545 -> 2542;
2546 -> 2545;
2547 -> 2543;
2547 -> 2537;
2547 -> 2545;
2548 -> 2542;
2549 -> 2548;
2549 -> 2539;
2550 -> 2540;
2550 -> 2549;
2550 -> 2539;
2551 -> 2528;
2551 -> 2550;
2552 -> 2528;
2552 -> 2537;
2552 -> 2550;
2553 -> 2527;
2554 -> 2532;
2554 -> 2537;
2554 -> 2553;
2554 -> 2527;
2555 -> 2528;
2555 -> 2537;
2555 -> 2527;
2556 -> 637;
2557 -> 2516;
2557 -> 2556;
2557 -> 637;
2558 -> 2555;
2558 -> 2557;
2559 -> 638;
2559 -> 637;
2560 -> 638;
2560 -> 637;
2561 -> 638;
2561 -> 637;
2562 -> 638;
2562 -> 637;
2563 -> 637;
2564 -> 2561;
2564 -> 2563;
2564 -> 637;
2565 -> 2559;
2565 -> 2558;
2565 -> 637;
2566 -> 2559;
2566 -> 2565;
2567 -> 2560;
2567 -> 2565;
2568 -> 2561;
2568 -> 2565;
2569 -> 2565;
2570 -> 2565;
2571 -> 2566;
2571 -> 2570;
2572 -> 2567;
2572 -> 2570;
2573 -> 2568;
2573 -> 2570;
2574 -> 2569;
2574 -> 2570;
2575 -> 2569;
2575 -> 2570;
2576 -> 2562;
2576 -> 2570;
2577 -> 2571;
2577 -> 2558;
2577 -> 2570;
2578 -> 2570;
2579 -> 2573;
2579 -> 2578;
2579 -> 2570;
2580 -> 2571;
2580 -> 2577;
2580 -> 2570;
2581 -> 2571;
2581 -> 2577;
2581 -> 2580;
2582 -> 2571;
2582 -> 2577;
2582 -> 0;
2582 -> 2570;
2583 -> 2571;
2583 -> 2577;
2583 -> 2570;
2584 -> 2575;
2584 -> 2583;
2585 -> 2584;
2586 -> 2584;
2587 -> 2571;
2587 -> 2577;
2587 -> 2584;
2588 -> 2584;
2589 -> 2587;
2589 -> 2588;
2590 -> 2588;
2591 -> 2589;
2591 -> 2590;
2592 -> 2590;
2593 -> 2591;
2593 -> 2592;
2593 -> 2590;
2594 -> 2590;
2595 -> 2594;
2595 -> 2588;
2596 -> 2571;
2596 -> 2577;
2596 -> 2595;
2597 -> 2571;
2597 -> 2577;
2597 -> 2570;
2598 -> 2576;
2598 -> 2577;
2598 -> 2570;
2599 -> 2571;
2599 -> 2577;
2599 -> 2570;
2600 -> 638;
2600 -> 637;
2601 -> 638;
2601 -> 637;
2602 -> 638;
2602 -> 637;
2603 -> 638;
2603 -> 637;
2604 -> 638;
2604 -> 637;
2605 -> 638;
2605 -> 637;
2606 -> 637;
2607 -> 2602;
2607 -> 2606;
2607 -> 637;
2608 -> 2600;
2608 -> 2598;
2608 -> 637;
2609 -> 2600;
2609 -> 2598;
2609 -> 2608;
2610 -> 2600;
2610 -> 2598;
2610 -> 0;
2610 -> 637;
2611 -> 2600;
2611 -> 2598;
2611 -> 637;
2612 -> 2604;
2612 -> 2611;
2613 -> 2600;
2613 -> 2598;
2613 -> 637;
2614 -> 638;
2614 -> 637;
2615 -> 638;
2615 -> 637;
2616 -> 638;
2616 -> 637;
2617 -> 2616;
2617 -> 2598;
2617 -> 637;
2618 -> 2614;
2618 -> 637;
2619 -> 2617;
2619 -> 2618;
2619 -> 637;
2620 -> 637;
2621 -> 2614;
2621 -> 2620;
2621 -> 637;
2622 -> 637;
2623 -> 2614;
2623 -> 637;
2624 -> 2622;
2624 -> 637;
2625 -> 2616;
2625 -> 2598;
2625 -> 2623;
2625 -> 2624;
2625 -> 637;
2626 -> 2625;
2627 -> 2600;
2627 -> 2626;
2627 -> 637;
2628 -> 2600;
2628 -> 2626;
2628 -> 2627;
2629 -> 2600;
2629 -> 2626;
2629 -> 0;
2629 -> 637;
2630 -> 2600;
2630 -> 2626;
2630 -> 637;
2631 -> 2604;
2631 -> 2630;
2632 -> 2600;
2632 -> 2626;
2632 -> 637;
2633 -> 638;
2633 -> 637;
2634 -> 638;
2634 -> 637;
2635 -> 2633;
2635 -> 637;
2636 -> 637;
2637 -> 2635;
2637 -> 2636;
2637 -> 2626;
2637 -> 637;
2638 -> 2633;
2638 -> 637;
2639 -> 2638;
2639 -> 2626;
2639 -> 2637;
2639 -> 637;
2640 -> 637;
2641 -> 2639;
2641 -> 2640;
2642 -> 2641;
2642 -> 2639;
2642 -> 2640;
2643 -> 2641;
2643 -> 2639;
2643 -> 2642;
2644 -> 2643;
2644 -> 2642;
2645 -> 2642;
2646 -> 2644;
2646 -> 2645;
2647 -> 2646;
2647 -> 2639;
2647 -> 0;
2647 -> 2645;
2648 -> 2646;
2648 -> 2639;
2648 -> 2645;
2649 -> 2645;
2650 -> 2648;
2650 -> 2649;
2651 -> 2649;
2652 -> 2650;
2652 -> 2651;
2652 -> 2649;
2653 -> 2652;
2654 -> 2650;
2654 -> 2639;
2654 -> 2652;
2655 -> 2649;
2656 -> 2655;
2656 -> 2645;
2657 -> 2647;
2657 -> 2656;
2657 -> 2645;
2658 -> 2640;
2659 -> 2658;
2659 -> 637;
2660 -> 2639;
2660 -> 2659;
2660 -> 637;
2661 -> 2633;
2661 -> 637;
2662 -> 2660;
2662 -> 637;
2663 -> 637;
2664 -> 2662;
2664 -> 2663;
2665 -> 2664;
2665 -> 2662;
2665 -> 2663;
2666 -> 2664;
2666 -> 2662;
2666 -> 2665;
2667 -> 2666;
2667 -> 2665;
2668 -> 2665;
2669 -> 2667;
2669 -> 2668;
2670 -> 2669;
2670 -> 2662;
2670 -> 0;
2670 -> 2668;
2671 -> 2669;
2671 -> 2662;
2671 -> 2668;
2672 -> 2668;
2673 -> 2671;
2673 -> 2672;
2674 -> 2672;
2675 -> 2673;
2675 -> 2674;
2675 -> 2672;
2676 -> 2675;
2677 -> 2673;
2677 -> 2662;
2677 -> 2675;
2678 -> 2672;
2679 -> 2678;
2679 -> 2668;
2680 -> 2670;
2680 -> 2679;
2680 -> 2668;
2681 -> 2663;
2682 -> 2660;
2682 -> 637;
2683 -> 2633;
2683 -> 2682;
2684 -> 2682;
2685 -> 2683;
2685 -> 2684;
2685 -> 2626;
2685 -> 2662;
2685 -> 2682;
2686 -> 2560;
2686 -> 2685;
2687 -> 2561;
2687 -> 2685;
2688 -> 2686;
2688 -> 2685;
2689 -> 2687;
2689 -> 2685;
2690 -> 2685;
2691 -> 2685;
2692 -> 2685;
2693 -> 2689;
2693 -> 2692;
2693 -> 2685;
2694 -> 2685;
2695 -> 2685;
2695 -> 2694;
2696 -> 2685;
2696 -> 0;
2697 -> 2685;
2698 -> 2691;
2698 -> 2697;
2699 -> 2698;
2700 -> 2698;
2701 -> 2685;
2701 -> 2698;
2702 -> 2698;
2703 -> 2701;
2703 -> 2702;
2704 -> 2702;
2705 -> 2703;
2705 -> 2704;
2706 -> 2704;
2707 -> 2705;
2707 -> 2706;
2707 -> 2704;
2708 -> 2704;
2709 -> 2708;
2709 -> 2702;
2710 -> 2685;
2710 -> 2709;
2711 -> 2685;
2712 -> 638;
2712 -> 637;
2713 -> 638;
2713 -> 637;
2714 -> 638;
2714 -> 637;
2715 -> 2712;
2715 -> 2685;
2715 -> 637;
2716 -> 637;
2717 -> 2715;
2717 -> 2716;
2717 -> 637;
2718 -> 2713;
2718 -> 0;
2718 -> 2717;
2719 -> 2715;
2719 -> 2713;
2719 -> 2717;
2720 -> 2713;
2720 -> 0;
2720 -> 2719;
2721 -> 2560;
2721 -> 2719;
2722 -> 2561;
2722 -> 2719;
2723 -> 2721;
2723 -> 2719;
2724 -> 2722;
2724 -> 2719;
2725 -> 2719;
2726 -> 2719;
2727 -> 2719;
2728 -> 2724;
2728 -> 2727;
2728 -> 2719;
2729 -> 2719;
2730 -> 2719;
2730 -> 2729;
2731 -> 2719;
2731 -> 0;
2732 -> 2719;
2733 -> 2726;
2733 -> 2732;
2734 -> 2733;
2735 -> 2733;
2736 -> 2719;
2736 -> 2733;
2737 -> 2733;
2738 -> 2736;
2738 -> 2737;
2739 -> 2737;
2740 -> 2738;
2740 -> 2739;
2741 -> 2739;
2742 -> 2740;
2742 -> 2741;
2742 -> 2739;
2743 -> 2739;
2744 -> 2743;
2744 -> 2737;
2745 -> 2719;
2745 -> 2744;
2746 -> 2719;
2747 -> 2600;
2747 -> 2719;
2747 -> 637;
2748 -> 2600;
2748 -> 2719;
2748 -> 2747;
2749 -> 2600;
2749 -> 2719;
2749 -> 0;
2749 -> 637;
2750 -> 2600;
2750 -> 2719;
2750 -> 637;
2751 -> 2604;
2751 -> 2750;
2752 -> 2600;
2752 -> 2719;
2752 -> 637;
2753 -> 2616;
2753 -> 2719;
2753 -> 637;
2754 -> 2719;
2754 -> 2640;
2755 -> 2754;
2755 -> 2719;
2755 -> 2640;
2756 -> 2754;
2756 -> 2719;
2756 -> 2755;
2757 -> 2756;
2757 -> 2755;
2758 -> 2755;
2759 -> 2757;
2759 -> 2758;
2760 -> 2759;
2760 -> 2719;
2760 -> 0;
2760 -> 2758;
2761 -> 2759;
2761 -> 2719;
2761 -> 2758;
2762 -> 2758;
2763 -> 2761;
2763 -> 2762;
2764 -> 2762;
2765 -> 2763;
2765 -> 2764;
2765 -> 2762;
2766 -> 2765;
2767 -> 2763;
2767 -> 2719;
2767 -> 2765;
2768 -> 2762;
2769 -> 2768;
2769 -> 2758;
2770 -> 2760;
2770 -> 2769;
2770 -> 2758;
2771 -> 2719;
2771 -> 2663;
2772 -> 2771;
2772 -> 2719;
2772 -> 2663;
2773 -> 2771;
2773 -> 2719;
2773 -> 2772;
2774 -> 2773;
2774 -> 2772;
2775 -> 2772;
2776 -> 2774;
2776 -> 2775;
2777 -> 2776;
2777 -> 2719;
2777 -> 0;
2777 -> 2775;
2778 -> 2776;
2778 -> 2719;
2778 -> 2775;
2779 -> 2775;
2780 -> 2778;
2780 -> 2779;
2781 -> 2779;
2782 -> 2780;
2782 -> 2781;
2782 -> 2779;
2783 -> 2782;
2784 -> 2780;
2784 -> 2719;
2784 -> 2782;
2785 -> 2779;
2786 -> 2785;
2786 -> 2775;
2787 -> 2777;
2787 -> 2786;
2787 -> 2775;
2788 -> 2528;
2788 -> 2719;
2788 -> 2527;
2789 -> 2788;
2789 -> 2719;
2789 -> 2527;
2790 -> 2528;
2790 -> 2719;
2790 -> 2527;
2791 -> 2531;
2791 -> 2790;
2792 -> 2528;
2792 -> 2719;
2792 -> 2791;
2793 -> 2788;
2793 -> 2791;
2794 -> 2791;
2795 -> 2793;
2795 -> 2794;
2796 -> 2794;
2797 -> 2795;
2797 -> 2796;
2797 -> 2794;
2798 -> 2797;
2799 -> 2795;
2799 -> 2719;
2799 -> 2797;
2800 -> 2794;
2801 -> 2800;
2801 -> 2791;
2802 -> 2792;
2802 -> 2801;
2802 -> 2791;
2803 -> 2528;
2803 -> 2802;
2804 -> 2528;
2804 -> 2719;
2804 -> 2802;
2805 -> 2532;
2805 -> 2719;
2805 -> 2553;
2805 -> 2527;
2806 -> 2742;
2807 -> 2740;
2807 -> 2719;
2807 -> 2742;
2808 -> 638;
2808 -> 637;
2809 -> 2808;
2809 -> 2719;
2809 -> 637;
2810 -> 637;
2811 -> 2287;
2811 -> 2809;
2812 -> 2811;
2812 -> 2809;
2813 -> 2809;
2814 -> 2809;
2815 -> 2352;
2815 -> 2814;
2815 -> 637;
2816 -> 2354;
2816 -> 2815;
2816 -> 2814;
2816 -> 637;
2817 -> 638;
2817 -> 637;
2818 -> 2817;
2818 -> 637;
2819 -> 2818;
2819 -> 2817;
2819 -> 2814;
2819 -> 637;
2820 -> 637;
2821 -> 2382;
2821 -> 2819;
2821 -> 637;
2822 -> 2389;
2822 -> 2819;
2822 -> 637;
2823 -> 2822;
2823 -> 2392;
2824 -> 2398;
2824 -> 2819;
2824 -> 637;
2825 -> 2824;
2825 -> 2401;
2826 -> 2825;
2826 -> 2401;
2827 -> 2826;
2827 -> 2406;
2828 -> 2819;
2828 -> 2409;
2829 -> 2828;
2829 -> 2406;
2830 -> 2819;
2830 -> 2406;
2831 -> 2830;
2832 -> 2829;
2832 -> 2831;
2832 -> 2830;
2833 -> 2832;
2834 -> 2448;
2834 -> 2819;
2834 -> 637;
2835 -> 2819;
2835 -> 2456;
2836 -> 2819;
2836 -> 637;
2837 -> 2819;
2837 -> 2472;
2838 -> 2819;
2838 -> 637;
2839 -> 2838;
2839 -> 2465;
2839 -> 2819;
2839 -> 637;
2840 -> 2478;
2840 -> 2819;
2841 -> 2819;
2842 -> 2478;
2842 -> 2819;
2843 -> 2842;
2843 -> 2840;
2843 -> 2819;
2844 -> 2819;
2845 -> 2843;
2845 -> 2844;
2845 -> 2819;
2846 -> 2466;
2846 -> 2845;
2847 -> 2843;
2847 -> 2845;
2848 -> 2845;
2849 -> 2846;
2849 -> 2848;
2850 -> 2847;
2850 -> 2848;
2851 -> 2468;
2851 -> 2848;
2852 -> 2850;
2852 -> 2849;
2852 -> 2848;
2853 -> 2852;
2854 -> 2600;
2854 -> 2853;
2854 -> 637;
2855 -> 2600;
2855 -> 2853;
2855 -> 2854;
2856 -> 2600;
2856 -> 2853;
2856 -> 0;
2856 -> 637;
2857 -> 2600;
2857 -> 2853;
2857 -> 637;
2858 -> 2604;
2858 -> 2857;
2859 -> 2858;
2860 -> 2858;
2861 -> 2600;
2861 -> 2853;
2861 -> 2858;
2862 -> 2858;
2863 -> 2861;
2863 -> 2862;
2864 -> 2862;
2865 -> 2863;
2865 -> 2864;
2866 -> 2864;
2867 -> 2865;
2867 -> 2866;
2867 -> 2864;
2868 -> 2864;
2869 -> 2868;
2869 -> 2862;
2870 -> 2600;
2870 -> 2853;
2870 -> 2869;
2871 -> 2600;
2871 -> 2853;
2871 -> 637;
2872 -> 2616;
2872 -> 2853;
2872 -> 637;
2873 -> 2448;
2873 -> 2853;
2873 -> 637;
2874 -> 2853;
2874 -> 2456;
2875 -> 2853;
2875 -> 637;
2876 -> 2853;
2876 -> 2472;
2877 -> 2853;
2877 -> 637;
2878 -> 2877;
2878 -> 2465;
2878 -> 2853;
2878 -> 637;
2879 -> 2528;
2879 -> 2853;
2879 -> 2527;
2880 -> 2879;
2880 -> 2853;
2880 -> 2527;
2881 -> 2528;
2881 -> 2853;
2881 -> 2527;
2882 -> 2531;
2882 -> 2881;
2883 -> 2528;
2883 -> 2853;
2883 -> 2882;
2884 -> 2879;
2884 -> 2882;
2885 -> 2882;
2886 -> 2884;
2886 -> 2885;
2887 -> 2885;
2888 -> 2886;
2888 -> 2887;
2888 -> 2885;
2889 -> 2888;
2890 -> 2886;
2890 -> 2853;
2890 -> 2888;
2891 -> 2885;
2892 -> 2891;
2892 -> 2882;
2893 -> 2883;
2893 -> 2892;
2893 -> 2882;
2894 -> 2528;
2894 -> 2893;
2895 -> 2528;
2895 -> 2853;
2895 -> 2893;
2896 -> 2532;
2896 -> 2853;
2896 -> 2553;
2896 -> 2527;
2897 -> 2560;
2897 -> 2853;
2898 -> 2561;
2898 -> 2853;
2899 -> 2897;
2899 -> 2853;
2900 -> 2898;
2900 -> 2853;
2901 -> 2853;
2902 -> 2853;
2903 -> 2853;
2904 -> 2900;
2904 -> 2903;
2904 -> 2853;
2905 -> 2853;
2906 -> 2853;
2906 -> 2905;
2907 -> 2853;
2907 -> 0;
2908 -> 2853;
2909 -> 2902;
2909 -> 2908;
2910 -> 2909;
2911 -> 2909;
2912 -> 2853;
2912 -> 2909;
2913 -> 2909;
2914 -> 2912;
2914 -> 2913;
2915 -> 2913;
2916 -> 2914;
2916 -> 2915;
2917 -> 2915;
2918 -> 2916;
2918 -> 2917;
2918 -> 2915;
2919 -> 2915;
2920 -> 2919;
2920 -> 2913;
2921 -> 2853;
2921 -> 2920;
2922 -> 2853;
2923 -> 2713;
2923 -> 0;
2923 -> 2853;
2924 -> 638;
2924 -> 637;
2925 -> 638;
2925 -> 637;
2926 -> 2925;
2926 -> 2853;
2926 -> 637;
2927 -> 2925;
2927 -> 2853;
2927 -> 637;
2928 -> 2927;
2929 -> 2925;
2929 -> 2928;
2930 -> 2929;
2930 -> 2853;
2930 -> 2928;
2931 -> 2928;
2932 -> 2929;
2932 -> 2853;
2932 -> 2928;
2933 -> 2930;
2933 -> 2853;
2933 -> 2932;
2934 -> 2932;
2935 -> 2934;
2935 -> 2933;
2935 -> 2853;
2935 -> 2932;
2936 -> 2929;
2936 -> 2853;
2936 -> 2928;
2937 -> 2928;
2938 -> 2930;
2938 -> 2853;
2938 -> 2937;
2939 -> 2938;
2939 -> 2928;
2940 -> 2930;
2940 -> 2928;
2941 -> 2931;
2941 -> 2928;
2942 -> 2928;
2943 -> 2940;
2943 -> 2942;
2944 -> 2941;
2944 -> 2942;
2945 -> 2942;
2946 -> 2945;
2946 -> 2942;
2947 -> 2943;
2947 -> 2853;
2947 -> 2942;
2948 -> 2944;
2948 -> 2942;
2949 -> 2942;
2950 -> 2946;
2950 -> 2949;
2951 -> 2947;
2951 -> 2949;
2952 -> 2948;
2952 -> 2949;
2953 -> 2949;
2954 -> 2951;
2954 -> 2953;
2954 -> 2949;
2955 -> 2942;
2956 -> 2942;
2957 -> 2943;
2957 -> 2947;
2957 -> 2956;
2958 -> 2957;
2958 -> 2942;
2959 -> 2945;
2959 -> 2958;
2960 -> 2943;
2960 -> 2947;
2960 -> 2958;
2961 -> 2944;
2961 -> 2958;
2962 -> 2958;
2963 -> 2959;
2963 -> 2962;
2964 -> 2960;
2964 -> 2962;
2965 -> 2961;
2965 -> 2962;
2966 -> 2962;
2967 -> 2964;
2967 -> 2966;
2967 -> 2962;
2968 -> 2958;
2969 -> 2945;
2969 -> 2942;
2970 -> 2969;
2970 -> 2928;
2971 -> 2931;
2971 -> 2928;
2972 -> 2971;
2972 -> 2927;
2973 -> 2972;
2973 -> 2925;
2973 -> 2927;
2974 -> 2927;
2975 -> 2925;
2975 -> 2960;
2975 -> 2973;
2975 -> 2971;
2975 -> 2974;
2975 -> 2927;
2976 -> 2925;
2976 -> 2960;
2976 -> 2973;
2976 -> 637;
2977 -> 638;
2977 -> 637;
2978 -> 638;
2978 -> 637;
2979 -> 638;
2979 -> 637;
2980 -> 2979;
2980 -> 2976;
2980 -> 637;
2981 -> 2980;
2981 -> 2976;
2981 -> 637;
2982 -> 637;
2983 -> 2982;
2983 -> 2981;
2983 -> 637;
2984 -> 638;
2984 -> 637;
2985 -> 0;
2985 -> 637;
2986 -> 638;
2986 -> 2985;
2986 -> 2976;
2986 -> 0;
2986 -> 1;
2987 -> 2600;
2987 -> 2986;
2987 -> 637;
2988 -> 2600;
2988 -> 2986;
2988 -> 2987;
2989 -> 2600;
2989 -> 2986;
2989 -> 0;
2989 -> 637;
2990 -> 2600;
2990 -> 2986;
2990 -> 637;
2991 -> 2604;
2991 -> 2990;
2992 -> 2600;
2992 -> 2986;
2992 -> 637;
2993 -> 2616;
2993 -> 2986;
2993 -> 637;
2994 -> 2616;
2994 -> 2993;
2995 -> 2600;
2995 -> 2994;
2995 -> 637;
2996 -> 2600;
2996 -> 2994;
2996 -> 2995;
2997 -> 2600;
2997 -> 2994;
2997 -> 0;
2997 -> 637;
2998 -> 2600;
2998 -> 2994;
2998 -> 637;
2999 -> 2604;
2999 -> 2998;
3000 -> 2600;
3000 -> 2994;
3000 -> 637;
3001 -> 2560;
3001 -> 2994;
3002 -> 2561;
3002 -> 2994;
3003 -> 3001;
3003 -> 2994;
3004 -> 3002;
3004 -> 2994;
3005 -> 2994;
3006 -> 2994;
3007 -> 2994;
3008 -> 3004;
3008 -> 3007;
3008 -> 2994;
3009 -> 2994;
3010 -> 2994;
3010 -> 3009;
3011 -> 2994;
3011 -> 0;
3012 -> 2994;
3013 -> 3006;
3013 -> 3012;
3014 -> 3013;
3015 -> 3013;
3016 -> 2994;
3016 -> 3013;
3017 -> 3013;
3018 -> 3016;
3018 -> 3017;
3019 -> 3017;
3020 -> 3018;
3020 -> 3019;
3021 -> 3019;
3022 -> 3020;
3022 -> 3021;
3022 -> 3019;
3023 -> 3019;
3024 -> 3023;
3024 -> 3017;
3025 -> 2994;
3025 -> 3024;
3026 -> 2994;
3027 -> 2713;
3027 -> 0;
3027 -> 2994;
3028 -> 638;
3028 -> 637;
3029 -> 3028;
3029 -> 2994;
3029 -> 637;
3030 -> 638;
3030 -> 637;
3031 -> 3030;
3031 -> 3029;
3031 -> 637;
3032 -> 2925;
3032 -> 3031;
3032 -> 637;
3033 -> 638;
3033 -> 637;
3034 -> 3033;
3034 -> 3031;
3034 -> 637;
3035 -> 3033;
3035 -> 3031;
3035 -> 0;
3035 -> 3034;
3036 -> 0;
3036 -> 3035;
3037 -> 2560;
3037 -> 3036;
3038 -> 2561;
3038 -> 3036;
3039 -> 3037;
3039 -> 3036;
3040 -> 3038;
3040 -> 3036;
3041 -> 3036;
3042 -> 3036;
3043 -> 3036;
3044 -> 3040;
3044 -> 3043;
3044 -> 3036;
3045 -> 3036;
3046 -> 3036;
3046 -> 3045;
3047 -> 3036;
3047 -> 0;
3048 -> 3036;
3049 -> 3042;
3049 -> 3048;
3050 -> 3049;
3051 -> 3049;
3052 -> 3036;
3052 -> 3049;
3053 -> 3049;
3054 -> 3052;
3054 -> 3053;
3055 -> 3053;
3056 -> 3054;
3056 -> 3055;
3057 -> 3055;
3058 -> 3056;
3058 -> 3057;
3058 -> 3055;
3059 -> 3055;
3060 -> 3059;
3060 -> 3053;
3061 -> 3036;
3061 -> 3060;
3062 -> 3036;
3063 -> 2713;
3063 -> 0;
3063 -> 3036;
3064 -> 2600;
3064 -> 3036;
3064 -> 637;
3065 -> 2600;
3065 -> 3036;
3065 -> 3064;
3066 -> 2600;
3066 -> 3036;
3066 -> 0;
3066 -> 637;
3067 -> 2600;
3067 -> 3036;
3067 -> 637;
3068 -> 2604;
3068 -> 3067;
3069 -> 2600;
3069 -> 3036;
3069 -> 637;
3070 -> 0;
3070 -> 3036;
3071 -> 2560;
3071 -> 3070;
3072 -> 2561;
3072 -> 3070;
3073 -> 3071;
3073 -> 3070;
3074 -> 3072;
3074 -> 3070;
3075 -> 3070;
3076 -> 3070;
3077 -> 3070;
3078 -> 3074;
3078 -> 3077;
3078 -> 3070;
3079 -> 3070;
3080 -> 3070;
3080 -> 3079;
3081 -> 3070;
3081 -> 0;
3082 -> 3070;
3083 -> 3076;
3083 -> 3082;
3084 -> 3083;
3085 -> 3083;
3086 -> 3070;
3086 -> 3083;
3087 -> 3083;
3088 -> 3086;
3088 -> 3087;
3089 -> 3087;
3090 -> 3088;
3090 -> 3089;
3091 -> 3089;
3092 -> 3090;
3092 -> 3091;
3092 -> 3089;
3093 -> 3089;
3094 -> 3093;
3094 -> 3087;
3095 -> 3070;
3095 -> 3094;
3096 -> 3070;
3097 -> 2713;
3097 -> 0;
3097 -> 3070;
3098 -> 638;
3098 -> 637;
3099 -> 3098;
3099 -> 3070;
3099 -> 637;
3100 -> 2560;
3100 -> 3099;
3101 -> 2561;
3101 -> 3099;
3102 -> 3100;
3102 -> 3099;
3103 -> 3101;
3103 -> 3099;
3104 -> 3099;
3105 -> 3099;
3106 -> 3099;
3107 -> 3103;
3107 -> 3106;
3107 -> 3099;
3108 -> 3099;
3109 -> 3099;
3109 -> 3108;
3110 -> 3099;
3110 -> 0;
3111 -> 3099;
3112 -> 3105;
3112 -> 3111;
3113 -> 3112;
3114 -> 3112;
3115 -> 3099;
3115 -> 3112;
3116 -> 3112;
3117 -> 3115;
3117 -> 3116;
3118 -> 3116;
3119 -> 3117;
3119 -> 3118;
3120 -> 3118;
3121 -> 3119;
3121 -> 3120;
3121 -> 3118;
3122 -> 3118;
3123 -> 3122;
3123 -> 3116;
3124 -> 3099;
3124 -> 3123;
3125 -> 3099;
3126 -> 2713;
3126 -> 0;
3126 -> 3099;
3127 -> 2600;
3127 -> 3099;
3127 -> 637;
3128 -> 2600;
3128 -> 3099;
3128 -> 3127;
3129 -> 2600;
3129 -> 3099;
3129 -> 0;
3129 -> 637;
3130 -> 2600;
3130 -> 3099;
3130 -> 637;
3131 -> 2604;
3131 -> 3130;
3132 -> 3131;
3133 -> 3131;
3134 -> 2600;
3134 -> 3099;
3134 -> 3131;
3135 -> 3131;
3136 -> 3134;
3136 -> 3135;
3137 -> 3135;
3138 -> 3136;
3138 -> 3137;
3139 -> 3137;
3140 -> 3138;
3140 -> 3139;
3140 -> 3137;
3141 -> 3137;
3142 -> 3141;
3142 -> 3135;
3143 -> 2600;
3143 -> 3099;
3143 -> 3142;
3144 -> 2600;
3144 -> 3099;
3144 -> 637;
3145 -> 3099;
3145 -> 0;
3145 -> 2503;
3146 -> 3099;
3147 -> 3099;
3147 -> 2503;
3148 -> 2528;
3148 -> 3099;
3148 -> 2527;
3149 -> 3148;
3149 -> 3099;
3149 -> 2527;
3150 -> 2528;
3150 -> 3099;
3150 -> 2527;
3151 -> 2531;
3151 -> 3150;
3152 -> 2528;
3152 -> 3099;
3152 -> 3151;
3153 -> 3148;
3153 -> 3151;
3154 -> 3151;
3155 -> 3153;
3155 -> 3154;
3156 -> 3154;
3157 -> 3155;
3157 -> 3156;
3157 -> 3154;
3158 -> 3157;
3159 -> 3155;
3159 -> 3099;
3159 -> 3157;
3160 -> 3154;
3161 -> 3160;
3161 -> 3151;
3162 -> 3152;
3162 -> 3161;
3162 -> 3151;
3163 -> 2528;
3163 -> 3162;
3164 -> 2528;
3164 -> 3099;
3164 -> 3162;
3165 -> 2532;
3165 -> 3099;
3165 -> 2553;
3165 -> 2527;
3166 -> 3099;
3166 -> 2640;
3167 -> 3166;
3167 -> 3099;
3167 -> 2640;
3168 -> 3166;
3168 -> 3099;
3168 -> 3167;
3169 -> 3168;
3169 -> 3167;
3170 -> 3167;
3171 -> 3169;
3171 -> 3170;
3172 -> 3171;
3172 -> 3099;
3172 -> 0;
3172 -> 3170;
3173 -> 3171;
3173 -> 3099;
3173 -> 3170;
3174 -> 3170;
3175 -> 3173;
3175 -> 3174;
3176 -> 3174;
3177 -> 3175;
3177 -> 3176;
3177 -> 3174;
3178 -> 3177;
3179 -> 3175;
3179 -> 3099;
3179 -> 3177;
3180 -> 3174;
3181 -> 3180;
3181 -> 3170;
3182 -> 3172;
3182 -> 3181;
3182 -> 3170;
3183 -> 3099;
3183 -> 2663;
3184 -> 3183;
3184 -> 3099;
3184 -> 2663;
3185 -> 3183;
3185 -> 3099;
3185 -> 3184;
3186 -> 3185;
3186 -> 3184;
3187 -> 3184;
3188 -> 3186;
3188 -> 3187;
3189 -> 3188;
3189 -> 3099;
3189 -> 0;
3189 -> 3187;
3190 -> 3188;
3190 -> 3099;
3190 -> 3187;
3191 -> 3187;
3192 -> 3190;
3192 -> 3191;
3193 -> 3191;
3194 -> 3192;
3194 -> 3193;
3194 -> 3191;
3195 -> 3194;
3196 -> 3192;
3196 -> 3099;
3196 -> 3194;
3197 -> 3191;
3198 -> 3197;
3198 -> 3187;
3199 -> 3189;
3199 -> 3198;
3199 -> 3187;
3200 -> 0;
3200 -> 3126;
3201 -> 3200;
3201 -> 2714;
3201 -> 3099;
3201 -> 3126;
3202 -> 3126;
3203 -> 3201;
3203 -> 3202;
3204 -> 2528;
3204 -> 3201;
3204 -> 2527;
3205 -> 3204;
3205 -> 3201;
3205 -> 2527;
3206 -> 2528;
3206 -> 3201;
3206 -> 2527;
3207 -> 2531;
3207 -> 3206;
3208 -> 2528;
3208 -> 3201;
3208 -> 3207;
3209 -> 3204;
3209 -> 3207;
3210 -> 3207;
3211 -> 3209;
3211 -> 3210;
3212 -> 3210;
3213 -> 3211;
3213 -> 3212;
3213 -> 3210;
3214 -> 3213;
3215 -> 3211;
3215 -> 3201;
3215 -> 3213;
3216 -> 3210;
3217 -> 3216;
3217 -> 3207;
3218 -> 3208;
3218 -> 3217;
3218 -> 3207;
3219 -> 2528;
3219 -> 3218;
3220 -> 2528;
3220 -> 3201;
3220 -> 3218;
3221 -> 2532;
3221 -> 3201;
3221 -> 2553;
3221 -> 2527;
3222 -> 2600;
3222 -> 3201;
3222 -> 637;
3223 -> 2600;
3223 -> 3201;
3223 -> 3222;
3224 -> 2600;
3224 -> 3201;
3224 -> 0;
3224 -> 637;
3225 -> 2600;
3225 -> 3201;
3225 -> 637;
3226 -> 2604;
3226 -> 3225;
3227 -> 2600;
3227 -> 3201;
3227 -> 637;
3228 -> 2560;
3228 -> 3201;
3229 -> 2561;
3229 -> 3201;
3230 -> 3228;
3230 -> 3201;
3231 -> 3229;
3231 -> 3201;
3232 -> 3201;
3233 -> 3201;
3234 -> 3201;
3235 -> 3231;
3235 -> 3234;
3235 -> 3201;
3236 -> 3201;
3237 -> 3201;
3237 -> 3236;
3238 -> 3201;
3238 -> 0;
3239 -> 3201;
3240 -> 3233;
3240 -> 3239;
3241 -> 3240;
3242 -> 3240;
3243 -> 3201;
3243 -> 3240;
3244 -> 3240;
3245 -> 3243;
3245 -> 3244;
3246 -> 3244;
3247 -> 3245;
3247 -> 3246;
3248 -> 3246;
3249 -> 3247;
3249 -> 3248;
3249 -> 3246;
3250 -> 3246;
3251 -> 3250;
3251 -> 3244;
3252 -> 3201;
3252 -> 3251;
3253 -> 3201;
3254 -> 3201;
3254 -> 2640;
3255 -> 3254;
3255 -> 3201;
3255 -> 2640;
3256 -> 3254;
3256 -> 3201;
3256 -> 3255;
3257 -> 3256;
3257 -> 3255;
3258 -> 3255;
3259 -> 3257;
3259 -> 3258;
3260 -> 3259;
3260 -> 3201;
3260 -> 0;
3260 -> 3258;
3261 -> 3259;
3261 -> 3201;
3261 -> 3258;
3262 -> 3258;
3263 -> 3261;
3263 -> 3262;
3264 -> 3262;
3265 -> 3263;
3265 -> 3264;
3265 -> 3262;
3266 -> 3265;
3267 -> 3263;
3267 -> 3201;
3267 -> 3265;
3268 -> 3262;
3269 -> 3268;
3269 -> 3258;
3270 -> 3260;
3270 -> 3269;
3270 -> 3258;
3271 -> 3201;
3271 -> 2663;
3272 -> 3271;
3272 -> 3201;
3272 -> 2663;
3273 -> 3271;
3273 -> 3201;
3273 -> 3272;
3274 -> 3273;
3274 -> 3272;
3275 -> 3272;
3276 -> 3274;
3276 -> 3275;
3277 -> 3276;
3277 -> 3201;
3277 -> 0;
3277 -> 3275;
3278 -> 3276;
3278 -> 3201;
3278 -> 3275;
3279 -> 3275;
3280 -> 3278;
3280 -> 3279;
3281 -> 3279;
3282 -> 3280;
3282 -> 3281;
3282 -> 3279;
3283 -> 3282;
3284 -> 3280;
3284 -> 3201;
3284 -> 3282;
3285 -> 3279;
3286 -> 3285;
3286 -> 3275;
3287 -> 3277;
3287 -> 3286;
3287 -> 3275;
3288 -> 3249;
3289 -> 3247;
3289 -> 3201;
3289 -> 3249;
3290 -> 2448;
3290 -> 3201;
3290 -> 637;
3291 -> 3201;
3291 -> 2456;
3292 -> 3201;
3292 -> 637;
3293 -> 3201;
3293 -> 2472;
3294 -> 3201;
3294 -> 637;
3295 -> 3294;
3295 -> 2465;
3295 -> 3201;
3295 -> 637;
3296 -> 2468;
3296 -> 3201;
3297 -> 2287;
3297 -> 3201;
3298 -> 3297;
3298 -> 3201;
3299 -> 3201;
3300 -> 2352;
3300 -> 3201;
3300 -> 637;
3301 -> 2354;
3301 -> 3300;
3301 -> 3201;
3301 -> 637;
3302 -> 2359;
3302 -> 3201;
3302 -> 637;
3303 -> 2358;
3303 -> 637;
3304 -> 637;
3305 -> 3302;
3305 -> 3304;
3306 -> 3303;
3306 -> 3304;
3307 -> 2359;
3307 -> 3304;
3308 -> 3305;
3308 -> 3201;
3309 -> 3305;
3310 -> 3309;
3310 -> 3308;
3310 -> 3201;
3310 -> 3305;
3311 -> 3306;
3311 -> 3201;
3311 -> 3305;
3312 -> 2382;
3312 -> 3305;
3312 -> 637;
3313 -> 3312;
3314 -> 2389;
3314 -> 3313;
3314 -> 637;
3315 -> 3314;
3315 -> 2392;
3316 -> 2398;
3316 -> 3313;
3316 -> 637;
3317 -> 3316;
3317 -> 2401;
3318 -> 3317;
3318 -> 2401;
3319 -> 3318;
3319 -> 2406;
3320 -> 3313;
3320 -> 2409;
3321 -> 3320;
3321 -> 2406;
3322 -> 3313;
3322 -> 2406;
3323 -> 3322;
3324 -> 3321;
3324 -> 3323;
3324 -> 3322;
3325 -> 3324;
3326 -> 638;
3326 -> 637;
3327 -> 637;
3328 -> 3326;
3328 -> 3327;
3329 -> 3327;
3330 -> 3328;
3330 -> 3329;
3331 -> 3313;
3331 -> 3327;
3332 -> 638;
3332 -> 637;
3333 -> 638;
3333 -> 637;
3334 -> 637;
3335 -> 3333;
3335 -> 3334;
3336 -> 637;
3337 -> 638;
3337 -> 637;
3338 -> 2448;
3338 -> 3313;
3338 -> 637;
3339 -> 3313;
3339 -> 2456;
3340 -> 3313;
3340 -> 637;
3341 -> 3313;
3341 -> 2472;
3342 -> 3313;
3342 -> 637;
3343 -> 3342;
3343 -> 2465;
3343 -> 3313;
3343 -> 637;
3344 -> 3313;
3344 -> 0;
3344 -> 2503;
3345 -> 3313;
3346 -> 3313;
3346 -> 2503;
3347 -> 3313;
3347 -> 2508;
3348 -> 2528;
3348 -> 3313;
3348 -> 2527;
3349 -> 3348;
3349 -> 3313;
3349 -> 2527;
3350 -> 2528;
3350 -> 3313;
3350 -> 2527;
3351 -> 2531;
3351 -> 3350;
3352 -> 2528;
3352 -> 3313;
3352 -> 3351;
3353 -> 3348;
3353 -> 3351;
3354 -> 3351;
3355 -> 3353;
3355 -> 3354;
3356 -> 3354;
3357 -> 3355;
3357 -> 3356;
3357 -> 3354;
3358 -> 3357;
3359 -> 3355;
3359 -> 3313;
3359 -> 3357;
3360 -> 3354;
3361 -> 3360;
3361 -> 3351;
3362 -> 3352;
3362 -> 3361;
3362 -> 3351;
3363 -> 2528;
3363 -> 3362;
3364 -> 2528;
3364 -> 3313;
3364 -> 3362;
3365 -> 2532;
3365 -> 3313;
3365 -> 2553;
3365 -> 2527;
3366 -> 2560;
3366 -> 3313;
3367 -> 2561;
3367 -> 3313;
3368 -> 3366;
3368 -> 3313;
3369 -> 3367;
3369 -> 3313;
3370 -> 3313;
3371 -> 3313;
3372 -> 3313;
3373 -> 3369;
3373 -> 3372;
3373 -> 3313;
3374 -> 3313;
3375 -> 3313;
3375 -> 3374;
3376 -> 3313;
3376 -> 0;
3377 -> 3313;
3378 -> 3371;
3378 -> 3377;
3379 -> 3378;
3380 -> 3378;
3381 -> 3313;
3381 -> 3378;
3382 -> 3378;
3383 -> 3381;
3383 -> 3382;
3384 -> 3382;
3385 -> 3383;
3385 -> 3384;
3386 -> 3384;
3387 -> 3385;
3387 -> 3386;
3387 -> 3384;
3388 -> 3384;
3389 -> 3388;
3389 -> 3382;
3390 -> 3313;
3390 -> 3389;
3391 -> 3313;
3392 -> 2600;
3392 -> 3313;
3392 -> 637;
3393 -> 2600;
3393 -> 3313;
3393 -> 3392;
3394 -> 2600;
3394 -> 3313;
3394 -> 0;
3394 -> 637;
3395 -> 2600;
3395 -> 3313;
3395 -> 637;
3396 -> 2604;
3396 -> 3395;
3397 -> 2600;
3397 -> 3313;
3397 -> 637;
3398 -> 3313;
3398 -> 2640;
3399 -> 3398;
3399 -> 3313;
3399 -> 2640;
3400 -> 3398;
3400 -> 3313;
3400 -> 3399;
3401 -> 3400;
3401 -> 3399;
3402 -> 3399;
3403 -> 3401;
3403 -> 3402;
3404 -> 3403;
3404 -> 3313;
3404 -> 0;
3404 -> 3402;
3405 -> 3403;
3405 -> 3313;
3405 -> 3402;
3406 -> 3402;
3407 -> 3405;
3407 -> 3406;
3408 -> 3406;
3409 -> 3407;
3409 -> 3408;
3409 -> 3406;
3410 -> 3409;
3411 -> 3407;
3411 -> 3313;
3411 -> 3409;
3412 -> 3406;
3413 -> 3412;
3413 -> 3402;
3414 -> 3404;
3414 -> 3413;
3414 -> 3402;
3415 -> 3313;
3415 -> 2663;
3416 -> 3415;
3416 -> 3313;
3416 -> 2663;
3417 -> 3415;
3417 -> 3313;
3417 -> 3416;
3418 -> 3417;
3418 -> 3416;
3419 -> 3416;
3420 -> 3418;
3420 -> 3419;
3421 -> 3420;
3421 -> 3313;
3421 -> 0;
3421 -> 3419;
3422 -> 3420;
3422 -> 3313;
3422 -> 3419;
3423 -> 3419;
3424 -> 3422;
3424 -> 3423;
3425 -> 3423;
3426 -> 3424;
3426 -> 3425;
3426 -> 3423;
3427 -> 3426;
3428 -> 3424;
3428 -> 3313;
3428 -> 3426;
3429 -> 3423;
3430 -> 3429;
3430 -> 3419;
3431 -> 3421;
3431 -> 3430;
3431 -> 3419;
3432 -> 3387;
3433 -> 3385;
3433 -> 3313;
3433 -> 3387;
3434 -> 2287;
3434 -> 3313;
3435 -> 3434;
3435 -> 3313;
3436 -> 3313;
3437 -> 2352;
3437 -> 3313;
3437 -> 637;
3438 -> 2354;
3438 -> 3437;
3438 -> 3313;
3438 -> 637;
3439 -> 2468;
3439 -> 3313;
3440 -> 3396;
3441 -> 3396;
3442 -> 2600;
3442 -> 3313;
3442 -> 3396;
3443 -> 3396;
3444 -> 3442;
3444 -> 3443;
3445 -> 3443;
3446 -> 3444;
3446 -> 3445;
3447 -> 3445;
3448 -> 3446;
3448 -> 3447;
3448 -> 3445;
3449 -> 3445;
3450 -> 3449;
3450 -> 3443;
3451 -> 2600;
3451 -> 3313;
3451 -> 3450;
3452 -> 2925;
3452 -> 3313;
3452 -> 637;
3453 -> 3313;
3453 -> 2282;
3454 -> 3313;
3454 -> 1;
3455 -> 3313;
3455 -> 1;
3456 -> 1;
3457 -> 3455;
3457 -> 3456;
3458 -> 3455;
3458 -> 3456;
3459 -> 3457;
3459 -> 3456;
3460 -> 3458;
3460 -> 3456;
3461 -> 3456;
3462 -> 3459;
3462 -> 3461;
3463 -> 3460;
3463 -> 3461;
3464 -> 3462;
3464 -> 3461;
3465 -> 3463;
3465 -> 3461;
3466 -> 3461;
3467 -> 3461;
3468 -> 3464;
3468 -> 3467;
3469 -> 3465;
3469 -> 3467;
3470 -> 3466;
3470 -> 3467;
3471 -> 3467;
3472 -> 3469;
3472 -> 3471;
3472 -> 3467;
3473 -> 3469;
3473 -> 3467;
3474 -> 3469;
3474 -> 3467;
3475 -> 3468;
3475 -> 3467;
3476 -> 3470;
3476 -> 3473;
3476 -> 3474;
3476 -> 3467;
3477 -> 3475;
3477 -> 3476;
3477 -> 3467;
3478 -> 3469;
3478 -> 3467;
3479 -> 3478;
3479 -> 3477;
3479 -> 3467;
3480 -> 3467;
3481 -> 3477;
3481 -> 3480;
3481 -> 3467;
3482 -> 3467;
3484 -> 3483;
3486 -> 3485;
3487 -> 3469;
3487 -> 3467;
3488 -> 3468;
3488 -> 3467;
3489 -> 3467;
3490 -> 3487;
3490 -> 3489;
3491 -> 3488;
3491 -> 3489;
3492 -> 3489;
3493 -> 3489;
3494 -> 3491;
3494 -> 3489;
3495 -> 3494;
3495 -> 3477;
3495 -> 3489;
3496 -> 3495;
3496 -> 3489;
3497 -> 3493;
3497 -> 3496;
3498 -> 3497;
3498 -> 3492;
3498 -> 3489;
3499 -> 3497;
3499 -> 3492;
3499 -> 3489;
3500 -> 3499;
3500 -> 3489;
3501 -> 3490;
3501 -> 3489;
3502 -> 3501;
3502 -> 3477;
3502 -> 3489;
3503 -> 3490;
3503 -> 3489;
3504 -> 3503;
3504 -> 3477;
3504 -> 3489;
3505 -> 3490;
3505 -> 3489;
3506 -> 3489;
3507 -> 3505;
3507 -> 3506;
3509 -> 3508;
3510 -> 3508;
3511 -> 3510;
3511 -> 3506;
3512 -> 3506;
3513 -> 3507;
3513 -> 3506;
3514 -> 3513;
3514 -> 3477;
3514 -> 3506;
3515 -> 3506;
3516 -> 3515;
3516 -> 3489;
3517 -> 3491;
3517 -> 3516;
3518 -> 3516;
3519 -> 3517;
3519 -> 3518;
3520 -> 3519;
3520 -> 3518;
3521 -> 3518;
3522 -> 3510;
3522 -> 3518;
3523 -> 3520;
3523 -> 3521;
3523 -> 3522;
3523 -> 3477;
3523 -> 3518;
3524 -> 3489;
3525 -> 3524;
3525 -> 3489;
3526 -> 3489;
3527 -> 3489;
3528 -> 3524;
3528 -> 3527;
3528 -> 3525;
3528 -> 3489;
3529 -> 3489;
3530 -> 3490;
3530 -> 3489;
3531 -> 3530;
3531 -> 3523;
3531 -> 3489;
3532 -> 3524;
3532 -> 3489;
3533 -> 3529;
3533 -> 3489;
3534 -> 3489;
3535 -> 3532;
3535 -> 3534;
3536 -> 3533;
3536 -> 3534;
3537 -> 3536;
3537 -> 3529;
3537 -> 3534;
3538 -> 3534;
3539 -> 3538;
3539 -> 3537;
3539 -> 3534;
3540 -> 3489;
3541 -> 3489;
3542 -> 3524;
3542 -> 3541;
3542 -> 3528;
3542 -> 3489;
3543 -> 3489;
3544 -> 3523;
3544 -> 3489;
3545 -> 3489;
3546 -> 3544;
3546 -> 3489;
3547 -> 3489;
3548 -> 3545;
3548 -> 3547;
3548 -> 3489;
3549 -> 3489;
3550 -> 3524;
3550 -> 3549;
3550 -> 3542;
3550 -> 3489;
3551 -> 3529;
3551 -> 3489;
3552 -> 3543;
3552 -> 3489;
3556 -> 3554;
3556 -> 3553;
3557 -> 3555;
3557 -> 3553;
3558 -> 3553;
3559 -> 0;
3559 -> 3489;
3560 -> 3489;
3561 -> 3489;
3562 -> 3551;
3562 -> 3561;
3563 -> 3552;
3563 -> 3561;
3564 -> 3559;
3564 -> 3561;
3565 -> 3560;
3565 -> 3561;
3566 -> 3560;
3566 -> 3561;
3567 -> 3561;
3568 -> 3565;
3568 -> 3567;
3568 -> 3561;
3569 -> 3568;
3569 -> 3561;
3570 -> 0;
3572 -> 3570;
3572 -> 3571;
3573 -> 3571;
3575 -> 3574;
3577 -> 3576;
3579 -> 3578;
3580 -> 3573;
3581 -> 3573;
3581 -> 3571;
3582 -> 3572;
3582 -> 3573;
3582 -> 3571;
3583 -> 3571;
3584 -> 3561;
3585 -> 3584;
3585 -> 3566;
3585 -> 3561;
3586 -> 3562;
3586 -> 3561;
3587 -> 3563;
3587 -> 3561;
3588 -> 3564;
3588 -> 3561;
3589 -> 3586;
3589 -> 3561;
3590 -> 3587;
3590 -> 3561;
3591 -> 3585;
3591 -> 3561;
3592 -> 3561;
3593 -> 3589;
3593 -> 3592;
3594 -> 3590;
3594 -> 3592;
3595 -> 3591;
3595 -> 3592;
3596 -> 3569;
3596 -> 3592;
3597 -> 3593;
3597 -> 3592;
3598 -> 3593;
3598 -> 3586;
3598 -> 3592;
3599 -> 3594;
3599 -> 3592;
3600 -> 3594;
3600 -> 3587;
3600 -> 3592;
3601 -> 3592;
3602 -> 3597;
3602 -> 3601;
3603 -> 3598;
3603 -> 3601;
3604 -> 3599;
3604 -> 3601;
3605 -> 3600;
3605 -> 3601;
3606 -> 3596;
3606 -> 3601;
3607 -> 3602;
3607 -> 3601;
3608 -> 3603;
3608 -> 3601;
3609 -> 3604;
3609 -> 3601;
3610 -> 3605;
3610 -> 3601;
3611 -> 3601;
3612 -> 3607;
3612 -> 3611;
3613 -> 3608;
3613 -> 3611;
3614 -> 3609;
3614 -> 3611;
3615 -> 3610;
3615 -> 3611;
3616 -> 3606;
3616 -> 3611;
3617 -> 3611;
3618 -> 3613;
3618 -> 3617;
3618 -> 3611;
3619 -> 3611;
3620 -> 3615;
3620 -> 3619;
3620 -> 3611;
3621 -> 3618;
3621 -> 3620;
3621 -> 3611;
3622 -> 3611;
3623 -> 3622;
3623 -> 3621;
3623 -> 3611;
3624 -> 3611;
3625 -> 3624;
3625 -> 3613;
3625 -> 3611;
3626 -> 3611;
3627 -> 3626;
3627 -> 3615;
3627 -> 3611;
3628 -> 3611;
3629 -> 3628;
3629 -> 3613;
3629 -> 3611;
3630 -> 3621;
3630 -> 3611;
3631 -> 3603;
3631 -> 3601;
3632 -> 3605;
3632 -> 3601;
3633 -> 3601;
3634 -> 3631;
3634 -> 3633;
3634 -> 3601;
3635 -> 3601;
3636 -> 3631;
3636 -> 3635;
3636 -> 3601;
3637 -> 3601;
3638 -> 3632;
3638 -> 3637;
3638 -> 3601;
3639 -> 3601;
3640 -> 3639;
3640 -> 3592;
3641 -> 3592;
3642 -> 3641;
3642 -> 3561;
3643 -> 3588;
3643 -> 3642;
3643 -> 3561;
3644 -> 3524;
3644 -> 3643;
3644 -> 3550;
3644 -> 3489;
3645 -> 3543;
3645 -> 3489;
3646 -> 3529;
3646 -> 3489;
3647 -> 3524;
3647 -> 3644;
3647 -> 3489;
3648 -> 3647;
3648 -> 3467;
3649 -> 3456;
3650 -> 1;
3651 -> 633;
3651 -> 1;
3652 -> 1;
3653 -> 3652;
3653 -> 1;
3654 -> 1;
3655 -> 3651;
3655 -> 3654;
3656 -> 3652;
3656 -> 3654;
3657 -> 3652;
3657 -> 3654;
3658 -> 3654;
3659 -> 3658;
3659 -> 3655;
3659 -> 3654;
3660 -> 3655;
3660 -> 3546;
3660 -> 3659;
3660 -> 3654;
3661 -> 3654;
3662 -> 3654;
3663 -> 3654;
3664 -> 3663;
3665 -> 3664;
3665 -> 3654;
3666 -> 3665;
3666 -> 3662;
3666 -> 3654;
3667 -> 3660;
3667 -> 3662;
3667 -> 3654;
3668 -> 0;
3668 -> 3654;
3669 -> 3662;
3669 -> 3668;
3669 -> 3666;
3669 -> 3667;
3669 -> 3660;
3669 -> 3654;
3670 -> 3662;
3671 -> 3670;
3672 -> 3669;
3672 -> 3662;
3673 -> 3669;
3673 -> 3662;
3674 -> 3672;
3674 -> 3662;
3675 -> 3662;
3676 -> 3675;
3676 -> 3662;
3677 -> 3662;
3678 -> 3674;
3678 -> 3677;
3679 -> 3676;
3679 -> 3677;
3680 -> 3677;
3681 -> 3669;
3682 -> 3669;
3683 -> 3681;
3683 -> 3669;
3684 -> 3669;
3685 -> 3682;
3685 -> 3669;
3685 -> 3683;
3685 -> 3684;
3685 -> 3681;
3686 -> 3669;
3687 -> 3686;
3687 -> 3681;
3687 -> 3669;
3688 -> 3681;
3688 -> 3669;
3689 -> 3669;
3690 -> 3688;
3690 -> 3689;
3690 -> 3681;
3690 -> 3687;
3690 -> 3669;
3691 -> 3677;
3692 -> 0;
3692 -> 3677;
3693 -> 3679;
3693 -> 3677;
3694 -> 3669;
3694 -> 3677;
3695 -> 3677;
3696 -> 3694;
3696 -> 3695;
3697 -> 0;
3697 -> 3695;
3698 -> 3697;
3699 -> 3677;
3700 -> 3677;
3701 -> 3700;
3702 -> 3700;
3703 -> 3700;
3704 -> 3702;
3704 -> 3703;
3705 -> 3702;
3705 -> 3703;
3706 -> 3702;
3706 -> 3703;
3707 -> 3702;
3707 -> 3703;
3708 -> 3703;
3709 -> 3669;
3709 -> 3708;
3709 -> 3703;
3710 -> 3707;
3710 -> 3703;
3711 -> 3704;
3711 -> 3703;
3712 -> 3705;
3712 -> 3703;
3713 -> 3706;
3713 -> 3703;
3714 -> 3707;
3714 -> 3703;
3715 -> 3703;
3716 -> 0;
3716 -> 3703;
3717 -> 3703;
3718 -> 3716;
3718 -> 3717;
3719 -> 3716;
3719 -> 3717;
3720 -> 3714;
3720 -> 3717;
3721 -> 3715;
3721 -> 3717;
3722 -> 3715;
3722 -> 3717;
3723 -> 3718;
3723 -> 3717;
3724 -> 3719;
3724 -> 3717;
3725 -> 3720;
3725 -> 3717;
3726 -> 3717;
3727 -> 3726;
3727 -> 3717;
3728 -> 3721;
3728 -> 3726;
3728 -> 3717;
3729 -> 3703;
3730 -> 3711;
3730 -> 3729;
3731 -> 3712;
3731 -> 3729;
3732 -> 3713;
3732 -> 3729;
3733 -> 3714;
3733 -> 3729;
3734 -> 3715;
3734 -> 3729;
3735 -> 3715;
3735 -> 3729;
3736 -> 3715;
3736 -> 3729;
3737 -> 3715;
3737 -> 3729;
3738 -> 3715;
3738 -> 3729;
3739 -> 3715;
3739 -> 3729;
3740 -> 3730;
3740 -> 3729;
3741 -> 3731;
3741 -> 3729;
3742 -> 3732;
3742 -> 3729;
3743 -> 3733;
3743 -> 3729;
3744 -> 3734;
3744 -> 3729;
3745 -> 3735;
3745 -> 3729;
3746 -> 3736;
3746 -> 3729;
3747 -> 3737;
3747 -> 3729;
3748 -> 3738;
3748 -> 3729;
3749 -> 3729;
3750 -> 3740;
3750 -> 3749;
3751 -> 3741;
3751 -> 3749;
3752 -> 3742;
3752 -> 3749;
3753 -> 3743;
3753 -> 3749;
3754 -> 3744;
3754 -> 3749;
3755 -> 3745;
3755 -> 3749;
3756 -> 3746;
3756 -> 3749;
3757 -> 3747;
3757 -> 3749;
3758 -> 3748;
3758 -> 3749;
3759 -> 3739;
3759 -> 3749;
3760 -> 3753;
3760 -> 3749;
3761 -> 3757;
3761 -> 3749;
3762 -> 3758;
3762 -> 3749;
3763 -> 3749;
3764 -> 3763;
3764 -> 3749;
3765 -> 3763;
3765 -> 3749;
3766 -> 3763;
3766 -> 3749;
3767 -> 3763;
3767 -> 3749;
3768 -> 3763;
3768 -> 3749;
3769 -> 3763;
3769 -> 3749;
3770 -> 3763;
3770 -> 3749;
3771 -> 3763;
3771 -> 3749;
3772 -> 3763;
3772 -> 3749;
3773 -> 3763;
3773 -> 3749;
3774 -> 3763;
3774 -> 3749;
3775 -> 3763;
3775 -> 3749;
3776 -> 3763;
3776 -> 3749;
3777 -> 3763;
3777 -> 3749;
3778 -> 3763;
3778 -> 3749;
3779 -> 3763;
3779 -> 3749;
3780 -> 3763;
3780 -> 3749;
3781 -> 3763;
3781 -> 3749;
3782 -> 3763;
3782 -> 3749;
3783 -> 3763;
3783 -> 3749;
3784 -> 3763;
3784 -> 3749;
3785 -> 3763;
3785 -> 3749;
3786 -> 3763;
3786 -> 3749;
3787 -> 3763;
3787 -> 3749;
3788 -> 3763;
3788 -> 3749;
3789 -> 3763;
3789 -> 3749;
3790 -> 3749;
3791 -> 3790;
3791 -> 3763;
3791 -> 3749;
3792 -> 3763;
3792 -> 3749;
3793 -> 3763;
3793 -> 3749;
3794 -> 3749;
3795 -> 3749;
3796 -> 3793;
3796 -> 3795;
3797 -> 3794;
3797 -> 3795;
3798 -> 3797;
3798 -> 3795;
3799 -> 3797;
3799 -> 3795;
3800 -> 3797;
3800 -> 3795;
3801 -> 3796;
3801 -> 3797;
3801 -> 3795;
3802 -> 3794;
3802 -> 3763;
3802 -> 3749;
3803 -> 3763;
3803 -> 3749;
3804 -> 3749;
3805 -> 3804;
3806 -> 0;
3806 -> 3804;
3807 -> 3806;
3807 -> 3805;
3807 -> 3804;
3808 -> 3807;
3808 -> 3749;
3809 -> 3808;
3809 -> 3763;
3809 -> 3749;
3810 -> 3753;
3810 -> 3749;
3811 -> 3810;
3812 -> 3750;
3812 -> 3811;
3812 -> 3810;
3813 -> 3751;
3813 -> 3811;
3813 -> 3810;
3814 -> 3812;
3814 -> 3813;
3814 -> 3810;
3815 -> 3752;
3815 -> 3811;
3815 -> 3810;
3816 -> 3814;
3816 -> 3815;
3816 -> 3810;
3817 -> 3755;
3817 -> 3749;
3818 -> 3817;
3819 -> 3763;
3819 -> 3818;
3820 -> 3754;
3820 -> 3817;
3821 -> 3756;
3821 -> 3763;
3821 -> 3749;
3822 -> 3763;
3822 -> 3669;
3822 -> 3749;
3823 -> 3749;
3824 -> 3763;
3824 -> 3669;
3824 -> 3823;
3824 -> 3749;
3825 -> 3703;
3826 -> 3669;
3827 -> 3669;
3828 -> 3669;
3829 -> 3669;
3830 -> 3669;
3831 -> 3827;
3831 -> 3669;
3832 -> 3669;
3833 -> 3669;
3834 -> 3669;
3835 -> 3669;
3836 -> 3669;
3837 -> 3669;
3838 -> 3837;
3838 -> 3669;
3839 -> 3837;
3839 -> 3669;
3840 -> 3837;
3840 -> 3669;
3841 -> 3838;
3841 -> 3669;
3842 -> 3839;
3842 -> 3669;
3843 -> 3840;
3843 -> 3669;
3844 -> 3841;
3844 -> 3837;
3845 -> 3842;
3845 -> 3837;
3846 -> 3843;
3846 -> 3837;
3847 -> 3837;
3848 -> 3837;
3849 -> 3848;
3850 -> 3844;
3850 -> 3849;
3850 -> 3848;
3851 -> 3845;
3851 -> 3849;
3851 -> 3848;
3852 -> 3850;
3852 -> 3851;
3852 -> 3848;
3853 -> 3846;
3853 -> 3849;
3853 -> 3848;
3854 -> 3852;
3854 -> 3853;
3854 -> 3848;
3855 -> 3837;
3856 -> 3837;
3857 -> 3837;
3858 -> 3837;
3858 -> 3703;
3859 -> 3677;
3860 -> 3859;
3861 -> 3860;
3862 -> 3861;
3863 -> 3837;
3864 -> 3837;
3865 -> 3863;
3865 -> 3837;
3866 -> 3864;
3866 -> 3837;
3867 -> 3863;
3867 -> 3837;
3868 -> 3863;
3868 -> 3837;
3869 -> 3837;
3870 -> 3869;
3870 -> 0;
3870 -> 3837;
3871 -> 3863;
3871 -> 3837;
3872 -> 3863;
3872 -> 3837;
3873 -> 3863;
3873 -> 3837;
3874 -> 3863;
3874 -> 3837;
3875 -> 3863;
3875 -> 3837;
3876 -> 3863;
3876 -> 3859;
3877 -> 3859;
3878 -> 0;
3878 -> 3859;
3879 -> 3678;
3879 -> 3863;
3879 -> 3677;
3880 -> 3657;
3880 -> 3654;
3881 -> 3863;
3881 -> 3654;
3882 -> 3656;
3882 -> 3654;
3883 -> 3654;
3884 -> 3881;
3884 -> 3883;
3885 -> 3882;
3885 -> 3883;
3886 -> 3883;
3887 -> 3884;
3887 -> 3886;
3888 -> 3887;
3889 -> 3887;
3890 -> 3887;
3890 -> 3883;
3891 -> 3885;
3891 -> 3883;
3892 -> 3883;
3893 -> 3890;
3893 -> 3892;
3894 -> 3891;
3894 -> 3892;
3895 -> 3892;
3896 -> 3893;
3896 -> 3892;
3897 -> 3894;
3897 -> 3892;
3898 -> 3895;
3898 -> 3892;
3899 -> 3892;
3900 -> 3896;
3900 -> 3899;
3901 -> 3897;
3901 -> 3899;
3902 -> 3898;
3902 -> 3899;
3903 -> 3901;
3903 -> 3899;
3904 -> 3899;
3905 -> 3903;
3905 -> 3904;
3906 -> 3904;
3907 -> 0;
3907 -> 3904;
3908 -> 3905;
3908 -> 3906;
3908 -> 3907;
3908 -> 3904;
3909 -> 3904;
3910 -> 3905;
3910 -> 3904;
3911 -> 3904;
3912 -> 3910;
3912 -> 3911;
3912 -> 3904;
3913 -> 3910;
3913 -> 3912;
3914 -> 3909;
3914 -> 3913;
3914 -> 3912;
3915 -> 3909;
3915 -> 3914;
3915 -> 3904;
3916 -> 3909;
3916 -> 3915;
3916 -> 3904;
3917 -> 3900;
3917 -> 3899;
3918 -> 3899;
3919 -> 3916;
3919 -> 3918;
3919 -> 3899;
3920 -> 3899;
3921 -> 3916;
3921 -> 3920;
3921 -> 3899;
3922 -> 3921;
3922 -> 3917;
3922 -> 3887;
3922 -> 3899;
3923 -> 3922;
3923 -> 3920;
3924 -> 3920;
3925 -> 3922;
3925 -> 3920;
3926 -> 3922;
3926 -> 3920;
3927 -> 3926;
3927 -> 3922;
3927 -> 3920;
3928 -> 3892;
3929 -> 3922;
3929 -> 3928;
3929 -> 3892;
3930 -> 3929;
3931 -> 3922;
3931 -> 3892;
3933 -> 3932;
3934 -> 3933;
3935 -> 3654;
3936 -> 3654;
3937 -> 3880;
3937 -> 3936;
3938 -> 3931;
3938 -> 3936;
3939 -> 3935;
3939 -> 3936;
3940 -> 3935;
3940 -> 3936;
3941 -> 3935;
3941 -> 3936;
3942 -> 3935;
3942 -> 3936;
3943 -> 3935;
3943 -> 3936;
3944 -> 3935;
3944 -> 3936;
3945 -> 3936;
3946 -> 3936;
3947 -> 3937;
3947 -> 3946;
3947 -> 3936;
3948 -> 3938;
3948 -> 3947;
3949 -> 3937;
3949 -> 3936;
3950 -> 3938;
3950 -> 3936;
3951 -> 3939;
3951 -> 3936;
3952 -> 3936;
3953 -> 3949;
3953 -> 3952;
3954 -> 3950;
3954 -> 3952;
3955 -> 3951;
3955 -> 3952;
3956 -> 3953;
3956 -> 3952;
3957 -> 3954;
3957 -> 3952;
3958 -> 3956;
3958 -> 3957;
3958 -> 3952;
3959 -> 3953;
3959 -> 3652;
3959 -> 3653;
3959 -> 3952;
3960 -> 3954;
3960 -> 3931;
3960 -> 3935;
3960 -> 3952;
3961 -> 3952;
3962 -> 3959;
3962 -> 3961;
3963 -> 3960;
3963 -> 3961;
3964 -> 3961;
3965 -> 3963;
3965 -> 3964;
3966 -> 0;
3966 -> 3964;
3967 -> 3965;
3967 -> 3963;
3967 -> 3966;
3967 -> 0;
3967 -> 3964;
3968 -> 3962;
3968 -> 3967;
3968 -> 3961;
3969 -> 3962;
3969 -> 3961;
3970 -> 3959;
3970 -> 3962;
3970 -> 3961;
3971 -> 3960;
3971 -> 3967;
3971 -> 3961;
3972 -> 3961;
3973 -> 3955;
3973 -> 3972;
3973 -> 3961;
3974 -> 3973;
3974 -> 3961;
3976 -> 3975;
3977 -> 3975;
3978 -> 3970;
3978 -> 3974;
3979 -> 3971;
3979 -> 3974;
3980 -> 3974;
3981 -> 3978;
3981 -> 3980;
3982 -> 3979;
3982 -> 3980;
3983 -> 3981;
3983 -> 3980;
3984 -> 3982;
3984 -> 3980;
3985 -> 3980;
3986 -> 3983;
3986 -> 3985;
3987 -> 3984;
3987 -> 3985;
3988 -> 0;
3988 -> 3985;
3989 -> 3985;
3990 -> 3989;
3991 -> 3990;
3991 -> 3989;
3992 -> 3991;
3992 -> 3985;
3993 -> 3986;
3993 -> 3992;
3994 -> 3992;
3995 -> 3987;
3995 -> 3992;
3996 -> 3992;
3997 -> 3986;
3997 -> 3985;
3998 -> 3987;
3998 -> 3985;
3999 -> 3997;
3999 -> 3998;
3999 -> 3985;
4000 -> 3986;
4000 -> 3985;
4001 -> 3987;
4001 -> 4000;
4002 -> 3952;
4003 -> 4002;
4003 -> 3936;
4004 -> 4003;
4005 -> 4004;
4005 -> 3654;
4006 -> 634;
4006 -> 1;
4007 -> 1;
4008 -> 4007;
4008 -> 1;
4009 -> 1;
4010 -> 4006;
4010 -> 4009;
4011 -> 4007;
4011 -> 4009;
4012 -> 4007;
4012 -> 4009;
4013 -> 4009;
4014 -> 4013;
4014 -> 4010;
4014 -> 4009;
4015 -> 4010;
4015 -> 3967;
4015 -> 4014;
4015 -> 4009;
4016 -> 4009;
4017 -> 4009;
4018 -> 4009;
4019 -> 4018;
4020 -> 4019;
4020 -> 4009;
4021 -> 4020;
4021 -> 4017;
4021 -> 4009;
4022 -> 0;
4022 -> 4009;
4023 -> 4017;
4024 -> 4023;
4025 -> 4015;
4025 -> 4017;
4026 -> 4015;
4026 -> 4017;
4027 -> 4025;
4027 -> 4017;
4028 -> 4017;
4029 -> 4028;
4029 -> 4017;
4030 -> 4017;
4031 -> 4027;
4031 -> 4030;
4032 -> 4029;
4032 -> 4030;
4033 -> 4030;
4034 -> 4015;
4035 -> 4015;
4036 -> 4034;
4036 -> 4015;
4037 -> 4015;
4038 -> 4035;
4038 -> 4015;
4038 -> 4036;
4038 -> 4037;
4038 -> 4034;
4039 -> 4015;
4040 -> 4039;
4040 -> 4034;
4040 -> 4015;
4041 -> 4034;
4041 -> 4015;
4042 -> 4015;
4043 -> 4041;
4043 -> 4042;
4043 -> 4034;
4043 -> 4040;
4043 -> 4015;
4044 -> 4030;
4045 -> 0;
4045 -> 4030;
4046 -> 4032;
4046 -> 4030;
4047 -> 4015;
4047 -> 4030;
4048 -> 4030;
4049 -> 4047;
4049 -> 4048;
4050 -> 0;
4050 -> 4048;
4051 -> 4050;
4052 -> 4030;
4053 -> 4030;
4054 -> 4053;
4055 -> 4053;
4056 -> 4053;
4057 -> 4055;
4057 -> 4056;
4058 -> 4055;
4058 -> 4056;
4059 -> 4055;
4059 -> 4056;
4060 -> 4055;
4060 -> 4056;
4061 -> 4056;
4062 -> 4015;
4062 -> 4061;
4062 -> 4056;
4063 -> 4060;
4063 -> 4056;
4064 -> 4057;
4064 -> 4056;
4065 -> 4058;
4065 -> 4056;
4066 -> 4059;
4066 -> 4056;
4067 -> 4060;
4067 -> 4056;
4068 -> 4056;
4069 -> 0;
4069 -> 4056;
4070 -> 4056;
4071 -> 4069;
4071 -> 4070;
4072 -> 4069;
4072 -> 4070;
4073 -> 4067;
4073 -> 4070;
4074 -> 4068;
4074 -> 4070;
4075 -> 4068;
4075 -> 4070;
4076 -> 4071;
4076 -> 4070;
4077 -> 4072;
4077 -> 4070;
4078 -> 4073;
4078 -> 4070;
4079 -> 4070;
4080 -> 4079;
4080 -> 4070;
4081 -> 4074;
4081 -> 4079;
4081 -> 4070;
4082 -> 4056;
4083 -> 4064;
4083 -> 4082;
4084 -> 4065;
4084 -> 4082;
4085 -> 4066;
4085 -> 4082;
4086 -> 4067;
4086 -> 4082;
4087 -> 4068;
4087 -> 4082;
4088 -> 4068;
4088 -> 4082;
4089 -> 4068;
4089 -> 4082;
4090 -> 4068;
4090 -> 4082;
4091 -> 4068;
4091 -> 4082;
4092 -> 4068;
4092 -> 4082;
4093 -> 4083;
4093 -> 4082;
4094 -> 4084;
4094 -> 4082;
4095 -> 4085;
4095 -> 4082;
4096 -> 4086;
4096 -> 4082;
4097 -> 4087;
4097 -> 4082;
4098 -> 4088;
4098 -> 4082;
4099 -> 4089;
4099 -> 4082;
4100 -> 4090;
4100 -> 4082;
4101 -> 4091;
4101 -> 4082;
4102 -> 4082;
4103 -> 4093;
4103 -> 4102;
4104 -> 4094;
4104 -> 4102;
4105 -> 4095;
4105 -> 4102;
4106 -> 4096;
4106 -> 4102;
4107 -> 4097;
4107 -> 4102;
4108 -> 4098;
4108 -> 4102;
4109 -> 4099;
4109 -> 4102;
4110 -> 4100;
4110 -> 4102;
4111 -> 4101;
4111 -> 4102;
4112 -> 4092;
4112 -> 4102;
4113 -> 4106;
4113 -> 4102;
4114 -> 4110;
4114 -> 4102;
4115 -> 4111;
4115 -> 4102;
4116 -> 4102;
4117 -> 4116;
4117 -> 4102;
4118 -> 4116;
4118 -> 4102;
4119 -> 4116;
4119 -> 4102;
4120 -> 4116;
4120 -> 4102;
4121 -> 4116;
4121 -> 4102;
4122 -> 4116;
4122 -> 4102;
4123 -> 4116;
4123 -> 4102;
4124 -> 4116;
4124 -> 4102;
4125 -> 4116;
4125 -> 4102;
4126 -> 4116;
4126 -> 4102;
4127 -> 4116;
4127 -> 4102;
4128 -> 4116;
4128 -> 4102;
4129 -> 4116;
4129 -> 4102;
4130 -> 4116;
4130 -> 4102;
4131 -> 4116;
4131 -> 4102;
4132 -> 4116;
4132 -> 4102;
4133 -> 4116;
4133 -> 4102;
4134 -> 4116;
4134 -> 4102;
4135 -> 4116;
4135 -> 4102;
4136 -> 4116;
4136 -> 4102;
4137 -> 4116;
4137 -> 4102;
4138 -> 4116;
4138 -> 4102;
4139 -> 4116;
4139 -> 4102;
4140 -> 4116;
4140 -> 4102;
4141 -> 4116;
4141 -> 4102;
4142 -> 4116;
4142 -> 4102;
4143 -> 4102;
4144 -> 4143;
4144 -> 4116;
4144 -> 4102;
4145 -> 4116;
4145 -> 4102;
4146 -> 4116;
4146 -> 4102;
4147 -> 4102;
4148 -> 4102;
4149 -> 4146;
4149 -> 4148;
4150 -> 4147;
4150 -> 4148;
4151 -> 4150;
4151 -> 4148;
4152 -> 4150;
4152 -> 4148;
4153 -> 4150;
4153 -> 4148;
4154 -> 4149;
4154 -> 4150;
4154 -> 4148;
4155 -> 4147;
4155 -> 4116;
4155 -> 4102;
4156 -> 4116;
4156 -> 4102;
4157 -> 4102;
4158 -> 4157;
4159 -> 0;
4159 -> 4157;
4160 -> 4159;
4160 -> 4158;
4160 -> 4157;
4161 -> 4160;
4161 -> 4102;
4162 -> 4161;
4162 -> 4116;
4162 -> 4102;
4163 -> 4106;
4163 -> 4102;
4164 -> 4163;
4165 -> 4103;
4165 -> 4164;
4165 -> 4163;
4166 -> 4104;
4166 -> 4164;
4166 -> 4163;
4167 -> 4165;
4167 -> 4166;
4167 -> 4163;
4168 -> 4105;
4168 -> 4164;
4168 -> 4163;
4169 -> 4167;
4169 -> 4168;
4169 -> 4163;
4170 -> 4108;
4170 -> 4102;
4171 -> 4170;
4172 -> 4116;
4172 -> 4171;
4173 -> 4107;
4173 -> 4170;
4174 -> 4109;
4174 -> 4116;
4174 -> 4102;
4175 -> 4116;
4175 -> 4015;
4175 -> 4102;
4176 -> 4102;
4177 -> 4116;
4177 -> 4015;
4177 -> 4176;
4177 -> 4102;
4178 -> 4056;
4179 -> 4015;
4180 -> 4015;
4181 -> 4015;
4182 -> 4015;
4183 -> 4015;
4184 -> 4180;
4184 -> 4015;
4185 -> 4015;
4186 -> 4015;
4187 -> 4015;
4188 -> 4015;
4189 -> 4015;
4190 -> 4015;
4191 -> 4015;
4192 -> 4015;
4193 -> 4190;
4193 -> 4015;
4194 -> 4191;
4194 -> 4015;
4195 -> 4192;
4195 -> 4015;
4196 -> 4193;
4196 -> 4015;
4197 -> 4194;
4197 -> 4015;
4198 -> 4195;
4198 -> 4015;
4199 -> 4015;
4200 -> 4015;
4201 -> 4200;
4202 -> 4196;
4202 -> 4201;
4202 -> 4200;
4203 -> 4197;
4203 -> 4201;
4203 -> 4200;
4204 -> 4202;
4204 -> 4203;
4204 -> 4200;
4205 -> 4198;
4205 -> 4201;
4205 -> 4200;
4206 -> 4204;
4206 -> 4205;
4206 -> 4200;
4207 -> 4015;
4208 -> 4015;
4209 -> 4015;
4210 -> 4015;
4210 -> 4056;
4211 -> 4030;
4212 -> 4211;
4213 -> 4212;
4214 -> 4213;
4215 -> 4015;
4216 -> 4015;
4217 -> 4215;
4217 -> 4015;
4218 -> 4215;
4218 -> 4015;
4219 -> 4215;
4219 -> 4015;
4220 -> 4015;
4221 -> 4220;
4221 -> 0;
4221 -> 4015;
4222 -> 4215;
4222 -> 4015;
4223 -> 4215;
4223 -> 4015;
4224 -> 4215;
4224 -> 4015;
4225 -> 4215;
4225 -> 4015;
4226 -> 4215;
4226 -> 4015;
4227 -> 4215;
4227 -> 4211;
4228 -> 4211;
4229 -> 0;
4229 -> 4211;
4230 -> 4031;
4230 -> 4215;
4230 -> 4030;
4231 -> 4012;
4231 -> 4009;
4232 -> 4011;
4232 -> 4009;
4233 -> 4009;
4234 -> 4232;
4234 -> 4233;
4235 -> 4233;
4236 -> 4215;
4237 -> 4215;
4238 -> 4234;
4238 -> 4233;
4239 -> 4233;
4240 -> 4238;
4240 -> 4239;
4241 -> 4239;
4242 -> 4240;
4242 -> 4239;
4243 -> 4241;
4243 -> 4239;
4244 -> 4239;
4245 -> 4242;
4245 -> 4244;
4246 -> 4243;
4246 -> 4244;
4247 -> 4245;
4247 -> 4244;
4248 -> 4244;
4249 -> 4247;
4249 -> 4248;
4250 -> 4248;
4251 -> 0;
4251 -> 4248;
4252 -> 4249;
4252 -> 4250;
4252 -> 4251;
4252 -> 4248;
4253 -> 4248;
4254 -> 4249;
4254 -> 4248;
4255 -> 4248;
4256 -> 4254;
4256 -> 4255;
4256 -> 4248;
4257 -> 4254;
4257 -> 4256;
4258 -> 4253;
4258 -> 4257;
4258 -> 4256;
4259 -> 4253;
4259 -> 4258;
4259 -> 4248;
4260 -> 4253;
4260 -> 4259;
4260 -> 4248;
4261 -> 4244;
4262 -> 4260;
4262 -> 4261;
4262 -> 4244;
4263 -> 4244;
4264 -> 4260;
4264 -> 4263;
4264 -> 4244;
4265 -> 4215;
4265 -> 4263;
4266 -> 4263;
4267 -> 4215;
4267 -> 4263;
4268 -> 4215;
4268 -> 4263;
4269 -> 4268;
4269 -> 4215;
4269 -> 4263;
4270 -> 4239;
4271 -> 4215;
4271 -> 4270;
4271 -> 4239;
4272 -> 4271;
4273 -> 4009;
4274 -> 4009;
4275 -> 4231;
4275 -> 4274;
4276 -> 4273;
4276 -> 4274;
4277 -> 4273;
4277 -> 4274;
4278 -> 4273;
4278 -> 4274;
4279 -> 4273;
4279 -> 4274;
4280 -> 4273;
4280 -> 4274;
4281 -> 4273;
4281 -> 4274;
4282 -> 4274;
4283 -> 4274;
4284 -> 4275;
4284 -> 4283;
4284 -> 4274;
4285 -> 4215;
4285 -> 4284;
4286 -> 4275;
4286 -> 4274;
4287 -> 4276;
4287 -> 4274;
4288 -> 4274;
4289 -> 4286;
4289 -> 4288;
4290 -> 4287;
4290 -> 4288;
4291 -> 4289;
4291 -> 4288;
4292 -> 4215;
4292 -> 4288;
4293 -> 4291;
4293 -> 4292;
4293 -> 4288;
4294 -> 4289;
4294 -> 4007;
4294 -> 4008;
4294 -> 4288;
4295 -> 4288;
4296 -> 4294;
4296 -> 4295;
4297 -> 4295;
4298 -> 0;
4298 -> 4297;
4299 -> 4296;
4299 -> 4215;
4299 -> 4295;
4300 -> 4296;
4300 -> 4295;
4301 -> 4294;
4301 -> 4296;
4301 -> 4295;
4302 -> 4215;
4302 -> 4295;
4303 -> 4295;
4304 -> 4290;
4304 -> 4303;
4304 -> 4295;
4305 -> 4304;
4305 -> 4295;
4306 -> 4301;
4306 -> 4305;
4307 -> 4302;
4307 -> 4305;
4308 -> 4305;
4309 -> 4306;
4309 -> 4308;
4310 -> 4307;
4310 -> 4308;
4311 -> 4309;
4311 -> 4308;
4312 -> 4310;
4312 -> 4308;
4313 -> 4308;
4314 -> 4311;
4314 -> 4313;
4315 -> 4312;
4315 -> 4313;
4316 -> 0;
4316 -> 4313;
4317 -> 4313;
4318 -> 4317;
4319 -> 4318;
4319 -> 4317;
4320 -> 4319;
4320 -> 4313;
4321 -> 4314;
4321 -> 4320;
4322 -> 4320;
4323 -> 4315;
4323 -> 4320;
4324 -> 4320;
4325 -> 4314;
4325 -> 4313;
4326 -> 4315;
4326 -> 4313;
4327 -> 4325;
4327 -> 4326;
4327 -> 4313;
4328 -> 4314;
4328 -> 4313;
4329 -> 4315;
4329 -> 4328;
4330 -> 4288;
4331 -> 4330;
4331 -> 4274;
4332 -> 4331;
4333 -> 4332;
4333 -> 4009;
4334 -> 633;
4334 -> 1;
4335 -> 1;
4336 -> 1;
4337 -> 4334;
4337 -> 4336;
4338 -> 4335;
4338 -> 4336;
4339 -> 10;
4339 -> 4336;
4340 -> 4336;
4341 -> 4340;
4341 -> 4337;
4341 -> 4336;
4342 -> 4337;
4342 -> 4336;
4343 -> 4342;
4343 -> 4215;
4343 -> 4341;
4343 -> 4336;
4344 -> 4343;
4344 -> 4336;
4345 -> 4344;
4345 -> 4336;
4346 -> 4336;
4347 -> 4346;
4347 -> 4337;
4347 -> 4336;
4348 -> 4337;
4348 -> 4336;
4349 -> 4348;
4349 -> 4345;
4349 -> 4347;
4349 -> 4336;
4350 -> 0;
4350 -> 4336;
4351 -> 4345;
4351 -> 4336;
4352 -> 4338;
4352 -> 4336;
4353 -> 0;
4353 -> 4352;
4354 -> 4349;
4354 -> 4352;
4355 -> 634;
4355 -> 1;
4356 -> 1;
4357 -> 1;
4358 -> 4355;
4358 -> 4357;
4359 -> 4356;
4359 -> 4357;
4360 -> 10;
4360 -> 4357;
4361 -> 4357;
4362 -> 4361;
4362 -> 4358;
4362 -> 4357;
4363 -> 4358;
4363 -> 4357;
4364 -> 4363;
4364 -> 4349;
4364 -> 4362;
4364 -> 4357;
4365 -> 4357;
4366 -> 4365;
4366 -> 4358;
4366 -> 4357;
4367 -> 4358;
4367 -> 4357;
4368 -> 0;
4368 -> 4357;
4369 -> 4364;
4369 -> 4357;
4370 -> 4359;
4370 -> 4357;
4371 -> 4364;
4371 -> 4370;
}