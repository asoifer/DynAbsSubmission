digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 799515"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 799516"];
3 [label="param CompilationEmitTests(this) 799517"];
4 [label="param EmitMetadataTestBase(this) 799518"];
5 [label="param CSharpTestBase(this) 799519"];
6 [label="param CommonTestBase(this) 799520"];
7 [label="param TestBase(this) 799521"];
8 [label="_temp 799522"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 799523"];
10 [label="param EmitLambdaInConstructorBody(this) 799524"];
11 [label="string source = @'\nusing System;\npublic class A\n{\n    public string y = ''!'';\n\n    public A(string x) {func(()=>x+y); }\n    public A(Func<string> x)\n    {\n        Console.WriteLine(x());\n    }\n \npublic void func(Func<string> x)\n    {\n        Console.WriteLine(x());\n    }\n    static void Main()\n    {\n        A a = new A(''Hello'');\n    }\n}'; 799525"];
12 [label="CompileAndVerify(source, expectedOutput: 'Hello!'); 799526"];
13 [label="source 799527"];
14 [label="param operator(string source) 799528"];
15 [label="source 799529"];
16 [label="new CSharpTestSource(source) 799530"];
17 [label="param CSharpTestSource(object value) 799531"];
18 [label="param CSharpTestSource(this) 799532"];
19 [label="Value 799533"];
20 [label="CompileAndVerify(source, expectedOutput: 'Hello!'); 799534"];
21 [label="CompileAndVerify(source, expectedOutput: 'Hello!'); 799535"];
22 [label="CompileAndVerify(source, expectedOutput: 'Hello!') 799536"];
23 [label="param CompileAndVerify(CSharpTestSource source) 799537"];
24 [label="param CompileAndVerify(IEnumerable<MetadataReference> references = null) 799538"];
25 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 799539"];
26 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 799540"];
27 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 799541"];
28 [label="param CompileAndVerify(Action<PEAssembly> assemblyValidator = null) 799542"];
29 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 799543"];
30 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 799544"];
31 [label="param CompileAndVerify(string expectedOutput = null) 799545"];
32 [label="param CompileAndVerify(int? expectedReturnCode = null) 799546"];
33 [label="param CompileAndVerify(string[] args = null) 799547"];
34 [label="param CompileAndVerify(CSharpCompilationOptions options = null) 799548"];
35 [label="param CompileAndVerify(CSharpParseOptions parseOptions = null) 799549"];
36 [label="param CompileAndVerify(EmitOptions emitOptions = null) 799550"];
37 [label="param CompileAndVerify(TargetFramework targetFramework = TargetFramework.Standard) 799551"];
38 [label="param CompileAndVerify(Verification verify = Verification.Passes) 799552"];
39 [label="param CompileAndVerify(this) 799553"];
40 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 799554"];
41 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 799555"];
42 [label="(expectedOutput != null) 799556"];
43 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 799557"];
44 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799558"];
45 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799559"];
46 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799560"];
47 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799561"];
48 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799562"];
49 [label="GetUniqueName() 799563"];
50 [label="return Guid.NewGuid().ToString('D'); 799564"];
51 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799565"];
52 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 799566"];
53 [label="CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()) 799567"];
54 [label="param CreateCompilation(CSharpTestSource source) 799568"];
55 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 799569"];
56 [label="param CreateCompilation(CSharpCompilationOptions options = null) 799570"];
57 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 799571"];
58 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 799572"];
59 [label="param CreateCompilation(string assemblyName = '') 799573"];
60 [label="param CreateCompilation(string sourceFileName = '') 799574"];
61 [label="param CreateCompilation(bool skipUsesIsNullable = false) 799575"];
62 [label="source 799576"];
63 [label="targetFramework 799577"];
64 [label="references 799578"];
65 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 799579"];
66 [label="param GetReferences(TargetFramework tf) 799580"];
67 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 799581"];
68 [label="var references = GetReferences(tf); 799582"];
69 [label="GetReferences(tf) 799583"];
70 [label="param GetReferences(TargetFramework targetFramework) 799584"];
71 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 799585"];
72 [label="StandardReferences 799586"];
73 [label="RuntimeUtilities.IsCoreClrRuntime 799587"];
74 [label="Mscorlib46ExtendedReferences 799588"];
75 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 799589"];
76 [label="TestBase.ValueTupleRef 799590"];
77 [label="TestReferences.NetFx.ValueTuple.tuplelib 799591"];
78 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 799592"];
79 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 799593"];
80 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 799594"];
81 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 799595"];
82 [label="return references; 799596"];
83 [label="options 799597"];
84 [label="parseOptions 799598"];
85 [label="assemblyName 799599"];
86 [label="sourceFileName 799600"];
87 [label="skipUsesIsNullable 799601"];
88 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 799602"];
89 [label="param CreateEmptyCompilation(CSharpTestSource source) 799603"];
90 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 799604"];
91 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 799605"];
92 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 799606"];
93 [label="param CreateEmptyCompilation(string assemblyName = '') 799607"];
94 [label="param CreateEmptyCompilation(string sourceFileName = '') 799608"];
95 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 799609"];
96 [label="source 799610"];
97 [label="references 799611"];
98 [label="options 799612"];
99 [label="parseOptions 799613"];
100 [label="assemblyName 799614"];
101 [label="sourceFileName 799615"];
102 [label="skipUsesIsNullable 799616"];
103 [label="null 799617"];
104 [label="experimentalFeature: null 799618"];
105 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 799619"];
106 [label="param CreateCompilationCore(CSharpTestSource source) 799620"];
107 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 799621"];
108 [label="param CreateCompilationCore(CSharpCompilationOptions options) 799622"];
109 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 799623"];
110 [label="param CreateCompilationCore(string assemblyName) 799624"];
111 [label="param CreateCompilationCore(string sourceFileName) 799625"];
112 [label="param CreateCompilationCore(bool skipUsesIsNullable) 799626"];
113 [label="param CreateCompilationCore(MessageID? experimentalFeature) 799627"];
114 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 799628"];
115 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 799629"];
116 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 799630"];
117 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 799631"];
118 [label="param GetSyntaxTrees(string sourceFileName = '') 799632"];
119 [label="param GetSyntaxTrees(this) 799633"];
120 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 799634"];
121 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 799635"];
122 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 799636"];
123 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 799637"];
124 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 799638"];
125 [label="param Parse(string text) 799639"];
126 [label="param Parse(string filename = '') 799640"];
127 [label="param Parse(CSharpParseOptions options = null) 799641"];
128 [label="param Parse(Encoding encoding = null) 799642"];
129 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 799643"];
130 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 799644"];
131 [label="options = TestOptions.Regular; 799645"];
132 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 799646"];
133 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 799647"];
134 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 799648"];
135 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 799649"];
136 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 799650"];
137 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 799651"];
138 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 799652"];
139 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 799653"];
140 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 799654"];
141 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 799655"];
142 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 799656"];
143 [label="param CheckSerializable(SyntaxTree tree) 799657"];
144 [label="var stream = new MemoryStream(); 799658"];
145 [label="var root = tree.GetRoot(); 799659"];
146 [label="var root = tree.GetRoot(); 799660"];
147 [label="root.SerializeTo(stream); 799661"];
148 [label="root.SerializeTo(stream); 799662"];
149 [label="root.SerializeTo(stream); 799663"];
150 [label="stream.Position = 0; 799664"];
151 [label="stream.Position 799665"];
152 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 799666"];
153 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 799667"];
154 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 799668"];
155 [label="return tree; 799669"];
156 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 799670"];
157 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 799671"];
158 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 799672"];
159 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 799673"];
160 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 799674"];
161 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 799675"];
162 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 799676"];
163 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 799677"];
164 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 799678"];
165 [label="param ValidateIOperations(Func<Compilation> createCompilation) 799679"];
166 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 799680"];
167 [label="return; 799681"];
168 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 799682"];
169 [label="OutputKind.ConsoleApplication 799683"];
170 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 799684"];
171 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 799685"];
172 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 799686"];
173 [label="OutputKind.DynamicallyLinkedLibrary 799687"];
174 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 799688"];
175 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 799689"];
176 [label="true 799690"];
177 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 799691"];
178 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 799692"];
179 [label="var compilation = createCompilationLambda(); 799693"];
180 [label="var compilation = createCompilationLambda(); 799694"];
181 [label="param Create(string? assemblyName) 799695"];
182 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 799696"];
183 [label="param Create(IEnumerable<MetadataReference>? references = null) 799697"];
184 [label="param Create(CSharpCompilationOptions? options = null) 799698"];
185 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 799699"];
186 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 799700"];
187 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 799701"];
188 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 799702"];
189 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 799703"];
190 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 799704"];
191 [label="param Create(string? assemblyName) 799705"];
192 [label="param Create(CSharpCompilationOptions options) 799706"];
193 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 799707"];
194 [label="param Create(IEnumerable<MetadataReference>? references) 799708"];
195 [label="param Create(CSharpCompilation? previousSubmission) 799709"];
196 [label="param Create(Type? returnType) 799710"];
197 [label="param Create(Type? hostObjectType) 799711"];
198 [label="param Create(bool isSubmission) 799712"];
199 [label="RoslynDebug.Assert(options != null); 799713"];
200 [label="RoslynDebug.Assert(options != null); 799714"];
201 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 799715"];
202 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 799716"];
203 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799717"];
204 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799718"];
205 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799719"];
206 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799720"];
207 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799721"];
208 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799722"];
209 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799723"];
210 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799724"];
211 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799725"];
212 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 799726"];
213 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 799727"];
214 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 799728"];
215 [label="param SyntaxAndDeclarationManager(string scriptClassName) 799729"];
216 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 799730"];
217 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 799731"];
218 [label="param SyntaxAndDeclarationManager(bool isSubmission) 799732"];
219 [label="param SyntaxAndDeclarationManager(State state) 799733"];
220 [label="param SyntaxAndDeclarationManager(this) 799734"];
221 [label="externalSyntaxTrees 799735"];
222 [label="scriptClassName 799736"];
223 [label="resolver 799737"];
224 [label="messageProvider 799738"];
225 [label="isSubmission 799739"];
226 [label="param SyntaxAndDeclarationManager(this) 799740"];
227 [label="param SyntaxAndDeclarationManager(this) 799741"];
228 [label="_lazyState 799742"];
229 [label="_lazyState 799743"];
230 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 799744"];
231 [label="param CSharpCompilation(string? assemblyName) 799745"];
232 [label="param CSharpCompilation(CSharpCompilationOptions options) 799746"];
233 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 799747"];
234 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 799748"];
235 [label="param CSharpCompilation(Type? submissionReturnType) 799749"];
236 [label="param CSharpCompilation(Type? hostObjectType) 799750"];
237 [label="param CSharpCompilation(bool isSubmission) 799751"];
238 [label="param CSharpCompilation(ReferenceManager? referenceManager) 799752"];
239 [label="param CSharpCompilation(bool reuseReferenceManager) 799753"];
240 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 799754"];
241 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 799755"];
242 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 799756"];
243 [label="param CSharpCompilation(this) 799757"];
244 [label="assemblyName 799758"];
245 [label="options 799759"];
246 [label="references 799760"];
247 [label="previousSubmission 799761"];
248 [label="submissionReturnType 799762"];
249 [label="hostObjectType 799763"];
250 [label="isSubmission 799764"];
251 [label="referenceManager 799765"];
252 [label="reuseReferenceManager 799766"];
253 [label="syntaxAndDeclarations 799767"];
254 [label="syntaxAndDeclarations.ExternalSyntaxTrees 799768"];
255 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 799769"];
256 [label="semanticModelProvider 799770"];
257 [label="eventQueue 799771"];
258 [label="param CSharpCompilation(this) 799772"];
259 [label="param CSharpCompilation(string? assemblyName) 799773"];
260 [label="param CSharpCompilation(CSharpCompilationOptions options) 799774"];
261 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 799775"];
262 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 799776"];
263 [label="param CSharpCompilation(Type? submissionReturnType) 799777"];
264 [label="param CSharpCompilation(Type? hostObjectType) 799778"];
265 [label="param CSharpCompilation(bool isSubmission) 799779"];
266 [label="param CSharpCompilation(ReferenceManager? referenceManager) 799780"];
267 [label="param CSharpCompilation(bool reuseReferenceManager) 799781"];
268 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 799782"];
269 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 799783"];
270 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 799784"];
271 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 799785"];
272 [label="param CSharpCompilation(this) 799786"];
273 [label="assemblyName 799787"];
274 [label="references 799788"];
275 [label="features 799789"];
276 [label="isSubmission 799790"];
277 [label="semanticModelProvider 799791"];
278 [label="eventQueue 799792"];
279 [label="param CSharpCompilation(this) 799793"];
280 [label="param CSharpCompilation(this) 799794"];
281 [label="_options 799795"];
282 [label="_globalImports 799796"];
283 [label="_previousSubmissionImports 799797"];
284 [label="_globalNamespaceAlias 799798"];
285 [label="_scriptClass 799799"];
286 [label="_lazyHostObjectTypeSymbol 799800"];
287 [label="_lazyImportInfos 799801"];
288 [label="_conversions 799802"];
289 [label="_anonymousTypeManager 799803"];
290 [label="_lazyGlobalNamespace 799804"];
291 [label="builtInOperators 799805"];
292 [label="_lazyAssemblySymbol 799806"];
293 [label="_referenceManager 799807"];
294 [label="_syntaxAndDeclarations 799808"];
295 [label="_lazyEntryPoint 799809"];
296 [label="_lazyEmitNullablePublicOnly 799810"];
297 [label="_lazyCompilationUnitCompletedTrees 799811"];
298 [label="NullableAnalysisData 799812"];
299 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 799813"];
300 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 799814"];
301 [label="_externAliasTargets 799815"];
302 [label="_moduleInitializerMethods 799816"];
303 [label="_binderFactories 799817"];
304 [label="_ignoreAccessibilityBinderFactories 799818"];
305 [label="_lazyDeclarationDiagnostics 799819"];
306 [label="_declarationDiagnosticsFrozen 799820"];
307 [label="new DiagnosticBag() 799821"];
308 [label="_additionalCodegenWarnings = new DiagnosticBag() 799822"];
309 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 799823"];
310 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 799824"];
311 [label="WellKnownMemberSignatureComparer 799825"];
312 [label="_options 799826"];
313 [label="this.builtInOperators = new BuiltInOperators(this); 799827"];
314 [label="this.builtInOperators = new BuiltInOperators(this); 799828"];
315 [label="new BuiltInOperators(this) 799829"];
316 [label="param BuiltInOperators(CSharpCompilation compilation) 799830"];
317 [label="param BuiltInOperators(this) 799831"];
318 [label="_compilation 799832"];
319 [label="_builtInUnaryOperators 799833"];
320 [label="_builtInOperators 799834"];
321 [label="_compilation 799835"];
322 [label="this.builtInOperators 799836"];
323 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 799837"];
324 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 799838"];
325 [label="_scriptClass 799839"];
326 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 799840"];
327 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 799841"];
328 [label="_globalImports 799842"];
329 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 799843"];
330 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 799844"];
331 [label="_previousSubmissionImports 799845"];
332 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 799846"];
333 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 799847"];
334 [label="_globalNamespaceAlias 799848"];
335 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 799849"];
336 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 799850"];
337 [label="_anonymousTypeManager 799851"];
338 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 799852"];
339 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 799853"];
340 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 799854"];
341 [label="LanguageVersion? result = null; 799855"];
342 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 799856"];
343 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 799857"];
344 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 799858"];
345 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 799859"];
346 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 799860"];
347 [label="this.LanguageVersion 799861"];
348 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 799862"];
349 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 799863"];
350 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 799864"];
351 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 799865"];
352 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 799866"];
353 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 799867"];
354 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 799868"];
355 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 799869"];
356 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 799870"];
357 [label="this.Options 799871"];
358 [label="get\n            {\n                return _options;\n            } 799872"];
359 [label="return _options; 799873"];
360 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 799874"];
361 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 799875"];
362 [label="_referenceManager 799876"];
363 [label="_syntaxAndDeclarations 799877"];
364 [label="Debug.Assert(_lazyAssemblySymbol is null); 799878"];
365 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 799879"];
366 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 799880"];
367 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 799881"];
368 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 799882"];
369 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 799883"];
370 [label="compilation.AddSyntaxTrees(syntaxTrees) 799884"];
371 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 799885"];
372 [label="param AddSyntaxTrees(this) 799886"];
373 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 799887"];
374 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 799888"];
375 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 799889"];
376 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 799890"];
377 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 799891"];
378 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 799892"];
379 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 799893"];
380 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 799894"];
381 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 799895"];
382 [label="bool reuseReferenceManager = true; 799896"];
383 [label="int i = 0; 799897"];
384 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 799898"];
385 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 799899"];
386 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 799900"];
387 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 799901"];
388 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 799902"];
389 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 799903"];
390 [label="externalSyntaxTrees.Add(tree); 799904"];
391 [label="externalSyntaxTrees.Add(tree); 799905"];
392 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 799906"];
393 [label="i++; 799907"];
394 [label="externalSyntaxTrees.Free(); 799908"];
395 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 799909"];
396 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 799910"];
397 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 799911"];
398 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 799912"];
399 [label="param AddSyntaxTrees(this) 799913"];
400 [label="var scriptClassName = this.ScriptClassName; 799914"];
401 [label="var resolver = this.Resolver; 799915"];
402 [label="var messageProvider = this.MessageProvider; 799916"];
403 [label="var isSubmission = this.IsSubmission; 799917"];
404 [label="var state = _lazyState; 799918"];
405 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 799919"];
406 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 799920"];
407 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 799921"];
408 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 799922"];
409 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 799923"];
410 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 799924"];
411 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 799925"];
412 [label="param WithExternalSyntaxTrees(this) 799926"];
413 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 799927"];
414 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 799928"];
415 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 799929"];
416 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 799930"];
417 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 799931"];
418 [label="param SyntaxAndDeclarationManager(string scriptClassName) 799932"];
419 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 799933"];
420 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 799934"];
421 [label="param SyntaxAndDeclarationManager(bool isSubmission) 799935"];
422 [label="param SyntaxAndDeclarationManager(State state) 799936"];
423 [label="param SyntaxAndDeclarationManager(this) 799937"];
424 [label="param SyntaxAndDeclarationManager(this) 799938"];
425 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 799939"];
426 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 799940"];
427 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 799941"];
428 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 799942"];
429 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 799943"];
430 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 799944"];
431 [label="param Update(ReferenceManager referenceManager) 799945"];
432 [label="param Update(bool reuseReferenceManager) 799946"];
433 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 799947"];
434 [label="param Update(this) 799948"];
435 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799949"];
436 [label="this.PreviousSubmission 799950"];
437 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 799951"];
438 [label="ScriptCompilationInfo 799952"];
439 [label="ScriptCompilationInfo?.PreviousScriptCompilation 799953"];
440 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799954"];
441 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799955"];
442 [label="this.SubmissionReturnType 799956"];
443 [label="=> ScriptCompilationInfo 799957"];
444 [label="ScriptCompilationInfo 799958"];
445 [label="this.HostObjectType 799959"];
446 [label="=> ScriptCompilationInfo 799960"];
447 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799961"];
448 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799962"];
449 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799963"];
450 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 799964"];
451 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 799965"];
452 [label="param CSharpCompilation(string? assemblyName) 799966"];
453 [label="param CSharpCompilation(CSharpCompilationOptions options) 799967"];
454 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 799968"];
455 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 799969"];
456 [label="param CSharpCompilation(Type? submissionReturnType) 799970"];
457 [label="param CSharpCompilation(Type? hostObjectType) 799971"];
458 [label="param CSharpCompilation(bool isSubmission) 799972"];
459 [label="param CSharpCompilation(ReferenceManager? referenceManager) 799973"];
460 [label="param CSharpCompilation(bool reuseReferenceManager) 799974"];
461 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 799975"];
462 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 799976"];
463 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 799977"];
464 [label="param CSharpCompilation(this) 799978"];
465 [label="previousSubmission 799979"];
466 [label="submissionReturnType 799980"];
467 [label="hostObjectType 799981"];
468 [label="syntaxAndDeclarations.ExternalSyntaxTrees 799982"];
469 [label="eventQueue 799983"];
470 [label="param CSharpCompilation(this) 799984"];
471 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 799985"];
472 [label="param CSharpCompilation(Type? submissionReturnType) 799986"];
473 [label="param CSharpCompilation(Type? hostObjectType) 799987"];
474 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 799988"];
475 [label="param CSharpCompilation(this) 799989"];
476 [label="eventQueue 799990"];
477 [label="param CSharpCompilation(this) 799991"];
478 [label="_options 799992"];
479 [label="_globalImports 799993"];
480 [label="_previousSubmissionImports 799994"];
481 [label="_globalNamespaceAlias 799995"];
482 [label="_scriptClass 799996"];
483 [label="_lazyHostObjectTypeSymbol 799997"];
484 [label="_lazyImportInfos 799998"];
485 [label="_conversions 799999"];
486 [label="_anonymousTypeManager 800000"];
487 [label="_lazyGlobalNamespace 800001"];
488 [label="builtInOperators 800002"];
489 [label="_lazyAssemblySymbol 800003"];
490 [label="_referenceManager 800004"];
491 [label="_syntaxAndDeclarations 800005"];
492 [label="_lazyEntryPoint 800006"];
493 [label="_lazyEmitNullablePublicOnly 800007"];
494 [label="_lazyCompilationUnitCompletedTrees 800008"];
495 [label="NullableAnalysisData 800009"];
496 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 800010"];
497 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 800011"];
498 [label="_externAliasTargets 800012"];
499 [label="_moduleInitializerMethods 800013"];
500 [label="_binderFactories 800014"];
501 [label="_ignoreAccessibilityBinderFactories 800015"];
502 [label="_lazyDeclarationDiagnostics 800016"];
503 [label="_declarationDiagnosticsFrozen 800017"];
504 [label="new DiagnosticBag() 800018"];
505 [label="_additionalCodegenWarnings = new DiagnosticBag() 800019"];
506 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 800020"];
507 [label="this.builtInOperators = new BuiltInOperators(this); 800021"];
508 [label="this.builtInOperators = new BuiltInOperators(this); 800022"];
509 [label="new BuiltInOperators(this) 800023"];
510 [label="param BuiltInOperators(CSharpCompilation compilation) 800024"];
511 [label="param BuiltInOperators(this) 800025"];
512 [label="_compilation 800026"];
513 [label="_builtInUnaryOperators 800027"];
514 [label="_builtInOperators 800028"];
515 [label="_compilation 800029"];
516 [label="this.builtInOperators 800030"];
517 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 800031"];
518 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 800032"];
519 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 800033"];
520 [label="LanguageVersion? result = null; 800034"];
521 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 800035"];
522 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 800036"];
523 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 800037"];
524 [label="result = version; 800038"];
525 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 800039"];
526 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 800040"];
527 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 800041"];
528 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 800042"];
529 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 800043"];
530 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 800044"];
531 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 800045"];
532 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 800046"];
533 [label="referenceManager.AssertCanReuseForCompilation(this); 800047"];
534 [label="referenceManager.AssertCanReuseForCompilation(this); 800048"];
535 [label="_referenceManager 800049"];
536 [label="Debug.Assert(_lazyAssemblySymbol is null); 800050"];
537 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 800051"];
538 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 800052"];
539 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 800053"];
540 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 800054"];
541 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 800055"];
542 [label="return compilation; 800056"];
543 [label="var compilation = createCompilationLambda(); 800057"];
544 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 800058"];
545 [label="IsNullableEnabled(compilation) 800059"];
546 [label="param IsNullableEnabled(CSharpCompilation compilation) 800060"];
547 [label="compilation.SyntaxTrees 800061"];
548 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 800062"];
549 [label="_syntaxAndDeclarations.GetLazyState() 800063"];
550 [label="param GetLazyState(this) 800064"];
551 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800065"];
552 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800066"];
553 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 800067"];
554 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 800068"];
555 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 800069"];
556 [label="param CreateState(string scriptClassName) 800070"];
557 [label="param CreateState(SourceReferenceResolver resolver) 800071"];
558 [label="param CreateState(CommonMessageProvider messageProvider) 800072"];
559 [label="param CreateState(bool isSubmission) 800073"];
560 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 800074"];
561 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 800075"];
562 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 800076"];
563 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 800077"];
564 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 800078"];
565 [label="var declTable = DeclarationTable.Empty; 800079"];
566 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 800080"];
567 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800081"];
568 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800082"];
569 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800083"];
570 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800084"];
571 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800085"];
572 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800086"];
573 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800087"];
574 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800088"];
575 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800089"];
576 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800090"];
577 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 800091"];
578 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 800092"];
579 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 800093"];
580 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 800094"];
581 [label="param AppendAllSyntaxTrees(string scriptClassName) 800095"];
582 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 800096"];
583 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 800097"];
584 [label="param AppendAllSyntaxTrees(bool isSubmission) 800098"];
585 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 800099"];
586 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 800100"];
587 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 800101"];
588 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 800102"];
589 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 800103"];
590 [label="var sourceCodeKind = tree.Options.Kind; 800104"];
591 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 800105"];
592 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 800106"];
593 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 800107"];
594 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 800108"];
595 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 800109"];
596 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 800110"];
597 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 800111"];
598 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 800112"];
599 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 800113"];
600 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 800114"];
601 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 800115"];
602 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 800116"];
603 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 800117"];
604 [label="declMapBuilder.Add(tree, lazyRoot); 800118"];
605 [label="declMapBuilder.Add(tree, lazyRoot); 800119"];
606 [label="declMapBuilder.Add(tree, lazyRoot); 800120"];
607 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 800121"];
608 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 800122"];
609 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 800123"];
610 [label="treesBuilder.Add(tree); 800124"];
611 [label="treesBuilder.Add(tree); 800125"];
612 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 800126"];
613 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 800127"];
614 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 800128"];
615 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 800129"];
616 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 800130"];
617 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 800131"];
618 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 800132"];
619 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 800133"];
620 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 800134"];
621 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 800135"];
622 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 800136"];
623 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 800137"];
624 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 800138"];
625 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 800139"];
626 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 800140"];
627 [label="param State(DeclarationTable declarationTable) 800141"];
628 [label="param State(this) 800142"];
629 [label="OrdinalMap 800143"];
630 [label="LoadDirectiveMap 800144"];
631 [label="LoadedSyntaxTreeMap 800145"];
632 [label="RootNamespaces 800146"];
633 [label="DeclarationTable 800147"];
634 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 800148"];
635 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 800149"];
636 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 800150"];
637 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 800151"];
638 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 800152"];
639 [label="this.SyntaxTrees 800153"];
640 [label="this.OrdinalMap 800154"];
641 [label="this.LoadDirectiveMap 800155"];
642 [label="this.LoadedSyntaxTreeMap 800156"];
643 [label="this.RootNamespaces 800157"];
644 [label="this.DeclarationTable 800158"];
645 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 800159"];
646 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 800160"];
647 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 800161"];
648 [label="return _lazyState; 800162"];
649 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 800163"];
650 [label="var trees = compilation.SyntaxTrees; 800164"];
651 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 800165"];
652 [label="var options = (CSharpParseOptions)trees[0].Options; 800166"];
653 [label="var options = (CSharpParseOptions)trees[0].Options; 800167"];
654 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 800168"];
655 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 800169"];
656 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 800170"];
657 [label="return compilation; 800171"];
658 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800172"];
659 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800173"];
660 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800174"];
661 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800175"];
662 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800176"];
663 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800177"];
664 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800178"];
665 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800179"];
666 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800180"];
667 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800181"];
668 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800182"];
669 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800183"];
670 [label="CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 800184"];
671 [label="param CompileAndVerify(Compilation compilation) 800185"];
672 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 800186"];
673 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 800187"];
674 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 800188"];
675 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 800189"];
676 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 800190"];
677 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 800191"];
678 [label="param CompileAndVerify(string expectedOutput = null) 800192"];
679 [label="param CompileAndVerify(int? expectedReturnCode = null) 800193"];
680 [label="param CompileAndVerify(string[] args = null) 800194"];
681 [label="param CompileAndVerify(EmitOptions emitOptions = null) 800195"];
682 [label="param CompileAndVerify(Verification verify = Verification.Passes) 800196"];
683 [label="param CompileAndVerify(this) 800197"];
684 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800198"];
685 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800199"];
686 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800200"];
687 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800201"];
688 [label="translate(sourceSymbolValidator) 800202"];
689 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 800203"];
690 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 800204"];
691 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 800205"];
692 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 800206"];
693 [label="return null; 800207"];
694 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800208"];
695 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800209"];
696 [label="translate(symbolValidator) 800210"];
697 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 800211"];
698 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 800212"];
699 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 800213"];
700 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 800214"];
701 [label="return null; 800215"];
702 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800216"];
703 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800217"];
704 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800218"];
705 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800219"];
706 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800220"];
707 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 800221"];
708 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 800222"];
709 [label="param CompileAndVerifyCommon(Compilation compilation) 800223"];
710 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 800224"];
711 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 800225"];
712 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 800226"];
713 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 800227"];
714 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 800228"];
715 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 800229"];
716 [label="param CompileAndVerifyCommon(string expectedOutput = null) 800230"];
717 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 800231"];
718 [label="param CompileAndVerifyCommon(string[] args = null) 800232"];
719 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 800233"];
720 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 800234"];
721 [label="param CompileAndVerifyCommon(this) 800235"];
722 [label="CustomAssert.NotNull(compilation); 800236"];
723 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 800237"];
724 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 800238"];
725 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 800239"];
726 [label="compilation.Options 800240"];
727 [label="get { return _options; } 800241"];
728 [label="return _options; 800242"];
729 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 800243"];
730 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 800244"];
731 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 800245"];
732 [label="CompilationVerifier result = null; 800246"];
733 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800247"];
734 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800248"];
735 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800249"];
736 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800250"];
737 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800251"];
738 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800252"];
739 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800253"];
740 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800254"];
741 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800255"];
742 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800256"];
743 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800257"];
744 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 800258"];
745 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 800259"];
746 [label="param Emit(Compilation compilation) 800260"];
747 [label="param Emit(IEnumerable<ModuleData> dependencies) 800261"];
748 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 800262"];
749 [label="param Emit(SignatureDescription[] expectedSignatures) 800263"];
750 [label="param Emit(string expectedOutput) 800264"];
751 [label="param Emit(int? expectedReturnCode) 800265"];
752 [label="param Emit(string[] args) 800266"];
753 [label="param Emit(Action<PEAssembly> assemblyValidator) 800267"];
754 [label="param Emit(Action<IModuleSymbol> symbolValidator) 800268"];
755 [label="param Emit(EmitOptions emitOptions) 800269"];
756 [label="param Emit(Verification verify) 800270"];
757 [label="param Emit(this) 800271"];
758 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 800272"];
759 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 800273"];
760 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 800274"];
761 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 800275"];
762 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 800276"];
763 [label="param CompilationVerifier(Compilation compilation) 800277"];
764 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 800278"];
765 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 800279"];
766 [label="param CompilationVerifier(this) 800280"];
767 [label="_compilation 800281"];
768 [label="_testData 800282"];
769 [label="_dependencies 800283"];
770 [label="_lazyModuleSymbol 800284"];
771 [label="_allModuleData 800285"];
772 [label="_visualizeRealIL 800286"];
773 [label="_compilation 800287"];
774 [label="_dependencies 800288"];
775 [label="_visualizeRealIL 800289"];
776 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800290"];
777 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800291"];
778 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800292"];
779 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800293"];
780 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800294"];
781 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800295"];
782 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 800296"];
783 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 800297"];
784 [label="param Emit(string expectedOutput) 800298"];
785 [label="param Emit(int? expectedReturnCode) 800299"];
786 [label="param Emit(string[] args) 800300"];
787 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 800301"];
788 [label="param Emit(EmitOptions emitOptions) 800302"];
789 [label="param Emit(Verification peVerify) 800303"];
790 [label="param Emit(SignatureDescription[] expectedSignatures) 800304"];
791 [label="param Emit(this) 800305"];
792 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 800306"];
793 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 800307"];
794 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 800308"];
795 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 800309"];
796 [label="RuntimeEnvironmentFactory.Create(_dependencies) 800310"];
797 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 800311"];
798 [label="return s_lazyFactory.Value.Create(additionalDependencies); 800312"];
799 [label="return s_lazyFactory.Value.Create(additionalDependencies); 800313"];
800 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 800314"];
801 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 800315"];
802 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 800316"];
803 [label="Emit(testEnvironment, manifestResources, emitOptions) 800317"];
804 [label="param Emit(IRuntimeEnvironment testEnvironment) 800318"];
805 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 800319"];
806 [label="param Emit(EmitOptions emitOptions) 800320"];
807 [label="param Emit(this) 800321"];
808 [label="s_dumpCount 800322"];
809 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 800323"];
810 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 800324"];
811 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 800325"];
812 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 800326"];
813 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 800327"];
814 [label="param EmitCompilation(Compilation compilation) 800328"];
815 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 800329"];
816 [label="param EmitCompilation(List<ModuleData> dependencies) 800330"];
817 [label="param EmitCompilation(DiagnosticBag diagnostics) 800331"];
818 [label="param EmitCompilation(CompilationTestData testData) 800332"];
819 [label="param EmitCompilation(EmitOptions emitOptions) 800333"];
820 [label="var referencedCompilations = FindReferencedCompilations(compilation); 800334"];
821 [label="FindReferencedCompilations(compilation) 800335"];
822 [label="param FindReferencedCompilations(Compilation original) 800336"];
823 [label="var list = new List<Compilation>(); 800337"];
824 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 800338"];
825 [label="FindDirectReferencedCompilations(original) 800339"];
826 [label="param FindDirectReferencedCompilations(Compilation compilation) 800340"];
827 [label="var list = new List<Compilation>(); 800341"];
828 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 800342"];
829 [label="compilation.ScriptCompilationInfo 800343"];
830 [label="=> ScriptCompilationInfo 800344"];
831 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 800345"];
832 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 800346"];
833 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 800347"];
834 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 800348"];
835 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 800349"];
836 [label="GetBoundReferenceManager() 800350"];
837 [label="param GetBoundReferenceManager(this) 800351"];
838 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800352"];
839 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 800353"];
840 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 800354"];
841 [label="get { return this.Declarations.ReferenceDirectives; } 800355"];
842 [label="this.Declarations 800356"];
843 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 800357"];
844 [label="_syntaxAndDeclarations.GetLazyState() 800358"];
845 [label="param GetLazyState(this) 800359"];
846 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 800360"];
847 [label="return this.Declarations.ReferenceDirectives; 800361"];
848 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 800362"];
849 [label="_syntaxAndDeclarations.GetLazyState() 800363"];
850 [label="Debug.Assert(_lazyAssemblySymbol is object); 800364"];
851 [label="return _referenceManager; 800365"];
852 [label="return GetBoundReferenceManager().DirectiveReferences; 800366"];
853 [label="return list; 800367"];
854 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 800368"];
855 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 800369"];
856 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 800370"];
857 [label="return list; 800371"];
858 [label="var referencedCompilations = FindReferencedCompilations(compilation); 800372"];
859 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 800373"];
860 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 800374"];
861 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 800375"];
862 [label="new[] { compilation } 800376"];
863 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 800377"];
864 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 800378"];
865 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 800379"];
866 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 800380"];
867 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 800381"];
868 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 800382"];
869 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 800383"];
870 [label="param EmitReferences(Compilation compilation) 800384"];
871 [label="param EmitReferences(HashSet<string> fullNameSet) 800385"];
872 [label="param EmitReferences(List<ModuleData> dependencies) 800386"];
873 [label="param EmitReferences(DiagnosticBag diagnostics) 800387"];
874 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 800388"];
875 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 800389"];
876 [label="var peRef = (PortableExecutableReference)metadataReference; 800390"];
877 [label="var metadata = peRef.GetMetadataNoCopy(); 800391"];
878 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 800392"];
879 [label="isManifestModule 800393"];
880 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 800394"];
881 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 800395"];
882 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 800396"];
883 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 800397"];
884 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 800398"];
885 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 800399"];
886 [label="EnumerateModules(metadata) 800400"];
887 [label="param EnumerateModules(Metadata metadata) 800401"];
888 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 800402"];
889 [label="(metadata.Kind == MetadataImageKind.Assembly) 800403"];
890 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 800404"];
891 [label="ModuleData moduleData; 800405"];
892 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 800406"];
893 [label="fullNameSet.Add(identity.GetDisplayName()); 800407"];
894 [label="fullNameSet.Add(identity.GetDisplayName()); 800408"];
895 [label="fullNameSet.Add(identity.GetDisplayName()); 800409"];
896 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 800410"];
897 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 800411"];
898 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 800412"];
899 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 800413"];
900 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 800414"];
901 [label="dependencies.Add(moduleData); 800415"];
902 [label="dependencies.Add(moduleData); 800416"];
903 [label="isManifestModule = false; 800417"];
904 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 800418"];
905 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 800419"];
906 [label="ModuleData moduleData; 800420"];
907 [label="isManifestModule = false; 800421"];
908 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 800422"];
909 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 800423"];
910 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 800424"];
911 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 800425"];
912 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 800426"];
913 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 800427"];
914 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 800428"];
915 [label="param EmitCompilationCore(Compilation compilation) 800429"];
916 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 800430"];
917 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 800431"];
918 [label="param EmitCompilationCore(CompilationTestData testData) 800432"];
919 [label="param EmitCompilationCore(EmitOptions emitOptions) 800433"];
920 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 800434"];
921 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 800435"];
922 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 800436"];
923 [label="using var executableStream = new MemoryStream(); 800437"];
924 [label="var pdb = default(ImmutableArray<byte>); 800438"];
925 [label="var assembly = default(ImmutableArray<byte>); 800439"];
926 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 800440"];
927 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 800441"];
928 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 800442"];
929 [label="compilation.SyntaxTrees 800443"];
930 [label="get\n            {\n                return this.SyntaxTrees;\n            } 800444"];
931 [label="this.SyntaxTrees 800445"];
932 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 800446"];
933 [label="_syntaxAndDeclarations.GetLazyState() 800447"];
934 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800448"];
935 [label="return this.SyntaxTrees; 800449"];
936 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 800450"];
937 [label="EmitResult result; 800451"];
938 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800452"];
939 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800453"];
940 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800454"];
941 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800455"];
942 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800456"];
943 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800457"];
944 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800458"];
945 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800459"];
946 [label="get { return _syntaxAndDeclarations.MessageProvider; } 800460"];
947 [label="return _syntaxAndDeclarations.MessageProvider; 800461"];
948 [label="param CreateModuleBuilder(EmitOptions emitOptions) 800462"];
949 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 800463"];
950 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 800464"];
951 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 800465"];
952 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 800466"];
953 [label="param CreateModuleBuilder(CompilationTestData? testData) 800467"];
954 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 800468"];
955 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 800469"];
956 [label="param CreateModuleBuilder(this) 800470"];
957 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 800471"];
958 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 800472"];
959 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 800473"];
960 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 800474"];
961 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 800475"];
962 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 800476"];
963 [label="param GetRuntimeMetadataVersion(this) 800477"];
964 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 800478"];
965 [label="GetRuntimeMetadataVersion(emitOptions) 800479"];
966 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 800480"];
967 [label="param GetRuntimeMetadataVersion(this) 800481"];
968 [label="Assembly 800482"];
969 [label="get\n            {\n                return SourceAssembly;\n            } 800483"];
970 [label="SourceAssembly 800484"];
971 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 800485"];
972 [label="GetBoundReferenceManager() 800486"];
973 [label="param GetBoundReferenceManager(this) 800487"];
974 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800488"];
975 [label="return _referenceManager; 800489"];
976 [label="GetBoundReferenceManager(); 800490"];
977 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 800491"];
978 [label="return _lazyAssemblySymbol; 800492"];
979 [label="return SourceAssembly; 800493"];
980 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 800494"];
981 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 800495"];
982 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 800496"];
983 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 800497"];
984 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 800498"];
985 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 800499"];
986 [label="return runtimeMDVersion; 800500"];
987 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 800501"];
988 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 800502"];
989 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 800503"];
990 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 800504"];
991 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 800505"];
992 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 800506"];
993 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 800507"];
994 [label="get { return SourceAssembly.IsDelaySigned; } 800508"];
995 [label="SourceAssembly 800509"];
996 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 800510"];
997 [label="GetBoundReferenceManager() 800511"];
998 [label="param GetBoundReferenceManager(this) 800512"];
999 [label="GetBoundReferenceManager(); 800513"];
1000 [label="return SourceAssembly.IsDelaySigned; 800514"];
1001 [label="SourceAssembly.IsDelaySigned 800515"];
1002 [label="get\n            {\n                return _options;\n            } 800516"];
1003 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 800517"];
1004 [label="Declarations 800518"];
1005 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 800519"];
1006 [label="_syntaxAndDeclarations.GetLazyState() 800520"];
1007 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800521"];
1008 [label="return Declarations.GetMergedRoot(this); 800522"];
1009 [label="return Declarations.GetMergedRoot(this); 800523"];
1010 [label="return Declarations.GetMergedRoot(this); 800524"];
1011 [label="_syntaxAndDeclarations.GetLazyState() 800525"];
1012 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800526"];
1013 [label="get { return SourceAssembly.StrongNameKeys; } 800527"];
1014 [label="SourceAssembly 800528"];
1015 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 800529"];
1016 [label="GetBoundReferenceManager() 800530"];
1017 [label="param GetBoundReferenceManager(this) 800531"];
1018 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800532"];
1019 [label="return _referenceManager; 800533"];
1020 [label="GetBoundReferenceManager(); 800534"];
1021 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 800535"];
1022 [label="return SourceAssembly.StrongNameKeys; 800536"];
1023 [label="SourceAssembly.StrongNameKeys 800537"];
1024 [label="get\n            {\n                return _options;\n            } 800538"];
1025 [label="=> 0x30 800539"];
1026 [label="0x30 800540"];
1027 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 800541"];
1028 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 800542"];
1029 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 800543"];
1030 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 800544"];
1031 [label="PEModuleBuilder moduleBeingBuilt; 800545"];
1032 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 800546"];
1033 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 800547"];
1034 [label="_options.OutputKind.IsValid() 800548"];
1035 [label="_options.OutputKind 800549"];
1036 [label="SourceAssembly 800550"];
1037 [label="GetBoundReferenceManager() 800551"];
1038 [label="GetBoundReferenceManager(); 800552"];
1039 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 800553"];
1040 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 800554"];
1041 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 800555"];
1042 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 800556"];
1043 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 800557"];
1044 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 800558"];
1045 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 800559"];
1046 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 800560"];
1047 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 800561"];
1048 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 800562"];
1049 [label="param PEAssemblyBuilder(OutputKind outputKind) 800563"];
1050 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 800564"];
1051 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 800565"];
1052 [label="param PEAssemblyBuilder(this) 800566"];
1053 [label="sourceAssembly 800567"];
1054 [label="emitOptions 800568"];
1055 [label="outputKind 800569"];
1056 [label="serializationProperties 800570"];
1057 [label="manifestResources 800571"];
1058 [label="ImmutableArray<NamedTypeSymbol>.Empty 800572"];
1059 [label="param PEAssemblyBuilder(this) 800573"];
1060 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 800574"];
1061 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 800575"];
1062 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 800576"];
1063 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 800577"];
1064 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 800578"];
1065 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 800579"];
1066 [label="param PEAssemblyBuilderBase(this) 800580"];
1067 [label="0 800581"];
1068 [label="sourceAssembly.Modules[0] 800582"];
1069 [label="emitOptions 800583"];
1070 [label="outputKind 800584"];
1071 [label="serializationProperties 800585"];
1072 [label="manifestResources 800586"];
1073 [label="param PEAssemblyBuilderBase(this) 800587"];
1074 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 800588"];
1075 [label="param PEModuleBuilder(EmitOptions emitOptions) 800589"];
1076 [label="param PEModuleBuilder(OutputKind outputKind) 800590"];
1077 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 800591"];
1078 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 800592"];
1079 [label="param PEModuleBuilder(this) 800593"];
1080 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 800594"];
1081 [label="sourceModule 800595"];
1082 [label="serializationProperties 800596"];
1083 [label="manifestResources 800597"];
1084 [label="outputKind 800598"];
1085 [label="emitOptions 800599"];
1086 [label="new ModuleCompilationState() 800600"];
1087 [label="param ModuleCompilationState(this) 800601"];
1088 [label="param PEModuleBuilder(this) 800602"];
1089 [label="param PEModuleBuilder(this) 800603"];
1090 [label="get\n            {\n                return true;\n            } 800604"];
1091 [label="return true; 800605"];
1092 [label="param PEModuleBuilder(this) 800606"];
1093 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 800607"];
1094 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 800608"];
1095 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 800609"];
1096 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 800610"];
1097 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 800611"];
1098 [label="new ConcurrentSet<TypeSymbol>() 800612"];
1099 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 800613"];
1100 [label="_embeddedTypesManagerOpt 800614"];
1101 [label="_metadataName 800615"];
1102 [label="_fixedImplementationTypes 800616"];
1103 [label="_needsGeneratedAttributes 800617"];
1104 [label="_needsGeneratedAttributes_IsFrozen 800618"];
1105 [label="var specifiedName = sourceModule.MetadataName; 800619"];
1106 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 800620"];
1107 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 800621"];
1108 [label="_metadataName 800622"];
1109 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 800623"];
1110 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 800624"];
1111 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 800625"];
1112 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 800626"];
1113 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 800627"];
1114 [label="_sourceAssembly 800628"];
1115 [label="_lazyEmbeddedAttribute 800629"];
1116 [label="_lazyIsReadOnlyAttribute 800630"];
1117 [label="_lazyIsByRefLikeAttribute 800631"];
1118 [label="_lazyIsUnmanagedAttribute 800632"];
1119 [label="_lazyNullableAttribute 800633"];
1120 [label="_lazyNullableContextAttribute 800634"];
1121 [label="_lazyNullablePublicOnlyAttribute 800635"];
1122 [label="_lazyNativeIntegerAttribute 800636"];
1123 [label="_metadataName 800637"];
1124 [label="Debug.Assert(sourceAssembly is object); 800638"];
1125 [label="_sourceAssembly 800639"];
1126 [label="_additionalTypes = additionalTypes.NullToEmpty(); 800640"];
1127 [label="_additionalTypes 800641"];
1128 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 800642"];
1129 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 800643"];
1130 [label="(emitOptions.OutputNameOverride == null) 800644"];
1131 [label="sourceAssembly.MetadataName 800645"];
1132 [label="_metadataName 800646"];
1133 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 800647"];
1134 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 800648"];
1135 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 800649"];
1136 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 800650"];
1137 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 800651"];
1138 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 800652"];
1139 [label="moduleBeingBuilt.SourceLinkStreamOpt 800653"];
1140 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 800654"];
1141 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 800655"];
1142 [label="moduleBeingBuilt.EmbeddedTexts 800656"];
1143 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 800657"];
1144 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 800658"];
1145 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 800659"];
1146 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 800660"];
1147 [label="testData.Module 800661"];
1148 [label="return moduleBeingBuilt; 800662"];
1149 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 800663"];
1150 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 800664"];
1151 [label="param CompileMethods(bool emittingPdb) 800665"];
1152 [label="param CompileMethods(bool emitMetadataOnly) 800666"];
1153 [label="param CompileMethods(bool emitTestCoverageData) 800667"];
1154 [label="param CompileMethods(DiagnosticBag diagnostics) 800668"];
1155 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 800669"];
1156 [label="param CompileMethods(CancellationToken cancellationToken) 800670"];
1157 [label="param CompileMethods(this) 800671"];
1158 [label="PooledHashSet<int>? excludeDiagnostics = null; 800672"];
1159 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 800673"];
1160 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 800674"];
1161 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 800675"];
1162 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 800676"];
1163 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 800677"];
1164 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 800678"];
1165 [label="param GetDiagnostics(CompilationStage stage) 800679"];
1166 [label="param GetDiagnostics(bool includeEarlierStages) 800680"];
1167 [label="param GetDiagnostics(CancellationToken cancellationToken) 800681"];
1168 [label="param GetDiagnostics(this) 800682"];
1169 [label="var diagnostics = DiagnosticBag.GetInstance(); 800683"];
1170 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 800684"];
1171 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 800685"];
1172 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 800686"];
1173 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 800687"];
1174 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 800688"];
1175 [label="param GetDiagnostics(CompilationStage stage) 800689"];
1176 [label="param GetDiagnostics(bool includeEarlierStages) 800690"];
1177 [label="param GetDiagnostics(DiagnosticBag diagnostics) 800691"];
1178 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 800692"];
1179 [label="param GetDiagnostics(this) 800693"];
1180 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 800694"];
1181 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 800695"];
1182 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 800696"];
1183 [label="this.SyntaxTrees 800697"];
1184 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 800698"];
1185 [label="_syntaxAndDeclarations.GetLazyState() 800699"];
1186 [label="param GetLazyState(this) 800700"];
1187 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800701"];
1188 [label="var syntaxTrees = this.SyntaxTrees; 800702"];
1189 [label="this.Options 800703"];
1190 [label="get\n            {\n                return _options;\n            } 800704"];
1191 [label="return _options; 800705"];
1192 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 800706"];
1193 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 800707"];
1194 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 800708"];
1195 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 800709"];
1196 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 800710"];
1197 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 800711"];
1198 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 800712"];
1199 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 800713"];
1200 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 800714"];
1201 [label="ImmutableArray<LoadDirective> loadDirectives; 800715"];
1202 [label="loadDirectives 800716"];
1203 [label="syntaxAndDeclarations.GetLazyState() 800717"];
1204 [label="param GetLazyState(this) 800718"];
1205 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 800719"];
1206 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 800720"];
1207 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 800721"];
1208 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 800722"];
1209 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 800723"];
1210 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 800724"];
1211 [label="cancellationToken.ThrowIfCancellationRequested(); 800725"];
1212 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 800726"];
1213 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 800727"];
1214 [label="CheckAssemblyName(builder); 800728"];
1215 [label="CheckAssemblyName(builder); 800729"];
1216 [label="CheckAssemblyName(builder); 800730"];
1217 [label="Options 800731"];
1218 [label="get\n            {\n                return _options;\n            } 800732"];
1219 [label="return _options; 800733"];
1220 [label="builder.AddRange(Options.Errors); 800734"];
1221 [label="Options 800735"];
1222 [label="get\n            {\n                return _options;\n            } 800736"];
1223 [label="return _options; 800737"];
1224 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 800738"];
1225 [label="cancellationToken.ThrowIfCancellationRequested(); 800739"];
1226 [label="GetBoundReferenceManager() 800740"];
1227 [label="param GetBoundReferenceManager(this) 800741"];
1228 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800742"];
1229 [label="return _referenceManager; 800743"];
1230 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 800744"];
1231 [label="cancellationToken.ThrowIfCancellationRequested(); 800745"];
1232 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 800746"];
1233 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 800747"];
1234 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 800748"];
1235 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 800749"];
1236 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 800750"];
1237 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 800751"];
1238 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 800752"];
1239 [label="param GetSourceDeclarationDiagnostics(this) 800753"];
1240 [label="GlobalImports 800754"];
1241 [label="=> _globalImports.Value 800755"];
1242 [label="_globalImports.Value 800756"];
1243 [label="_globalImports.Value 800757"];
1244 [label="=> Imports.FromGlobalUsings(this) 800758"];
1245 [label="this 800759"];
1246 [label="Imports.FromGlobalUsings(this) 800760"];
1247 [label="Imports.FromGlobalUsings(this) 800761"];
1248 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 800762"];
1249 [label="ScriptCompilationInfo 800763"];
1250 [label="ScriptCompilationInfo?.PreviousScriptCompilation 800764"];
1251 [label="GlobalImports.Complete(cancellationToken); 800765"];
1252 [label="GlobalImports.Complete(cancellationToken); 800766"];
1253 [label="GlobalImports.Complete(cancellationToken); 800767"];
1254 [label="SourceLocation? location = null; 800768"];
1255 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 800769"];
1256 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 800770"];
1257 [label="Assembly 800771"];
1258 [label="get\n            {\n                return SourceAssembly;\n            } 800772"];
1259 [label="SourceAssembly 800773"];
1260 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 800774"];
1261 [label="GetBoundReferenceManager() 800775"];
1262 [label="param GetBoundReferenceManager(this) 800776"];
1263 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800777"];
1264 [label="return _referenceManager; 800778"];
1265 [label="GetBoundReferenceManager(); 800779"];
1266 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 800780"];
1267 [label="Assembly.ForceComplete(location, cancellationToken); 800781"];
1268 [label="Assembly.ForceComplete(location, cancellationToken); 800782"];
1269 [label="Assembly.ForceComplete(location, cancellationToken); 800783"];
1270 [label="Assembly.ForceComplete(location, cancellationToken); 800784"];
1271 [label="Assembly.ForceComplete(location, cancellationToken); 800785"];
1272 [label="SourceAssembly 800786"];
1273 [label="GetBoundReferenceManager() 800787"];
1274 [label="param GetBoundReferenceManager(this) 800788"];
1275 [label="GetBoundReferenceManager(); 800789"];
1276 [label="Declarations 800790"];
1277 [label="_syntaxAndDeclarations.GetLazyState() 800791"];
1278 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800792"];
1279 [label="return Declarations.GetMergedRoot(this); 800793"];
1280 [label="_syntaxAndDeclarations.GetLazyState() 800794"];
1281 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800795"];
1282 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 800796"];
1283 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 800797"];
1284 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 800798"];
1285 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 800799"];
1286 [label="var diagnostics = new DiagnosticBag(); 800800"];
1287 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 800801"];
1288 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 800802"];
1289 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 800803"];
1290 [label="return _lazyDeclarationDiagnostics; 800804"];
1291 [label="param SymbolDeclaredEvent(Symbol symbol) 800805"];
1292 [label="param SymbolDeclaredEvent(this) 800806"];
1293 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 800807"];
1294 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 800808"];
1295 [label="param GetUnaliasedReferencedAssemblies(this) 800809"];
1296 [label="GetBoundReferenceManager() 800810"];
1297 [label="param GetBoundReferenceManager(this) 800811"];
1298 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800812"];
1299 [label="return _referenceManager; 800813"];
1300 [label="var referenceManager = GetBoundReferenceManager(); 800814"];
1301 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 800815"];
1302 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 800816"];
1303 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 800817"];
1304 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 800818"];
1305 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 800819"];
1306 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 800820"];
1307 [label="return _additionalCodegenWarnings; 800821"];
1308 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800822"];
1309 [label="return _referenceManager; 800823"];
1310 [label="GetBoundReferenceManager(); 800824"];
1311 [label="param GetImports(SingleNamespaceDeclaration declaration) 800825"];
1312 [label="param GetImports(this) 800826"];
1313 [label="return GetBinderFactory(declaration.SyntaxReference.SyntaxTree).GetImportsBinder((CSharpSyntaxNode)declaration.SyntaxReference.GetSyntax()).GetImports(basesBeingResolved: null); 800827"];
1314 [label="return GetBinderFactory(declaration.SyntaxReference.SyntaxTree).GetImportsBinder((CSharpSyntaxNode)declaration.SyntaxReference.GetSyntax()).GetImports(basesBeingResolved: null); 800828"];
1315 [label="GetBinderFactory(declaration.SyntaxReference.SyntaxTree) 800829"];
1316 [label="param GetBinderFactory(SyntaxTree syntaxTree) 800830"];
1317 [label="param GetBinderFactory(bool ignoreAccessibility = false) 800831"];
1318 [label="param GetBinderFactory(this) 800832"];
1319 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 800833"];
1320 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 800834"];
1321 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 800835"];
1322 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 800836"];
1323 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 800837"];
1324 [label="param GetBinderFactory(SyntaxTree syntaxTree) 800838"];
1325 [label="param GetBinderFactory(bool ignoreAccessibility) 800839"];
1326 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 800840"];
1327 [label="param GetBinderFactory(this) 800841"];
1328 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 800842"];
1329 [label="ignoreAccessibility 800843"];
1330 [label="_binderFactories 800844"];
1331 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 800845"];
1332 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 800846"];
1333 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 800847"];
1334 [label="GetSyntaxTreeOrdinal(syntaxTree) 800848"];
1335 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 800849"];
1336 [label="param GetSyntaxTreeOrdinal(this) 800850"];
1337 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 800851"];
1338 [label="this.ContainsSyntaxTree(tree) 800852"];
1339 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 800853"];
1340 [label="param ContainsSyntaxTree(this) 800854"];
1341 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 800855"];
1342 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 800856"];
1343 [label="_syntaxAndDeclarations.GetLazyState() 800857"];
1344 [label="param GetLazyState(this) 800858"];
1345 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800859"];
1346 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 800860"];
1347 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 800861"];
1348 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 800862"];
1349 [label="_syntaxAndDeclarations.GetLazyState() 800863"];
1350 [label="param GetLazyState(this) 800864"];
1351 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 800865"];
1352 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 800866"];
1353 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 800867"];
1354 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 800868"];
1355 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 800869"];
1356 [label="this.SyntaxTrees 800870"];
1357 [label="param GetLazyState(this) 800871"];
1358 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 800872"];
1359 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 800873"];
1360 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 800874"];
1361 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 800875"];
1362 [label="BinderFactory? previousFactory; 800876"];
1363 [label="var previousWeakReference = binderFactories[treeNum]; 800877"];
1364 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 800878"];
1365 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 800879"];
1366 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 800880"];
1367 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 800881"];
1368 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 800882"];
1369 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 800883"];
1370 [label="param AddNewFactory(SyntaxTree syntaxTree) 800884"];
1371 [label="param AddNewFactory(bool ignoreAccessibility) 800885"];
1372 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 800886"];
1373 [label="param AddNewFactory(this) 800887"];
1374 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 800888"];
1375 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 800889"];
1376 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 800890"];
1377 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 800891"];
1378 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 800892"];
1379 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 800893"];
1380 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 800894"];
1381 [label="BinderFactory? previousFactory; 800895"];
1382 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 800896"];
1383 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 800897"];
1384 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 800898"];
1385 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 800899"];
1386 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 800900"];
1387 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 800901"];
1388 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 800902"];
1389 [label="return newFactory; 800903"];
1390 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 800904"];
1391 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 800905"];
1392 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 800906"];
1393 [label="GetAllUnaliasedModules(modules); 800907"];
1394 [label="GetAllUnaliasedModules(modules) 800908"];
1395 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 800909"];
1396 [label="param GetAllUnaliasedModules(this) 800910"];
1397 [label="Assembly 800911"];
1398 [label="get\n            {\n                return SourceAssembly;\n            } 800912"];
1399 [label="GetBoundReferenceManager() 800913"];
1400 [label="param GetBoundReferenceManager(this) 800914"];
1401 [label="GetBoundReferenceManager(); 800915"];
1402 [label="modules.AddRange(Assembly.Modules); 800916"];
1403 [label="modules.AddRange(Assembly.Modules); 800917"];
1404 [label="GetBoundReferenceManager() 800918"];
1405 [label="param GetBoundReferenceManager(this) 800919"];
1406 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800920"];
1407 [label="return _referenceManager; 800921"];
1408 [label="var referenceManager = GetBoundReferenceManager(); 800922"];
1409 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 800923"];
1410 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 800924"];
1411 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 800925"];
1412 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 800926"];
1413 [label="GetAllUnaliasedModules(modules); 800927"];
1414 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 800928"];
1415 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 800929"];
1416 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 800930"];
1417 [label="modules.Free(); 800931"];
1418 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 800932"];
1419 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 800933"];
1420 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 800934"];
1421 [label="return _lazyGlobalNamespace; 800935"];
1422 [label="get\n            {\n                return Assembly.Modules[0];\n            } 800936"];
1423 [label="Assembly 800937"];
1424 [label="get\n            {\n                return SourceAssembly;\n            } 800938"];
1425 [label="SourceAssembly 800939"];
1426 [label="GetBoundReferenceManager() 800940"];
1427 [label="param GetBoundReferenceManager(this) 800941"];
1428 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800942"];
1429 [label="return _referenceManager; 800943"];
1430 [label="GetBoundReferenceManager(); 800944"];
1431 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 800945"];
1432 [label="return Assembly.Modules[0]; 800946"];
1433 [label="return Assembly.Modules[0]; 800947"];
1434 [label="param RecordImport(UsingDirectiveSyntax syntax) 800948"];
1435 [label="param RecordImport(this) 800949"];
1436 [label="RecordImportInternal(syntax); 800950"];
1437 [label="RecordImportInternal(syntax) 800951"];
1438 [label="param RecordImportInternal(CSharpSyntaxNode syntax) 800952"];
1439 [label="param RecordImportInternal(this) 800953"];
1440 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 800954"];
1441 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 800955"];
1442 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 800956"];
1443 [label="new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span) 800957"];
1444 [label="param ImportInfo(SyntaxTree tree) 800958"];
1445 [label="param ImportInfo(SyntaxKind kind) 800959"];
1446 [label="param ImportInfo(TextSpan span) 800960"];
1447 [label="param ImportInfo(this) 800961"];
1448 [label="this.Tree 800962"];
1449 [label="this.Kind 800963"];
1450 [label="this.Span 800964"];
1451 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 800965"];
1452 [label="param GetHashCode(this) 800966"];
1453 [label="return Hash.Combine(Tree, Span.Start); 800967"];
1454 [label="RecordImportInternal(syntax); 800968"];
1455 [label="param GetBoundReferenceManager(this) 800969"];
1456 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800970"];
1457 [label="return _referenceManager; 800971"];
1458 [label="GetBoundReferenceManager(); 800972"];
1459 [label="SourceAssembly 800973"];
1460 [label="GetBoundReferenceManager() 800974"];
1461 [label="param GetBoundReferenceManager(this) 800975"];
1462 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800976"];
1463 [label="return _referenceManager; 800977"];
1464 [label="GetBoundReferenceManager(); 800978"];
1465 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 800979"];
1466 [label="GetBoundReferenceManager() 800980"];
1467 [label="param GetBoundReferenceManager(this) 800981"];
1468 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 800982"];
1469 [label="return _referenceManager; 800983"];
1470 [label="GetBoundReferenceManager(); 800984"];
1471 [label="param GetSpecialType(SpecialType specialType) 800985"];
1472 [label="param GetSpecialType(this) 800986"];
1473 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 800987"];
1474 [label="NamedTypeSymbol result; 800988"];
1475 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 800989"];
1476 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 800990"];
1477 [label="Assembly 800991"];
1478 [label="GetBoundReferenceManager() 800992"];
1479 [label="GetBoundReferenceManager(); 800993"];
1480 [label="result = Assembly.GetSpecialType(specialType); 800994"];
1481 [label="result = Assembly.GetSpecialType(specialType); 800995"];
1482 [label="Debug.Assert(result.SpecialType == specialType); 800996"];
1483 [label="return result; 800997"];
1484 [label="param GetBinder(CSharpSyntaxNode syntax) 800998"];
1485 [label="param GetBinder(this) 800999"];
1486 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 801000"];
1487 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 801001"];
1488 [label="GetBinderFactory(syntax.SyntaxTree) 801002"];
1489 [label="param GetBinderFactory(SyntaxTree syntaxTree) 801003"];
1490 [label="param GetBinderFactory(bool ignoreAccessibility = false) 801004"];
1491 [label="param GetBinderFactory(this) 801005"];
1492 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 801006"];
1493 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 801007"];
1494 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 801008"];
1495 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 801009"];
1496 [label="param GetBinderFactory(bool ignoreAccessibility) 801010"];
1497 [label="param GetBinderFactory(this) 801011"];
1498 [label="ignoreAccessibility 801012"];
1499 [label="_binderFactories 801013"];
1500 [label="GetSyntaxTreeOrdinal(syntaxTree) 801014"];
1501 [label="param GetSyntaxTreeOrdinal(this) 801015"];
1502 [label="this.ContainsSyntaxTree(tree) 801016"];
1503 [label="param ContainsSyntaxTree(this) 801017"];
1504 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 801018"];
1505 [label="_syntaxAndDeclarations.GetLazyState() 801019"];
1506 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 801020"];
1507 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 801021"];
1508 [label="_syntaxAndDeclarations.GetLazyState() 801022"];
1509 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 801023"];
1510 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 801024"];
1511 [label="BinderFactory? previousFactory; 801025"];
1512 [label="var previousWeakReference = binderFactories[treeNum]; 801026"];
1513 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 801027"];
1514 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 801028"];
1515 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 801029"];
1516 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 801030"];
1517 [label="return previousFactory; 801031"];
1518 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 801032"];
1519 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 801033"];
1520 [label="param IsNullableAnalysisEnabledIn(this) 801034"];
1521 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 801035"];
1522 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 801036"];
1523 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 801037"];
1524 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 801038"];
1525 [label="param IsNullableAnalysisEnabledIn(this) 801039"];
1526 [label="GetNullableAnalysisValue() 801040"];
1527 [label="param GetNullableAnalysisValue(this) 801041"];
1528 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 801042"];
1529 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 801043"];
1530 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 801044"];
1531 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 801045"];
1532 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 801046"];
1533 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 801047"];
1534 [label="Options 801048"];
1535 [label="get\n            {\n                return _options;\n            } 801049"];
1536 [label="return _options; 801050"];
1537 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 801051"];
1538 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 801052"];
1539 [label="param GetBinderFactory(SyntaxTree syntaxTree) 801053"];
1540 [label="param GetBinderFactory(bool ignoreAccessibility = false) 801054"];
1541 [label="param GetBinderFactory(this) 801055"];
1542 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 801056"];
1543 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 801057"];
1544 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 801058"];
1545 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 801059"];
1546 [label="param GetBinderFactory(SyntaxTree syntaxTree) 801060"];
1547 [label="param GetBinderFactory(bool ignoreAccessibility) 801061"];
1548 [label="param GetBinderFactory(this) 801062"];
1549 [label="ignoreAccessibility 801063"];
1550 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 801064"];
1551 [label="GetSyntaxTreeOrdinal(syntaxTree) 801065"];
1552 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 801066"];
1553 [label="param GetSyntaxTreeOrdinal(this) 801067"];
1554 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 801068"];
1555 [label="this.ContainsSyntaxTree(tree) 801069"];
1556 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 801070"];
1557 [label="param ContainsSyntaxTree(this) 801071"];
1558 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 801072"];
1559 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 801073"];
1560 [label="_syntaxAndDeclarations.GetLazyState() 801074"];
1561 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 801075"];
1562 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 801076"];
1563 [label="_syntaxAndDeclarations.GetLazyState() 801077"];
1564 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 801078"];
1565 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 801079"];
1566 [label="BinderFactory? previousFactory; 801080"];
1567 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 801081"];
1568 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 801082"];
1569 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 801083"];
1570 [label="param IsFeatureEnabled(MessageID feature) 801084"];
1571 [label="compilation.SyntaxTrees 801085"];
1572 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 801086"];
1573 [label="_syntaxAndDeclarations.GetLazyState() 801087"];
1574 [label="param GetLazyState(this) 801088"];
1575 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 801089"];
1576 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 801090"];
1577 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 801091"];
1578 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 801092"];
1579 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 801093"];
1580 [label="GetBoundReferenceManager() 801094"];
1581 [label="GetBoundReferenceManager(); 801095"];
1582 [label="Debug.Assert(result.SpecialType == specialType); 801096"];
1583 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 801097"];
1584 [label="return _referenceManager; 801098"];
1585 [label="GetBoundReferenceManager(); 801099"];
1586 [label="get\n            {\n                return Assembly.Modules[0];\n            } 801100"];
1587 [label="Assembly 801101"];
1588 [label="get\n            {\n                return SourceAssembly;\n            } 801102"];
1589 [label="SourceAssembly 801103"];
1590 [label="GetBoundReferenceManager() 801104"];
1591 [label="param GetBoundReferenceManager(this) 801105"];
1592 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 801106"];
1593 [label="return _referenceManager; 801107"];
1594 [label="GetBoundReferenceManager(); 801108"];
1595 [label="return Assembly.Modules[0]; 801109"];
1596 [label="param ShouldEmitNullableAttributes(Symbol symbol) 801110"];
1597 [label="param ShouldEmitNullableAttributes(this) 801111"];
1598 [label="RoslynDebug.Assert(symbol is object); 801112"];
1599 [label="RoslynDebug.Assert(symbol is object); 801113"];
1600 [label="Debug.Assert(symbol.IsDefinition); 801114"];
1601 [label="SourceModule 801115"];
1602 [label="get\n            {\n                return Assembly.Modules[0];\n            } 801116"];
1603 [label="Assembly 801117"];
1604 [label="get\n            {\n                return SourceAssembly;\n            } 801118"];
1605 [label="SourceAssembly 801119"];
1606 [label="GetBoundReferenceManager() 801120"];
1607 [label="param GetBoundReferenceManager(this) 801121"];
1608 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 801122"];
1609 [label="return _referenceManager; 801123"];
1610 [label="GetBoundReferenceManager(); 801124"];
1611 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 801125"];
1612 [label="return Assembly.Modules[0]; 801126"];
1613 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 801127"];
1614 [label="EmitNullablePublicOnly 801128"];
1615 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 801129"];
1616 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 801130"];
1617 [label="SyntaxTrees 801131"];
1618 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 801132"];
1619 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 801133"];
1620 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 801134"];
1621 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 801135"];
1622 [label="_lazyEmitNullablePublicOnly 801136"];
1623 [label="return _lazyEmitNullablePublicOnly.Value(); 801137"];
1624 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 801138"];
1625 [label="return true; 801139"];
1626 [label="Debug.Assert(symbol.IsDefinition); 801140"];
1627 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 801141"];
1628 [label="return _referenceManager; 801142"];
1629 [label="GetBoundReferenceManager(); 801143"];
1630 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 801144"];
1631 [label="GetBoundReferenceManager() 801145"];
1632 [label="GetBoundReferenceManager(); 801146"];
1633 [label="Debug.Assert(result.SpecialType == specialType); 801147"];
1634 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 801148"];
1635 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 801149"];
1636 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 801150"];
1637 [label="_declarationDiagnosticsFrozen = true; 801151"];
1638 [label="_declarationDiagnosticsFrozen 801152"];
1639 [label="_needsGeneratedAttributes_IsFrozen = true; 801153"];
1640 [label="_needsGeneratedAttributes_IsFrozen 801154"];
1641 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 801155"];
1642 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 801156"];
1643 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 801157"];
1644 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 801158"];
1645 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 801159"];
1646 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 801160"];
1647 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 801161"];
1648 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 801162"];
1649 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 801163"];
1650 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 801164"];
1651 [label="param GetClsComplianceDiagnostics(this) 801165"];
1652 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 801166"];
1653 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 801167"];
1654 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 801168"];
1655 [label="var builder = DiagnosticBag.GetInstance(); 801169"];
1656 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 801170"];
1657 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 801171"];
1658 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 801172"];
1659 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 801173"];
1660 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 801174"];
1661 [label="param CheckCompliance(CSharpCompilation compilation) 801175"];
1662 [label="param CheckCompliance(DiagnosticBag diagnostics) 801176"];
1663 [label="param CheckCompliance(CancellationToken cancellationToken) 801177"];
1664 [label="param CheckCompliance(SyntaxTree filterTree = null) 801178"];
1665 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 801179"];
1666 [label="var queue = new ConcurrentQueue<Diagnostic>(); 801180"];
1667 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 801181"];
1668 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 801182"];
1669 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 801183"];
1670 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 801184"];
1671 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 801185"];
1672 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 801186"];
1673 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 801187"];
1674 [label="param ClsComplianceChecker(CSharpCompilation compilation) 801188"];
1675 [label="param ClsComplianceChecker(SyntaxTree filterTree) 801189"];
1676 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 801190"];
1677 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 801191"];
1678 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 801192"];
1679 [label="param ClsComplianceChecker(this) 801193"];
1680 [label="param ClsComplianceChecker(this) 801194"];
1681 [label="_compilation 801195"];
1682 [label="_filterTree 801196"];
1683 [label="_filterSpanWithinTree 801197"];
1684 [label="_diagnostics 801198"];
1685 [label="_declaredOrInheritedCompliance 801199"];
1686 [label="_compilerTasks 801200"];
1687 [label="_compilation 801201"];
1688 [label="_filterTree 801202"];
1689 [label="_filterSpanWithinTree 801203"];
1690 [label="_diagnostics 801204"];
1691 [label="_cancellationToken 801205"];
1692 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 801206"];
1693 [label="_declaredOrInheritedCompliance 801207"];
1694 [label="ConcurrentAnalysis 801208"];
1695 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 801209"];
1696 [label="null 801210"];
1697 [label="_filterTree == null 801211"];
1698 [label="_compilation.Options 801212"];
1699 [label="get\n            {\n                return _options;\n            } 801213"];
1700 [label="return _options; 801214"];
1701 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 801215"];
1702 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 801216"];
1703 [label="_compilerTasks = new ConcurrentStack<Task>(); 801217"];
1704 [label="_compilerTasks 801218"];
1705 [label="compilation.Assembly 801219"];
1706 [label="get\n            {\n                return SourceAssembly;\n            } 801220"];
1707 [label="GetBoundReferenceManager() 801221"];
1708 [label="param GetBoundReferenceManager(this) 801222"];
1709 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 801223"];
1710 [label="return _referenceManager; 801224"];
1711 [label="GetBoundReferenceManager(); 801225"];
1712 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 801226"];
1713 [label="checker.Visit(compilation.Assembly); 801227"];
1714 [label="checker.Visit(compilation.Assembly); 801228"];
1715 [label="checker.Visit(compilation.Assembly); 801229"];
1716 [label="param VisitAssembly(AssemblySymbol symbol) 801230"];
1717 [label="param VisitAssembly(this) 801231"];
1718 [label="_cancellationToken.ThrowIfCancellationRequested(); 801232"];
1719 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 801233"];
1720 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 801234"];
1721 [label="GetDeclaredOrInheritedCompliance(symbol) 801235"];
1722 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 801236"];
1723 [label="param GetDeclaredOrInheritedCompliance(this) 801237"];
1724 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801238"];
1725 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801239"];
1726 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801240"];
1727 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801241"];
1728 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 801242"];
1729 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 801243"];
1730 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 801244"];
1731 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 801245"];
1732 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 801246"];
1733 [label="Compliance compliance; 801247"];
1734 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 801248"];
1735 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 801249"];
1736 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 801250"];
1737 [label="Location ignoredLocation; 801251"];
1738 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 801252"];
1739 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 801253"];
1740 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 801254"];
1741 [label="param GetDeclaredCompliance(Symbol symbol) 801255"];
1742 [label="param GetDeclaredCompliance(out Location attributeLocation) 801256"];
1743 [label="param GetDeclaredCompliance(this) 801257"];
1744 [label="attributeLocation = null; 801258"];
1745 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 801259"];
1746 [label="return null; 801260"];
1747 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 801261"];
1748 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 801262"];
1749 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 801263"];
1750 [label="compliance = Compliance.ImpliedFalse; 801264"];
1751 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 801265"];
1752 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 801266"];
1753 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 801267"];
1754 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 801268"];
1755 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 801269"];
1756 [label="IsTrue(assemblyCompliance) 801270"];
1757 [label="param IsTrue(Compliance compliance) 801271"];
1758 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 801272"];
1759 [label="return false; 801273"];
1760 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 801274"];
1761 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 801275"];
1762 [label="ModuleSymbol module = symbol.Modules[i]; 801276"];
1763 [label="Location attributeLocation; 801277"];
1764 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 801278"];
1765 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 801279"];
1766 [label="GetDeclaredCompliance(module, out attributeLocation) 801280"];
1767 [label="param GetDeclaredCompliance(Symbol symbol) 801281"];
1768 [label="param GetDeclaredCompliance(out Location attributeLocation) 801282"];
1769 [label="param GetDeclaredCompliance(this) 801283"];
1770 [label="attributeLocation = null; 801284"];
1771 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 801285"];
1772 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 801286"];
1773 [label="i == 0 801287"];
1774 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 801288"];
1775 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 801289"];
1776 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 801290"];
1777 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 801291"];
1778 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 801292"];
1779 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 801293"];
1780 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 801294"];
1781 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 801295"];
1782 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 801296"];
1783 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 801297"];
1784 [label="GetDeclaredOrInheritedCompliance(sourceModule) 801298"];
1785 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 801299"];
1786 [label="param GetDeclaredOrInheritedCompliance(this) 801300"];
1787 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801301"];
1788 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801302"];
1789 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801303"];
1790 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801304"];
1791 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 801305"];
1792 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 801306"];
1793 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 801307"];
1794 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 801308"];
1795 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 801309"];
1796 [label="Compliance compliance; 801310"];
1797 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 801311"];
1798 [label="Location ignoredLocation; 801312"];
1799 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 801313"];
1800 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 801314"];
1801 [label="param GetDeclaredCompliance(out Location attributeLocation) 801315"];
1802 [label="param GetDeclaredCompliance(this) 801316"];
1803 [label="attributeLocation = null; 801317"];
1804 [label="return null; 801318"];
1805 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 801319"];
1806 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 801320"];
1807 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 801321"];
1808 [label="GetInheritedCompliance(symbol) 801322"];
1809 [label="param GetInheritedCompliance(Symbol symbol) 801323"];
1810 [label="param GetInheritedCompliance(this) 801324"];
1811 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 801325"];
1812 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 801326"];
1813 [label="System.Diagnostics.Debug.Assert((object)containing != null); 801327"];
1814 [label="System.Diagnostics.Debug.Assert((object)containing != null); 801328"];
1815 [label="return GetDeclaredOrInheritedCompliance(containing); 801329"];
1816 [label="GetDeclaredOrInheritedCompliance(containing) 801330"];
1817 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 801331"];
1818 [label="param GetDeclaredOrInheritedCompliance(this) 801332"];
1819 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801333"];
1820 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801334"];
1821 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801335"];
1822 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801336"];
1823 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 801337"];
1824 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 801338"];
1825 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 801339"];
1826 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 801340"];
1827 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 801341"];
1828 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 801342"];
1829 [label="return compliance; 801343"];
1830 [label="IsTrue(GetInheritedCompliance(symbol)) 801344"];
1831 [label="param IsTrue(Compliance compliance) 801345"];
1832 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 801346"];
1833 [label="return false; 801347"];
1834 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 801348"];
1835 [label="param IsTrue(Compliance compliance) 801349"];
1836 [label="Visit(symbol.GlobalNamespace); 801350"];
1837 [label="Visit(symbol.GlobalNamespace); 801351"];
1838 [label="param VisitNamespace(NamespaceSymbol symbol) 801352"];
1839 [label="param VisitNamespace(this) 801353"];
1840 [label="_cancellationToken.ThrowIfCancellationRequested(); 801354"];
1841 [label="if (DoNotVisit(symbol)) return; 801355"];
1842 [label="DoNotVisit(symbol) 801356"];
1843 [label="param DoNotVisit(Symbol symbol) 801357"];
1844 [label="param DoNotVisit(this) 801358"];
1845 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 801359"];
1846 [label="return false; 801360"];
1847 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 801361"];
1848 [label="GetDeclaredOrInheritedCompliance(symbol) 801362"];
1849 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 801363"];
1850 [label="param GetDeclaredOrInheritedCompliance(this) 801364"];
1851 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801365"];
1852 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801366"];
1853 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801367"];
1854 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 801368"];
1855 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 801369"];
1856 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 801370"];
1857 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801371"];
1858 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 801372"];
1859 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 801373"];
1860 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 801374"];
1861 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 801375"];
1862 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 801376"];
1863 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 801377"];
1864 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 801378"];
1865 [label="return compliance; 801379"];
1866 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 801380"];
1867 [label="param IsTrue(Compliance compliance) 801381"];
1868 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 801382"];
1869 [label="return false; 801383"];
1870 [label="ConcurrentAnalysis 801384"];
1871 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 801385"];
1872 [label="null 801386"];
1873 [label="_filterTree == null 801387"];
1874 [label="_compilation.Options 801388"];
1875 [label="get\n            {\n                return _options;\n            } 801389"];
1876 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 801390"];
1877 [label="VisitNamespaceMembersAsTasks(symbol); 801391"];
1878 [label="VisitNamespaceMembersAsTasks(symbol) 801392"];
1879 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 801393"];
1880 [label="param VisitNamespaceMembersAsTasks(this) 801394"];
1881 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 801395"];
1882 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 801396"];
1883 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 801397"];
1884 [label="VisitNamespaceMembersAsTasks(symbol); 801398"];
1885 [label="checker.WaitForWorkers() 801399"];
1886 [label="param WaitForWorkers(this) 801400"];
1887 [label="var tasks = _compilerTasks; 801401"];
1888 [label="if (tasks == null)\n            {\n                return;\n            } 801402"];
1889 [label="if (tasks == null)\n            {\n                return;\n            } 801403"];
1890 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 801404"];
1891 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 801405"];
1892 [label="curTask.GetAwaiter().GetResult(); 801406"];
1893 [label="checker.WaitForWorkers(); 801407"];
1894 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 801408"];
1895 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 801409"];
1896 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 801410"];
1897 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 801411"];
1898 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 801412"];
1899 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 801413"];
1900 [label="return _lazyClsComplianceDiagnostics; 801414"];
1901 [label="return result.AsImmutable().Concat(clsDiagnostics); 801415"];
1902 [label="return result.AsImmutable().Concat(clsDiagnostics); 801416"];
1903 [label="return result.AsImmutable().Concat(clsDiagnostics); 801417"];
1904 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 801418"];
1905 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 801419"];
1906 [label="cancellationToken.ThrowIfCancellationRequested(); 801420"];
1907 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 801421"];
1908 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 801422"];
1909 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 801423"];
1910 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 801424"];
1911 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 801425"];
1912 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 801426"];
1913 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 801427"];
1914 [label="return diagnostics.ToReadOnlyAndFree(); 801428"];
1915 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 801429"];
1916 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 801430"];
1917 [label="excludeDiagnostics?.Free(); 801431"];
1918 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 801432"];
1919 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 801433"];
1920 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 801434"];
1921 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 801435"];
1922 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 801436"];
1923 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 801437"];
1924 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 801438"];
1925 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 801439"];
1926 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 801440"];
1927 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 801441"];
1928 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 801442"];
1929 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 801443"];
1930 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 801444"];
1931 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 801445"];
1932 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 801446"];
1933 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 801447"];
1934 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801448"];
1935 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801449"];
1936 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801450"];
1937 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801451"];
1938 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801452"];
1939 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801453"];
1940 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801454"];
1941 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 801455"];
1942 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 801456"];
1943 [label="param CompileMethodBodies(CSharpCompilation compilation) 801457"];
1944 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 801458"];
1945 [label="param CompileMethodBodies(bool emittingPdb) 801459"];
1946 [label="param CompileMethodBodies(bool emitTestCoverageData) 801460"];
1947 [label="param CompileMethodBodies(bool hasDeclarationErrors) 801461"];
1948 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 801462"];
1949 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 801463"];
1950 [label="param CompileMethodBodies(CancellationToken cancellationToken) 801464"];
1951 [label="Debug.Assert(compilation != null); 801465"];
1952 [label="Debug.Assert(compilation != null); 801466"];
1953 [label="Debug.Assert(diagnostics != null); 801467"];
1954 [label="Debug.Assert(diagnostics != null); 801468"];
1955 [label="compilation.PreviousSubmission 801469"];
1956 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 801470"];
1957 [label="ScriptCompilationInfo 801471"];
1958 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 801472"];
1959 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 801473"];
1960 [label="MethodSymbol entryPoint = null; 801474"];
1961 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 801475"];
1962 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 801476"];
1963 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 801477"];
1964 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 801478"];
1965 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 801479"];
1966 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 801480"];
1967 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 801481"];
1968 [label="param GetEntryPoint(CSharpCompilation compilation) 801482"];
1969 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 801483"];
1970 [label="param GetEntryPoint(bool hasDeclarationErrors) 801484"];
1971 [label="param GetEntryPoint(DiagnosticBag diagnostics) 801485"];
1972 [label="param GetEntryPoint(CancellationToken cancellationToken) 801486"];
1973 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 801487"];
1974 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 801488"];
1975 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 801489"];
1976 [label="param GetEntryPointAndDiagnostics(this) 801490"];
1977 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 801491"];
1978 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 801492"];
1979 [label="EntryPoint? entryPoint; 801493"];
1980 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 801494"];
1981 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 801495"];
1982 [label="GetBoundReferenceManager() 801496"];
1983 [label="GetBoundReferenceManager(); 801497"];
1984 [label="this.Options 801498"];
1985 [label="return _options; 801499"];
1986 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 801500"];
1987 [label="entryPoint = null; 801501"];
1988 [label="this.Options 801502"];
1989 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 801503"];
1990 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 801504"];
1991 [label="if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    } 801505"];
1992 [label="ImmutableArray<Diagnostic> diagnostics; 801506"];
1993 [label="diagnostics 801507"];
1994 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 801508"];
1995 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 801509"];
1996 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 801510"];
1997 [label="FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics) 801511"];
1998 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 801512"];
1999 [label="param FindEntryPoint(CancellationToken cancellationToken) 801513"];
2000 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 801514"];
2001 [label="param FindEntryPoint(this) 801515"];
2002 [label="var diagnostics = DiagnosticBag.GetInstance(); 801516"];
2003 [label="var entryPointCandidates = ArrayBuilder<MethodSymbol>.GetInstance(); 801517"];
2004 [label="NamedTypeSymbol? mainType; 801518"];
2005 [label="this.Options 801519"];
2006 [label="get\n            {\n                return _options;\n            } 801520"];
2007 [label="string? mainTypeName = this.Options.MainTypeName; 801521"];
2008 [label="this.SourceModule 801522"];
2009 [label="get\n            {\n                return Assembly.Modules[0];\n            } 801523"];
2010 [label="GetBoundReferenceManager() 801524"];
2011 [label="param GetBoundReferenceManager(this) 801525"];
2012 [label="GetBoundReferenceManager(); 801526"];
2013 [label="NamespaceSymbol globalNamespace = this.SourceModule.GlobalNamespace; 801527"];
2014 [label="this.ScriptClass 801528"];
2015 [label="get { return _scriptClass.Value; } 801529"];
2016 [label="return _scriptClass.Value; 801530"];
2017 [label="_scriptClass.Value 801531"];
2018 [label="param BindScriptClass(this) 801532"];
2019 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 801533"];
2020 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 801534"];
2021 [label="get { return this.SourceModule.GetPublicSymbol(); } 801535"];
2022 [label="this.SourceModule 801536"];
2023 [label="get\n            {\n                return Assembly.Modules[0];\n            } 801537"];
2024 [label="GetBoundReferenceManager() 801538"];
2025 [label="param GetBoundReferenceManager(this) 801539"];
2026 [label="GetBoundReferenceManager(); 801540"];
2027 [label="return this.SourceModule.GetPublicSymbol(); 801541"];
2028 [label="var scriptClass = this.ScriptClass; 801542"];
2029 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 801543"];
2030 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 801544"];
2031 [label="mainType = null; 801545"];
2032 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 801546"];
2033 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 801547"];
2034 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 801548"];
2035 [label="this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken) 801549"];
2036 [label="param GetSymbolsWithNameCore(string name) 801550"];
2037 [label="param GetSymbolsWithNameCore(SymbolFilter filter = SymbolFilter.TypeAndMember) 801551"];
2038 [label="param GetSymbolsWithNameCore(CancellationToken cancellationToken = default) 801552"];
2039 [label="param GetSymbolsWithNameCore(this) 801553"];
2040 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 801554"];
2041 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 801555"];
2042 [label="if (filter == SymbolFilter.None)\n            {\n                throw new ArgumentException(CSharpResources.NoNoneSearchCriteria, nameof(filter));\n            } 801556"];
2043 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 801557"];
2044 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 801558"];
2045 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 801559"];
2046 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 801560"];
2047 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 801561"];
2048 [label="new NameSymbolSearcher(this, filter, name, cancellationToken) 801562"];
2049 [label="param NameSymbolSearcher(CSharpCompilation compilation) 801563"];
2050 [label="param NameSymbolSearcher(SymbolFilter filter) 801564"];
2051 [label="param NameSymbolSearcher(string name) 801565"];
2052 [label="param NameSymbolSearcher(CancellationToken cancellationToken) 801566"];
2053 [label="param NameSymbolSearcher(this) 801567"];
2054 [label="compilation 801568"];
2055 [label="filter 801569"];
2056 [label="cancellationToken 801570"];
2057 [label="param NameSymbolSearcher(this) 801571"];
2058 [label="param AbstractSymbolSearcher(CSharpCompilation compilation) 801572"];
2059 [label="param AbstractSymbolSearcher(SymbolFilter filter) 801573"];
2060 [label="param AbstractSymbolSearcher(CancellationToken cancellationToken) 801574"];
2061 [label="param AbstractSymbolSearcher(this) 801575"];
2062 [label="_cache 801576"];
2063 [label="_compilation 801577"];
2064 [label="_includeNamespace 801578"];
2065 [label="_includeType 801579"];
2066 [label="_includeMember 801580"];
2067 [label="_cache = PooledDictionary<Declaration, NamespaceOrTypeSymbol>.GetInstance(); 801581"];
2068 [label="_cache 801582"];
2069 [label="_compilation 801583"];
2070 [label="_includeNamespace = (filter & SymbolFilter.Namespace) == SymbolFilter.Namespace; 801584"];
2071 [label="_includeNamespace 801585"];
2072 [label="_includeType = (filter & SymbolFilter.Type) == SymbolFilter.Type; 801586"];
2073 [label="_includeType 801587"];
2074 [label="_includeMember = (filter & SymbolFilter.Member) == SymbolFilter.Member; 801588"];
2075 [label="_includeMember 801589"];
2076 [label="_cancellationToken 801590"];
2077 [label="_name 801591"];
2078 [label="_name 801592"];
2079 [label="new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName() 801593"];
2080 [label="param GetSymbolsWithName(this) 801594"];
2081 [label="var result = new HashSet<Symbol>(); 801595"];
2082 [label="var spine = ArrayBuilder<MergedNamespaceOrTypeDeclaration>.GetInstance(); 801596"];
2083 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 801597"];
2084 [label="_compilation.MergedRootDeclaration 801598"];
2085 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 801599"];
2086 [label="param GetLazyState(this) 801600"];
2087 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 801601"];
2088 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 801602"];
2089 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result) 801603"];
2090 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 801604"];
2091 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 801605"];
2092 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 801606"];
2093 [label="param AppendSymbolsWithName(this) 801607"];
2094 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 801608"];
2095 [label="if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 801609"];
2096 [label="spine.Add(current); 801610"];
2097 [label="spine.Add(current); 801611"];
2098 [label="foreach (var child in current.Children)\n                {\n                    if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    }\n                } 801612"];
2099 [label="if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    } 801613"];
2100 [label="if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        } 801614"];
2101 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 801615"];
2102 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 801616"];
2103 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 801617"];
2104 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set) 801618"];
2105 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 801619"];
2106 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 801620"];
2107 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 801621"];
2108 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 801622"];
2109 [label="if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 801623"];
2110 [label="if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    } 801624"];
2111 [label="var typeDeclaration = (MergedTypeDeclaration)current; 801625"];
2112 [label="if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        } 801626"];
2113 [label="ShouldCheckTypeForMembers(typeDeclaration) 801627"];
2114 [label="param ShouldCheckTypeForMembers(MergedTypeDeclaration current) 801628"];
2115 [label="param ShouldCheckTypeForMembers(this) 801629"];
2116 [label="foreach (SingleTypeDeclaration typeDecl in current.Declarations)\n                {\n                    if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    }\n                } 801630"];
2117 [label="if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    } 801631"];
2118 [label="return true; 801632"];
2119 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 801633"];
2120 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 801634"];
2121 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 801635"];
2122 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set) 801636"];
2123 [label="param AppendMemberSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 801637"];
2124 [label="param AppendMemberSymbolsWithName(MergedTypeDeclaration current) 801638"];
2125 [label="param AppendMemberSymbolsWithName(HashSet<Symbol> set) 801639"];
2126 [label="param AppendMemberSymbolsWithName(this) 801640"];
2127 [label="_cancellationToken.ThrowIfCancellationRequested(); 801641"];
2128 [label="spine.Add(current); 801642"];
2129 [label="spine.Add(current); 801643"];
2130 [label="var container = GetSpineSymbol(spine); 801644"];
2131 [label="GetSpineSymbol(spine) 801645"];
2132 [label="param GetSpineSymbol(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 801646"];
2133 [label="param GetSpineSymbol(this) 801647"];
2134 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 801648"];
2135 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 801649"];
2136 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 801650"];
2137 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 801651"];
2138 [label="GetCachedSymbol(spine[spine.Count - 1]) 801652"];
2139 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 801653"];
2140 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 801654"];
2141 [label="declaration 801655"];
2142 [label="symbol 801656"];
2143 [label="out NamespaceOrTypeSymbol? symbol 801657"];
2144 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 801658"];
2145 [label="null 801659"];
2146 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 801660"];
2147 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 801661"];
2148 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 801662"];
2149 [label="_compilation.GlobalNamespace 801663"];
2150 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 801664"];
2151 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 801665"];
2152 [label="return _lazyGlobalNamespace; 801666"];
2153 [label="NamespaceOrTypeSymbol? current = _compilation.GlobalNamespace; 801667"];
2154 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 801668"];
2155 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 801669"];
2156 [label="current = GetSymbol(current, spine[i]); 801670"];
2157 [label="current = GetSymbol(current, spine[i]); 801671"];
2158 [label="GetSymbol(current, spine[i]) 801672"];
2159 [label="param GetSymbol(NamespaceOrTypeSymbol? container) 801673"];
2160 [label="param GetSymbol(MergedNamespaceOrTypeDeclaration declaration) 801674"];
2161 [label="param GetSymbol(this) 801675"];
2162 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 801676"];
2163 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 801677"];
2164 [label="if (declaration.Kind == DeclarationKind.Namespace)\n                {\n                    AddCache(container.GetMembers(declaration.Name).OfType<NamespaceOrTypeSymbol>());\n                }\n                else\n                {\n                    AddCache(container.GetTypeMembers(declaration.Name));\n                } 801678"];
2165 [label="AddCache(container.GetTypeMembers(declaration.Name)); 801679"];
2166 [label="AddCache(container.GetTypeMembers(declaration.Name)); 801680"];
2167 [label="AddCache(container.GetTypeMembers(declaration.Name)) 801681"];
2168 [label="param AddCache(IEnumerable<NamespaceOrTypeSymbol> symbols) 801682"];
2169 [label="param AddCache(this) 801683"];
2170 [label="foreach (var symbol in symbols)\n                {\n                    var mergedNamespace = symbol as MergedNamespaceSymbol;\n                    if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    }\n\n                    var sourceNamespace = symbol as SourceNamespaceSymbol;\n                    if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    }\n\n                    var sourceType = symbol as SourceMemberContainerTypeSymbol;\n                    if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    }\n                } 801684"];
2171 [label="var mergedNamespace = symbol as MergedNamespaceSymbol; 801685"];
2172 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 801686"];
2173 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 801687"];
2174 [label="var sourceNamespace = symbol as SourceNamespaceSymbol; 801688"];
2175 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 801689"];
2176 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 801690"];
2177 [label="var sourceType = symbol as SourceMemberContainerTypeSymbol; 801691"];
2178 [label="if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    } 801692"];
2179 [label="_cache 801693"];
2180 [label="AddCache(container.GetTypeMembers(declaration.Name)); 801694"];
2181 [label="return GetCachedSymbol(declaration); 801695"];
2182 [label="GetCachedSymbol(declaration) 801696"];
2183 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 801697"];
2184 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 801698"];
2185 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 801699"];
2186 [label="symbol 801700"];
2187 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 801701"];
2188 [label="return current; 801702"];
2189 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 801703"];
2190 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 801704"];
2191 [label="new LexicalOrderSymbolComparer() 801705"];
2192 [label="param LexicalOrderSymbolComparer(this) 801706"];
2193 [label="Instance = new LexicalOrderSymbolComparer() 801707"];
2194 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 801708"];
2195 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 801709"];
2196 [label="param Compare(Symbol x) 801710"];
2197 [label="param Compare(Symbol y) 801711"];
2198 [label="param Compare(this) 801712"];
2199 [label="int comparison; 801713"];
2200 [label="if (x == y)\n            {\n                return 0;\n            } 801714"];
2201 [label="var xSortKey = x.GetLexicalSortKey(); 801715"];
2202 [label="var xSortKey = x.GetLexicalSortKey(); 801716"];
2203 [label="var ySortKey = y.GetLexicalSortKey(); 801717"];
2204 [label="var ySortKey = y.GetLexicalSortKey(); 801718"];
2205 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 801719"];
2206 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 801720"];
2207 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 801721"];
2208 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 801722"];
2209 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 801723"];
2210 [label="return comparison; 801724"];
2211 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 801725"];
2212 [label="if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        } 801726"];
2213 [label="Matches(member.Name) 801727"];
2214 [label="param Matches(string name) 801728"];
2215 [label="=> _name == name 801729"];
2216 [label="_name == name 801730"];
2217 [label="Matches(member.Name) 801731"];
2218 [label="param Matches(string name) 801732"];
2219 [label="=> _name == name 801733"];
2220 [label="_name == name 801734"];
2221 [label="set.Add(member); 801735"];
2222 [label="set.Add(member); 801736"];
2223 [label="spine.RemoveAt(spine.Count - 1); 801737"];
2224 [label="spine.RemoveAt(spine.Count - 1); 801738"];
2225 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 801739"];
2226 [label="spine.RemoveAt(spine.Count - 1); 801740"];
2227 [label="spine.RemoveAt(spine.Count - 1); 801741"];
2228 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 801742"];
2229 [label="spine.RemoveAt(spine.Count - 1); 801743"];
2230 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 801744"];
2231 [label="spine.Free(); 801745"];
2232 [label="_cache.Free(); 801746"];
2233 [label="return result; 801747"];
2234 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 801748"];
2235 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 801749"];
2236 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)) 801750"];
2237 [label="param AddEntryPointCandidates(ArrayBuilder<MethodSymbol> entryPointCandidates) 801751"];
2238 [label="param AddEntryPointCandidates(IEnumerable<Symbol> members) 801752"];
2239 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 801753"];
2240 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 801754"];
2241 [label="if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                } 801755"];
2242 [label="entryPointCandidates.Add(method); 801756"];
2243 [label="entryPointCandidates.Add(method); 801757"];
2244 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 801758"];
2245 [label="if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    } 801759"];
2246 [label="var taskEntryPoints = ArrayBuilder<(bool IsValid, MethodSymbol Candidate, DiagnosticBag SpecificDiagnostics)>.GetInstance(); 801760"];
2247 [label="DiagnosticBag noMainFoundDiagnostics = DiagnosticBag.GetInstance(); 801761"];
2248 [label="var viableEntryPoints = ArrayBuilder<MethodSymbol>.GetInstance(); 801762"];
2249 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 801763"];
2250 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 801764"];
2251 [label="var perCandidateBag = DiagnosticBag.GetInstance(); 801765"];
2252 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 801766"];
2253 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 801767"];
2254 [label="HasEntryPointSignature(candidate, perCandidateBag) 801768"];
2255 [label="param HasEntryPointSignature(MethodSymbol method) 801769"];
2256 [label="param HasEntryPointSignature(DiagnosticBag bag) 801770"];
2257 [label="param HasEntryPointSignature(this) 801771"];
2258 [label="if (method.IsVararg)\n            {\n                return (false, false);\n            } 801772"];
2259 [label="TypeSymbol returnType = method.ReturnType; 801773"];
2260 [label="bool returnsTaskOrTaskOfInt = false; 801774"];
2261 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 801775"];
2262 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 801776"];
2263 [label="if (method.RefKind != RefKind.None)\n            {\n                return (false, returnsTaskOrTaskOfInt);\n            } 801777"];
2264 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 801778"];
2265 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 801779"];
2266 [label="return (true, returnsTaskOrTaskOfInt); 801780"];
2267 [label="true 801781"];
2268 [label="returnsTaskOrTaskOfInt 801782"];
2269 [label="if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    } 801783"];
2270 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 801784"];
2271 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 801785"];
2272 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 801786"];
2273 [label="checkValid(candidate, IsCandidate, perCandidateBag) 801787"];
2274 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 801788"];
2275 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 801789"];
2276 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 801790"];
2277 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 801791"];
2278 [label="if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    } 801792"];
2279 [label="if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    } 801793"];
2280 [label="return true; 801794"];
2281 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 801795"];
2282 [label="if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            } 801796"];
2283 [label="diagnostics.AddRange(perCandidateBag); 801797"];
2284 [label="diagnostics.AddRange(perCandidateBag); 801798"];
2285 [label="viableEntryPoints.Add(candidate); 801799"];
2286 [label="viableEntryPoints.Add(candidate); 801800"];
2287 [label="perCandidateBag.Free(); 801801"];
2288 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 801802"];
2289 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 801803"];
2290 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 801804"];
2291 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 801805"];
2292 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 801806"];
2293 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 801807"];
2294 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 801808"];
2295 [label="if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 801809"];
2296 [label="foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    } 801810"];
2297 [label="MethodSymbol? entryPoint = null; 801811"];
2298 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 801812"];
2299 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 801813"];
2300 [label="foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    } 801814"];
2301 [label="if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        } 801815"];
2302 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 801816"];
2303 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 801817"];
2304 [label="entryPoint = viableEntryPoints[0]; 801818"];
2305 [label="taskEntryPoints.Free(); 801819"];
2306 [label="viableEntryPoints.Free(); 801820"];
2307 [label="noMainFoundDiagnostics.Free(); 801821"];
2308 [label="return entryPoint; 801822"];
2309 [label="entryPointCandidates.Free(); 801823"];
2310 [label="sealedDiagnostics = diagnostics.ToReadOnlyAndFree(); 801824"];
2311 [label="null 801825"];
2312 [label="ImmutableArray<Diagnostic>.Empty 801826"];
2313 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 801827"];
2314 [label="param EntryPoint(MethodSymbol? methodSymbol) 801828"];
2315 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 801829"];
2316 [label="param EntryPoint(this) 801830"];
2317 [label="MethodSymbol 801831"];
2318 [label="this.MethodSymbol 801832"];
2319 [label="this.Diagnostics 801833"];
2320 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 801834"];
2321 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 801835"];
2322 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 801836"];
2323 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 801837"];
2324 [label="new EntryPoint(entryPointMethod, diagnostics) 801838"];
2325 [label="param EntryPoint(MethodSymbol? methodSymbol) 801839"];
2326 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 801840"];
2327 [label="param EntryPoint(this) 801841"];
2328 [label="MethodSymbol 801842"];
2329 [label="this.MethodSymbol 801843"];
2330 [label="this.Diagnostics 801844"];
2331 [label="this.Options 801845"];
2332 [label="return _options; 801846"];
2333 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 801847"];
2334 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 801848"];
2335 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 801849"];
2336 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 801850"];
2337 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 801851"];
2338 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 801852"];
2339 [label="return _lazyEntryPoint; 801853"];
2340 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 801854"];
2341 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 801855"];
2342 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 801856"];
2343 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 801857"];
2344 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 801858"];
2345 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 801859"];
2346 [label="SynthesizedEntryPointSymbol synthesizedEntryPoint = entryPoint as SynthesizedEntryPointSymbol; 801860"];
2347 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 801861"];
2348 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 801862"];
2349 [label="var returnType = entryPoint.ReturnType; 801863"];
2350 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 801864"];
2351 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 801865"];
2352 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 801866"];
2353 [label="GetBoundReferenceManager() 801867"];
2354 [label="param GetBoundReferenceManager(this) 801868"];
2355 [label="GetBoundReferenceManager(); 801869"];
2356 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 801870"];
2357 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 801871"];
2358 [label="return entryPoint; 801872"];
2359 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801873"];
2360 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801874"];
2361 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801875"];
2362 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801876"];
2363 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801877"];
2364 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801878"];
2365 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801879"];
2366 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801880"];
2367 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801881"];
2368 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 801882"];
2369 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 801883"];
2370 [label="param MethodCompiler(CSharpCompilation compilation) 801884"];
2371 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 801885"];
2372 [label="param MethodCompiler(bool emittingPdb) 801886"];
2373 [label="param MethodCompiler(bool emitTestCoverageData) 801887"];
2374 [label="param MethodCompiler(bool hasDeclarationErrors) 801888"];
2375 [label="param MethodCompiler(DiagnosticBag diagnostics) 801889"];
2376 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 801890"];
2377 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 801891"];
2378 [label="param MethodCompiler(CancellationToken cancellationToken) 801892"];
2379 [label="param MethodCompiler(this) 801893"];
2380 [label="param MethodCompiler(this) 801894"];
2381 [label="_compilation 801895"];
2382 [label="_emittingPdb 801896"];
2383 [label="_emitTestCoverageData 801897"];
2384 [label="_diagnostics 801898"];
2385 [label="_hasDeclarationErrors 801899"];
2386 [label="_moduleBeingBuiltOpt 801900"];
2387 [label="_filterOpt 801901"];
2388 [label="_debugDocumentProvider 801902"];
2389 [label="_entryPointOpt 801903"];
2390 [label="_compilerTasks 801904"];
2391 [label="_globalHasErrors 801905"];
2392 [label="Debug.Assert(compilation != null); 801906"];
2393 [label="Debug.Assert(compilation != null); 801907"];
2394 [label="Debug.Assert(diagnostics != null); 801908"];
2395 [label="Debug.Assert(diagnostics != null); 801909"];
2396 [label="_compilation 801910"];
2397 [label="_moduleBeingBuiltOpt 801911"];
2398 [label="_emittingPdb 801912"];
2399 [label="_cancellationToken 801913"];
2400 [label="_diagnostics 801914"];
2401 [label="_filterOpt 801915"];
2402 [label="_entryPointOpt 801916"];
2403 [label="_hasDeclarationErrors 801917"];
2404 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 801918"];
2405 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 801919"];
2406 [label="param SetGlobalErrorIfTrue(bool arg) 801920"];
2407 [label="param SetGlobalErrorIfTrue(this) 801921"];
2408 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 801922"];
2409 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 801923"];
2410 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 801924"];
2411 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 801925"];
2412 [label="_debugDocumentProvider 801926"];
2413 [label="_emitTestCoverageData 801927"];
2414 [label="compilation.Options 801928"];
2415 [label="get\n            {\n                return _options;\n            } 801929"];
2416 [label="return _options; 801930"];
2417 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 801931"];
2418 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 801932"];
2419 [label="methodCompiler._compilerTasks 801933"];
2420 [label="compilation.SourceModule 801934"];
2421 [label="get\n            {\n                return Assembly.Modules[0];\n            } 801935"];
2422 [label="Assembly 801936"];
2423 [label="get\n            {\n                return SourceAssembly;\n            } 801937"];
2424 [label="SourceAssembly 801938"];
2425 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 801939"];
2426 [label="GetBoundReferenceManager() 801940"];
2427 [label="param GetBoundReferenceManager(this) 801941"];
2428 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 801942"];
2429 [label="return _referenceManager; 801943"];
2430 [label="GetBoundReferenceManager(); 801944"];
2431 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 801945"];
2432 [label="return Assembly.Modules[0]; 801946"];
2433 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 801947"];
2434 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 801948"];
2435 [label="param CompileNamespace(NamespaceSymbol symbol) 801949"];
2436 [label="param CompileNamespace(this) 801950"];
2437 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 801951"];
2438 [label="s.Accept(this, null); 801952"];
2439 [label="s.Accept(this, null); 801953"];
2440 [label="s.Accept(this, null); 801954"];
2441 [label="param VisitNamedType(NamedTypeSymbol symbol) 801955"];
2442 [label="param VisitNamedType(TypeCompilationState arg) 801956"];
2443 [label="param VisitNamedType(this) 801957"];
2444 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 801958"];
2445 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 801959"];
2446 [label="PassesFilter(_filterOpt, symbol) 801960"];
2447 [label="param PassesFilter(Predicate<Symbol> filterOpt) 801961"];
2448 [label="param PassesFilter(Symbol symbol) 801962"];
2449 [label="return (filterOpt == null) || filterOpt(symbol); 801963"];
2450 [label="return (filterOpt == null) || filterOpt(symbol); 801964"];
2451 [label="arg = null; 801965"];
2452 [label="_cancellationToken.ThrowIfCancellationRequested(); 801966"];
2453 [label="_compilation.Options 801967"];
2454 [label="get\n            {\n                return _options;\n            } 801968"];
2455 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 801969"];
2456 [label="Task worker = CompileNamedTypeAsync(symbol); 801970"];
2457 [label="CompileNamedTypeAsync(symbol) 801971"];
2458 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 801972"];
2459 [label="param CompileNamedTypeAsync(this) 801973"];
2460 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 801974"];
2461 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 801975"];
2462 [label="Task worker = CompileNamedTypeAsync(symbol); 801976"];
2463 [label="_compilerTasks.Push(worker); 801977"];
2464 [label="return null; 801978"];
2465 [label="s.Accept(this, null); 801979"];
2466 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 801980"];
2467 [label="methodCompiler.WaitForWorkers() 801981"];
2468 [label="param WaitForWorkers(this) 801982"];
2469 [label="var tasks = _compilerTasks; 801983"];
2470 [label="if (tasks == null)\n            {\n                return;\n            } 801984"];
2471 [label="if (tasks == null)\n            {\n                return;\n            } 801985"];
2472 [label="Task curTask; 801986"];
2473 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 801987"];
2474 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 801988"];
2475 [label="curTask.GetAwaiter().GetResult(); 801989"];
2476 [label="methodCompiler.WaitForWorkers(); 801990"];
2477 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 801991"];
2478 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 801992"];
2479 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 801993"];
2480 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 801994"];
2481 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 801995"];
2482 [label="=> _additionalTypes 801996"];
2483 [label="_additionalTypes 801997"];
2484 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 801998"];
2485 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 801999"];
2486 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 802000"];
2487 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 802001"];
2488 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 802002"];
2489 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 802003"];
2490 [label="param CompileSynthesizedMethods(this) 802004"];
2491 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 802005"];
2492 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 802006"];
2493 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 802007"];
2494 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 802008"];
2495 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 802009"];
2496 [label="param GetEmbeddedTypes(this) 802010"];
2497 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 802011"];
2498 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 802012"];
2499 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 802013"];
2500 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 802014"];
2501 [label="param CreateEmbeddedAttributesIfNeeded(this) 802015"];
2502 [label="GetNeedsGeneratedAttributes() 802016"];
2503 [label="param GetNeedsGeneratedAttributes(this) 802017"];
2504 [label="_needsGeneratedAttributes_IsFrozen = true; 802018"];
2505 [label="_needsGeneratedAttributes_IsFrozen 802019"];
2506 [label="GetNeedsGeneratedAttributesInternal() 802020"];
2507 [label="param GetNeedsGeneratedAttributesInternal(this) 802021"];
2508 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 802022"];
2509 [label="return GetNeedsGeneratedAttributesInternal(); 802023"];
2510 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 802024"];
2511 [label="ShouldEmitNullablePublicOnlyAttribute() 802025"];
2512 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 802026"];
2513 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 802027"];
2514 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 802028"];
2515 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 802029"];
2516 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 802030"];
2517 [label="return; 802031"];
2518 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 802032"];
2519 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 802033"];
2520 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 802034"];
2521 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 802035"];
2522 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 802036"];
2523 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 802037"];
2524 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 802038"];
2525 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 802039"];
2526 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 802040"];
2527 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 802041"];
2528 [label="builder.AddIfNotNull(_lazyNullableAttribute); 802042"];
2529 [label="builder.AddIfNotNull(_lazyNullableAttribute); 802043"];
2530 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 802044"];
2531 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 802045"];
2532 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 802046"];
2533 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 802047"];
2534 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 802048"];
2535 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 802049"];
2536 [label="return builder.ToImmutableAndFree(); 802050"];
2537 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 802051"];
2538 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 802052"];
2539 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 802053"];
2540 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 802054"];
2541 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 802055"];
2542 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 802056"];
2543 [label="param CompileSynthesizedMethods(this) 802057"];
2544 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 802058"];
2545 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 802059"];
2546 [label="compilation.AnonymousTypeManager 802060"];
2547 [label="get\n            {\n                return _anonymousTypeManager;\n            } 802061"];
2548 [label="return _anonymousTypeManager; 802062"];
2549 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802063"];
2550 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802064"];
2551 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802065"];
2552 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802066"];
2553 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802067"];
2554 [label="param GetPreviousAnonymousTypes(this) 802068"];
2555 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 802069"];
2556 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802070"];
2557 [label="param GetNextAnonymousTypeIndex(this) 802071"];
2558 [label="return 0; 802072"];
2559 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 802073"];
2560 [label="methodCompiler.WaitForWorkers() 802074"];
2561 [label="param WaitForWorkers(this) 802075"];
2562 [label="var tasks = _compilerTasks; 802076"];
2563 [label="if (tasks == null)\n            {\n                return;\n            } 802077"];
2564 [label="if (tasks == null)\n            {\n                return;\n            } 802078"];
2565 [label="Task curTask; 802079"];
2566 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 802080"];
2567 [label="methodCompiler.WaitForWorkers(); 802081"];
2568 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 802082"];
2569 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 802083"];
2570 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 802084"];
2571 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 802085"];
2572 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 802086"];
2573 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 802087"];
2574 [label="compilation.AdditionalCodegenWarnings 802088"];
2575 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 802089"];
2576 [label="return _additionalCodegenWarnings; 802090"];
2577 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 802091"];
2578 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 802092"];
2579 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 802093"];
2580 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 802094"];
2581 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 802095"];
2582 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 802096"];
2583 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 802097"];
2584 [label="param WarnUnusedFields(CSharpCompilation compilation) 802098"];
2585 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 802099"];
2586 [label="param WarnUnusedFields(CancellationToken cancellationToken) 802100"];
2587 [label="compilation.Assembly 802101"];
2588 [label="get\n            {\n                return SourceAssembly;\n            } 802102"];
2589 [label="SourceAssembly 802103"];
2590 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802104"];
2591 [label="GetBoundReferenceManager() 802105"];
2592 [label="param GetBoundReferenceManager(this) 802106"];
2593 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802107"];
2594 [label="return _referenceManager; 802108"];
2595 [label="GetBoundReferenceManager(); 802109"];
2596 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 802110"];
2597 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 802111"];
2598 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 802112"];
2599 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 802113"];
2600 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 802114"];
2601 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 802115"];
2602 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 802116"];
2603 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 802117"];
2604 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 802118"];
2605 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 802119"];
2606 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 802120"];
2607 [label="compilation.Options 802121"];
2608 [label="get\n            {\n                return _options;\n            } 802122"];
2609 [label="return _options; 802123"];
2610 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 802124"];
2611 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 802125"];
2612 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 802126"];
2613 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 802127"];
2614 [label="param Translate(MethodSymbol symbol) 802128"];
2615 [label="param Translate(DiagnosticBag diagnostics) 802129"];
2616 [label="param Translate(bool needDeclaration) 802130"];
2617 [label="param Translate(this) 802131"];
2618 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 802132"];
2619 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 802133"];
2620 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 802134"];
2621 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 802135"];
2622 [label="Translate(symbol, null, diagnostics, null, needDeclaration) 802136"];
2623 [label="param Translate(MethodSymbol methodSymbol) 802137"];
2624 [label="param Translate(SyntaxNode syntaxNodeOpt) 802138"];
2625 [label="param Translate(DiagnosticBag diagnostics) 802139"];
2626 [label="param Translate(BoundArgListOperator optArgList = null) 802140"];
2627 [label="param Translate(bool needDeclaration = false) 802141"];
2628 [label="param Translate(this) 802142"];
2629 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 802143"];
2630 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 802144"];
2631 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 802145"];
2632 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802146"];
2633 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802147"];
2634 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802148"];
2635 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802149"];
2636 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 802150"];
2637 [label="param Translate(MethodSymbol methodSymbol) 802151"];
2638 [label="param Translate(SyntaxNode syntaxNodeOpt) 802152"];
2639 [label="param Translate(DiagnosticBag diagnostics) 802153"];
2640 [label="param Translate(bool needDeclaration) 802154"];
2641 [label="param Translate(this) 802155"];
2642 [label="object reference; 802156"];
2643 [label="Cci.IMethodReference methodRef; 802157"];
2644 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 802158"];
2645 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 802159"];
2646 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 802160"];
2647 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 802161"];
2648 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 802162"];
2649 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 802163"];
2650 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 802164"];
2651 [label="return methodSymbol.GetCciAdapter(); 802165"];
2652 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 802166"];
2653 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 802167"];
2654 [label="return unexpandedMethodRef; 802168"];
2655 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 802169"];
2656 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 802170"];
2657 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 802171"];
2658 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 802172"];
2659 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 802173"];
2660 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 802174"];
2661 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 802175"];
2662 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 802176"];
2663 [label="param GenerateModuleInitializer(this) 802177"];
2664 [label="Debug.Assert(_declarationDiagnosticsFrozen); 802178"];
2665 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 802179"];
2666 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 802180"];
2667 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 802181"];
2668 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 802182"];
2669 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 802183"];
2670 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 802184"];
2671 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 802185"];
2672 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 802186"];
2673 [label="return true; 802187"];
2674 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 802188"];
2675 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 802189"];
2676 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 802190"];
2677 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 802191"];
2678 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 802192"];
2679 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 802193"];
2680 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 802194"];
2681 [label="param GenerateResourcesAndDocumentationComments(this) 802195"];
2682 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 802196"];
2683 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 802197"];
2684 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 802198"];
2685 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 802199"];
2686 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 802200"];
2687 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 802201"];
2688 [label="SourceAssembly 802202"];
2689 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802203"];
2690 [label="GetBoundReferenceManager() 802204"];
2691 [label="param GetBoundReferenceManager(this) 802205"];
2692 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802206"];
2693 [label="return _referenceManager; 802207"];
2694 [label="GetBoundReferenceManager(); 802208"];
2695 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 802209"];
2696 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 802210"];
2697 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 802211"];
2698 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 802212"];
2699 [label="AddedModulesResourceNames(resourceDiagnostics) 802213"];
2700 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 802214"];
2701 [label="param AddedModulesResourceNames(this) 802215"];
2702 [label="SourceAssembly 802216"];
2703 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802217"];
2704 [label="GetBoundReferenceManager() 802218"];
2705 [label="param GetBoundReferenceManager(this) 802219"];
2706 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802220"];
2707 [label="return _referenceManager; 802221"];
2708 [label="GetBoundReferenceManager(); 802222"];
2709 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 802223"];
2710 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 802224"];
2711 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 802225"];
2712 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 802226"];
2713 [label="param AddedModulesResourceNames(this) 802227"];
2714 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 802228"];
2715 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 802229"];
2716 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 802230"];
2717 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 802231"];
2718 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 802232"];
2719 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 802233"];
2720 [label="cancellationToken.ThrowIfCancellationRequested(); 802234"];
2721 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 802235"];
2722 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 802236"];
2723 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 802237"];
2724 [label="new[] { '\\r\\n', '\\r', '\\n' } 802238"];
2725 [label="'\\r\\n' 802239"];
2726 [label="'\\r' 802240"];
2727 [label="'\\n' 802241"];
2728 [label="new[] { '\\r\\n', '\\r', '\\n' } 802242"];
2729 [label="new[] { '\\r\\n', '\\r', '\\n' } 802243"];
2730 [label="new[] { '\\r\\n', '\\r', '\\n' } 802244"];
2731 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 802245"];
2732 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 802246"];
2733 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 802247"];
2734 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 802248"];
2735 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 802249"];
2736 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 802250"];
2737 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 802251"];
2738 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 802252"];
2739 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 802253"];
2740 [label="param WriteDocumentationCommentXml(string? assemblyName) 802254"];
2741 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 802255"];
2742 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 802256"];
2743 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 802257"];
2744 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 802258"];
2745 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 802259"];
2746 [label="StreamWriter writer = null; 802260"];
2747 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 802261"];
2748 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 802262"];
2749 [label="compilation.SourceAssembly 802263"];
2750 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802264"];
2751 [label="GetBoundReferenceManager() 802265"];
2752 [label="param GetBoundReferenceManager(this) 802266"];
2753 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802267"];
2754 [label="return _referenceManager; 802268"];
2755 [label="GetBoundReferenceManager(); 802269"];
2756 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 802270"];
2757 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802271"];
2758 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802272"];
2759 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802273"];
2760 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802274"];
2761 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802275"];
2762 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802276"];
2763 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802277"];
2764 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802278"];
2765 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 802279"];
2766 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 802280"];
2767 [label="param DocumentationCommentCompiler(string assemblyName) 802281"];
2768 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 802282"];
2769 [label="param DocumentationCommentCompiler(TextWriter writer) 802283"];
2770 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 802284"];
2771 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 802285"];
2772 [label="param DocumentationCommentCompiler(bool processIncludes) 802286"];
2773 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 802287"];
2774 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 802288"];
2775 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 802289"];
2776 [label="param DocumentationCommentCompiler(this) 802290"];
2777 [label="param DocumentationCommentCompiler(this) 802291"];
2778 [label="_assemblyName 802292"];
2779 [label="_compilation 802293"];
2780 [label="_writer 802294"];
2781 [label="_filterTree 802295"];
2782 [label="_filterSpanWithinTree 802296"];
2783 [label="_processIncludes 802297"];
2784 [label="_isForSingleSymbol 802298"];
2785 [label="_diagnostics 802299"];
2786 [label="_lazyComparer 802300"];
2787 [label="_includedFileCache 802301"];
2788 [label="_indentDepth 802302"];
2789 [label="_temporaryStringBuilders 802303"];
2790 [label="_assemblyName 802304"];
2791 [label="_compilation 802305"];
2792 [label="_writer 802306"];
2793 [label="_filterTree 802307"];
2794 [label="_filterSpanWithinTree 802308"];
2795 [label="_processIncludes 802309"];
2796 [label="_isForSingleSymbol 802310"];
2797 [label="_diagnostics 802311"];
2798 [label="_cancellationToken 802312"];
2799 [label="compilation.SourceAssembly 802313"];
2800 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802314"];
2801 [label="GetBoundReferenceManager() 802315"];
2802 [label="param GetBoundReferenceManager(this) 802316"];
2803 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802317"];
2804 [label="return _referenceManager; 802318"];
2805 [label="GetBoundReferenceManager(); 802319"];
2806 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 802320"];
2807 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 802321"];
2808 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 802322"];
2809 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 802323"];
2810 [label="param VisitNamespace(NamespaceSymbol symbol) 802324"];
2811 [label="param VisitNamespace(this) 802325"];
2812 [label="_cancellationToken.ThrowIfCancellationRequested(); 802326"];
2813 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 802327"];
2814 [label="Debug.Assert(_assemblyName != null); 802328"];
2815 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 802329"];
2816 [label="WriteLine('<?xml version=\\'1.0\\'?>') 802330"];
2817 [label="param WriteLine(string message) 802331"];
2818 [label="param WriteLine(this) 802332"];
2819 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802333"];
2820 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802334"];
2821 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802335"];
2822 [label="WriteLine('<doc>'); 802336"];
2823 [label="WriteLine('<doc>') 802337"];
2824 [label="param WriteLine(string message) 802338"];
2825 [label="param WriteLine(this) 802339"];
2826 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802340"];
2827 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802341"];
2828 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802342"];
2829 [label="Indent() 802343"];
2830 [label="param Indent(this) 802344"];
2831 [label="_indentDepth 802345"];
2832 [label="Indent(); 802346"];
2833 [label="_compilation.Options 802347"];
2834 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 802348"];
2835 [label="WriteLine('<assembly>'); 802349"];
2836 [label="WriteLine('<assembly>') 802350"];
2837 [label="param WriteLine(string message) 802351"];
2838 [label="param WriteLine(this) 802352"];
2839 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802353"];
2840 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802354"];
2841 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802355"];
2842 [label="Indent() 802356"];
2843 [label="param Indent(this) 802357"];
2844 [label="_indentDepth 802358"];
2845 [label="Indent(); 802359"];
2846 [label="WriteLine('<name>{0}</name>', _assemblyName); 802360"];
2847 [label="WriteLine('<name>{0}</name>', _assemblyName) 802361"];
2848 [label="WriteLine('<name>{0}</name>', _assemblyName) 802362"];
2849 [label="param WriteLine(string format) 802363"];
2850 [label="param WriteLine(params object[] args) 802364"];
2851 [label="param WriteLine(this) 802365"];
2852 [label="WriteLine(string.Format(format, args)); 802366"];
2853 [label="WriteLine(string.Format(format, args)); 802367"];
2854 [label="WriteLine(string.Format(format, args)); 802368"];
2855 [label="WriteLine(string.Format(format, args)) 802369"];
2856 [label="param WriteLine(string message) 802370"];
2857 [label="param WriteLine(this) 802371"];
2858 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802372"];
2859 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802373"];
2860 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802374"];
2861 [label="WriteLine(string.Format(format, args)); 802375"];
2862 [label="Unindent() 802376"];
2863 [label="param Unindent(this) 802377"];
2864 [label="_indentDepth 802378"];
2865 [label="Debug.Assert(_indentDepth >= 0); 802379"];
2866 [label="Debug.Assert(_indentDepth >= 0); 802380"];
2867 [label="Unindent(); 802381"];
2868 [label="WriteLine('</assembly>'); 802382"];
2869 [label="WriteLine('</assembly>') 802383"];
2870 [label="param WriteLine(string message) 802384"];
2871 [label="param WriteLine(this) 802385"];
2872 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802386"];
2873 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802387"];
2874 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802388"];
2875 [label="WriteLine('<members>'); 802389"];
2876 [label="WriteLine('<members>') 802390"];
2877 [label="param WriteLine(string message) 802391"];
2878 [label="param WriteLine(this) 802392"];
2879 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802393"];
2880 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802394"];
2881 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802395"];
2882 [label="Indent() 802396"];
2883 [label="param Indent(this) 802397"];
2884 [label="_indentDepth 802398"];
2885 [label="Indent(); 802399"];
2886 [label="Debug.Assert(!_isForSingleSymbol); 802400"];
2887 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 802401"];
2888 [label="_cancellationToken.ThrowIfCancellationRequested(); 802402"];
2889 [label="s.Accept(this); 802403"];
2890 [label="s.Accept(this); 802404"];
2891 [label="s.Accept(this); 802405"];
2892 [label="param VisitNamedType(NamedTypeSymbol symbol) 802406"];
2893 [label="param VisitNamedType(this) 802407"];
2894 [label="_cancellationToken.ThrowIfCancellationRequested(); 802408"];
2895 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802409"];
2896 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802410"];
2897 [label="DefaultVisit(symbol); 802411"];
2898 [label="DefaultVisit(symbol) 802412"];
2899 [label="param DefaultVisit(Symbol symbol) 802413"];
2900 [label="param DefaultVisit(this) 802414"];
2901 [label="_cancellationToken.ThrowIfCancellationRequested(); 802415"];
2902 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 802416"];
2903 [label="ShouldSkip(symbol) 802417"];
2904 [label="param ShouldSkip(Symbol symbol) 802418"];
2905 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 802419"];
2906 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 802420"];
2907 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802421"];
2908 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802422"];
2909 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 802423"];
2910 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 802424"];
2911 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 802425"];
2912 [label="DocumentationMode maxDocumentationMode; 802426"];
2913 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 802427"];
2914 [label="docCommentNodes 802428"];
2915 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 802429"];
2916 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 802430"];
2917 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 802431"];
2918 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 802432"];
2919 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 802433"];
2920 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 802434"];
2921 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 802435"];
2922 [label="param TryGetDocumentationCommentNodes(this) 802436"];
2923 [label="maxDocumentationMode = DocumentationMode.None; 802437"];
2924 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 802438"];
2925 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 802439"];
2926 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 802440"];
2927 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 802441"];
2928 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 802442"];
2929 [label="currDocumentationMode > maxDocumentationMode 802443"];
2930 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 802444"];
2931 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 802445"];
2932 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 802446"];
2933 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802447"];
2934 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802448"];
2935 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 802449"];
2936 [label="return true; 802450"];
2937 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 802451"];
2938 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 802452"];
2939 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 802453"];
2940 [label="return; 802454"];
2941 [label="DefaultVisit(symbol); 802455"];
2942 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 802456"];
2943 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 802457"];
2944 [label="_cancellationToken.ThrowIfCancellationRequested(); 802458"];
2945 [label="member.Accept(this); 802459"];
2946 [label="member.Accept(this); 802460"];
2947 [label="member.Accept(this); 802461"];
2948 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802462"];
2949 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802463"];
2950 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 802464"];
2951 [label="DocumentationMode maxDocumentationMode; 802465"];
2952 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 802466"];
2953 [label="docCommentNodes 802467"];
2954 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 802468"];
2955 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 802469"];
2956 [label="maxDocumentationMode = DocumentationMode.None; 802470"];
2957 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 802471"];
2958 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 802472"];
2959 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 802473"];
2960 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 802474"];
2961 [label="currDocumentationMode > maxDocumentationMode 802475"];
2962 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 802476"];
2963 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802477"];
2964 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802478"];
2965 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 802479"];
2966 [label="return true; 802480"];
2967 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 802481"];
2968 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 802482"];
2969 [label="return; 802483"];
2970 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802484"];
2971 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 802485"];
2972 [label="DocumentationMode maxDocumentationMode; 802486"];
2973 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 802487"];
2974 [label="docCommentNodes 802488"];
2975 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 802489"];
2976 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 802490"];
2977 [label="maxDocumentationMode = DocumentationMode.None; 802491"];
2978 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 802492"];
2979 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 802493"];
2980 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 802494"];
2981 [label="currDocumentationMode > maxDocumentationMode 802495"];
2982 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802496"];
2983 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802497"];
2984 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 802498"];
2985 [label="return true; 802499"];
2986 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 802500"];
2987 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 802501"];
2988 [label="return; 802502"];
2989 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 802503"];
2990 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 802504"];
2991 [label="currDocumentationMode > maxDocumentationMode 802505"];
2992 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 802506"];
2993 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 802507"];
2994 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 802508"];
2995 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 802509"];
2996 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 802510"];
2997 [label="docCommentNodes 802511"];
2998 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 802512"];
2999 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 802513"];
3000 [label="maxDocumentationMode = DocumentationMode.None; 802514"];
3001 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 802515"];
3002 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 802516"];
3003 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 802517"];
3004 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 802518"];
3005 [label="currDocumentationMode > maxDocumentationMode 802519"];
3006 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802520"];
3007 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 802521"];
3008 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 802522"];
3009 [label="return true; 802523"];
3010 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 802524"];
3011 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 802525"];
3012 [label="return; 802526"];
3013 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 802527"];
3014 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 802528"];
3015 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 802529"];
3016 [label="currDocumentationMode > maxDocumentationMode 802530"];
3017 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 802531"];
3018 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 802532"];
3019 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 802533"];
3020 [label="Unindent() 802534"];
3021 [label="Debug.Assert(_indentDepth >= 0); 802535"];
3022 [label="Unindent(); 802536"];
3023 [label="WriteLine('</members>'); 802537"];
3024 [label="WriteLine('</members>') 802538"];
3025 [label="param WriteLine(string message) 802539"];
3026 [label="param WriteLine(this) 802540"];
3027 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802541"];
3028 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802542"];
3029 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802543"];
3030 [label="Unindent() 802544"];
3031 [label="_indentDepth 802545"];
3032 [label="Debug.Assert(_indentDepth >= 0); 802546"];
3033 [label="Debug.Assert(_indentDepth >= 0); 802547"];
3034 [label="Unindent(); 802548"];
3035 [label="WriteLine('</doc>'); 802549"];
3036 [label="WriteLine('</doc>') 802550"];
3037 [label="param WriteLine(string message) 802551"];
3038 [label="param WriteLine(this) 802552"];
3039 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802553"];
3040 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802554"];
3041 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 802555"];
3042 [label="Debug.Assert(compiler._indentDepth == 0); 802556"];
3043 [label="Debug.Assert(compiler._indentDepth == 0); 802557"];
3044 [label="writer?.Flush(); 802558"];
3045 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 802559"];
3046 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 802560"];
3047 [label="compilation.SyntaxTrees 802561"];
3048 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 802562"];
3049 [label="_syntaxAndDeclarations.GetLazyState() 802563"];
3050 [label="param GetLazyState(this) 802564"];
3051 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 802565"];
3052 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 802566"];
3053 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 802567"];
3054 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 802568"];
3055 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 802569"];
3056 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 802570"];
3057 [label="param ReportUnprocessed(SyntaxTree tree) 802571"];
3058 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 802572"];
3059 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 802573"];
3060 [label="param ReportUnprocessed(CancellationToken cancellationToken) 802574"];
3061 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 802575"];
3062 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 802576"];
3063 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 802577"];
3064 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 802578"];
3065 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 802579"];
3066 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 802580"];
3067 [label="param ReportUnusedImports(SyntaxTree? filterTree) 802581"];
3068 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 802582"];
3069 [label="param ReportUnusedImports(CancellationToken cancellationToken) 802583"];
3070 [label="param ReportUnusedImports(this) 802584"];
3071 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 802585"];
3072 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 802586"];
3073 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 802587"];
3074 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 802588"];
3075 [label="CompleteTrees(filterTree); 802589"];
3076 [label="CompleteTrees(filterTree) 802590"];
3077 [label="param CompleteTrees(SyntaxTree? filterTree) 802591"];
3078 [label="param CompleteTrees(this) 802592"];
3079 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 802593"];
3080 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 802594"];
3081 [label="CompleteTrees(filterTree); 802595"];
3082 [label="get { return this.SourceModule.GetPublicSymbol(); } 802596"];
3083 [label="this.SourceModule 802597"];
3084 [label="get\n            {\n                return Assembly.Modules[0];\n            } 802598"];
3085 [label="Assembly 802599"];
3086 [label="get\n            {\n                return SourceAssembly;\n            } 802600"];
3087 [label="SourceAssembly 802601"];
3088 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802602"];
3089 [label="GetBoundReferenceManager() 802603"];
3090 [label="param GetBoundReferenceManager(this) 802604"];
3091 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802605"];
3092 [label="return _referenceManager; 802606"];
3093 [label="GetBoundReferenceManager(); 802607"];
3094 [label="return Assembly.Modules[0]; 802608"];
3095 [label="get { return SourceAssembly.IsDelaySigned; } 802609"];
3096 [label="SourceAssembly 802610"];
3097 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802611"];
3098 [label="GetBoundReferenceManager() 802612"];
3099 [label="param GetBoundReferenceManager(this) 802613"];
3100 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802614"];
3101 [label="return _referenceManager; 802615"];
3102 [label="GetBoundReferenceManager(); 802616"];
3103 [label="SourceAssembly.IsDelaySigned 802617"];
3104 [label="get { return SourceAssembly.StrongNameKeys; } 802618"];
3105 [label="SourceAssembly 802619"];
3106 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802620"];
3107 [label="GetBoundReferenceManager() 802621"];
3108 [label="param GetBoundReferenceManager(this) 802622"];
3109 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802623"];
3110 [label="return _referenceManager; 802624"];
3111 [label="GetBoundReferenceManager(); 802625"];
3112 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 802626"];
3113 [label="param GetCorLibraryReferenceToEmit(this) 802627"];
3114 [label="CorLibrary 802628"];
3115 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 802629"];
3116 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 802630"];
3117 [label="AssemblySymbol corLibrary = CorLibrary; 802631"];
3118 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 802632"];
3119 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 802633"];
3120 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 802634"];
3121 [label="return Translate(corLibrary, context.Diagnostics); 802635"];
3122 [label="return Translate(corLibrary, context.Diagnostics); 802636"];
3123 [label="Translate(corLibrary, context.Diagnostics) 802637"];
3124 [label="param Translate(AssemblySymbol assembly) 802638"];
3125 [label="param Translate(DiagnosticBag diagnostics) 802639"];
3126 [label="param Translate(this) 802640"];
3127 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 802641"];
3128 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 802642"];
3129 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 802643"];
3130 [label="Cci.IModuleReference reference; 802644"];
3131 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 802645"];
3132 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 802646"];
3133 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 802647"];
3134 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 802648"];
3135 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 802649"];
3136 [label="new AssemblyReference(assembly) 802650"];
3137 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 802651"];
3138 [label="param AssemblyReference(this) 802652"];
3139 [label="_targetAssembly 802653"];
3140 [label="Debug.Assert((object)assemblySymbol != null); 802654"];
3141 [label="Debug.Assert((object)assemblySymbol != null); 802655"];
3142 [label="_targetAssembly 802656"];
3143 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 802657"];
3144 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 802658"];
3145 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 802659"];
3146 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 802660"];
3147 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 802661"];
3148 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 802662"];
3149 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 802663"];
3150 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 802664"];
3151 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 802665"];
3152 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 802666"];
3153 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 802667"];
3154 [label="param ValidateReferencedAssembly(this) 802668"];
3155 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 802669"];
3156 [label="asmRef.Identity 802670"];
3157 [label="=> _targetAssembly.Identity 802671"];
3158 [label="_targetAssembly.Identity 802672"];
3159 [label="AssemblyIdentity refIdentity = asmRef.Identity; 802673"];
3160 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 802674"];
3161 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 802675"];
3162 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 802676"];
3163 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 802677"];
3164 [label="var refMachine = assembly.Machine; 802678"];
3165 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 802679"];
3166 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 802680"];
3167 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 802681"];
3168 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 802682"];
3169 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 802683"];
3170 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 802684"];
3171 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 802685"];
3172 [label="return cachedAsmRef; 802686"];
3173 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 802687"];
3174 [label="=> _targetAssembly.Identity 802688"];
3175 [label="_targetAssembly.Identity 802689"];
3176 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 802690"];
3177 [label="param GetAssemblyReferencesFromAddedModules(this) 802691"];
3178 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 802692"];
3179 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 802693"];
3180 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 802694"];
3181 [label="param GetAssemblyReferencesFromAddedModules(this) 802695"];
3182 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 802696"];
3183 [label="param GetFiles(EmitContext context) 802697"];
3184 [label="param GetFiles(this) 802698"];
3185 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 802699"];
3186 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 802700"];
3187 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 802701"];
3188 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 802702"];
3189 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 802703"];
3190 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 802704"];
3191 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 802705"];
3192 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 802706"];
3193 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 802707"];
3194 [label="var modules = sourceAssSymbol.Modules; 802708"];
3195 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 802709"];
3196 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 802710"];
3197 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 802711"];
3198 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 802712"];
3199 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 802713"];
3200 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 802714"];
3201 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 802715"];
3202 [label="builder.Free(); 802716"];
3203 [label="return lazyFiles; 802717"];
3204 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 802718"];
3205 [label="=> _embeddedTypesManagerOpt 802719"];
3206 [label="_embeddedTypesManagerOpt 802720"];
3207 [label="param GetAnonymousTypeDefinitions(EmitContext context) 802721"];
3208 [label="param GetAnonymousTypeDefinitions(this) 802722"];
3209 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 802723"];
3210 [label="Compilation.AnonymousTypeManager 802724"];
3211 [label="get\n            {\n                return _anonymousTypeManager;\n            } 802725"];
3212 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 802726"];
3213 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 802727"];
3214 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 802728"];
3215 [label="param GetAdditionalTopLevelTypeDefinitions(this) 802729"];
3216 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 802730"];
3217 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 802731"];
3218 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 802732"];
3219 [label="=> _additionalTypes 802733"];
3220 [label="_additionalTypes 802734"];
3221 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 802735"];
3222 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 802736"];
3223 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 802737"];
3224 [label="param GetEmbeddedTypeDefinitions(this) 802738"];
3225 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 802739"];
3226 [label="GetEmbeddedTypes(context.Diagnostics) 802740"];
3227 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 802741"];
3228 [label="param GetEmbeddedTypes(this) 802742"];
3229 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 802743"];
3230 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 802744"];
3231 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 802745"];
3232 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 802746"];
3233 [label="param CreateEmbeddedAttributesIfNeeded(this) 802747"];
3234 [label="GetNeedsGeneratedAttributes() 802748"];
3235 [label="param GetNeedsGeneratedAttributes(this) 802749"];
3236 [label="_needsGeneratedAttributes_IsFrozen = true; 802750"];
3237 [label="_needsGeneratedAttributes_IsFrozen 802751"];
3238 [label="GetNeedsGeneratedAttributesInternal() 802752"];
3239 [label="param GetNeedsGeneratedAttributesInternal(this) 802753"];
3240 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 802754"];
3241 [label="return GetNeedsGeneratedAttributesInternal(); 802755"];
3242 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 802756"];
3243 [label="ShouldEmitNullablePublicOnlyAttribute() 802757"];
3244 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 802758"];
3245 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 802759"];
3246 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 802760"];
3247 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 802761"];
3248 [label="return; 802762"];
3249 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 802763"];
3250 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 802764"];
3251 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 802765"];
3252 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 802766"];
3253 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 802767"];
3254 [label="builder.AddIfNotNull(_lazyNullableAttribute); 802768"];
3255 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 802769"];
3256 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 802770"];
3257 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 802771"];
3258 [label="return builder.ToImmutableAndFree(); 802772"];
3259 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 802773"];
3260 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 802774"];
3261 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 802775"];
3262 [label="param GetTopLevelSourceTypeDefinitions(this) 802776"];
3263 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 802777"];
3264 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 802778"];
3265 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 802779"];
3266 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 802780"];
3267 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 802781"];
3268 [label="var ns = namespacesToProcess.Pop(); 802782"];
3269 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 802783"];
3270 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 802784"];
3271 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 802785"];
3272 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 802786"];
3273 [label="param ShouldEmitNullableAttributes(Symbol symbol) 802787"];
3274 [label="param ShouldEmitNullableAttributes(this) 802788"];
3275 [label="RoslynDebug.Assert(symbol is object); 802789"];
3276 [label="Debug.Assert(symbol.IsDefinition); 802790"];
3277 [label="SourceModule 802791"];
3278 [label="get\n            {\n                return Assembly.Modules[0];\n            } 802792"];
3279 [label="Assembly 802793"];
3280 [label="get\n            {\n                return SourceAssembly;\n            } 802794"];
3281 [label="SourceAssembly 802795"];
3282 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 802796"];
3283 [label="GetBoundReferenceManager() 802797"];
3284 [label="param GetBoundReferenceManager(this) 802798"];
3285 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802799"];
3286 [label="return _referenceManager; 802800"];
3287 [label="GetBoundReferenceManager(); 802801"];
3288 [label="return Assembly.Modules[0]; 802802"];
3289 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 802803"];
3290 [label="EmitNullablePublicOnly 802804"];
3291 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 802805"];
3292 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 802806"];
3293 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 802807"];
3294 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 802808"];
3295 [label="param SynthesizeNullableAttributeIfNecessary(this) 802809"];
3296 [label="Compilation.SourceModule 802810"];
3297 [label="get\n            {\n                return Assembly.Modules[0];\n            } 802811"];
3298 [label="Assembly 802812"];
3299 [label="SourceAssembly 802813"];
3300 [label="GetBoundReferenceManager() 802814"];
3301 [label="param GetBoundReferenceManager(this) 802815"];
3302 [label="GetBoundReferenceManager(); 802816"];
3303 [label="return Assembly.Modules[0]; 802817"];
3304 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 802818"];
3305 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 802819"];
3306 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 802820"];
3307 [label="type.AddNullableTransforms(flagsBuilder); 802821"];
3308 [label="type.AddNullableTransforms(flagsBuilder); 802822"];
3309 [label="SynthesizedAttributeData attribute; 802823"];
3310 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 802824"];
3311 [label="attribute = null; 802825"];
3312 [label="flagsBuilder.Free(); 802826"];
3313 [label="return attribute; 802827"];
3314 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 802828"];
3315 [label="Debug.Assert(symbol.IsDefinition); 802829"];
3316 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802830"];
3317 [label="return _referenceManager; 802831"];
3318 [label="GetBoundReferenceManager(); 802832"];
3319 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 802833"];
3320 [label="param GetBoundReferenceManager(this) 802834"];
3321 [label="GetBoundReferenceManager(); 802835"];
3322 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 802836"];
3323 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 802837"];
3324 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 802838"];
3325 [label="param GetSynthesizedNestedTypes(this) 802839"];
3326 [label="return null; 802840"];
3327 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 802841"];
3328 [label="Debug.Assert(symbol.IsDefinition); 802842"];
3329 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 802843"];
3330 [label="return _referenceManager; 802844"];
3331 [label="GetBoundReferenceManager(); 802845"];
3332 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 802846"];
3333 [label="param GetBoundReferenceManager(this) 802847"];
3334 [label="GetBoundReferenceManager(); 802848"];
3335 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 802849"];
3336 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 802850"];
3337 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 802851"];
3338 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 802852"];
3339 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 802853"];
3340 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 802854"];
3341 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 802855"];
3342 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 802856"];
3343 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 802857"];
3344 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 802858"];
3345 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 802859"];
3346 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 802860"];
3347 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 802861"];
3348 [label="param SynthesizeNullableAttributeIfNecessary(this) 802862"];
3349 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 802863"];
3350 [label="return null; 802864"];
3351 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 802865"];
3352 [label="param GetSourceAssemblyAttributes(this) 802866"];
3353 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 802867"];
3354 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 802868"];
3355 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 802869"];
3356 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 802870"];
3357 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 802871"];
3358 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 802872"];
3359 [label="NamedTypeSymbol result; 802873"];
3360 [label="GetBoundReferenceManager() 802874"];
3361 [label="GetBoundReferenceManager(); 802875"];
3362 [label="Debug.Assert(result.SpecialType == specialType); 802876"];
3363 [label="SourceAssembly 802877"];
3364 [label="GetBoundReferenceManager() 802878"];
3365 [label="param GetBoundReferenceManager(this) 802879"];
3366 [label="GetBoundReferenceManager(); 802880"];
3367 [label="GetBoundReferenceManager() 802881"];
3368 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 802882"];
3369 [label="param Translate(MethodSymbol methodSymbol) 802883"];
3370 [label="param Translate(SyntaxNode syntaxNodeOpt) 802884"];
3371 [label="param Translate(DiagnosticBag diagnostics) 802885"];
3372 [label="param Translate(BoundArgListOperator optArgList = null) 802886"];
3373 [label="param Translate(bool needDeclaration = false) 802887"];
3374 [label="param Translate(this) 802888"];
3375 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 802889"];
3376 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 802890"];
3377 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 802891"];
3378 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802892"];
3379 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802893"];
3380 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802894"];
3381 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 802895"];
3382 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 802896"];
3383 [label="param Translate(MethodSymbol methodSymbol) 802897"];
3384 [label="param Translate(SyntaxNode syntaxNodeOpt) 802898"];
3385 [label="param Translate(DiagnosticBag diagnostics) 802899"];
3386 [label="param Translate(bool needDeclaration) 802900"];
3387 [label="param Translate(this) 802901"];
3388 [label="object reference; 802902"];
3389 [label="Cci.IMethodReference methodRef; 802903"];
3390 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 802904"];
3391 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 802905"];
3392 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 802906"];
3393 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 802907"];
3394 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 802908"];
3395 [label="bool typeIsGeneric = IsGenericType(container); 802909"];
3396 [label="IsGenericType(container) 802910"];
3397 [label="param IsGenericType(NamedTypeSymbol toCheck) 802911"];
3398 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 802912"];
3399 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 802913"];
3400 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 802914"];
3401 [label="toCheck = toCheck.ContainingType; 802915"];
3402 [label="return false; 802916"];
3403 [label="bool typeIsGeneric = IsGenericType(container); 802917"];
3404 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 802918"];
3405 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 802919"];
3406 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 802920"];
3407 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 802921"];
3408 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 802922"];
3409 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 802923"];
3410 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 802924"];
3411 [label="param Translate(TypeSymbol typeSymbol) 802925"];
3412 [label="param Translate(SyntaxNode syntaxNodeOpt) 802926"];
3413 [label="param Translate(DiagnosticBag diagnostics) 802927"];
3414 [label="param Translate(this) 802928"];
3415 [label="Debug.Assert(diagnostics != null); 802929"];
3416 [label="Debug.Assert(diagnostics != null); 802930"];
3417 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 802931"];
3418 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 802932"];
3419 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 802933"];
3420 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 802934"];
3421 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 802935"];
3422 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 802936"];
3423 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 802937"];
3424 [label="param Translate(SyntaxNode syntaxNodeOpt) 802938"];
3425 [label="param Translate(DiagnosticBag diagnostics) 802939"];
3426 [label="param Translate(bool fromImplements = false) 802940"];
3427 [label="param Translate(bool needDeclaration = false) 802941"];
3428 [label="param Translate(this) 802942"];
3429 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 802943"];
3430 [label="Debug.Assert(diagnostics != null); 802944"];
3431 [label="Debug.Assert(diagnostics != null); 802945"];
3432 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 802946"];
3433 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 802947"];
3434 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 802948"];
3435 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 802949"];
3436 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 802950"];
3437 [label="object reference; 802951"];
3438 [label="Cci.INamedTypeReference typeRef; 802952"];
3439 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 802953"];
3440 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 802954"];
3441 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 802955"];
3442 [label="IsGenericType(container) 802956"];
3443 [label="param IsGenericType(NamedTypeSymbol toCheck) 802957"];
3444 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 802958"];
3445 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 802959"];
3446 [label="return false; 802960"];
3447 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 802961"];
3448 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 802962"];
3449 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 802963"];
3450 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 802964"];
3451 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 802965"];
3452 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 802966"];
3453 [label="param Translate(SyntaxNode syntaxNodeOpt) 802967"];
3454 [label="param Translate(DiagnosticBag diagnostics) 802968"];
3455 [label="param Translate(bool fromImplements = false) 802969"];
3456 [label="param Translate(bool needDeclaration = false) 802970"];
3457 [label="param Translate(this) 802971"];
3458 [label="Debug.Assert(diagnostics != null); 802972"];
3459 [label="Debug.Assert(diagnostics != null); 802973"];
3460 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 802974"];
3461 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 802975"];
3462 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 802976"];
3463 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 802977"];
3464 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 802978"];
3465 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 802979"];
3466 [label="param Translate(ModuleSymbol module) 802980"];
3467 [label="param Translate(DiagnosticBag diagnostics) 802981"];
3468 [label="param Translate(this) 802982"];
3469 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 802983"];
3470 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 802984"];
3471 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 802985"];
3472 [label="if ((object)module == null)\n            {\n                return null;\n            } 802986"];
3473 [label="if ((object)module == null)\n            {\n                return null;\n            } 802987"];
3474 [label="Cci.IModuleReference moduleRef; 802988"];
3475 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 802989"];
3476 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 802990"];
3477 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 802991"];
3478 [label="return moduleRef; 802992"];
3479 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 802993"];
3480 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 802994"];
3481 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 802995"];
3482 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 802996"];
3483 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 802997"];
3484 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 802998"];
3485 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 802999"];
3486 [label="param Translate(this) 803000"];
3487 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 803001"];
3488 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 803002"];
3489 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 803003"];
3490 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 803004"];
3491 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 803005"];
3492 [label="MustBeWrapped(@params.First()) 803006"];
3493 [label="param MustBeWrapped(ParameterSymbol param) 803007"];
3494 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 803008"];
3495 [label="var container = param.ContainingSymbol; 803009"];
3496 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 803010"];
3497 [label="ContainerIsGeneric(container) 803011"];
3498 [label="param ContainerIsGeneric(Symbol container) 803012"];
3499 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803013"];
3500 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803014"];
3501 [label="IsGenericType(container.ContainingType) 803015"];
3502 [label="param IsGenericType(NamedTypeSymbol toCheck) 803016"];
3503 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803017"];
3504 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803018"];
3505 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803019"];
3506 [label="toCheck = toCheck.ContainingType; 803020"];
3507 [label="return false; 803021"];
3508 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803022"];
3509 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803023"];
3510 [label="return false; 803024"];
3511 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 803025"];
3512 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 803026"];
3513 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 803027"];
3514 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 803028"];
3515 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 803029"];
3516 [label="param MustBeWrapped(ParameterSymbol param) 803030"];
3517 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 803031"];
3518 [label="var container = param.ContainingSymbol; 803032"];
3519 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 803033"];
3520 [label="ContainerIsGeneric(container) 803034"];
3521 [label="param ContainerIsGeneric(Symbol container) 803035"];
3522 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803036"];
3523 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803037"];
3524 [label="IsGenericType(container.ContainingType) 803038"];
3525 [label="param IsGenericType(NamedTypeSymbol toCheck) 803039"];
3526 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803040"];
3527 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803041"];
3528 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803042"];
3529 [label="toCheck = toCheck.ContainingType; 803043"];
3530 [label="return false; 803044"];
3531 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803045"];
3532 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803046"];
3533 [label="return false; 803047"];
3534 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 803048"];
3535 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 803049"];
3536 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 803050"];
3537 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 803051"];
3538 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803052"];
3539 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803053"];
3540 [label="param Translate(SyntaxNode syntaxNodeOpt) 803054"];
3541 [label="param Translate(DiagnosticBag diagnostics) 803055"];
3542 [label="param Translate(bool fromImplements = false) 803056"];
3543 [label="param Translate(bool needDeclaration = false) 803057"];
3544 [label="Debug.Assert(diagnostics != null); 803058"];
3545 [label="Debug.Assert(diagnostics != null); 803059"];
3546 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803060"];
3547 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803061"];
3548 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803062"];
3549 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803063"];
3550 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803064"];
3551 [label="object reference; 803065"];
3552 [label="Cci.INamedTypeReference typeRef; 803066"];
3553 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803067"];
3554 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803068"];
3555 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803069"];
3556 [label="IsGenericType(container) 803070"];
3557 [label="param IsGenericType(NamedTypeSymbol toCheck) 803071"];
3558 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803072"];
3559 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803073"];
3560 [label="return false; 803074"];
3561 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803075"];
3562 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803076"];
3563 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803077"];
3564 [label="param IsPlatformType(Cci.ITypeReference typeRef) 803078"];
3565 [label="param IsPlatformType(Cci.PlatformType platformType) 803079"];
3566 [label="param IsPlatformType(this) 803080"];
3567 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 803081"];
3568 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 803082"];
3569 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 803083"];
3570 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803084"];
3571 [label="return namedType.SpecialType == (SpecialType)platformType; 803085"];
3572 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803086"];
3573 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803087"];
3574 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803088"];
3575 [label="param Translate(SyntaxNode syntaxNodeOpt) 803089"];
3576 [label="param Translate(DiagnosticBag diagnostics) 803090"];
3577 [label="param Translate(bool fromImplements = false) 803091"];
3578 [label="param Translate(bool needDeclaration = false) 803092"];
3579 [label="Debug.Assert(diagnostics != null); 803093"];
3580 [label="Debug.Assert(diagnostics != null); 803094"];
3581 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803095"];
3582 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803096"];
3583 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803097"];
3584 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803098"];
3585 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803099"];
3586 [label="object reference; 803100"];
3587 [label="Cci.INamedTypeReference typeRef; 803101"];
3588 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803102"];
3589 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803103"];
3590 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803104"];
3591 [label="IsGenericType(container) 803105"];
3592 [label="param IsGenericType(NamedTypeSymbol toCheck) 803106"];
3593 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803107"];
3594 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803108"];
3595 [label="return false; 803109"];
3596 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803110"];
3597 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803111"];
3598 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803112"];
3599 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803113"];
3600 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803114"];
3601 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803115"];
3602 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803116"];
3603 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803117"];
3604 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803118"];
3605 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 803119"];
3606 [label="param MustBeWrapped(ParameterSymbol param) 803120"];
3607 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 803121"];
3608 [label="var container = param.ContainingSymbol; 803122"];
3609 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 803123"];
3610 [label="ContainerIsGeneric(container) 803124"];
3611 [label="param ContainerIsGeneric(Symbol container) 803125"];
3612 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803126"];
3613 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803127"];
3614 [label="IsGenericType(container.ContainingType) 803128"];
3615 [label="param IsGenericType(NamedTypeSymbol toCheck) 803129"];
3616 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803130"];
3617 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803131"];
3618 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803132"];
3619 [label="toCheck = toCheck.ContainingType; 803133"];
3620 [label="return false; 803134"];
3621 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803135"];
3622 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803136"];
3623 [label="param MustBeWrapped(ParameterSymbol param) 803137"];
3624 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 803138"];
3625 [label="var container = param.ContainingSymbol; 803139"];
3626 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 803140"];
3627 [label="ContainerIsGeneric(container) 803141"];
3628 [label="param ContainerIsGeneric(Symbol container) 803142"];
3629 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803143"];
3630 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803144"];
3631 [label="IsGenericType(container.ContainingType) 803145"];
3632 [label="param IsGenericType(NamedTypeSymbol toCheck) 803146"];
3633 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803147"];
3634 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803148"];
3635 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803149"];
3636 [label="toCheck = toCheck.ContainingType; 803150"];
3637 [label="return false; 803151"];
3638 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803152"];
3639 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803153"];
3640 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 803154"];
3641 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 803155"];
3642 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803156"];
3643 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803157"];
3644 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 803158"];
3645 [label="bool typeIsGeneric = IsGenericType(container); 803159"];
3646 [label="IsGenericType(container) 803160"];
3647 [label="param IsGenericType(NamedTypeSymbol toCheck) 803161"];
3648 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803162"];
3649 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803163"];
3650 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803164"];
3651 [label="toCheck = toCheck.ContainingType; 803165"];
3652 [label="return false; 803166"];
3653 [label="bool typeIsGeneric = IsGenericType(container); 803167"];
3654 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803168"];
3655 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803169"];
3656 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803170"];
3657 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 803171"];
3658 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803172"];
3659 [label="toCheck = toCheck.ContainingType; 803173"];
3660 [label="param GetSourceAssemblySecurityAttributes(this) 803174"];
3661 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 803175"];
3662 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 803176"];
3663 [label="return Translate(corLibrary, context.Diagnostics); 803177"];
3664 [label="param Translate(DiagnosticBag diagnostics) 803178"];
3665 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 803179"];
3666 [label="return (Cci.IAssemblyReference)reference; 803180"];
3667 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 803181"];
3668 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 803182"];
3669 [label="param GetSourceModuleAttributes(this) 803183"];
3670 [label="return SourceModule.GetCustomAttributesToEmit(this); 803184"];
3671 [label="return SourceModule.GetCustomAttributesToEmit(this); 803185"];
3672 [label="return SourceModule.GetCustomAttributesToEmit(this); 803186"];
3673 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 803187"];
3674 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 803188"];
3675 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 803189"];
3676 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 803190"];
3677 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 803191"];
3678 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 803192"];
3679 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 803193"];
3680 [label="return GetNeedsGeneratedAttributesInternal(); 803194"];
3681 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 803195"];
3682 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 803196"];
3683 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 803197"];
3684 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 803198"];
3685 [label="return; 803199"];
3686 [label="Debug.Assert(symbol.IsDefinition); 803200"];
3687 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803201"];
3688 [label="return _referenceManager; 803202"];
3689 [label="GetBoundReferenceManager(); 803203"];
3690 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 803204"];
3691 [label="param GetBoundReferenceManager(this) 803205"];
3692 [label="GetBoundReferenceManager(); 803206"];
3693 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803207"];
3694 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803208"];
3695 [label="param SynthesizeNullableAttributeIfNecessary(this) 803209"];
3696 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803210"];
3697 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803211"];
3698 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803212"];
3699 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803213"];
3700 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803214"];
3701 [label="object reference; 803215"];
3702 [label="Cci.INamedTypeReference typeRef; 803216"];
3703 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803217"];
3704 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803218"];
3705 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803219"];
3706 [label="IsGenericType(container) 803220"];
3707 [label="param IsGenericType(NamedTypeSymbol toCheck) 803221"];
3708 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803222"];
3709 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803223"];
3710 [label="return false; 803224"];
3711 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803225"];
3712 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803226"];
3713 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803227"];
3714 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 803228"];
3715 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803229"];
3716 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803230"];
3717 [label="param Translate(SyntaxNode syntaxNodeOpt) 803231"];
3718 [label="param Translate(DiagnosticBag diagnostics) 803232"];
3719 [label="param Translate(bool fromImplements = false) 803233"];
3720 [label="param Translate(bool needDeclaration = false) 803234"];
3721 [label="Debug.Assert(diagnostics != null); 803235"];
3722 [label="Debug.Assert(diagnostics != null); 803236"];
3723 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803237"];
3724 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803238"];
3725 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803239"];
3726 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803240"];
3727 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803241"];
3728 [label="object reference; 803242"];
3729 [label="Cci.INamedTypeReference typeRef; 803243"];
3730 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803244"];
3731 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803245"];
3732 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803246"];
3733 [label="IsGenericType(container) 803247"];
3734 [label="param IsGenericType(NamedTypeSymbol toCheck) 803248"];
3735 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803249"];
3736 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803250"];
3737 [label="return false; 803251"];
3738 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803252"];
3739 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803253"];
3740 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803254"];
3741 [label="return this; 803255"];
3742 [label="Debug.Assert(symbol.IsDefinition); 803256"];
3743 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803257"];
3744 [label="return _referenceManager; 803258"];
3745 [label="GetBoundReferenceManager(); 803259"];
3746 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 803260"];
3747 [label="param GetBoundReferenceManager(this) 803261"];
3748 [label="GetBoundReferenceManager(); 803262"];
3749 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803263"];
3750 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803264"];
3751 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803265"];
3752 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803266"];
3753 [label="param Translate(SyntaxNode syntaxNodeOpt) 803267"];
3754 [label="param Translate(DiagnosticBag diagnostics) 803268"];
3755 [label="param Translate(bool fromImplements = false) 803269"];
3756 [label="param Translate(bool needDeclaration = false) 803270"];
3757 [label="Debug.Assert(diagnostics != null); 803271"];
3758 [label="Debug.Assert(diagnostics != null); 803272"];
3759 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803273"];
3760 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803274"];
3761 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803275"];
3762 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803276"];
3763 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803277"];
3764 [label="object reference; 803278"];
3765 [label="Cci.INamedTypeReference typeRef; 803279"];
3766 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803280"];
3767 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803281"];
3768 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803282"];
3769 [label="IsGenericType(container) 803283"];
3770 [label="param IsGenericType(NamedTypeSymbol toCheck) 803284"];
3771 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803285"];
3772 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803286"];
3773 [label="return false; 803287"];
3774 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803288"];
3775 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803289"];
3776 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803290"];
3777 [label="param SynthesizeNullableAttributeIfNecessary(this) 803291"];
3778 [label="Debug.Assert(!needDeclaration); 803292"];
3779 [label="if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                } 803293"];
3780 [label="return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol); 803294"];
3781 [label="GetCciAdapter(namedTypeSymbol) 803295"];
3782 [label="param GetCciAdapter(Symbol symbol) 803296"];
3783 [label="param GetCciAdapter(this) 803297"];
3784 [label="return _genericInstanceMap.GetOrAdd(symbol, s => s.GetCciAdapter()); 803298"];
3785 [label="return _genericInstanceMap.GetOrAdd(symbol, s => s.GetCciAdapter()); 803299"];
3786 [label="return _genericInstanceMap.GetOrAdd(symbol, s => s.GetCciAdapter()); 803300"];
3787 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803301"];
3788 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803302"];
3789 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803303"];
3790 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803304"];
3791 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803305"];
3792 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803306"];
3793 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803307"];
3794 [label="param Translate(SyntaxNode syntaxNodeOpt) 803308"];
3795 [label="param Translate(DiagnosticBag diagnostics) 803309"];
3796 [label="param Translate(bool fromImplements = false) 803310"];
3797 [label="param Translate(bool needDeclaration = false) 803311"];
3798 [label="Debug.Assert(diagnostics != null); 803312"];
3799 [label="Debug.Assert(diagnostics != null); 803313"];
3800 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803314"];
3801 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803315"];
3802 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803316"];
3803 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803317"];
3804 [label="object reference; 803318"];
3805 [label="Cci.INamedTypeReference typeRef; 803319"];
3806 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803320"];
3807 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803321"];
3808 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803322"];
3809 [label="IsGenericType(container) 803323"];
3810 [label="param IsGenericType(NamedTypeSymbol toCheck) 803324"];
3811 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803325"];
3812 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803326"];
3813 [label="return false; 803327"];
3814 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803328"];
3815 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803329"];
3816 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803330"];
3817 [label="Debug.Assert(symbol.IsDefinition); 803331"];
3818 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803332"];
3819 [label="return _referenceManager; 803333"];
3820 [label="GetBoundReferenceManager(); 803334"];
3821 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 803335"];
3822 [label="param GetBoundReferenceManager(this) 803336"];
3823 [label="GetBoundReferenceManager(); 803337"];
3824 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803338"];
3825 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803339"];
3826 [label="param SynthesizeNullableAttributeIfNecessary(this) 803340"];
3827 [label="Debug.Assert(!needDeclaration); 803341"];
3828 [label="get\n            {\n                return SourceAssembly;\n            } 803342"];
3829 [label="SourceAssembly 803343"];
3830 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 803344"];
3831 [label="GetBoundReferenceManager() 803345"];
3832 [label="param GetBoundReferenceManager(this) 803346"];
3833 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803347"];
3834 [label="return _referenceManager; 803348"];
3835 [label="GetBoundReferenceManager(); 803349"];
3836 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 803350"];
3837 [label="param GetUnaliasedReferencedAssemblies(this) 803351"];
3838 [label="GetBoundReferenceManager() 803352"];
3839 [label="param GetBoundReferenceManager(this) 803353"];
3840 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 803354"];
3841 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 803355"];
3842 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 803356"];
3843 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 803357"];
3844 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803358"];
3845 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803359"];
3846 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 803360"];
3847 [label="bool typeIsGeneric = IsGenericType(container); 803361"];
3848 [label="IsGenericType(container) 803362"];
3849 [label="param IsGenericType(NamedTypeSymbol toCheck) 803363"];
3850 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803364"];
3851 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803365"];
3852 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803366"];
3853 [label="toCheck = toCheck.ContainingType; 803367"];
3854 [label="return false; 803368"];
3855 [label="bool typeIsGeneric = IsGenericType(container); 803369"];
3856 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803370"];
3857 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803371"];
3858 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803372"];
3859 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 803373"];
3860 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803374"];
3861 [label="object reference; 803375"];
3862 [label="Cci.INamedTypeReference typeRef; 803376"];
3863 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803377"];
3864 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803378"];
3865 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803379"];
3866 [label="IsGenericType(container) 803380"];
3867 [label="param IsGenericType(NamedTypeSymbol toCheck) 803381"];
3868 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803382"];
3869 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803383"];
3870 [label="return false; 803384"];
3871 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803385"];
3872 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803386"];
3873 [label="param GetExportedTypes(DiagnosticBag diagnostics) 803387"];
3874 [label="param GetExportedTypes(this) 803388"];
3875 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 803389"];
3876 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 803390"];
3877 [label="CalculateExportedTypes() 803391"];
3878 [label="param CalculateExportedTypes(this) 803392"];
3879 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 803393"];
3880 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 803394"];
3881 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 803395"];
3882 [label="var modules = sourceAssembly.Modules; 803396"];
3883 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 803397"];
3884 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 803398"];
3885 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 803399"];
3886 [label="sourceAssembly.DeclaringCompilation.Options 803400"];
3887 [label="get\n            {\n                return _options;\n            } 803401"];
3888 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 803402"];
3889 [label="GetForwardedTypes(sourceAssembly, builder); 803403"];
3890 [label="GetForwardedTypes(sourceAssembly, builder); 803404"];
3891 [label="GetForwardedTypes(sourceAssembly, builder) 803405"];
3892 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 803406"];
3893 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 803407"];
3894 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 803408"];
3895 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 803409"];
3896 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 803410"];
3897 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 803411"];
3898 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 803412"];
3899 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 803413"];
3900 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 803414"];
3901 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 803415"];
3902 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 803416"];
3903 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 803417"];
3904 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 803418"];
3905 [label="sourceAssembly.DeclaringCompilation.Options 803419"];
3906 [label="get\n            {\n                return _options;\n            } 803420"];
3907 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 803421"];
3908 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 803422"];
3909 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 803423"];
3910 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 803424"];
3911 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 803425"];
3912 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 803426"];
3913 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 803427"];
3914 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 803428"];
3915 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 803429"];
3916 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 803430"];
3917 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 803431"];
3918 [label="return seenTopLevelForwardedTypes; 803432"];
3919 [label="GetForwardedTypes(sourceAssembly, builder); 803433"];
3920 [label="return builder.ToImmutableAndFree(); 803434"];
3921 [label="_lazyExportedTypes = CalculateExportedTypes(); 803435"];
3922 [label="_lazyExportedTypes 803436"];
3923 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 803437"];
3924 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 803438"];
3925 [label="return _lazyExportedTypes; 803439"];
3926 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 803440"];
3927 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 803441"];
3928 [label="param AddEmbeddedResourcesFromAddedModules(this) 803442"];
3929 [label="var modules = _sourceAssembly.Modules; 803443"];
3930 [label="int count = modules.Length; 803444"];
3931 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 803445"];
3932 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 803446"];
3933 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 803447"];
3934 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 803448"];
3935 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 803449"];
3936 [label="this.SyntaxTrees 803450"];
3937 [label="_syntaxAndDeclarations.GetLazyState() 803451"];
3938 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 803452"];
3939 [label="=> null 803453"];
3940 [label="null 803454"];
3941 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 803455"];
3942 [label="param CommonGetBoundReferenceManager(this) 803456"];
3943 [label="GetBoundReferenceManager() 803457"];
3944 [label="param GetBoundReferenceManager(this) 803458"];
3945 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803459"];
3946 [label="return _referenceManager; 803460"];
3947 [label="return GetBoundReferenceManager(); 803461"];
3948 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 803462"];
3949 [label="param SerializePdbEmbeddedCompilationOptions(this) 803463"];
3950 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 803464"];
3951 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 803465"];
3952 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 803466"];
3953 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 803467"];
3954 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 803468"];
3955 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 803469"];
3956 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 803470"];
3957 [label="builder.WriteUTF8(key); 803471"];
3958 [label="builder.WriteUTF8(key); 803472"];
3959 [label="builder.WriteUTF8(key); 803473"];
3960 [label="builder.WriteByte(0); 803474"];
3961 [label="builder.WriteByte(0); 803475"];
3962 [label="builder.WriteUTF8(value); 803476"];
3963 [label="builder.WriteUTF8(value); 803477"];
3964 [label="builder.WriteUTF8(value); 803478"];
3965 [label="builder.WriteByte(0); 803479"];
3966 [label="builder.WriteByte(0); 803480"];
3967 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 803481"];
3968 [label="Options 803482"];
3969 [label="get\n            {\n                return _options;\n            } 803483"];
3970 [label="return _options; 803484"];
3971 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 803485"];
3972 [label="Options 803486"];
3973 [label="get\n            {\n                return _options;\n            } 803487"];
3974 [label="return _options; 803488"];
3975 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 803489"];
3976 [label="Options 803490"];
3977 [label="get\n            {\n                return _options;\n            } 803491"];
3978 [label="return _options; 803492"];
3979 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 803493"];
3980 [label="GetPreprocessorSymbols() 803494"];
3981 [label="param GetPreprocessorSymbols(this) 803495"];
3982 [label="SyntaxTrees 803496"];
3983 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 803497"];
3984 [label="_syntaxAndDeclarations.GetLazyState() 803498"];
3985 [label="param GetLazyState(this) 803499"];
3986 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 803500"];
3987 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 803501"];
3988 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 803502"];
3989 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 803503"];
3990 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 803504"];
3991 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 803505"];
3992 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803506"];
3993 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803507"];
3994 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803508"];
3995 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803509"];
3996 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803510"];
3997 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803511"];
3998 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803512"];
3999 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803513"];
4000 [label="param Translate(SyntaxNode syntaxNodeOpt) 803514"];
4001 [label="param Translate(DiagnosticBag diagnostics) 803515"];
4002 [label="param Translate(bool fromImplements = false) 803516"];
4003 [label="param Translate(bool needDeclaration = false) 803517"];
4004 [label="Debug.Assert(diagnostics != null); 803518"];
4005 [label="Debug.Assert(diagnostics != null); 803519"];
4006 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803520"];
4007 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803521"];
4008 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803522"];
4009 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803523"];
4010 [label="object reference; 803524"];
4011 [label="Cci.INamedTypeReference typeRef; 803525"];
4012 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803526"];
4013 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803527"];
4014 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803528"];
4015 [label="IsGenericType(container) 803529"];
4016 [label="param IsGenericType(NamedTypeSymbol toCheck) 803530"];
4017 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803531"];
4018 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803532"];
4019 [label="return false; 803533"];
4020 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803534"];
4021 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803535"];
4022 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803536"];
4023 [label="Debug.Assert(!needDeclaration); 803537"];
4024 [label="param IsGenericType(NamedTypeSymbol toCheck) 803538"];
4025 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803539"];
4026 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803540"];
4027 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803541"];
4028 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 803542"];
4029 [label="return true; 803543"];
4030 [label="param MustBeWrapped(ParameterSymbol param) 803544"];
4031 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 803545"];
4032 [label="var container = param.ContainingSymbol; 803546"];
4033 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 803547"];
4034 [label="ContainerIsGeneric(container) 803548"];
4035 [label="param ContainerIsGeneric(Symbol container) 803549"];
4036 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803550"];
4037 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 803551"];
4038 [label="IsGenericType(container.ContainingType) 803552"];
4039 [label="param IsGenericType(NamedTypeSymbol toCheck) 803553"];
4040 [label="return true; 803554"];
4041 [label="return TranslateAll(@params); 803555"];
4042 [label="TranslateAll(@params) 803556"];
4043 [label="param TranslateAll(ImmutableArray<ParameterSymbol> @params) 803557"];
4044 [label="param TranslateAll(this) 803558"];
4045 [label="var builder = ArrayBuilder<Cci.IParameterTypeInformation>.GetInstance(); 803559"];
4046 [label="foreach (var param in @params)\n            {\n                builder.Add(CreateParameterTypeInformationWrapper(param));\n            } 803560"];
4047 [label="foreach (var param in @params)\n            {\n                builder.Add(CreateParameterTypeInformationWrapper(param));\n            } 803561"];
4048 [label="builder.Add(CreateParameterTypeInformationWrapper(param)); 803562"];
4049 [label="CreateParameterTypeInformationWrapper(param) 803563"];
4050 [label="param CreateParameterTypeInformationWrapper(ParameterSymbol param) 803564"];
4051 [label="param CreateParameterTypeInformationWrapper(this) 803565"];
4052 [label="object reference; 803566"];
4053 [label="Cci.IParameterTypeInformation paramRef; 803567"];
4054 [label="if (_genericInstanceMap.TryGetValue(param, out reference))\n            {\n                return (Cci.IParameterTypeInformation)reference;\n            } 803568"];
4055 [label="if (_genericInstanceMap.TryGetValue(param, out reference))\n            {\n                return (Cci.IParameterTypeInformation)reference;\n            } 803569"];
4056 [label="if (_genericInstanceMap.TryGetValue(param, out reference))\n            {\n                return (Cci.IParameterTypeInformation)reference;\n            } 803570"];
4057 [label="return (Cci.IParameterTypeInformation)reference; 803571"];
4058 [label="builder.Add(CreateParameterTypeInformationWrapper(param)); 803572"];
4059 [label="Cci.IParameterTypeInformation paramRef; 803573"];
4060 [label="return builder.ToImmutableAndFree(); 803574"];
4061 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803575"];
4062 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803576"];
4063 [label="param Translate(SyntaxNode syntaxNodeOpt) 803577"];
4064 [label="param Translate(DiagnosticBag diagnostics) 803578"];
4065 [label="param Translate(bool fromImplements = false) 803579"];
4066 [label="param Translate(bool needDeclaration = false) 803580"];
4067 [label="Debug.Assert(diagnostics != null); 803581"];
4068 [label="Debug.Assert(diagnostics != null); 803582"];
4069 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803583"];
4070 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803584"];
4071 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803585"];
4072 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803586"];
4073 [label="object reference; 803587"];
4074 [label="Cci.INamedTypeReference typeRef; 803588"];
4075 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803589"];
4076 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803590"];
4077 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803591"];
4078 [label="IsGenericType(container) 803592"];
4079 [label="param IsGenericType(NamedTypeSymbol toCheck) 803593"];
4080 [label="return false; 803594"];
4081 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803595"];
4082 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803596"];
4083 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803597"];
4084 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803598"];
4085 [label="param GetType(EmitContext context) 803599"];
4086 [label="param GetType(this) 803600"];
4087 [label="return ((PEModuleBuilder)context.Module).Translate(_underlyingParameter.Type, syntaxNodeOpt: (CSharpSyntaxNode)context.SyntaxNodeOpt, diagnostics: context.Diagnostics); 803601"];
4088 [label="return ((PEModuleBuilder)context.Module).Translate(_underlyingParameter.Type, syntaxNodeOpt: (CSharpSyntaxNode)context.SyntaxNodeOpt, diagnostics: context.Diagnostics); 803602"];
4089 [label="((PEModuleBuilder)context.Module).Translate(_underlyingParameter.Type, syntaxNodeOpt: (CSharpSyntaxNode)context.SyntaxNodeOpt, diagnostics: context.Diagnostics) 803603"];
4090 [label="param Translate(TypeSymbol typeSymbol) 803604"];
4091 [label="param Translate(SyntaxNode syntaxNodeOpt) 803605"];
4092 [label="param Translate(DiagnosticBag diagnostics) 803606"];
4093 [label="param Translate(this) 803607"];
4094 [label="Debug.Assert(diagnostics != null); 803608"];
4095 [label="Debug.Assert(diagnostics != null); 803609"];
4096 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803610"];
4097 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803611"];
4098 [label="param Translate(SyntaxNode syntaxNodeOpt) 803612"];
4099 [label="param Translate(DiagnosticBag diagnostics) 803613"];
4100 [label="param Translate(bool fromImplements = false) 803614"];
4101 [label="param Translate(bool needDeclaration = false) 803615"];
4102 [label="param Translate(this) 803616"];
4103 [label="Debug.Assert(diagnostics != null); 803617"];
4104 [label="Debug.Assert(diagnostics != null); 803618"];
4105 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803619"];
4106 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803620"];
4107 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803621"];
4108 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803622"];
4109 [label="object reference; 803623"];
4110 [label="Cci.INamedTypeReference typeRef; 803624"];
4111 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803625"];
4112 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803626"];
4113 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803627"];
4114 [label="IsGenericType(container) 803628"];
4115 [label="param IsGenericType(NamedTypeSymbol toCheck) 803629"];
4116 [label="return false; 803630"];
4117 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803631"];
4118 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803632"];
4119 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803633"];
4120 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803634"];
4121 [label="get\n            {\n                return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.RefCustomModifiers);\n            } 803635"];
4122 [label="return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.RefCustomModifiers); 803636"];
4123 [label="get\n            {\n                return _underlyingParameter.RefKind != RefKind.None;\n            } 803637"];
4124 [label="return _underlyingParameter.RefKind != RefKind.None; 803638"];
4125 [label="get\n            {\n                return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.TypeWithAnnotations.CustomModifiers);\n            } 803639"];
4126 [label="return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.TypeWithAnnotations.CustomModifiers); 803640"];
4127 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803641"];
4128 [label="param Translate(SyntaxNode syntaxNodeOpt) 803642"];
4129 [label="param Translate(DiagnosticBag diagnostics) 803643"];
4130 [label="Debug.Assert(diagnostics != null); 803644"];
4131 [label="param Translate(SyntaxNode syntaxNodeOpt) 803645"];
4132 [label="param Translate(DiagnosticBag diagnostics) 803646"];
4133 [label="param Translate(bool fromImplements = false) 803647"];
4134 [label="param Translate(bool needDeclaration = false) 803648"];
4135 [label="Debug.Assert(diagnostics != null); 803649"];
4136 [label="Debug.Assert(diagnostics != null); 803650"];
4137 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803651"];
4138 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803652"];
4139 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803653"];
4140 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803654"];
4141 [label="object reference; 803655"];
4142 [label="Cci.INamedTypeReference typeRef; 803656"];
4143 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803657"];
4144 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803658"];
4145 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803659"];
4146 [label="IsGenericType(container) 803660"];
4147 [label="param IsGenericType(NamedTypeSymbol toCheck) 803661"];
4148 [label="return false; 803662"];
4149 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803663"];
4150 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803664"];
4151 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803665"];
4152 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803666"];
4153 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803667"];
4154 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803668"];
4155 [label="Debug.Assert(!needDeclaration); 803669"];
4156 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803670"];
4157 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803671"];
4158 [label="param Translate(SyntaxNode syntaxNodeOpt) 803672"];
4159 [label="param Translate(DiagnosticBag diagnostics) 803673"];
4160 [label="Debug.Assert(diagnostics != null); 803674"];
4161 [label="Cci.IParameterTypeInformation paramRef; 803675"];
4162 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803676"];
4163 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803677"];
4164 [label="return Translate((TypeParameterSymbol)typeSymbol); 803678"];
4165 [label="Translate((TypeParameterSymbol)typeSymbol) 803679"];
4166 [label="param Translate(TypeParameterSymbol param) 803680"];
4167 [label="if (!param.IsDefinition)\n                throw new InvalidOperationException(string.Format(CSharpResources.GenericParameterDefinition, param.Name)); 803681"];
4168 [label="return param.GetCciAdapter(); 803682"];
4169 [label="return false; 803683"];
4170 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 803684"];
4171 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803685"];
4172 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803686"];
4173 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803687"];
4174 [label="Debug.Assert(!needDeclaration); 803688"];
4175 [label="if (!param.IsDefinition)\n                throw new InvalidOperationException(string.Format(CSharpResources.GenericParameterDefinition, param.Name)); 803689"];
4176 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803690"];
4177 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803691"];
4178 [label="toCheck = toCheck.ContainingType; 803692"];
4179 [label="return false; 803693"];
4180 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803694"];
4181 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803695"];
4182 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803696"];
4183 [label="param Translate(SyntaxNode syntaxNodeOpt) 803697"];
4184 [label="param Translate(DiagnosticBag diagnostics) 803698"];
4185 [label="param Translate(bool fromImplements = false) 803699"];
4186 [label="param Translate(bool needDeclaration = false) 803700"];
4187 [label="Debug.Assert(diagnostics != null); 803701"];
4188 [label="Debug.Assert(diagnostics != null); 803702"];
4189 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803703"];
4190 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803704"];
4191 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803705"];
4192 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803706"];
4193 [label="object reference; 803707"];
4194 [label="Cci.INamedTypeReference typeRef; 803708"];
4195 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803709"];
4196 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803710"];
4197 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803711"];
4198 [label="IsGenericType(container) 803712"];
4199 [label="param IsGenericType(NamedTypeSymbol toCheck) 803713"];
4200 [label="return false; 803714"];
4201 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803715"];
4202 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803716"];
4203 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803717"];
4204 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803718"];
4205 [label="=> _sourceAssembly 803719"];
4206 [label="_sourceAssembly 803720"];
4207 [label="=> _metadataName 803721"];
4208 [label="_metadataName 803722"];
4209 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 803723"];
4210 [label="param MemberVisibility(Symbol symbol) 803724"];
4211 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 803725"];
4212 [label="return Cci.TypeMemberVisibility.Public; 803726"];
4213 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803727"];
4214 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803728"];
4215 [label="param Translate(SyntaxNode syntaxNodeOpt) 803729"];
4216 [label="param Translate(DiagnosticBag diagnostics) 803730"];
4217 [label="param Translate(bool fromImplements = false) 803731"];
4218 [label="param Translate(bool needDeclaration = false) 803732"];
4219 [label="Debug.Assert(diagnostics != null); 803733"];
4220 [label="Debug.Assert(diagnostics != null); 803734"];
4221 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803735"];
4222 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803736"];
4223 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803737"];
4224 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803738"];
4225 [label="object reference; 803739"];
4226 [label="Cci.INamedTypeReference typeRef; 803740"];
4227 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803741"];
4228 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803742"];
4229 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803743"];
4230 [label="IsGenericType(container) 803744"];
4231 [label="param IsGenericType(NamedTypeSymbol toCheck) 803745"];
4232 [label="return false; 803746"];
4233 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803747"];
4234 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803748"];
4235 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803749"];
4236 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803750"];
4237 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803751"];
4238 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803752"];
4239 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803753"];
4240 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803754"];
4241 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803755"];
4242 [label="Debug.Assert(!needDeclaration); 803756"];
4243 [label="Debug.Assert(!needDeclaration); 803757"];
4244 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 803758"];
4245 [label="return Cci.TypeMemberVisibility.Private; 803759"];
4246 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803760"];
4247 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803761"];
4248 [label="param Translate(SyntaxNode syntaxNodeOpt) 803762"];
4249 [label="param Translate(DiagnosticBag diagnostics) 803763"];
4250 [label="param Translate(bool fromImplements = false) 803764"];
4251 [label="param Translate(bool needDeclaration = false) 803765"];
4252 [label="Debug.Assert(diagnostics != null); 803766"];
4253 [label="Debug.Assert(diagnostics != null); 803767"];
4254 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803768"];
4255 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803769"];
4256 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803770"];
4257 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803771"];
4258 [label="object reference; 803772"];
4259 [label="Cci.INamedTypeReference typeRef; 803773"];
4260 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803774"];
4261 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803775"];
4262 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803776"];
4263 [label="IsGenericType(container) 803777"];
4264 [label="param IsGenericType(NamedTypeSymbol toCheck) 803778"];
4265 [label="return false; 803779"];
4266 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803780"];
4267 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803781"];
4268 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803782"];
4269 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803783"];
4270 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 803784"];
4271 [label="return Cci.TypeMemberVisibility.Assembly; 803785"];
4272 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803786"];
4273 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803787"];
4274 [label="param Translate(SyntaxNode syntaxNodeOpt) 803788"];
4275 [label="param Translate(DiagnosticBag diagnostics) 803789"];
4276 [label="param Translate(bool fromImplements = false) 803790"];
4277 [label="param Translate(bool needDeclaration = false) 803791"];
4278 [label="Debug.Assert(diagnostics != null); 803792"];
4279 [label="Debug.Assert(diagnostics != null); 803793"];
4280 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803794"];
4281 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803795"];
4282 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803796"];
4283 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803797"];
4284 [label="object reference; 803798"];
4285 [label="Cci.INamedTypeReference typeRef; 803799"];
4286 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803800"];
4287 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803801"];
4288 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803802"];
4289 [label="IsGenericType(container) 803803"];
4290 [label="param IsGenericType(NamedTypeSymbol toCheck) 803804"];
4291 [label="return false; 803805"];
4292 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803806"];
4293 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803807"];
4294 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803808"];
4295 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803809"];
4296 [label="get { return _metadataName; } 803810"];
4297 [label="return _metadataName; 803811"];
4298 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803812"];
4299 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803813"];
4300 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803814"];
4301 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803815"];
4302 [label="object reference; 803816"];
4303 [label="Cci.INamedTypeReference typeRef; 803817"];
4304 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803818"];
4305 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803819"];
4306 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803820"];
4307 [label="IsGenericType(container) 803821"];
4308 [label="param IsGenericType(NamedTypeSymbol toCheck) 803822"];
4309 [label="return false; 803823"];
4310 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803824"];
4311 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803825"];
4312 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803826"];
4313 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 803827"];
4314 [label="GetBoundReferenceManager() 803828"];
4315 [label="GetBoundReferenceManager(); 803829"];
4316 [label="Debug.Assert(result.SpecialType == specialType); 803830"];
4317 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 803831"];
4318 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 803832"];
4319 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803833"];
4320 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803834"];
4321 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 803835"];
4322 [label="bool typeIsGeneric = IsGenericType(container); 803836"];
4323 [label="IsGenericType(container) 803837"];
4324 [label="param IsGenericType(NamedTypeSymbol toCheck) 803838"];
4325 [label="toCheck = toCheck.ContainingType; 803839"];
4326 [label="return false; 803840"];
4327 [label="bool typeIsGeneric = IsGenericType(container); 803841"];
4328 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803842"];
4329 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803843"];
4330 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803844"];
4331 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 803845"];
4332 [label="toCheck = toCheck.ContainingType; 803846"];
4333 [label="return false; 803847"];
4334 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803848"];
4335 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803849"];
4336 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803850"];
4337 [label="param Translate(SyntaxNode syntaxNodeOpt) 803851"];
4338 [label="param Translate(DiagnosticBag diagnostics) 803852"];
4339 [label="param Translate(bool fromImplements = false) 803853"];
4340 [label="param Translate(bool needDeclaration = false) 803854"];
4341 [label="Debug.Assert(diagnostics != null); 803855"];
4342 [label="Debug.Assert(diagnostics != null); 803856"];
4343 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803857"];
4344 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803858"];
4345 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803859"];
4346 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803860"];
4347 [label="object reference; 803861"];
4348 [label="Cci.INamedTypeReference typeRef; 803862"];
4349 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803863"];
4350 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803864"];
4351 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803865"];
4352 [label="IsGenericType(container) 803866"];
4353 [label="param IsGenericType(NamedTypeSymbol toCheck) 803867"];
4354 [label="return false; 803868"];
4355 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803869"];
4356 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803870"];
4357 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803871"];
4358 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 803872"];
4359 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 803873"];
4360 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 803874"];
4361 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 803875"];
4362 [label="GetBoundReferenceManager() 803876"];
4363 [label="param GetBoundReferenceManager(this) 803877"];
4364 [label="GetBoundReferenceManager(); 803878"];
4365 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 803879"];
4366 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 803880"];
4367 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803881"];
4368 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 803882"];
4369 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 803883"];
4370 [label="bool typeIsGeneric = IsGenericType(container); 803884"];
4371 [label="IsGenericType(container) 803885"];
4372 [label="param IsGenericType(NamedTypeSymbol toCheck) 803886"];
4373 [label="toCheck = toCheck.ContainingType; 803887"];
4374 [label="return false; 803888"];
4375 [label="bool typeIsGeneric = IsGenericType(container); 803889"];
4376 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803890"];
4377 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803891"];
4378 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 803892"];
4379 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 803893"];
4380 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803894"];
4381 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803895"];
4382 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803896"];
4383 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803897"];
4384 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803898"];
4385 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803899"];
4386 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 803900"];
4387 [label="param Translate(SyntaxNode syntaxNodeOpt) 803901"];
4388 [label="param Translate(DiagnosticBag diagnostics) 803902"];
4389 [label="param Translate(bool fromImplements = false) 803903"];
4390 [label="param Translate(bool needDeclaration = false) 803904"];
4391 [label="Debug.Assert(diagnostics != null); 803905"];
4392 [label="Debug.Assert(diagnostics != null); 803906"];
4393 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803907"];
4394 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 803908"];
4395 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 803909"];
4396 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 803910"];
4397 [label="object reference; 803911"];
4398 [label="Cci.INamedTypeReference typeRef; 803912"];
4399 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 803913"];
4400 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803914"];
4401 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803915"];
4402 [label="IsGenericType(container) 803916"];
4403 [label="param IsGenericType(NamedTypeSymbol toCheck) 803917"];
4404 [label="return false; 803918"];
4405 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803919"];
4406 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 803920"];
4407 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 803921"];
4408 [label="toCheck = toCheck.ContainingType; 803922"];
4409 [label="return false; 803923"];
4410 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 803924"];
4411 [label="toCheck = toCheck.ContainingType; 803925"];
4412 [label="Debug.Assert(symbol.IsDefinition); 803926"];
4413 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803927"];
4414 [label="return _referenceManager; 803928"];
4415 [label="GetBoundReferenceManager(); 803929"];
4416 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 803930"];
4417 [label="param GetBoundReferenceManager(this) 803931"];
4418 [label="GetBoundReferenceManager(); 803932"];
4419 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803933"];
4420 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 803934"];
4421 [label="param SynthesizeNullableAttributeIfNecessary(this) 803935"];
4422 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803936"];
4423 [label="return _referenceManager; 803937"];
4424 [label="GetBoundReferenceManager(); 803938"];
4425 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 803939"];
4426 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 803940"];
4427 [label="diagnostics.AddRange(result.Diagnostics); 803941"];
4428 [label="diagnostics.AddRange(result.Diagnostics); 803942"];
4429 [label="assembly = executableStream.ToImmutable(); 803943"];
4430 [label="assembly = executableStream.ToImmutable(); 803944"];
4431 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 803945"];
4432 [label="return new EmitOutput(assembly, pdb); 803946"];
4433 [label="return new EmitOutput(assembly, pdb); 803947"];
4434 [label="return new EmitOutput(assembly, pdb); 803948"];
4435 [label="new EmitOutput(assembly, pdb) 803949"];
4436 [label="param EmitOutput(ImmutableArray<byte> assembly) 803950"];
4437 [label="param EmitOutput(ImmutableArray<byte> pdb) 803951"];
4438 [label="param EmitOutput(this) 803952"];
4439 [label="Assembly 803953"];
4440 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 803954"];
4441 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 803955"];
4442 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 803956"];
4443 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 803957"];
4444 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 803958"];
4445 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 803959"];
4446 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 803960"];
4447 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 803961"];
4448 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 803962"];
4449 [label="pdb = readMetadata(mdReader); 803963"];
4450 [label="readMetadata(mdReader) 803964"];
4451 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 803965"];
4452 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 803966"];
4453 [label="var length = mdReader.MetadataLength; 803967"];
4454 [label="var bytes = new byte[length]; 803968"];
4455 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 803969"];
4456 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 803970"];
4457 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 803971"];
4458 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 803972"];
4459 [label="return ImmutableArray.Create(bytes); 803973"];
4460 [label="return ImmutableArray.Create(bytes); 803974"];
4461 [label="Pdb 803975"];
4462 [label="get { return this.Assembly.GetPublicSymbol(); } 803976"];
4463 [label="this.Assembly 803977"];
4464 [label="get\n            {\n                return SourceAssembly;\n            } 803978"];
4465 [label="SourceAssembly 803979"];
4466 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 803980"];
4467 [label="GetBoundReferenceManager() 803981"];
4468 [label="param GetBoundReferenceManager(this) 803982"];
4469 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 803983"];
4470 [label="return _referenceManager; 803984"];
4471 [label="GetBoundReferenceManager(); 803985"];
4472 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 803986"];
4473 [label="return this.Assembly.GetPublicSymbol(); 803987"];
4474 [label="_diagnostics = testEnvironment.GetDiagnostics(); 803988"];
4475 [label="_diagnostics 803989"];
4476 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 803990"];
4477 [label="EmittedAssemblyData 803991"];
4478 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 803992"];
4479 [label="EmittedAssemblyPdb 803993"];
4480 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 803994"];
4481 [label="_testData 803995"];
4482 [label="return _compilation.Assembly.Identity.GetDisplayName(); 803996"];
4483 [label="_compilation.Assembly 803997"];
4484 [label="get { return this.Assembly.GetPublicSymbol(); } 803998"];
4485 [label="this.Assembly 803999"];
4486 [label="SourceAssembly 804000"];
4487 [label="GetBoundReferenceManager() 804001"];
4488 [label="param GetBoundReferenceManager(this) 804002"];
4489 [label="GetBoundReferenceManager(); 804003"];
4490 [label="return _compilation.Assembly.Identity.GetDisplayName(); 804004"];
4491 [label="_allModuleData = testEnvironment.GetAllModuleData(); 804005"];
4492 [label="_allModuleData 804006"];
4493 [label="testEnvironment.Verify(peVerify); 804007"];
4494 [label="testEnvironment.Verify(peVerify); 804008"];
4495 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 804009"];
4496 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 804010"];
4497 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 804011"];
4498 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 804012"];
4499 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 804013"];
4500 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 804014"];
4501 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 804015"];
4502 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 804016"];
4503 [label="if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                } 804017"];
4504 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804018"];
4505 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 804019"];
4506 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 804020"];
4507 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 804021"];
4508 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 804022"];
4509 [label="return verifier; 804023"];
4510 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804024"];
4511 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 804025"];
4512 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 804026"];
4513 [label="result = verifier; 804027"];
4514 [label="CustomAssert.NotNull(result); 804028"];
4515 [label="return result; 804029"];
4516 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804030"];
4517 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804031"];
4518 [label="CompileAndVerify(source, expectedOutput: 'Hello!'); 804032"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 12;
14 -> 13;
15 -> 14;
15 -> 13;
16 -> 13;
17 -> 15;
17 -> 16;
18 -> 16;
19 -> 17;
19 -> 18;
19 -> 16;
20 -> 16;
20 -> 1;
21 -> 1;
22 -> 1;
23 -> 20;
23 -> 22;
24 -> 21;
24 -> 22;
25 -> 21;
25 -> 22;
26 -> 21;
26 -> 22;
27 -> 21;
27 -> 22;
28 -> 21;
28 -> 22;
29 -> 21;
29 -> 22;
30 -> 21;
30 -> 22;
31 -> 21;
31 -> 22;
32 -> 21;
32 -> 22;
33 -> 21;
33 -> 22;
34 -> 21;
34 -> 22;
35 -> 21;
35 -> 22;
36 -> 21;
36 -> 22;
37 -> 21;
37 -> 22;
38 -> 21;
38 -> 22;
39 -> 10;
39 -> 22;
40 -> 22;
41 -> 31;
41 -> 40;
41 -> 22;
42 -> 41;
42 -> 22;
43 -> 42;
43 -> 34;
43 -> 22;
44 -> 23;
44 -> 22;
45 -> 24;
45 -> 22;
46 -> 43;
46 -> 22;
47 -> 35;
47 -> 22;
48 -> 37;
48 -> 22;
49 -> 22;
50 -> 49;
51 -> 50;
51 -> 22;
52 -> 22;
53 -> 22;
54 -> 44;
54 -> 53;
55 -> 45;
55 -> 53;
56 -> 46;
56 -> 53;
57 -> 47;
57 -> 53;
58 -> 48;
58 -> 53;
59 -> 51;
59 -> 53;
60 -> 52;
60 -> 53;
61 -> 52;
61 -> 53;
62 -> 54;
62 -> 53;
63 -> 58;
63 -> 53;
64 -> 55;
64 -> 53;
65 -> 53;
66 -> 63;
66 -> 65;
67 -> 64;
67 -> 65;
68 -> 66;
68 -> 65;
69 -> 65;
70 -> 68;
70 -> 69;
71 -> 70;
71 -> 69;
72 -> 71;
73 -> 0;
73 -> 72;
74 -> 73;
75 -> 74;
76 -> 74;
77 -> 0;
77 -> 76;
78 -> 77;
78 -> 75;
78 -> 74;
79 -> 78;
79 -> 72;
80 -> 65;
81 -> 67;
81 -> 80;
81 -> 65;
82 -> 79;
82 -> 81;
83 -> 56;
83 -> 53;
84 -> 57;
84 -> 53;
85 -> 59;
85 -> 53;
86 -> 60;
86 -> 53;
87 -> 61;
87 -> 53;
88 -> 53;
89 -> 62;
89 -> 88;
90 -> 82;
90 -> 88;
91 -> 83;
91 -> 88;
92 -> 84;
92 -> 88;
93 -> 85;
93 -> 88;
94 -> 86;
94 -> 88;
95 -> 87;
95 -> 88;
96 -> 89;
96 -> 88;
97 -> 90;
97 -> 88;
98 -> 91;
98 -> 88;
99 -> 92;
99 -> 88;
100 -> 93;
100 -> 88;
101 -> 94;
101 -> 88;
102 -> 95;
102 -> 88;
103 -> 88;
104 -> 103;
104 -> 88;
105 -> 88;
106 -> 96;
106 -> 105;
107 -> 97;
107 -> 105;
108 -> 98;
108 -> 105;
109 -> 99;
109 -> 105;
110 -> 100;
110 -> 105;
111 -> 101;
111 -> 105;
112 -> 102;
112 -> 105;
113 -> 104;
113 -> 105;
114 -> 109;
114 -> 105;
115 -> 111;
115 -> 105;
116 -> 105;
117 -> 114;
117 -> 116;
118 -> 115;
118 -> 116;
119 -> 106;
119 -> 116;
120 -> 119;
120 -> 19;
120 -> 116;
121 -> 120;
122 -> 118;
122 -> 120;
123 -> 117;
123 -> 120;
124 -> 120;
125 -> 121;
125 -> 124;
126 -> 122;
126 -> 124;
127 -> 123;
127 -> 124;
128 -> 121;
128 -> 124;
129 -> 124;
130 -> 127;
130 -> 129;
130 -> 124;
131 -> 0;
131 -> 130;
132 -> 125;
132 -> 124;
133 -> 0;
133 -> 124;
134 -> 133;
134 -> 128;
134 -> 124;
135 -> 124;
136 -> 132;
136 -> 134;
136 -> 135;
136 -> 0;
136 -> 124;
137 -> 136;
137 -> 124;
138 -> 131;
138 -> 124;
139 -> 126;
139 -> 124;
140 -> 124;
141 -> 137;
141 -> 138;
141 -> 139;
141 -> 140;
141 -> 136;
141 -> 0;
141 -> 124;
142 -> 124;
143 -> 141;
143 -> 142;
144 -> 142;
145 -> 142;
146 -> 143;
146 -> 141;
146 -> 145;
146 -> 142;
147 -> 144;
147 -> 142;
148 -> 142;
149 -> 146;
149 -> 141;
149 -> 145;
149 -> 147;
149 -> 148;
149 -> 144;
149 -> 142;
150 -> 142;
151 -> 150;
151 -> 144;
151 -> 142;
152 -> 144;
152 -> 142;
153 -> 142;
154 -> 152;
154 -> 153;
154 -> 144;
154 -> 151;
154 -> 142;
155 -> 143;
155 -> 142;
156 -> 155;
156 -> 121;
156 -> 120;
157 -> 121;
157 -> 105;
158 -> 105;
159 -> 108;
159 -> 158;
159 -> 105;
160 -> 0;
160 -> 105;
161 -> 113;
161 -> 105;
162 -> 110;
162 -> 157;
162 -> 107;
162 -> 108;
162 -> 105;
163 -> 162;
163 -> 105;
164 -> 105;
165 -> 163;
165 -> 164;
166 -> 0;
166 -> 164;
167 -> 166;
168 -> 105;
169 -> 42;
171 -> 169;
171 -> 170;
172 -> 171;
173 -> 0;
175 -> 173;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
179 -> 162;
179 -> 121;
179 -> 156;
179 -> 141;
179 -> 78;
179 -> 0;
179 -> 42;
179 -> 75;
179 -> 105;
180 -> 105;
181 -> 179;
181 -> 180;
182 -> 179;
182 -> 180;
183 -> 179;
183 -> 180;
184 -> 179;
184 -> 180;
185 -> 181;
185 -> 180;
186 -> 184;
186 -> 180;
187 -> 182;
187 -> 180;
188 -> 183;
188 -> 180;
189 -> 180;
190 -> 180;
191 -> 185;
191 -> 190;
192 -> 186;
192 -> 190;
193 -> 187;
193 -> 190;
194 -> 188;
194 -> 190;
195 -> 189;
195 -> 190;
196 -> 189;
196 -> 190;
197 -> 189;
197 -> 190;
198 -> 189;
198 -> 190;
199 -> 190;
200 -> 192;
200 -> 199;
200 -> 190;
201 -> 198;
201 -> 190;
202 -> 194;
202 -> 190;
203 -> 191;
203 -> 190;
204 -> 192;
204 -> 190;
205 -> 202;
205 -> 190;
206 -> 195;
206 -> 190;
207 -> 196;
207 -> 190;
208 -> 197;
208 -> 190;
209 -> 198;
209 -> 190;
210 -> 190;
211 -> 0;
211 -> 190;
212 -> 192;
212 -> 202;
212 -> 190;
213 -> 190;
214 -> 211;
214 -> 213;
215 -> 212;
215 -> 213;
216 -> 212;
216 -> 213;
217 -> 211;
217 -> 213;
218 -> 209;
218 -> 213;
219 -> 210;
219 -> 213;
220 -> 210;
220 -> 213;
221 -> 214;
221 -> 213;
222 -> 215;
222 -> 213;
223 -> 216;
223 -> 213;
224 -> 217;
224 -> 213;
225 -> 218;
225 -> 213;
226 -> 213;
227 -> 226;
227 -> 221;
227 -> 222;
227 -> 223;
227 -> 224;
227 -> 225;
227 -> 0;
227 -> 202;
227 -> 213;
228 -> 226;
228 -> 213;
229 -> 219;
229 -> 226;
229 -> 213;
230 -> 190;
231 -> 203;
231 -> 230;
232 -> 204;
232 -> 230;
233 -> 205;
233 -> 230;
234 -> 206;
234 -> 230;
235 -> 207;
235 -> 230;
236 -> 208;
236 -> 230;
237 -> 209;
237 -> 230;
238 -> 210;
238 -> 230;
239 -> 210;
239 -> 230;
240 -> 210;
240 -> 230;
241 -> 210;
241 -> 230;
242 -> 210;
242 -> 230;
243 -> 210;
243 -> 230;
244 -> 231;
244 -> 230;
245 -> 232;
245 -> 230;
246 -> 233;
246 -> 230;
247 -> 234;
247 -> 230;
248 -> 235;
248 -> 230;
249 -> 236;
249 -> 230;
250 -> 237;
250 -> 230;
251 -> 238;
251 -> 230;
252 -> 239;
252 -> 230;
253 -> 240;
253 -> 230;
254 -> 240;
254 -> 227;
254 -> 230;
255 -> 254;
255 -> 227;
255 -> 228;
255 -> 229;
255 -> 230;
256 -> 241;
256 -> 230;
257 -> 242;
257 -> 230;
258 -> 230;
259 -> 244;
259 -> 258;
260 -> 245;
260 -> 258;
261 -> 246;
261 -> 258;
262 -> 247;
262 -> 258;
263 -> 248;
263 -> 258;
264 -> 249;
264 -> 258;
265 -> 250;
265 -> 258;
266 -> 251;
266 -> 258;
267 -> 252;
267 -> 258;
268 -> 253;
268 -> 258;
269 -> 255;
269 -> 258;
270 -> 256;
270 -> 258;
271 -> 257;
271 -> 258;
272 -> 243;
272 -> 258;
273 -> 259;
273 -> 258;
274 -> 261;
274 -> 258;
275 -> 269;
275 -> 258;
276 -> 265;
276 -> 258;
277 -> 270;
277 -> 258;
278 -> 271;
278 -> 258;
279 -> 258;
280 -> 279;
280 -> 273;
280 -> 274;
280 -> 275;
280 -> 276;
280 -> 277;
280 -> 278;
280 -> 202;
280 -> 255;
280 -> 258;
281 -> 279;
281 -> 258;
282 -> 279;
282 -> 258;
283 -> 279;
283 -> 258;
284 -> 279;
284 -> 258;
285 -> 279;
285 -> 258;
286 -> 279;
286 -> 258;
287 -> 279;
287 -> 258;
288 -> 279;
288 -> 258;
289 -> 279;
289 -> 258;
290 -> 279;
290 -> 258;
291 -> 279;
291 -> 258;
292 -> 279;
292 -> 258;
293 -> 279;
293 -> 258;
294 -> 279;
294 -> 258;
295 -> 279;
295 -> 258;
296 -> 279;
296 -> 258;
297 -> 279;
297 -> 258;
298 -> 279;
298 -> 258;
299 -> 279;
299 -> 258;
300 -> 279;
300 -> 258;
301 -> 279;
301 -> 258;
302 -> 279;
302 -> 258;
303 -> 279;
303 -> 258;
304 -> 279;
304 -> 258;
305 -> 279;
305 -> 258;
306 -> 279;
306 -> 258;
307 -> 258;
308 -> 307;
308 -> 279;
308 -> 258;
309 -> 279;
309 -> 258;
310 -> 309;
310 -> 280;
310 -> 281;
310 -> 282;
310 -> 283;
310 -> 284;
310 -> 285;
310 -> 286;
310 -> 287;
310 -> 288;
310 -> 289;
310 -> 290;
310 -> 291;
310 -> 292;
310 -> 293;
310 -> 294;
310 -> 295;
310 -> 296;
310 -> 297;
310 -> 298;
310 -> 299;
310 -> 300;
310 -> 301;
310 -> 302;
310 -> 303;
310 -> 304;
310 -> 305;
310 -> 306;
310 -> 308;
310 -> 307;
310 -> 258;
311 -> 310;
311 -> 279;
311 -> 258;
312 -> 260;
312 -> 279;
312 -> 258;
313 -> 279;
313 -> 258;
314 -> 258;
315 -> 258;
316 -> 313;
316 -> 315;
317 -> 314;
317 -> 315;
318 -> 317;
318 -> 315;
319 -> 317;
319 -> 315;
320 -> 317;
320 -> 315;
321 -> 316;
321 -> 317;
321 -> 315;
322 -> 314;
322 -> 279;
322 -> 258;
323 -> 279;
323 -> 310;
323 -> 258;
324 -> 323;
324 -> 310;
324 -> 311;
324 -> 312;
324 -> 322;
324 -> 321;
324 -> 319;
324 -> 320;
324 -> 258;
325 -> 324;
325 -> 279;
325 -> 258;
326 -> 279;
326 -> 324;
326 -> 258;
327 -> 326;
327 -> 324;
327 -> 325;
327 -> 258;
328 -> 327;
328 -> 279;
328 -> 258;
329 -> 279;
329 -> 327;
329 -> 258;
330 -> 329;
330 -> 327;
330 -> 328;
330 -> 258;
331 -> 330;
331 -> 279;
331 -> 258;
332 -> 279;
332 -> 330;
332 -> 258;
333 -> 332;
333 -> 330;
333 -> 331;
333 -> 258;
334 -> 333;
334 -> 279;
334 -> 258;
335 -> 279;
335 -> 258;
336 -> 335;
336 -> 333;
336 -> 334;
336 -> 258;
337 -> 336;
337 -> 279;
337 -> 258;
338 -> 268;
338 -> 336;
338 -> 258;
339 -> 258;
340 -> 338;
340 -> 339;
341 -> 339;
342 -> 340;
342 -> 339;
343 -> 342;
343 -> 336;
343 -> 337;
343 -> 339;
344 -> 0;
344 -> 339;
345 -> 344;
345 -> 341;
345 -> 339;
346 -> 345;
346 -> 258;
347 -> 346;
347 -> 279;
347 -> 258;
348 -> 265;
348 -> 258;
349 -> 348;
350 -> 262;
350 -> 349;
350 -> 348;
351 -> 263;
351 -> 349;
351 -> 348;
352 -> 350;
352 -> 351;
352 -> 348;
353 -> 264;
353 -> 349;
353 -> 348;
354 -> 352;
354 -> 353;
354 -> 348;
355 -> 267;
355 -> 258;
356 -> 279;
356 -> 336;
356 -> 337;
356 -> 347;
356 -> 355;
357 -> 355;
358 -> 279;
358 -> 357;
359 -> 358;
359 -> 356;
359 -> 357;
360 -> 266;
360 -> 355;
361 -> 356;
361 -> 359;
361 -> 360;
361 -> 355;
362 -> 361;
362 -> 279;
362 -> 355;
363 -> 268;
363 -> 279;
363 -> 258;
364 -> 279;
364 -> 361;
364 -> 258;
365 -> 258;
366 -> 279;
366 -> 361;
366 -> 365;
366 -> 258;
367 -> 190;
368 -> 193;
368 -> 367;
368 -> 190;
369 -> 193;
369 -> 368;
370 -> 368;
371 -> 369;
371 -> 370;
372 -> 210;
372 -> 370;
373 -> 370;
374 -> 371;
374 -> 373;
374 -> 370;
375 -> 371;
375 -> 370;
376 -> 375;
376 -> 361;
376 -> 362;
376 -> 363;
376 -> 370;
377 -> 370;
378 -> 372;
378 -> 376;
378 -> 370;
379 -> 377;
379 -> 370;
380 -> 378;
380 -> 376;
380 -> 370;
381 -> 379;
381 -> 380;
381 -> 377;
381 -> 376;
381 -> 370;
382 -> 370;
383 -> 370;
384 -> 371;
384 -> 370;
385 -> 384;
385 -> 381;
385 -> 370;
386 -> 385;
387 -> 385;
388 -> 385;
389 -> 372;
389 -> 388;
389 -> 385;
390 -> 385;
391 -> 377;
391 -> 390;
391 -> 388;
391 -> 385;
392 -> 382;
392 -> 385;
392 -> 391;
393 -> 383;
393 -> 385;
394 -> 377;
394 -> 391;
394 -> 370;
395 -> 372;
395 -> 394;
395 -> 370;
396 -> 371;
396 -> 370;
397 -> 370;
398 -> 396;
398 -> 397;
399 -> 378;
399 -> 397;
400 -> 399;
400 -> 394;
400 -> 397;
401 -> 399;
401 -> 394;
401 -> 397;
402 -> 399;
402 -> 394;
402 -> 397;
403 -> 399;
403 -> 394;
403 -> 397;
404 -> 399;
404 -> 394;
404 -> 397;
405 -> 398;
405 -> 397;
406 -> 399;
406 -> 394;
406 -> 405;
406 -> 397;
407 -> 397;
408 -> 404;
408 -> 407;
408 -> 397;
409 -> 406;
409 -> 408;
410 -> 408;
411 -> 409;
411 -> 410;
412 -> 399;
412 -> 410;
413 -> 411;
413 -> 410;
414 -> 412;
414 -> 406;
414 -> 410;
415 -> 410;
416 -> 410;
417 -> 413;
417 -> 416;
418 -> 414;
418 -> 416;
419 -> 414;
419 -> 416;
420 -> 414;
420 -> 416;
421 -> 414;
421 -> 416;
422 -> 415;
422 -> 416;
423 -> 415;
423 -> 416;
424 -> 416;
424 -> 417;
424 -> 418;
424 -> 419;
424 -> 420;
424 -> 421;
424 -> 406;
425 -> 415;
425 -> 408;
426 -> 425;
426 -> 370;
427 -> 372;
427 -> 424;
427 -> 370;
428 -> 392;
428 -> 370;
429 -> 426;
429 -> 370;
430 -> 370;
431 -> 427;
431 -> 430;
432 -> 428;
432 -> 430;
433 -> 429;
433 -> 430;
434 -> 372;
434 -> 430;
435 -> 434;
435 -> 424;
435 -> 430;
436 -> 430;
437 -> 434;
437 -> 436;
438 -> 437;
438 -> 424;
438 -> 436;
439 -> 438;
439 -> 436;
440 -> 439;
440 -> 430;
441 -> 434;
441 -> 424;
441 -> 416;
441 -> 422;
441 -> 430;
442 -> 430;
443 -> 441;
443 -> 442;
444 -> 443;
444 -> 441;
444 -> 442;
445 -> 430;
446 -> 444;
446 -> 445;
447 -> 431;
447 -> 430;
448 -> 432;
448 -> 430;
449 -> 433;
449 -> 430;
450 -> 430;
451 -> 430;
452 -> 435;
452 -> 451;
453 -> 435;
453 -> 451;
454 -> 435;
454 -> 451;
455 -> 440;
455 -> 451;
456 -> 444;
456 -> 451;
457 -> 446;
457 -> 451;
458 -> 446;
458 -> 451;
459 -> 447;
459 -> 451;
460 -> 448;
460 -> 451;
461 -> 449;
461 -> 451;
462 -> 446;
462 -> 451;
463 -> 450;
463 -> 451;
464 -> 450;
464 -> 451;
465 -> 455;
465 -> 451;
466 -> 456;
466 -> 451;
467 -> 457;
467 -> 451;
468 -> 461;
468 -> 446;
468 -> 451;
469 -> 463;
469 -> 451;
470 -> 451;
471 -> 465;
471 -> 470;
472 -> 466;
472 -> 470;
473 -> 467;
473 -> 470;
474 -> 469;
474 -> 470;
475 -> 464;
475 -> 470;
476 -> 474;
476 -> 470;
477 -> 470;
478 -> 477;
478 -> 470;
479 -> 477;
479 -> 470;
480 -> 477;
480 -> 470;
481 -> 477;
481 -> 470;
482 -> 477;
482 -> 470;
483 -> 477;
483 -> 470;
484 -> 477;
484 -> 470;
485 -> 477;
485 -> 470;
486 -> 477;
486 -> 470;
487 -> 477;
487 -> 470;
488 -> 477;
488 -> 470;
489 -> 477;
489 -> 470;
490 -> 477;
490 -> 470;
491 -> 477;
491 -> 470;
492 -> 477;
492 -> 470;
493 -> 477;
493 -> 470;
494 -> 477;
494 -> 470;
495 -> 477;
495 -> 470;
496 -> 477;
496 -> 470;
497 -> 477;
497 -> 470;
498 -> 477;
498 -> 470;
499 -> 477;
499 -> 470;
500 -> 477;
500 -> 470;
501 -> 477;
501 -> 470;
502 -> 477;
502 -> 470;
503 -> 477;
503 -> 470;
504 -> 470;
505 -> 504;
505 -> 477;
505 -> 470;
506 -> 477;
506 -> 470;
507 -> 477;
507 -> 470;
508 -> 470;
509 -> 470;
510 -> 507;
510 -> 509;
511 -> 508;
511 -> 509;
512 -> 511;
512 -> 509;
513 -> 511;
513 -> 509;
514 -> 511;
514 -> 509;
515 -> 510;
515 -> 511;
515 -> 509;
516 -> 508;
516 -> 477;
516 -> 470;
517 -> 477;
517 -> 470;
518 -> 470;
519 -> 468;
519 -> 518;
520 -> 518;
521 -> 519;
521 -> 518;
522 -> 521;
522 -> 468;
523 -> 521;
524 -> 522;
524 -> 523;
525 -> 458;
525 -> 470;
526 -> 525;
527 -> 471;
527 -> 526;
527 -> 525;
528 -> 472;
528 -> 526;
528 -> 525;
529 -> 527;
529 -> 528;
529 -> 525;
530 -> 473;
530 -> 526;
530 -> 525;
531 -> 529;
531 -> 530;
531 -> 525;
532 -> 459;
532 -> 460;
533 -> 477;
533 -> 460;
534 -> 459;
534 -> 533;
534 -> 468;
534 -> 524;
534 -> 460;
535 -> 459;
535 -> 477;
535 -> 460;
536 -> 477;
536 -> 534;
536 -> 470;
537 -> 470;
538 -> 477;
538 -> 534;
538 -> 537;
538 -> 470;
539 -> 450;
539 -> 370;
540 -> 539;
540 -> 368;
541 -> 540;
541 -> 534;
541 -> 190;
542 -> 540;
542 -> 190;
543 -> 179;
543 -> 542;
543 -> 534;
543 -> 535;
543 -> 461;
543 -> 105;
544 -> 543;
544 -> 105;
545 -> 105;
546 -> 544;
546 -> 545;
547 -> 545;
548 -> 546;
548 -> 547;
549 -> 547;
550 -> 548;
550 -> 543;
550 -> 549;
551 -> 549;
552 -> 550;
552 -> 543;
552 -> 551;
552 -> 549;
553 -> 550;
553 -> 543;
553 -> 552;
554 -> 552;
555 -> 553;
555 -> 554;
556 -> 553;
556 -> 554;
557 -> 553;
557 -> 554;
558 -> 553;
558 -> 554;
559 -> 553;
559 -> 554;
560 -> 554;
561 -> 554;
562 -> 554;
563 -> 554;
564 -> 554;
565 -> 0;
565 -> 554;
566 -> 555;
566 -> 554;
567 -> 560;
567 -> 566;
568 -> 566;
569 -> 556;
569 -> 566;
570 -> 557;
570 -> 566;
571 -> 558;
571 -> 566;
572 -> 559;
572 -> 566;
573 -> 561;
573 -> 566;
574 -> 562;
574 -> 566;
575 -> 563;
575 -> 566;
576 -> 564;
576 -> 566;
577 -> 565;
577 -> 566;
578 -> 566;
579 -> 567;
579 -> 578;
580 -> 568;
580 -> 578;
581 -> 569;
581 -> 578;
582 -> 570;
582 -> 578;
583 -> 571;
583 -> 578;
584 -> 572;
584 -> 578;
585 -> 573;
585 -> 578;
586 -> 574;
586 -> 578;
587 -> 575;
587 -> 578;
588 -> 576;
588 -> 578;
589 -> 577;
589 -> 578;
590 -> 580;
590 -> 543;
590 -> 578;
591 -> 590;
591 -> 0;
591 -> 578;
592 -> 580;
592 -> 578;
593 -> 581;
593 -> 578;
594 -> 584;
594 -> 578;
595 -> 588;
595 -> 578;
596 -> 589;
596 -> 578;
597 -> 578;
598 -> 592;
598 -> 597;
599 -> 593;
599 -> 597;
600 -> 594;
600 -> 597;
601 -> 595;
601 -> 597;
602 -> 596;
602 -> 597;
603 -> 598;
603 -> 599;
603 -> 600;
603 -> 597;
604 -> 598;
604 -> 597;
605 -> 603;
605 -> 597;
606 -> 601;
606 -> 604;
606 -> 605;
606 -> 564;
606 -> 603;
606 -> 597;
607 -> 603;
607 -> 597;
608 -> 602;
608 -> 607;
608 -> 0;
608 -> 606;
608 -> 597;
609 -> 578;
610 -> 580;
610 -> 578;
611 -> 579;
611 -> 610;
611 -> 560;
611 -> 608;
611 -> 578;
612 -> 580;
612 -> 578;
613 -> 585;
613 -> 561;
613 -> 578;
614 -> 585;
614 -> 612;
614 -> 613;
614 -> 561;
614 -> 611;
614 -> 578;
615 -> 560;
615 -> 614;
615 -> 554;
616 -> 561;
616 -> 614;
616 -> 554;
617 -> 562;
617 -> 554;
618 -> 563;
618 -> 554;
619 -> 608;
619 -> 554;
620 -> 554;
621 -> 554;
622 -> 615;
622 -> 621;
623 -> 616;
623 -> 621;
624 -> 617;
624 -> 621;
625 -> 618;
625 -> 621;
626 -> 616;
626 -> 621;
627 -> 619;
627 -> 621;
628 -> 620;
628 -> 621;
629 -> 628;
629 -> 621;
630 -> 628;
630 -> 621;
631 -> 628;
631 -> 621;
632 -> 628;
632 -> 621;
633 -> 628;
633 -> 621;
634 -> 622;
634 -> 621;
635 -> 622;
635 -> 615;
635 -> 621;
636 -> 622;
636 -> 621;
637 -> 626;
637 -> 634;
637 -> 621;
638 -> 0;
638 -> 621;
639 -> 622;
639 -> 628;
639 -> 621;
640 -> 623;
640 -> 628;
640 -> 621;
641 -> 624;
641 -> 628;
641 -> 621;
642 -> 625;
642 -> 628;
642 -> 621;
643 -> 626;
643 -> 628;
643 -> 621;
644 -> 627;
644 -> 628;
644 -> 621;
645 -> 620;
645 -> 552;
646 -> 552;
647 -> 553;
647 -> 645;
647 -> 646;
647 -> 640;
647 -> 641;
647 -> 642;
647 -> 643;
647 -> 644;
647 -> 639;
647 -> 637;
647 -> 615;
647 -> 617;
647 -> 618;
647 -> 552;
648 -> 550;
648 -> 647;
648 -> 549;
649 -> 648;
649 -> 547;
650 -> 649;
650 -> 545;
651 -> 650;
651 -> 647;
651 -> 545;
652 -> 545;
653 -> 650;
653 -> 652;
653 -> 647;
653 -> 545;
654 -> 0;
654 -> 545;
655 -> 653;
655 -> 654;
655 -> 545;
656 -> 112;
656 -> 655;
656 -> 105;
657 -> 543;
657 -> 105;
658 -> 657;
658 -> 22;
659 -> 25;
659 -> 22;
660 -> 26;
660 -> 22;
661 -> 27;
661 -> 22;
662 -> 28;
662 -> 22;
663 -> 29;
663 -> 22;
664 -> 30;
664 -> 22;
665 -> 31;
665 -> 22;
666 -> 32;
666 -> 22;
667 -> 33;
667 -> 22;
668 -> 36;
668 -> 22;
669 -> 38;
669 -> 22;
670 -> 22;
671 -> 658;
671 -> 670;
672 -> 659;
672 -> 670;
673 -> 660;
673 -> 670;
674 -> 661;
674 -> 670;
675 -> 662;
675 -> 670;
676 -> 663;
676 -> 670;
677 -> 664;
677 -> 670;
678 -> 665;
678 -> 670;
679 -> 666;
679 -> 670;
680 -> 667;
680 -> 670;
681 -> 668;
681 -> 670;
682 -> 669;
682 -> 670;
683 -> 39;
683 -> 670;
684 -> 671;
684 -> 670;
685 -> 672;
685 -> 670;
686 -> 673;
686 -> 670;
687 -> 674;
687 -> 670;
688 -> 670;
689 -> 687;
689 -> 688;
690 -> 683;
690 -> 688;
691 -> 688;
692 -> 689;
692 -> 691;
692 -> 688;
693 -> 692;
694 -> 675;
694 -> 670;
695 -> 676;
695 -> 670;
696 -> 670;
697 -> 695;
697 -> 696;
698 -> 683;
698 -> 696;
699 -> 696;
700 -> 697;
700 -> 699;
700 -> 696;
701 -> 700;
702 -> 677;
702 -> 670;
703 -> 678;
703 -> 670;
704 -> 679;
704 -> 670;
705 -> 680;
705 -> 670;
706 -> 681;
706 -> 670;
707 -> 682;
707 -> 670;
708 -> 670;
709 -> 684;
709 -> 708;
710 -> 685;
710 -> 708;
711 -> 686;
711 -> 708;
712 -> 693;
712 -> 708;
713 -> 694;
713 -> 708;
714 -> 701;
714 -> 708;
715 -> 702;
715 -> 708;
716 -> 703;
716 -> 708;
717 -> 704;
717 -> 708;
718 -> 705;
718 -> 708;
719 -> 706;
719 -> 708;
720 -> 707;
720 -> 708;
721 -> 683;
721 -> 708;
722 -> 709;
722 -> 708;
723 -> 708;
724 -> 716;
724 -> 723;
724 -> 708;
725 -> 709;
725 -> 655;
725 -> 708;
726 -> 708;
727 -> 725;
727 -> 726;
728 -> 727;
728 -> 725;
728 -> 726;
729 -> 724;
729 -> 728;
729 -> 708;
730 -> 708;
731 -> 712;
731 -> 730;
731 -> 708;
732 -> 708;
733 -> 709;
733 -> 708;
734 -> 711;
734 -> 708;
735 -> 710;
735 -> 708;
736 -> 715;
736 -> 708;
737 -> 716;
737 -> 708;
738 -> 717;
738 -> 708;
739 -> 708;
740 -> 739;
740 -> 718;
740 -> 708;
741 -> 713;
741 -> 708;
742 -> 714;
742 -> 708;
743 -> 719;
743 -> 708;
744 -> 720;
744 -> 708;
745 -> 708;
746 -> 733;
746 -> 745;
747 -> 734;
747 -> 745;
748 -> 735;
748 -> 745;
749 -> 736;
749 -> 745;
750 -> 737;
750 -> 745;
751 -> 738;
751 -> 745;
752 -> 740;
752 -> 745;
753 -> 741;
753 -> 745;
754 -> 742;
754 -> 745;
755 -> 743;
755 -> 745;
756 -> 744;
756 -> 745;
757 -> 721;
757 -> 745;
758 -> 746;
758 -> 745;
759 -> 757;
759 -> 9;
759 -> 745;
760 -> 747;
760 -> 745;
761 -> 745;
762 -> 745;
763 -> 758;
763 -> 762;
764 -> 759;
764 -> 762;
765 -> 760;
765 -> 762;
766 -> 761;
766 -> 762;
767 -> 766;
767 -> 762;
768 -> 766;
768 -> 762;
769 -> 766;
769 -> 762;
770 -> 766;
770 -> 762;
771 -> 766;
771 -> 762;
772 -> 766;
772 -> 762;
773 -> 763;
773 -> 766;
773 -> 762;
774 -> 765;
774 -> 766;
774 -> 762;
775 -> 764;
775 -> 766;
775 -> 762;
776 -> 750;
776 -> 745;
777 -> 751;
777 -> 745;
778 -> 752;
778 -> 745;
779 -> 748;
779 -> 745;
780 -> 755;
780 -> 745;
781 -> 756;
781 -> 745;
782 -> 749;
782 -> 745;
783 -> 745;
784 -> 776;
784 -> 783;
785 -> 777;
785 -> 783;
786 -> 778;
786 -> 783;
787 -> 779;
787 -> 783;
788 -> 780;
788 -> 783;
789 -> 781;
789 -> 783;
790 -> 782;
790 -> 783;
791 -> 761;
791 -> 783;
792 -> 0;
793 -> 792;
794 -> 793;
795 -> 791;
795 -> 774;
795 -> 783;
796 -> 783;
797 -> 795;
797 -> 796;
798 -> 797;
798 -> 796;
799 -> 794;
799 -> 793;
799 -> 798;
799 -> 796;
800 -> 799;
800 -> 783;
801 -> 787;
801 -> 783;
802 -> 788;
802 -> 783;
803 -> 783;
804 -> 800;
804 -> 803;
805 -> 801;
805 -> 803;
806 -> 802;
806 -> 803;
807 -> 791;
807 -> 803;
809 -> 807;
809 -> 773;
809 -> 803;
810 -> 805;
810 -> 803;
811 -> 806;
811 -> 803;
812 -> 803;
813 -> 809;
813 -> 810;
813 -> 811;
813 -> 812;
813 -> 804;
813 -> 728;
813 -> 799;
813 -> 803;
814 -> 813;
814 -> 812;
815 -> 813;
815 -> 812;
816 -> 813;
816 -> 812;
817 -> 813;
817 -> 812;
818 -> 813;
818 -> 812;
819 -> 813;
819 -> 812;
820 -> 814;
820 -> 812;
821 -> 812;
822 -> 820;
822 -> 821;
823 -> 821;
824 -> 822;
824 -> 821;
825 -> 821;
826 -> 824;
826 -> 825;
827 -> 825;
828 -> 826;
828 -> 813;
828 -> 825;
829 -> 825;
830 -> 828;
830 -> 829;
831 -> 825;
832 -> 830;
832 -> 831;
832 -> 825;
833 -> 826;
833 -> 830;
833 -> 825;
834 -> 825;
835 -> 833;
835 -> 834;
836 -> 834;
837 -> 835;
837 -> 836;
838 -> 837;
838 -> 833;
838 -> 836;
839 -> 837;
839 -> 838;
840 -> 838;
841 -> 839;
841 -> 840;
842 -> 840;
843 -> 841;
843 -> 842;
844 -> 842;
845 -> 843;
845 -> 839;
845 -> 844;
846 -> 845;
846 -> 842;
847 -> 846;
847 -> 840;
848 -> 839;
848 -> 840;
849 -> 840;
850 -> 837;
850 -> 847;
850 -> 838;
851 -> 837;
851 -> 847;
851 -> 836;
852 -> 851;
852 -> 834;
853 -> 827;
853 -> 825;
854 -> 853;
854 -> 821;
855 -> 821;
856 -> 854;
856 -> 855;
856 -> 821;
857 -> 823;
857 -> 821;
858 -> 857;
858 -> 812;
859 -> 0;
859 -> 812;
860 -> 858;
860 -> 812;
861 -> 812;
862 -> 814;
862 -> 861;
862 -> 812;
863 -> 858;
863 -> 812;
864 -> 861;
864 -> 863;
864 -> 862;
864 -> 823;
864 -> 852;
864 -> 812;
865 -> 864;
866 -> 859;
866 -> 864;
867 -> 816;
867 -> 864;
868 -> 817;
868 -> 864;
869 -> 864;
870 -> 865;
870 -> 869;
871 -> 866;
871 -> 869;
872 -> 867;
872 -> 869;
873 -> 868;
873 -> 869;
874 -> 870;
874 -> 852;
874 -> 823;
874 -> 861;
874 -> 862;
874 -> 864;
874 -> 869;
875 -> 874;
876 -> 874;
877 -> 876;
877 -> 852;
877 -> 864;
877 -> 861;
877 -> 862;
877 -> 823;
877 -> 874;
878 -> 876;
878 -> 877;
878 -> 0;
878 -> 874;
879 -> 878;
879 -> 874;
880 -> 877;
880 -> 879;
881 -> 880;
881 -> 879;
882 -> 874;
883 -> 881;
883 -> 882;
883 -> 880;
883 -> 874;
884 -> 871;
884 -> 883;
884 -> 859;
884 -> 0;
884 -> 874;
885 -> 877;
885 -> 874;
886 -> 874;
887 -> 885;
887 -> 886;
888 -> 887;
888 -> 883;
888 -> 0;
888 -> 886;
889 -> 888;
889 -> 886;
890 -> 889;
891 -> 889;
892 -> 878;
892 -> 889;
893 -> 892;
894 -> 881;
894 -> 893;
894 -> 890;
894 -> 892;
895 -> 871;
895 -> 894;
895 -> 884;
895 -> 892;
896 -> 881;
896 -> 892;
897 -> 0;
897 -> 892;
898 -> 890;
898 -> 892;
899 -> 892;
900 -> 896;
900 -> 897;
900 -> 898;
900 -> 899;
900 -> 894;
900 -> 890;
900 -> 892;
901 -> 900;
901 -> 889;
902 -> 872;
902 -> 900;
902 -> 901;
902 -> 889;
903 -> 889;
904 -> 902;
905 -> 871;
905 -> 902;
905 -> 895;
906 -> 902;
907 -> 902;
908 -> 869;
909 -> 814;
909 -> 812;
910 -> 815;
910 -> 812;
911 -> 817;
911 -> 812;
912 -> 818;
912 -> 812;
913 -> 819;
913 -> 812;
914 -> 812;
915 -> 909;
915 -> 914;
916 -> 910;
916 -> 914;
917 -> 911;
917 -> 914;
918 -> 912;
918 -> 914;
919 -> 913;
919 -> 914;
920 -> 914;
921 -> 919;
921 -> 920;
921 -> 914;
922 -> 0;
922 -> 921;
923 -> 914;
924 -> 914;
925 -> 914;
926 -> 922;
926 -> 0;
926 -> 914;
927 -> 926;
927 -> 914;
928 -> 915;
928 -> 902;
928 -> 914;
929 -> 914;
930 -> 928;
930 -> 929;
931 -> 929;
932 -> 930;
932 -> 931;
933 -> 931;
934 -> 933;
935 -> 932;
935 -> 929;
936 -> 914;
937 -> 914;
938 -> 923;
938 -> 914;
939 -> 914;
940 -> 927;
940 -> 914;
941 -> 916;
941 -> 914;
942 -> 922;
942 -> 914;
943 -> 935;
943 -> 914;
944 -> 918;
944 -> 914;
945 -> 938;
945 -> 939;
945 -> 940;
945 -> 941;
945 -> 942;
945 -> 943;
945 -> 944;
945 -> 915;
945 -> 923;
945 -> 935;
945 -> 922;
945 -> 0;
945 -> 914;
946 -> 945;
946 -> 939;
947 -> 946;
947 -> 945;
947 -> 939;
948 -> 945;
948 -> 939;
949 -> 945;
949 -> 939;
950 -> 945;
950 -> 939;
951 -> 945;
951 -> 939;
952 -> 945;
952 -> 939;
953 -> 945;
953 -> 939;
954 -> 945;
954 -> 939;
955 -> 945;
955 -> 939;
956 -> 945;
956 -> 939;
957 -> 956;
957 -> 947;
957 -> 939;
958 -> 948;
958 -> 939;
959 -> 954;
959 -> 939;
960 -> 939;
961 -> 958;
961 -> 960;
962 -> 959;
962 -> 960;
963 -> 956;
963 -> 960;
964 -> 961;
964 -> 960;
965 -> 960;
966 -> 964;
966 -> 965;
967 -> 963;
967 -> 965;
968 -> 965;
969 -> 967;
969 -> 968;
970 -> 968;
971 -> 969;
971 -> 970;
972 -> 970;
973 -> 971;
973 -> 972;
974 -> 973;
974 -> 947;
974 -> 972;
975 -> 973;
975 -> 947;
975 -> 972;
976 -> 975;
976 -> 970;
977 -> 971;
977 -> 947;
977 -> 970;
978 -> 971;
978 -> 977;
978 -> 970;
979 -> 978;
979 -> 968;
980 -> 979;
980 -> 965;
981 -> 980;
981 -> 965;
982 -> 980;
982 -> 977;
982 -> 981;
983 -> 982;
983 -> 960;
984 -> 960;
985 -> 983;
985 -> 984;
985 -> 960;
986 -> 983;
986 -> 985;
987 -> 986;
987 -> 939;
988 -> 939;
989 -> 987;
989 -> 988;
989 -> 939;
990 -> 948;
990 -> 939;
991 -> 987;
991 -> 939;
992 -> 939;
993 -> 990;
993 -> 991;
993 -> 992;
993 -> 956;
993 -> 977;
993 -> 939;
994 -> 993;
994 -> 992;
995 -> 992;
996 -> 994;
996 -> 995;
997 -> 995;
998 -> 996;
998 -> 997;
999 -> 998;
999 -> 995;
1000 -> 996;
1000 -> 992;
1001 -> 992;
1002 -> 1000;
1002 -> 1001;
1003 -> 1000;
1003 -> 1001;
1004 -> 1001;
1005 -> 1003;
1005 -> 1004;
1006 -> 1004;
1007 -> 1006;
1008 -> 1005;
1008 -> 1001;
1009 -> 1003;
1009 -> 1001;
1010 -> 1001;
1011 -> 1010;
1012 -> 1011;
1013 -> 993;
1013 -> 992;
1014 -> 992;
1015 -> 1013;
1015 -> 1014;
1016 -> 1014;
1017 -> 1015;
1017 -> 1016;
1018 -> 1017;
1018 -> 1008;
1018 -> 1016;
1019 -> 1017;
1019 -> 1008;
1019 -> 1016;
1020 -> 1019;
1020 -> 1014;
1021 -> 1015;
1021 -> 1008;
1021 -> 1014;
1022 -> 1021;
1022 -> 992;
1023 -> 992;
1024 -> 1022;
1024 -> 1023;
1025 -> 993;
1025 -> 992;
1026 -> 992;
1027 -> 993;
1027 -> 1026;
1027 -> 1024;
1027 -> 939;
1028 -> 939;
1029 -> 952;
1029 -> 1028;
1029 -> 939;
1030 -> 1029;
1031 -> 939;
1032 -> 956;
1032 -> 1027;
1032 -> 939;
1033 -> 956;
1033 -> 1027;
1033 -> 1032;
1034 -> 1033;
1034 -> 1032;
1035 -> 956;
1035 -> 1027;
1035 -> 1034;
1036 -> 1032;
1037 -> 1036;
1038 -> 1037;
1038 -> 1036;
1039 -> 1036;
1039 -> 1027;
1039 -> 1035;
1040 -> 1039;
1040 -> 1032;
1041 -> 948;
1041 -> 1032;
1042 -> 1035;
1042 -> 1032;
1043 -> 1027;
1043 -> 1032;
1044 -> 1030;
1044 -> 1032;
1045 -> 1032;
1046 -> 1032;
1047 -> 1040;
1047 -> 1046;
1048 -> 1041;
1048 -> 1046;
1049 -> 1042;
1049 -> 1046;
1050 -> 1043;
1050 -> 1046;
1051 -> 1044;
1051 -> 1046;
1052 -> 1045;
1052 -> 1046;
1053 -> 1047;
1053 -> 1046;
1054 -> 1048;
1054 -> 1046;
1055 -> 1049;
1055 -> 1046;
1056 -> 1050;
1056 -> 1046;
1057 -> 1051;
1057 -> 1046;
1058 -> 0;
1058 -> 1046;
1059 -> 1046;
1060 -> 1053;
1060 -> 1059;
1061 -> 1054;
1061 -> 1059;
1062 -> 1055;
1062 -> 1059;
1063 -> 1056;
1063 -> 1059;
1064 -> 1057;
1064 -> 1059;
1065 -> 1058;
1065 -> 1059;
1066 -> 1052;
1066 -> 1059;
1067 -> 1059;
1068 -> 1060;
1068 -> 1039;
1068 -> 1067;
1068 -> 1059;
1069 -> 1061;
1069 -> 1059;
1070 -> 1062;
1070 -> 1059;
1071 -> 1063;
1071 -> 1059;
1072 -> 1064;
1072 -> 1059;
1073 -> 1059;
1074 -> 1068;
1074 -> 1073;
1075 -> 1069;
1075 -> 1073;
1076 -> 1070;
1076 -> 1073;
1077 -> 1071;
1077 -> 1073;
1078 -> 1072;
1078 -> 1073;
1079 -> 1066;
1079 -> 1073;
1080 -> 1074;
1080 -> 1068;
1080 -> 1073;
1081 -> 1074;
1081 -> 1073;
1082 -> 1077;
1082 -> 1073;
1083 -> 1078;
1083 -> 1073;
1084 -> 1076;
1084 -> 1073;
1085 -> 1075;
1085 -> 1073;
1086 -> 1073;
1087 -> 1086;
1088 -> 1073;
1089 -> 1088;
1089 -> 1080;
1089 -> 1081;
1089 -> 1082;
1089 -> 1083;
1089 -> 1084;
1089 -> 1085;
1089 -> 1086;
1089 -> 1068;
1089 -> 1030;
1089 -> 1087;
1089 -> 1073;
1090 -> 1089;
1090 -> 1088;
1091 -> 1088;
1092 -> 1089;
1092 -> 1091;
1092 -> 1073;
1093 -> 1073;
1094 -> 1093;
1094 -> 1088;
1094 -> 1073;
1095 -> 0;
1095 -> 1073;
1096 -> 1095;
1096 -> 0;
1096 -> 1073;
1097 -> 1096;
1097 -> 1088;
1097 -> 1073;
1098 -> 1073;
1099 -> 1098;
1099 -> 1088;
1099 -> 1073;
1100 -> 1088;
1100 -> 1073;
1101 -> 1088;
1101 -> 1073;
1102 -> 1088;
1102 -> 1073;
1103 -> 1088;
1103 -> 1073;
1104 -> 1088;
1104 -> 1073;
1105 -> 1074;
1105 -> 1092;
1105 -> 1073;
1106 -> 1105;
1106 -> 0;
1106 -> 1073;
1107 -> 1106;
1107 -> 1073;
1108 -> 1107;
1108 -> 1088;
1108 -> 1073;
1109 -> 1088;
1109 -> 1092;
1109 -> 1094;
1109 -> 1073;
1110 -> 1074;
1110 -> 1073;
1111 -> 1088;
1111 -> 1073;
1112 -> 1109;
1112 -> 1110;
1112 -> 1111;
1112 -> 1092;
1112 -> 1094;
1112 -> 1097;
1112 -> 1099;
1112 -> 1100;
1112 -> 1101;
1112 -> 1108;
1112 -> 1102;
1112 -> 1103;
1112 -> 1104;
1112 -> 1093;
1112 -> 1096;
1112 -> 1098;
1112 -> 1073;
1113 -> 1074;
1113 -> 1112;
1113 -> 1073;
1114 -> 1066;
1114 -> 1059;
1115 -> 1066;
1115 -> 1059;
1116 -> 1066;
1116 -> 1059;
1117 -> 1066;
1117 -> 1059;
1118 -> 1066;
1118 -> 1059;
1119 -> 1066;
1119 -> 1059;
1120 -> 1066;
1120 -> 1059;
1121 -> 1066;
1121 -> 1059;
1122 -> 1066;
1122 -> 1059;
1123 -> 1066;
1123 -> 1059;
1124 -> 1060;
1124 -> 1059;
1125 -> 1060;
1125 -> 1066;
1125 -> 1059;
1126 -> 1065;
1126 -> 1059;
1127 -> 1126;
1127 -> 1066;
1127 -> 1059;
1128 -> 1059;
1129 -> 1061;
1129 -> 1112;
1129 -> 1128;
1129 -> 1059;
1130 -> 1129;
1130 -> 1059;
1131 -> 1060;
1131 -> 1112;
1131 -> 1130;
1132 -> 1060;
1132 -> 1112;
1132 -> 1131;
1132 -> 1066;
1132 -> 1059;
1133 -> 1066;
1133 -> 1112;
1133 -> 1059;
1134 -> 1060;
1134 -> 1059;
1135 -> 1066;
1135 -> 1059;
1136 -> 1133;
1136 -> 1134;
1136 -> 1135;
1136 -> 1112;
1136 -> 1114;
1136 -> 1125;
1136 -> 1115;
1136 -> 1116;
1136 -> 1117;
1136 -> 1118;
1136 -> 1119;
1136 -> 1120;
1136 -> 1121;
1136 -> 1122;
1136 -> 1123;
1136 -> 1132;
1136 -> 1127;
1136 -> 1131;
1136 -> 1126;
1136 -> 1059;
1137 -> 939;
1138 -> 949;
1138 -> 1137;
1138 -> 939;
1139 -> 950;
1139 -> 1045;
1139 -> 939;
1140 -> 939;
1141 -> 951;
1141 -> 1140;
1141 -> 939;
1142 -> 951;
1142 -> 1045;
1142 -> 1141;
1143 -> 939;
1144 -> 953;
1144 -> 1143;
1144 -> 939;
1145 -> 953;
1145 -> 1136;
1145 -> 1144;
1146 -> 1045;
1146 -> 1145;
1146 -> 1136;
1146 -> 1139;
1146 -> 1142;
1146 -> 1144;
1147 -> 1045;
1147 -> 953;
1147 -> 1144;
1148 -> 1045;
1148 -> 939;
1149 -> 945;
1149 -> 1148;
1149 -> 1146;
1149 -> 1147;
1149 -> 914;
1150 -> 945;
1150 -> 939;
1151 -> 945;
1151 -> 939;
1152 -> 945;
1152 -> 939;
1153 -> 945;
1153 -> 939;
1154 -> 945;
1154 -> 939;
1155 -> 945;
1155 -> 939;
1156 -> 945;
1156 -> 939;
1157 -> 945;
1157 -> 939;
1158 -> 939;
1159 -> 1152;
1159 -> 939;
1160 -> 1154;
1160 -> 939;
1161 -> 0;
1161 -> 939;
1162 -> 939;
1163 -> 1156;
1163 -> 939;
1164 -> 939;
1165 -> 1161;
1165 -> 1164;
1166 -> 1162;
1166 -> 1164;
1167 -> 1163;
1167 -> 1164;
1168 -> 1157;
1168 -> 1164;
1169 -> 1164;
1170 -> 1165;
1170 -> 1164;
1171 -> 1166;
1171 -> 1164;
1172 -> 1169;
1172 -> 1164;
1173 -> 1167;
1173 -> 1164;
1174 -> 1164;
1175 -> 1170;
1175 -> 1174;
1176 -> 1171;
1176 -> 1174;
1177 -> 1172;
1177 -> 1174;
1178 -> 1173;
1178 -> 1174;
1179 -> 1168;
1179 -> 1174;
1180 -> 1174;
1181 -> 1175;
1181 -> 0;
1181 -> 1174;
1182 -> 1181;
1182 -> 1176;
1182 -> 1174;
1183 -> 1182;
1184 -> 1179;
1184 -> 1183;
1185 -> 1183;
1186 -> 1184;
1186 -> 1149;
1186 -> 1185;
1187 -> 1185;
1188 -> 1186;
1188 -> 1182;
1189 -> 1182;
1190 -> 1179;
1190 -> 1189;
1191 -> 1190;
1191 -> 1149;
1191 -> 1189;
1192 -> 1191;
1192 -> 1182;
1193 -> 1192;
1194 -> 1188;
1194 -> 1149;
1194 -> 1192;
1195 -> 1178;
1195 -> 1192;
1196 -> 1193;
1196 -> 1194;
1196 -> 1195;
1196 -> 1149;
1196 -> 1192;
1197 -> 1196;
1197 -> 1193;
1198 -> 1196;
1198 -> 1193;
1199 -> 1196;
1199 -> 1193;
1200 -> 1196;
1200 -> 1193;
1201 -> 1193;
1202 -> 1201;
1202 -> 1193;
1203 -> 1193;
1204 -> 1198;
1204 -> 1203;
1205 -> 1204;
1205 -> 1193;
1206 -> 1199;
1206 -> 1193;
1207 -> 1201;
1207 -> 1193;
1208 -> 1205;
1208 -> 1196;
1208 -> 1206;
1208 -> 1207;
1208 -> 1202;
1208 -> 1193;
1209 -> 1182;
1210 -> 1188;
1210 -> 1182;
1211 -> 1178;
1211 -> 1149;
1211 -> 1208;
1211 -> 1210;
1212 -> 1210;
1212 -> 1149;
1212 -> 1211;
1213 -> 1175;
1213 -> 0;
1213 -> 1174;
1214 -> 1180;
1214 -> 1213;
1215 -> 1214;
1215 -> 1179;
1215 -> 1180;
1215 -> 1211;
1215 -> 1213;
1216 -> 1213;
1217 -> 1213;
1218 -> 1179;
1218 -> 1217;
1219 -> 1218;
1219 -> 1215;
1219 -> 1217;
1220 -> 1219;
1220 -> 1213;
1221 -> 1213;
1222 -> 1179;
1222 -> 1221;
1223 -> 1222;
1223 -> 1220;
1223 -> 1221;
1224 -> 1223;
1224 -> 1213;
1225 -> 1178;
1225 -> 1220;
1225 -> 1213;
1226 -> 1213;
1227 -> 1179;
1227 -> 1226;
1228 -> 1227;
1228 -> 1225;
1228 -> 1226;
1229 -> 1227;
1229 -> 1225;
1229 -> 1226;
1230 -> 1229;
1230 -> 1213;
1231 -> 1178;
1231 -> 1230;
1231 -> 1213;
1232 -> 1178;
1232 -> 1213;
1233 -> 1213;
1234 -> 1213;
1235 -> 1233;
1235 -> 1234;
1236 -> 1233;
1236 -> 1234;
1237 -> 1233;
1237 -> 1234;
1238 -> 1232;
1238 -> 1234;
1239 -> 1179;
1239 -> 1234;
1240 -> 1234;
1241 -> 1239;
1241 -> 1240;
1242 -> 1241;
1242 -> 1231;
1242 -> 1240;
1243 -> 1240;
1244 -> 1242;
1244 -> 1243;
1245 -> 1244;
1245 -> 1243;
1246 -> 1245;
1246 -> 1242;
1246 -> 1243;
1247 -> 1243;
1248 -> 1246;
1248 -> 1247;
1249 -> 1248;
1249 -> 1246;
1249 -> 1247;
1250 -> 1249;
1250 -> 1247;
1251 -> 1250;
1251 -> 1234;
1252 -> 1238;
1252 -> 1234;
1253 -> 1251;
1253 -> 1252;
1253 -> 1250;
1253 -> 1231;
1253 -> 1234;
1254 -> 1234;
1255 -> 1234;
1256 -> 1235;
1256 -> 1255;
1256 -> 1234;
1257 -> 1234;
1258 -> 1239;
1258 -> 1257;
1259 -> 1257;
1260 -> 1258;
1260 -> 1259;
1261 -> 1259;
1262 -> 1260;
1262 -> 1261;
1263 -> 1262;
1263 -> 1253;
1263 -> 1261;
1264 -> 1262;
1264 -> 1253;
1264 -> 1261;
1265 -> 1264;
1265 -> 1259;
1266 -> 1260;
1266 -> 1253;
1266 -> 1259;
1267 -> 1266;
1267 -> 1234;
1268 -> 1254;
1268 -> 1234;
1269 -> 1238;
1269 -> 1234;
1270 -> 1268;
1270 -> 1269;
1270 -> 1267;
1270 -> 1231;
1270 -> 1266;
1270 -> 1234;
1271 -> 1234;
1272 -> 1271;
1273 -> 1272;
1274 -> 1270;
1274 -> 1273;
1275 -> 1274;
1275 -> 1272;
1276 -> 1271;
1277 -> 1276;
1278 -> 1277;
1279 -> 1271;
1280 -> 1279;
1281 -> 1280;
1282 -> 1270;
1282 -> 1271;
1283 -> 1282;
1283 -> 1270;
1283 -> 1271;
1284 -> 1271;
1285 -> 1282;
1285 -> 1270;
1285 -> 1284;
1285 -> 1271;
1286 -> 1285;
1287 -> 1282;
1287 -> 1270;
1287 -> 1285;
1288 -> 1286;
1288 -> 1285;
1289 -> 1285;
1290 -> 1282;
1290 -> 1288;
1290 -> 1271;
1291 -> 1270;
1291 -> 1271;
1292 -> 1270;
1292 -> 1271;
1293 -> 1292;
1293 -> 1290;
1293 -> 1271;
1294 -> 1270;
1294 -> 1271;
1295 -> 1270;
1295 -> 1271;
1296 -> 1271;
1297 -> 1295;
1297 -> 1296;
1298 -> 1297;
1298 -> 1290;
1298 -> 1296;
1299 -> 1297;
1299 -> 1290;
1299 -> 1296;
1300 -> 1299;
1300 -> 1271;
1301 -> 1271;
1302 -> 1301;
1302 -> 1300;
1302 -> 1290;
1302 -> 1271;
1303 -> 1301;
1303 -> 1302;
1304 -> 1300;
1304 -> 1303;
1304 -> 1301;
1305 -> 1294;
1305 -> 1304;
1305 -> 1303;
1306 -> 1270;
1306 -> 1271;
1307 -> 1306;
1307 -> 1305;
1307 -> 1271;
1308 -> 1274;
1308 -> 1307;
1308 -> 1273;
1309 -> 1274;
1309 -> 1307;
1309 -> 1273;
1310 -> 1309;
1310 -> 1272;
1311 -> 1270;
1311 -> 1271;
1312 -> 1270;
1312 -> 1271;
1313 -> 1311;
1313 -> 1307;
1313 -> 1271;
1314 -> 1271;
1315 -> 1271;
1316 -> 1313;
1316 -> 1315;
1317 -> 1314;
1317 -> 1315;
1318 -> 1312;
1318 -> 1315;
1319 -> 1317;
1319 -> 1315;
1320 -> 1316;
1320 -> 1315;
1321 -> 1315;
1322 -> 1318;
1322 -> 1307;
1322 -> 1315;
1323 -> 1315;
1324 -> 1320;
1324 -> 1323;
1325 -> 1321;
1325 -> 1323;
1326 -> 1322;
1326 -> 1323;
1327 -> 1318;
1327 -> 1323;
1328 -> 1326;
1328 -> 1323;
1329 -> 1325;
1329 -> 1323;
1330 -> 1327;
1330 -> 1307;
1330 -> 1329;
1331 -> 1327;
1331 -> 1307;
1331 -> 1330;
1331 -> 1323;
1332 -> 1328;
1332 -> 1331;
1332 -> 1307;
1332 -> 1330;
1332 -> 1323;
1333 -> 1324;
1333 -> 1323;
1334 -> 1323;
1335 -> 1333;
1335 -> 1334;
1336 -> 1327;
1336 -> 1334;
1337 -> 1335;
1337 -> 1334;
1338 -> 1334;
1339 -> 1337;
1339 -> 1338;
1340 -> 1336;
1340 -> 1338;
1341 -> 1338;
1342 -> 1339;
1342 -> 1341;
1342 -> 1338;
1343 -> 1338;
1344 -> 1340;
1344 -> 1332;
1344 -> 1343;
1345 -> 1343;
1346 -> 1344;
1346 -> 1338;
1347 -> 1339;
1347 -> 1338;
1348 -> 1346;
1348 -> 1332;
1348 -> 1347;
1348 -> 1338;
1349 -> 1334;
1350 -> 1336;
1350 -> 1348;
1350 -> 1349;
1351 -> 1349;
1352 -> 1350;
1352 -> 1334;
1353 -> 1332;
1353 -> 1323;
1354 -> 1323;
1355 -> 1353;
1355 -> 1354;
1355 -> 1323;
1356 -> 1355;
1357 -> 1356;
1357 -> 1352;
1358 -> 1357;
1358 -> 1355;
1359 -> 1332;
1359 -> 1355;
1360 -> 1358;
1360 -> 1355;
1361 -> 1355;
1362 -> 1323;
1363 -> 1360;
1363 -> 1352;
1363 -> 1323;
1364 -> 1323;
1365 -> 1363;
1365 -> 1364;
1365 -> 1323;
1366 -> 1324;
1366 -> 1323;
1367 -> 1325;
1367 -> 1323;
1368 -> 1360;
1368 -> 1352;
1368 -> 1323;
1369 -> 1323;
1370 -> 1366;
1370 -> 1369;
1371 -> 1367;
1371 -> 1369;
1372 -> 1368;
1372 -> 1369;
1373 -> 1327;
1373 -> 1369;
1374 -> 1373;
1374 -> 1369;
1375 -> 1370;
1375 -> 1369;
1376 -> 1371;
1376 -> 1369;
1377 -> 1374;
1377 -> 1375;
1377 -> 1376;
1377 -> 1360;
1377 -> 1369;
1378 -> 1369;
1379 -> 1377;
1379 -> 1369;
1380 -> 1369;
1381 -> 1380;
1382 -> 1372;
1382 -> 1380;
1383 -> 1380;
1384 -> 1382;
1384 -> 1383;
1384 -> 1380;
1385 -> 1372;
1385 -> 1380;
1386 -> 1379;
1386 -> 1380;
1387 -> 1382;
1387 -> 1380;
1388 -> 1385;
1388 -> 1386;
1388 -> 1387;
1388 -> 1379;
1388 -> 1380;
1389 -> 1377;
1389 -> 1388;
1390 -> 1389;
1390 -> 1314;
1391 -> 1390;
1391 -> 1389;
1391 -> 1314;
1392 -> 1391;
1393 -> 1392;
1393 -> 1391;
1394 -> 1391;
1395 -> 1393;
1395 -> 1394;
1396 -> 1390;
1396 -> 1394;
1397 -> 1394;
1398 -> 1396;
1398 -> 1397;
1399 -> 1397;
1400 -> 1398;
1400 -> 1399;
1401 -> 1400;
1401 -> 1397;
1402 -> 1398;
1402 -> 1394;
1403 -> 1395;
1403 -> 1402;
1403 -> 1392;
1403 -> 1398;
1403 -> 1394;
1404 -> 1394;
1405 -> 1396;
1405 -> 1404;
1406 -> 1405;
1406 -> 1403;
1406 -> 1404;
1407 -> 1405;
1407 -> 1403;
1407 -> 1404;
1408 -> 1407;
1408 -> 1394;
1409 -> 1394;
1410 -> 1409;
1410 -> 1408;
1410 -> 1403;
1410 -> 1394;
1411 -> 1409;
1411 -> 1410;
1412 -> 1408;
1412 -> 1411;
1412 -> 1409;
1413 -> 1391;
1414 -> 1390;
1414 -> 1391;
1415 -> 1414;
1415 -> 1412;
1415 -> 1391;
1416 -> 1391;
1417 -> 1392;
1417 -> 1415;
1417 -> 1391;
1418 -> 1390;
1418 -> 1417;
1418 -> 1391;
1419 -> 1415;
1419 -> 1391;
1420 -> 1391;
1421 -> 1390;
1421 -> 1418;
1421 -> 1314;
1422 -> 1389;
1422 -> 1314;
1423 -> 1314;
1424 -> 1422;
1424 -> 1423;
1425 -> 1423;
1426 -> 1425;
1427 -> 1424;
1427 -> 1426;
1428 -> 1427;
1428 -> 1421;
1428 -> 1426;
1429 -> 1427;
1429 -> 1421;
1429 -> 1426;
1430 -> 1429;
1430 -> 1425;
1431 -> 1424;
1431 -> 1421;
1431 -> 1425;
1432 -> 1431;
1432 -> 1314;
1433 -> 1314;
1434 -> 1432;
1434 -> 1314;
1435 -> 1432;
1435 -> 1314;
1436 -> 1434;
1436 -> 1314;
1437 -> 1314;
1438 -> 1436;
1438 -> 1437;
1439 -> 1435;
1439 -> 1437;
1440 -> 1439;
1440 -> 1432;
1440 -> 1437;
1441 -> 1438;
1441 -> 1440;
1441 -> 1437;
1442 -> 1437;
1443 -> 1437;
1444 -> 1441;
1444 -> 1443;
1445 -> 1441;
1445 -> 1443;
1446 -> 1441;
1446 -> 1443;
1447 -> 1442;
1447 -> 1443;
1448 -> 1444;
1448 -> 1447;
1448 -> 1443;
1449 -> 1445;
1449 -> 1447;
1449 -> 1443;
1450 -> 1446;
1450 -> 1447;
1450 -> 1443;
1451 -> 1442;
1451 -> 1440;
1451 -> 1448;
1451 -> 1449;
1451 -> 1450;
1451 -> 1441;
1451 -> 1437;
1452 -> 1451;
1452 -> 1442;
1453 -> 1452;
1453 -> 1451;
1453 -> 1442;
1454 -> 1314;
1455 -> 1432;
1455 -> 1426;
1456 -> 1455;
1456 -> 1453;
1456 -> 1426;
1457 -> 1455;
1457 -> 1453;
1457 -> 1426;
1458 -> 1457;
1458 -> 1425;
1459 -> 1314;
1460 -> 1459;
1461 -> 1432;
1461 -> 1460;
1462 -> 1461;
1462 -> 1453;
1462 -> 1460;
1463 -> 1461;
1463 -> 1453;
1463 -> 1460;
1464 -> 1463;
1464 -> 1459;
1465 -> 1282;
1465 -> 1453;
1465 -> 1271;
1466 -> 1271;
1467 -> 1270;
1467 -> 1466;
1468 -> 1467;
1468 -> 1453;
1468 -> 1466;
1469 -> 1467;
1469 -> 1453;
1469 -> 1466;
1470 -> 1469;
1470 -> 1271;
1471 -> 1270;
1471 -> 1271;
1472 -> 1270;
1472 -> 1271;
1473 -> 1471;
1473 -> 0;
1473 -> 1271;
1474 -> 1271;
1475 -> 1471;
1475 -> 1271;
1476 -> 1472;
1476 -> 1475;
1476 -> 1453;
1476 -> 1271;
1477 -> 1476;
1478 -> 1477;
1479 -> 1478;
1479 -> 1477;
1480 -> 1477;
1480 -> 1476;
1481 -> 1471;
1481 -> 1476;
1482 -> 1480;
1482 -> 1471;
1482 -> 1271;
1483 -> 1480;
1483 -> 1271;
1484 -> 1270;
1484 -> 1271;
1485 -> 1270;
1485 -> 1271;
1486 -> 1484;
1486 -> 1483;
1486 -> 1271;
1487 -> 1271;
1488 -> 1271;
1489 -> 1486;
1489 -> 1488;
1490 -> 1487;
1490 -> 1488;
1491 -> 1485;
1491 -> 1488;
1492 -> 1490;
1492 -> 1488;
1493 -> 1488;
1494 -> 1491;
1494 -> 1483;
1494 -> 1488;
1495 -> 1488;
1496 -> 1493;
1496 -> 1495;
1497 -> 1491;
1497 -> 1495;
1498 -> 1496;
1498 -> 1495;
1499 -> 1497;
1499 -> 1483;
1499 -> 1498;
1500 -> 1495;
1501 -> 1497;
1501 -> 1500;
1502 -> 1500;
1503 -> 1501;
1503 -> 1502;
1504 -> 1502;
1505 -> 1502;
1506 -> 1505;
1507 -> 1494;
1507 -> 1489;
1507 -> 1502;
1508 -> 1500;
1509 -> 1508;
1510 -> 1495;
1511 -> 1495;
1512 -> 1494;
1512 -> 1507;
1512 -> 1495;
1513 -> 1495;
1514 -> 1512;
1514 -> 1513;
1514 -> 1495;
1515 -> 1511;
1515 -> 1495;
1516 -> 1512;
1516 -> 1515;
1516 -> 1507;
1516 -> 1495;
1517 -> 1516;
1518 -> 1484;
1518 -> 1271;
1519 -> 1270;
1519 -> 1271;
1520 -> 1270;
1520 -> 1271;
1521 -> 1519;
1521 -> 1517;
1521 -> 1271;
1522 -> 1271;
1523 -> 1521;
1523 -> 1522;
1524 -> 1521;
1524 -> 1522;
1525 -> 1520;
1525 -> 1522;
1526 -> 1522;
1527 -> 1525;
1527 -> 1526;
1528 -> 1526;
1529 -> 1527;
1529 -> 1528;
1529 -> 1517;
1529 -> 1526;
1530 -> 1529;
1530 -> 1526;
1531 -> 1530;
1531 -> 1522;
1532 -> 1524;
1532 -> 1522;
1533 -> 1523;
1533 -> 1532;
1533 -> 1529;
1533 -> 1517;
1533 -> 1522;
1534 -> 1522;
1535 -> 1525;
1535 -> 1534;
1536 -> 1535;
1536 -> 1533;
1536 -> 1534;
1537 -> 1522;
1538 -> 1536;
1538 -> 1531;
1538 -> 1522;
1539 -> 1270;
1539 -> 1271;
1540 -> 1270;
1540 -> 1271;
1541 -> 1270;
1541 -> 1271;
1542 -> 1540;
1542 -> 1271;
1543 -> 1539;
1543 -> 1271;
1544 -> 1271;
1545 -> 1271;
1546 -> 1543;
1546 -> 1545;
1547 -> 1544;
1547 -> 1545;
1548 -> 1541;
1548 -> 1545;
1549 -> 1547;
1549 -> 1545;
1550 -> 1546;
1550 -> 1545;
1551 -> 1545;
1552 -> 1550;
1552 -> 1551;
1553 -> 1548;
1553 -> 1551;
1554 -> 1552;
1554 -> 1551;
1555 -> 1551;
1556 -> 1554;
1556 -> 1555;
1557 -> 1553;
1557 -> 1555;
1558 -> 1555;
1559 -> 1556;
1559 -> 1558;
1559 -> 1555;
1560 -> 1555;
1561 -> 1560;
1562 -> 1556;
1562 -> 1555;
1563 -> 1551;
1564 -> 1563;
1565 -> 1545;
1566 -> 1545;
1567 -> 1545;
1568 -> 1566;
1568 -> 1545;
1569 -> 1270;
1569 -> 1271;
1570 -> 1270;
1570 -> 1271;
1571 -> 1271;
1572 -> 1569;
1572 -> 1571;
1573 -> 1571;
1574 -> 1572;
1574 -> 1538;
1574 -> 1573;
1575 -> 1573;
1576 -> 1574;
1576 -> 1271;
1577 -> 1570;
1577 -> 1271;
1578 -> 1576;
1578 -> 1577;
1578 -> 1271;
1579 -> 1271;
1580 -> 1578;
1581 -> 1580;
1581 -> 1578;
1582 -> 1578;
1582 -> 1471;
1582 -> 1271;
1583 -> 1274;
1583 -> 1578;
1583 -> 1273;
1584 -> 1274;
1584 -> 1578;
1584 -> 1273;
1585 -> 1584;
1585 -> 1272;
1586 -> 1270;
1586 -> 1271;
1587 -> 1271;
1588 -> 1586;
1588 -> 1587;
1589 -> 1587;
1590 -> 1589;
1591 -> 1588;
1591 -> 1590;
1592 -> 1591;
1592 -> 1578;
1592 -> 1590;
1593 -> 1591;
1593 -> 1578;
1593 -> 1590;
1594 -> 1593;
1594 -> 1589;
1595 -> 1271;
1596 -> 1270;
1596 -> 1271;
1597 -> 1270;
1597 -> 1271;
1598 -> 1596;
1598 -> 1271;
1599 -> 1598;
1599 -> 1578;
1599 -> 1271;
1600 -> 1596;
1600 -> 1599;
1600 -> 1271;
1601 -> 1271;
1602 -> 1597;
1602 -> 1601;
1603 -> 1601;
1604 -> 1602;
1604 -> 1603;
1605 -> 1603;
1606 -> 1605;
1607 -> 1604;
1607 -> 1606;
1608 -> 1607;
1608 -> 1599;
1608 -> 1606;
1609 -> 1607;
1609 -> 1599;
1609 -> 1606;
1610 -> 1609;
1610 -> 1605;
1611 -> 1604;
1611 -> 1599;
1611 -> 1605;
1612 -> 1601;
1613 -> 1611;
1613 -> 1271;
1614 -> 1271;
1615 -> 1597;
1615 -> 1614;
1616 -> 1615;
1616 -> 1611;
1616 -> 1614;
1617 -> 1616;
1618 -> 1617;
1618 -> 1616;
1619 -> 1616;
1620 -> 1618;
1620 -> 1619;
1620 -> 1616;
1621 -> 1620;
1621 -> 1616;
1622 -> 1621;
1622 -> 1615;
1622 -> 1616;
1623 -> 1615;
1623 -> 1620;
1623 -> 1622;
1623 -> 1614;
1624 -> 1623;
1624 -> 1271;
1625 -> 1624;
1626 -> 1596;
1626 -> 1625;
1626 -> 1271;
1627 -> 1607;
1627 -> 1625;
1627 -> 1606;
1628 -> 1607;
1628 -> 1625;
1628 -> 1606;
1629 -> 1628;
1629 -> 1605;
1630 -> 1625;
1630 -> 1271;
1631 -> 1625;
1632 -> 1631;
1632 -> 1625;
1633 -> 1625;
1633 -> 1471;
1633 -> 1271;
1634 -> 1282;
1634 -> 1625;
1634 -> 1271;
1635 -> 1292;
1635 -> 1625;
1635 -> 1271;
1636 -> 1235;
1636 -> 1234;
1637 -> 1636;
1638 -> 1637;
1638 -> 1239;
1638 -> 1636;
1639 -> 1636;
1640 -> 1639;
1640 -> 1239;
1640 -> 1636;
1641 -> 1239;
1641 -> 1625;
1641 -> 1638;
1641 -> 1640;
1641 -> 1234;
1642 -> 1234;
1643 -> 1237;
1643 -> 1642;
1643 -> 1234;
1644 -> 1235;
1644 -> 1234;
1645 -> 1236;
1645 -> 1234;
1646 -> 1238;
1646 -> 1234;
1647 -> 1234;
1648 -> 1644;
1648 -> 1647;
1649 -> 1645;
1649 -> 1647;
1650 -> 1646;
1650 -> 1647;
1651 -> 1239;
1651 -> 1647;
1652 -> 1647;
1653 -> 1648;
1653 -> 1652;
1653 -> 1647;
1654 -> 1651;
1654 -> 1641;
1654 -> 1647;
1655 -> 1654;
1656 -> 1651;
1656 -> 1654;
1657 -> 1655;
1657 -> 1654;
1658 -> 1650;
1658 -> 1654;
1659 -> 1654;
1660 -> 1654;
1661 -> 1656;
1661 -> 1660;
1662 -> 1657;
1662 -> 1660;
1663 -> 1658;
1663 -> 1660;
1664 -> 1659;
1664 -> 1660;
1665 -> 1659;
1665 -> 1660;
1666 -> 1660;
1667 -> 1661;
1667 -> 1660;
1668 -> 1664;
1668 -> 1660;
1669 -> 1665;
1669 -> 1660;
1670 -> 1666;
1670 -> 1660;
1671 -> 1663;
1671 -> 1660;
1672 -> 1660;
1673 -> 1660;
1674 -> 1667;
1674 -> 1673;
1675 -> 1668;
1675 -> 1673;
1676 -> 1669;
1676 -> 1673;
1677 -> 1670;
1677 -> 1673;
1678 -> 1671;
1678 -> 1673;
1679 -> 1672;
1679 -> 1673;
1680 -> 1673;
1681 -> 1680;
1681 -> 1673;
1682 -> 1680;
1682 -> 1673;
1683 -> 1680;
1683 -> 1673;
1684 -> 1680;
1684 -> 1673;
1685 -> 1680;
1685 -> 1673;
1686 -> 1680;
1686 -> 1673;
1687 -> 1674;
1687 -> 1680;
1687 -> 1673;
1688 -> 1675;
1688 -> 1680;
1688 -> 1673;
1689 -> 1676;
1689 -> 1680;
1689 -> 1673;
1690 -> 1677;
1690 -> 1680;
1690 -> 1673;
1691 -> 1678;
1691 -> 1680;
1691 -> 1673;
1692 -> 0;
1692 -> 1673;
1693 -> 1692;
1693 -> 1680;
1693 -> 1673;
1694 -> 1673;
1695 -> 1680;
1695 -> 1694;
1696 -> 1694;
1697 -> 1695;
1697 -> 1680;
1697 -> 1682;
1697 -> 1688;
1697 -> 1696;
1697 -> 1694;
1698 -> 1694;
1699 -> 1695;
1699 -> 1680;
1699 -> 1681;
1699 -> 1687;
1699 -> 1698;
1700 -> 1699;
1700 -> 1680;
1700 -> 1692;
1700 -> 1698;
1701 -> 1697;
1701 -> 1700;
1701 -> 1680;
1701 -> 1692;
1701 -> 1694;
1702 -> 1701;
1702 -> 1673;
1703 -> 1702;
1704 -> 1703;
1704 -> 1680;
1704 -> 1702;
1705 -> 1660;
1706 -> 1661;
1706 -> 1705;
1707 -> 1705;
1708 -> 1706;
1708 -> 1707;
1709 -> 1708;
1709 -> 1692;
1709 -> 1707;
1710 -> 1708;
1710 -> 1692;
1710 -> 1707;
1711 -> 1710;
1711 -> 1705;
1712 -> 1706;
1712 -> 1692;
1712 -> 1705;
1713 -> 1712;
1713 -> 1660;
1714 -> 1713;
1714 -> 1672;
1714 -> 1712;
1714 -> 1680;
1714 -> 1681;
1714 -> 1687;
1714 -> 1682;
1714 -> 1688;
1714 -> 1683;
1714 -> 1689;
1714 -> 1684;
1714 -> 1690;
1714 -> 1685;
1714 -> 1693;
1714 -> 1686;
1714 -> 1704;
1714 -> 1691;
1714 -> 1659;
1714 -> 1666;
1714 -> 1231;
1714 -> 1703;
1714 -> 1660;
1715 -> 1660;
1716 -> 1714;
1716 -> 1715;
1717 -> 1714;
1717 -> 1715;
1718 -> 1717;
1718 -> 1714;
1718 -> 1715;
1719 -> 1716;
1719 -> 1715;
1720 -> 1716;
1720 -> 1715;
1721 -> 1715;
1722 -> 1720;
1722 -> 1721;
1723 -> 1717;
1723 -> 1721;
1724 -> 1722;
1724 -> 1718;
1724 -> 0;
1724 -> 1721;
1725 -> 1721;
1726 -> 1722;
1726 -> 1718;
1726 -> 0;
1726 -> 1721;
1727 -> 1722;
1727 -> 1718;
1727 -> 0;
1727 -> 1726;
1728 -> 1722;
1728 -> 1718;
1728 -> 0;
1728 -> 1721;
1729 -> 1722;
1729 -> 1718;
1729 -> 0;
1729 -> 1721;
1730 -> 1722;
1730 -> 1718;
1730 -> 0;
1730 -> 1721;
1731 -> 1722;
1731 -> 1718;
1731 -> 0;
1731 -> 1721;
1732 -> 1722;
1732 -> 1718;
1732 -> 0;
1732 -> 1721;
1733 -> 1721;
1734 -> 1722;
1734 -> 1721;
1735 -> 1733;
1735 -> 1721;
1736 -> 1723;
1736 -> 1718;
1736 -> 1734;
1736 -> 1735;
1736 -> 1721;
1737 -> 1721;
1738 -> 1722;
1738 -> 1721;
1739 -> 1737;
1739 -> 1721;
1740 -> 1721;
1741 -> 1738;
1741 -> 1740;
1742 -> 1739;
1742 -> 1740;
1743 -> 1723;
1743 -> 1740;
1744 -> 1740;
1745 -> 1741;
1745 -> 1736;
1745 -> 1740;
1746 -> 1740;
1747 -> 1746;
1747 -> 1721;
1748 -> 1747;
1748 -> 1721;
1749 -> 1722;
1749 -> 1745;
1749 -> 0;
1749 -> 1748;
1750 -> 0;
1750 -> 1749;
1751 -> 1722;
1751 -> 1745;
1751 -> 0;
1751 -> 1721;
1752 -> 1751;
1752 -> 1721;
1753 -> 1750;
1753 -> 1752;
1754 -> 1753;
1754 -> 0;
1754 -> 1715;
1755 -> 1753;
1755 -> 1715;
1756 -> 1715;
1757 -> 1755;
1757 -> 1756;
1758 -> 1757;
1758 -> 1756;
1759 -> 1758;
1760 -> 1715;
1761 -> 1760;
1761 -> 1716;
1761 -> 1753;
1761 -> 1715;
1762 -> 1716;
1762 -> 1753;
1762 -> 1760;
1762 -> 1761;
1763 -> 1761;
1764 -> 1762;
1764 -> 1761;
1765 -> 1763;
1765 -> 1761;
1766 -> 1761;
1767 -> 1764;
1767 -> 1766;
1768 -> 1765;
1768 -> 1766;
1769 -> 1717;
1769 -> 1766;
1770 -> 1766;
1771 -> 1766;
1771 -> 1761;
1772 -> 1761;
1773 -> 1772;
1773 -> 1761;
1774 -> 1770;
1774 -> 1773;
1775 -> 1761;
1776 -> 1774;
1776 -> 1775;
1776 -> 1761;
1777 -> 1776;
1777 -> 1771;
1777 -> 1761;
1778 -> 1771;
1778 -> 1761;
1779 -> 1759;
1779 -> 1778;
1780 -> 1759;
1780 -> 1715;
1781 -> 1715;
1782 -> 1716;
1782 -> 1767;
1782 -> 1781;
1782 -> 1715;
1783 -> 1782;
1783 -> 1715;
1784 -> 1715;
1785 -> 1783;
1785 -> 1784;
1786 -> 1717;
1786 -> 1784;
1787 -> 1785;
1787 -> 1782;
1787 -> 0;
1787 -> 1784;
1788 -> 1784;
1789 -> 1785;
1789 -> 1782;
1789 -> 0;
1789 -> 1784;
1790 -> 1785;
1790 -> 1782;
1790 -> 0;
1790 -> 1789;
1791 -> 1785;
1791 -> 1782;
1791 -> 0;
1791 -> 1784;
1792 -> 1785;
1792 -> 1782;
1792 -> 0;
1792 -> 1784;
1793 -> 1785;
1793 -> 1782;
1793 -> 0;
1793 -> 1784;
1794 -> 1785;
1794 -> 1782;
1794 -> 0;
1794 -> 1784;
1795 -> 1785;
1795 -> 1782;
1795 -> 0;
1795 -> 1784;
1796 -> 1784;
1797 -> 1796;
1797 -> 1784;
1798 -> 1784;
1799 -> 1798;
1799 -> 1784;
1800 -> 1784;
1801 -> 1799;
1801 -> 1800;
1802 -> 1786;
1802 -> 1800;
1803 -> 1800;
1804 -> 1800;
1805 -> 1804;
1805 -> 1784;
1806 -> 1805;
1806 -> 1784;
1807 -> 1785;
1808 -> 1785;
1809 -> 1807;
1809 -> 1808;
1810 -> 1786;
1810 -> 1808;
1811 -> 1809;
1811 -> 1785;
1811 -> 0;
1811 -> 1808;
1812 -> 1809;
1812 -> 1785;
1812 -> 1808;
1813 -> 1808;
1814 -> 1812;
1814 -> 1813;
1814 -> 1808;
1815 -> 1812;
1815 -> 1808;
1816 -> 1808;
1817 -> 1815;
1817 -> 1816;
1818 -> 1810;
1818 -> 1816;
1819 -> 1817;
1819 -> 1785;
1819 -> 0;
1819 -> 1816;
1820 -> 1816;
1821 -> 1817;
1821 -> 1785;
1821 -> 0;
1821 -> 1816;
1822 -> 1817;
1822 -> 1785;
1822 -> 0;
1822 -> 1821;
1823 -> 1817;
1823 -> 1785;
1823 -> 0;
1823 -> 1816;
1824 -> 1817;
1824 -> 1785;
1824 -> 0;
1824 -> 1816;
1825 -> 1817;
1825 -> 1785;
1825 -> 0;
1825 -> 1816;
1826 -> 1817;
1826 -> 1785;
1826 -> 0;
1826 -> 1816;
1827 -> 1817;
1827 -> 1785;
1827 -> 0;
1827 -> 1816;
1828 -> 1818;
1828 -> 1785;
1828 -> 1817;
1828 -> 1816;
1829 -> 1828;
1830 -> 1785;
1831 -> 1829;
1831 -> 1830;
1832 -> 1831;
1832 -> 1830;
1833 -> 1832;
1834 -> 1715;
1835 -> 1833;
1835 -> 1834;
1836 -> 1716;
1836 -> 1828;
1836 -> 1715;
1837 -> 1715;
1838 -> 1836;
1838 -> 1837;
1839 -> 1836;
1839 -> 1837;
1840 -> 1839;
1840 -> 1836;
1840 -> 1837;
1841 -> 1838;
1841 -> 1837;
1842 -> 1837;
1843 -> 1841;
1843 -> 1842;
1844 -> 1839;
1844 -> 1842;
1845 -> 1843;
1845 -> 1840;
1845 -> 0;
1845 -> 1842;
1846 -> 1845;
1847 -> 1838;
1847 -> 1837;
1848 -> 1837;
1849 -> 1847;
1849 -> 1848;
1850 -> 1839;
1850 -> 1848;
1851 -> 1849;
1851 -> 1840;
1851 -> 0;
1851 -> 1848;
1852 -> 1848;
1853 -> 1849;
1853 -> 1840;
1853 -> 0;
1853 -> 1848;
1854 -> 1849;
1854 -> 1840;
1854 -> 1853;
1855 -> 1853;
1856 -> 1854;
1856 -> 1855;
1857 -> 1856;
1857 -> 1840;
1857 -> 0;
1857 -> 1855;
1858 -> 1855;
1859 -> 1856;
1859 -> 1840;
1859 -> 0;
1860 -> 1856;
1860 -> 1840;
1860 -> 0;
1860 -> 1855;
1861 -> 1856;
1861 -> 1840;
1861 -> 0;
1861 -> 1855;
1862 -> 1856;
1862 -> 1840;
1862 -> 0;
1862 -> 1855;
1863 -> 1856;
1863 -> 1840;
1863 -> 0;
1863 -> 1855;
1864 -> 1856;
1864 -> 1840;
1864 -> 0;
1864 -> 1855;
1865 -> 1856;
1866 -> 1837;
1867 -> 1865;
1867 -> 1866;
1868 -> 1867;
1868 -> 1866;
1869 -> 1868;
1870 -> 1837;
1871 -> 1839;
1871 -> 1870;
1872 -> 1870;
1873 -> 1871;
1873 -> 1856;
1873 -> 1872;
1873 -> 1870;
1874 -> 1870;
1875 -> 1871;
1875 -> 1856;
1875 -> 1874;
1876 -> 1873;
1876 -> 1837;
1877 -> 1838;
1877 -> 1876;
1878 -> 1876;
1879 -> 1877;
1879 -> 1878;
1880 -> 1839;
1880 -> 1878;
1881 -> 1879;
1881 -> 1856;
1881 -> 1878;
1882 -> 1881;
1883 -> 1880;
1883 -> 1881;
1884 -> 1876;
1885 -> 1660;
1886 -> 1672;
1886 -> 1885;
1887 -> 1886;
1887 -> 1883;
1887 -> 1885;
1888 -> 1885;
1889 -> 1887;
1889 -> 1888;
1889 -> 1885;
1890 -> 1885;
1891 -> 1887;
1891 -> 1890;
1891 -> 1883;
1891 -> 1885;
1892 -> 1891;
1893 -> 1660;
1894 -> 1666;
1894 -> 1660;
1895 -> 1894;
1895 -> 1892;
1895 -> 1660;
1896 -> 1651;
1896 -> 1892;
1896 -> 1654;
1897 -> 1655;
1897 -> 1654;
1898 -> 1896;
1898 -> 1897;
1898 -> 1892;
1898 -> 1654;
1899 -> 1651;
1899 -> 1898;
1899 -> 1647;
1900 -> 1651;
1900 -> 1898;
1900 -> 1647;
1901 -> 1641;
1901 -> 1234;
1902 -> 1901;
1902 -> 1898;
1902 -> 1234;
1903 -> 1900;
1903 -> 1234;
1904 -> 1213;
1905 -> 1179;
1905 -> 1903;
1905 -> 1904;
1905 -> 1213;
1906 -> 1178;
1906 -> 1903;
1906 -> 1174;
1907 -> 1175;
1907 -> 0;
1907 -> 1174;
1908 -> 1177;
1908 -> 1174;
1909 -> 1180;
1909 -> 1174;
1910 -> 1178;
1910 -> 1174;
1911 -> 1908;
1911 -> 1909;
1911 -> 1910;
1911 -> 1179;
1911 -> 1169;
1911 -> 1906;
1911 -> 1174;
1912 -> 1174;
1913 -> 1164;
1914 -> 1169;
1914 -> 1911;
1914 -> 1164;
1915 -> 1158;
1915 -> 939;
1916 -> 1160;
1916 -> 1914;
1916 -> 1915;
1916 -> 1163;
1916 -> 1157;
1916 -> 1149;
1916 -> 939;
1917 -> 1158;
1917 -> 939;
1918 -> 1150;
1918 -> 939;
1919 -> 1152;
1919 -> 939;
1920 -> 1151;
1920 -> 1919;
1921 -> 1918;
1921 -> 1916;
1921 -> 1919;
1922 -> 1154;
1922 -> 1919;
1923 -> 1919;
1924 -> 1921;
1924 -> 1923;
1925 -> 1921;
1925 -> 1923;
1926 -> 1921;
1926 -> 1923;
1927 -> 1921;
1927 -> 1923;
1928 -> 1923;
1929 -> 1925;
1929 -> 1921;
1929 -> 1928;
1929 -> 1923;
1930 -> 0;
1930 -> 1923;
1931 -> 1929;
1931 -> 1923;
1932 -> 1920;
1932 -> 1929;
1932 -> 1919;
1933 -> 1919;
1934 -> 1157;
1934 -> 1919;
1935 -> 1918;
1935 -> 1919;
1936 -> 1151;
1936 -> 1919;
1937 -> 1153;
1937 -> 1919;
1938 -> 1916;
1938 -> 1919;
1939 -> 1933;
1939 -> 1919;
1940 -> 1155;
1940 -> 1919;
1941 -> 1156;
1941 -> 1919;
1942 -> 1919;
1943 -> 1934;
1943 -> 1942;
1944 -> 1935;
1944 -> 1942;
1945 -> 1936;
1945 -> 1942;
1946 -> 1937;
1946 -> 1942;
1947 -> 1938;
1947 -> 1942;
1948 -> 1939;
1948 -> 1942;
1949 -> 1940;
1949 -> 1942;
1950 -> 1941;
1950 -> 1942;
1951 -> 1942;
1952 -> 1943;
1952 -> 1951;
1952 -> 1942;
1953 -> 1942;
1954 -> 1948;
1954 -> 1953;
1954 -> 1942;
1955 -> 1942;
1956 -> 1943;
1956 -> 1955;
1957 -> 1956;
1957 -> 1929;
1957 -> 1955;
1958 -> 1957;
1958 -> 1942;
1959 -> 1942;
1960 -> 1942;
1961 -> 1949;
1961 -> 1942;
1962 -> 1943;
1962 -> 1961;
1963 -> 1944;
1963 -> 1961;
1964 -> 1947;
1964 -> 1961;
1965 -> 1948;
1965 -> 1961;
1966 -> 1950;
1966 -> 1961;
1967 -> 1961;
1968 -> 1962;
1968 -> 1967;
1969 -> 1963;
1969 -> 1967;
1970 -> 1964;
1970 -> 1967;
1971 -> 1965;
1971 -> 1967;
1972 -> 1966;
1972 -> 1967;
1973 -> 1972;
1973 -> 1967;
1974 -> 1967;
1975 -> 1973;
1975 -> 1974;
1976 -> 1968;
1976 -> 1974;
1977 -> 1974;
1978 -> 1976;
1978 -> 1929;
1978 -> 1977;
1978 -> 1974;
1979 -> 1978;
1980 -> 1976;
1980 -> 1978;
1981 -> 1978;
1982 -> 1981;
1983 -> 1982;
1983 -> 1981;
1984 -> 1978;
1985 -> 1984;
1985 -> 1980;
1986 -> 1985;
1986 -> 1978;
1987 -> 1986;
1988 -> 1986;
1989 -> 1988;
1989 -> 1986;
1990 -> 1986;
1991 -> 1987;
1991 -> 1986;
1992 -> 1991;
1993 -> 1992;
1993 -> 1991;
1994 -> 1980;
1994 -> 1991;
1995 -> 1975;
1995 -> 1991;
1996 -> 1992;
1996 -> 1991;
1997 -> 1991;
1998 -> 1994;
1998 -> 1997;
1999 -> 1995;
1999 -> 1997;
2000 -> 1996;
2000 -> 1997;
2001 -> 1976;
2001 -> 1997;
2002 -> 1997;
2003 -> 1997;
2004 -> 1997;
2005 -> 1997;
2006 -> 2001;
2006 -> 2005;
2007 -> 2006;
2007 -> 1997;
2008 -> 1997;
2009 -> 2001;
2009 -> 2008;
2010 -> 2008;
2011 -> 2009;
2011 -> 2010;
2012 -> 2011;
2012 -> 2008;
2013 -> 2009;
2013 -> 1997;
2014 -> 1997;
2015 -> 2001;
2015 -> 2014;
2016 -> 2015;
2016 -> 2009;
2016 -> 2014;
2017 -> 2014;
2018 -> 2016;
2018 -> 2017;
2019 -> 2018;
2019 -> 2016;
2019 -> 2017;
2020 -> 2017;
2021 -> 2019;
2021 -> 2020;
2022 -> 2020;
2023 -> 2021;
2023 -> 2022;
2024 -> 2022;
2025 -> 2023;
2025 -> 2024;
2026 -> 2025;
2026 -> 2022;
2027 -> 2023;
2027 -> 2020;
2028 -> 2027;
2028 -> 1997;
2029 -> 1997;
2030 -> 2007;
2030 -> 2029;
2030 -> 1997;
2031 -> 2030;
2032 -> 2003;
2032 -> 2030;
2033 -> 0;
2033 -> 2030;
2034 -> 1999;
2034 -> 2030;
2035 -> 2030;
2036 -> 2033;
2036 -> 2035;
2037 -> 2033;
2037 -> 2035;
2038 -> 2034;
2038 -> 2035;
2039 -> 2001;
2039 -> 2035;
2040 -> 2035;
2041 -> 2036;
2041 -> 2040;
2041 -> 2035;
2042 -> 2037;
2042 -> 0;
2042 -> 2035;
2043 -> 2039;
2043 -> 2035;
2044 -> 2037;
2044 -> 2035;
2045 -> 2036;
2045 -> 2035;
2046 -> 2038;
2046 -> 2035;
2047 -> 2035;
2048 -> 2035;
2049 -> 2043;
2049 -> 2048;
2050 -> 2044;
2050 -> 2048;
2051 -> 2045;
2051 -> 2048;
2052 -> 2046;
2052 -> 2048;
2053 -> 2047;
2053 -> 2048;
2054 -> 2049;
2054 -> 2048;
2055 -> 2050;
2055 -> 2048;
2056 -> 2052;
2056 -> 2048;
2057 -> 2048;
2058 -> 2054;
2058 -> 2057;
2059 -> 2055;
2059 -> 2057;
2060 -> 2056;
2060 -> 2057;
2061 -> 2053;
2061 -> 2057;
2062 -> 2061;
2062 -> 2057;
2063 -> 2061;
2063 -> 2057;
2064 -> 2061;
2064 -> 2057;
2065 -> 2061;
2065 -> 2057;
2066 -> 2061;
2066 -> 2057;
2067 -> 2057;
2068 -> 2067;
2068 -> 2061;
2068 -> 2057;
2069 -> 2058;
2069 -> 2061;
2069 -> 2057;
2070 -> 2059;
2070 -> 0;
2070 -> 2057;
2071 -> 2070;
2071 -> 2061;
2071 -> 2057;
2072 -> 2059;
2072 -> 0;
2072 -> 2057;
2073 -> 2072;
2073 -> 2061;
2073 -> 2057;
2074 -> 2059;
2074 -> 0;
2074 -> 2057;
2075 -> 2074;
2075 -> 2061;
2075 -> 2057;
2076 -> 2060;
2076 -> 2061;
2076 -> 2057;
2077 -> 2053;
2077 -> 2048;
2078 -> 2051;
2078 -> 2053;
2078 -> 2048;
2079 -> 2035;
2080 -> 2047;
2080 -> 2079;
2081 -> 2079;
2082 -> 2079;
2083 -> 2082;
2083 -> 2079;
2084 -> 2079;
2085 -> 2080;
2085 -> 2069;
2085 -> 2084;
2086 -> 2085;
2086 -> 2027;
2086 -> 2084;
2087 -> 2086;
2087 -> 2079;
2088 -> 2081;
2088 -> 2079;
2089 -> 2079;
2090 -> 2083;
2090 -> 2089;
2091 -> 2087;
2091 -> 2089;
2092 -> 2088;
2092 -> 2089;
2093 -> 2080;
2093 -> 2089;
2094 -> 2091;
2094 -> 2086;
2094 -> 0;
2094 -> 2089;
2095 -> 2093;
2095 -> 2071;
2095 -> 2094;
2096 -> 2091;
2096 -> 2089;
2097 -> 2090;
2097 -> 2096;
2097 -> 2082;
2097 -> 2086;
2097 -> 2089;
2098 -> 2091;
2098 -> 2097;
2098 -> 2089;
2099 -> 2098;
2100 -> 2093;
2100 -> 2075;
2100 -> 2099;
2101 -> 2090;
2101 -> 2100;
2102 -> 2099;
2102 -> 2100;
2103 -> 2092;
2103 -> 2100;
2104 -> 2100;
2105 -> 2101;
2105 -> 2104;
2106 -> 2102;
2106 -> 2104;
2107 -> 2103;
2107 -> 2104;
2108 -> 2106;
2108 -> 2097;
2108 -> 0;
2108 -> 2104;
2109 -> 2104;
2109 -> 2073;
2109 -> 2108;
2110 -> 2104;
2110 -> 2075;
2110 -> 2108;
2111 -> 2106;
2111 -> 2110;
2112 -> 2111;
2112 -> 2110;
2113 -> 2110;
2114 -> 2112;
2114 -> 2113;
2115 -> 2104;
2115 -> 2113;
2116 -> 2114;
2116 -> 2097;
2116 -> 2113;
2117 -> 2115;
2117 -> 2078;
2117 -> 2116;
2118 -> 2117;
2119 -> 2105;
2119 -> 2118;
2120 -> 2111;
2120 -> 2118;
2121 -> 2107;
2121 -> 2118;
2122 -> 2118;
2123 -> 2119;
2123 -> 2122;
2124 -> 2120;
2124 -> 2122;
2125 -> 2121;
2125 -> 2122;
2126 -> 2104;
2126 -> 2122;
2127 -> 2126;
2127 -> 2076;
2127 -> 1149;
2127 -> 2117;
2127 -> 2122;
2128 -> 2124;
2128 -> 2122;
2129 -> 2123;
2129 -> 2128;
2129 -> 2127;
2129 -> 2122;
2130 -> 2123;
2130 -> 2122;
2131 -> 2122;
2132 -> 2130;
2132 -> 2131;
2133 -> 2126;
2133 -> 2131;
2134 -> 2131;
2135 -> 2132;
2135 -> 2129;
2135 -> 2134;
2135 -> 2131;
2136 -> 2131;
2137 -> 2132;
2137 -> 2129;
2137 -> 2136;
2137 -> 2131;
2138 -> 2131;
2139 -> 2137;
2139 -> 2138;
2140 -> 2133;
2140 -> 2138;
2141 -> 2139;
2141 -> 2138;
2142 -> 2138;
2143 -> 2142;
2143 -> 2138;
2144 -> 2140;
2144 -> 2068;
2144 -> 2141;
2144 -> 2143;
2144 -> 2067;
2144 -> 2137;
2144 -> 2138;
2145 -> 2144;
2146 -> 2145;
2146 -> 2138;
2147 -> 2131;
2148 -> 2146;
2148 -> 2147;
2148 -> 2131;
2149 -> 2131;
2150 -> 2133;
2150 -> 2069;
2150 -> 2149;
2151 -> 2150;
2151 -> 2144;
2151 -> 2149;
2152 -> 2150;
2152 -> 2144;
2152 -> 2149;
2153 -> 2152;
2153 -> 2131;
2154 -> 2131;
2155 -> 2154;
2155 -> 2132;
2155 -> 2144;
2155 -> 2131;
2156 -> 2153;
2156 -> 2155;
2157 -> 2132;
2157 -> 2154;
2157 -> 2144;
2157 -> 2155;
2158 -> 2155;
2159 -> 2156;
2159 -> 2158;
2160 -> 2157;
2160 -> 2158;
2161 -> 2133;
2161 -> 2158;
2162 -> 2158;
2163 -> 2159;
2163 -> 2162;
2163 -> 2158;
2164 -> 2160;
2164 -> 2157;
2164 -> 0;
2164 -> 2158;
2165 -> 2160;
2165 -> 2157;
2165 -> 2164;
2166 -> 2159;
2166 -> 2165;
2166 -> 2157;
2166 -> 2164;
2167 -> 2164;
2168 -> 2166;
2168 -> 2167;
2169 -> 2161;
2169 -> 2167;
2170 -> 2168;
2170 -> 2167;
2171 -> 2170;
2172 -> 2170;
2173 -> 2171;
2173 -> 2172;
2173 -> 2170;
2174 -> 2170;
2175 -> 2170;
2176 -> 2174;
2176 -> 2175;
2176 -> 2170;
2177 -> 2170;
2178 -> 2177;
2178 -> 2170;
2179 -> 2177;
2179 -> 2166;
2179 -> 2169;
2179 -> 2178;
2180 -> 2164;
2181 -> 2160;
2181 -> 2158;
2182 -> 2158;
2183 -> 2181;
2183 -> 2182;
2184 -> 2161;
2184 -> 2182;
2185 -> 2184;
2185 -> 2179;
2185 -> 2183;
2185 -> 2182;
2185 -> 2166;
2186 -> 2185;
2187 -> 2186;
2187 -> 2182;
2188 -> 2187;
2188 -> 2131;
2189 -> 2122;
2190 -> 2188;
2190 -> 2189;
2190 -> 2122;
2192 -> 2191;
2193 -> 2191;
2194 -> 2188;
2194 -> 2185;
2194 -> 2190;
2195 -> 2190;
2196 -> 2194;
2196 -> 2195;
2197 -> 2194;
2197 -> 2195;
2198 -> 2194;
2198 -> 2195;
2199 -> 2195;
2200 -> 2196;
2200 -> 2197;
2200 -> 2195;
2201 -> 2196;
2201 -> 2194;
2201 -> 2195;
2202 -> 2195;
2203 -> 2197;
2203 -> 2201;
2203 -> 2195;
2204 -> 2195;
2205 -> 2196;
2205 -> 2203;
2205 -> 2197;
2205 -> 2195;
2206 -> 2201;
2206 -> 2195;
2207 -> 2203;
2207 -> 2195;
2208 -> 2195;
2209 -> 2207;
2209 -> 2208;
2209 -> 2195;
2210 -> 2207;
2210 -> 2209;
2211 -> 2196;
2211 -> 2210;
2211 -> 2197;
2211 -> 2195;
2212 -> 2210;
2213 -> 2210;
2214 -> 2212;
2214 -> 2213;
2215 -> 2126;
2215 -> 2213;
2216 -> 2215;
2216 -> 2078;
2216 -> 2214;
2216 -> 2213;
2217 -> 2212;
2218 -> 2212;
2218 -> 2217;
2219 -> 2126;
2219 -> 2217;
2220 -> 2219;
2220 -> 2078;
2220 -> 2218;
2220 -> 2217;
2221 -> 2212;
2221 -> 2220;
2222 -> 2125;
2222 -> 2221;
2222 -> 2081;
2222 -> 2212;
2222 -> 2220;
2223 -> 2122;
2224 -> 2123;
2224 -> 2222;
2224 -> 2223;
2224 -> 2122;
2225 -> 2118;
2226 -> 2104;
2227 -> 2105;
2227 -> 2224;
2227 -> 2226;
2227 -> 2104;
2228 -> 2100;
2229 -> 2089;
2230 -> 2079;
2231 -> 2082;
2231 -> 2227;
2231 -> 2079;
2232 -> 2080;
2232 -> 2179;
2232 -> 2231;
2232 -> 2079;
2233 -> 2081;
2233 -> 2079;
2234 -> 2233;
2234 -> 2035;
2235 -> 2234;
2235 -> 2030;
2236 -> 2030;
2237 -> 2032;
2237 -> 2236;
2238 -> 2235;
2238 -> 2236;
2239 -> 2238;
2239 -> 2236;
2240 -> 2239;
2240 -> 2232;
2240 -> 2236;
2241 -> 2240;
2242 -> 2241;
2243 -> 2237;
2243 -> 2242;
2243 -> 2003;
2243 -> 2232;
2243 -> 2241;
2244 -> 2030;
2245 -> 2028;
2245 -> 1998;
2245 -> 2030;
2246 -> 1997;
2247 -> 1997;
2248 -> 1997;
2249 -> 2003;
2249 -> 1997;
2250 -> 2249;
2250 -> 2243;
2250 -> 1997;
2251 -> 2250;
2252 -> 2250;
2253 -> 2251;
2253 -> 2250;
2254 -> 2250;
2255 -> 2252;
2255 -> 2254;
2256 -> 2253;
2256 -> 2254;
2257 -> 2001;
2257 -> 2254;
2258 -> 2255;
2258 -> 2243;
2258 -> 2254;
2259 -> 2255;
2259 -> 2243;
2259 -> 2254;
2260 -> 2254;
2261 -> 2259;
2261 -> 2243;
2261 -> 0;
2261 -> 2254;
2262 -> 2259;
2262 -> 2254;
2263 -> 2255;
2263 -> 2262;
2263 -> 0;
2263 -> 2254;
2264 -> 2254;
2265 -> 2255;
2265 -> 2262;
2265 -> 2264;
2265 -> 2254;
2266 -> 2265;
2267 -> 2266;
2267 -> 2265;
2268 -> 2260;
2268 -> 2266;
2268 -> 2265;
2269 -> 2267;
2269 -> 2250;
2270 -> 2250;
2270 -> 2269;
2271 -> 2267;
2271 -> 2269;
2272 -> 2251;
2272 -> 2269;
2273 -> 2269;
2274 -> 2270;
2274 -> 2273;
2275 -> 2271;
2275 -> 2273;
2276 -> 2272;
2276 -> 2273;
2277 -> 2001;
2277 -> 2273;
2278 -> 2275;
2278 -> 2273;
2279 -> 2274;
2279 -> 2262;
2279 -> 2273;
2280 -> 2273;
2281 -> 2280;
2281 -> 2269;
2282 -> 2250;
2282 -> 2262;
2282 -> 2281;
2283 -> 2251;
2283 -> 2282;
2284 -> 2002;
2284 -> 2283;
2284 -> 2251;
2284 -> 2282;
2285 -> 2250;
2285 -> 2282;
2286 -> 2248;
2286 -> 2285;
2286 -> 2262;
2286 -> 2282;
2287 -> 2251;
2287 -> 2284;
2287 -> 2269;
2288 -> 1997;
2289 -> 2248;
2289 -> 2286;
2289 -> 2288;
2289 -> 1997;
2290 -> 0;
2290 -> 2289;
2291 -> 2289;
2292 -> 2246;
2292 -> 2291;
2292 -> 2289;
2293 -> 1997;
2294 -> 2248;
2294 -> 2286;
2294 -> 2293;
2294 -> 1997;
2295 -> 2031;
2295 -> 2294;
2296 -> 2247;
2296 -> 2295;
2297 -> 1997;
2298 -> 1997;
2299 -> 2248;
2299 -> 2286;
2299 -> 2298;
2299 -> 1997;
2300 -> 2248;
2300 -> 2299;
2301 -> 2300;
2302 -> 2299;
2303 -> 2248;
2303 -> 2301;
2303 -> 2302;
2303 -> 2299;
2304 -> 2303;
2305 -> 2246;
2305 -> 1997;
2306 -> 2248;
2306 -> 2304;
2306 -> 1997;
2307 -> 2247;
2307 -> 2296;
2307 -> 1997;
2308 -> 2304;
2308 -> 1997;
2309 -> 2003;
2309 -> 2306;
2309 -> 1997;
2310 -> 2002;
2310 -> 2287;
2310 -> 1997;
2312 -> 0;
2314 -> 2311;
2314 -> 2313;
2315 -> 2312;
2315 -> 2313;
2316 -> 2313;
2317 -> 2316;
2317 -> 2313;
2318 -> 2314;
2318 -> 2316;
2318 -> 2313;
2319 -> 2315;
2319 -> 2316;
2319 -> 2313;
2320 -> 2313;
2321 -> 2308;
2321 -> 1991;
2322 -> 2310;
2322 -> 1991;
2323 -> 1991;
2324 -> 1991;
2325 -> 2321;
2325 -> 2324;
2326 -> 2322;
2326 -> 2324;
2327 -> 2323;
2327 -> 2324;
2328 -> 2327;
2328 -> 2324;
2329 -> 2325;
2329 -> 2327;
2329 -> 2324;
2330 -> 2326;
2330 -> 2327;
2330 -> 2324;
2331 -> 1986;
2332 -> 2331;
2332 -> 2309;
2333 -> 2332;
2333 -> 1986;
2334 -> 1986;
2335 -> 1976;
2335 -> 2309;
2335 -> 1978;
2336 -> 2323;
2336 -> 1978;
2337 -> 1978;
2338 -> 2335;
2338 -> 2336;
2338 -> 2337;
2338 -> 2329;
2338 -> 2330;
2338 -> 2309;
2338 -> 2310;
2338 -> 1978;
2339 -> 1976;
2339 -> 2338;
2339 -> 1974;
2340 -> 2339;
2340 -> 2338;
2340 -> 1967;
2341 -> 2339;
2341 -> 2338;
2341 -> 1967;
2342 -> 1971;
2342 -> 2341;
2342 -> 1933;
2342 -> 2338;
2342 -> 1967;
2343 -> 2339;
2343 -> 2342;
2343 -> 1967;
2344 -> 1967;
2345 -> 2343;
2345 -> 2344;
2345 -> 1967;
2346 -> 2343;
2346 -> 1967;
2347 -> 1967;
2348 -> 2346;
2348 -> 2347;
2348 -> 1967;
2349 -> 2343;
2349 -> 2342;
2349 -> 2348;
2350 -> 2349;
2350 -> 2348;
2351 -> 1968;
2351 -> 2348;
2352 -> 2348;
2353 -> 2352;
2354 -> 2350;
2354 -> 2353;
2355 -> 2354;
2355 -> 2352;
2356 -> 1967;
2357 -> 2346;
2357 -> 2356;
2357 -> 1967;
2358 -> 2343;
2358 -> 1967;
2359 -> 1943;
2359 -> 1942;
2360 -> 1944;
2360 -> 1942;
2361 -> 1945;
2361 -> 1942;
2362 -> 1946;
2362 -> 1942;
2363 -> 1947;
2363 -> 1942;
2364 -> 1948;
2364 -> 1942;
2365 -> 1949;
2365 -> 1942;
2366 -> 2358;
2366 -> 1942;
2367 -> 1950;
2367 -> 1942;
2368 -> 1942;
2369 -> 1942;
2370 -> 2359;
2370 -> 2369;
2371 -> 2360;
2371 -> 2369;
2372 -> 2361;
2372 -> 2369;
2373 -> 2362;
2373 -> 2369;
2374 -> 2363;
2374 -> 2369;
2375 -> 2364;
2375 -> 2369;
2376 -> 2365;
2376 -> 2369;
2377 -> 2366;
2377 -> 2369;
2378 -> 2367;
2378 -> 2369;
2379 -> 2368;
2379 -> 2369;
2380 -> 2369;
2381 -> 2380;
2381 -> 2369;
2382 -> 2380;
2382 -> 2369;
2383 -> 2380;
2383 -> 2369;
2384 -> 2380;
2384 -> 2369;
2385 -> 2380;
2385 -> 2369;
2386 -> 2380;
2386 -> 2369;
2387 -> 2380;
2387 -> 2369;
2388 -> 2380;
2388 -> 2369;
2389 -> 2380;
2389 -> 2369;
2390 -> 2380;
2390 -> 2369;
2391 -> 2380;
2391 -> 2369;
2392 -> 2369;
2393 -> 2370;
2393 -> 2392;
2393 -> 2369;
2394 -> 2369;
2395 -> 2375;
2395 -> 2394;
2395 -> 2369;
2396 -> 2370;
2396 -> 2380;
2396 -> 2369;
2397 -> 2371;
2397 -> 2380;
2397 -> 2369;
2398 -> 2372;
2398 -> 2380;
2398 -> 2369;
2399 -> 2378;
2399 -> 2380;
2399 -> 2369;
2400 -> 2375;
2400 -> 2380;
2400 -> 2369;
2401 -> 2376;
2401 -> 2380;
2401 -> 2369;
2402 -> 2377;
2402 -> 2380;
2402 -> 2369;
2403 -> 2374;
2403 -> 2380;
2403 -> 2369;
2404 -> 2374;
2404 -> 2369;
2405 -> 2369;
2406 -> 2404;
2406 -> 2405;
2407 -> 2380;
2407 -> 2405;
2408 -> 2406;
2408 -> 2405;
2409 -> 2369;
2410 -> 2372;
2410 -> 2369;
2411 -> 2371;
2411 -> 2350;
2411 -> 2410;
2412 -> 2411;
2412 -> 2380;
2412 -> 2410;
2413 -> 2373;
2413 -> 2380;
2413 -> 2369;
2414 -> 1942;
2415 -> 1943;
2415 -> 2414;
2416 -> 2415;
2416 -> 2350;
2416 -> 2414;
2417 -> 2416;
2417 -> 1942;
2418 -> 2417;
2419 -> 2418;
2419 -> 2368;
2419 -> 2417;
2420 -> 1942;
2421 -> 1943;
2421 -> 2420;
2422 -> 2420;
2423 -> 2421;
2423 -> 2422;
2424 -> 2422;
2425 -> 2423;
2425 -> 2424;
2426 -> 2424;
2427 -> 2425;
2427 -> 2426;
2428 -> 2427;
2428 -> 2350;
2428 -> 2426;
2429 -> 2427;
2429 -> 2350;
2429 -> 2426;
2430 -> 2429;
2430 -> 2424;
2431 -> 2425;
2431 -> 2350;
2431 -> 2424;
2432 -> 2420;
2433 -> 2431;
2433 -> 1942;
2434 -> 1942;
2435 -> 2433;
2435 -> 2434;
2436 -> 2368;
2436 -> 2434;
2437 -> 2435;
2437 -> 2431;
2437 -> 2434;
2438 -> 2436;
2438 -> 2437;
2439 -> 2437;
2440 -> 2438;
2440 -> 2439;
2440 -> 2437;
2440 -> 2380;
2440 -> 2381;
2440 -> 2396;
2440 -> 2382;
2440 -> 2398;
2440 -> 2383;
2440 -> 2413;
2440 -> 2384;
2440 -> 2400;
2440 -> 2385;
2440 -> 2403;
2440 -> 2386;
2440 -> 2397;
2440 -> 2387;
2440 -> 2401;
2440 -> 2388;
2440 -> 2412;
2440 -> 2389;
2440 -> 2402;
2440 -> 2390;
2440 -> 2419;
2440 -> 2391;
2440 -> 2399;
2440 -> 1149;
2440 -> 2411;
2440 -> 2418;
2441 -> 2440;
2441 -> 2439;
2442 -> 2440;
2442 -> 2439;
2443 -> 2440;
2443 -> 2439;
2444 -> 2443;
2444 -> 2440;
2444 -> 2439;
2445 -> 2441;
2445 -> 2439;
2446 -> 2439;
2447 -> 2444;
2447 -> 2446;
2448 -> 2445;
2448 -> 2446;
2449 -> 2446;
2450 -> 2447;
2450 -> 2449;
2450 -> 2446;
2451 -> 2439;
2452 -> 2443;
2452 -> 2440;
2452 -> 2439;
2453 -> 2439;
2454 -> 2443;
2454 -> 2452;
2454 -> 2453;
2455 -> 2454;
2455 -> 2439;
2456 -> 2441;
2456 -> 2455;
2457 -> 2455;
2458 -> 2456;
2458 -> 2457;
2459 -> 2443;
2459 -> 2457;
2460 -> 2457;
2461 -> 2459;
2461 -> 2452;
2461 -> 2457;
2462 -> 2461;
2462 -> 2455;
2463 -> 2462;
2463 -> 2455;
2464 -> 2439;
2465 -> 2440;
2465 -> 2464;
2465 -> 2463;
2465 -> 2437;
2466 -> 1942;
2467 -> 1942;
2468 -> 2368;
2468 -> 2467;
2469 -> 2468;
2469 -> 2465;
2469 -> 2467;
2470 -> 2467;
2471 -> 2469;
2471 -> 2470;
2471 -> 2467;
2472 -> 2467;
2473 -> 2472;
2473 -> 2467;
2474 -> 2469;
2474 -> 2473;
2474 -> 2465;
2474 -> 2467;
2475 -> 2474;
2476 -> 1942;
2477 -> 1942;
2478 -> 1944;
2478 -> 2477;
2478 -> 1942;
2479 -> 1948;
2479 -> 2478;
2480 -> 2478;
2481 -> 2479;
2481 -> 2480;
2482 -> 1944;
2482 -> 2480;
2483 -> 2482;
2483 -> 2475;
2483 -> 2480;
2484 -> 2483;
2484 -> 2478;
2485 -> 2484;
2485 -> 2478;
2486 -> 1948;
2486 -> 2478;
2487 -> 2478;
2488 -> 2485;
2488 -> 2487;
2489 -> 2486;
2489 -> 2487;
2490 -> 2368;
2490 -> 2487;
2491 -> 2488;
2491 -> 2487;
2492 -> 2478;
2493 -> 1948;
2493 -> 2478;
2494 -> 2478;
2495 -> 2493;
2495 -> 2494;
2496 -> 1944;
2496 -> 2494;
2497 -> 2494;
2498 -> 2495;
2498 -> 2494;
2499 -> 2494;
2500 -> 2498;
2500 -> 2499;
2501 -> 2496;
2501 -> 2499;
2502 -> 2499;
2503 -> 2501;
2503 -> 2502;
2504 -> 2502;
2505 -> 2504;
2505 -> 2503;
2505 -> 2502;
2506 -> 2502;
2507 -> 2503;
2507 -> 2506;
2508 -> 2507;
2508 -> 2475;
2508 -> 2505;
2508 -> 2506;
2509 -> 2508;
2509 -> 2502;
2510 -> 2509;
2510 -> 2499;
2511 -> 2499;
2512 -> 2501;
2512 -> 2511;
2513 -> 2512;
2513 -> 2508;
2513 -> 2511;
2514 -> 2513;
2514 -> 2499;
2515 -> 2514;
2516 -> 2510;
2516 -> 2515;
2516 -> 2514;
2517 -> 2516;
2518 -> 2494;
2519 -> 2497;
2519 -> 2494;
2520 -> 2496;
2520 -> 2513;
2520 -> 2494;
2521 -> 2519;
2521 -> 2520;
2521 -> 2497;
2521 -> 2513;
2521 -> 2494;
2522 -> 2497;
2522 -> 2494;
2523 -> 2496;
2523 -> 2521;
2523 -> 2494;
2524 -> 2497;
2524 -> 2494;
2525 -> 2496;
2525 -> 2523;
2525 -> 2494;
2526 -> 2497;
2526 -> 2494;
2527 -> 2496;
2527 -> 2525;
2527 -> 2494;
2528 -> 2497;
2528 -> 2494;
2529 -> 2496;
2529 -> 2527;
2529 -> 2494;
2530 -> 2497;
2530 -> 2494;
2531 -> 2496;
2531 -> 2529;
2531 -> 2494;
2532 -> 2497;
2532 -> 2494;
2533 -> 2496;
2533 -> 2531;
2533 -> 2494;
2534 -> 2497;
2534 -> 2494;
2535 -> 2496;
2535 -> 2533;
2535 -> 2494;
2536 -> 2497;
2536 -> 2535;
2536 -> 2494;
2537 -> 2536;
2537 -> 2478;
2538 -> 2537;
2538 -> 2478;
2539 -> 1948;
2539 -> 2478;
2540 -> 2478;
2541 -> 2538;
2541 -> 2540;
2542 -> 2539;
2542 -> 2540;
2543 -> 2368;
2543 -> 2540;
2544 -> 2541;
2544 -> 2540;
2545 -> 2478;
2546 -> 2478;
2547 -> 1943;
2547 -> 2546;
2548 -> 2547;
2548 -> 2535;
2548 -> 2546;
2549 -> 2548;
2549 -> 2478;
2550 -> 2368;
2550 -> 2478;
2551 -> 1944;
2551 -> 2478;
2552 -> 1948;
2552 -> 2478;
2553 -> 2478;
2554 -> 2549;
2554 -> 2553;
2555 -> 0;
2555 -> 2553;
2556 -> 2549;
2556 -> 2555;
2556 -> 0;
2556 -> 2478;
2557 -> 2549;
2557 -> 2553;
2558 -> 2553;
2559 -> 2549;
2559 -> 2558;
2559 -> 2556;
2559 -> 2478;
2560 -> 2478;
2561 -> 2368;
2561 -> 2560;
2562 -> 2561;
2562 -> 2559;
2562 -> 2560;
2563 -> 2560;
2564 -> 2562;
2564 -> 2563;
2564 -> 2560;
2565 -> 2560;
2566 -> 2565;
2566 -> 2560;
2567 -> 2478;
2568 -> 1944;
2568 -> 2562;
2568 -> 2478;
2569 -> 2478;
2570 -> 2568;
2570 -> 2569;
2570 -> 2478;
2571 -> 1942;
2572 -> 1944;
2572 -> 2571;
2572 -> 1942;
2573 -> 2368;
2573 -> 2562;
2573 -> 1944;
2573 -> 1942;
2574 -> 1942;
2575 -> 1943;
2575 -> 2574;
2576 -> 2575;
2576 -> 2562;
2576 -> 2574;
2577 -> 2576;
2577 -> 1942;
2578 -> 1942;
2579 -> 1949;
2579 -> 2578;
2579 -> 1942;
2580 -> 1943;
2580 -> 2579;
2581 -> 1948;
2581 -> 2579;
2582 -> 1950;
2582 -> 2579;
2583 -> 2579;
2584 -> 2580;
2584 -> 2583;
2585 -> 2581;
2585 -> 2583;
2586 -> 2582;
2586 -> 2583;
2587 -> 2583;
2588 -> 2584;
2588 -> 2587;
2589 -> 2587;
2590 -> 2588;
2590 -> 2589;
2591 -> 2589;
2592 -> 2590;
2592 -> 2591;
2593 -> 2592;
2593 -> 2577;
2593 -> 2591;
2594 -> 2592;
2594 -> 2577;
2594 -> 2591;
2595 -> 2594;
2595 -> 2589;
2596 -> 2590;
2596 -> 2577;
2596 -> 2589;
2597 -> 2596;
2597 -> 2583;
2598 -> 2586;
2598 -> 2583;
2599 -> 2598;
2599 -> 2597;
2599 -> 1149;
2599 -> 2596;
2599 -> 2583;
2600 -> 2583;
2601 -> 2585;
2601 -> 2599;
2601 -> 2583;
2602 -> 2579;
2603 -> 2579;
2604 -> 1944;
2604 -> 2603;
2604 -> 2579;
2605 -> 2358;
2605 -> 2603;
2605 -> 2579;
2606 -> 2604;
2606 -> 2605;
2606 -> 2579;
2607 -> 2579;
2608 -> 1943;
2608 -> 2607;
2609 -> 2608;
2609 -> 2601;
2609 -> 2607;
2610 -> 2609;
2610 -> 2579;
2611 -> 2358;
2611 -> 2610;
2612 -> 1948;
2612 -> 2610;
2613 -> 2610;
2614 -> 2611;
2614 -> 2613;
2615 -> 2611;
2615 -> 2613;
2616 -> 2611;
2616 -> 2613;
2617 -> 2611;
2617 -> 2613;
2618 -> 2614;
2618 -> 2613;
2619 -> 2613;
2620 -> 2615;
2620 -> 2613;
2621 -> 2616;
2621 -> 2613;
2622 -> 2613;
2623 -> 2618;
2623 -> 2622;
2624 -> 2619;
2624 -> 2622;
2625 -> 2620;
2625 -> 2622;
2626 -> 2619;
2626 -> 2622;
2627 -> 2621;
2627 -> 2622;
2628 -> 2617;
2628 -> 2622;
2629 -> 2623;
2629 -> 2622;
2630 -> 2622;
2631 -> 2626;
2631 -> 2630;
2631 -> 2622;
2632 -> 2623;
2632 -> 2622;
2633 -> 2624;
2633 -> 2622;
2634 -> 2625;
2634 -> 2622;
2635 -> 2627;
2635 -> 2622;
2636 -> 2622;
2637 -> 2632;
2637 -> 2636;
2638 -> 2633;
2638 -> 2636;
2639 -> 2634;
2639 -> 2636;
2640 -> 2635;
2640 -> 2636;
2641 -> 2628;
2641 -> 2636;
2642 -> 2636;
2643 -> 2636;
2644 -> 2637;
2644 -> 2629;
2644 -> 2636;
2645 -> 2644;
2645 -> 2629;
2645 -> 2636;
2646 -> 2637;
2646 -> 2629;
2646 -> 2636;
2647 -> 2637;
2647 -> 2646;
2647 -> 2636;
2648 -> 2640;
2648 -> 2647;
2649 -> 2636;
2650 -> 2641;
2650 -> 2646;
2650 -> 2649;
2650 -> 2636;
2651 -> 2637;
2651 -> 2646;
2651 -> 2636;
2652 -> 2622;
2653 -> 2626;
2653 -> 2652;
2653 -> 2622;
2654 -> 2651;
2654 -> 2653;
2655 -> 1919;
2656 -> 1933;
2656 -> 1919;
2657 -> 2656;
2657 -> 2654;
2657 -> 1919;
2658 -> 1918;
2658 -> 2657;
2659 -> 1933;
2659 -> 2657;
2660 -> 2657;
2661 -> 2658;
2661 -> 2660;
2662 -> 2659;
2662 -> 2660;
2663 -> 1157;
2663 -> 2660;
2664 -> 2663;
2664 -> 2657;
2664 -> 2660;
2665 -> 2663;
2665 -> 2657;
2665 -> 2660;
2666 -> 2657;
2667 -> 1154;
2667 -> 1919;
2668 -> 1933;
2668 -> 1919;
2669 -> 1156;
2669 -> 1919;
2670 -> 2667;
2670 -> 2668;
2670 -> 2669;
2670 -> 1157;
2670 -> 2657;
2670 -> 1149;
2670 -> 1919;
2671 -> 1919;
2672 -> 1916;
2672 -> 2670;
2672 -> 1919;
2673 -> 939;
2674 -> 945;
2674 -> 2673;
2674 -> 2670;
2674 -> 914;
2675 -> 945;
2675 -> 939;
2676 -> 945;
2676 -> 939;
2677 -> 945;
2677 -> 939;
2678 -> 945;
2678 -> 939;
2679 -> 945;
2679 -> 939;
2680 -> 945;
2680 -> 939;
2681 -> 945;
2681 -> 939;
2682 -> 939;
2683 -> 2675;
2683 -> 939;
2684 -> 2677;
2684 -> 939;
2685 -> 2682;
2685 -> 939;
2686 -> 2681;
2686 -> 2683;
2686 -> 2684;
2686 -> 2685;
2686 -> 2674;
2686 -> 2682;
2686 -> 939;
2687 -> 2675;
2687 -> 2686;
2687 -> 939;
2688 -> 939;
2689 -> 2681;
2689 -> 2688;
2690 -> 2688;
2691 -> 2689;
2691 -> 2690;
2692 -> 2691;
2692 -> 2686;
2692 -> 2690;
2693 -> 2691;
2693 -> 2686;
2693 -> 2690;
2694 -> 2693;
2694 -> 2688;
2695 -> 2689;
2695 -> 2686;
2695 -> 2688;
2696 -> 2695;
2696 -> 939;
2697 -> 939;
2698 -> 2682;
2698 -> 939;
2699 -> 939;
2700 -> 2698;
2700 -> 2699;
2701 -> 2681;
2701 -> 2699;
2702 -> 2699;
2703 -> 2701;
2703 -> 2702;
2704 -> 2702;
2705 -> 2703;
2705 -> 2704;
2706 -> 2705;
2706 -> 2696;
2706 -> 2704;
2707 -> 2705;
2707 -> 2696;
2707 -> 2704;
2708 -> 2707;
2708 -> 2702;
2709 -> 2703;
2709 -> 2696;
2709 -> 2702;
2710 -> 2709;
2710 -> 2699;
2711 -> 2699;
2712 -> 2711;
2712 -> 2710;
2712 -> 2709;
2712 -> 2699;
2713 -> 2699;
2714 -> 2713;
2714 -> 939;
2715 -> 2679;
2715 -> 939;
2716 -> 2682;
2716 -> 939;
2717 -> 2680;
2717 -> 939;
2718 -> 2715;
2718 -> 2716;
2718 -> 2717;
2718 -> 2681;
2718 -> 2709;
2718 -> 2674;
2718 -> 939;
2719 -> 939;
2720 -> 2680;
2720 -> 2674;
2720 -> 2718;
2720 -> 939;
2721 -> 939;
2722 -> 2678;
2722 -> 939;
2723 -> 939;
2728 -> 2725;
2728 -> 2724;
2729 -> 2726;
2729 -> 2724;
2730 -> 2727;
2730 -> 2724;
2731 -> 2724;
2732 -> 2681;
2732 -> 939;
2733 -> 2722;
2733 -> 939;
2734 -> 2676;
2734 -> 939;
2735 -> 2721;
2735 -> 939;
2736 -> 2680;
2736 -> 939;
2737 -> 939;
2738 -> 939;
2739 -> 2732;
2739 -> 2738;
2740 -> 2733;
2740 -> 2738;
2741 -> 2734;
2741 -> 2738;
2742 -> 2735;
2742 -> 2738;
2743 -> 2736;
2743 -> 2738;
2744 -> 2737;
2744 -> 2738;
2745 -> 2737;
2745 -> 2738;
2746 -> 2738;
2747 -> 2738;
2748 -> 2741;
2748 -> 2747;
2748 -> 2738;
2749 -> 2738;
2750 -> 2739;
2750 -> 2749;
2751 -> 2749;
2752 -> 2750;
2752 -> 2751;
2753 -> 2752;
2753 -> 2720;
2753 -> 2751;
2754 -> 2752;
2754 -> 2720;
2754 -> 2751;
2755 -> 2754;
2755 -> 2749;
2756 -> 2750;
2756 -> 2720;
2756 -> 2749;
2757 -> 2756;
2757 -> 2738;
2758 -> 2757;
2758 -> 2740;
2758 -> 2738;
2759 -> 2739;
2759 -> 2738;
2760 -> 2746;
2760 -> 2738;
2761 -> 2744;
2761 -> 2738;
2762 -> 2745;
2762 -> 2738;
2763 -> 2738;
2764 -> 2742;
2764 -> 2738;
2765 -> 2743;
2765 -> 2738;
2766 -> 2738;
2767 -> 2758;
2767 -> 2766;
2768 -> 2759;
2768 -> 2766;
2769 -> 2760;
2769 -> 2766;
2770 -> 2761;
2770 -> 2766;
2771 -> 2762;
2771 -> 2766;
2772 -> 2763;
2772 -> 2766;
2773 -> 2763;
2773 -> 2766;
2774 -> 2764;
2774 -> 2766;
2775 -> 2765;
2775 -> 2766;
2776 -> 2763;
2776 -> 2766;
2777 -> 2766;
2778 -> 2777;
2778 -> 2766;
2779 -> 2777;
2779 -> 2766;
2780 -> 2777;
2780 -> 2766;
2781 -> 2777;
2781 -> 2766;
2782 -> 2777;
2782 -> 2766;
2783 -> 2777;
2783 -> 2766;
2784 -> 2777;
2784 -> 2766;
2785 -> 2777;
2785 -> 2766;
2786 -> 2777;
2786 -> 2766;
2787 -> 2777;
2787 -> 2766;
2788 -> 2777;
2788 -> 2766;
2789 -> 2777;
2789 -> 2766;
2790 -> 2767;
2790 -> 2777;
2790 -> 2766;
2791 -> 2768;
2791 -> 2777;
2791 -> 2766;
2792 -> 2769;
2792 -> 2777;
2792 -> 2766;
2793 -> 2770;
2793 -> 2777;
2793 -> 2766;
2794 -> 2771;
2794 -> 2777;
2794 -> 2766;
2795 -> 2772;
2795 -> 2777;
2795 -> 2766;
2796 -> 2773;
2796 -> 2777;
2796 -> 2766;
2797 -> 2774;
2797 -> 2777;
2797 -> 2766;
2798 -> 2775;
2798 -> 2777;
2798 -> 2766;
2799 -> 2738;
2800 -> 2739;
2800 -> 2799;
2801 -> 2799;
2802 -> 2800;
2802 -> 2801;
2803 -> 2802;
2803 -> 2756;
2803 -> 2801;
2804 -> 2802;
2804 -> 2756;
2804 -> 2801;
2805 -> 2804;
2805 -> 2799;
2806 -> 2800;
2806 -> 2756;
2806 -> 2799;
2807 -> 2806;
2807 -> 2738;
2808 -> 2807;
2808 -> 2763;
2808 -> 2806;
2808 -> 2777;
2808 -> 2778;
2808 -> 2790;
2808 -> 2779;
2808 -> 2791;
2808 -> 2780;
2808 -> 2792;
2808 -> 2781;
2808 -> 2793;
2808 -> 2782;
2808 -> 2794;
2808 -> 2783;
2808 -> 2795;
2808 -> 2784;
2808 -> 2796;
2808 -> 2785;
2808 -> 2797;
2808 -> 2786;
2808 -> 2787;
2808 -> 2788;
2808 -> 2789;
2808 -> 2798;
2808 -> 2737;
2808 -> 2721;
2808 -> 2720;
2808 -> 2738;
2809 -> 2738;
2810 -> 2808;
2810 -> 2809;
2811 -> 2808;
2811 -> 2809;
2812 -> 2811;
2812 -> 2808;
2812 -> 2809;
2813 -> 2810;
2813 -> 2812;
2813 -> 2809;
2814 -> 2813;
2815 -> 2813;
2816 -> 2813;
2817 -> 2815;
2817 -> 2816;
2818 -> 2811;
2818 -> 2816;
2819 -> 2818;
2819 -> 2812;
2819 -> 2816;
2820 -> 2816;
2821 -> 2819;
2822 -> 2813;
2823 -> 2813;
2824 -> 2822;
2824 -> 2823;
2825 -> 2811;
2825 -> 2823;
2826 -> 2825;
2826 -> 2812;
2826 -> 2823;
2827 -> 2823;
2828 -> 2826;
2829 -> 2813;
2830 -> 2811;
2830 -> 2829;
2831 -> 2830;
2831 -> 2812;
2831 -> 2829;
2832 -> 2813;
2833 -> 2813;
2834 -> 2833;
2834 -> 2813;
2835 -> 2834;
2836 -> 2834;
2837 -> 2835;
2837 -> 2836;
2838 -> 2811;
2838 -> 2836;
2839 -> 2838;
2839 -> 2812;
2839 -> 2836;
2840 -> 2836;
2841 -> 2839;
2842 -> 2834;
2843 -> 2811;
2843 -> 2842;
2844 -> 2843;
2844 -> 2812;
2844 -> 2831;
2844 -> 2842;
2845 -> 2834;
2846 -> 2834;
2847 -> 2811;
2847 -> 2812;
2847 -> 2846;
2847 -> 2834;
2848 -> 2834;
2849 -> 2846;
2849 -> 2848;
2850 -> 2846;
2850 -> 2848;
2851 -> 2811;
2851 -> 2848;
2852 -> 2849;
2852 -> 2848;
2853 -> 2850;
2853 -> 2848;
2854 -> 2852;
2854 -> 2853;
2854 -> 2848;
2855 -> 2848;
2856 -> 2854;
2856 -> 2855;
2857 -> 2851;
2857 -> 2855;
2858 -> 2857;
2858 -> 2812;
2858 -> 2855;
2859 -> 2855;
2860 -> 2858;
2861 -> 2848;
2862 -> 2834;
2863 -> 2811;
2863 -> 2862;
2864 -> 2863;
2864 -> 2812;
2864 -> 2831;
2864 -> 2844;
2864 -> 2862;
2865 -> 2862;
2866 -> 2863;
2866 -> 2812;
2866 -> 2831;
2866 -> 2844;
2866 -> 2864;
2866 -> 2865;
2866 -> 2862;
2867 -> 2834;
2868 -> 2834;
2869 -> 2834;
2870 -> 2868;
2870 -> 2869;
2871 -> 2811;
2871 -> 2869;
2872 -> 2871;
2872 -> 2812;
2872 -> 2869;
2873 -> 2869;
2874 -> 2872;
2875 -> 2813;
2876 -> 2813;
2877 -> 2875;
2877 -> 2876;
2878 -> 2811;
2878 -> 2876;
2879 -> 2878;
2879 -> 2812;
2879 -> 2876;
2880 -> 2876;
2881 -> 2879;
2882 -> 2813;
2883 -> 2811;
2883 -> 2882;
2884 -> 2883;
2884 -> 2812;
2884 -> 2831;
2884 -> 2844;
2884 -> 2864;
2884 -> 2882;
2885 -> 2813;
2886 -> 2811;
2886 -> 2812;
2886 -> 2809;
2887 -> 2810;
2887 -> 2812;
2887 -> 2831;
2887 -> 2844;
2887 -> 2864;
2887 -> 2884;
2887 -> 2809;
2888 -> 2811;
2888 -> 2812;
2888 -> 2831;
2888 -> 2844;
2888 -> 2864;
2888 -> 2884;
2888 -> 2887;
2889 -> 2811;
2889 -> 2887;
2890 -> 2889;
2890 -> 2887;
2890 -> 2888;
2890 -> 2812;
2890 -> 2831;
2890 -> 2844;
2890 -> 2864;
2890 -> 2884;
2891 -> 2887;
2892 -> 2890;
2892 -> 2891;
2893 -> 2890;
2893 -> 2891;
2894 -> 2893;
2894 -> 2890;
2894 -> 2891;
2895 -> 2891;
2896 -> 2893;
2896 -> 2894;
2896 -> 2895;
2896 -> 2891;
2897 -> 2892;
2897 -> 2891;
2898 -> 2891;
2899 -> 2897;
2899 -> 2898;
2900 -> 2893;
2900 -> 2898;
2901 -> 2900;
2901 -> 2894;
2901 -> 2898;
2902 -> 2899;
2902 -> 2898;
2903 -> 2898;
2904 -> 2902;
2904 -> 2903;
2905 -> 2904;
2905 -> 2903;
2906 -> 2905;
2906 -> 2901;
2906 -> 2903;
2907 -> 2898;
2908 -> 2900;
2908 -> 2906;
2908 -> 2907;
2908 -> 2898;
2909 -> 2899;
2909 -> 2898;
2910 -> 2909;
2910 -> 2906;
2910 -> 2898;
2911 -> 2910;
2911 -> 2898;
2912 -> 2898;
2913 -> 2898;
2914 -> 2913;
2914 -> 2898;
2915 -> 2899;
2915 -> 2898;
2916 -> 2912;
2916 -> 2898;
2917 -> 2913;
2917 -> 2898;
2918 -> 2898;
2919 -> 2915;
2919 -> 2918;
2920 -> 2916;
2920 -> 2918;
2921 -> 2917;
2921 -> 2918;
2922 -> 2900;
2922 -> 2918;
2923 -> 0;
2923 -> 2918;
2924 -> 2918;
2925 -> 2918;
2926 -> 2919;
2926 -> 2910;
2926 -> 2918;
2927 -> 2926;
2927 -> 2910;
2928 -> 2927;
2928 -> 2923;
2928 -> 2926;
2929 -> 2928;
2929 -> 2926;
2930 -> 2926;
2931 -> 2922;
2931 -> 2930;
2931 -> 2926;
2932 -> 2931;
2932 -> 2926;
2933 -> 2918;
2934 -> 2925;
2934 -> 2933;
2934 -> 2918;
2935 -> 0;
2935 -> 2934;
2936 -> 2918;
2937 -> 2936;
2937 -> 2898;
2938 -> 2935;
2938 -> 0;
2938 -> 2898;
2939 -> 2929;
2939 -> 0;
2939 -> 2938;
2940 -> 2938;
2941 -> 2891;
2942 -> 2893;
2942 -> 2931;
2942 -> 2891;
2943 -> 2892;
2943 -> 2931;
2943 -> 2942;
2944 -> 2893;
2944 -> 2943;
2945 -> 2893;
2945 -> 2943;
2946 -> 2945;
2946 -> 2943;
2946 -> 2944;
2947 -> 2943;
2948 -> 2947;
2949 -> 2946;
2949 -> 2948;
2949 -> 2947;
2950 -> 2946;
2950 -> 2947;
2951 -> 2947;
2952 -> 2947;
2953 -> 2952;
2953 -> 2947;
2954 -> 2951;
2954 -> 2947;
2955 -> 2952;
2955 -> 2947;
2956 -> 0;
2956 -> 2947;
2957 -> 2947;
2958 -> 2947;
2959 -> 2946;
2960 -> 2959;
2960 -> 2956;
2960 -> 2946;
2961 -> 2960;
2961 -> 2946;
2962 -> 2946;
2963 -> 2947;
2964 -> 2958;
2964 -> 2963;
2964 -> 2947;
2965 -> 0;
2965 -> 2964;
2966 -> 2947;
2967 -> 2965;
2967 -> 0;
2967 -> 2947;
2968 -> 2961;
2968 -> 0;
2968 -> 2967;
2969 -> 2967;
2970 -> 2946;
2971 -> 2946;
2972 -> 2946;
2973 -> 2946;
2974 -> 2973;
2974 -> 2946;
2975 -> 2972;
2975 -> 2946;
2976 -> 2973;
2976 -> 2946;
2977 -> 0;
2977 -> 2946;
2978 -> 2946;
2979 -> 2946;
2980 -> 2959;
2980 -> 2977;
2980 -> 2946;
2981 -> 2980;
2981 -> 2946;
2982 -> 2946;
2983 -> 2979;
2983 -> 2982;
2983 -> 2946;
2984 -> 0;
2984 -> 2983;
2985 -> 2946;
2986 -> 2984;
2986 -> 0;
2986 -> 2946;
2987 -> 2981;
2987 -> 0;
2987 -> 2986;
2988 -> 2986;
2989 -> 2972;
2989 -> 2946;
2990 -> 2989;
2990 -> 2977;
2990 -> 2972;
2991 -> 2990;
2991 -> 2972;
2992 -> 2972;
2993 -> 2991;
2993 -> 0;
2993 -> 2986;
2994 -> 2972;
2995 -> 2972;
2996 -> 2972;
2997 -> 2996;
2997 -> 2972;
2998 -> 2972;
2999 -> 2996;
2999 -> 2972;
3000 -> 0;
3000 -> 2972;
3001 -> 2972;
3002 -> 2972;
3003 -> 2972;
3004 -> 3003;
3004 -> 3000;
3004 -> 2972;
3005 -> 3004;
3005 -> 2972;
3006 -> 2972;
3007 -> 3002;
3007 -> 3006;
3007 -> 2972;
3008 -> 0;
3008 -> 3007;
3009 -> 2972;
3010 -> 3008;
3010 -> 0;
3010 -> 2972;
3011 -> 3005;
3011 -> 0;
3011 -> 3010;
3012 -> 3010;
3013 -> 2996;
3013 -> 2972;
3014 -> 2996;
3014 -> 2972;
3015 -> 3014;
3015 -> 3000;
3015 -> 2996;
3016 -> 3015;
3016 -> 2996;
3017 -> 2996;
3018 -> 3016;
3018 -> 0;
3018 -> 3010;
3019 -> 2810;
3019 -> 2996;
3019 -> 2809;
3020 -> 3019;
3021 -> 3020;
3022 -> 3019;
3023 -> 3019;
3024 -> 3019;
3025 -> 3023;
3025 -> 3024;
3026 -> 2811;
3026 -> 3024;
3027 -> 3026;
3027 -> 2996;
3027 -> 3024;
3028 -> 3024;
3029 -> 3027;
3030 -> 3019;
3031 -> 3030;
3031 -> 2996;
3031 -> 3020;
3032 -> 3030;
3033 -> 3030;
3033 -> 2996;
3033 -> 3020;
3033 -> 3031;
3033 -> 3032;
3034 -> 3019;
3035 -> 3019;
3036 -> 3019;
3037 -> 3035;
3037 -> 3036;
3038 -> 2811;
3038 -> 3036;
3039 -> 3038;
3039 -> 2996;
3039 -> 3036;
3040 -> 3036;
3041 -> 3039;
3042 -> 2738;
3043 -> 2763;
3043 -> 3031;
3043 -> 3042;
3043 -> 2738;
3044 -> 2746;
3044 -> 2738;
3045 -> 2738;
3046 -> 2744;
3046 -> 3045;
3046 -> 2738;
3047 -> 3046;
3048 -> 2739;
3048 -> 3047;
3049 -> 3047;
3050 -> 3048;
3050 -> 3031;
3050 -> 3049;
3051 -> 3049;
3052 -> 3050;
3052 -> 3046;
3053 -> 3052;
3054 -> 2742;
3054 -> 3052;
3055 -> 2743;
3055 -> 3052;
3056 -> 3052;
3057 -> 3053;
3057 -> 3056;
3058 -> 3053;
3058 -> 3056;
3059 -> 3054;
3059 -> 3056;
3060 -> 3055;
3060 -> 3056;
3061 -> 3057;
3061 -> 3056;
3062 -> 2679;
3062 -> 939;
3063 -> 2721;
3063 -> 939;
3064 -> 2680;
3064 -> 939;
3065 -> 3062;
3065 -> 3063;
3065 -> 3064;
3065 -> 2681;
3065 -> 3061;
3065 -> 939;
3066 -> 939;
3067 -> 945;
3067 -> 939;
3068 -> 945;
3068 -> 939;
3069 -> 945;
3069 -> 939;
3070 -> 945;
3070 -> 939;
3071 -> 939;
3072 -> 3070;
3072 -> 3065;
3072 -> 3071;
3072 -> 939;
3073 -> 3067;
3073 -> 3071;
3073 -> 939;
3074 -> 3072;
3074 -> 3073;
3074 -> 939;
3075 -> 3067;
3075 -> 939;
3076 -> 939;
3077 -> 3075;
3077 -> 3076;
3078 -> 3070;
3078 -> 3076;
3079 -> 3076;
3080 -> 3078;
3080 -> 3065;
3080 -> 3079;
3080 -> 3076;
3081 -> 939;
3082 -> 945;
3082 -> 939;
3083 -> 939;
3084 -> 3082;
3084 -> 3083;
3085 -> 3083;
3086 -> 3084;
3086 -> 3085;
3087 -> 3085;
3088 -> 3086;
3088 -> 3087;
3089 -> 3087;
3090 -> 3088;
3090 -> 3089;
3091 -> 3090;
3091 -> 3065;
3091 -> 3089;
3092 -> 3090;
3092 -> 3065;
3092 -> 3089;
3093 -> 3092;
3093 -> 3087;
3094 -> 3083;
3095 -> 945;
3095 -> 939;
3096 -> 939;
3097 -> 3095;
3097 -> 3096;
3098 -> 3096;
3099 -> 3097;
3099 -> 3098;
3100 -> 3099;
3100 -> 3065;
3100 -> 3098;
3101 -> 3099;
3101 -> 3065;
3101 -> 3098;
3102 -> 3101;
3102 -> 3096;
3103 -> 939;
3104 -> 945;
3104 -> 939;
3105 -> 939;
3106 -> 3104;
3106 -> 3105;
3107 -> 3105;
3108 -> 3106;
3108 -> 3107;
3109 -> 3108;
3109 -> 3065;
3109 -> 3107;
3110 -> 3108;
3110 -> 3065;
3110 -> 3107;
3111 -> 3110;
3111 -> 3105;
3112 -> 945;
3112 -> 939;
3113 -> 945;
3113 -> 939;
3114 -> 939;
3115 -> 3113;
3115 -> 3114;
3116 -> 3115;
3116 -> 3065;
3116 -> 3114;
3117 -> 3116;
3117 -> 939;
3118 -> 3117;
3118 -> 3065;
3118 -> 939;
3119 -> 3117;
3119 -> 939;
3120 -> 3113;
3120 -> 3065;
3120 -> 939;
3121 -> 3117;
3121 -> 3118;
3122 -> 3112;
3122 -> 3065;
3122 -> 3118;
3123 -> 3118;
3124 -> 3121;
3124 -> 3123;
3125 -> 3122;
3125 -> 3123;
3126 -> 3113;
3126 -> 3123;
3127 -> 3126;
3127 -> 3065;
3127 -> 3123;
3128 -> 3124;
3128 -> 3123;
3129 -> 3127;
3129 -> 3128;
3129 -> 3123;
3130 -> 3123;
3131 -> 3124;
3131 -> 3123;
3132 -> 3130;
3132 -> 3123;
3133 -> 3126;
3133 -> 3065;
3133 -> 3131;
3133 -> 3132;
3133 -> 3123;
3134 -> 3124;
3134 -> 3123;
3135 -> 3123;
3136 -> 3123;
3137 -> 3134;
3137 -> 3136;
3138 -> 3135;
3138 -> 3136;
3139 -> 3138;
3139 -> 3136;
3140 -> 3136;
3141 -> 3137;
3141 -> 3140;
3141 -> 3136;
3142 -> 3137;
3142 -> 3138;
3142 -> 3136;
3143 -> 3124;
3143 -> 3123;
3144 -> 3135;
3144 -> 3123;
3145 -> 3126;
3145 -> 3133;
3145 -> 3143;
3145 -> 3144;
3145 -> 3142;
3145 -> 3123;
3146 -> 3145;
3146 -> 3135;
3146 -> 3123;
3147 -> 3124;
3147 -> 3146;
3148 -> 3145;
3148 -> 3146;
3149 -> 3125;
3149 -> 3146;
3150 -> 3146;
3151 -> 3147;
3151 -> 3150;
3152 -> 3148;
3152 -> 3150;
3153 -> 3149;
3153 -> 3150;
3154 -> 3126;
3154 -> 3150;
3155 -> 3154;
3155 -> 3145;
3155 -> 3150;
3156 -> 3150;
3157 -> 3152;
3157 -> 3156;
3158 -> 3157;
3158 -> 3145;
3158 -> 3156;
3159 -> 3158;
3159 -> 3150;
3160 -> 3155;
3160 -> 3145;
3160 -> 3150;
3161 -> 3154;
3161 -> 3145;
3161 -> 0;
3161 -> 3150;
3162 -> 3159;
3162 -> 3145;
3162 -> 3150;
3163 -> 3161;
3163 -> 3162;
3163 -> 3150;
3164 -> 3151;
3164 -> 3145;
3164 -> 3150;
3165 -> 3151;
3165 -> 3145;
3165 -> 3150;
3166 -> 3150;
3167 -> 3154;
3167 -> 3145;
3167 -> 3166;
3167 -> 3150;
3168 -> 3146;
3169 -> 3123;
3170 -> 3124;
3170 -> 3145;
3170 -> 3169;
3170 -> 3123;
3171 -> 3145;
3171 -> 3123;
3172 -> 3145;
3172 -> 3123;
3173 -> 945;
3173 -> 3172;
3173 -> 3170;
3173 -> 914;
3174 -> 945;
3174 -> 939;
3175 -> 3174;
3175 -> 3173;
3175 -> 939;
3176 -> 945;
3176 -> 939;
3177 -> 945;
3177 -> 939;
3178 -> 3177;
3178 -> 3175;
3178 -> 939;
3179 -> 939;
3180 -> 3179;
3180 -> 3178;
3180 -> 3175;
3180 -> 939;
3181 -> 939;
3182 -> 945;
3182 -> 3181;
3182 -> 3175;
3182 -> 914;
3183 -> 945;
3183 -> 939;
3184 -> 945;
3184 -> 939;
3185 -> 3183;
3185 -> 3182;
3185 -> 939;
3186 -> 3184;
3186 -> 3182;
3186 -> 3185;
3187 -> 3183;
3187 -> 3185;
3188 -> 3185;
3189 -> 3186;
3189 -> 3188;
3190 -> 3187;
3190 -> 3188;
3191 -> 3184;
3191 -> 3188;
3192 -> 3189;
3192 -> 3182;
3192 -> 3188;
3193 -> 3192;
3194 -> 3189;
3194 -> 3182;
3194 -> 3192;
3195 -> 3192;
3196 -> 3195;
3196 -> 3194;
3196 -> 3182;
3196 -> 3192;
3197 -> 3190;
3197 -> 3182;
3197 -> 3192;
3198 -> 3191;
3198 -> 3182;
3198 -> 3197;
3199 -> 3189;
3199 -> 3192;
3200 -> 3193;
3200 -> 3192;
3201 -> 3192;
3202 -> 3193;
3202 -> 3200;
3202 -> 3192;
3203 -> 3200;
3203 -> 3188;
3204 -> 945;
3204 -> 3203;
3204 -> 3202;
3204 -> 3200;
3204 -> 914;
3205 -> 945;
3205 -> 939;
3206 -> 3205;
3206 -> 3204;
3206 -> 939;
3207 -> 945;
3207 -> 939;
3208 -> 945;
3208 -> 939;
3209 -> 3207;
3209 -> 3206;
3209 -> 939;
3210 -> 939;
3211 -> 3208;
3211 -> 3206;
3211 -> 3210;
3212 -> 3211;
3212 -> 939;
3213 -> 939;
3214 -> 945;
3214 -> 939;
3215 -> 945;
3215 -> 939;
3216 -> 3214;
3216 -> 3212;
3216 -> 939;
3217 -> 939;
3218 -> 3216;
3218 -> 3217;
3219 -> 3215;
3219 -> 3217;
3220 -> 3219;
3220 -> 3212;
3220 -> 3217;
3221 -> 3220;
3221 -> 939;
3222 -> 939;
3223 -> 945;
3223 -> 939;
3224 -> 945;
3224 -> 939;
3225 -> 3223;
3225 -> 3221;
3225 -> 939;
3226 -> 939;
3227 -> 3225;
3227 -> 3226;
3228 -> 3224;
3228 -> 3226;
3229 -> 3226;
3230 -> 3227;
3230 -> 3226;
3231 -> 3226;
3232 -> 3230;
3232 -> 3231;
3233 -> 3228;
3233 -> 3231;
3234 -> 3231;
3235 -> 3233;
3235 -> 3234;
3236 -> 3234;
3237 -> 3236;
3237 -> 3235;
3237 -> 3234;
3238 -> 3234;
3239 -> 3235;
3239 -> 3238;
3240 -> 3239;
3240 -> 3221;
3240 -> 3237;
3240 -> 3238;
3241 -> 3240;
3241 -> 3234;
3242 -> 3241;
3242 -> 3231;
3243 -> 3231;
3244 -> 3233;
3244 -> 3243;
3245 -> 3240;
3245 -> 3231;
3246 -> 3245;
3247 -> 3242;
3247 -> 3246;
3247 -> 3245;
3248 -> 3247;
3249 -> 3226;
3250 -> 3229;
3250 -> 3226;
3251 -> 3229;
3251 -> 3226;
3252 -> 3229;
3252 -> 3226;
3253 -> 3229;
3253 -> 3226;
3254 -> 3229;
3254 -> 3226;
3255 -> 3229;
3255 -> 3226;
3256 -> 3229;
3256 -> 3226;
3257 -> 3229;
3257 -> 3226;
3258 -> 3229;
3258 -> 3240;
3258 -> 3226;
3259 -> 3258;
3259 -> 939;
3260 -> 939;
3261 -> 945;
3261 -> 939;
3262 -> 945;
3262 -> 939;
3263 -> 939;
3264 -> 3262;
3264 -> 3259;
3264 -> 939;
3265 -> 3263;
3265 -> 3264;
3265 -> 3259;
3265 -> 939;
3266 -> 939;
3267 -> 3263;
3267 -> 3265;
3267 -> 3266;
3267 -> 939;
3268 -> 3263;
3268 -> 3265;
3268 -> 3267;
3269 -> 3268;
3269 -> 3267;
3270 -> 3269;
3270 -> 3268;
3270 -> 0;
3271 -> 3270;
3272 -> 3269;
3272 -> 3268;
3272 -> 3270;
3273 -> 945;
3273 -> 939;
3274 -> 945;
3274 -> 939;
3275 -> 3273;
3275 -> 939;
3276 -> 3273;
3276 -> 3271;
3276 -> 939;
3277 -> 939;
3278 -> 3274;
3278 -> 3277;
3279 -> 3277;
3280 -> 3278;
3280 -> 3279;
3281 -> 3279;
3282 -> 3280;
3282 -> 3281;
3283 -> 3281;
3284 -> 3282;
3284 -> 3283;
3285 -> 3284;
3285 -> 3271;
3285 -> 3283;
3286 -> 3284;
3286 -> 3271;
3286 -> 3283;
3287 -> 3286;
3287 -> 3281;
3288 -> 3277;
3289 -> 3271;
3289 -> 939;
3290 -> 939;
3291 -> 3274;
3291 -> 3290;
3292 -> 945;
3292 -> 939;
3293 -> 945;
3293 -> 939;
3294 -> 945;
3294 -> 939;
3295 -> 945;
3295 -> 939;
3296 -> 939;
3297 -> 3295;
3297 -> 3271;
3297 -> 3296;
3298 -> 3296;
3299 -> 3298;
3300 -> 3299;
3301 -> 3297;
3301 -> 3300;
3302 -> 3301;
3302 -> 3299;
3303 -> 3296;
3304 -> 3297;
3304 -> 939;
3305 -> 3304;
3305 -> 3292;
3305 -> 3297;
3305 -> 939;
3306 -> 939;
3307 -> 3306;
3307 -> 939;
3308 -> 3294;
3308 -> 3307;
3308 -> 3271;
3308 -> 3306;
3308 -> 3297;
3308 -> 939;
3309 -> 939;
3310 -> 3306;
3310 -> 3308;
3310 -> 939;
3311 -> 3310;
3312 -> 3306;
3312 -> 3310;
3312 -> 939;
3313 -> 3311;
3313 -> 939;
3314 -> 945;
3314 -> 3313;
3314 -> 3312;
3314 -> 914;
3315 -> 3273;
3315 -> 3314;
3315 -> 939;
3316 -> 3284;
3316 -> 3314;
3316 -> 3283;
3317 -> 3284;
3317 -> 3314;
3317 -> 3283;
3318 -> 3317;
3318 -> 3281;
3319 -> 3314;
3319 -> 939;
3320 -> 3314;
3320 -> 3300;
3321 -> 3320;
3321 -> 3299;
3322 -> 3314;
3322 -> 939;
3323 -> 3322;
3323 -> 3292;
3323 -> 3314;
3323 -> 939;
3324 -> 945;
3324 -> 939;
3325 -> 945;
3325 -> 939;
3326 -> 939;
3327 -> 945;
3327 -> 3326;
3327 -> 3314;
3327 -> 914;
3328 -> 3273;
3328 -> 3327;
3328 -> 939;
3329 -> 3284;
3329 -> 3327;
3329 -> 3283;
3330 -> 3284;
3330 -> 3327;
3330 -> 3283;
3331 -> 3330;
3331 -> 3281;
3332 -> 3327;
3332 -> 939;
3333 -> 3327;
3333 -> 3300;
3334 -> 3333;
3334 -> 3299;
3335 -> 3327;
3335 -> 939;
3336 -> 3335;
3336 -> 3292;
3336 -> 3327;
3336 -> 939;
3337 -> 3306;
3337 -> 3327;
3338 -> 3327;
3339 -> 3306;
3339 -> 3327;
3340 -> 3339;
3340 -> 3337;
3340 -> 3327;
3341 -> 3327;
3342 -> 3340;
3342 -> 3341;
3342 -> 3327;
3343 -> 3293;
3343 -> 3342;
3344 -> 3340;
3344 -> 3342;
3345 -> 3342;
3346 -> 3343;
3346 -> 3345;
3347 -> 3344;
3347 -> 3345;
3348 -> 3295;
3348 -> 3345;
3349 -> 3347;
3349 -> 3346;
3349 -> 3345;
3350 -> 3349;
3351 -> 945;
3351 -> 939;
3352 -> 945;
3352 -> 939;
3353 -> 3352;
3353 -> 939;
3354 -> 3351;
3354 -> 939;
3355 -> 3352;
3355 -> 3350;
3355 -> 939;
3356 -> 3353;
3356 -> 3354;
3356 -> 3355;
3356 -> 3352;
3356 -> 3350;
3356 -> 939;
3357 -> 939;
3358 -> 3356;
3358 -> 0;
3358 -> 3357;
3359 -> 3357;
3360 -> 3356;
3361 -> 3360;
3361 -> 3356;
3362 -> 3356;
3362 -> 3357;
3363 -> 3357;
3364 -> 3363;
3365 -> 3356;
3365 -> 3364;
3366 -> 3365;
3366 -> 3363;
3367 -> 3357;
3368 -> 3357;
3369 -> 945;
3369 -> 939;
3370 -> 945;
3370 -> 939;
3371 -> 945;
3371 -> 939;
3372 -> 945;
3372 -> 939;
3373 -> 945;
3373 -> 939;
3374 -> 945;
3374 -> 939;
3375 -> 3369;
3375 -> 939;
3376 -> 939;
3377 -> 3372;
3377 -> 3376;
3377 -> 939;
3378 -> 3369;
3378 -> 939;
3379 -> 3370;
3379 -> 939;
3380 -> 3371;
3380 -> 939;
3381 -> 3373;
3381 -> 939;
3382 -> 939;
3383 -> 3378;
3383 -> 3382;
3384 -> 3379;
3384 -> 3382;
3385 -> 3380;
3385 -> 3382;
3386 -> 3381;
3386 -> 3382;
3387 -> 3374;
3387 -> 3382;
3388 -> 3382;
3389 -> 3382;
3390 -> 3383;
3390 -> 3356;
3390 -> 3382;
3391 -> 3390;
3391 -> 3356;
3391 -> 3382;
3392 -> 3383;
3392 -> 3356;
3392 -> 3382;
3393 -> 3386;
3393 -> 3392;
3394 -> 3383;
3394 -> 3356;
3394 -> 3393;
3395 -> 3390;
3395 -> 3393;
3396 -> 3393;
3397 -> 3395;
3397 -> 3396;
3398 -> 3396;
3399 -> 3397;
3399 -> 3398;
3399 -> 3396;
3400 -> 3399;
3401 -> 3397;
3401 -> 3356;
3401 -> 3399;
3402 -> 3396;
3403 -> 3402;
3403 -> 3393;
3404 -> 3394;
3404 -> 3403;
3404 -> 3393;
3405 -> 3383;
3405 -> 3404;
3406 -> 3383;
3406 -> 3356;
3406 -> 3404;
3407 -> 3382;
3408 -> 3387;
3408 -> 3356;
3408 -> 3407;
3408 -> 3382;
3409 -> 939;
3410 -> 3372;
3410 -> 3409;
3410 -> 939;
3411 -> 945;
3411 -> 939;
3412 -> 945;
3412 -> 939;
3413 -> 945;
3413 -> 939;
3414 -> 945;
3414 -> 939;
3415 -> 939;
3416 -> 3413;
3416 -> 3415;
3416 -> 939;
3417 -> 3411;
3417 -> 3356;
3417 -> 939;
3418 -> 3411;
3418 -> 3417;
3419 -> 3412;
3419 -> 3417;
3420 -> 3413;
3420 -> 3417;
3421 -> 3417;
3422 -> 3417;
3423 -> 3418;
3423 -> 3422;
3424 -> 3419;
3424 -> 3422;
3425 -> 3420;
3425 -> 3422;
3426 -> 3421;
3426 -> 3422;
3427 -> 3421;
3427 -> 3422;
3428 -> 3414;
3428 -> 3422;
3429 -> 3423;
3429 -> 3356;
3429 -> 3422;
3430 -> 3422;
3431 -> 3425;
3431 -> 3430;
3431 -> 3422;
3432 -> 3423;
3432 -> 3429;
3432 -> 3422;
3433 -> 3423;
3433 -> 3429;
3433 -> 3432;
3434 -> 3423;
3434 -> 3429;
3434 -> 0;
3434 -> 3422;
3435 -> 3423;
3435 -> 3429;
3435 -> 3422;
3436 -> 3427;
3436 -> 3435;
3437 -> 3436;
3438 -> 3436;
3439 -> 3423;
3439 -> 3429;
3439 -> 3436;
3440 -> 3436;
3441 -> 3439;
3441 -> 3440;
3442 -> 3440;
3443 -> 3441;
3443 -> 3442;
3444 -> 3442;
3445 -> 3443;
3445 -> 3444;
3445 -> 3442;
3446 -> 3442;
3447 -> 3446;
3447 -> 3440;
3448 -> 3423;
3448 -> 3429;
3448 -> 3447;
3449 -> 3423;
3449 -> 3429;
3449 -> 3422;
3450 -> 3428;
3450 -> 3429;
3450 -> 3422;
3451 -> 3423;
3451 -> 3429;
3451 -> 3422;
3452 -> 945;
3452 -> 939;
3453 -> 945;
3453 -> 939;
3454 -> 945;
3454 -> 939;
3455 -> 945;
3455 -> 939;
3456 -> 945;
3456 -> 939;
3457 -> 945;
3457 -> 939;
3458 -> 939;
3459 -> 3454;
3459 -> 3458;
3459 -> 939;
3460 -> 3452;
3460 -> 3450;
3460 -> 939;
3461 -> 3452;
3461 -> 3450;
3461 -> 3460;
3462 -> 3452;
3462 -> 3450;
3462 -> 0;
3462 -> 939;
3463 -> 3452;
3463 -> 3450;
3463 -> 939;
3464 -> 3456;
3464 -> 3463;
3465 -> 3452;
3465 -> 3450;
3465 -> 939;
3466 -> 945;
3466 -> 939;
3467 -> 945;
3467 -> 939;
3468 -> 945;
3468 -> 939;
3469 -> 3468;
3469 -> 3450;
3469 -> 939;
3470 -> 3466;
3470 -> 939;
3471 -> 3469;
3471 -> 3470;
3471 -> 939;
3472 -> 939;
3473 -> 3466;
3473 -> 3472;
3473 -> 939;
3474 -> 939;
3475 -> 3466;
3475 -> 939;
3476 -> 3474;
3476 -> 939;
3477 -> 3468;
3477 -> 3450;
3477 -> 3475;
3477 -> 3476;
3477 -> 939;
3478 -> 3477;
3479 -> 3452;
3479 -> 3478;
3479 -> 939;
3480 -> 3452;
3480 -> 3478;
3480 -> 3479;
3481 -> 3452;
3481 -> 3478;
3481 -> 0;
3481 -> 939;
3482 -> 3452;
3482 -> 3478;
3482 -> 939;
3483 -> 3456;
3483 -> 3482;
3484 -> 3452;
3484 -> 3478;
3484 -> 939;
3485 -> 945;
3485 -> 939;
3486 -> 945;
3486 -> 939;
3487 -> 3485;
3487 -> 939;
3488 -> 939;
3489 -> 3487;
3489 -> 3488;
3489 -> 3478;
3489 -> 939;
3490 -> 3485;
3490 -> 939;
3491 -> 3490;
3491 -> 3478;
3491 -> 3489;
3491 -> 939;
3492 -> 939;
3493 -> 3491;
3493 -> 3492;
3494 -> 3493;
3494 -> 3491;
3494 -> 3492;
3495 -> 3493;
3495 -> 3491;
3495 -> 3494;
3496 -> 3495;
3496 -> 3494;
3497 -> 3494;
3498 -> 3496;
3498 -> 3497;
3499 -> 3498;
3499 -> 3491;
3499 -> 0;
3499 -> 3497;
3500 -> 3498;
3500 -> 3491;
3500 -> 3497;
3501 -> 3497;
3502 -> 3500;
3502 -> 3501;
3503 -> 3501;
3504 -> 3502;
3504 -> 3503;
3504 -> 3501;
3505 -> 3504;
3506 -> 3502;
3506 -> 3491;
3506 -> 3504;
3507 -> 3501;
3508 -> 3507;
3508 -> 3497;
3509 -> 3499;
3509 -> 3508;
3509 -> 3497;
3510 -> 3492;
3511 -> 3510;
3511 -> 939;
3512 -> 3491;
3512 -> 3511;
3512 -> 939;
3513 -> 3485;
3513 -> 939;
3514 -> 3512;
3514 -> 939;
3515 -> 939;
3516 -> 3514;
3516 -> 3515;
3517 -> 3516;
3517 -> 3514;
3517 -> 3515;
3518 -> 3516;
3518 -> 3514;
3518 -> 3517;
3519 -> 3518;
3519 -> 3517;
3520 -> 3517;
3521 -> 3519;
3521 -> 3520;
3522 -> 3521;
3522 -> 3514;
3522 -> 0;
3522 -> 3520;
3523 -> 3521;
3523 -> 3514;
3523 -> 3520;
3524 -> 3520;
3525 -> 3523;
3525 -> 3524;
3526 -> 3524;
3527 -> 3525;
3527 -> 3526;
3527 -> 3524;
3528 -> 3527;
3529 -> 3525;
3529 -> 3514;
3529 -> 3527;
3530 -> 3524;
3531 -> 3530;
3531 -> 3520;
3532 -> 3522;
3532 -> 3531;
3532 -> 3520;
3533 -> 3515;
3534 -> 3512;
3534 -> 939;
3535 -> 3485;
3535 -> 3534;
3536 -> 3534;
3537 -> 3535;
3537 -> 3536;
3537 -> 3478;
3537 -> 3514;
3537 -> 3534;
3538 -> 3412;
3538 -> 3537;
3539 -> 3413;
3539 -> 3537;
3540 -> 3538;
3540 -> 3537;
3541 -> 3539;
3541 -> 3537;
3542 -> 3537;
3543 -> 3537;
3544 -> 3537;
3545 -> 3541;
3545 -> 3544;
3545 -> 3537;
3546 -> 3537;
3547 -> 3537;
3547 -> 3546;
3548 -> 3537;
3548 -> 0;
3549 -> 3537;
3550 -> 3543;
3550 -> 3549;
3551 -> 3550;
3552 -> 3550;
3553 -> 3537;
3553 -> 3550;
3554 -> 3550;
3555 -> 3553;
3555 -> 3554;
3556 -> 3554;
3557 -> 3555;
3557 -> 3556;
3558 -> 3556;
3559 -> 3557;
3559 -> 3558;
3559 -> 3556;
3560 -> 3556;
3561 -> 3560;
3561 -> 3554;
3562 -> 3537;
3562 -> 3561;
3563 -> 3537;
3564 -> 945;
3564 -> 939;
3565 -> 945;
3565 -> 939;
3566 -> 945;
3566 -> 939;
3567 -> 3564;
3567 -> 3537;
3567 -> 939;
3568 -> 939;
3569 -> 3567;
3569 -> 3568;
3569 -> 939;
3570 -> 3565;
3570 -> 0;
3570 -> 3569;
3571 -> 3567;
3571 -> 3565;
3571 -> 3569;
3572 -> 3565;
3572 -> 0;
3572 -> 3571;
3573 -> 3412;
3573 -> 3571;
3574 -> 3413;
3574 -> 3571;
3575 -> 3573;
3575 -> 3571;
3576 -> 3574;
3576 -> 3571;
3577 -> 3571;
3578 -> 3571;
3579 -> 3571;
3580 -> 3576;
3580 -> 3579;
3580 -> 3571;
3581 -> 3571;
3582 -> 3571;
3582 -> 3581;
3583 -> 3571;
3583 -> 0;
3584 -> 3571;
3585 -> 3578;
3585 -> 3584;
3586 -> 3585;
3587 -> 3585;
3588 -> 3571;
3588 -> 3585;
3589 -> 3585;
3590 -> 3588;
3590 -> 3589;
3591 -> 3589;
3592 -> 3590;
3592 -> 3591;
3593 -> 3591;
3594 -> 3592;
3594 -> 3593;
3594 -> 3591;
3595 -> 3591;
3596 -> 3595;
3596 -> 3589;
3597 -> 3571;
3597 -> 3596;
3598 -> 3571;
3599 -> 3452;
3599 -> 3571;
3599 -> 939;
3600 -> 3452;
3600 -> 3571;
3600 -> 3599;
3601 -> 3452;
3601 -> 3571;
3601 -> 0;
3601 -> 939;
3602 -> 3452;
3602 -> 3571;
3602 -> 939;
3603 -> 3456;
3603 -> 3602;
3604 -> 3452;
3604 -> 3571;
3604 -> 939;
3605 -> 3468;
3605 -> 3571;
3605 -> 939;
3606 -> 3571;
3606 -> 3492;
3607 -> 3606;
3607 -> 3571;
3607 -> 3492;
3608 -> 3606;
3608 -> 3571;
3608 -> 3607;
3609 -> 3608;
3609 -> 3607;
3610 -> 3607;
3611 -> 3609;
3611 -> 3610;
3612 -> 3611;
3612 -> 3571;
3612 -> 0;
3612 -> 3610;
3613 -> 3611;
3613 -> 3571;
3613 -> 3610;
3614 -> 3610;
3615 -> 3613;
3615 -> 3614;
3616 -> 3614;
3617 -> 3615;
3617 -> 3616;
3617 -> 3614;
3618 -> 3617;
3619 -> 3615;
3619 -> 3571;
3619 -> 3617;
3620 -> 3614;
3621 -> 3620;
3621 -> 3610;
3622 -> 3612;
3622 -> 3621;
3622 -> 3610;
3623 -> 3571;
3623 -> 3515;
3624 -> 3623;
3624 -> 3571;
3624 -> 3515;
3625 -> 3623;
3625 -> 3571;
3625 -> 3624;
3626 -> 3625;
3626 -> 3624;
3627 -> 3624;
3628 -> 3626;
3628 -> 3627;
3629 -> 3628;
3629 -> 3571;
3629 -> 0;
3629 -> 3627;
3630 -> 3628;
3630 -> 3571;
3630 -> 3627;
3631 -> 3627;
3632 -> 3630;
3632 -> 3631;
3633 -> 3631;
3634 -> 3632;
3634 -> 3633;
3634 -> 3631;
3635 -> 3634;
3636 -> 3632;
3636 -> 3571;
3636 -> 3634;
3637 -> 3631;
3638 -> 3637;
3638 -> 3627;
3639 -> 3629;
3639 -> 3638;
3639 -> 3627;
3640 -> 3383;
3640 -> 3571;
3640 -> 3382;
3641 -> 3640;
3641 -> 3571;
3641 -> 3382;
3642 -> 3383;
3642 -> 3571;
3642 -> 3382;
3643 -> 3386;
3643 -> 3642;
3644 -> 3383;
3644 -> 3571;
3644 -> 3643;
3645 -> 3640;
3645 -> 3643;
3646 -> 3643;
3647 -> 3645;
3647 -> 3646;
3648 -> 3646;
3649 -> 3647;
3649 -> 3648;
3649 -> 3646;
3650 -> 3649;
3651 -> 3647;
3651 -> 3571;
3651 -> 3649;
3652 -> 3646;
3653 -> 3652;
3653 -> 3643;
3654 -> 3644;
3654 -> 3653;
3654 -> 3643;
3655 -> 3383;
3655 -> 3654;
3656 -> 3383;
3656 -> 3571;
3656 -> 3654;
3657 -> 3387;
3657 -> 3571;
3657 -> 3407;
3657 -> 3382;
3658 -> 3594;
3659 -> 3592;
3659 -> 3571;
3659 -> 3594;
3660 -> 945;
3660 -> 939;
3661 -> 3660;
3661 -> 3571;
3661 -> 939;
3662 -> 939;
3663 -> 3112;
3663 -> 3661;
3664 -> 3663;
3664 -> 3661;
3665 -> 3661;
3666 -> 3661;
3667 -> 3177;
3667 -> 3666;
3667 -> 939;
3668 -> 3179;
3668 -> 3667;
3668 -> 3666;
3668 -> 939;
3669 -> 945;
3669 -> 939;
3670 -> 3669;
3670 -> 939;
3671 -> 3670;
3671 -> 3669;
3671 -> 3666;
3671 -> 939;
3672 -> 939;
3673 -> 3207;
3673 -> 3671;
3673 -> 939;
3674 -> 3214;
3674 -> 3671;
3674 -> 939;
3675 -> 3674;
3675 -> 3217;
3676 -> 3223;
3676 -> 3671;
3676 -> 939;
3677 -> 3676;
3677 -> 3226;
3678 -> 3677;
3678 -> 3226;
3679 -> 3678;
3679 -> 3231;
3680 -> 3671;
3680 -> 3234;
3681 -> 3680;
3681 -> 3231;
3682 -> 3671;
3682 -> 3231;
3683 -> 3682;
3684 -> 3681;
3684 -> 3683;
3684 -> 3682;
3685 -> 3684;
3686 -> 3273;
3686 -> 3671;
3686 -> 939;
3687 -> 3284;
3687 -> 3671;
3687 -> 3283;
3688 -> 3284;
3688 -> 3671;
3688 -> 3283;
3689 -> 3688;
3689 -> 3281;
3690 -> 3671;
3690 -> 939;
3691 -> 3671;
3691 -> 3300;
3692 -> 3691;
3692 -> 3299;
3693 -> 3671;
3693 -> 939;
3694 -> 3693;
3694 -> 3292;
3694 -> 3671;
3694 -> 939;
3695 -> 3295;
3695 -> 3671;
3696 -> 3452;
3696 -> 3671;
3696 -> 939;
3697 -> 3452;
3697 -> 3671;
3697 -> 3696;
3698 -> 3452;
3698 -> 3671;
3698 -> 0;
3698 -> 939;
3699 -> 3452;
3699 -> 3671;
3699 -> 939;
3700 -> 3456;
3700 -> 3699;
3701 -> 3700;
3702 -> 3700;
3703 -> 3452;
3703 -> 3671;
3703 -> 3700;
3704 -> 3700;
3705 -> 3703;
3705 -> 3704;
3706 -> 3704;
3707 -> 3705;
3707 -> 3706;
3708 -> 3706;
3709 -> 3707;
3709 -> 3708;
3709 -> 3706;
3710 -> 3706;
3711 -> 3710;
3711 -> 3704;
3712 -> 3452;
3712 -> 3671;
3712 -> 3711;
3713 -> 3452;
3713 -> 3671;
3713 -> 939;
3714 -> 3468;
3714 -> 3671;
3714 -> 939;
3715 -> 3412;
3715 -> 3671;
3716 -> 3413;
3716 -> 3671;
3717 -> 3715;
3717 -> 3671;
3718 -> 3716;
3718 -> 3671;
3719 -> 3671;
3720 -> 3671;
3721 -> 3671;
3722 -> 3718;
3722 -> 3721;
3722 -> 3671;
3723 -> 3671;
3724 -> 3671;
3724 -> 3723;
3725 -> 3671;
3725 -> 0;
3726 -> 3671;
3727 -> 3720;
3727 -> 3726;
3728 -> 3727;
3729 -> 3727;
3730 -> 3671;
3730 -> 3727;
3731 -> 3727;
3732 -> 3730;
3732 -> 3731;
3733 -> 3731;
3734 -> 3732;
3734 -> 3733;
3735 -> 3733;
3736 -> 3734;
3736 -> 3735;
3736 -> 3733;
3737 -> 3733;
3738 -> 3737;
3738 -> 3731;
3739 -> 3671;
3739 -> 3738;
3740 -> 3671;
3741 -> 3468;
3741 -> 3714;
3742 -> 3273;
3742 -> 3741;
3742 -> 939;
3743 -> 3284;
3743 -> 3741;
3743 -> 3283;
3744 -> 3284;
3744 -> 3741;
3744 -> 3283;
3745 -> 3744;
3745 -> 3281;
3746 -> 3741;
3746 -> 939;
3747 -> 3741;
3747 -> 3300;
3748 -> 3747;
3748 -> 3299;
3749 -> 3741;
3749 -> 939;
3750 -> 3749;
3750 -> 3292;
3750 -> 3741;
3750 -> 939;
3751 -> 3412;
3751 -> 3741;
3752 -> 3413;
3752 -> 3741;
3753 -> 3751;
3753 -> 3741;
3754 -> 3752;
3754 -> 3741;
3755 -> 3741;
3756 -> 3741;
3757 -> 3741;
3758 -> 3754;
3758 -> 3757;
3758 -> 3741;
3759 -> 3741;
3760 -> 3741;
3760 -> 3759;
3761 -> 3741;
3761 -> 0;
3762 -> 3741;
3763 -> 3756;
3763 -> 3762;
3764 -> 3763;
3765 -> 3763;
3766 -> 3741;
3766 -> 3763;
3767 -> 3763;
3768 -> 3766;
3768 -> 3767;
3769 -> 3767;
3770 -> 3768;
3770 -> 3769;
3771 -> 3769;
3772 -> 3770;
3772 -> 3771;
3772 -> 3769;
3773 -> 3769;
3774 -> 3773;
3774 -> 3767;
3775 -> 3741;
3775 -> 3774;
3776 -> 3741;
3777 -> 3295;
3777 -> 3741;
3778 -> 3756;
3778 -> 3762;
3779 -> 3741;
3779 -> 3762;
3780 -> 3741;
3780 -> 3779;
3781 -> 3779;
3782 -> 3780;
3782 -> 3781;
3783 -> 3741;
3783 -> 3781;
3784 -> 3782;
3784 -> 3781;
3785 -> 3781;
3786 -> 3783;
3786 -> 3741;
3786 -> 3784;
3786 -> 3785;
3786 -> 3781;
3787 -> 3452;
3787 -> 3786;
3787 -> 939;
3788 -> 3452;
3788 -> 3786;
3788 -> 3787;
3789 -> 3452;
3789 -> 3786;
3789 -> 0;
3789 -> 939;
3790 -> 3456;
3790 -> 3786;
3791 -> 3452;
3791 -> 3786;
3791 -> 939;
3792 -> 3412;
3792 -> 3786;
3793 -> 3413;
3793 -> 3786;
3794 -> 3792;
3794 -> 3786;
3795 -> 3793;
3795 -> 3786;
3796 -> 3786;
3797 -> 3786;
3798 -> 3786;
3799 -> 3795;
3799 -> 3798;
3799 -> 3786;
3800 -> 3786;
3801 -> 3786;
3801 -> 3800;
3802 -> 3786;
3802 -> 0;
3803 -> 3797;
3803 -> 3786;
3804 -> 3803;
3805 -> 3803;
3806 -> 3786;
3806 -> 3803;
3807 -> 3803;
3808 -> 3806;
3808 -> 3807;
3809 -> 3807;
3810 -> 3808;
3810 -> 3809;
3811 -> 3809;
3812 -> 3810;
3812 -> 3811;
3812 -> 3809;
3813 -> 3809;
3814 -> 3813;
3814 -> 3807;
3815 -> 3786;
3815 -> 3814;
3816 -> 3786;
3817 -> 3273;
3817 -> 3786;
3817 -> 939;
3818 -> 3284;
3818 -> 3786;
3818 -> 3283;
3819 -> 3284;
3819 -> 3786;
3819 -> 3283;
3820 -> 3819;
3820 -> 3281;
3821 -> 3786;
3821 -> 939;
3822 -> 3786;
3822 -> 3300;
3823 -> 3822;
3823 -> 3299;
3824 -> 3786;
3824 -> 939;
3825 -> 3824;
3825 -> 3292;
3825 -> 3786;
3825 -> 939;
3826 -> 3295;
3826 -> 3786;
3827 -> 3797;
3827 -> 3786;
3828 -> 945;
3828 -> 939;
3829 -> 939;
3830 -> 3828;
3830 -> 3829;
3831 -> 3829;
3832 -> 3830;
3832 -> 3831;
3833 -> 3832;
3833 -> 3786;
3833 -> 3831;
3834 -> 3832;
3834 -> 3786;
3834 -> 3831;
3835 -> 3834;
3835 -> 3829;
3836 -> 945;
3836 -> 939;
3837 -> 945;
3837 -> 939;
3838 -> 939;
3839 -> 3837;
3839 -> 3838;
3840 -> 939;
3841 -> 945;
3841 -> 939;
3842 -> 3383;
3842 -> 3786;
3842 -> 3382;
3843 -> 3842;
3843 -> 3786;
3843 -> 3382;
3844 -> 3383;
3844 -> 3786;
3844 -> 3382;
3845 -> 3386;
3845 -> 3844;
3846 -> 3383;
3846 -> 3786;
3846 -> 3845;
3847 -> 3842;
3847 -> 3845;
3848 -> 3845;
3849 -> 3847;
3849 -> 3848;
3850 -> 3848;
3851 -> 3849;
3851 -> 3850;
3851 -> 3848;
3852 -> 3851;
3853 -> 3849;
3853 -> 3786;
3853 -> 3851;
3854 -> 3848;
3855 -> 3854;
3855 -> 3845;
3856 -> 3846;
3856 -> 3855;
3856 -> 3845;
3857 -> 3383;
3857 -> 3856;
3858 -> 3383;
3858 -> 3786;
3858 -> 3856;
3859 -> 3387;
3859 -> 3786;
3859 -> 3407;
3859 -> 3382;
3860 -> 3565;
3860 -> 0;
3860 -> 3786;
3861 -> 3790;
3862 -> 3790;
3863 -> 3452;
3863 -> 3786;
3863 -> 3790;
3864 -> 3790;
3865 -> 3863;
3865 -> 3864;
3866 -> 3864;
3867 -> 3865;
3867 -> 3866;
3868 -> 3866;
3869 -> 3867;
3869 -> 3868;
3869 -> 3866;
3870 -> 3866;
3871 -> 3870;
3871 -> 3864;
3872 -> 3452;
3872 -> 3786;
3872 -> 3871;
3873 -> 945;
3873 -> 939;
3874 -> 945;
3874 -> 939;
3875 -> 3874;
3875 -> 3786;
3875 -> 939;
3876 -> 3874;
3876 -> 3786;
3876 -> 939;
3877 -> 3876;
3878 -> 3874;
3878 -> 3877;
3879 -> 3878;
3879 -> 3786;
3879 -> 3877;
3880 -> 3877;
3881 -> 3878;
3881 -> 3786;
3881 -> 3877;
3882 -> 3879;
3882 -> 3786;
3882 -> 3881;
3883 -> 3881;
3884 -> 3883;
3884 -> 3882;
3884 -> 3786;
3884 -> 3881;
3885 -> 3878;
3885 -> 3786;
3885 -> 3877;
3886 -> 3877;
3887 -> 3879;
3887 -> 3786;
3887 -> 3886;
3888 -> 3887;
3888 -> 3877;
3889 -> 3879;
3889 -> 3877;
3890 -> 3880;
3890 -> 3877;
3891 -> 3877;
3892 -> 3889;
3892 -> 3891;
3893 -> 3890;
3893 -> 3891;
3894 -> 3891;
3895 -> 3894;
3895 -> 3891;
3896 -> 3892;
3896 -> 3786;
3896 -> 3891;
3897 -> 3893;
3897 -> 3891;
3898 -> 3891;
3899 -> 3895;
3899 -> 3898;
3900 -> 3896;
3900 -> 3898;
3901 -> 3897;
3901 -> 3898;
3902 -> 3898;
3903 -> 3900;
3903 -> 3902;
3903 -> 3898;
3904 -> 3891;
3905 -> 3891;
3906 -> 3892;
3906 -> 3896;
3906 -> 3905;
3907 -> 3906;
3907 -> 3891;
3908 -> 3894;
3908 -> 3907;
3909 -> 3892;
3909 -> 3896;
3909 -> 3907;
3910 -> 3893;
3910 -> 3907;
3911 -> 3907;
3912 -> 3908;
3912 -> 3911;
3913 -> 3909;
3913 -> 3911;
3914 -> 3910;
3914 -> 3911;
3915 -> 3911;
3916 -> 3913;
3916 -> 3915;
3916 -> 3911;
3917 -> 3907;
3918 -> 3894;
3918 -> 3891;
3919 -> 3918;
3919 -> 3877;
3920 -> 3880;
3920 -> 3877;
3921 -> 3920;
3921 -> 3876;
3922 -> 3921;
3922 -> 3874;
3922 -> 3876;
3923 -> 3876;
3924 -> 3874;
3924 -> 3909;
3924 -> 3922;
3924 -> 3920;
3924 -> 3923;
3924 -> 3876;
3925 -> 3874;
3925 -> 3909;
3925 -> 3922;
3925 -> 939;
3926 -> 945;
3926 -> 939;
3927 -> 945;
3927 -> 939;
3928 -> 945;
3928 -> 939;
3929 -> 3928;
3929 -> 3925;
3929 -> 939;
3930 -> 3929;
3930 -> 3925;
3930 -> 939;
3931 -> 939;
3932 -> 3931;
3932 -> 3930;
3932 -> 939;
3933 -> 945;
3933 -> 939;
3934 -> 0;
3934 -> 939;
3935 -> 945;
3935 -> 3934;
3935 -> 3925;
3935 -> 0;
3935 -> 914;
3936 -> 939;
3937 -> 3936;
3938 -> 3937;
3939 -> 945;
3939 -> 939;
3940 -> 939;
3941 -> 945;
3941 -> 3940;
3941 -> 3935;
3941 -> 914;
3942 -> 945;
3942 -> 939;
3943 -> 939;
3944 -> 3942;
3944 -> 3943;
3945 -> 3944;
3945 -> 3941;
3945 -> 3943;
3946 -> 3944;
3946 -> 3941;
3946 -> 3943;
3947 -> 3946;
3947 -> 939;
3948 -> 945;
3948 -> 939;
3949 -> 945;
3949 -> 939;
3950 -> 3949;
3950 -> 3947;
3950 -> 939;
3951 -> 0;
3951 -> 939;
3952 -> 3949;
3952 -> 3947;
3952 -> 939;
3953 -> 939;
3954 -> 3951;
3954 -> 3953;
3955 -> 3952;
3955 -> 3953;
3956 -> 3949;
3956 -> 3953;
3957 -> 3954;
3957 -> 3953;
3958 -> 3953;
3959 -> 3948;
3959 -> 3957;
3959 -> 3958;
3959 -> 3953;
3960 -> 3953;
3961 -> 3948;
3961 -> 3960;
3961 -> 3953;
3962 -> 3955;
3962 -> 3953;
3963 -> 3953;
3964 -> 3948;
3964 -> 3962;
3964 -> 3963;
3964 -> 3953;
3965 -> 3953;
3966 -> 3948;
3966 -> 3965;
3966 -> 3953;
3967 -> 939;
3968 -> 939;
3969 -> 3949;
3969 -> 3968;
3970 -> 3969;
3970 -> 3947;
3970 -> 3968;
3971 -> 3970;
3971 -> 939;
3972 -> 939;
3973 -> 3949;
3973 -> 3972;
3974 -> 3973;
3974 -> 3947;
3974 -> 3972;
3975 -> 3974;
3975 -> 939;
3976 -> 939;
3977 -> 3949;
3977 -> 3976;
3978 -> 3977;
3978 -> 3947;
3978 -> 3976;
3979 -> 3978;
3979 -> 939;
3980 -> 939;
3981 -> 3949;
3981 -> 3980;
3982 -> 3980;
3983 -> 3981;
3983 -> 3982;
3984 -> 3982;
3985 -> 3983;
3985 -> 3947;
3985 -> 3984;
3986 -> 3984;
3987 -> 3985;
3987 -> 3980;
3988 -> 3987;
3988 -> 3980;
3989 -> 3987;
3989 -> 3980;
3990 -> 3989;
3990 -> 939;
3991 -> 3990;
3991 -> 939;
3992 -> 3565;
3992 -> 0;
3992 -> 3991;
3993 -> 3452;
3993 -> 3991;
3993 -> 939;
3994 -> 3452;
3994 -> 3991;
3994 -> 3993;
3995 -> 3452;
3995 -> 3991;
3995 -> 0;
3995 -> 939;
3996 -> 3456;
3996 -> 3991;
3997 -> 3452;
3997 -> 3991;
3997 -> 939;
3998 -> 3412;
3998 -> 3991;
3999 -> 3413;
3999 -> 3991;
4000 -> 3998;
4000 -> 3991;
4001 -> 3999;
4001 -> 3991;
4002 -> 3991;
4003 -> 3991;
4004 -> 3991;
4005 -> 4001;
4005 -> 4004;
4005 -> 3991;
4006 -> 3991;
4007 -> 3991;
4007 -> 4006;
4008 -> 3991;
4008 -> 0;
4009 -> 4003;
4009 -> 3991;
4010 -> 4009;
4011 -> 4009;
4012 -> 3991;
4012 -> 4009;
4013 -> 4009;
4014 -> 4012;
4014 -> 4013;
4015 -> 4013;
4016 -> 4014;
4016 -> 4015;
4017 -> 4015;
4018 -> 4016;
4018 -> 4017;
4018 -> 4015;
4019 -> 4015;
4020 -> 4019;
4020 -> 4013;
4021 -> 3991;
4021 -> 4020;
4022 -> 3991;
4023 -> 3456;
4023 -> 3991;
4024 -> 945;
4024 -> 939;
4025 -> 939;
4026 -> 4024;
4026 -> 4025;
4026 -> 939;
4027 -> 4026;
4028 -> 4024;
4028 -> 3991;
4028 -> 4027;
4028 -> 4026;
4029 -> 4028;
4030 -> 4029;
4030 -> 3492;
4031 -> 4030;
4031 -> 4029;
4031 -> 3492;
4032 -> 4030;
4032 -> 4029;
4032 -> 4031;
4033 -> 4032;
4033 -> 4031;
4034 -> 4031;
4035 -> 4033;
4035 -> 4034;
4036 -> 4035;
4036 -> 4029;
4036 -> 0;
4036 -> 4034;
4037 -> 4035;
4037 -> 4029;
4037 -> 4034;
4038 -> 4034;
4039 -> 4037;
4039 -> 4038;
4040 -> 4039;
4041 -> 3485;
4041 -> 939;
4042 -> 939;
4043 -> 4041;
4043 -> 4042;
4044 -> 3486;
4044 -> 4042;
4045 -> 4042;
4046 -> 4043;
4046 -> 4042;
4047 -> 4046;
4047 -> 4029;
4047 -> 4042;
4048 -> 4047;
4049 -> 4047;
4050 -> 4048;
4050 -> 4049;
4051 -> 4044;
4051 -> 4049;
4052 -> 4049;
4053 -> 4049;
4054 -> 4050;
4054 -> 4049;
4055 -> 4052;
4055 -> 4049;
4056 -> 4051;
4056 -> 4040;
4056 -> 4054;
4056 -> 4055;
4056 -> 4029;
4056 -> 4049;
4057 -> 4056;
4058 -> 4045;
4058 -> 4057;
4058 -> 4056;
4058 -> 4047;
4059 -> 4058;
4060 -> 4045;
4060 -> 4058;
4060 -> 4042;
4061 -> 3412;
4061 -> 4060;
4062 -> 3413;
4062 -> 4060;
4063 -> 4061;
4063 -> 4060;
4064 -> 4062;
4064 -> 4060;
4065 -> 4060;
4066 -> 4060;
4067 -> 4060;
4068 -> 4064;
4068 -> 4067;
4068 -> 4060;
4069 -> 4060;
4070 -> 4060;
4070 -> 4069;
4071 -> 4060;
4071 -> 0;
4072 -> 4066;
4072 -> 4060;
4073 -> 4072;
4074 -> 4072;
4075 -> 4060;
4075 -> 4072;
4076 -> 4072;
4077 -> 4075;
4077 -> 4076;
4078 -> 4076;
4079 -> 4077;
4079 -> 4078;
4080 -> 4078;
4081 -> 4080;
4081 -> 4076;
4082 -> 4060;
4082 -> 4081;
4083 -> 4060;
4084 -> 3565;
4084 -> 0;
4084 -> 4060;
4085 -> 945;
4085 -> 939;
4086 -> 945;
4086 -> 939;
4087 -> 4086;
4087 -> 4060;
4087 -> 939;
4088 -> 4085;
4088 -> 4060;
4088 -> 939;
4089 -> 939;
4090 -> 4087;
4090 -> 4089;
4091 -> 4088;
4091 -> 4089;
4092 -> 4088;
4092 -> 4089;
4093 -> 4085;
4093 -> 4060;
4093 -> 4089;
4094 -> 4089;
4095 -> 4092;
4095 -> 4094;
4095 -> 4089;
4096 -> 4091;
4096 -> 4090;
4097 -> 4092;
4097 -> 4090;
4098 -> 4096;
4098 -> 4090;
4099 -> 4097;
4099 -> 4090;
4100 -> 4090;
4101 -> 4090;
4102 -> 4093;
4102 -> 4090;
4103 -> 4090;
4104 -> 4099;
4104 -> 4103;
4104 -> 4090;
4105 -> 4090;
4106 -> 4090;
4106 -> 4105;
4107 -> 4090;
4107 -> 0;
4108 -> 4101;
4108 -> 4090;
4109 -> 4108;
4110 -> 4108;
4111 -> 4090;
4111 -> 4108;
4112 -> 4108;
4113 -> 4111;
4113 -> 4112;
4114 -> 4112;
4115 -> 4113;
4115 -> 4114;
4116 -> 4114;
4117 -> 4116;
4117 -> 4112;
4118 -> 4090;
4118 -> 4117;
4119 -> 4090;
4120 -> 3565;
4120 -> 0;
4120 -> 4102;
4121 -> 945;
4121 -> 939;
4122 -> 4121;
4122 -> 4102;
4122 -> 939;
4123 -> 945;
4123 -> 939;
4124 -> 4123;
4124 -> 4122;
4124 -> 0;
4124 -> 939;
4125 -> 945;
4125 -> 939;
4126 -> 4125;
4126 -> 4124;
4126 -> 939;
4127 -> 3565;
4127 -> 0;
4127 -> 4126;
4128 -> 4126;
4128 -> 4089;
4129 -> 4126;
4129 -> 4089;
4130 -> 4129;
4130 -> 4094;
4130 -> 4089;
4131 -> 4128;
4131 -> 4126;
4132 -> 4129;
4132 -> 4126;
4133 -> 4126;
4134 -> 4126;
4135 -> 4126;
4136 -> 4132;
4136 -> 4135;
4136 -> 4126;
4137 -> 4126;
4138 -> 4126;
4138 -> 4137;
4139 -> 4126;
4139 -> 0;
4140 -> 4134;
4140 -> 4126;
4141 -> 4140;
4142 -> 4140;
4143 -> 4126;
4143 -> 4140;
4144 -> 4140;
4145 -> 4143;
4145 -> 4144;
4146 -> 4144;
4147 -> 4145;
4147 -> 4146;
4148 -> 4146;
4149 -> 4148;
4149 -> 4144;
4150 -> 4126;
4150 -> 4149;
4151 -> 4126;
4152 -> 3452;
4152 -> 4126;
4152 -> 939;
4153 -> 3452;
4153 -> 4126;
4153 -> 4152;
4154 -> 3452;
4154 -> 4126;
4154 -> 0;
4154 -> 939;
4155 -> 3456;
4155 -> 4126;
4156 -> 3412;
4156 -> 4126;
4157 -> 3413;
4157 -> 4126;
4158 -> 4156;
4158 -> 4126;
4159 -> 4157;
4159 -> 4126;
4160 -> 4159;
4160 -> 4135;
4160 -> 4126;
4161 -> 4126;
4162 -> 3456;
4162 -> 4126;
4163 -> 3452;
4163 -> 4126;
4163 -> 939;
4164 -> 3411;
4164 -> 4126;
4165 -> 4126;
4166 -> 4164;
4166 -> 4165;
4167 -> 4166;
4167 -> 4126;
4167 -> 4165;
4168 -> 4166;
4168 -> 4126;
4168 -> 4165;
4169 -> 939;
4170 -> 945;
4170 -> 4169;
4170 -> 4168;
4170 -> 914;
4171 -> 3452;
4171 -> 4170;
4171 -> 939;
4172 -> 3452;
4172 -> 4170;
4172 -> 4171;
4173 -> 3452;
4173 -> 4170;
4173 -> 0;
4173 -> 939;
4174 -> 3456;
4174 -> 4170;
4175 -> 4170;
4176 -> 3456;
4176 -> 4170;
4177 -> 3452;
4177 -> 4170;
4177 -> 939;
4178 -> 4170;
4179 -> 4170;
4180 -> 4179;
4180 -> 4178;
4180 -> 4170;
4181 -> 3412;
4181 -> 4170;
4182 -> 3413;
4182 -> 4170;
4183 -> 4181;
4183 -> 4170;
4184 -> 4182;
4184 -> 4170;
4185 -> 4170;
4186 -> 4170;
4187 -> 4170;
4188 -> 4184;
4188 -> 4187;
4188 -> 4170;
4189 -> 4170;
4190 -> 4170;
4190 -> 4189;
4191 -> 4170;
4191 -> 0;
4192 -> 4186;
4192 -> 4170;
4193 -> 4192;
4194 -> 4192;
4195 -> 4170;
4195 -> 4192;
4196 -> 4192;
4197 -> 4195;
4197 -> 4196;
4198 -> 4196;
4199 -> 4197;
4199 -> 4198;
4200 -> 4198;
4201 -> 4200;
4201 -> 4196;
4202 -> 4170;
4202 -> 4201;
4203 -> 4170;
4204 -> 3565;
4204 -> 0;
4204 -> 4170;
4205 -> 945;
4205 -> 939;
4206 -> 4205;
4206 -> 4170;
4206 -> 939;
4207 -> 945;
4207 -> 939;
4208 -> 4207;
4208 -> 4206;
4208 -> 939;
4209 -> 3874;
4209 -> 4208;
4209 -> 939;
4210 -> 945;
4210 -> 939;
4211 -> 4210;
4211 -> 4208;
4211 -> 939;
4212 -> 0;
4212 -> 4211;
4213 -> 3412;
4213 -> 4212;
4214 -> 3413;
4214 -> 4212;
4215 -> 4213;
4215 -> 4212;
4216 -> 4214;
4216 -> 4212;
4217 -> 4212;
4218 -> 4212;
4219 -> 4212;
4220 -> 4216;
4220 -> 4219;
4220 -> 4212;
4221 -> 4212;
4222 -> 4212;
4222 -> 4221;
4223 -> 4212;
4223 -> 0;
4224 -> 4218;
4224 -> 4212;
4225 -> 4224;
4226 -> 4224;
4227 -> 4212;
4227 -> 4224;
4228 -> 4224;
4229 -> 4227;
4229 -> 4228;
4230 -> 4228;
4231 -> 4229;
4231 -> 4230;
4232 -> 4230;
4233 -> 4232;
4233 -> 4228;
4234 -> 4212;
4234 -> 4233;
4235 -> 4212;
4236 -> 3565;
4236 -> 0;
4236 -> 4212;
4237 -> 3452;
4237 -> 4212;
4237 -> 939;
4238 -> 3452;
4238 -> 4212;
4238 -> 4237;
4239 -> 3452;
4239 -> 4212;
4239 -> 0;
4239 -> 939;
4240 -> 3456;
4240 -> 4212;
4241 -> 3452;
4241 -> 4212;
4241 -> 939;
4242 -> 3456;
4242 -> 4212;
4243 -> 4218;
4243 -> 4212;
4244 -> 4210;
4244 -> 4212;
4244 -> 0;
4245 -> 0;
4245 -> 4244;
4246 -> 3412;
4246 -> 4245;
4247 -> 3413;
4247 -> 4245;
4248 -> 4246;
4248 -> 4245;
4249 -> 4247;
4249 -> 4245;
4250 -> 4245;
4251 -> 4245;
4252 -> 4245;
4253 -> 4249;
4253 -> 4252;
4253 -> 4245;
4254 -> 4245;
4255 -> 4245;
4255 -> 4254;
4256 -> 4245;
4256 -> 0;
4257 -> 4251;
4257 -> 4245;
4258 -> 4257;
4259 -> 4257;
4260 -> 4245;
4260 -> 4257;
4261 -> 4257;
4262 -> 4260;
4262 -> 4261;
4263 -> 4261;
4264 -> 4262;
4264 -> 4263;
4265 -> 4263;
4266 -> 4265;
4266 -> 4261;
4267 -> 4245;
4267 -> 4266;
4268 -> 4245;
4269 -> 3565;
4269 -> 0;
4269 -> 4245;
4270 -> 4210;
4270 -> 4245;
4271 -> 0;
4271 -> 4270;
4272 -> 3412;
4272 -> 4271;
4273 -> 3413;
4273 -> 4271;
4274 -> 4272;
4274 -> 4271;
4275 -> 4273;
4275 -> 4271;
4276 -> 4271;
4277 -> 4271;
4278 -> 4271;
4279 -> 4275;
4279 -> 4278;
4279 -> 4271;
4280 -> 4271;
4281 -> 4271;
4281 -> 4280;
4282 -> 4271;
4282 -> 0;
4283 -> 4277;
4283 -> 4271;
4284 -> 4283;
4285 -> 4283;
4286 -> 4271;
4286 -> 4283;
4287 -> 4283;
4288 -> 4286;
4288 -> 4287;
4289 -> 4287;
4290 -> 4288;
4290 -> 4289;
4291 -> 4289;
4292 -> 4291;
4292 -> 4287;
4293 -> 4271;
4293 -> 4292;
4294 -> 4271;
4295 -> 3565;
4295 -> 0;
4295 -> 4271;
4296 -> 945;
4296 -> 939;
4297 -> 4296;
4297 -> 4271;
4297 -> 939;
4298 -> 3452;
4298 -> 4297;
4298 -> 939;
4299 -> 3452;
4299 -> 4297;
4299 -> 4298;
4300 -> 3452;
4300 -> 4297;
4300 -> 0;
4300 -> 939;
4301 -> 3456;
4301 -> 4297;
4302 -> 4301;
4303 -> 4301;
4304 -> 3452;
4304 -> 4297;
4304 -> 4301;
4305 -> 4301;
4306 -> 4304;
4306 -> 4305;
4307 -> 4305;
4308 -> 4306;
4308 -> 4307;
4309 -> 4307;
4310 -> 4309;
4310 -> 4305;
4311 -> 3452;
4311 -> 4297;
4311 -> 4310;
4312 -> 3452;
4312 -> 4297;
4312 -> 939;
4313 -> 4297;
4313 -> 0;
4313 -> 3357;
4314 -> 4297;
4315 -> 4314;
4315 -> 4297;
4316 -> 4297;
4316 -> 3357;
4317 -> 3383;
4317 -> 4297;
4317 -> 3382;
4318 -> 4317;
4318 -> 4297;
4318 -> 3382;
4319 -> 3383;
4319 -> 4297;
4319 -> 3382;
4320 -> 3386;
4320 -> 4319;
4321 -> 3383;
4321 -> 4297;
4321 -> 4320;
4322 -> 4317;
4322 -> 4320;
4323 -> 4320;
4324 -> 4322;
4324 -> 4323;
4325 -> 4324;
4325 -> 4297;
4326 -> 4323;
4327 -> 4326;
4327 -> 4320;
4328 -> 4321;
4328 -> 4327;
4328 -> 4320;
4329 -> 3383;
4329 -> 4328;
4330 -> 3383;
4330 -> 4297;
4330 -> 4328;
4331 -> 3387;
4331 -> 4297;
4331 -> 3407;
4331 -> 3382;
4332 -> 4297;
4333 -> 4297;
4334 -> 4333;
4334 -> 4332;
4334 -> 4297;
4335 -> 3412;
4335 -> 4297;
4336 -> 3413;
4336 -> 4297;
4337 -> 4335;
4337 -> 4297;
4338 -> 4336;
4338 -> 4297;
4339 -> 4297;
4340 -> 4297;
4341 -> 4297;
4342 -> 4338;
4342 -> 4341;
4342 -> 4297;
4343 -> 4297;
4344 -> 4297;
4344 -> 4343;
4345 -> 4297;
4345 -> 0;
4346 -> 4340;
4346 -> 4297;
4347 -> 4346;
4348 -> 4346;
4349 -> 4297;
4349 -> 4346;
4350 -> 4346;
4351 -> 4349;
4351 -> 4350;
4352 -> 4350;
4353 -> 4351;
4353 -> 4352;
4354 -> 4352;
4355 -> 4354;
4355 -> 4350;
4356 -> 4297;
4356 -> 4355;
4357 -> 4297;
4358 -> 3565;
4358 -> 0;
4358 -> 4297;
4359 -> 0;
4359 -> 4358;
4360 -> 4359;
4360 -> 3566;
4360 -> 4297;
4360 -> 4358;
4361 -> 4358;
4362 -> 4361;
4363 -> 4360;
4363 -> 4362;
4364 -> 4363;
4364 -> 4361;
4365 -> 3383;
4365 -> 4360;
4365 -> 3382;
4366 -> 4365;
4366 -> 4360;
4366 -> 3382;
4367 -> 3383;
4367 -> 4360;
4367 -> 3382;
4368 -> 3386;
4368 -> 4367;
4369 -> 3383;
4369 -> 4360;
4369 -> 4368;
4370 -> 4365;
4370 -> 4368;
4371 -> 4368;
4372 -> 4370;
4372 -> 4371;
4373 -> 4372;
4373 -> 4360;
4374 -> 4371;
4375 -> 4374;
4375 -> 4368;
4376 -> 4369;
4376 -> 4375;
4376 -> 4368;
4377 -> 3383;
4377 -> 4376;
4378 -> 3383;
4378 -> 4360;
4378 -> 4376;
4379 -> 3387;
4379 -> 4360;
4379 -> 3407;
4379 -> 3382;
4380 -> 3452;
4380 -> 4360;
4380 -> 939;
4381 -> 3452;
4381 -> 4360;
4381 -> 4380;
4382 -> 3452;
4382 -> 4360;
4382 -> 0;
4382 -> 939;
4383 -> 3456;
4383 -> 4360;
4384 -> 3452;
4384 -> 4360;
4384 -> 939;
4385 -> 3412;
4385 -> 4360;
4386 -> 3413;
4386 -> 4360;
4387 -> 4385;
4387 -> 4360;
4388 -> 4386;
4388 -> 4360;
4389 -> 4360;
4390 -> 4360;
4391 -> 4360;
4392 -> 4388;
4392 -> 4391;
4392 -> 4360;
4393 -> 4360;
4394 -> 4360;
4394 -> 4393;
4395 -> 4360;
4395 -> 0;
4396 -> 4390;
4396 -> 4360;
4397 -> 4396;
4398 -> 4396;
4399 -> 4360;
4399 -> 4396;
4400 -> 4396;
4401 -> 4399;
4401 -> 4400;
4402 -> 4400;
4403 -> 4401;
4403 -> 4402;
4404 -> 4402;
4405 -> 4404;
4405 -> 4400;
4406 -> 4360;
4406 -> 4405;
4407 -> 4360;
4408 -> 4360;
4409 -> 4360;
4410 -> 4409;
4410 -> 4408;
4410 -> 4360;
4411 -> 4403;
4411 -> 4360;
4412 -> 3273;
4412 -> 4360;
4412 -> 939;
4413 -> 3284;
4413 -> 4360;
4413 -> 3283;
4414 -> 3284;
4414 -> 4360;
4414 -> 3283;
4415 -> 4414;
4415 -> 3281;
4416 -> 4360;
4416 -> 939;
4417 -> 4360;
4417 -> 3300;
4418 -> 4417;
4418 -> 3299;
4419 -> 4360;
4419 -> 939;
4420 -> 4419;
4420 -> 3292;
4420 -> 4360;
4420 -> 939;
4421 -> 3295;
4421 -> 4360;
4422 -> 3108;
4422 -> 4360;
4422 -> 3107;
4423 -> 3108;
4423 -> 4360;
4423 -> 3107;
4424 -> 4423;
4424 -> 3105;
4425 -> 914;
4426 -> 927;
4426 -> 4425;
4426 -> 914;
4427 -> 4360;
4427 -> 914;
4428 -> 917;
4428 -> 4427;
4428 -> 4360;
4428 -> 914;
4429 -> 923;
4429 -> 914;
4430 -> 4429;
4430 -> 4428;
4430 -> 914;
4431 -> 4360;
4431 -> 4430;
4431 -> 914;
4432 -> 4430;
4432 -> 4431;
4433 -> 924;
4433 -> 4431;
4434 -> 4431;
4435 -> 4431;
4436 -> 4432;
4436 -> 4435;
4437 -> 4433;
4437 -> 4435;
4438 -> 4434;
4438 -> 4435;
4439 -> 4436;
4439 -> 4438;
4439 -> 4435;
4440 -> 4437;
4440 -> 924;
4440 -> 4435;
4441 -> 4438;
4441 -> 4439;
4441 -> 4440;
4442 -> 4441;
4442 -> 4440;
4443 -> 0;
4443 -> 4440;
4444 -> 4440;
4445 -> 4442;
4445 -> 4444;
4445 -> 4440;
4446 -> 4442;
4446 -> 4445;
4447 -> 4445;
4448 -> 4446;
4448 -> 4447;
4448 -> 4445;
4449 -> 4448;
4449 -> 4445;
4450 -> 4445;
4451 -> 4449;
4451 -> 4450;
4452 -> 4438;
4452 -> 4450;
4453 -> 4451;
4453 -> 4446;
4453 -> 4448;
4453 -> 4450;
4454 -> 4453;
4454 -> 4450;
4455 -> 4451;
4455 -> 4446;
4455 -> 4448;
4455 -> 4450;
4456 -> 4454;
4456 -> 4450;
4457 -> 4450;
4458 -> 4453;
4458 -> 4450;
4459 -> 4454;
4459 -> 4450;
4460 -> 4459;
4460 -> 4456;
4460 -> 4450;
4461 -> 4460;
4461 -> 4438;
4461 -> 4435;
4462 -> 813;
4462 -> 812;
4463 -> 812;
4464 -> 4462;
4464 -> 4463;
4465 -> 4463;
4466 -> 4464;
4466 -> 4465;
4467 -> 4465;
4468 -> 4466;
4468 -> 4467;
4469 -> 4468;
4469 -> 4461;
4469 -> 4467;
4470 -> 4468;
4470 -> 4461;
4470 -> 4467;
4471 -> 4470;
4471 -> 4465;
4472 -> 4466;
4472 -> 4461;
4472 -> 4465;
4473 -> 4472;
4473 -> 812;
4474 -> 804;
4474 -> 4473;
4474 -> 803;
4475 -> 4474;
4475 -> 807;
4475 -> 803;
4476 -> 804;
4476 -> 4474;
4476 -> 803;
4477 -> 4476;
4477 -> 807;
4477 -> 803;
4478 -> 804;
4478 -> 4476;
4478 -> 803;
4479 -> 4478;
4479 -> 807;
4479 -> 803;
4480 -> 804;
4480 -> 4478;
4480 -> 803;
4481 -> 4480;
4481 -> 807;
4481 -> 803;
4482 -> 807;
4482 -> 773;
4482 -> 4480;
4482 -> 803;
4483 -> 803;
4484 -> 4482;
4484 -> 4483;
4485 -> 4483;
4486 -> 4485;
4487 -> 4486;
4488 -> 4484;
4488 -> 4487;
4489 -> 4488;
4489 -> 4486;
4490 -> 803;
4491 -> 799;
4491 -> 4484;
4491 -> 783;
4492 -> 4491;
4492 -> 791;
4492 -> 783;
4493 -> 789;
4493 -> 783;
4494 -> 799;
4494 -> 4493;
4494 -> 4491;
4494 -> 783;
4495 -> 783;
4496 -> 790;
4496 -> 4495;
4496 -> 783;
4497 -> 783;
4498 -> 784;
4498 -> 4497;
4498 -> 783;
4499 -> 4484;
4499 -> 4498;
4500 -> 786;
4500 -> 4498;
4501 -> 784;
4501 -> 4498;
4502 -> 799;
4502 -> 4499;
4502 -> 4500;
4502 -> 4501;
4502 -> 4494;
4502 -> 739;
4502 -> 4498;
4503 -> 785;
4503 -> 4498;
4504 -> 745;
4505 -> 745;
4506 -> 753;
4506 -> 4505;
4506 -> 745;
4507 -> 754;
4507 -> 4505;
4507 -> 745;
4508 -> 4506;
4508 -> 4507;
4508 -> 745;
4509 -> 761;
4509 -> 745;
4510 -> 4509;
4510 -> 708;
4511 -> 708;
4512 -> 732;
4512 -> 4511;
4512 -> 708;
4513 -> 4510;
4513 -> 4512;
4514 -> 4513;
4514 -> 708;
4515 -> 4513;
4515 -> 708;
4516 -> 4515;
4516 -> 670;
4517 -> 4516;
4517 -> 22;
4518 -> 4517;
4518 -> 1;
}