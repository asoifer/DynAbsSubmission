digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 713072"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 713073"];
3 [label="param BindingTests(this) 713074"];
4 [label="'C' 713075"];
5 [label="DefaultTypeName = 'C' 713076"];
6 [label="'M' 713077"];
7 [label="DefaultMethodName = 'M' 713078"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 713079"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 713080"];
10 [label="param CompilingTestBase(this) 713081"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 713082"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 713083"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 713084"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 713085"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 713086"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 713087"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 713088"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 713089"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 713090"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 713091"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 713092"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 713093"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 713094"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 713095"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 713096"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 713097"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 713098"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 713099"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 713100"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 713101"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 713102"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 713103"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 713104"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 713105"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 713106"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 713107"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 713108"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 713109"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 713110"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 713111"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 713112"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 713113"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 713114"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 713115"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 713116"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 713117"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 713118"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 713119"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 713120"];
50 [label="LazyThreadSafetyMode.PublicationOnly 713121"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 713122"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 713123"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 713124"];
54 [label="LazyThreadSafetyMode.PublicationOnly 713125"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 713126"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 713127"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 713128"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 713129"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 713130"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 713131"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 713132"];
62 [label="LazyThreadSafetyMode.PublicationOnly 713133"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 713134"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 713135"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 713136"];
66 [label="LazyThreadSafetyMode.PublicationOnly 713137"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 713138"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 713139"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 713140"];
70 [label="LazyThreadSafetyMode.PublicationOnly 713141"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 713142"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 713143"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 713144"];
74 [label="LazyThreadSafetyMode.PublicationOnly 713145"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713146"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713147"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 713148"];
78 [label="LazyThreadSafetyMode.PublicationOnly 713149"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713150"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713151"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 713152"];
82 [label="LazyThreadSafetyMode.PublicationOnly 713153"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713154"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713155"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 713156"];
86 [label="LazyThreadSafetyMode.PublicationOnly 713157"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713158"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713159"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 713160"];
90 [label="LazyThreadSafetyMode.PublicationOnly 713161"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713162"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713163"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 713164"];
94 [label="LazyThreadSafetyMode.PublicationOnly 713165"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713166"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713167"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 713168"];
98 [label="LazyThreadSafetyMode.PublicationOnly 713169"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713170"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713171"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 713172"];
102 [label="LazyThreadSafetyMode.PublicationOnly 713173"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 713174"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 713175"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 713176"];
106 [label="LazyThreadSafetyMode.PublicationOnly 713177"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 713178"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 713179"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 713180"];
110 [label="LazyThreadSafetyMode.PublicationOnly 713181"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713182"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713183"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 713184"];
114 [label="LazyThreadSafetyMode.PublicationOnly 713185"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713186"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713187"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 713188"];
118 [label="LazyThreadSafetyMode.PublicationOnly 713189"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713190"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713191"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 713192"];
122 [label="LazyThreadSafetyMode.PublicationOnly 713193"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713194"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713195"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 713196"];
126 [label="LazyThreadSafetyMode.PublicationOnly 713197"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 713198"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 713199"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 713200"];
130 [label="LazyThreadSafetyMode.PublicationOnly 713201"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713202"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713203"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 713204"];
134 [label="LazyThreadSafetyMode.PublicationOnly 713205"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713206"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713207"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 713208"];
138 [label="LazyThreadSafetyMode.PublicationOnly 713209"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713210"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713211"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 713212"];
142 [label="LazyThreadSafetyMode.PublicationOnly 713213"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713214"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713215"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 713216"];
146 [label="LazyThreadSafetyMode.PublicationOnly 713217"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713218"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713219"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 713220"];
150 [label="LazyThreadSafetyMode.PublicationOnly 713221"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713222"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713223"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 713224"];
154 [label="LazyThreadSafetyMode.PublicationOnly 713225"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713226"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713227"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 713228"];
158 [label="LazyThreadSafetyMode.PublicationOnly 713229"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713230"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713231"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 713232"];
162 [label="LazyThreadSafetyMode.PublicationOnly 713233"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713234"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713235"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 713236"];
166 [label="LazyThreadSafetyMode.PublicationOnly 713237"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713238"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713239"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 713240"];
170 [label="LazyThreadSafetyMode.PublicationOnly 713241"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713242"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713243"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 713244"];
174 [label="LazyThreadSafetyMode.PublicationOnly 713245"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713246"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713247"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 713248"];
178 [label="LazyThreadSafetyMode.PublicationOnly 713249"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713250"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 713251"];
181 [label="@'R:\\Invalid.dll' 713252"];
182 [label="fullPath: @'R:\\Invalid.dll' 713253"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 713254"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 713255"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 713256"];
186 [label="MscorlibRef_v4_0_30316_17626 713257"];
187 [label="Net451.mscorlib 713258"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 713259"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 713260"];
190 [label="'/*<bind>*/' 713261"];
191 [label="StartString = '/*<bind>*/' 713262"];
192 [label="'/*</bind>*/' 713263"];
193 [label="EndString = '/*</bind>*/' 713264"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 713265"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 713266"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 713267"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 713268"];
198 [label="param CSharpTestBase(this) 713269"];
199 [label="param CommonTestBase(this) 713270"];
200 [label="param TestBase(this) 713271"];
201 [label="_temp 713272"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 713273"];
203 [label="param RefReturningDelegateCreationBad(this) 713274"];
204 [label="var text = @'\ndelegate ref int D();\n\nclass C\n{\n    int field = 0;\n\n    int M()\n    {\n        return field;\n    }\n\n    void Test()\n    {\n        new D(M)();\n    }\n}\n'; 713275"];
205 [label="kind: SourceCodeKind.Regular 713276"];
206 [label="documentationMode: DocumentationMode.Parse 713277"];
207 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 713278"];
208 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 713279"];
209 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 713280"];
210 [label="SourceCodeKind.Script 713281"];
211 [label="Regular.WithKind(SourceCodeKind.Script) 713282"];
212 [label="Script = Regular.WithKind(SourceCodeKind.Script) 713283"];
213 [label="LanguageVersion.CSharp6 713284"];
214 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 713285"];
215 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 713286"];
216 [label="LanguageVersion.CSharp7 713287"];
217 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 713288"];
218 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 713289"];
219 [label="LanguageVersion.CSharp7_1 713290"];
220 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 713291"];
221 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 713292"];
222 [label="LanguageVersion.CSharp7_2 713293"];
223 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 713294"];
224 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 713295"];
225 [label="LanguageVersion.CSharp7_3 713296"];
226 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 713297"];
227 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 713298"];
228 [label="LanguageVersion.Default 713299"];
229 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 713300"];
230 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 713301"];
231 [label="LanguageVersion.Preview 713302"];
232 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 713303"];
233 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 713304"];
234 [label="LanguageVersion.CSharp8 713305"];
235 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 713306"];
236 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 713307"];
237 [label="LanguageVersion.CSharp9 713308"];
238 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 713309"];
239 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 713310"];
240 [label="DocumentationMode.Diagnose 713311"];
241 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 713312"];
242 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 713313"];
243 [label="Regular 713314"];
244 [label="'UseLegacyStrongNameProvider' 713315"];
245 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 713316"];
246 [label="param WithFeature(this CSharpParseOptions options) 713317"];
247 [label="param WithFeature(string feature) 713318"];
248 [label="param WithFeature(string value = 'true') 713319"];
249 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 713320"];
250 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 713321"];
251 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 713322"];
252 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 713323"];
253 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 713324"];
254 [label="new[] { new KeyValuePair<string, string>(feature, value) } 713325"];
255 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 713326"];
256 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 713327"];
257 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 713328"];
258 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 713329"];
259 [label="1 713330"];
260 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 713331"];
261 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 713332"];
262 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 713333"];
263 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 713334"];
264 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 713335"];
265 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 713336"];
266 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 713337"];
267 [label="LanguageVersion.CSharp8 713338"];
268 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 713339"];
269 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 713340"];
270 [label="RegularWithExtendedPartialMethods = RegularPreview 713341"];
271 [label="new SmallDictionary<string, string> { } 713342"];
272 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 713343"];
273 [label="kind: SourceCodeKind.Regular 713344"];
274 [label="documentationMode: DocumentationMode.None 713345"];
275 [label="languageVersion: LanguageVersion.Preview 713346"];
276 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 713347"];
277 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 713348"];
278 [label="s_experimentalFeatures 713349"];
279 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 713350"];
280 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 713351"];
281 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 713352"];
282 [label="'testV7SwitchBinder' 713353"];
283 [label="'true' 713354"];
284 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 713355"];
285 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 713356"];
286 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 713357"];
287 [label="RegularWithoutRecursivePatterns = Regular7_3 713358"];
288 [label="RegularWithRecursivePatterns = Regular8 713359"];
289 [label="RegularWithoutPatternCombinators = Regular8 713360"];
290 [label="RegularWithPatternCombinators = RegularPreview 713361"];
291 [label="OutputKind.DynamicallyLinkedLibrary 713362"];
292 [label="OptimizationLevel.Release 713363"];
293 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 713364"];
294 [label="param CreateTestOptions(OutputKind outputKind) 713365"];
295 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713366"];
296 [label="param CreateTestOptions(bool allowUnsafe = false) 713367"];
297 [label="outputKind 713368"];
298 [label="optimizationLevel: optimizationLevel 713369"];
299 [label="warningLevel: Diagnostic.MaxWarningLevel 713370"];
300 [label="allowUnsafe: allowUnsafe 713371"];
301 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713372"];
302 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713373"];
303 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 713374"];
304 [label="OutputKind.ConsoleApplication 713375"];
305 [label="OptimizationLevel.Release 713376"];
306 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 713377"];
307 [label="param CreateTestOptions(OutputKind outputKind) 713378"];
308 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713379"];
309 [label="param CreateTestOptions(bool allowUnsafe = false) 713380"];
310 [label="outputKind 713381"];
311 [label="optimizationLevel: optimizationLevel 713382"];
312 [label="warningLevel: Diagnostic.MaxWarningLevel 713383"];
313 [label="allowUnsafe: allowUnsafe 713384"];
314 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713385"];
315 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713386"];
316 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 713387"];
317 [label="true 713388"];
318 [label="ReleaseDll.WithDebugPlusMode(true) 713389"];
319 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 713390"];
320 [label="true 713391"];
321 [label="ReleaseExe.WithDebugPlusMode(true) 713392"];
322 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 713393"];
323 [label="OutputKind.DynamicallyLinkedLibrary 713394"];
324 [label="OptimizationLevel.Debug 713395"];
325 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 713396"];
326 [label="param CreateTestOptions(OutputKind outputKind) 713397"];
327 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713398"];
328 [label="param CreateTestOptions(bool allowUnsafe = false) 713399"];
329 [label="outputKind 713400"];
330 [label="optimizationLevel: optimizationLevel 713401"];
331 [label="warningLevel: Diagnostic.MaxWarningLevel 713402"];
332 [label="allowUnsafe: allowUnsafe 713403"];
333 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713404"];
334 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713405"];
335 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 713406"];
336 [label="OutputKind.ConsoleApplication 713407"];
337 [label="OptimizationLevel.Debug 713408"];
338 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 713409"];
339 [label="param CreateTestOptions(OutputKind outputKind) 713410"];
340 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713411"];
341 [label="param CreateTestOptions(bool allowUnsafe = false) 713412"];
342 [label="outputKind 713413"];
343 [label="optimizationLevel: optimizationLevel 713414"];
344 [label="warningLevel: Diagnostic.MaxWarningLevel 713415"];
345 [label="allowUnsafe: allowUnsafe 713416"];
346 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713417"];
347 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713418"];
348 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 713419"];
349 [label="OutputKind.WindowsRuntimeMetadata 713420"];
350 [label="OptimizationLevel.Release 713421"];
351 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 713422"];
352 [label="param CreateTestOptions(OutputKind outputKind) 713423"];
353 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713424"];
354 [label="param CreateTestOptions(bool allowUnsafe = false) 713425"];
355 [label="outputKind 713426"];
356 [label="optimizationLevel: optimizationLevel 713427"];
357 [label="warningLevel: Diagnostic.MaxWarningLevel 713428"];
358 [label="allowUnsafe: allowUnsafe 713429"];
359 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713430"];
360 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713431"];
361 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 713432"];
362 [label="OutputKind.WindowsRuntimeMetadata 713433"];
363 [label="OptimizationLevel.Debug 713434"];
364 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 713435"];
365 [label="param CreateTestOptions(OutputKind outputKind) 713436"];
366 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713437"];
367 [label="param CreateTestOptions(bool allowUnsafe = false) 713438"];
368 [label="outputKind 713439"];
369 [label="optimizationLevel: optimizationLevel 713440"];
370 [label="warningLevel: Diagnostic.MaxWarningLevel 713441"];
371 [label="allowUnsafe: allowUnsafe 713442"];
372 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713443"];
373 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713444"];
374 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 713445"];
375 [label="OutputKind.NetModule 713446"];
376 [label="OptimizationLevel.Release 713447"];
377 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 713448"];
378 [label="param CreateTestOptions(OutputKind outputKind) 713449"];
379 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713450"];
380 [label="param CreateTestOptions(bool allowUnsafe = false) 713451"];
381 [label="outputKind 713452"];
382 [label="optimizationLevel: optimizationLevel 713453"];
383 [label="warningLevel: Diagnostic.MaxWarningLevel 713454"];
384 [label="allowUnsafe: allowUnsafe 713455"];
385 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713456"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713457"];
387 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 713458"];
388 [label="OutputKind.NetModule 713459"];
389 [label="OptimizationLevel.Debug 713460"];
390 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 713461"];
391 [label="param CreateTestOptions(OutputKind outputKind) 713462"];
392 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 713463"];
393 [label="param CreateTestOptions(bool allowUnsafe = false) 713464"];
394 [label="outputKind 713465"];
395 [label="optimizationLevel: optimizationLevel 713466"];
396 [label="warningLevel: Diagnostic.MaxWarningLevel 713467"];
397 [label="allowUnsafe: allowUnsafe 713468"];
398 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713469"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 713470"];
400 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 713471"];
401 [label="true 713472"];
402 [label="ReleaseDll.WithAllowUnsafe(true) 713473"];
403 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 713474"];
404 [label="true 713475"];
405 [label="ReleaseExe.WithAllowUnsafe(true) 713476"];
406 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 713477"];
407 [label="true 713478"];
408 [label="DebugDll.WithAllowUnsafe(true) 713479"];
409 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 713480"];
410 [label="true 713481"];
411 [label="DebugExe.WithAllowUnsafe(true) 713482"];
412 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 713483"];
413 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 713484"];
414 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713485"];
415 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713486"];
416 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 713487"];
417 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713488"];
418 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713489"];
419 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 713490"];
420 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713491"];
421 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713492"];
422 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 713493"];
423 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713494"];
424 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 713495"];
425 [label="DebugInformationFormat.Pdb 713496"];
426 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 713497"];
427 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 713498"];
428 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 713499"];
429 [label="text 713500"];
430 [label="param operator(string source) 713501"];
431 [label="source 713502"];
432 [label="new CSharpTestSource(source) 713503"];
433 [label="param CSharpTestSource(object value) 713504"];
434 [label="param CSharpTestSource(this) 713505"];
435 [label="Value 713506"];
436 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 713507"];
437 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 713508"];
438 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 713509"];
439 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates) 713510"];
440 [label="param CreateCompilationWithMscorlib45(CSharpTestSource source) 713511"];
441 [label="param CreateCompilationWithMscorlib45(IEnumerable<MetadataReference> references = null) 713512"];
442 [label="param CreateCompilationWithMscorlib45(CSharpCompilationOptions options = null) 713513"];
443 [label="param CreateCompilationWithMscorlib45(CSharpParseOptions parseOptions = null) 713514"];
444 [label="param CreateCompilationWithMscorlib45(string assemblyName = '') 713515"];
445 [label="param CreateCompilationWithMscorlib45(string sourceFileName = '') 713516"];
446 [label="param CreateCompilationWithMscorlib45(bool skipUsesIsNullable = false) 713517"];
447 [label="source 713518"];
448 [label="references 713519"];
449 [label="options 713520"];
450 [label="parseOptions 713521"];
451 [label="TargetFramework.Mscorlib45 713522"];
452 [label="assemblyName 713523"];
453 [label="sourceFileName 713524"];
454 [label="skipUsesIsNullable 713525"];
455 [label="CreateCompilation(source, references, options, parseOptions, TargetFramework.Mscorlib45, assemblyName, sourceFileName, skipUsesIsNullable) 713526"];
456 [label="param CreateCompilation(CSharpTestSource source) 713527"];
457 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 713528"];
458 [label="param CreateCompilation(CSharpCompilationOptions options = null) 713529"];
459 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 713530"];
460 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 713531"];
461 [label="param CreateCompilation(string assemblyName = '') 713532"];
462 [label="param CreateCompilation(string sourceFileName = '') 713533"];
463 [label="param CreateCompilation(bool skipUsesIsNullable = false) 713534"];
464 [label="source 713535"];
465 [label="targetFramework 713536"];
466 [label="references 713537"];
467 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 713538"];
468 [label="param GetReferences(TargetFramework tf) 713539"];
469 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 713540"];
470 [label="var references = GetReferences(tf); 713541"];
471 [label="GetReferences(tf) 713542"];
472 [label="param GetReferences(TargetFramework targetFramework) 713543"];
473 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 713544"];
474 [label="Mscorlib45References 713545"];
475 [label="Net451.mscorlib 713546"];
476 [label="ImmutableArray.Create<MetadataReference>(Net451.mscorlib) 713547"];
477 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 713548"];
478 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 713549"];
479 [label="return references; 713550"];
480 [label="options 713551"];
481 [label="parseOptions 713552"];
482 [label="assemblyName 713553"];
483 [label="sourceFileName 713554"];
484 [label="skipUsesIsNullable 713555"];
485 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 713556"];
486 [label="param CreateEmptyCompilation(CSharpTestSource source) 713557"];
487 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 713558"];
488 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 713559"];
489 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 713560"];
490 [label="param CreateEmptyCompilation(string assemblyName = '') 713561"];
491 [label="param CreateEmptyCompilation(string sourceFileName = '') 713562"];
492 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 713563"];
493 [label="source 713564"];
494 [label="references 713565"];
495 [label="options 713566"];
496 [label="parseOptions 713567"];
497 [label="assemblyName 713568"];
498 [label="sourceFileName 713569"];
499 [label="skipUsesIsNullable 713570"];
500 [label="null 713571"];
501 [label="experimentalFeature: null 713572"];
502 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 713573"];
503 [label="param CreateCompilationCore(CSharpTestSource source) 713574"];
504 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 713575"];
505 [label="param CreateCompilationCore(CSharpCompilationOptions options) 713576"];
506 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 713577"];
507 [label="param CreateCompilationCore(string assemblyName) 713578"];
508 [label="param CreateCompilationCore(string sourceFileName) 713579"];
509 [label="param CreateCompilationCore(bool skipUsesIsNullable) 713580"];
510 [label="param CreateCompilationCore(MessageID? experimentalFeature) 713581"];
511 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 713582"];
512 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 713583"];
513 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 713584"];
514 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 713585"];
515 [label="param GetSyntaxTrees(string sourceFileName = '') 713586"];
516 [label="param GetSyntaxTrees(this) 713587"];
517 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 713588"];
518 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 713589"];
519 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 713590"];
520 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 713591"];
521 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 713592"];
522 [label="param Parse(string text) 713593"];
523 [label="param Parse(string filename = '') 713594"];
524 [label="param Parse(CSharpParseOptions options = null) 713595"];
525 [label="param Parse(Encoding encoding = null) 713596"];
526 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 713597"];
527 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 713598"];
528 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 713599"];
529 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 713600"];
530 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 713601"];
531 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 713602"];
532 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 713603"];
533 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 713604"];
534 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 713605"];
535 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 713606"];
536 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 713607"];
537 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 713608"];
538 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 713609"];
539 [label="param CheckSerializable(SyntaxTree tree) 713610"];
540 [label="var stream = new MemoryStream(); 713611"];
541 [label="var root = tree.GetRoot(); 713612"];
542 [label="var root = tree.GetRoot(); 713613"];
543 [label="root.SerializeTo(stream); 713614"];
544 [label="root.SerializeTo(stream); 713615"];
545 [label="root.SerializeTo(stream); 713616"];
546 [label="stream.Position = 0; 713617"];
547 [label="stream.Position 713618"];
548 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 713619"];
549 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 713620"];
550 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 713621"];
551 [label="return tree; 713622"];
552 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 713623"];
553 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 713624"];
554 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 713625"];
555 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 713626"];
556 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 713627"];
557 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 713628"];
558 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 713629"];
559 [label="hasTopLevelStatements 713630"];
560 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 713631"];
561 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 713632"];
562 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 713633"];
563 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 713634"];
564 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 713635"];
565 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 713636"];
566 [label="param ValidateIOperations(Func<Compilation> createCompilation) 713637"];
567 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 713638"];
568 [label="return; 713639"];
569 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 713640"];
570 [label="var compilation = createCompilationLambda(); 713641"];
571 [label="var compilation = createCompilationLambda(); 713642"];
572 [label="return Guid.NewGuid().ToString('D'); 713643"];
573 [label="var compilation = createCompilationLambda(); 713644"];
574 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 713645"];
575 [label="IsNullableEnabled(compilation) 713646"];
576 [label="param IsNullableEnabled(CSharpCompilation compilation) 713647"];
577 [label="var trees = compilation.SyntaxTrees; 713648"];
578 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 713649"];
579 [label="var options = (CSharpParseOptions)trees[0].Options; 713650"];
580 [label="var options = (CSharpParseOptions)trees[0].Options; 713651"];
581 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 713652"];
582 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 713653"];
583 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 713654"];
584 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 713655"];
585 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 713656"];
586 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 713657"];
587 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty) 713658"];
588 [label="param VerifyUsesOfNullability(Symbol symbol) 713659"];
589 [label="param VerifyUsesOfNullability(ImmutableArray<string> expectedUsesOfNullable) 713660"];
590 [label="var builder = ArrayBuilder<Symbol>.GetInstance(); 713661"];
591 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 713662"];
592 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 713663"];
593 [label="UsesIsNullableVisitor.GetUses(builder, symbol) 713664"];
594 [label="param GetUses(ArrayBuilder<Symbol> builder) 713665"];
595 [label="param GetUses(Symbol symbol) 713666"];
596 [label="var visitor = new UsesIsNullableVisitor(builder); 713667"];
597 [label="var visitor = new UsesIsNullableVisitor(builder); 713668"];
598 [label="new UsesIsNullableVisitor(builder) 713669"];
599 [label="param UsesIsNullableVisitor(ArrayBuilder<Symbol> builder) 713670"];
600 [label="param UsesIsNullableVisitor(this) 713671"];
601 [label="param UsesIsNullableVisitor(this) 713672"];
602 [label="_builder 713673"];
603 [label="_builder 713674"];
604 [label="visitor.Visit(symbol); 713675"];
605 [label="visitor.Visit(symbol); 713676"];
606 [label="visitor.Visit(symbol); 713677"];
607 [label="param VisitNamespace(NamespaceSymbol symbol) 713678"];
608 [label="param VisitNamespace(this) 713679"];
609 [label="return VisitList(symbol.GetMembers()); 713680"];
610 [label="VisitList(symbol.GetMembers()) 713681"];
611 [label="param VisitList(ImmutableArray<TSymbol> symbols) 713682"];
612 [label="param VisitList(this) 713683"];
613 [label="bool result = false; 713684"];
614 [label="foreach (var symbol in symbols)\n            {\n                if (this.Visit(symbol))\n                {\n                    result = true;\n                }\n            } 713685"];
615 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 713686"];
616 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 713687"];
617 [label="param VisitNamedType(NamedTypeSymbol symbol) 713688"];
618 [label="param VisitNamedType(this) 713689"];
619 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713690"];
620 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713691"];
621 [label="symbol.BaseTypeNoUseSiteDiagnostics 713692"];
622 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 713693"];
623 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 713694"];
624 [label="Debug.Assert(symbol is object); 713695"];
625 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 713696"];
626 [label="isInternal = false; 713697"];
627 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 713698"];
628 [label="symbol = symbol.ContainingType; 713699"];
629 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 713700"];
630 [label="return true; 713701"];
631 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713702"];
632 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713703"];
633 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 713704"];
634 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 713705"];
635 [label="Debug.Assert(symbol is object); 713706"];
636 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 713707"];
637 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 713708"];
638 [label="symbol = symbol.ContainingType; 713709"];
639 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 713710"];
640 [label="symbol.BaseTypeNoUseSiteDiagnostics 713711"];
641 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713712"];
642 [label="AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) 713713"];
643 [label="param AddIfUsesIsNullable(Symbol symbol) 713714"];
644 [label="param AddIfUsesIsNullable(TypeSymbol type) 713715"];
645 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 713716"];
646 [label="param AddIfUsesIsNullable(this) 713717"];
647 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 713718"];
648 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 713719"];
649 [label="UsesIsNullable(type, inProgress) 713720"];
650 [label="param UsesIsNullable(TypeSymbol type) 713721"];
651 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 713722"];
652 [label="param UsesIsNullable(this) 713723"];
653 [label="if (type is null)\n            {\n                return false;\n            } 713724"];
654 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 713725"];
655 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 713726"];
656 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 713727"];
657 [label="UsesIsNullable(type.ContainingType, inProgress) 713728"];
658 [label="param UsesIsNullable(TypeSymbol type) 713729"];
659 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 713730"];
660 [label="param UsesIsNullable(this) 713731"];
661 [label="if (type is null)\n            {\n                return false;\n            } 713732"];
662 [label="return false; 713733"];
663 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Array:\n                    return UsesIsNullable(((ArrayTypeSymbol)type).ElementTypeWithAnnotations, inProgress);\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Error:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                    return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress);\n                case TypeKind.Dynamic:\n                case TypeKind.Enum:\n                    return false;\n                case TypeKind.Pointer:\n                    return UsesIsNullable(((PointerTypeSymbol)type).PointedAtTypeWithAnnotations, inProgress);\n                case TypeKind.TypeParameter:\n                    var typeParameter = (TypeParameterSymbol)type;\n                    // Lafhis\n                    if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    }\n                    inProgress = inProgress ?? ConsList<TypeParameterSymbol>.Empty;\n                    inProgress = inProgress.Prepend(typeParameter);\n                    return UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) ||\n                        typeParameter.ReferenceTypeConstraintIsNullable == true;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 713734"];
664 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 713735"];
665 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 713736"];
666 [label="UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress) 713737"];
667 [label="param UsesIsNullable(ImmutableArray<TypeWithAnnotations> types) 713738"];
668 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 713739"];
669 [label="param UsesIsNullable(this) 713740"];
670 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 713741"];
671 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 713742"];
672 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 713743"];
673 [label="return false; 713744"];
674 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713745"];
675 [label="AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) 713746"];
676 [label="param AddIfUsesIsNullable(Symbol symbol) 713747"];
677 [label="param AddIfUsesIsNullable(ImmutableArray<NamedTypeSymbol> types) 713748"];
678 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 713749"];
679 [label="param AddIfUsesIsNullable(this) 713750"];
680 [label="foreach (var type in types)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 713751"];
681 [label="return false; 713752"];
682 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713753"];
683 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713754"];
684 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 713755"];
685 [label="param AddIfUsesIsNullable(Symbol symbol) 713756"];
686 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 713757"];
687 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 713758"];
688 [label="param AddIfUsesIsNullable(this) 713759"];
689 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 713760"];
690 [label="return false; 713761"];
691 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713762"];
692 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 713763"];
693 [label="return VisitList(symbol.GetMembers()); 713764"];
694 [label="return VisitList(symbol.GetMembers()); 713765"];
695 [label="return VisitList(symbol.GetMembers()); 713766"];
696 [label="param BinderFactory(CSharpCompilation compilation) 713767"];
697 [label="param BinderFactory(SyntaxTree syntaxTree) 713768"];
698 [label="param BinderFactory(bool ignoreAccessibility) 713769"];
699 [label="param BinderFactory(this) 713770"];
700 [label="_binderCache 713771"];
701 [label="_compilation 713772"];
702 [label="_syntaxTree 713773"];
703 [label="_buckStopsHereBinder 713774"];
704 [label="_ignoreAccessibility 713775"];
705 [label="_binderFactoryVisitorPool 713776"];
706 [label="_compilation 713777"];
707 [label="_syntaxTree 713778"];
708 [label="_ignoreAccessibility 713779"];
709 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 713780"];
710 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 713781"];
711 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 713782"];
712 [label="_binderFactoryVisitorPool 713783"];
713 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 713784"];
714 [label="_binderCache 713785"];
715 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 713786"];
716 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 713787"];
717 [label="new BuckStopsHereBinder(compilation) 713788"];
718 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 713789"];
719 [label="param BuckStopsHereBinder(this) 713790"];
720 [label="0 713791"];
721 [label="ExternalScope = 0 713792"];
722 [label="1 713793"];
723 [label="TopLevelScope = 1 713794"];
724 [label="2 713795"];
725 [label="ValueKindInsignificantBits = 2 713796"];
726 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 713797"];
727 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 713798"];
728 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 713799"];
729 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 713800"];
730 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 713801"];
731 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 713802"];
732 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 713803"];
733 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 713804"];
734 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 713805"];
735 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 713806"];
736 [label="10 713807"];
737 [label="MaxParameterListsForErrorRecovery = 10 713808"];
738 [label="'<>h__TransparentIdentifier' 713809"];
739 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 713810"];
740 [label="s => (MethodSymbol)s 713811"];
741 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 713812"];
742 [label="s => (PropertySymbol)s 713813"];
743 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 713814"];
744 [label="compilation 713815"];
745 [label="param BuckStopsHereBinder(this) 713816"];
746 [label="param Binder(CSharpCompilation compilation) 713817"];
747 [label="param Binder(this) 713818"];
748 [label="internal CSharpCompilation Compilation { get; } 713819"];
749 [label="Flags 713820"];
750 [label="protected internal Binder? Next { get; } 713821"];
751 [label="_lazyConversions 713822"];
752 [label="_lazyOverloadResolution 713823"];
753 [label="RoslynDebug.Assert(compilation != null); 713824"];
754 [label="RoslynDebug.Assert(compilation != null); 713825"];
755 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 713826"];
756 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 713827"];
757 [label="this.Flags 713828"];
758 [label="this.Compilation 713829"];
759 [label="_buckStopsHereBinder 713830"];
760 [label="return VisitList(symbol.GetMembers()); 713831"];
761 [label="param GetBinder(SyntaxNode node) 713832"];
762 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 713833"];
763 [label="param GetBinder(Symbol memberOpt = null) 713834"];
764 [label="param GetBinder(this) 713835"];
765 [label="int position = node.SpanStart; 713836"];
766 [label="InScript 713837"];
767 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 713838"];
768 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 713839"];
769 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 713840"];
770 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 713841"];
771 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 713842"];
772 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 713843"];
773 [label="node = node.Parent; 713844"];
774 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 713845"];
775 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 713846"];
776 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 713847"];
777 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 713848"];
778 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 713849"];
779 [label="param GetBinder(SyntaxNode node) 713850"];
780 [label="param GetBinder(int position) 713851"];
781 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 713852"];
782 [label="param GetBinder(Symbol memberOpt = null) 713853"];
783 [label="param GetBinder(this) 713854"];
784 [label="Debug.Assert(node != null); 713855"];
785 [label="Debug.Assert(node != null); 713856"];
786 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 713857"];
787 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 713858"];
788 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 713859"];
789 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 713860"];
790 [label="param BinderFactoryVisitor(BinderFactory factory) 713861"];
791 [label="param BinderFactoryVisitor(this) 713862"];
792 [label="param BinderFactoryVisitor(this) 713863"];
793 [label="_position 713864"];
794 [label="_memberDeclarationOpt 713865"];
795 [label="_memberOpt 713866"];
796 [label="_factory 713867"];
797 [label="_factory 713868"];
798 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 713869"];
799 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 713870"];
800 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 713871"];
801 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 713872"];
802 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 713873"];
803 [label="param Initialize(int position) 713874"];
804 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 713875"];
805 [label="param Initialize(Symbol memberOpt) 713876"];
806 [label="param Initialize(this) 713877"];
807 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 713878"];
808 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 713879"];
809 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 713880"];
810 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 713881"];
811 [label="_position 713882"];
812 [label="_memberDeclarationOpt 713883"];
813 [label="_memberOpt 713884"];
814 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 713885"];
815 [label="Binder result = visitor.Visit(node); 713886"];
816 [label="visitor.Visit(node) 713887"];
817 [label="param Visit(SyntaxNode node) 713888"];
818 [label="param Visit(this) 713889"];
819 [label="return VisitCore(node); 713890"];
820 [label="VisitCore(node) 713891"];
821 [label="param VisitCore(SyntaxNode node) 713892"];
822 [label="param VisitCore(this) 713893"];
823 [label="return ((CSharpSyntaxNode)node).Accept(this); 713894"];
824 [label="return ((CSharpSyntaxNode)node).Accept(this); 713895"];
825 [label="return ((CSharpSyntaxNode)node).Accept(this); 713896"];
826 [label="param VisitDelegateDeclaration(DelegateDeclarationSyntax parent) 713897"];
827 [label="param VisitDelegateDeclaration(this) 713898"];
828 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 713899"];
829 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 713900"];
830 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 713901"];
831 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 713902"];
832 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 713903"];
833 [label="CreateBinderCacheKey(parent, usage: NodeUsage.Normal) 713904"];
834 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 713905"];
835 [label="param CreateBinderCacheKey(NodeUsage usage) 713906"];
836 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 713907"];
837 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 713908"];
838 [label="return new BinderCacheKey(node, usage); 713909"];
839 [label="return new BinderCacheKey(node, usage); 713910"];
840 [label="return new BinderCacheKey(node, usage); 713911"];
841 [label="new BinderCacheKey(node, usage) 713912"];
842 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 713913"];
843 [label="param BinderCacheKey(NodeUsage usage) 713914"];
844 [label="param BinderCacheKey(this) 713915"];
845 [label="this.syntaxNode 713916"];
846 [label="this.usage 713917"];
847 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 713918"];
848 [label="Binder resultBinder; 713919"];
849 [label="binderCache 713920"];
850 [label="get\n                {\n                    return _factory._binderCache;\n                } 713921"];
851 [label="return _factory._binderCache; 713922"];
852 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 713923"];
853 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 713924"];
854 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 713925"];
855 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 713926"];
856 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 713927"];
857 [label="param GetHashCode(this) 713928"];
858 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 713929"];
859 [label="Binder outer = VisitCore(parent.Parent); 713930"];
860 [label="VisitCore(parent.Parent) 713931"];
861 [label="param VisitCore(SyntaxNode node) 713932"];
862 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 713933"];
863 [label="param VisitCompilationUnit(this) 713934"];
864 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 713935"];
865 [label="IsInUsing(parent) 713936"];
866 [label="param IsInUsing(CSharpSyntaxNode containingNode) 713937"];
867 [label="param IsInUsing(this) 713938"];
868 [label="TextSpan containingSpan = containingNode.Span; 713939"];
869 [label="SyntaxToken token; 713940"];
870 [label="token 713941"];
871 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 713942"];
872 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 713943"];
873 [label="token = containingNode.FindToken(_position); 713944"];
874 [label="token = containingNode.FindToken(_position); 713945"];
875 [label="var node = token.Parent; 713946"];
876 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 713947"];
877 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 713948"];
878 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 713949"];
879 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 713950"];
880 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 713951"];
881 [label="node = node.Parent; 713952"];
882 [label="return false; 713953"];
883 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 713954"];
884 [label="InScript 713955"];
885 [label="get\n                {\n                    return _factory.InScript;\n                } 713956"];
886 [label="_factory.InScript 713957"];
887 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 713958"];
888 [label="return _factory.InScript; 713959"];
889 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 713960"];
890 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 713961"];
891 [label="param VisitCompilationUnit(bool inUsing) 713962"];
892 [label="param VisitCompilationUnit(bool inScript) 713963"];
893 [label="param VisitCompilationUnit(this) 713964"];
894 [label="syntaxTree 713965"];
895 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 713966"];
896 [label="return _factory._syntaxTree; 713967"];
897 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 713968"];
898 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 713969"];
899 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 713970"];
900 [label="inUsing 713971"];
901 [label="inScript 713972"];
902 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 713973"];
903 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 713974"];
904 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 713975"];
905 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 713976"];
906 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 713977"];
907 [label="param CreateBinderCacheKey(NodeUsage usage) 713978"];
908 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 713979"];
909 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 713980"];
910 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 713981"];
911 [label="Binder result; 713982"];
912 [label="binderCache 713983"];
913 [label="get\n                {\n                    return _factory._binderCache;\n                } 713984"];
914 [label="return _factory._binderCache; 713985"];
915 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 713986"];
916 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 713987"];
917 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 713988"];
918 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 713989"];
919 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 713990"];
920 [label="this.buckStopsHereBinder 713991"];
921 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 713992"];
922 [label="return _factory._buckStopsHereBinder; 713993"];
923 [label="result = this.buckStopsHereBinder; 713994"];
924 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 713995"];
925 [label="compilation 713996"];
926 [label="get\n                {\n                    return _factory._compilation;\n                } 713997"];
927 [label="return _factory._compilation; 713998"];
928 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 713999"];
929 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 714000"];
930 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 714001"];
931 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 714002"];
932 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 714003"];
933 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 714004"];
934 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 714005"];
935 [label="param InContainerBinder(Binder next) 714006"];
936 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 714007"];
937 [label="param InContainerBinder(bool inUsing) 714008"];
938 [label="param InContainerBinder(this) 714009"];
939 [label="next 714010"];
940 [label="param InContainerBinder(this) 714011"];
941 [label="param Binder(Binder next) 714012"];
942 [label="param Binder(this) 714013"];
943 [label="param Binder(Conversions? conversions = null) 714014"];
944 [label="RoslynDebug.Assert(next != null); 714015"];
945 [label="RoslynDebug.Assert(next != null); 714016"];
946 [label="Next 714017"];
947 [label="this.Flags 714018"];
948 [label="this.Compilation 714019"];
949 [label="_lazyConversions 714020"];
950 [label="_container 714021"];
951 [label="_computeImports 714022"];
952 [label="_lazyImports 714023"];
953 [label="_lazyImportChain 714024"];
954 [label="_lazyQuickAttributeChecker 714025"];
955 [label="Debug.Assert((object)container != null); 714026"];
956 [label="Debug.Assert((object)container != null); 714027"];
957 [label="Debug.Assert(declarationSyntax != null); 714028"];
958 [label="Debug.Assert(declarationSyntax != null); 714029"];
959 [label="_container 714030"];
960 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 714031"];
961 [label="_computeImports 714032"];
962 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 714033"];
963 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 714034"];
964 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 714035"];
965 [label="_usingsSyntax 714036"];
966 [label="compilation 714037"];
967 [label="get\n                {\n                    return _factory._compilation;\n                } 714038"];
968 [label="return _factory._compilation; 714039"];
969 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 714040"];
970 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 714041"];
971 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 714042"];
972 [label="binderCache 714043"];
973 [label="return _factory._binderCache; 714044"];
974 [label="binderCache.TryAdd(key, result); 714045"];
975 [label="binderCache.TryAdd(key, result); 714046"];
976 [label="binderCache.TryAdd(key, result); 714047"];
977 [label="binderCache.TryAdd(key, result); 714048"];
978 [label="binderCache.TryAdd(key, result); 714049"];
979 [label="return result; 714050"];
980 [label="return ((CSharpSyntaxNode)node).Accept(this); 714051"];
981 [label="outer.ContainingMemberOrLambda 714052"];
982 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 714053"];
983 [label="var merged = _container as MergedNamespaceSymbol; 714054"];
984 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 714055"];
985 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 714056"];
986 [label="((object)merged != null) 714057"];
987 [label="var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent); 714058"];
988 [label="var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent); 714059"];
989 [label="resultBinder = new InContainerBinder(container, outer); 714060"];
990 [label="resultBinder = new InContainerBinder(container, outer); 714061"];
991 [label="resultBinder = new InContainerBinder(container, outer); 714062"];
992 [label="new InContainerBinder(container, outer) 714063"];
993 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 714064"];
994 [label="param InContainerBinder(Binder next) 714065"];
995 [label="param InContainerBinder(Imports imports = null) 714066"];
996 [label="param InContainerBinder(this) 714067"];
997 [label="next 714068"];
998 [label="param InContainerBinder(this) 714069"];
999 [label="param Binder(Binder next) 714070"];
1000 [label="param Binder(this) 714071"];
1001 [label="param Binder(Conversions? conversions = null) 714072"];
1002 [label="RoslynDebug.Assert(next != null); 714073"];
1003 [label="RoslynDebug.Assert(next != null); 714074"];
1004 [label="this.Flags 714075"];
1005 [label="this.Compilation 714076"];
1006 [label="_lazyConversions 714077"];
1007 [label="_container 714078"];
1008 [label="_computeImports 714079"];
1009 [label="_lazyImports 714080"];
1010 [label="_lazyImportChain 714081"];
1011 [label="_lazyQuickAttributeChecker 714082"];
1012 [label="Debug.Assert((object)container != null || imports != null); 714083"];
1013 [label="Debug.Assert((object)container != null || imports != null); 714084"];
1014 [label="_container 714085"];
1015 [label="null 714086"];
1016 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 714087"];
1017 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 714088"];
1018 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 714089"];
1019 [label="null 714090"];
1020 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 714091"];
1021 [label="param Imports(CSharpCompilation compilation) 714092"];
1022 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 714093"];
1023 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 714094"];
1024 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 714095"];
1025 [label="param Imports(DiagnosticBag diagnostics) 714096"];
1026 [label="param Imports(this) 714097"];
1027 [label="_compilation 714098"];
1028 [label="_diagnostics 714099"];
1029 [label="UsingAliases 714100"];
1030 [label="Debug.Assert(usingAliases != null); 714101"];
1031 [label="Debug.Assert(usingAliases != null); 714102"];
1032 [label="Debug.Assert(!usings.IsDefault); 714103"];
1033 [label="Debug.Assert(!externs.IsDefault); 714104"];
1034 [label="_compilation 714105"];
1035 [label="this.UsingAliases 714106"];
1036 [label="this.Usings 714107"];
1037 [label="_diagnostics 714108"];
1038 [label="this.ExternAliases 714109"];
1039 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 714110"];
1040 [label="_lazyImports = imports ?? Imports.Empty; 714111"];
1041 [label="_lazyImports = imports ?? Imports.Empty; 714112"];
1042 [label="_lazyImports 714113"];
1043 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 714114"];
1044 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 714115"];
1045 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 714116"];
1046 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 714117"];
1047 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 714118"];
1048 [label="param WithUnsafeRegionIfNecessary(this) 714119"];
1049 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 714120"];
1050 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 714121"];
1051 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 714122"];
1052 [label="param Includes(this BinderFlags self) 714123"];
1053 [label="param Includes(BinderFlags other) 714124"];
1054 [label="return (self & other) == other; 714125"];
1055 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 714126"];
1056 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 714127"];
1057 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 714128"];
1058 [label="binderCache 714129"];
1059 [label="return _factory._binderCache; 714130"];
1060 [label="binderCache.TryAdd(key, resultBinder); 714131"];
1061 [label="binderCache.TryAdd(key, resultBinder); 714132"];
1062 [label="binderCache.TryAdd(key, resultBinder); 714133"];
1063 [label="binderCache.TryAdd(key, resultBinder); 714134"];
1064 [label="binderCache.TryAdd(key, resultBinder); 714135"];
1065 [label="return resultBinder; 714136"];
1066 [label="return ((CSharpSyntaxNode)node).Accept(this); 714137"];
1067 [label="_binderFactoryVisitorPool.Free(visitor); 714138"];
1068 [label="_binderFactoryVisitorPool.Free(visitor); 714139"];
1069 [label="return result; 714140"];
1070 [label="return VisitList(symbol.GetMembers()); 714141"];
1071 [label="param BindType(ExpressionSyntax syntax) 714142"];
1072 [label="param BindType(DiagnosticBag diagnostics) 714143"];
1073 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 714144"];
1074 [label="param BindType(bool suppressUseSiteDiagnostics = false) 714145"];
1075 [label="param BindType(this) 714146"];
1076 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 714147"];
1077 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 714148"];
1078 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 714149"];
1079 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 714150"];
1080 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 714151"];
1081 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 714152"];
1082 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 714153"];
1083 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 714154"];
1084 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 714155"];
1085 [label="param BindTypeOrAlias(this) 714156"];
1086 [label="Debug.Assert(diagnostics != null); 714157"];
1087 [label="Debug.Assert(diagnostics != null); 714158"];
1088 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714159"];
1089 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714160"];
1090 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714161"];
1091 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714162"];
1092 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714163"];
1093 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714164"];
1094 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 714165"];
1095 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 714166"];
1096 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 714167"];
1097 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 714168"];
1098 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 714169"];
1099 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 714170"];
1100 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 714171"];
1101 [label="return bindPredefined(syntax, diagnostics); 714172"];
1102 [label="return bindPredefined(syntax, diagnostics); 714173"];
1103 [label="bindPredefined(syntax, diagnostics) 714174"];
1104 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 714175"];
1105 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 714176"];
1106 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 714177"];
1107 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 714178"];
1108 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 714179"];
1109 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 714180"];
1110 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 714181"];
1111 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 714182"];
1112 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 714183"];
1113 [label="param BindPredefinedTypeSymbol(this) 714184"];
1114 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 714185"];
1115 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 714186"];
1116 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 714187"];
1117 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 714188"];
1118 [label="param GetSpecialType(SpecialType typeId) 714189"];
1119 [label="param GetSpecialType(DiagnosticBag diagnostics) 714190"];
1120 [label="param GetSpecialType(SyntaxNode node) 714191"];
1121 [label="param GetSpecialType(this) 714192"];
1122 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714193"];
1123 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714194"];
1124 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714195"];
1125 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714196"];
1126 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 714197"];
1127 [label="param GetSpecialType(CSharpCompilation compilation) 714198"];
1128 [label="param GetSpecialType(SpecialType typeId) 714199"];
1129 [label="param GetSpecialType(SyntaxNode node) 714200"];
1130 [label="param GetSpecialType(DiagnosticBag diagnostics) 714201"];
1131 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 714202"];
1132 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 714203"];
1133 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 714204"];
1134 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 714205"];
1135 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 714206"];
1136 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 714207"];
1137 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 714208"];
1138 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 714209"];
1139 [label="param ReportUseSiteDiagnostics(Symbol symbol) 714210"];
1140 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 714211"];
1141 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 714212"];
1142 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 714213"];
1143 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 714214"];
1144 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 714215"];
1145 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 714216"];
1146 [label="Debug.Assert(symbol is object); 714217"];
1147 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 714218"];
1148 [label="isInternal = false; 714219"];
1149 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 714220"];
1150 [label="symbol = symbol.ContainingType; 714221"];
1151 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 714222"];
1152 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 714223"];
1153 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 714224"];
1154 [label="Debug.Assert(symbol is object); 714225"];
1155 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 714226"];
1156 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 714227"];
1157 [label="symbol = symbol.ContainingType; 714228"];
1158 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 714229"];
1159 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 714230"];
1160 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 714231"];
1161 [label="return typeSymbol; 714232"];
1162 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 714233"];
1163 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 714234"];
1164 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 714235"];
1165 [label="param AreNullableAnnotationsEnabled(this) 714236"];
1166 [label="RoslynDebug.Assert(token.SyntaxTree is object); 714237"];
1167 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 714238"];
1168 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 714239"];
1169 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 714240"];
1170 [label="param AreNullableAnnotationsEnabled(int position) 714241"];
1171 [label="param AreNullableAnnotationsEnabled(this) 714242"];
1172 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 714243"];
1173 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 714244"];
1174 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 714245"];
1175 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 714246"];
1176 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 714247"];
1177 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 714248"];
1178 [label="AreNullableAnnotationsGloballyEnabled() 714249"];
1179 [label="param AreNullableAnnotationsGloballyEnabled(this) 714250"];
1180 [label="RoslynDebug.Assert(Next is object); 714251"];
1181 [label="Next.AreNullableAnnotationsGloballyEnabled() 714252"];
1182 [label="param AreNullableAnnotationsGloballyEnabled(this) 714253"];
1183 [label="param AreNullableAnnotationsGloballyEnabled(this) 714254"];
1184 [label="GetGlobalAnnotationState() 714255"];
1185 [label="param GetGlobalAnnotationState(this) 714256"];
1186 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 714257"];
1187 [label="return false; 714258"];
1188 [label="return GetGlobalAnnotationState(); 714259"];
1189 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 714260"];
1190 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 714261"];
1191 [label="type 714262"];
1192 [label="param operator(TypeWithAnnotations typeWithAnnotations) 714263"];
1193 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 714264"];
1194 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 714265"];
1195 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 714266"];
1196 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 714267"];
1197 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 714268"];
1198 [label="Debug.Assert(typeWithAnnotations.HasType); 714269"];
1199 [label="_typeWithAnnotations 714270"];
1200 [label="_symbol = null; 714271"];
1201 [label="_symbol 714272"];
1202 [label="_isNullableEnabled = false; 714273"];
1203 [label="_isNullableEnabled 714274"];
1204 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 714275"];
1205 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 714276"];
1206 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 714277"];
1207 [label="symbol.IsType 714278"];
1208 [label="=> !_typeWithAnnotations.IsDefault 714279"];
1209 [label="!_typeWithAnnotations.IsDefault 714280"];
1210 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 714281"];
1211 [label="symbol.IsType 714282"];
1212 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 714283"];
1213 [label="symbol.TypeWithAnnotations 714284"];
1214 [label="=> _typeWithAnnotations 714285"];
1215 [label="_typeWithAnnotations 714286"];
1216 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 714287"];
1217 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 714288"];
1218 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 714289"];
1219 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 714290"];
1220 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 714291"];
1221 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 714292"];
1222 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714293"];
1223 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 714294"];
1224 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 714295"];
1225 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714296"];
1226 [label="param ReportDiagnosticsIfObsolete(this) 714297"];
1227 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 714298"];
1228 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 714299"];
1229 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 714300"];
1230 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 714301"];
1231 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 714302"];
1232 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714303"];
1233 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 714304"];
1234 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 714305"];
1235 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714306"];
1236 [label="param ReportDiagnosticsIfObsolete(this) 714307"];
1237 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 714308"];
1238 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714309"];
1239 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714310"];
1240 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714311"];
1241 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714312"];
1242 [label="this.ContainingMemberOrLambda 714313"];
1243 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 714314"];
1244 [label="_container 714315"];
1245 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714316"];
1246 [label="this.ContainingType 714317"];
1247 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 714318"];
1248 [label="this.ContainingMemberOrLambda 714319"];
1249 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 714320"];
1250 [label="var merged = _container as MergedNamespaceSymbol; 714321"];
1251 [label="var member = this.ContainingMemberOrLambda; 714322"];
1252 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 714323"];
1253 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 714324"];
1254 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 714325"];
1255 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 714326"];
1256 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714327"];
1257 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714328"];
1258 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 714329"];
1259 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714330"];
1260 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 714331"];
1261 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 714332"];
1262 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714333"];
1263 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 714334"];
1264 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 714335"];
1265 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 714336"];
1266 [label="RoslynDebug.Assert(symbol is object); 714337"];
1267 [label="RoslynDebug.Assert(symbol is object); 714338"];
1268 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 714339"];
1269 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 714340"];
1270 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 714341"];
1271 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 714342"];
1272 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 714343"];
1273 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 714344"];
1274 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 714345"];
1275 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 714346"];
1276 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 714347"];
1277 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 714348"];
1278 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 714349"];
1279 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 714350"];
1280 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 714351"];
1281 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 714352"];
1282 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 714353"];
1283 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 714354"];
1284 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 714355"];
1285 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 714356"];
1286 [label="RoslynDebug.Assert(diagnostics != null); 714357"];
1287 [label="RoslynDebug.Assert(diagnostics != null); 714358"];
1288 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 714359"];
1289 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 714360"];
1290 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 714361"];
1291 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 714362"];
1292 [label="DiagnosticInfo? info = null; 714363"];
1293 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 714364"];
1294 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 714365"];
1295 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 714366"];
1296 [label="return kind; 714367"];
1297 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 714368"];
1298 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 714369"];
1299 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714370"];
1300 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 714371"];
1301 [label="return symbol; 714372"];
1302 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 714373"];
1303 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 714374"];
1304 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 714375"];
1305 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 714376"];
1306 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 714377"];
1307 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 714378"];
1308 [label="param UnwrapAlias(DiagnosticBag diagnostics) 714379"];
1309 [label="param UnwrapAlias(SyntaxNode syntax) 714380"];
1310 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 714381"];
1311 [label="param UnwrapAlias(this) 714382"];
1312 [label="symbol.IsAlias 714383"];
1313 [label="=> _symbol?.Kind == SymbolKind.Alias 714384"];
1314 [label="_symbol 714385"];
1315 [label="_symbol?.Kind == SymbolKind.Alias 714386"];
1316 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 714387"];
1317 [label="return symbol; 714388"];
1318 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 714389"];
1319 [label="=> _typeWithAnnotations 714390"];
1320 [label="_typeWithAnnotations 714391"];
1321 [label="return VisitList(symbol.GetMembers()); 714392"];
1322 [label="param GetSpecialType(SpecialType typeId) 714393"];
1323 [label="param GetSpecialType(DiagnosticBag diagnostics) 714394"];
1324 [label="param GetSpecialType(SyntaxNode node) 714395"];
1325 [label="param GetSpecialType(this) 714396"];
1326 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714397"];
1327 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714398"];
1328 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 714399"];
1329 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 714400"];
1330 [label="param GetSpecialType(SpecialType typeId) 714401"];
1331 [label="param GetSpecialType(SyntaxNode node) 714402"];
1332 [label="param GetSpecialType(DiagnosticBag diagnostics) 714403"];
1333 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 714404"];
1334 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 714405"];
1335 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 714406"];
1336 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 714407"];
1337 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 714408"];
1338 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 714409"];
1339 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 714410"];
1340 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 714411"];
1341 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 714412"];
1342 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 714413"];
1343 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 714414"];
1344 [label="Debug.Assert(symbol is object); 714415"];
1345 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 714416"];
1346 [label="isInternal = false; 714417"];
1347 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 714418"];
1348 [label="symbol = symbol.ContainingType; 714419"];
1349 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 714420"];
1350 [label="return true; 714421"];
1351 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 714422"];
1352 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 714423"];
1353 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 714424"];
1354 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 714425"];
1355 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 714426"];
1356 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 714427"];
1357 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 714428"];
1358 [label="param ValidateParameterNameConflicts(this) 714429"];
1359 [label="PooledHashSet<string>? tpNames = null; 714430"];
1360 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 714431"];
1361 [label="PooledHashSet<string>? pNames = null; 714432"];
1362 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 714433"];
1363 [label="tpNames?.Free(); 714434"];
1364 [label="pNames?.Free(); 714435"];
1365 [label="VisitList(symbol.GetMembers()) 714436"];
1366 [label="param VisitList(ImmutableArray<TSymbol> symbols) 714437"];
1367 [label="param VisitList(this) 714438"];
1368 [label="bool result = false; 714439"];
1369 [label="param VisitMethod(MethodSymbol symbol) 714440"];
1370 [label="param VisitMethod(this) 714441"];
1371 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714442"];
1372 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714443"];
1373 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 714444"];
1374 [label="param AddIfUsesIsNullable(Symbol symbol) 714445"];
1375 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 714446"];
1376 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714447"];
1377 [label="param AddIfUsesIsNullable(this) 714448"];
1378 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 714449"];
1379 [label="return false; 714450"];
1380 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714451"];
1381 [label="AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) 714452"];
1382 [label="param AddIfUsesIsNullable(Symbol symbol) 714453"];
1383 [label="param AddIfUsesIsNullable(TypeWithAnnotations type) 714454"];
1384 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714455"];
1385 [label="param AddIfUsesIsNullable(this) 714456"];
1386 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 714457"];
1387 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 714458"];
1388 [label="UsesIsNullable(type, inProgress) 714459"];
1389 [label="param UsesIsNullable(TypeWithAnnotations type) 714460"];
1390 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714461"];
1391 [label="param UsesIsNullable(this) 714462"];
1392 [label="if (!type.HasType)\n            {\n                return false;\n            } 714463"];
1393 [label="var typeSymbol = type.Type; 714464"];
1394 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 714465"];
1395 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 714466"];
1396 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 714467"];
1397 [label="UsesIsNullable(typeSymbol, inProgress) 714468"];
1398 [label="param UsesIsNullable(TypeSymbol type) 714469"];
1399 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714470"];
1400 [label="param UsesIsNullable(this) 714471"];
1401 [label="if (type is null)\n            {\n                return false;\n            } 714472"];
1402 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 714473"];
1403 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714474"];
1404 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714475"];
1405 [label="UsesIsNullable(type.ContainingType, inProgress) 714476"];
1406 [label="param UsesIsNullable(TypeSymbol type) 714477"];
1407 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714478"];
1408 [label="param UsesIsNullable(this) 714479"];
1409 [label="if (type is null)\n            {\n                return false;\n            } 714480"];
1410 [label="return false; 714481"];
1411 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 714482"];
1412 [label="param UsesIsNullable(this) 714483"];
1413 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 714484"];
1414 [label="return false; 714485"];
1415 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714486"];
1416 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714487"];
1417 [label="AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null) 714488"];
1418 [label="param AddIfUsesIsNullable(Symbol symbol) 714489"];
1419 [label="param AddIfUsesIsNullable(ImmutableArray<ParameterSymbol> parameters) 714490"];
1420 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714491"];
1421 [label="param AddIfUsesIsNullable(this) 714492"];
1422 [label="foreach (var parameter in parameters)\n            {\n                if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 714493"];
1423 [label="if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                } 714494"];
1424 [label="if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                } 714495"];
1425 [label="UsesIsNullable(parameter.TypeWithAnnotations, inProgress) 714496"];
1426 [label="param UsesIsNullable(TypeWithAnnotations type) 714497"];
1427 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714498"];
1428 [label="param UsesIsNullable(this) 714499"];
1429 [label="if (!type.HasType)\n            {\n                return false;\n            } 714500"];
1430 [label="if (type is null)\n            {\n                return false;\n            } 714501"];
1431 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 714502"];
1432 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714503"];
1433 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714504"];
1434 [label="UsesIsNullable(type.ContainingType, inProgress) 714505"];
1435 [label="param UsesIsNullable(TypeSymbol type) 714506"];
1436 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714507"];
1437 [label="param UsesIsNullable(this) 714508"];
1438 [label="if (type is null)\n            {\n                return false;\n            } 714509"];
1439 [label="return false; 714510"];
1440 [label="param UsesIsNullable(this) 714511"];
1441 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 714512"];
1442 [label="if (!type.HasType)\n            {\n                return false;\n            } 714513"];
1443 [label="if (type is null)\n            {\n                return false;\n            } 714514"];
1444 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 714515"];
1445 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714516"];
1446 [label="UsesIsNullable(type.ContainingType, inProgress) 714517"];
1447 [label="param UsesIsNullable(TypeSymbol type) 714518"];
1448 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714519"];
1449 [label="if (type is null)\n            {\n                return false;\n            } 714520"];
1450 [label="return false; 714521"];
1451 [label="return false; 714522"];
1452 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714523"];
1453 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 714524"];
1454 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 714525"];
1455 [label="param AddIfUsesIsNullable(Symbol symbol) 714526"];
1456 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 714527"];
1457 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714528"];
1458 [label="param AddIfUsesIsNullable(this) 714529"];
1459 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 714530"];
1460 [label="param AddIfUsesIsNullable(Symbol symbol) 714531"];
1461 [label="if (!type.HasType)\n            {\n                return false;\n            } 714532"];
1462 [label="if (type is null)\n            {\n                return false;\n            } 714533"];
1463 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 714534"];
1464 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714535"];
1465 [label="UsesIsNullable(type.ContainingType, inProgress) 714536"];
1466 [label="param UsesIsNullable(TypeSymbol type) 714537"];
1467 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714538"];
1468 [label="if (type is null)\n            {\n                return false;\n            } 714539"];
1469 [label="return false; 714540"];
1470 [label="param AddIfUsesIsNullable(Symbol symbol) 714541"];
1471 [label="return result; 714542"];
1472 [label="return VisitList(symbol.GetMembers()); 714543"];
1473 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 714544"];
1474 [label="param AddIfUsesIsNullable(Symbol symbol) 714545"];
1475 [label="if (type is null)\n            {\n                return false;\n            } 714546"];
1476 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 714547"];
1477 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714548"];
1478 [label="UsesIsNullable(type.ContainingType, inProgress) 714549"];
1479 [label="param UsesIsNullable(TypeSymbol type) 714550"];
1480 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714551"];
1481 [label="if (type is null)\n            {\n                return false;\n            } 714552"];
1482 [label="return false; 714553"];
1483 [label="return false; 714554"];
1484 [label="AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) 714555"];
1485 [label="param AddIfUsesIsNullable(Symbol symbol) 714556"];
1486 [label="param AddIfUsesIsNullable(ImmutableArray<NamedTypeSymbol> types) 714557"];
1487 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714558"];
1488 [label="param AddIfUsesIsNullable(this) 714559"];
1489 [label="foreach (var type in types)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 714560"];
1490 [label="return false; 714561"];
1491 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 714562"];
1492 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 714563"];
1493 [label="param AddIfUsesIsNullable(Symbol symbol) 714564"];
1494 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 714565"];
1495 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714566"];
1496 [label="param AddIfUsesIsNullable(this) 714567"];
1497 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 714568"];
1498 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 714569"];
1499 [label="_compilation 714570"];
1500 [label="_syntaxTree 714571"];
1501 [label="_ignoreAccessibility 714572"];
1502 [label="RoslynDebug.Assert(compilation != null); 714573"];
1503 [label="Debug.Assert(node != null); 714574"];
1504 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 714575"];
1505 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 714576"];
1506 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 714577"];
1507 [label="param VisitClassDeclaration(this) 714578"];
1508 [label="return VisitTypeDeclarationCore(node); 714579"];
1509 [label="VisitTypeDeclarationCore(node) 714580"];
1510 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 714581"];
1511 [label="param VisitTypeDeclarationCore(this) 714582"];
1512 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 714583"];
1513 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 714584"];
1514 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 714585"];
1515 [label="NodeUsage extraInfo = NodeUsage.Normal; 714586"];
1516 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 714587"];
1517 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 714588"];
1518 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 714589"];
1519 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 714590"];
1520 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 714591"];
1521 [label="return VisitTypeDeclarationCore(parent, extraInfo); 714592"];
1522 [label="return VisitTypeDeclarationCore(parent, extraInfo); 714593"];
1523 [label="VisitTypeDeclarationCore(parent, extraInfo) 714594"];
1524 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 714595"];
1525 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 714596"];
1526 [label="param VisitTypeDeclarationCore(this) 714597"];
1527 [label="var key = CreateBinderCacheKey(parent, extraInfo); 714598"];
1528 [label="var key = CreateBinderCacheKey(parent, extraInfo); 714599"];
1529 [label="CreateBinderCacheKey(parent, extraInfo) 714600"];
1530 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 714601"];
1531 [label="param CreateBinderCacheKey(NodeUsage usage) 714602"];
1532 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714603"];
1533 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714604"];
1534 [label="var key = CreateBinderCacheKey(parent, extraInfo); 714605"];
1535 [label="Binder resultBinder; 714606"];
1536 [label="binderCache 714607"];
1537 [label="get\n                {\n                    return _factory._binderCache;\n                } 714608"];
1538 [label="return _factory._binderCache; 714609"];
1539 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 714610"];
1540 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 714611"];
1541 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 714612"];
1542 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 714613"];
1543 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 714614"];
1544 [label="resultBinder = VisitCore(parent.Parent); 714615"];
1545 [label="VisitCore(parent.Parent) 714616"];
1546 [label="param VisitCore(SyntaxNode node) 714617"];
1547 [label="SyntaxToken token; 714618"];
1548 [label="token 714619"];
1549 [label="syntaxTree 714620"];
1550 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 714621"];
1551 [label="return _factory._syntaxTree; 714622"];
1552 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 714623"];
1553 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 714624"];
1554 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714625"];
1555 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714626"];
1556 [label="RoslynDebug.Assert(next != null); 714627"];
1557 [label="_container 714628"];
1558 [label="Debug.Assert((object)container != null); 714629"];
1559 [label="Debug.Assert(declarationSyntax != null); 714630"];
1560 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 714631"];
1561 [label="resultBinder.ContainingMemberOrLambda 714632"];
1562 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 714633"];
1563 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 714634"];
1564 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 714635"];
1565 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 714636"];
1566 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 714637"];
1567 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 714638"];
1568 [label="new InContainerBinder(typeSymbol, resultBinder) 714639"];
1569 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 714640"];
1570 [label="param InContainerBinder(Binder next) 714641"];
1571 [label="param InContainerBinder(Imports imports = null) 714642"];
1572 [label="param InContainerBinder(this) 714643"];
1573 [label="RoslynDebug.Assert(next != null); 714644"];
1574 [label="RoslynDebug.Assert(next != null); 714645"];
1575 [label="this.Flags 714646"];
1576 [label="this.Compilation 714647"];
1577 [label="_container 714648"];
1578 [label="Debug.Assert((object)container != null || imports != null); 714649"];
1579 [label="Debug.Assert((object)container != null || imports != null); 714650"];
1580 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 714651"];
1581 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 714652"];
1582 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 714653"];
1583 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 714654"];
1584 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 714655"];
1585 [label="param WithUnsafeRegionIfNecessary(this) 714656"];
1586 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 714657"];
1587 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 714658"];
1588 [label="binderCache 714659"];
1589 [label="return _factory._binderCache; 714660"];
1590 [label="binderCache.TryAdd(key, resultBinder); 714661"];
1591 [label="binderCache.TryAdd(key, resultBinder); 714662"];
1592 [label="binderCache.TryAdd(key, resultBinder); 714663"];
1593 [label="binderCache.TryAdd(key, resultBinder); 714664"];
1594 [label="binderCache.TryAdd(key, resultBinder); 714665"];
1595 [label="return resultBinder; 714666"];
1596 [label="return ((CSharpSyntaxNode)node).Accept(this); 714667"];
1597 [label="param VisitField(FieldSymbol symbol) 714668"];
1598 [label="param VisitField(this) 714669"];
1599 [label="return AddIfUsesIsNullable(symbol, symbol.TypeWithAnnotations, inProgress: null); 714670"];
1600 [label="symbol.TypeWithAnnotations 714671"];
1601 [label="param BinderFactory(CSharpCompilation compilation) 714672"];
1602 [label="param BinderFactory(SyntaxTree syntaxTree) 714673"];
1603 [label="param BinderFactory(bool ignoreAccessibility) 714674"];
1604 [label="param BinderFactory(this) 714675"];
1605 [label="_compilation 714676"];
1606 [label="_syntaxTree 714677"];
1607 [label="_ignoreAccessibility 714678"];
1608 [label="RoslynDebug.Assert(compilation != null); 714679"];
1609 [label="RoslynDebug.Assert(compilation != null); 714680"];
1610 [label="param GetBinder(SyntaxNode node) 714681"];
1611 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 714682"];
1612 [label="param GetBinder(Symbol memberOpt = null) 714683"];
1613 [label="param GetBinder(this) 714684"];
1614 [label="Debug.Assert(node != null); 714685"];
1615 [label="Debug.Assert(node != null); 714686"];
1616 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 714687"];
1617 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 714688"];
1618 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 714689"];
1619 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 714690"];
1620 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 714691"];
1621 [label="param DefaultVisit(SyntaxNode parent) 714692"];
1622 [label="param DefaultVisit(this) 714693"];
1623 [label="return VisitCore(parent.Parent); 714694"];
1624 [label="VisitCore(parent.Parent) 714695"];
1625 [label="param VisitCore(SyntaxNode node) 714696"];
1626 [label="param VisitCore(this) 714697"];
1627 [label="return ((CSharpSyntaxNode)node).Accept(this); 714698"];
1628 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 714699"];
1629 [label="param VisitFieldDeclaration(this) 714700"];
1630 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 714701"];
1631 [label="VisitCore(parent.Parent) 714702"];
1632 [label="param VisitCore(SyntaxNode node) 714703"];
1633 [label="param VisitCore(this) 714704"];
1634 [label="return ((CSharpSyntaxNode)node).Accept(this); 714705"];
1635 [label="NodeUsage extraInfo = NodeUsage.Normal; 714706"];
1636 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714707"];
1637 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714708"];
1638 [label="SyntaxToken token; 714709"];
1639 [label="token 714710"];
1640 [label="syntaxTree 714711"];
1641 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 714712"];
1642 [label="return _factory._syntaxTree; 714713"];
1643 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 714714"];
1644 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 714715"];
1645 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714716"];
1646 [label="RoslynDebug.Assert(next != null); 714717"];
1647 [label="_container 714718"];
1648 [label="Debug.Assert((object)container != null); 714719"];
1649 [label="Debug.Assert(declarationSyntax != null); 714720"];
1650 [label="Debug.Assert((object)container != null || imports != null); 714721"];
1651 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 714722"];
1652 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 714723"];
1653 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 714724"];
1654 [label="param WithUnsafeRegionIfNecessary(this) 714725"];
1655 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 714726"];
1656 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 714727"];
1657 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 714728"];
1658 [label="Debug.Assert((object)containing != null); 714729"];
1659 [label="Debug.Assert((object)containing != null); 714730"];
1660 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 714731"];
1661 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 714732"];
1662 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 714733"];
1663 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 714734"];
1664 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 714735"];
1665 [label="param BinderWithContainingMemberOrLambda(Binder next) 714736"];
1666 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 714737"];
1667 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 714738"];
1668 [label="param BinderWithContainingMemberOrLambda(this) 714739"];
1669 [label="next 714740"];
1670 [label="flags 714741"];
1671 [label="param BinderWithContainingMemberOrLambda(this) 714742"];
1672 [label="param Binder(Binder next) 714743"];
1673 [label="param Binder(BinderFlags flags) 714744"];
1674 [label="param Binder(this) 714745"];
1675 [label="RoslynDebug.Assert(next != null); 714746"];
1676 [label="RoslynDebug.Assert(next != null); 714747"];
1677 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 714748"];
1678 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 714749"];
1679 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 714750"];
1680 [label="param Includes(this BinderFlags self) 714751"];
1681 [label="param Includes(BinderFlags other) 714752"];
1682 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 714753"];
1683 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 714754"];
1684 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 714755"];
1685 [label="param Includes(this BinderFlags self) 714756"];
1686 [label="param Includes(BinderFlags other) 714757"];
1687 [label="Next 714758"];
1688 [label="this.Flags 714759"];
1689 [label="this.Compilation 714760"];
1690 [label="_containingMemberOrLambda 714761"];
1691 [label="Debug.Assert(containingMemberOrLambda != null); 714762"];
1692 [label="Debug.Assert(containingMemberOrLambda != null); 714763"];
1693 [label="_containingMemberOrLambda 714764"];
1694 [label="return AddIfUsesIsNullable(symbol, symbol.TypeWithAnnotations, inProgress: null); 714765"];
1695 [label="return AddIfUsesIsNullable(symbol, symbol.TypeWithAnnotations, inProgress: null); 714766"];
1696 [label="param BindType(ExpressionSyntax syntax) 714767"];
1697 [label="param BindType(DiagnosticBag diagnostics) 714768"];
1698 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 714769"];
1699 [label="param BindType(bool suppressUseSiteDiagnostics = false) 714770"];
1700 [label="param BindType(this) 714771"];
1701 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 714772"];
1702 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 714773"];
1703 [label="Debug.Assert(diagnostics != null); 714774"];
1704 [label="Debug.Assert(diagnostics != null); 714775"];
1705 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714776"];
1706 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 714777"];
1707 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 714778"];
1708 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 714779"];
1709 [label="return bindPredefined(syntax, diagnostics); 714780"];
1710 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 714781"];
1711 [label="param GetSpecialType(DiagnosticBag diagnostics) 714782"];
1712 [label="param GetSpecialType(SyntaxNode node) 714783"];
1713 [label="param GetSpecialType(SyntaxNode node) 714784"];
1714 [label="param GetSpecialType(DiagnosticBag diagnostics) 714785"];
1715 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 714786"];
1716 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 714787"];
1717 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 714788"];
1718 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 714789"];
1719 [label="Debug.Assert(typeWithAnnotations.HasType); 714790"];
1720 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714791"];
1721 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 714792"];
1722 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714793"];
1723 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714794"];
1724 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 714795"];
1725 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714796"];
1726 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714797"];
1727 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 714798"];
1728 [label="get { return _containingMemberOrLambda; } 714799"];
1729 [label="return _containingMemberOrLambda; 714800"];
1730 [label="get { return _containingMemberOrLambda; } 714801"];
1731 [label="return _containingMemberOrLambda; 714802"];
1732 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 714803"];
1733 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 714804"];
1734 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 714805"];
1735 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714806"];
1736 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 714807"];
1737 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714808"];
1738 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 714809"];
1739 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 714810"];
1740 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 714811"];
1741 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 714812"];
1742 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 714813"];
1743 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 714814"];
1744 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 714815"];
1745 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 714816"];
1746 [label="RoslynDebug.Assert(diagnostics != null); 714817"];
1747 [label="RoslynDebug.Assert(diagnostics != null); 714818"];
1748 [label="DiagnosticInfo? info = null; 714819"];
1749 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 714820"];
1750 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 714821"];
1751 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 714822"];
1752 [label="return kind; 714823"];
1753 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 714824"];
1754 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 714825"];
1755 [label="param UnwrapAlias(DiagnosticBag diagnostics) 714826"];
1756 [label="param UnwrapAlias(SyntaxNode syntax) 714827"];
1757 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 714828"];
1758 [label="param UnwrapAlias(this) 714829"];
1759 [label="symbol.IsAlias 714830"];
1760 [label="=> _symbol?.Kind == SymbolKind.Alias 714831"];
1761 [label="_symbol 714832"];
1762 [label="_symbol?.Kind == SymbolKind.Alias 714833"];
1763 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 714834"];
1764 [label="return AddIfUsesIsNullable(symbol, symbol.TypeWithAnnotations, inProgress: null); 714835"];
1765 [label="AddIfUsesIsNullable(symbol, symbol.TypeWithAnnotations, inProgress: null) 714836"];
1766 [label="param AddIfUsesIsNullable(Symbol symbol) 714837"];
1767 [label="param AddIfUsesIsNullable(TypeWithAnnotations type) 714838"];
1768 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714839"];
1769 [label="param AddIfUsesIsNullable(this) 714840"];
1770 [label="if (!type.HasType)\n            {\n                return false;\n            } 714841"];
1771 [label="if (type is null)\n            {\n                return false;\n            } 714842"];
1772 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 714843"];
1773 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714844"];
1774 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 714845"];
1775 [label="UsesIsNullable(type.ContainingType, inProgress) 714846"];
1776 [label="param UsesIsNullable(TypeSymbol type) 714847"];
1777 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714848"];
1778 [label="param UsesIsNullable(this) 714849"];
1779 [label="if (type is null)\n            {\n                return false;\n            } 714850"];
1780 [label="return false; 714851"];
1781 [label="param UsesIsNullable(this) 714852"];
1782 [label="return AddIfUsesIsNullable(symbol, symbol.TypeWithAnnotations, inProgress: null); 714853"];
1783 [label="param AddIfUsesIsNullable(Symbol symbol) 714854"];
1784 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 714855"];
1785 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 714856"];
1786 [label="param AddIfUsesIsNullable(this) 714857"];
1787 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 714858"];
1788 [label="symbol.ReturnTypeWithAnnotations 714859"];
1789 [label="_compilation 714860"];
1790 [label="_syntaxTree 714861"];
1791 [label="_ignoreAccessibility 714862"];
1792 [label="RoslynDebug.Assert(compilation != null); 714863"];
1793 [label="Debug.Assert(node != null); 714864"];
1794 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 714865"];
1795 [label="container.AssertMemberExposure(memberOpt); 714866"];
1796 [label="container.AssertMemberExposure(memberOpt); 714867"];
1797 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 714868"];
1798 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 714869"];
1799 [label="param VisitMethodDeclaration(this) 714870"];
1800 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 714871"];
1801 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 714872"];
1802 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 714873"];
1803 [label="NodeUsage usage; 714874"];
1804 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 714875"];
1805 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 714876"];
1806 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 714877"];
1807 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 714878"];
1808 [label="usage = NodeUsage.Normal; 714879"];
1809 [label="var key = CreateBinderCacheKey(methodDecl, usage); 714880"];
1810 [label="var key = CreateBinderCacheKey(methodDecl, usage); 714881"];
1811 [label="CreateBinderCacheKey(methodDecl, usage) 714882"];
1812 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 714883"];
1813 [label="param CreateBinderCacheKey(NodeUsage usage) 714884"];
1814 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714885"];
1815 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714886"];
1816 [label="var key = CreateBinderCacheKey(methodDecl, usage); 714887"];
1817 [label="Binder resultBinder; 714888"];
1818 [label="binderCache 714889"];
1819 [label="get\n                {\n                    return _factory._binderCache;\n                } 714890"];
1820 [label="return _factory._binderCache; 714891"];
1821 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 714892"];
1822 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 714893"];
1823 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 714894"];
1824 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 714895"];
1825 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 714896"];
1826 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 714897"];
1827 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 714898"];
1828 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 714899"];
1829 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 714900"];
1830 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 714901"];
1831 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 714902"];
1832 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 714903"];
1833 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 714904"];
1834 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714905"];
1835 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714906"];
1836 [label="SyntaxToken token; 714907"];
1837 [label="token 714908"];
1838 [label="syntaxTree 714909"];
1839 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 714910"];
1840 [label="return _factory._syntaxTree; 714911"];
1841 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 714912"];
1842 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 714913"];
1843 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 714914"];
1844 [label="RoslynDebug.Assert(next != null); 714915"];
1845 [label="_container 714916"];
1846 [label="Debug.Assert((object)container != null); 714917"];
1847 [label="Debug.Assert(declarationSyntax != null); 714918"];
1848 [label="RoslynDebug.Assert(next != null); 714919"];
1849 [label="_container 714920"];
1850 [label="Debug.Assert((object)container != null || imports != null); 714921"];
1851 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 714922"];
1852 [label="SourceMemberMethodSymbol method = null; 714923"];
1853 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 714924"];
1854 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 714925"];
1855 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 714926"];
1856 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 714927"];
1857 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 714928"];
1858 [label="param WithUnsafeRegionIfNecessary(this) 714929"];
1859 [label="binderCache 714930"];
1860 [label="return _factory._binderCache; 714931"];
1861 [label="binderCache.TryAdd(key, resultBinder); 714932"];
1862 [label="binderCache.TryAdd(key, resultBinder); 714933"];
1863 [label="binderCache.TryAdd(key, resultBinder); 714934"];
1864 [label="binderCache.TryAdd(key, resultBinder); 714935"];
1865 [label="return resultBinder; 714936"];
1866 [label="return ((CSharpSyntaxNode)node).Accept(this); 714937"];
1867 [label="Debug.Assert((object)containing != null); 714938"];
1868 [label="RoslynDebug.Assert(next != null); 714939"];
1869 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 714940"];
1870 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 714941"];
1871 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 714942"];
1872 [label="param Includes(this BinderFlags self) 714943"];
1873 [label="param Includes(BinderFlags other) 714944"];
1874 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 714945"];
1875 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 714946"];
1876 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 714947"];
1877 [label="param Includes(this BinderFlags self) 714948"];
1878 [label="param Includes(BinderFlags other) 714949"];
1879 [label="_containingMemberOrLambda 714950"];
1880 [label="Debug.Assert(containingMemberOrLambda != null); 714951"];
1881 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 714952"];
1882 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 714953"];
1883 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 714954"];
1884 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 714955"];
1885 [label="param ValidateParameterNameConflicts(this) 714956"];
1886 [label="PooledHashSet<string>? tpNames = null; 714957"];
1887 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 714958"];
1888 [label="PooledHashSet<string>? pNames = null; 714959"];
1889 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 714960"];
1890 [label="tpNames?.Free(); 714961"];
1891 [label="pNames?.Free(); 714962"];
1892 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 714963"];
1893 [label="param BindType(bool suppressUseSiteDiagnostics = false) 714964"];
1894 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 714965"];
1895 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 714966"];
1896 [label="Debug.Assert(diagnostics != null); 714967"];
1897 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 714968"];
1898 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 714969"];
1899 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 714970"];
1900 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 714971"];
1901 [label="return bindPredefined(syntax, diagnostics); 714972"];
1902 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 714973"];
1903 [label="param GetSpecialType(DiagnosticBag diagnostics) 714974"];
1904 [label="param GetSpecialType(SyntaxNode node) 714975"];
1905 [label="param GetSpecialType(DiagnosticBag diagnostics) 714976"];
1906 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 714977"];
1907 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 714978"];
1908 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 714979"];
1909 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 714980"];
1910 [label="Debug.Assert(typeWithAnnotations.HasType); 714981"];
1911 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 714982"];
1912 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714983"];
1913 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714984"];
1914 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 714985"];
1915 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714986"];
1916 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 714987"];
1917 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 714988"];
1918 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 714989"];
1919 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 714990"];
1920 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 714991"];
1921 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 714992"];
1922 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 714993"];
1923 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 714994"];
1924 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 714995"];
1925 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 714996"];
1926 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 714997"];
1927 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 714998"];
1928 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 714999"];
1929 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 715000"];
1930 [label="RoslynDebug.Assert(diagnostics != null); 715001"];
1931 [label="RoslynDebug.Assert(diagnostics != null); 715002"];
1932 [label="DiagnosticInfo? info = null; 715003"];
1933 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 715004"];
1934 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 715005"];
1935 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 715006"];
1936 [label="return kind; 715007"];
1937 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 715008"];
1938 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 715009"];
1939 [label="param UnwrapAlias(DiagnosticBag diagnostics) 715010"];
1940 [label="param UnwrapAlias(SyntaxNode syntax) 715011"];
1941 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 715012"];
1942 [label="param UnwrapAlias(this) 715013"];
1943 [label="symbol.IsAlias 715014"];
1944 [label="=> _symbol?.Kind == SymbolKind.Alias 715015"];
1945 [label="_symbol 715016"];
1946 [label="_symbol?.Kind == SymbolKind.Alias 715017"];
1947 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 715018"];
1948 [label="param AddIfUsesIsNullable(Symbol symbol) 715019"];
1949 [label="if (!type.HasType)\n            {\n                return false;\n            } 715020"];
1950 [label="if (type is null)\n            {\n                return false;\n            } 715021"];
1951 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 715022"];
1952 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 715023"];
1953 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 715024"];
1954 [label="UsesIsNullable(type.ContainingType, inProgress) 715025"];
1955 [label="param UsesIsNullable(TypeSymbol type) 715026"];
1956 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 715027"];
1957 [label="if (type is null)\n            {\n                return false;\n            } 715028"];
1958 [label="return false; 715029"];
1959 [label="param AddIfUsesIsNullable(Symbol symbol) 715030"];
1960 [label="param AddIfUsesIsNullable(Symbol symbol) 715031"];
1961 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 715032"];
1962 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 715033"];
1963 [label="param AddIfUsesIsNullable(this) 715034"];
1964 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 715035"];
1965 [label="Debug.Assert(node != null); 715036"];
1966 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 715037"];
1967 [label="NodeUsage usage; 715038"];
1968 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 715039"];
1969 [label="param Equals(BinderCacheKey other) 715040"];
1970 [label="param Equals(this) 715041"];
1971 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 715042"];
1972 [label="SourceMemberMethodSymbol method = null; 715043"];
1973 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 715044"];
1974 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 715045"];
1975 [label="Debug.Assert((object)containing != null); 715046"];
1976 [label="RoslynDebug.Assert(next != null); 715047"];
1977 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 715048"];
1978 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 715049"];
1979 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 715050"];
1980 [label="param Includes(this BinderFlags self) 715051"];
1981 [label="param Includes(BinderFlags other) 715052"];
1982 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 715053"];
1983 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 715054"];
1984 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 715055"];
1985 [label="param Includes(this BinderFlags self) 715056"];
1986 [label="param Includes(BinderFlags other) 715057"];
1987 [label="_containingMemberOrLambda 715058"];
1988 [label="Debug.Assert(containingMemberOrLambda != null); 715059"];
1989 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 715060"];
1990 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 715061"];
1991 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 715062"];
1992 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 715063"];
1993 [label="param ValidateParameterNameConflicts(this) 715064"];
1994 [label="PooledHashSet<string>? tpNames = null; 715065"];
1995 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 715066"];
1996 [label="PooledHashSet<string>? pNames = null; 715067"];
1997 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 715068"];
1998 [label="tpNames?.Free(); 715069"];
1999 [label="pNames?.Free(); 715070"];
2000 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 715071"];
2001 [label="param BindType(bool suppressUseSiteDiagnostics = false) 715072"];
2002 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 715073"];
2003 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 715074"];
2004 [label="Debug.Assert(diagnostics != null); 715075"];
2005 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715076"];
2006 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 715077"];
2007 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 715078"];
2008 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 715079"];
2009 [label="return bindPredefined(syntax, diagnostics); 715080"];
2010 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 715081"];
2011 [label="param GetSpecialType(DiagnosticBag diagnostics) 715082"];
2012 [label="param GetSpecialType(SyntaxNode node) 715083"];
2013 [label="param GetSpecialType(DiagnosticBag diagnostics) 715084"];
2014 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 715085"];
2015 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 715086"];
2016 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 715087"];
2017 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 715088"];
2018 [label="Debug.Assert(typeWithAnnotations.HasType); 715089"];
2019 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 715090"];
2020 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 715091"];
2021 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 715092"];
2022 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 715093"];
2023 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 715094"];
2024 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 715095"];
2025 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 715096"];
2026 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 715097"];
2027 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 715098"];
2028 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 715099"];
2029 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 715100"];
2030 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 715101"];
2031 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 715102"];
2032 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 715103"];
2033 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 715104"];
2034 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 715105"];
2035 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 715106"];
2036 [label="RoslynDebug.Assert(diagnostics != null); 715107"];
2037 [label="RoslynDebug.Assert(diagnostics != null); 715108"];
2038 [label="DiagnosticInfo? info = null; 715109"];
2039 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 715110"];
2040 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 715111"];
2041 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 715112"];
2042 [label="return kind; 715113"];
2043 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 715114"];
2044 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 715115"];
2045 [label="param UnwrapAlias(DiagnosticBag diagnostics) 715116"];
2046 [label="param UnwrapAlias(SyntaxNode syntax) 715117"];
2047 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 715118"];
2048 [label="param UnwrapAlias(this) 715119"];
2049 [label="symbol.IsAlias 715120"];
2050 [label="=> _symbol?.Kind == SymbolKind.Alias 715121"];
2051 [label="_symbol 715122"];
2052 [label="_symbol?.Kind == SymbolKind.Alias 715123"];
2053 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 715124"];
2054 [label="param AddIfUsesIsNullable(Symbol symbol) 715125"];
2055 [label="if (!type.HasType)\n            {\n                return false;\n            } 715126"];
2056 [label="if (type is null)\n            {\n                return false;\n            } 715127"];
2057 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 715128"];
2058 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 715129"];
2059 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 715130"];
2060 [label="UsesIsNullable(type.ContainingType, inProgress) 715131"];
2061 [label="param UsesIsNullable(TypeSymbol type) 715132"];
2062 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 715133"];
2063 [label="if (type is null)\n            {\n                return false;\n            } 715134"];
2064 [label="return false; 715135"];
2065 [label="param AddIfUsesIsNullable(Symbol symbol) 715136"];
2066 [label="param AddIfUsesIsNullable(Symbol symbol) 715137"];
2067 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 715138"];
2068 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 715139"];
2069 [label="param AddIfUsesIsNullable(this) 715140"];
2070 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 715141"];
2071 [label="param AddIfUsesIsNullable(Symbol symbol) 715142"];
2072 [label="if (!type.HasType)\n            {\n                return false;\n            } 715143"];
2073 [label="if (type is null)\n            {\n                return false;\n            } 715144"];
2074 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 715145"];
2075 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 715146"];
2076 [label="UsesIsNullable(type.ContainingType, inProgress) 715147"];
2077 [label="param UsesIsNullable(TypeSymbol type) 715148"];
2078 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 715149"];
2079 [label="if (type is null)\n            {\n                return false;\n            } 715150"];
2080 [label="return false; 715151"];
2081 [label="param AddIfUsesIsNullable(Symbol symbol) 715152"];
2082 [label="return result; 715153"];
2083 [label="return VisitList(symbol.GetMembers()); 715154"];
2084 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 715155"];
2085 [label="var format = SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .RemoveParameterOptions(SymbolDisplayParameterOptions.IncludeName); 715156"];
2086 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 715157"];
2087 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 715158"];
2088 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 715159"];
2089 [label="builder.Free(); 715160"];
2090 [label="'ROSLYN_DIFFTOOL' 715161"];
2091 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 715162"];
2092 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 715163"];
2093 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 715164"];
2094 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 715165"];
2095 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 715166"];
2096 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\'') 715167"];
2097 [label="param Equal(IEnumerable<T> expected) 715168"];
2098 [label="param Equal(IEnumerable<T> actual) 715169"];
2099 [label="param Equal(IEqualityComparer<T> comparer = null) 715170"];
2100 [label="param Equal(string message = null) 715171"];
2101 [label="param Equal(string itemSeparator = null) 715172"];
2102 [label="param Equal(Func<T, string> itemInspector = null) 715173"];
2103 [label="param Equal(string expectedValueSourcePath = null) 715174"];
2104 [label="param Equal(int expectedValueSourceLine = 0) 715175"];
2105 [label="var toReturn = true; 715176"];
2106 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 715177"];
2107 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 715178"];
2108 [label="CustomAssert.NotNull(actual); 715179"];
2109 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 715180"];
2110 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 715181"];
2111 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 715182"];
2112 [label="SequenceEqual(expected, actual, comparer) 715183"];
2113 [label="param SequenceEqual(IEnumerable<T> expected) 715184"];
2114 [label="param SequenceEqual(IEnumerable<T> actual) 715185"];
2115 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 715186"];
2116 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 715187"];
2117 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 715188"];
2118 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 715189"];
2119 [label="var enumerator1 = expected.GetEnumerator(); 715190"];
2120 [label="var enumerator2 = actual.GetEnumerator(); 715191"];
2121 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 715192"];
2122 [label="var hasNext1 = enumerator1.MoveNext(); 715193"];
2123 [label="var hasNext2 = enumerator2.MoveNext(); 715194"];
2124 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 715195"];
2125 [label="if (!hasNext1)\n                {\n                    break;\n                } 715196"];
2126 [label="return true; 715197"];
2127 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 715198"];
2128 [label="return true; 715199"];
2129 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 715200"];
2130 [label="return compilation; 715201"];
2131 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 715202"];
2132 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M') 715203"];
2133 [label="param Diagnostic(object code) 715204"];
2134 [label="param Diagnostic(string squiggledText = null) 715205"];
2135 [label="param Diagnostic(object[] arguments = null) 715206"];
2136 [label="param Diagnostic(LinePosition? startLocation = null) 715207"];
2137 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 715208"];
2138 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 715209"];
2139 [label="param Diagnostic(bool isSuppressed = false) 715210"];
2140 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715211"];
2141 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715212"];
2142 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715213"];
2143 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715214"];
2144 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715215"];
2145 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715216"];
2146 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715217"];
2147 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 715218"];
2148 [label="param Diagnostic(object code) 715219"];
2149 [label="param Diagnostic(string squiggledText = null) 715220"];
2150 [label="param Diagnostic(object[] arguments = null) 715221"];
2151 [label="param Diagnostic(LinePosition? startLocation = null) 715222"];
2152 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 715223"];
2153 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 715224"];
2154 [label="param Diagnostic(bool isSuppressed = false) 715225"];
2155 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 715226"];
2156 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715227"];
2157 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715228"];
2158 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715229"];
2159 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715230"];
2160 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715231"];
2161 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715232"];
2162 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715233"];
2163 [label="{ } 715234"];
2164 [label="None = { } 715235"];
2165 [label="null 715236"];
2166 [label="Any = null 715237"];
2167 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 715238"];
2168 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 715239"];
2169 [label="param DiagnosticDescription(object code) 715240"];
2170 [label="param DiagnosticDescription(bool isWarningAsError) 715241"];
2171 [label="param DiagnosticDescription(string squiggledText) 715242"];
2172 [label="param DiagnosticDescription(object[] arguments) 715243"];
2173 [label="param DiagnosticDescription(LinePosition? startLocation) 715244"];
2174 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 715245"];
2175 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 715246"];
2176 [label="param DiagnosticDescription(Type errorCodeType = null) 715247"];
2177 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 715248"];
2178 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 715249"];
2179 [label="param DiagnosticDescription(bool isSuppressed = false) 715250"];
2180 [label="param DiagnosticDescription(this) 715251"];
2181 [label="_code 715252"];
2182 [label="_isWarningAsError 715253"];
2183 [label="_isSuppressed 715254"];
2184 [label="_squiggledText 715255"];
2185 [label="_arguments 715256"];
2186 [label="_startPosition 715257"];
2187 [label="_argumentOrderDoesNotMatter 715258"];
2188 [label="_errorCodeType 715259"];
2189 [label="_ignoreArgumentsWhenComparing 715260"];
2190 [label="_defaultSeverityOpt 715261"];
2191 [label="_effectiveSeverityOpt 715262"];
2192 [label="_syntaxPredicate 715263"];
2193 [label="_showPredicate 715264"];
2194 [label="_location 715265"];
2195 [label="_argumentsAsStrings 715266"];
2196 [label="_code 715267"];
2197 [label="_isWarningAsError 715268"];
2198 [label="_squiggledText 715269"];
2199 [label="_arguments 715270"];
2200 [label="_startPosition 715271"];
2201 [label="_syntaxPredicate 715272"];
2202 [label="_argumentOrderDoesNotMatter 715273"];
2203 [label="_errorCodeType = errorCodeType ?? code.GetType(); 715274"];
2204 [label="_errorCodeType 715275"];
2205 [label="_defaultSeverityOpt 715276"];
2206 [label="_effectiveSeverityOpt 715277"];
2207 [label="_isSuppressed 715278"];
2208 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 715279"];
2209 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 715280"];
2210 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D') 715281"];
2211 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D') 715282"];
2212 [label="param WithArguments(params object[] arguments) 715283"];
2213 [label="param WithArguments(this) 715284"];
2214 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715285"];
2215 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715286"];
2216 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715287"];
2217 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715288"];
2218 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715289"];
2219 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715290"];
2220 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715291"];
2221 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715292"];
2222 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715293"];
2223 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715294"];
2224 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715295"];
2225 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 715296"];
2226 [label="param DiagnosticDescription(object code) 715297"];
2227 [label="param DiagnosticDescription(bool isWarningAsError) 715298"];
2228 [label="param DiagnosticDescription(string squiggledText) 715299"];
2229 [label="param DiagnosticDescription(object[] arguments) 715300"];
2230 [label="param DiagnosticDescription(LinePosition? startLocation) 715301"];
2231 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 715302"];
2232 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 715303"];
2233 [label="param DiagnosticDescription(Type errorCodeType = null) 715304"];
2234 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 715305"];
2235 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 715306"];
2236 [label="param DiagnosticDescription(bool isSuppressed = false) 715307"];
2237 [label="param DiagnosticDescription(this) 715308"];
2238 [label="_code 715309"];
2239 [label="_isWarningAsError 715310"];
2240 [label="_isSuppressed 715311"];
2241 [label="_squiggledText 715312"];
2242 [label="_arguments 715313"];
2243 [label="_startPosition 715314"];
2244 [label="_argumentOrderDoesNotMatter 715315"];
2245 [label="_errorCodeType 715316"];
2246 [label="_ignoreArgumentsWhenComparing 715317"];
2247 [label="_defaultSeverityOpt 715318"];
2248 [label="_effectiveSeverityOpt 715319"];
2249 [label="_syntaxPredicate 715320"];
2250 [label="_showPredicate 715321"];
2251 [label="_location 715322"];
2252 [label="_argumentsAsStrings 715323"];
2253 [label="_arguments 715324"];
2254 [label="_argumentOrderDoesNotMatter 715325"];
2255 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 715326"];
2256 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15) 715327"];
2257 [label="param WithLocation(int line) 715328"];
2258 [label="param WithLocation(int column) 715329"];
2259 [label="param WithLocation(this) 715330"];
2260 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715331"];
2261 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715332"];
2262 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715333"];
2263 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715334"];
2264 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715335"];
2265 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715336"];
2266 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715337"];
2267 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715338"];
2268 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715339"];
2269 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715340"];
2270 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715341"];
2271 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715342"];
2272 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715343"];
2273 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 715344"];
2274 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 715345"];
2275 [label="param DiagnosticDescription(object code) 715346"];
2276 [label="param DiagnosticDescription(bool isWarningAsError) 715347"];
2277 [label="param DiagnosticDescription(string squiggledText) 715348"];
2278 [label="param DiagnosticDescription(object[] arguments) 715349"];
2279 [label="param DiagnosticDescription(LinePosition? startLocation) 715350"];
2280 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 715351"];
2281 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 715352"];
2282 [label="param DiagnosticDescription(Type errorCodeType = null) 715353"];
2283 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 715354"];
2284 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 715355"];
2285 [label="param DiagnosticDescription(bool isSuppressed = false) 715356"];
2286 [label="param DiagnosticDescription(this) 715357"];
2287 [label="_code 715358"];
2288 [label="_isWarningAsError 715359"];
2289 [label="_isSuppressed 715360"];
2290 [label="_squiggledText 715361"];
2291 [label="_arguments 715362"];
2292 [label="_startPosition 715363"];
2293 [label="_argumentOrderDoesNotMatter 715364"];
2294 [label="_errorCodeType 715365"];
2295 [label="_ignoreArgumentsWhenComparing 715366"];
2296 [label="_defaultSeverityOpt 715367"];
2297 [label="_effectiveSeverityOpt 715368"];
2298 [label="_syntaxPredicate 715369"];
2299 [label="_showPredicate 715370"];
2300 [label="_location 715371"];
2301 [label="_argumentsAsStrings 715372"];
2302 [label="_startPosition 715373"];
2303 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 715374"];
2304 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ) 715375"];
2305 [label="CreateCompilationWithMscorlib45(text, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ) 715376"];
2306 [label="param VerifyDiagnostics(this TCompilation c) 715377"];
2307 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 715378"];
2308 [label="var diagnostics = c.GetDiagnostics(); 715379"];
2309 [label="var diagnostics = c.GetDiagnostics(); 715380"];
2310 [label="param FromGlobalUsings(CSharpCompilation compilation) 715381"];
2311 [label="var usings = compilation.Options.Usings; 715382"];
2312 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 715383"];
2313 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 715384"];
2314 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 715385"];
2315 [label="return Empty; 715386"];
2316 [label="param Complete(CancellationToken cancellationToken) 715387"];
2317 [label="param Complete(this) 715388"];
2318 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 715389"];
2319 [label="cancellationToken.ThrowIfCancellationRequested(); 715390"];
2320 [label="var incompletePart = _state.NextIncompletePart; 715391"];
2321 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 715392"];
2322 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 715393"];
2323 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 715394"];
2324 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 715395"];
2325 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 715396"];
2326 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 715397"];
2327 [label="Validate() 715398"];
2328 [label="param Validate(this) 715399"];
2329 [label="if (this == Empty)\n            {\n                return;\n            } 715400"];
2330 [label="return; 715401"];
2331 [label="Validate(); 715402"];
2332 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 715403"];
2333 [label="return; 715404"];
2334 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 715405"];
2335 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 715406"];
2336 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 715407"];
2337 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 715408"];
2338 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 715409"];
2339 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 715410"];
2340 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 715411"];
2341 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 715412"];
2342 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 715413"];
2343 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 715414"];
2344 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 715415"];
2345 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 715416"];
2346 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 715417"];
2347 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 715418"];
2348 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 715419"];
2349 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 715420"];
2350 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 715421"];
2351 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 715422"];
2352 [label="param GetWellKnownTypeMember(WellKnownMember member) 715423"];
2353 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 715424"];
2354 [label="param GetWellKnownTypeMember(Location location = null) 715425"];
2355 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 715426"];
2356 [label="param GetWellKnownTypeMember(bool isOptional = false) 715427"];
2357 [label="Debug.Assert((syntax != null) ^ (location != null)); 715428"];
2358 [label="Debug.Assert((syntax != null) ^ (location != null)); 715429"];
2359 [label="Debug.Assert((syntax != null) ^ (location != null)); 715430"];
2360 [label="Debug.Assert((syntax != null) ^ (location != null)); 715431"];
2361 [label="DiagnosticInfo useSiteDiagnostic; 715432"];
2362 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 715433"];
2363 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 715434"];
2364 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 715435"];
2365 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 715436"];
2366 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 715437"];
2367 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 715438"];
2368 [label="param GetWellKnownTypeMember(WellKnownMember member) 715439"];
2369 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 715440"];
2370 [label="param GetWellKnownTypeMember(bool isOptional = false) 715441"];
2371 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 715442"];
2372 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 715443"];
2373 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 715444"];
2374 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715445"];
2375 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715446"];
2376 [label="Debug.Assert(symbol is object); 715447"];
2377 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715448"];
2378 [label="isInternal = false; 715449"];
2379 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715450"];
2380 [label="symbol = symbol.ContainingType; 715451"];
2381 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715452"];
2382 [label="return true; 715453"];
2383 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 715454"];
2384 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715455"];
2385 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715456"];
2386 [label="Debug.Assert(symbol is object); 715457"];
2387 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715458"];
2388 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715459"];
2389 [label="symbol = symbol.ContainingType; 715460"];
2390 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715461"];
2391 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715462"];
2392 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 715463"];
2393 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 715464"];
2394 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 715465"];
2395 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 715466"];
2396 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715467"];
2397 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715468"];
2398 [label="Debug.Assert(symbol is object); 715469"];
2399 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715470"];
2400 [label="isInternal = false; 715471"];
2401 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715472"];
2402 [label="symbol = symbol.ContainingType; 715473"];
2403 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715474"];
2404 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715475"];
2405 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715476"];
2406 [label="Debug.Assert(symbol is object); 715477"];
2407 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715478"];
2408 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715479"];
2409 [label="symbol = symbol.ContainingType; 715480"];
2410 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715481"];
2411 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 715482"];
2412 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 715483"];
2413 [label="return memberSymbol; 715484"];
2414 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 715485"];
2415 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 715486"];
2416 [label="return memberSymbol; 715487"];
2417 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715488"];
2418 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715489"];
2419 [label="Debug.Assert(symbol is object); 715490"];
2420 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715491"];
2421 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715492"];
2422 [label="symbol = symbol.ContainingType; 715493"];
2423 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715494"];
2424 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715495"];
2425 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715496"];
2426 [label="Debug.Assert(symbol is object); 715497"];
2427 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715498"];
2428 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715499"];
2429 [label="symbol = symbol.ContainingType; 715500"];
2430 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715501"];
2431 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 715502"];
2432 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 715503"];
2433 [label="return memberSymbol; 715504"];
2434 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 715505"];
2435 [label="return memberSymbol; 715506"];
2436 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 715507"];
2437 [label="return memberSymbol; 715508"];
2438 [label="return memberSymbol; 715509"];
2439 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715510"];
2440 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715511"];
2441 [label="Debug.Assert(symbol is object); 715512"];
2442 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715513"];
2443 [label="isInternal = false; 715514"];
2444 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715515"];
2445 [label="symbol = symbol.ContainingType; 715516"];
2446 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715517"];
2447 [label="return true; 715518"];
2448 [label="var diagnostics = c.GetDiagnostics(); 715519"];
2449 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 715520"];
2450 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 715521"];
2451 [label="Debug.Assert(symbol is object); 715522"];
2452 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715523"];
2453 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 715524"];
2454 [label="symbol = symbol.ContainingType; 715525"];
2455 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 715526"];
2456 [label="param BinderFactory(CSharpCompilation compilation) 715527"];
2457 [label="param BinderFactory(SyntaxTree syntaxTree) 715528"];
2458 [label="param BinderFactory(bool ignoreAccessibility) 715529"];
2459 [label="param BinderFactory(this) 715530"];
2460 [label="_binderCache 715531"];
2461 [label="_compilation 715532"];
2462 [label="_syntaxTree 715533"];
2463 [label="_buckStopsHereBinder 715534"];
2464 [label="_ignoreAccessibility 715535"];
2465 [label="_binderFactoryVisitorPool 715536"];
2466 [label="_compilation 715537"];
2467 [label="_syntaxTree 715538"];
2468 [label="_ignoreAccessibility 715539"];
2469 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 715540"];
2470 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 715541"];
2471 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 715542"];
2472 [label="_binderFactoryVisitorPool 715543"];
2473 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 715544"];
2474 [label="_binderCache 715545"];
2475 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 715546"];
2476 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 715547"];
2477 [label="new BuckStopsHereBinder(compilation) 715548"];
2478 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 715549"];
2479 [label="param BuckStopsHereBinder(this) 715550"];
2480 [label="compilation 715551"];
2481 [label="param BuckStopsHereBinder(this) 715552"];
2482 [label="param Binder(CSharpCompilation compilation) 715553"];
2483 [label="param Binder(this) 715554"];
2484 [label="internal CSharpCompilation Compilation { get; } 715555"];
2485 [label="Flags 715556"];
2486 [label="protected internal Binder? Next { get; } 715557"];
2487 [label="_lazyConversions 715558"];
2488 [label="_lazyOverloadResolution 715559"];
2489 [label="RoslynDebug.Assert(compilation != null); 715560"];
2490 [label="RoslynDebug.Assert(compilation != null); 715561"];
2491 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 715562"];
2492 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 715563"];
2493 [label="this.Flags 715564"];
2494 [label="this.Compilation 715565"];
2495 [label="_buckStopsHereBinder 715566"];
2496 [label="var diagnostics = c.GetDiagnostics(); 715567"];
2497 [label="param GetBinder(SyntaxNode node) 715568"];
2498 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 715569"];
2499 [label="param GetBinder(Symbol memberOpt = null) 715570"];
2500 [label="param GetBinder(this) 715571"];
2501 [label="int position = node.SpanStart; 715572"];
2502 [label="InScript 715573"];
2503 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 715574"];
2504 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 715575"];
2505 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 715576"];
2506 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 715577"];
2507 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 715578"];
2508 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 715579"];
2509 [label="node = node.Parent; 715580"];
2510 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 715581"];
2511 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 715582"];
2512 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 715583"];
2513 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 715584"];
2514 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 715585"];
2515 [label="param GetBinder(SyntaxNode node) 715586"];
2516 [label="param GetBinder(int position) 715587"];
2517 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 715588"];
2518 [label="param GetBinder(Symbol memberOpt = null) 715589"];
2519 [label="param GetBinder(this) 715590"];
2520 [label="Debug.Assert(node != null); 715591"];
2521 [label="Debug.Assert(node != null); 715592"];
2522 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 715593"];
2523 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 715594"];
2524 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 715595"];
2525 [label="param BinderFactoryVisitor(BinderFactory factory) 715596"];
2526 [label="param BinderFactoryVisitor(this) 715597"];
2527 [label="param BinderFactoryVisitor(this) 715598"];
2528 [label="_position 715599"];
2529 [label="_memberDeclarationOpt 715600"];
2530 [label="_memberOpt 715601"];
2531 [label="_factory 715602"];
2532 [label="_factory 715603"];
2533 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 715604"];
2534 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 715605"];
2535 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 715606"];
2536 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 715607"];
2537 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 715608"];
2538 [label="param Initialize(int position) 715609"];
2539 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 715610"];
2540 [label="param Initialize(Symbol memberOpt) 715611"];
2541 [label="param Initialize(this) 715612"];
2542 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 715613"];
2543 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 715614"];
2544 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 715615"];
2545 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 715616"];
2546 [label="_position 715617"];
2547 [label="_memberDeclarationOpt 715618"];
2548 [label="_memberOpt 715619"];
2549 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 715620"];
2550 [label="Binder result = visitor.Visit(node); 715621"];
2551 [label="visitor.Visit(node) 715622"];
2552 [label="param Visit(SyntaxNode node) 715623"];
2553 [label="param Visit(this) 715624"];
2554 [label="return VisitCore(node); 715625"];
2555 [label="VisitCore(node) 715626"];
2556 [label="param VisitCore(SyntaxNode node) 715627"];
2557 [label="param VisitCore(this) 715628"];
2558 [label="return ((CSharpSyntaxNode)node).Accept(this); 715629"];
2559 [label="return ((CSharpSyntaxNode)node).Accept(this); 715630"];
2560 [label="return ((CSharpSyntaxNode)node).Accept(this); 715631"];
2561 [label="param VisitDelegateDeclaration(DelegateDeclarationSyntax parent) 715632"];
2562 [label="param VisitDelegateDeclaration(this) 715633"];
2563 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 715634"];
2564 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 715635"];
2565 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 715636"];
2566 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 715637"];
2567 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 715638"];
2568 [label="CreateBinderCacheKey(parent, usage: NodeUsage.Normal) 715639"];
2569 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 715640"];
2570 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 715641"];
2571 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 715642"];
2572 [label="return new BinderCacheKey(node, usage); 715643"];
2573 [label="return new BinderCacheKey(node, usage); 715644"];
2574 [label="new BinderCacheKey(node, usage) 715645"];
2575 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 715646"];
2576 [label="param BinderCacheKey(this) 715647"];
2577 [label="this.syntaxNode 715648"];
2578 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 715649"];
2579 [label="Binder resultBinder; 715650"];
2580 [label="binderCache 715651"];
2581 [label="get\n                {\n                    return _factory._binderCache;\n                } 715652"];
2582 [label="return _factory._binderCache; 715653"];
2583 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 715654"];
2584 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 715655"];
2585 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 715656"];
2586 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 715657"];
2587 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 715658"];
2588 [label="SyntaxToken token; 715659"];
2589 [label="token 715660"];
2590 [label="syntaxTree 715661"];
2591 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 715662"];
2592 [label="return _factory._syntaxTree; 715663"];
2593 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 715664"];
2594 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 715665"];
2595 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 715666"];
2596 [label="RoslynDebug.Assert(next != null); 715667"];
2597 [label="_container 715668"];
2598 [label="Debug.Assert((object)container != null); 715669"];
2599 [label="Debug.Assert(declarationSyntax != null); 715670"];
2600 [label="Debug.Assert((object)container != null || imports != null); 715671"];
2601 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 715672"];
2602 [label="_binderFactoryVisitorPool.Free(visitor); 715673"];
2603 [label="param BindType(ExpressionSyntax syntax) 715674"];
2604 [label="param BindType(DiagnosticBag diagnostics) 715675"];
2605 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 715676"];
2606 [label="param BindType(bool suppressUseSiteDiagnostics = false) 715677"];
2607 [label="param BindType(this) 715678"];
2608 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 715679"];
2609 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 715680"];
2610 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 715681"];
2611 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 715682"];
2612 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 715683"];
2613 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 715684"];
2614 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 715685"];
2615 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 715686"];
2616 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 715687"];
2617 [label="param BindTypeOrAlias(this) 715688"];
2618 [label="Debug.Assert(diagnostics != null); 715689"];
2619 [label="Debug.Assert(diagnostics != null); 715690"];
2620 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715691"];
2621 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715692"];
2622 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715693"];
2623 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715694"];
2624 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715695"];
2625 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 715696"];
2626 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 715697"];
2627 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 715698"];
2628 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 715699"];
2629 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 715700"];
2630 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 715701"];
2631 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 715702"];
2632 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 715703"];
2633 [label="return bindPredefined(syntax, diagnostics); 715704"];
2634 [label="return bindPredefined(syntax, diagnostics); 715705"];
2635 [label="bindPredefined(syntax, diagnostics) 715706"];
2636 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 715707"];
2637 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 715708"];
2638 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 715709"];
2639 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 715710"];
2640 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 715711"];
2641 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 715712"];
2642 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 715713"];
2643 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 715714"];
2644 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 715715"];
2645 [label="param BindPredefinedTypeSymbol(this) 715716"];
2646 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 715717"];
2647 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 715718"];
2648 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 715719"];
2649 [label="param GetSpecialType(SpecialType typeId) 715720"];
2650 [label="param GetSpecialType(DiagnosticBag diagnostics) 715721"];
2651 [label="param GetSpecialType(SyntaxNode node) 715722"];
2652 [label="param GetSpecialType(this) 715723"];
2653 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715724"];
2654 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715725"];
2655 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715726"];
2656 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715727"];
2657 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 715728"];
2658 [label="param GetSpecialType(CSharpCompilation compilation) 715729"];
2659 [label="param GetSpecialType(SpecialType typeId) 715730"];
2660 [label="param GetSpecialType(SyntaxNode node) 715731"];
2661 [label="param GetSpecialType(DiagnosticBag diagnostics) 715732"];
2662 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 715733"];
2663 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 715734"];
2664 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 715735"];
2665 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 715736"];
2666 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 715737"];
2667 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 715738"];
2668 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 715739"];
2669 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 715740"];
2670 [label="param ReportUseSiteDiagnostics(Symbol symbol) 715741"];
2671 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 715742"];
2672 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 715743"];
2673 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 715744"];
2674 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 715745"];
2675 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 715746"];
2676 [label="return typeSymbol; 715747"];
2677 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 715748"];
2678 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 715749"];
2679 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 715750"];
2680 [label="param AreNullableAnnotationsEnabled(this) 715751"];
2681 [label="RoslynDebug.Assert(token.SyntaxTree is object); 715752"];
2682 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 715753"];
2683 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 715754"];
2684 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 715755"];
2685 [label="param AreNullableAnnotationsEnabled(int position) 715756"];
2686 [label="param AreNullableAnnotationsEnabled(this) 715757"];
2687 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 715758"];
2688 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 715759"];
2689 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 715760"];
2690 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 715761"];
2691 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 715762"];
2692 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 715763"];
2693 [label="AreNullableAnnotationsGloballyEnabled() 715764"];
2694 [label="param AreNullableAnnotationsGloballyEnabled(this) 715765"];
2695 [label="RoslynDebug.Assert(Next is object); 715766"];
2696 [label="Next.AreNullableAnnotationsGloballyEnabled() 715767"];
2697 [label="param AreNullableAnnotationsGloballyEnabled(this) 715768"];
2698 [label="RoslynDebug.Assert(Next is object); 715769"];
2699 [label="param AreNullableAnnotationsGloballyEnabled(this) 715770"];
2700 [label="GetGlobalAnnotationState() 715771"];
2701 [label="param GetGlobalAnnotationState(this) 715772"];
2702 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 715773"];
2703 [label="return false; 715774"];
2704 [label="return GetGlobalAnnotationState(); 715775"];
2705 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 715776"];
2706 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 715777"];
2707 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 715778"];
2708 [label="type 715779"];
2709 [label="param operator(TypeWithAnnotations typeWithAnnotations) 715780"];
2710 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 715781"];
2711 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 715782"];
2712 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 715783"];
2713 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 715784"];
2714 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 715785"];
2715 [label="Debug.Assert(typeWithAnnotations.HasType); 715786"];
2716 [label="_typeWithAnnotations 715787"];
2717 [label="_symbol = null; 715788"];
2718 [label="_symbol 715789"];
2719 [label="_isNullableEnabled = false; 715790"];
2720 [label="_isNullableEnabled 715791"];
2721 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 715792"];
2722 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 715793"];
2723 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 715794"];
2724 [label="symbol.IsType 715795"];
2725 [label="=> !_typeWithAnnotations.IsDefault 715796"];
2726 [label="!_typeWithAnnotations.IsDefault 715797"];
2727 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 715798"];
2728 [label="symbol.IsType 715799"];
2729 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 715800"];
2730 [label="symbol.TypeWithAnnotations 715801"];
2731 [label="=> _typeWithAnnotations 715802"];
2732 [label="_typeWithAnnotations 715803"];
2733 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 715804"];
2734 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 715805"];
2735 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 715806"];
2736 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 715807"];
2737 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 715808"];
2738 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 715809"];
2739 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 715810"];
2740 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 715811"];
2741 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 715812"];
2742 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 715813"];
2743 [label="param ReportDiagnosticsIfObsolete(this) 715814"];
2744 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 715815"];
2745 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 715816"];
2746 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 715817"];
2747 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 715818"];
2748 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 715819"];
2749 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 715820"];
2750 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 715821"];
2751 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 715822"];
2752 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 715823"];
2753 [label="param ReportDiagnosticsIfObsolete(this) 715824"];
2754 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 715825"];
2755 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715826"];
2756 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715827"];
2757 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715828"];
2758 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715829"];
2759 [label="this.ContainingMemberOrLambda 715830"];
2760 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 715831"];
2761 [label="var merged = _container as MergedNamespaceSymbol; 715832"];
2762 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 715833"];
2763 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 715834"];
2764 [label="((object)merged != null) 715835"];
2765 [label="_container 715836"];
2766 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715837"];
2767 [label="this.ContainingType 715838"];
2768 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 715839"];
2769 [label="this.ContainingMemberOrLambda 715840"];
2770 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 715841"];
2771 [label="var merged = _container as MergedNamespaceSymbol; 715842"];
2772 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 715843"];
2773 [label="var member = this.ContainingMemberOrLambda; 715844"];
2774 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 715845"];
2775 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 715846"];
2776 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 715847"];
2777 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 715848"];
2778 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715849"];
2779 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715850"];
2780 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 715851"];
2781 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 715852"];
2782 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 715853"];
2783 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 715854"];
2784 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 715855"];
2785 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 715856"];
2786 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 715857"];
2787 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 715858"];
2788 [label="RoslynDebug.Assert(symbol is object); 715859"];
2789 [label="RoslynDebug.Assert(symbol is object); 715860"];
2790 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 715861"];
2791 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 715862"];
2792 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 715863"];
2793 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 715864"];
2794 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 715865"];
2795 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 715866"];
2796 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 715867"];
2797 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 715868"];
2798 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 715869"];
2799 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 715870"];
2800 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 715871"];
2801 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 715872"];
2802 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 715873"];
2803 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 715874"];
2804 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 715875"];
2805 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 715876"];
2806 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 715877"];
2807 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 715878"];
2808 [label="RoslynDebug.Assert(diagnostics != null); 715879"];
2809 [label="RoslynDebug.Assert(diagnostics != null); 715880"];
2810 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 715881"];
2811 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 715882"];
2812 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 715883"];
2813 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 715884"];
2814 [label="DiagnosticInfo? info = null; 715885"];
2815 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 715886"];
2816 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 715887"];
2817 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 715888"];
2818 [label="return kind; 715889"];
2819 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 715890"];
2820 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 715891"];
2821 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 715892"];
2822 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 715893"];
2823 [label="return symbol; 715894"];
2824 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 715895"];
2825 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 715896"];
2826 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 715897"];
2827 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 715898"];
2828 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 715899"];
2829 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 715900"];
2830 [label="param UnwrapAlias(DiagnosticBag diagnostics) 715901"];
2831 [label="param UnwrapAlias(SyntaxNode syntax) 715902"];
2832 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 715903"];
2833 [label="param UnwrapAlias(this) 715904"];
2834 [label="symbol.IsAlias 715905"];
2835 [label="=> _symbol?.Kind == SymbolKind.Alias 715906"];
2836 [label="_symbol 715907"];
2837 [label="_symbol?.Kind == SymbolKind.Alias 715908"];
2838 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 715909"];
2839 [label="return symbol; 715910"];
2840 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 715911"];
2841 [label="=> _typeWithAnnotations 715912"];
2842 [label="_typeWithAnnotations 715913"];
2843 [label="var diagnostics = c.GetDiagnostics(); 715914"];
2844 [label="param GetSpecialType(SpecialType typeId) 715915"];
2845 [label="param GetSpecialType(DiagnosticBag diagnostics) 715916"];
2846 [label="param GetSpecialType(SyntaxNode node) 715917"];
2847 [label="param GetSpecialType(this) 715918"];
2848 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715919"];
2849 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715920"];
2850 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715921"];
2851 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 715922"];
2852 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 715923"];
2853 [label="param GetSpecialType(CSharpCompilation compilation) 715924"];
2854 [label="param GetSpecialType(SpecialType typeId) 715925"];
2855 [label="param GetSpecialType(SyntaxNode node) 715926"];
2856 [label="param GetSpecialType(DiagnosticBag diagnostics) 715927"];
2857 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 715928"];
2858 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 715929"];
2859 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 715930"];
2860 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 715931"];
2861 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 715932"];
2862 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 715933"];
2863 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 715934"];
2864 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 715935"];
2865 [label="param ReportUseSiteDiagnostics(Symbol symbol) 715936"];
2866 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 715937"];
2867 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 715938"];
2868 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 715939"];
2869 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 715940"];
2870 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 715941"];
2871 [label="return typeSymbol; 715942"];
2872 [label="var diagnostics = c.GetDiagnostics(); 715943"];
2873 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 715944"];
2874 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 715945"];
2875 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 715946"];
2876 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 715947"];
2877 [label="param ValidateParameterNameConflicts(this) 715948"];
2878 [label="PooledHashSet<string>? tpNames = null; 715949"];
2879 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 715950"];
2880 [label="PooledHashSet<string>? pNames = null; 715951"];
2881 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 715952"];
2882 [label="tpNames?.Free(); 715953"];
2883 [label="pNames?.Free(); 715954"];
2884 [label="param IsSymbolAccessible(Symbol symbol) 715955"];
2885 [label="param IsSymbolAccessible(NamedTypeSymbol within) 715956"];
2886 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 715957"];
2887 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 715958"];
2888 [label="bool failedThroughTypeCheck; 715959"];
2889 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 715960"];
2890 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 715961"];
2891 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 715962"];
2892 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 715963"];
2893 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 715964"];
2894 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 715965"];
2895 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 715966"];
2896 [label="param IsSymbolAccessibleCore(Symbol symbol) 715967"];
2897 [label="param IsSymbolAccessibleCore(Symbol within) 715968"];
2898 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 715969"];
2899 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 715970"];
2900 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 715971"];
2901 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 715972"];
2902 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 715973"];
2903 [label="Debug.Assert((object)symbol != null); 715974"];
2904 [label="Debug.Assert((object)symbol != null); 715975"];
2905 [label="Debug.Assert((object)within != null); 715976"];
2906 [label="Debug.Assert((object)within != null); 715977"];
2907 [label="Debug.Assert(within.IsDefinition); 715978"];
2908 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 715979"];
2909 [label="failedThroughTypeCheck = false; 715980"];
2910 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715981"];
2911 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 715982"];
2912 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 715983"];
2913 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715984"];
2914 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715985"];
2915 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715986"];
2916 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715987"];
2917 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715988"];
2918 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715989"];
2919 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 715990"];
2920 [label="IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics) 715991"];
2921 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 715992"];
2922 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 715993"];
2923 [label="param IsMemberAccessible(Symbol within) 715994"];
2924 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 715995"];
2925 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 715996"];
2926 [label="param IsMemberAccessible(CSharpCompilation compilation) 715997"];
2927 [label="param IsMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 715998"];
2928 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 715999"];
2929 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716000"];
2930 [label="Debug.Assert((object)containingType != null); 716001"];
2931 [label="Debug.Assert((object)containingType != null); 716002"];
2932 [label="failedThroughTypeCheck = false; 716003"];
2933 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 716004"];
2934 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 716005"];
2935 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 716006"];
2936 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 716007"];
2937 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 716008"];
2938 [label="IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved) 716009"];
2939 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 716010"];
2940 [label="param IsNamedTypeAccessible(Symbol within) 716011"];
2941 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 716012"];
2942 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716013"];
2943 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716014"];
2944 [label="Debug.Assert((object)type != null); 716015"];
2945 [label="Debug.Assert((object)type != null); 716016"];
2946 [label="var compilation = within.DeclaringCompilation; 716017"];
2947 [label="bool unused; 716018"];
2948 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 716019"];
2949 [label="var containingType = type.ContainingType; 716020"];
2950 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716021"];
2951 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716022"];
2952 [label="(object)containingType == null 716023"];
2953 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716024"];
2954 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 716025"];
2955 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 716026"];
2956 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 716027"];
2957 [label="param IsNonNestedTypeAccessible(Symbol within) 716028"];
2958 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716029"];
2959 [label="Debug.Assert((object)assembly != null); 716030"];
2960 [label="Debug.Assert((object)assembly != null); 716031"];
2961 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716032"];
2962 [label="return true; 716033"];
2963 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 716034"];
2964 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716035"];
2965 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716036"];
2966 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716037"];
2967 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716038"];
2968 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716039"];
2969 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716040"];
2970 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716041"];
2971 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716042"];
2972 [label="IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved) 716043"];
2973 [label="param IsNonPublicMemberAccessible(NamedTypeSymbol containingType) 716044"];
2974 [label="param IsNonPublicMemberAccessible(Accessibility declaredAccessibility) 716045"];
2975 [label="param IsNonPublicMemberAccessible(Symbol within) 716046"];
2976 [label="param IsNonPublicMemberAccessible(TypeSymbol throughTypeOpt) 716047"];
2977 [label="param IsNonPublicMemberAccessible(out bool failedThroughTypeCheck) 716048"];
2978 [label="param IsNonPublicMemberAccessible(CSharpCompilation compilation) 716049"];
2979 [label="param IsNonPublicMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 716050"];
2980 [label="param IsNonPublicMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716051"];
2981 [label="failedThroughTypeCheck = false; 716052"];
2982 [label="var originalContainingType = containingType.OriginalDefinition; 716053"];
2983 [label="var withinType = within as NamedTypeSymbol; 716054"];
2984 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 716055"];
2985 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 716056"];
2986 [label="(object)withinType != null 716057"];
2987 [label="withinType.ContainingAssembly 716058"];
2988 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 716059"];
2989 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                    return true;\n\n                case Accessibility.Private:\n                    // All expressions in the current submission (top-level or nested in a method or\n                    // type) can access previous submission's private top-level members. Previous\n                    // submissions are treated like outer classes for the current submission - the\n                    // inner class can access private members of the outer class.\n                    if (containingType.TypeKind == TypeKind.Submission)\n                    {\n                        return true;\n                    }\n\n                    // private members never accessible from outside a type.\n                    return (object)withinType != null && IsPrivateSymbolAccessible(withinType, originalContainingType);\n\n                case Accessibility.Internal:\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly);\n\n                case Accessibility.ProtectedAndInternal:\n                    if (!withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // We require internal access.  If we don't have it, then this symbol is\n                        // definitely not accessible to us.\n                        return false;\n                    }\n\n                    // We had internal access.  Also have to make sure we have protected access.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.ProtectedOrInternal:\n                    if (withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // If we have internal access to this symbol, then that's sufficient.  no\n                        // need to do the complicated protected case.\n                        return true;\n                    }\n\n                    // We don't have internal access.  But if we have protected access then that's\n                    // sufficient.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.Protected:\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716060"];
2990 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716061"];
2991 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716062"];
2992 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716063"];
2993 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716064"];
2994 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716065"];
2995 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716066"];
2996 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 716067"];
2997 [label="IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved) 716068"];
2998 [label="param IsProtectedSymbolAccessible(NamedTypeSymbol withinType) 716069"];
2999 [label="param IsProtectedSymbolAccessible(TypeSymbol throughTypeOpt) 716070"];
3000 [label="param IsProtectedSymbolAccessible(NamedTypeSymbol originalContainingType) 716071"];
3001 [label="param IsProtectedSymbolAccessible(out bool failedThroughTypeCheck) 716072"];
3002 [label="param IsProtectedSymbolAccessible(CSharpCompilation compilation) 716073"];
3003 [label="param IsProtectedSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 716074"];
3004 [label="param IsProtectedSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716075"];
3005 [label="failedThroughTypeCheck = false; 716076"];
3006 [label="if (originalContainingType.TypeKind == TypeKind.Submission)\n            {\n                return true;\n            } 716077"];
3007 [label="if ((object)withinType == null)\n            {\n                // If we're not within a type, we can't access a protected symbol\n                return false;\n            } 716078"];
3008 [label="if ((object)withinType == null)\n            {\n                // If we're not within a type, we can't access a protected symbol\n                return false;\n            } 716079"];
3009 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 716080"];
3010 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 716081"];
3011 [label="IsNestedWithinOriginalContainingType(withinType, originalContainingType) 716082"];
3012 [label="param IsNestedWithinOriginalContainingType(NamedTypeSymbol withinType) 716083"];
3013 [label="param IsNestedWithinOriginalContainingType(NamedTypeSymbol originalContainingType) 716084"];
3014 [label="Debug.Assert((object)withinType != null); 716085"];
3015 [label="Debug.Assert((object)withinType != null); 716086"];
3016 [label="Debug.Assert((object)originalContainingType != null); 716087"];
3017 [label="Debug.Assert((object)originalContainingType != null); 716088"];
3018 [label="Debug.Assert(originalContainingType.IsDefinition); 716089"];
3019 [label="var current = withinType.OriginalDefinition; 716090"];
3020 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (current == (object)originalContainingType)\n                {\n                    return true;\n                }\n\n                // NOTE(cyrusn): The container of an 'original' type is always original. \n                current = current.ContainingType;\n            } 716091"];
3021 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (current == (object)originalContainingType)\n                {\n                    return true;\n                }\n\n                // NOTE(cyrusn): The container of an 'original' type is always original. \n                current = current.ContainingType;\n            } 716092"];
3022 [label="Debug.Assert(current.IsDefinition); 716093"];
3023 [label="if (current == (object)originalContainingType)\n                {\n                    return true;\n                } 716094"];
3024 [label="current = current.ContainingType; 716095"];
3025 [label="return false; 716096"];
3026 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 716097"];
3027 [label="var current = withinType.OriginalDefinition; 716098"];
3028 [label="var originalThroughTypeOpt = (object)throughTypeOpt == null ? null : throughTypeOpt.OriginalDefinition as TypeSymbol; 716099"];
3029 [label="var originalThroughTypeOpt = (object)throughTypeOpt == null ? null : throughTypeOpt.OriginalDefinition as TypeSymbol; 716100"];
3030 [label="(object)throughTypeOpt == null 716101"];
3031 [label="while ((object)current != null)\n                {\n                    Debug.Assert(current.IsDefinition);\n\n                    if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    }\n\n                    // NOTE(cyrusn): The container of an original type is always original.\n                    current = current.ContainingType;\n                } 716102"];
3032 [label="while ((object)current != null)\n                {\n                    Debug.Assert(current.IsDefinition);\n\n                    if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    }\n\n                    // NOTE(cyrusn): The container of an original type is always original.\n                    current = current.ContainingType;\n                } 716103"];
3033 [label="Debug.Assert(current.IsDefinition); 716104"];
3034 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 716105"];
3035 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 716106"];
3036 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 716107"];
3037 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 716108"];
3038 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 716109"];
3039 [label="current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved) 716110"];
3040 [label="param InheritsFromOrImplementsIgnoringConstruction(this TypeSymbol type) 716111"];
3041 [label="param InheritsFromOrImplementsIgnoringConstruction(NamedTypeSymbol baseType) 716112"];
3042 [label="param InheritsFromOrImplementsIgnoringConstruction(CSharpCompilation compilation) 716113"];
3043 [label="param InheritsFromOrImplementsIgnoringConstruction(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 716114"];
3044 [label="param InheritsFromOrImplementsIgnoringConstruction(ConsList<TypeSymbol> basesBeingResolved = null) 716115"];
3045 [label="Debug.Assert(type.IsDefinition); 716116"];
3046 [label="Debug.Assert(baseType.IsDefinition); 716117"];
3047 [label="PooledHashSet<NamedTypeSymbol> interfacesLookedAt = null; 716118"];
3048 [label="ArrayBuilder<NamedTypeSymbol> baseInterfaces = null; 716119"];
3049 [label="bool baseTypeIsInterface = baseType.IsInterface; 716120"];
3050 [label="if (baseTypeIsInterface)\n            {\n                interfacesLookedAt = PooledHashSet<NamedTypeSymbol>.GetInstance();\n                baseInterfaces = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n            } 716121"];
3051 [label="PooledHashSet<NamedTypeSymbol> visited = null; 716122"];
3052 [label="var current = type; 716123"];
3053 [label="bool result = false; 716124"];
3054 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                }\n\n                if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                // NOTE(cyrusn): The base type of an 'original' type may not be 'original'. i.e. \n                // 'class Goo : IBar<int>'.  We must map it back to the 'original' when as we walk up\n                // the base type hierarchy.\n                var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited);\n                if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 716125"];
3055 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                }\n\n                if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                // NOTE(cyrusn): The base type of an 'original' type may not be 'original'. i.e. \n                // 'class Goo : IBar<int>'.  We must map it back to the 'original' when as we walk up\n                // the base type hierarchy.\n                var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited);\n                if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 716126"];
3056 [label="Debug.Assert(current.IsDefinition); 716127"];
3057 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716128"];
3058 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716129"];
3059 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716130"];
3060 [label="if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                } 716131"];
3061 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 716132"];
3062 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 716133"];
3063 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 716134"];
3064 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 716135"];
3065 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 716136"];
3066 [label="if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 716137"];
3067 [label="if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 716138"];
3068 [label="current = (TypeSymbol)next.OriginalDefinition; 716139"];
3069 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 716140"];
3070 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 716141"];
3071 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 716142"];
3072 [label="Debug.Assert(current.IsDefinition); 716143"];
3073 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716144"];
3074 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716145"];
3075 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716146"];
3076 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 716147"];
3077 [label="result = true; 716148"];
3078 [label="visited?.Free(); 716149"];
3079 [label="if (!result && baseTypeIsInterface)\n            {\n                Debug.Assert(!result);\n\n                while (baseInterfaces.Count != 0)\n                {\n                    NamedTypeSymbol currentBase = baseInterfaces.Pop();\n\n                    if (!currentBase.IsInterface)\n                    {\n                        continue;\n                    }\n\n                    Debug.Assert(currentBase.IsDefinition);\n                    if (currentBase == (object)baseType)\n                    {\n                        result = true;\n                        break;\n                    }\n\n                    getBaseInterfaces(currentBase, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                if (!result)\n                {\n                    foreach (var candidate in interfacesLookedAt)\n                    {\n                        candidate.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                    }\n                }\n            } 716150"];
3080 [label="interfacesLookedAt?.Free(); 716151"];
3081 [label="baseInterfaces?.Free(); 716152"];
3082 [label="return result; 716153"];
3083 [label="if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        } 716154"];
3084 [label="if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        } 716155"];
3085 [label="return true; 716156"];
3086 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 716157"];
3087 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 716158"];
3088 [label="Debug.Assert((object)symbol != null); 716159"];
3089 [label="Debug.Assert((object)within != null); 716160"];
3090 [label="Debug.Assert(within.IsDefinition); 716161"];
3091 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716162"];
3092 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 716163"];
3093 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716164"];
3094 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 716165"];
3095 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716166"];
3096 [label="Debug.Assert((object)containingType != null); 716167"];
3097 [label="Debug.Assert((object)containingType != null); 716168"];
3098 [label="failedThroughTypeCheck = false; 716169"];
3099 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 716170"];
3100 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 716171"];
3101 [label="param IsNamedTypeAccessible(Symbol within) 716172"];
3102 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716173"];
3103 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716174"];
3104 [label="Debug.Assert((object)type != null); 716175"];
3105 [label="Debug.Assert((object)type != null); 716176"];
3106 [label="var compilation = within.DeclaringCompilation; 716177"];
3107 [label="bool unused; 716178"];
3108 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 716179"];
3109 [label="var containingType = type.ContainingType; 716180"];
3110 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716181"];
3111 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716182"];
3112 [label="(object)containingType == null 716183"];
3113 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716184"];
3114 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 716185"];
3115 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 716186"];
3116 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 716187"];
3117 [label="param IsNonNestedTypeAccessible(Symbol within) 716188"];
3118 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716189"];
3119 [label="Debug.Assert((object)assembly != null); 716190"];
3120 [label="Debug.Assert((object)assembly != null); 716191"];
3121 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716192"];
3122 [label="return true; 716193"];
3123 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 716194"];
3124 [label="return true; 716195"];
3125 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 716196"];
3126 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 716197"];
3127 [label="Debug.Assert(symbol is object); 716198"];
3128 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 716199"];
3129 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716200"];
3130 [label="symbol = symbol.ContainingType; 716201"];
3131 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 716202"];
3132 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716203"];
3133 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716204"];
3134 [label="return true; 716205"];
3135 [label="var diagnostics = c.GetDiagnostics(); 716206"];
3136 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 716207"];
3137 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 716208"];
3138 [label="Debug.Assert(symbol is object); 716209"];
3139 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 716210"];
3140 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716211"];
3141 [label="symbol = symbol.ContainingType; 716212"];
3142 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 716213"];
3143 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716214"];
3144 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 716215"];
3145 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 716216"];
3146 [label="Debug.Assert(symbol is object); 716217"];
3147 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 716218"];
3148 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716219"];
3149 [label="symbol = symbol.ContainingType; 716220"];
3150 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 716221"];
3151 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716222"];
3152 [label="param IsSymbolAccessible(NamedTypeSymbol within) 716223"];
3153 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 716224"];
3154 [label="param IsSymbolAccessibleCore(Symbol within) 716225"];
3155 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 716226"];
3156 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 716227"];
3157 [label="Debug.Assert((object)symbol != null); 716228"];
3158 [label="Debug.Assert((object)within != null); 716229"];
3159 [label="Debug.Assert(within.IsDefinition); 716230"];
3160 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716231"];
3161 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 716232"];
3162 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716233"];
3163 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 716234"];
3164 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 716235"];
3165 [label="param IsMemberAccessible(Symbol within) 716236"];
3166 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 716237"];
3167 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 716238"];
3168 [label="param IsMemberAccessible(CSharpCompilation compilation) 716239"];
3169 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716240"];
3170 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716241"];
3171 [label="Debug.Assert((object)containingType != null); 716242"];
3172 [label="Debug.Assert((object)containingType != null); 716243"];
3173 [label="failedThroughTypeCheck = false; 716244"];
3174 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 716245"];
3175 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 716246"];
3176 [label="param IsNamedTypeAccessible(Symbol within) 716247"];
3177 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716248"];
3178 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716249"];
3179 [label="Debug.Assert((object)type != null); 716250"];
3180 [label="Debug.Assert((object)type != null); 716251"];
3181 [label="var compilation = within.DeclaringCompilation; 716252"];
3182 [label="bool unused; 716253"];
3183 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 716254"];
3184 [label="var containingType = type.ContainingType; 716255"];
3185 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716256"];
3186 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716257"];
3187 [label="(object)containingType == null 716258"];
3188 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716259"];
3189 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 716260"];
3190 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 716261"];
3191 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 716262"];
3192 [label="param IsNonNestedTypeAccessible(Symbol within) 716263"];
3193 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716264"];
3194 [label="Debug.Assert((object)assembly != null); 716265"];
3195 [label="Debug.Assert((object)assembly != null); 716266"];
3196 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716267"];
3197 [label="return true; 716268"];
3198 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 716269"];
3199 [label="return true; 716270"];
3200 [label="var diagnostics = c.GetDiagnostics(); 716271"];
3201 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 716272"];
3202 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 716273"];
3203 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 716274"];
3204 [label="Debug.Assert((object)symbol != null); 716275"];
3205 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 716276"];
3206 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716277"];
3207 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 716278"];
3208 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 716279"];
3209 [label="param IsMemberAccessible(Symbol within) 716280"];
3210 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 716281"];
3211 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 716282"];
3212 [label="param IsMemberAccessible(CSharpCompilation compilation) 716283"];
3213 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716284"];
3214 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716285"];
3215 [label="Debug.Assert((object)containingType != null); 716286"];
3216 [label="Debug.Assert((object)containingType != null); 716287"];
3217 [label="failedThroughTypeCheck = false; 716288"];
3218 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 716289"];
3219 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 716290"];
3220 [label="param IsNamedTypeAccessible(Symbol within) 716291"];
3221 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716292"];
3222 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716293"];
3223 [label="Debug.Assert((object)type != null); 716294"];
3224 [label="Debug.Assert((object)type != null); 716295"];
3225 [label="var compilation = within.DeclaringCompilation; 716296"];
3226 [label="bool unused; 716297"];
3227 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 716298"];
3228 [label="var containingType = type.ContainingType; 716299"];
3229 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716300"];
3230 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716301"];
3231 [label="(object)containingType == null 716302"];
3232 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716303"];
3233 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 716304"];
3234 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 716305"];
3235 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 716306"];
3236 [label="param IsNonNestedTypeAccessible(Symbol within) 716307"];
3237 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716308"];
3238 [label="Debug.Assert((object)assembly != null); 716309"];
3239 [label="Debug.Assert((object)assembly != null); 716310"];
3240 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716311"];
3241 [label="return true; 716312"];
3242 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 716313"];
3243 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716314"];
3244 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716315"];
3245 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716316"];
3246 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716317"];
3247 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716318"];
3248 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716319"];
3249 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716320"];
3250 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 716321"];
3251 [label="IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved) 716322"];
3252 [label="param IsNonPublicMemberAccessible(NamedTypeSymbol containingType) 716323"];
3253 [label="param IsNonPublicMemberAccessible(Accessibility declaredAccessibility) 716324"];
3254 [label="param IsNonPublicMemberAccessible(Symbol within) 716325"];
3255 [label="param IsNonPublicMemberAccessible(TypeSymbol throughTypeOpt) 716326"];
3256 [label="param IsNonPublicMemberAccessible(out bool failedThroughTypeCheck) 716327"];
3257 [label="param IsNonPublicMemberAccessible(CSharpCompilation compilation) 716328"];
3258 [label="param IsNonPublicMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 716329"];
3259 [label="param IsNonPublicMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716330"];
3260 [label="failedThroughTypeCheck = false; 716331"];
3261 [label="var originalContainingType = containingType.OriginalDefinition; 716332"];
3262 [label="var withinType = within as NamedTypeSymbol; 716333"];
3263 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 716334"];
3264 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 716335"];
3265 [label="(object)withinType != null 716336"];
3266 [label="withinType.ContainingAssembly 716337"];
3267 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 716338"];
3268 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                    return true;\n\n                case Accessibility.Private:\n                    // All expressions in the current submission (top-level or nested in a method or\n                    // type) can access previous submission's private top-level members. Previous\n                    // submissions are treated like outer classes for the current submission - the\n                    // inner class can access private members of the outer class.\n                    if (containingType.TypeKind == TypeKind.Submission)\n                    {\n                        return true;\n                    }\n\n                    // private members never accessible from outside a type.\n                    return (object)withinType != null && IsPrivateSymbolAccessible(withinType, originalContainingType);\n\n                case Accessibility.Internal:\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly);\n\n                case Accessibility.ProtectedAndInternal:\n                    if (!withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // We require internal access.  If we don't have it, then this symbol is\n                        // definitely not accessible to us.\n                        return false;\n                    }\n\n                    // We had internal access.  Also have to make sure we have protected access.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.ProtectedOrInternal:\n                    if (withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // If we have internal access to this symbol, then that's sufficient.  no\n                        // need to do the complicated protected case.\n                        return true;\n                    }\n\n                    // We don't have internal access.  But if we have protected access then that's\n                    // sufficient.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.Protected:\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716339"];
3269 [label="return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly); 716340"];
3270 [label="return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly); 716341"];
3271 [label="withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly) 716342"];
3272 [label="param HasInternalAccessTo(this AssemblySymbol fromAssembly) 716343"];
3273 [label="param HasInternalAccessTo(AssemblySymbol toAssembly) 716344"];
3274 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 716345"];
3275 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 716346"];
3276 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 716347"];
3277 [label="return true; 716348"];
3278 [label="var diagnostics = c.GetDiagnostics(); 716349"];
3279 [label="param IsSymbolAccessibleCore(Symbol within) 716350"];
3280 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 716351"];
3281 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 716352"];
3282 [label="Debug.Assert((object)symbol != null); 716353"];
3283 [label="Debug.Assert((object)within != null); 716354"];
3284 [label="Debug.Assert(within.IsDefinition); 716355"];
3285 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716356"];
3286 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 716357"];
3287 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716358"];
3288 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 716359"];
3289 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 716360"];
3290 [label="param IsMemberAccessible(Symbol within) 716361"];
3291 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 716362"];
3292 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 716363"];
3293 [label="param IsMemberAccessible(CSharpCompilation compilation) 716364"];
3294 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716365"];
3295 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716366"];
3296 [label="Debug.Assert((object)containingType != null); 716367"];
3297 [label="Debug.Assert((object)containingType != null); 716368"];
3298 [label="failedThroughTypeCheck = false; 716369"];
3299 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 716370"];
3300 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 716371"];
3301 [label="param IsNamedTypeAccessible(Symbol within) 716372"];
3302 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716373"];
3303 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716374"];
3304 [label="Debug.Assert((object)type != null); 716375"];
3305 [label="Debug.Assert((object)type != null); 716376"];
3306 [label="var compilation = within.DeclaringCompilation; 716377"];
3307 [label="bool unused; 716378"];
3308 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 716379"];
3309 [label="var containingType = type.ContainingType; 716380"];
3310 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716381"];
3311 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716382"];
3312 [label="(object)containingType == null 716383"];
3313 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716384"];
3314 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 716385"];
3315 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 716386"];
3316 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 716387"];
3317 [label="param IsNonNestedTypeAccessible(Symbol within) 716388"];
3318 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716389"];
3319 [label="Debug.Assert((object)assembly != null); 716390"];
3320 [label="Debug.Assert((object)assembly != null); 716391"];
3321 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716392"];
3322 [label="return true; 716393"];
3323 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 716394"];
3324 [label="return true; 716395"];
3325 [label="var diagnostics = c.GetDiagnostics(); 716396"];
3326 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 716397"];
3327 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 716398"];
3328 [label="Debug.Assert(symbol is object); 716399"];
3329 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 716400"];
3330 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716401"];
3331 [label="symbol = symbol.ContainingType; 716402"];
3332 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 716403"];
3333 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 716404"];
3334 [label="throughTypeOpt = null; 716405"];
3335 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716406"];
3336 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 716407"];
3337 [label="param IsSymbolAccessibleCore(Symbol within) 716408"];
3338 [label="Debug.Assert((object)symbol != null); 716409"];
3339 [label="Debug.Assert((object)within != null); 716410"];
3340 [label="Debug.Assert(within.IsDefinition); 716411"];
3341 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716412"];
3342 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 716413"];
3343 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716414"];
3344 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 716415"];
3345 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 716416"];
3346 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 716417"];
3347 [label="param IsMemberAccessible(Symbol within) 716418"];
3348 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 716419"];
3349 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 716420"];
3350 [label="param IsMemberAccessible(CSharpCompilation compilation) 716421"];
3351 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716422"];
3352 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716423"];
3353 [label="Debug.Assert((object)containingType != null); 716424"];
3354 [label="Debug.Assert((object)containingType != null); 716425"];
3355 [label="failedThroughTypeCheck = false; 716426"];
3356 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 716427"];
3357 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 716428"];
3358 [label="param IsNamedTypeAccessible(Symbol within) 716429"];
3359 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 716430"];
3360 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716431"];
3361 [label="Debug.Assert((object)type != null); 716432"];
3362 [label="Debug.Assert((object)type != null); 716433"];
3363 [label="var compilation = within.DeclaringCompilation; 716434"];
3364 [label="bool unused; 716435"];
3365 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 716436"];
3366 [label="var containingType = type.ContainingType; 716437"];
3367 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716438"];
3368 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716439"];
3369 [label="(object)containingType == null 716440"];
3370 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 716441"];
3371 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 716442"];
3372 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 716443"];
3373 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 716444"];
3374 [label="param IsNonNestedTypeAccessible(Symbol within) 716445"];
3375 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 716446"];
3376 [label="Debug.Assert((object)assembly != null); 716447"];
3377 [label="Debug.Assert((object)assembly != null); 716448"];
3378 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 716449"];
3379 [label="return true; 716450"];
3380 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 716451"];
3381 [label="return true; 716452"];
3382 [label="var diagnostics = c.GetDiagnostics(); 716453"];
3383 [label="param TypeConversions(AssemblySymbol corLibrary) 716454"];
3384 [label="param TypeConversions(bool includeNullability = false) 716455"];
3385 [label="param TypeConversions(this) 716456"];
3386 [label="corLibrary 716457"];
3387 [label="0 716458"];
3388 [label="includeNullability 716459"];
3389 [label="null 716460"];
3390 [label="param TypeConversions(this) 716461"];
3391 [label="param TypeConversions(AssemblySymbol corLibrary) 716462"];
3392 [label="param TypeConversions(int currentRecursionDepth) 716463"];
3393 [label="param TypeConversions(bool includeNullability) 716464"];
3394 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 716465"];
3395 [label="param TypeConversions(this) 716466"];
3396 [label="corLibrary 716467"];
3397 [label="currentRecursionDepth 716468"];
3398 [label="includeNullability 716469"];
3399 [label="otherNullabilityOpt 716470"];
3400 [label="param TypeConversions(this) 716471"];
3401 [label="param ConversionsBase(AssemblySymbol corLibrary) 716472"];
3402 [label="param ConversionsBase(int currentRecursionDepth) 716473"];
3403 [label="param ConversionsBase(bool includeNullability) 716474"];
3404 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 716475"];
3405 [label="param ConversionsBase(this) 716476"];
3406 [label="corLibrary 716477"];
3407 [label="currentRecursionDepth 716478"];
3408 [label="IncludeNullability 716479"];
3409 [label="_lazyOtherNullability 716480"];
3410 [label="Debug.Assert((object)corLibrary != null); 716481"];
3411 [label="Debug.Assert((object)corLibrary != null); 716482"];
3412 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 716483"];
3413 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 716484"];
3414 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 716485"];
3415 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 716486"];
3416 [label="this.corLibrary 716487"];
3417 [label="this.currentRecursionDepth 716488"];
3418 [label="IncludeNullability 716489"];
3419 [label="_lazyOtherNullability 716490"];
3420 [label="var diagnostics = c.GetDiagnostics(); 716491"];
3421 [label="var diagnostics = c.GetDiagnostics(); 716492"];
3422 [label="diagnostics.Verify(expected); 716493"];
3423 [label="diagnostics.Verify(expected); 716494"];
3424 [label="diagnostics.Verify(expected) 716495"];
3425 [label="param Verify(this ImmutableArray<Diagnostic> actual) 716496"];
3426 [label="param Verify(params DiagnosticDescription[] expected) 716497"];
3427 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 716498"];
3428 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 716499"];
3429 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 716500"];
3430 [label="param Verify(this IEnumerable<Diagnostic> actual) 716501"];
3431 [label="param Verify(params DiagnosticDescription[] expected) 716502"];
3432 [label="Verify(actual, expected, errorCodeOnly: false); 716503"];
3433 [label="Verify(actual, expected, errorCodeOnly: false); 716504"];
3434 [label="Verify(actual, expected, errorCodeOnly: false); 716505"];
3435 [label="Verify(actual, expected, errorCodeOnly: false) 716506"];
3436 [label="param Verify(IEnumerable<Diagnostic> actual) 716507"];
3437 [label="param Verify(DiagnosticDescription[] expected) 716508"];
3438 [label="param Verify(bool errorCodeOnly) 716509"];
3439 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 716510"];
3440 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 716511"];
3441 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 716512"];
3442 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 716513"];
3443 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 716514"];
3444 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 716515"];
3445 [label="=> _defaultSeverityOpt 716516"];
3446 [label="_defaultSeverityOpt 716517"];
3447 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 716518"];
3448 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 716519"];
3449 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 716520"];
3450 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 716521"];
3451 [label="=> _effectiveSeverityOpt 716522"];
3452 [label="_effectiveSeverityOpt 716523"];
3453 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 716524"];
3454 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 716525"];
3455 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 716526"];
3456 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 716527"];
3457 [label="param DiagnosticDescription(Diagnostic d) 716528"];
3458 [label="param DiagnosticDescription(bool errorCodeOnly) 716529"];
3459 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 716530"];
3460 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 716531"];
3461 [label="param DiagnosticDescription(this) 716532"];
3462 [label="_code 716533"];
3463 [label="_isWarningAsError 716534"];
3464 [label="_isSuppressed 716535"];
3465 [label="_squiggledText 716536"];
3466 [label="_arguments 716537"];
3467 [label="_startPosition 716538"];
3468 [label="_argumentOrderDoesNotMatter 716539"];
3469 [label="_errorCodeType 716540"];
3470 [label="_defaultSeverityOpt 716541"];
3471 [label="_effectiveSeverityOpt 716542"];
3472 [label="_syntaxPredicate 716543"];
3473 [label="_code 716544"];
3474 [label="_isWarningAsError 716545"];
3475 [label="_isSuppressed 716546"];
3476 [label="_location 716547"];
3477 [label="includeDefaultSeverity 716548"];
3478 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 716549"];
3479 [label="_defaultSeverityOpt 716550"];
3480 [label="includeEffectiveSeverity 716551"];
3481 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 716552"];
3482 [label="_effectiveSeverityOpt 716553"];
3483 [label="DiagnosticWithInfo dinfo = null; 716554"];
3484 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 716555"];
3485 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 716556"];
3486 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 716557"];
3487 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 716558"];
3488 [label="dinfo = d as DiagnosticWithInfo; 716559"];
3489 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 716560"];
3490 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 716561"];
3491 [label="_errorCodeType 716562"];
3492 [label="_code 716563"];
3493 [label="_ignoreArgumentsWhenComparing 716564"];
3494 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 716565"];
3495 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 716566"];
3496 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 716567"];
3497 [label="_squiggledText 716568"];
3498 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 716569"];
3499 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 716570"];
3500 [label="_arguments 716571"];
3501 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 716572"];
3502 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 716573"];
3503 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 716574"];
3504 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 716575"];
3505 [label="_startPosition 716576"];
3506 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 716577"];
3507 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 716578"];
3508 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 716579"];
3509 [label="int index = unmatched.IndexOf(d); 716580"];
3510 [label="int index = unmatched.IndexOf(d); 716581"];
3511 [label="param Equals(object obj) 716582"];
3512 [label="param Equals(this) 716583"];
3513 [label="var d = obj as DiagnosticDescription; 716584"];
3514 [label="if (d == null)\n                return false; 716585"];
3515 [label="if (d == null)\n                return false; 716586"];
3516 [label="if (!_code.Equals(d._code))\n                return false; 716587"];
3517 [label="if (!_code.Equals(d._code))\n                return false; 716588"];
3518 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 716589"];
3519 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 716590"];
3520 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 716591"];
3521 [label="if (_squiggledText != d._squiggledText)\n                    return false; 716592"];
3522 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 716593"];
3523 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 716594"];
3524 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 716595"];
3525 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 716596"];
3526 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 716597"];
3527 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 716598"];
3528 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 716599"];
3529 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 716600"];
3530 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 716601"];
3531 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 716602"];
3532 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 716603"];
3533 [label="if (d._arguments == null)\n                    return false; 716604"];
3534 [label="GetArgumentsAsStrings() 716605"];
3535 [label="param GetArgumentsAsStrings(this) 716606"];
3536 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 716607"];
3537 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 716608"];
3538 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 716609"];
3539 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 716610"];
3540 [label="_argumentsAsStrings 716611"];
3541 [label="return _argumentsAsStrings; 716612"];
3542 [label="var args1 = GetArgumentsAsStrings(); 716613"];
3543 [label="d.GetArgumentsAsStrings() 716614"];
3544 [label="param GetArgumentsAsStrings(this) 716615"];
3545 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 716616"];
3546 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 716617"];
3547 [label="return _argumentsAsStrings; 716618"];
3548 [label="var args2 = d.GetArgumentsAsStrings(); 716619"];
3549 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 716620"];
3550 [label="if (!args1.SequenceEqual(args2))\n                        return false; 716621"];
3551 [label="if (!args1.SequenceEqual(args2))\n                        return false; 716622"];
3552 [label="if (!args1.SequenceEqual(args2))\n                        return false; 716623"];
3553 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 716624"];
3554 [label="return true; 716625"];
3555 [label="int index = unmatched.IndexOf(d); 716626"];
3556 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 716627"];
3557 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 716628"];
3558 [label="unmatched.RemoveAt(index); 716629"];
3559 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 716630"];
3560 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 716631"];
3561 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 716632"];
3562 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 716633"];
3563 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 716634"];
3564 [label="DiagnosticDescription.GetAssertText(expected, actual) 716635"];
3565 [label="param GetAssertText(DiagnosticDescription[] expected) 716636"];
3566 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 716637"];
3567 [label="const int CSharp = 1; 716638"];
3568 [label="const int VisualBasic = 2; 716639"];
3569 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 716640"];
3570 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 716641"];
3571 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 716642"];
3572 [label="actual.Any() && actual.First() is CSDiagnostic 716643"];
3573 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 716644"];
3574 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 716645"];
3575 [label="int indentDepth = (language == CSharp) ? 4 : 1; 716646"];
3576 [label="(language == CSharp) 716647"];
3577 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 716648"];
3578 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 716649"];
3579 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 716650"];
3580 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 716651"];
3581 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 716652"];
3582 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 716653"];
3583 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 716654"];
3584 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 716655"];
3585 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 716656"];
3586 [label="IsSortedOrEmpty(expected) 716657"];
3587 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 716658"];
3588 [label="new LinePositionComparer() 716659"];
3589 [label="param LinePositionComparer(this) 716660"];
3590 [label="Instance = new LinePositionComparer() 716661"];
3591 [label="var comparer = LinePositionComparer.Instance; 716662"];
3592 [label="DiagnosticDescription last = null; 716663"];
3593 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 716664"];
3594 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 716665"];
3595 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 716666"];
3596 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 716667"];
3597 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 716668"];
3598 [label="last = diagnostic; 716669"];
3599 [label="return true; 716670"];
3600 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 716671"];
3601 [label="actual = Sort(actual); 716672"];
3602 [label="Sort(actual) 716673"];
3603 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 716674"];
3604 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 716675"];
3605 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 716676"];
3606 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 716677"];
3607 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 716678"];
3608 [label="var assertText = new StringBuilder(); 716679"];
3609 [label="assertText.AppendLine(); 716680"];
3610 [label="int i; 716681"];
3611 [label="assertText.AppendLine('Expected:'); 716682"];
3612 [label="assertText.AppendLine('Expected:'); 716683"];
3613 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 716684"];
3614 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 716685"];
3615 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 716686"];
3616 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 716687"];
3617 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 716688"];
3618 [label="GetDiagnosticDescription(d, indentDepth) 716689"];
3619 [label="param GetDiagnosticDescription(DiagnosticDescription d) 716690"];
3620 [label="param GetDiagnosticDescription(int indentDepth) 716691"];
3621 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716692"];
3622 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716693"];
3623 [label="d.ToString() 716694"];
3624 [label="param ToString(this) 716695"];
3625 [label="var sb = new StringBuilder(); 716696"];
3626 [label="sb.Append('Diagnostic('); 716697"];
3627 [label="sb.Append('Diagnostic('); 716698"];
3628 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 716699"];
3629 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 716700"];
3630 [label="sb.Append(_errorCodeType.Name); 716701"];
3631 [label="sb.Append(_errorCodeType.Name); 716702"];
3632 [label="sb.Append('.'); 716703"];
3633 [label="sb.Append('.'); 716704"];
3634 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 716705"];
3635 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 716706"];
3636 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 716707"];
3637 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 716708"];
3638 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 716709"];
3639 [label="sb.Append(', \\''); 716710"];
3640 [label="sb.Append(', \\''); 716711"];
3641 [label="sb.Append(_squiggledText); 716712"];
3642 [label="sb.Append(_squiggledText); 716713"];
3643 [label="sb.Append('''); 716714"];
3644 [label="sb.Append('''); 716715"];
3645 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 716716"];
3646 [label="sb.Append(')'); 716717"];
3647 [label="sb.Append(')'); 716718"];
3648 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 716719"];
3649 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 716720"];
3650 [label="sb.Append('.WithArguments('); 716721"];
3651 [label="sb.Append('.WithArguments('); 716722"];
3652 [label="GetArgumentsAsStrings() 716723"];
3653 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 716724"];
3654 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 716725"];
3655 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 716726"];
3656 [label="sb.Append('\\''); 716727"];
3657 [label="sb.Append('\\''); 716728"];
3658 [label="sb.Append(argumentStrings.Current); 716729"];
3659 [label="sb.Append(argumentStrings.Current); 716730"];
3660 [label="sb.Append('\\''); 716731"];
3661 [label="sb.Append('\\''); 716732"];
3662 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 716733"];
3663 [label="sb.Append(', '); 716734"];
3664 [label="sb.Append(', '); 716735"];
3665 [label="sb.Append(')'); 716736"];
3666 [label="sb.Append(')'); 716737"];
3667 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 716738"];
3668 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 716739"];
3669 [label="sb.Append('.WithLocation('); 716740"];
3670 [label="sb.Append('.WithLocation('); 716741"];
3671 [label="sb.Append(_startPosition.Value.Line + 1); 716742"];
3672 [label="sb.Append(_startPosition.Value.Line + 1); 716743"];
3673 [label="sb.Append(', '); 716744"];
3674 [label="sb.Append(', '); 716745"];
3675 [label="sb.Append(_startPosition.Value.Character + 1); 716746"];
3676 [label="sb.Append(_startPosition.Value.Character + 1); 716747"];
3677 [label="sb.Append(')'); 716748"];
3678 [label="sb.Append(')'); 716749"];
3679 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 716750"];
3680 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 716751"];
3681 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 716752"];
3682 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 716753"];
3683 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 716754"];
3684 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 716755"];
3685 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 716756"];
3686 [label="return sb.ToString(); 716757"];
3687 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716758"];
3688 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716759"];
3689 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 716760"];
3690 [label="GetCommaSeparatedLines(assertText, expectedText); 716761"];
3691 [label="GetCommaSeparatedLines(assertText, expectedText); 716762"];
3692 [label="GetCommaSeparatedLines(assertText, expectedText) 716763"];
3693 [label="param GetCommaSeparatedLines(StringBuilder sb) 716764"];
3694 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 716765"];
3695 [label="int n = lines.Count; 716766"];
3696 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 716767"];
3697 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 716768"];
3698 [label="sb.Append(lines[i]); 716769"];
3699 [label="sb.Append(lines[i]); 716770"];
3700 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 716771"];
3701 [label="sb.AppendLine(); 716772"];
3702 [label="GetCommaSeparatedLines(assertText, expectedText); 716773"];
3703 [label="assertText.AppendLine('Actual:'); 716774"];
3704 [label="assertText.AppendLine('Actual:'); 716775"];
3705 [label="var actualText = ArrayBuilder<string>.GetInstance(); 716776"];
3706 [label="var e = actual.GetEnumerator(); 716777"];
3707 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 716778"];
3708 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 716779"];
3709 [label="param Compare(LinePosition? x) 716780"];
3710 [label="param Compare(LinePosition? y) 716781"];
3711 [label="param Compare(this) 716782"];
3712 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 716783"];
3713 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 716784"];
3714 [label="if (y == null)\n                {\n                    return 1;\n                } 716785"];
3715 [label="if (y == null)\n                {\n                    return 1;\n                } 716786"];
3716 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 716787"];
3717 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 716788"];
3718 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 716789"];
3719 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 716790"];
3720 [label="return x.Value.Character.CompareTo(y.Value.Character); 716791"];
3721 [label="return x.Value.Character.CompareTo(y.Value.Character); 716792"];
3722 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 716793"];
3723 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 716794"];
3724 [label="Diagnostic d = e.Current; 716795"];
3725 [label="string message = d.ToString(); 716796"];
3726 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 716797"];
3727 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 716798"];
3728 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 716799"];
3729 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 716800"];
3730 [label="Indent(assertText, indentDepth); 716801"];
3731 [label="Indent(assertText, indentDepth); 716802"];
3732 [label="Indent(assertText, indentDepth) 716803"];
3733 [label="param Indent(StringBuilder sb) 716804"];
3734 [label="param Indent(int count) 716805"];
3735 [label="sb.Append(' ', 4 * count); 716806"];
3736 [label="sb.Append(' ', 4 * count); 716807"];
3737 [label="sb.Append(' ', 4 * count); 716808"];
3738 [label="Indent(assertText, indentDepth); 716809"];
3739 [label="assertText.Append('// '); 716810"];
3740 [label="assertText.Append('// '); 716811"];
3741 [label="assertText.AppendLine(d.ToString()); 716812"];
3742 [label="assertText.AppendLine(d.ToString()); 716813"];
3743 [label="var l = d.Location; 716814"];
3744 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 716815"];
3745 [label="Indent(assertText, indentDepth); 716816"];
3746 [label="Indent(assertText, indentDepth); 716817"];
3747 [label="Indent(assertText, indentDepth) 716818"];
3748 [label="param Indent(StringBuilder sb) 716819"];
3749 [label="param Indent(int count) 716820"];
3750 [label="sb.Append(' ', 4 * count); 716821"];
3751 [label="sb.Append(' ', 4 * count); 716822"];
3752 [label="sb.Append(' ', 4 * count); 716823"];
3753 [label="Indent(assertText, indentDepth); 716824"];
3754 [label="assertText.Append('// '); 716825"];
3755 [label="assertText.Append('// '); 716826"];
3756 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 716827"];
3757 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 716828"];
3758 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 716829"];
3759 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 716830"];
3760 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 716831"];
3761 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 716832"];
3762 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 716833"];
3763 [label="param DiagnosticDescription(Diagnostic d) 716834"];
3764 [label="param DiagnosticDescription(bool errorCodeOnly) 716835"];
3765 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 716836"];
3766 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 716837"];
3767 [label="param DiagnosticDescription(this) 716838"];
3768 [label="_code 716839"];
3769 [label="_isWarningAsError 716840"];
3770 [label="_isSuppressed 716841"];
3771 [label="_squiggledText 716842"];
3772 [label="_arguments 716843"];
3773 [label="_startPosition 716844"];
3774 [label="_errorCodeType 716845"];
3775 [label="_defaultSeverityOpt 716846"];
3776 [label="_effectiveSeverityOpt 716847"];
3777 [label="_code 716848"];
3778 [label="_isWarningAsError 716849"];
3779 [label="_isSuppressed 716850"];
3780 [label="_location 716851"];
3781 [label="DiagnosticWithInfo dinfo = null; 716852"];
3782 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 716853"];
3783 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 716854"];
3784 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 716855"];
3785 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 716856"];
3786 [label="var diffDescription = description; 716857"];
3787 [label="var idx = Array.IndexOf(expected, description); 716858"];
3788 [label="var idx = Array.IndexOf(expected, description); 716859"];
3789 [label="var idx = Array.IndexOf(expected, description); 716860"];
3790 [label="var idx = Array.IndexOf(expected, description); 716861"];
3791 [label="if (d == null)\n                return false; 716862"];
3792 [label="if (d == null)\n                return false; 716863"];
3793 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 716864"];
3794 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 716865"];
3795 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 716866"];
3796 [label="if (_squiggledText != d._squiggledText)\n                    return false; 716867"];
3797 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 716868"];
3798 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 716869"];
3799 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 716870"];
3800 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 716871"];
3801 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 716872"];
3802 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 716873"];
3803 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 716874"];
3804 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 716875"];
3805 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 716876"];
3806 [label="if (d._arguments == null)\n                    return false; 716877"];
3807 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 716878"];
3808 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 716879"];
3809 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 716880"];
3810 [label="diffDescription = expected[idx]; 716881"];
3811 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 716882"];
3812 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 716883"];
3813 [label="GetDiagnosticDescription(description, indentDepth) 716884"];
3814 [label="param GetDiagnosticDescription(DiagnosticDescription d) 716885"];
3815 [label="param GetDiagnosticDescription(int indentDepth) 716886"];
3816 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716887"];
3817 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716888"];
3818 [label="var sb = new StringBuilder(); 716889"];
3819 [label="sb.Append('Diagnostic('); 716890"];
3820 [label="sb.Append('Diagnostic('); 716891"];
3821 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 716892"];
3822 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 716893"];
3823 [label="sb.Append(_errorCodeType.Name); 716894"];
3824 [label="sb.Append(_errorCodeType.Name); 716895"];
3825 [label="sb.Append('.'); 716896"];
3826 [label="sb.Append('.'); 716897"];
3827 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 716898"];
3828 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 716899"];
3829 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 716900"];
3830 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 716901"];
3831 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 716902"];
3832 [label="sb.Append(', \\''); 716903"];
3833 [label="sb.Append(', \\''); 716904"];
3834 [label="sb.Append(_squiggledText); 716905"];
3835 [label="sb.Append(_squiggledText); 716906"];
3836 [label="sb.Append('''); 716907"];
3837 [label="sb.Append('''); 716908"];
3838 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 716909"];
3839 [label="sb.Append(')'); 716910"];
3840 [label="sb.Append(')'); 716911"];
3841 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 716912"];
3842 [label="sb.Append('.WithArguments('); 716913"];
3843 [label="sb.Append('.WithArguments('); 716914"];
3844 [label="sb.Append('\\''); 716915"];
3845 [label="sb.Append('\\''); 716916"];
3846 [label="sb.Append(argumentStrings.Current); 716917"];
3847 [label="sb.Append(argumentStrings.Current); 716918"];
3848 [label="sb.Append('\\''); 716919"];
3849 [label="sb.Append('\\''); 716920"];
3850 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 716921"];
3851 [label="sb.Append(', '); 716922"];
3852 [label="sb.Append(', '); 716923"];
3853 [label="sb.Append(')'); 716924"];
3854 [label="sb.Append(')'); 716925"];
3855 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 716926"];
3856 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 716927"];
3857 [label="sb.Append('.WithLocation('); 716928"];
3858 [label="sb.Append('.WithLocation('); 716929"];
3859 [label="sb.Append(_startPosition.Value.Line + 1); 716930"];
3860 [label="sb.Append(_startPosition.Value.Line + 1); 716931"];
3861 [label="sb.Append(', '); 716932"];
3862 [label="sb.Append(', '); 716933"];
3863 [label="sb.Append(_startPosition.Value.Character + 1); 716934"];
3864 [label="sb.Append(_startPosition.Value.Character + 1); 716935"];
3865 [label="sb.Append(')'); 716936"];
3866 [label="sb.Append(')'); 716937"];
3867 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 716938"];
3868 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 716939"];
3869 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 716940"];
3870 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 716941"];
3871 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 716942"];
3872 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 716943"];
3873 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 716944"];
3874 [label="return sb.ToString(); 716945"];
3875 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716946"];
3876 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716947"];
3877 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 716948"];
3878 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 716949"];
3879 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 716950"];
3880 [label="GetDiagnosticDescription(diffDescription, indentDepth) 716951"];
3881 [label="param GetDiagnosticDescription(DiagnosticDescription d) 716952"];
3882 [label="param GetDiagnosticDescription(int indentDepth) 716953"];
3883 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716954"];
3884 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 716955"];
3885 [label="var sb = new StringBuilder(); 716956"];
3886 [label="sb.Append('Diagnostic('); 716957"];
3887 [label="sb.Append('Diagnostic('); 716958"];
3888 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 716959"];
3889 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 716960"];
3890 [label="sb.Append(_errorCodeType.Name); 716961"];
3891 [label="sb.Append(_errorCodeType.Name); 716962"];
3892 [label="sb.Append('.'); 716963"];
3893 [label="sb.Append('.'); 716964"];
3894 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 716965"];
3895 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 716966"];
3896 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 716967"];
3897 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 716968"];
3898 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 716969"];
3899 [label="sb.Append(', \\''); 716970"];
3900 [label="sb.Append(', \\''); 716971"];
3901 [label="sb.Append(_squiggledText); 716972"];
3902 [label="sb.Append(_squiggledText); 716973"];
3903 [label="sb.Append('''); 716974"];
3904 [label="sb.Append('''); 716975"];
3905 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 716976"];
3906 [label="sb.Append(')'); 716977"];
3907 [label="sb.Append(')'); 716978"];
3908 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 716979"];
3909 [label="sb.Append('.WithArguments('); 716980"];
3910 [label="sb.Append('.WithArguments('); 716981"];
3911 [label="sb.Append('\\''); 716982"];
3912 [label="sb.Append('\\''); 716983"];
3913 [label="sb.Append(argumentStrings.Current); 716984"];
3914 [label="sb.Append(argumentStrings.Current); 716985"];
3915 [label="sb.Append('\\''); 716986"];
3916 [label="sb.Append('\\''); 716987"];
3917 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 716988"];
3918 [label="sb.Append(', '); 716989"];
3919 [label="sb.Append(', '); 716990"];
3920 [label="sb.Append(')'); 716991"];
3921 [label="sb.Append(')'); 716992"];
3922 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 716993"];
3923 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 716994"];
3924 [label="sb.Append('.WithLocation('); 716995"];
3925 [label="sb.Append('.WithLocation('); 716996"];
3926 [label="sb.Append(_startPosition.Value.Line + 1); 716997"];
3927 [label="sb.Append(_startPosition.Value.Line + 1); 716998"];
3928 [label="sb.Append(', '); 716999"];
3929 [label="sb.Append(', '); 717000"];
3930 [label="sb.Append(_startPosition.Value.Character + 1); 717001"];
3931 [label="sb.Append(_startPosition.Value.Character + 1); 717002"];
3932 [label="sb.Append(')'); 717003"];
3933 [label="sb.Append(')'); 717004"];
3934 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 717005"];
3935 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 717006"];
3936 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 717007"];
3937 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 717008"];
3938 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 717009"];
3939 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 717010"];
3940 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 717011"];
3941 [label="return sb.ToString(); 717012"];
3942 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 717013"];
3943 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 717014"];
3944 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 717015"];
3945 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 717016"];
3946 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 717017"];
3947 [label="assertText.AppendLine(); 717018"];
3948 [label="assertText.AppendLine('Diff:'); 717019"];
3949 [label="assertText.AppendLine('Diff:'); 717020"];
3950 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717021"];
3951 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717022"];
3952 [label="new[] { '\\r', '\\n' } 717023"];
3953 [label="'\\r' 717024"];
3954 [label="'\\n' 717025"];
3955 [label="new[] { '\\r', '\\n' } 717026"];
3956 [label="new[] { '\\r', '\\n' } 717027"];
3957 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 717028"];
3958 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717029"];
3959 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717030"];
3960 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 717031"];
3961 [label="param DiffReport(IEnumerable<T> expected) 717032"];
3962 [label="param DiffReport(IEnumerable<T> actual) 717033"];
3963 [label="param DiffReport(string separator) 717034"];
3964 [label="param DiffReport(IEqualityComparer<T> comparer = null) 717035"];
3965 [label="param DiffReport(Func<T, string> toString = null) 717036"];
3966 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 717037"];
3967 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 717038"];
3968 [label="(comparer != null) 717039"];
3969 [label="EqualityComparer<T>.Default 717040"];
3970 [label="new LCS<T>(EqualityComparer<T>.Default) 717041"];
3971 [label="param LCS(IEqualityComparer<T> comparer) 717042"];
3972 [label="param LCS(this) 717043"];
3973 [label="1 717044"];
3974 [label="DeleteCost = 1 717045"];
3975 [label="1 717046"];
3976 [label="InsertCost = 1 717047"];
3977 [label="2 717048"];
3978 [label="UpdateCost = 2 717049"];
3979 [label="param LongestCommonSubsequence(this) 717050"];
3980 [label="_comparer 717051"];
3981 [label="_comparer 717052"];
3982 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 717053"];
3983 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 717054"];
3984 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 717055"];
3985 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 717056"];
3986 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 717057"];
3987 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717058"];
3988 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717059"];
3989 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717060"];
3990 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717061"];
3991 [label="lcs.CalculateDiff(expectedList, actualList, toString) 717062"];
3992 [label="param CalculateDiff(IList<T> sequenceA) 717063"];
3993 [label="param CalculateDiff(IList<T> sequenceB) 717064"];
3994 [label="param CalculateDiff(Func<T, string> toString) 717065"];
3995 [label="param CalculateDiff(this) 717066"];
3996 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717067"];
3997 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717068"];
3998 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717069"];
3999 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717070"];
4000 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 717071"];
4001 [label="param GetEdits(TSequence sequenceA) 717072"];
4002 [label="param GetEdits(int lengthA) 717073"];
4003 [label="param GetEdits(TSequence sequenceB) 717074"];
4004 [label="param GetEdits(int lengthB) 717075"];
4005 [label="param GetEdits(this) 717076"];
4006 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717077"];
4007 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717078"];
4008 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717079"];
4009 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717080"];
4010 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 717081"];
4011 [label="param ComputeCostMatrix(TSequence sequenceA) 717082"];
4012 [label="param ComputeCostMatrix(int lengthA) 717083"];
4013 [label="param ComputeCostMatrix(TSequence sequenceB) 717084"];
4014 [label="param ComputeCostMatrix(int lengthB) 717085"];
4015 [label="param ComputeCostMatrix(this) 717086"];
4016 [label="var la = lengthA + 1; 717087"];
4017 [label="var la = lengthA + 1; 717088"];
4018 [label="var lb = lengthB + 1; 717089"];
4019 [label="var lb = lengthB + 1; 717090"];
4020 [label="var d = new int[la, lb]; 717091"];
4021 [label="d[0, 0] = 0; 717092"];
4022 [label="d[0, 0] 717093"];
4023 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 717094"];
4024 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 717095"];
4025 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 717096"];
4026 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 717097"];
4027 [label="d[i, 0] 717098"];
4028 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 717099"];
4029 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 717100"];
4030 [label="d[0, j] = d[0, j - 1] + InsertCost; 717101"];
4031 [label="d[0, j] = d[0, j - 1] + InsertCost; 717102"];
4032 [label="d[0, j] 717103"];
4033 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 717104"];
4034 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 717105"];
4035 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 717106"];
4036 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 717107"];
4037 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717108"];
4038 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717109"];
4039 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717110"];
4040 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717111"];
4041 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 717112"];
4042 [label="param ItemsEqual(IList<T> sequenceA) 717113"];
4043 [label="param ItemsEqual(int indexA) 717114"];
4044 [label="param ItemsEqual(IList<T> sequenceB) 717115"];
4045 [label="param ItemsEqual(int indexB) 717116"];
4046 [label="param ItemsEqual(this) 717117"];
4047 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 717118"];
4048 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 717119"];
4049 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 717120"];
4050 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717121"];
4051 [label="int m2 = d[i - 1, j] + DeleteCost; 717122"];
4052 [label="int m2 = d[i - 1, j] + DeleteCost; 717123"];
4053 [label="int m3 = d[i, j - 1] + InsertCost; 717124"];
4054 [label="int m3 = d[i, j - 1] + InsertCost; 717125"];
4055 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 717126"];
4056 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 717127"];
4057 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 717128"];
4058 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 717129"];
4059 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 717130"];
4060 [label="d[i, j] 717131"];
4061 [label="return d; 717132"];
4062 [label="int i = lengthA; 717133"];
4063 [label="int j = lengthB; 717134"];
4064 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 717135"];
4065 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 717136"];
4066 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 717137"];
4067 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 717138"];
4068 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 717139"];
4069 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 717140"];
4070 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 717141"];
4071 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 717142"];
4072 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 717143"];
4073 [label="i--; 717144"];
4074 [label="j--; 717145"];
4075 [label="yield return new Edit(EditKind.Update, i, j); 717146"];
4076 [label="yield return new Edit(EditKind.Update, i, j); 717147"];
4077 [label="yield return new Edit(EditKind.Update, i, j); 717148"];
4078 [label="yield return new Edit(EditKind.Update, i, j); 717149"];
4079 [label="new Edit(EditKind.Update, i, j) 717150"];
4080 [label="param Edit(EditKind kind) 717151"];
4081 [label="param Edit(int indexA) 717152"];
4082 [label="param Edit(int indexB) 717153"];
4083 [label="param Edit(this) 717154"];
4084 [label="this.Kind 717155"];
4085 [label="this.IndexA 717156"];
4086 [label="this.IndexB 717157"];
4087 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 717158"];
4088 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 717159"];
4089 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 717160"];
4090 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 717161"];
4091 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717162"];
4092 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 717163"];
4093 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 717164"];
4094 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 717165"];
4095 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 717166"];
4096 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717167"];
4097 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717168"];
4098 [label="actualText.Free(); 717169"];
4099 [label="expectedText.Free(); 717170"];
4100 [label="return assertText.ToString(); 717171"];
4101 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 717172"];
4102 [label="diagnostics.Verify(expected); 717173"];
4103 [label="VerifyAssemblyIds(c, diagnostics); 717174"];
4104 [label="VerifyAssemblyIds(c, diagnostics); 717175"];
4105 [label="VerifyAssemblyIds(c, diagnostics) 717176"];
4106 [label="param VerifyAssemblyIds(TCompilation c) 717177"];
4107 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 717178"];
4108 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 717179"];
4109 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 717180"];
4110 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 717181"];
4111 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 717182"];
4112 [label="CustomAssert.True(assemblyIds.IsEmpty); 717183"];
4113 [label="VerifyAssemblyIds(c, diagnostics); 717184"];
4114 [label="return c; 717185"];
4115 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717186"];
4116 [label="text 717187"];
4117 [label="param operator(string source) 717188"];
4118 [label="source 717189"];
4119 [label="new CSharpTestSource(source) 717190"];
4120 [label="param CSharpTestSource(object value) 717191"];
4121 [label="param CSharpTestSource(this) 717192"];
4122 [label="Value 717193"];
4123 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717194"];
4124 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717195"];
4125 [label="CreateCompilationWithMscorlib45(text) 717196"];
4126 [label="param CreateCompilationWithMscorlib45(CSharpTestSource source) 717197"];
4127 [label="param CreateCompilationWithMscorlib45(IEnumerable<MetadataReference> references = null) 717198"];
4128 [label="param CreateCompilationWithMscorlib45(CSharpCompilationOptions options = null) 717199"];
4129 [label="param CreateCompilationWithMscorlib45(CSharpParseOptions parseOptions = null) 717200"];
4130 [label="param CreateCompilationWithMscorlib45(string assemblyName = '') 717201"];
4131 [label="param CreateCompilationWithMscorlib45(string sourceFileName = '') 717202"];
4132 [label="param CreateCompilationWithMscorlib45(bool skipUsesIsNullable = false) 717203"];
4133 [label="source 717204"];
4134 [label="references 717205"];
4135 [label="options 717206"];
4136 [label="parseOptions 717207"];
4137 [label="TargetFramework.Mscorlib45 717208"];
4138 [label="assemblyName 717209"];
4139 [label="sourceFileName 717210"];
4140 [label="skipUsesIsNullable 717211"];
4141 [label="CreateCompilation(source, references, options, parseOptions, TargetFramework.Mscorlib45, assemblyName, sourceFileName, skipUsesIsNullable) 717212"];
4142 [label="param CreateCompilation(CSharpTestSource source) 717213"];
4143 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 717214"];
4144 [label="param CreateCompilation(CSharpCompilationOptions options = null) 717215"];
4145 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 717216"];
4146 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 717217"];
4147 [label="param CreateCompilation(string assemblyName = '') 717218"];
4148 [label="param CreateCompilation(string sourceFileName = '') 717219"];
4149 [label="param CreateCompilation(bool skipUsesIsNullable = false) 717220"];
4150 [label="source 717221"];
4151 [label="targetFramework 717222"];
4152 [label="references 717223"];
4153 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 717224"];
4154 [label="param GetReferences(TargetFramework tf) 717225"];
4155 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 717226"];
4156 [label="var references = GetReferences(tf); 717227"];
4157 [label="GetReferences(tf) 717228"];
4158 [label="param GetReferences(TargetFramework targetFramework) 717229"];
4159 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 717230"];
4160 [label="Mscorlib45References 717231"];
4161 [label="Net451.mscorlib 717232"];
4162 [label="ImmutableArray.Create<MetadataReference>(Net451.mscorlib) 717233"];
4163 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 717234"];
4164 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 717235"];
4165 [label="return references; 717236"];
4166 [label="options 717237"];
4167 [label="parseOptions 717238"];
4168 [label="assemblyName 717239"];
4169 [label="sourceFileName 717240"];
4170 [label="skipUsesIsNullable 717241"];
4171 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 717242"];
4172 [label="param CreateEmptyCompilation(CSharpTestSource source) 717243"];
4173 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 717244"];
4174 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 717245"];
4175 [label="param CreateEmptyCompilation(string assemblyName = '') 717246"];
4176 [label="param CreateEmptyCompilation(string sourceFileName = '') 717247"];
4177 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 717248"];
4178 [label="source 717249"];
4179 [label="options 717250"];
4180 [label="parseOptions 717251"];
4181 [label="assemblyName 717252"];
4182 [label="sourceFileName 717253"];
4183 [label="skipUsesIsNullable 717254"];
4184 [label="null 717255"];
4185 [label="experimentalFeature: null 717256"];
4186 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 717257"];
4187 [label="param CreateCompilationCore(CSharpTestSource source) 717258"];
4188 [label="param CreateCompilationCore(CSharpCompilationOptions options) 717259"];
4189 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 717260"];
4190 [label="param CreateCompilationCore(string assemblyName) 717261"];
4191 [label="param CreateCompilationCore(string sourceFileName) 717262"];
4192 [label="param CreateCompilationCore(bool skipUsesIsNullable) 717263"];
4193 [label="param CreateCompilationCore(MessageID? experimentalFeature) 717264"];
4194 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 717265"];
4195 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 717266"];
4196 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 717267"];
4197 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 717268"];
4198 [label="param GetSyntaxTrees(string sourceFileName = '') 717269"];
4199 [label="param GetSyntaxTrees(this) 717270"];
4200 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 717271"];
4201 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 717272"];
4202 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 717273"];
4203 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 717274"];
4204 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 717275"];
4205 [label="param Parse(string text) 717276"];
4206 [label="param Parse(string filename = '') 717277"];
4207 [label="param Parse(CSharpParseOptions options = null) 717278"];
4208 [label="param Parse(Encoding encoding = null) 717279"];
4209 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 717280"];
4210 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 717281"];
4211 [label="options = TestOptions.Regular; 717282"];
4212 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 717283"];
4213 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 717284"];
4214 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 717285"];
4215 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 717286"];
4216 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 717287"];
4217 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 717288"];
4218 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 717289"];
4219 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 717290"];
4220 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 717291"];
4221 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 717292"];
4222 [label="var stream = new MemoryStream(); 717293"];
4223 [label="var root = tree.GetRoot(); 717294"];
4224 [label="var root = tree.GetRoot(); 717295"];
4225 [label="root.SerializeTo(stream); 717296"];
4226 [label="root.SerializeTo(stream); 717297"];
4227 [label="root.SerializeTo(stream); 717298"];
4228 [label="stream.Position = 0; 717299"];
4229 [label="stream.Position 717300"];
4230 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 717301"];
4231 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 717302"];
4232 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 717303"];
4233 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 717304"];
4234 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 717305"];
4235 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 717306"];
4236 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 717307"];
4237 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 717308"];
4238 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 717309"];
4239 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 717310"];
4240 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 717311"];
4241 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 717312"];
4242 [label="param ValidateIOperations(Func<Compilation> createCompilation) 717313"];
4243 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 717314"];
4244 [label="return; 717315"];
4245 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 717316"];
4246 [label="var compilation = createCompilationLambda(); 717317"];
4247 [label="return Guid.NewGuid().ToString('D'); 717318"];
4248 [label="IsNullableEnabled(compilation) 717319"];
4249 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 717320"];
4250 [label="var options = (CSharpParseOptions)trees[0].Options; 717321"];
4251 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 717322"];
4252 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717323"];
4253 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M') 717324"];
4254 [label="param Diagnostic(object code) 717325"];
4255 [label="param Diagnostic(string squiggledText = null) 717326"];
4256 [label="param Diagnostic(object[] arguments = null) 717327"];
4257 [label="param Diagnostic(LinePosition? startLocation = null) 717328"];
4258 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 717329"];
4259 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 717330"];
4260 [label="param Diagnostic(bool isSuppressed = false) 717331"];
4261 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717332"];
4262 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717333"];
4263 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717334"];
4264 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717335"];
4265 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717336"];
4266 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717337"];
4267 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717338"];
4268 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 717339"];
4269 [label="param Diagnostic(object code) 717340"];
4270 [label="param Diagnostic(string squiggledText = null) 717341"];
4271 [label="param Diagnostic(object[] arguments = null) 717342"];
4272 [label="param Diagnostic(LinePosition? startLocation = null) 717343"];
4273 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 717344"];
4274 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 717345"];
4275 [label="param Diagnostic(bool isSuppressed = false) 717346"];
4276 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 717347"];
4277 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717348"];
4278 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717349"];
4279 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717350"];
4280 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717351"];
4281 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717352"];
4282 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717353"];
4283 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717354"];
4284 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 717355"];
4285 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 717356"];
4286 [label="param DiagnosticDescription(object code) 717357"];
4287 [label="param DiagnosticDescription(bool isWarningAsError) 717358"];
4288 [label="param DiagnosticDescription(string squiggledText) 717359"];
4289 [label="param DiagnosticDescription(object[] arguments) 717360"];
4290 [label="param DiagnosticDescription(LinePosition? startLocation) 717361"];
4291 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 717362"];
4292 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 717363"];
4293 [label="param DiagnosticDescription(Type errorCodeType = null) 717364"];
4294 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 717365"];
4295 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 717366"];
4296 [label="param DiagnosticDescription(bool isSuppressed = false) 717367"];
4297 [label="param DiagnosticDescription(this) 717368"];
4298 [label="_code 717369"];
4299 [label="_isWarningAsError 717370"];
4300 [label="_isSuppressed 717371"];
4301 [label="_squiggledText 717372"];
4302 [label="_arguments 717373"];
4303 [label="_startPosition 717374"];
4304 [label="_argumentOrderDoesNotMatter 717375"];
4305 [label="_errorCodeType 717376"];
4306 [label="_ignoreArgumentsWhenComparing 717377"];
4307 [label="_defaultSeverityOpt 717378"];
4308 [label="_effectiveSeverityOpt 717379"];
4309 [label="_syntaxPredicate 717380"];
4310 [label="_showPredicate 717381"];
4311 [label="_location 717382"];
4312 [label="_argumentsAsStrings 717383"];
4313 [label="_code 717384"];
4314 [label="_isWarningAsError 717385"];
4315 [label="_squiggledText 717386"];
4316 [label="_arguments 717387"];
4317 [label="_startPosition 717388"];
4318 [label="_syntaxPredicate 717389"];
4319 [label="_argumentOrderDoesNotMatter 717390"];
4320 [label="_errorCodeType = errorCodeType ?? code.GetType(); 717391"];
4321 [label="_errorCodeType 717392"];
4322 [label="_defaultSeverityOpt 717393"];
4323 [label="_effectiveSeverityOpt 717394"];
4324 [label="_isSuppressed 717395"];
4325 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 717396"];
4326 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717397"];
4327 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D') 717398"];
4328 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D') 717399"];
4329 [label="param WithArguments(params object[] arguments) 717400"];
4330 [label="param WithArguments(this) 717401"];
4331 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717402"];
4332 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717403"];
4333 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717404"];
4334 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717405"];
4335 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717406"];
4336 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717407"];
4337 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717408"];
4338 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717409"];
4339 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717410"];
4340 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717411"];
4341 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717412"];
4342 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 717413"];
4343 [label="param DiagnosticDescription(object code) 717414"];
4344 [label="param DiagnosticDescription(bool isWarningAsError) 717415"];
4345 [label="param DiagnosticDescription(string squiggledText) 717416"];
4346 [label="param DiagnosticDescription(object[] arguments) 717417"];
4347 [label="param DiagnosticDescription(LinePosition? startLocation) 717418"];
4348 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 717419"];
4349 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 717420"];
4350 [label="param DiagnosticDescription(Type errorCodeType = null) 717421"];
4351 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 717422"];
4352 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 717423"];
4353 [label="param DiagnosticDescription(bool isSuppressed = false) 717424"];
4354 [label="param DiagnosticDescription(this) 717425"];
4355 [label="_code 717426"];
4356 [label="_isWarningAsError 717427"];
4357 [label="_isSuppressed 717428"];
4358 [label="_squiggledText 717429"];
4359 [label="_arguments 717430"];
4360 [label="_startPosition 717431"];
4361 [label="_argumentOrderDoesNotMatter 717432"];
4362 [label="_errorCodeType 717433"];
4363 [label="_ignoreArgumentsWhenComparing 717434"];
4364 [label="_defaultSeverityOpt 717435"];
4365 [label="_effectiveSeverityOpt 717436"];
4366 [label="_syntaxPredicate 717437"];
4367 [label="_showPredicate 717438"];
4368 [label="_location 717439"];
4369 [label="_argumentsAsStrings 717440"];
4370 [label="_arguments 717441"];
4371 [label="_argumentOrderDoesNotMatter 717442"];
4372 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717443"];
4373 [label="Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15) 717444"];
4374 [label="param WithLocation(int line) 717445"];
4375 [label="param WithLocation(int column) 717446"];
4376 [label="param WithLocation(this) 717447"];
4377 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717448"];
4378 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717449"];
4379 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717450"];
4380 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717451"];
4381 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717452"];
4382 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717453"];
4383 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717454"];
4384 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717455"];
4385 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717456"];
4386 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717457"];
4387 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717458"];
4388 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717459"];
4389 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717460"];
4390 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 717461"];
4391 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 717462"];
4392 [label="param DiagnosticDescription(object code) 717463"];
4393 [label="param DiagnosticDescription(bool isWarningAsError) 717464"];
4394 [label="param DiagnosticDescription(string squiggledText) 717465"];
4395 [label="param DiagnosticDescription(object[] arguments) 717466"];
4396 [label="param DiagnosticDescription(LinePosition? startLocation) 717467"];
4397 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 717468"];
4398 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 717469"];
4399 [label="param DiagnosticDescription(Type errorCodeType = null) 717470"];
4400 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 717471"];
4401 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 717472"];
4402 [label="param DiagnosticDescription(bool isSuppressed = false) 717473"];
4403 [label="param DiagnosticDescription(this) 717474"];
4404 [label="_code 717475"];
4405 [label="_isWarningAsError 717476"];
4406 [label="_isSuppressed 717477"];
4407 [label="_squiggledText 717478"];
4408 [label="_arguments 717479"];
4409 [label="_startPosition 717480"];
4410 [label="_argumentOrderDoesNotMatter 717481"];
4411 [label="_errorCodeType 717482"];
4412 [label="_ignoreArgumentsWhenComparing 717483"];
4413 [label="_defaultSeverityOpt 717484"];
4414 [label="_effectiveSeverityOpt 717485"];
4415 [label="_syntaxPredicate 717486"];
4416 [label="_showPredicate 717487"];
4417 [label="_location 717488"];
4418 [label="_argumentsAsStrings 717489"];
4419 [label="_startPosition 717490"];
4420 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ); 717491"];
4421 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ) 717492"];
4422 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\n                // (15,15): error CS8189: Ref mismatch between 'C.M()' and delegate 'D'\n                //         new D(M)();\n                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, 'M').WithArguments('C.M()', 'D').WithLocation(15, 15)\n                ) 717493"];
4423 [label="param VerifyDiagnostics(this TCompilation c) 717494"];
4424 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 717495"];
4425 [label="var diagnostics = c.GetDiagnostics(); 717496"];
4426 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 717497"];
4427 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 717498"];
4428 [label="return; 717499"];
4429 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 717500"];
4430 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 717501"];
4431 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 717502"];
4432 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 717503"];
4433 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 717504"];
4434 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 717505"];
4435 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 717506"];
4436 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 717507"];
4437 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 717508"];
4438 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 717509"];
4439 [label="param GetWellKnownTypeMember(Location location = null) 717510"];
4440 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 717511"];
4441 [label="param GetWellKnownTypeMember(bool isOptional = false) 717512"];
4442 [label="Debug.Assert((syntax != null) ^ (location != null)); 717513"];
4443 [label="Debug.Assert((syntax != null) ^ (location != null)); 717514"];
4444 [label="Debug.Assert((syntax != null) ^ (location != null)); 717515"];
4445 [label="Debug.Assert((syntax != null) ^ (location != null)); 717516"];
4446 [label="DiagnosticInfo useSiteDiagnostic; 717517"];
4447 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 717518"];
4448 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 717519"];
4449 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 717520"];
4450 [label="param GetWellKnownTypeMember(bool isOptional = false) 717521"];
4451 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 717522"];
4452 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 717523"];
4453 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 717524"];
4454 [label="return memberSymbol; 717525"];
4455 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 717526"];
4456 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 717527"];
4457 [label="return memberSymbol; 717528"];
4458 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 717529"];
4459 [label="return memberSymbol; 717530"];
4460 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 717531"];
4461 [label="return memberSymbol; 717532"];
4462 [label="InScript 717533"];
4463 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 717534"];
4464 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 717535"];
4465 [label="Debug.Assert(node != null); 717536"];
4466 [label="Debug.Assert(node != null); 717537"];
4467 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 717538"];
4468 [label="param BinderFactoryVisitor(this) 717539"];
4469 [label="_position 717540"];
4470 [label="_memberDeclarationOpt 717541"];
4471 [label="_memberOpt 717542"];
4472 [label="_factory 717543"];
4473 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 717544"];
4474 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 717545"];
4475 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 717546"];
4476 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 717547"];
4477 [label="visitor.Visit(node) 717548"];
4478 [label="VisitCore(node) 717549"];
4479 [label="return ((CSharpSyntaxNode)node).Accept(this); 717550"];
4480 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 717551"];
4481 [label="CreateBinderCacheKey(parent, usage: NodeUsage.Normal) 717552"];
4482 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 717553"];
4483 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 717554"];
4484 [label="return new BinderCacheKey(node, usage); 717555"];
4485 [label="new BinderCacheKey(node, usage) 717556"];
4486 [label="param BinderCacheKey(this) 717557"];
4487 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 717558"];
4488 [label="Binder resultBinder; 717559"];
4489 [label="binderCache 717560"];
4490 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 717561"];
4491 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 717562"];
4492 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 717563"];
4493 [label="SyntaxToken token; 717564"];
4494 [label="token 717565"];
4495 [label="syntaxTree 717566"];
4496 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 717567"];
4497 [label="return _factory._syntaxTree; 717568"];
4498 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 717569"];
4499 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 717570"];
4500 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 717571"];
4501 [label="RoslynDebug.Assert(next != null); 717572"];
4502 [label="_container 717573"];
4503 [label="Debug.Assert((object)container != null); 717574"];
4504 [label="Debug.Assert(declarationSyntax != null); 717575"];
4505 [label="Debug.Assert((object)container != null || imports != null); 717576"];
4506 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 717577"];
4507 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 717578"];
4508 [label="param BindType(bool suppressUseSiteDiagnostics = false) 717579"];
4509 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 717580"];
4510 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 717581"];
4511 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 717582"];
4512 [label="Debug.Assert(diagnostics != null); 717583"];
4513 [label="Debug.Assert(diagnostics != null); 717584"];
4514 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 717585"];
4515 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 717586"];
4516 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 717587"];
4517 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 717588"];
4518 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 717589"];
4519 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 717590"];
4520 [label="return bindPredefined(syntax, diagnostics); 717591"];
4521 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 717592"];
4522 [label="param GetSpecialType(DiagnosticBag diagnostics) 717593"];
4523 [label="param GetSpecialType(SyntaxNode node) 717594"];
4524 [label="param GetSpecialType(DiagnosticBag diagnostics) 717595"];
4525 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 717596"];
4526 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 717597"];
4527 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 717598"];
4528 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 717599"];
4529 [label="Debug.Assert(typeWithAnnotations.HasType); 717600"];
4530 [label="symbol.IsType 717601"];
4531 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 717602"];
4532 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 717603"];
4533 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 717604"];
4534 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 717605"];
4535 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 717606"];
4536 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 717607"];
4537 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 717608"];
4538 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 717609"];
4539 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 717610"];
4540 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 717611"];
4541 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 717612"];
4542 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 717613"];
4543 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 717614"];
4544 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 717615"];
4545 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 717616"];
4546 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 717617"];
4547 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 717618"];
4548 [label="RoslynDebug.Assert(diagnostics != null); 717619"];
4549 [label="RoslynDebug.Assert(diagnostics != null); 717620"];
4550 [label="DiagnosticInfo? info = null; 717621"];
4551 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 717622"];
4552 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 717623"];
4553 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 717624"];
4554 [label="return kind; 717625"];
4555 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 717626"];
4556 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 717627"];
4557 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 717628"];
4558 [label="param UnwrapAlias(DiagnosticBag diagnostics) 717629"];
4559 [label="param UnwrapAlias(SyntaxNode syntax) 717630"];
4560 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 717631"];
4561 [label="param UnwrapAlias(this) 717632"];
4562 [label="symbol.IsAlias 717633"];
4563 [label="=> _symbol?.Kind == SymbolKind.Alias 717634"];
4564 [label="_symbol 717635"];
4565 [label="_symbol?.Kind == SymbolKind.Alias 717636"];
4566 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 717637"];
4567 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 717638"];
4568 [label="param GetSpecialType(DiagnosticBag diagnostics) 717639"];
4569 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 717640"];
4570 [label="param GetSpecialType(SyntaxNode node) 717641"];
4571 [label="param GetSpecialType(DiagnosticBag diagnostics) 717642"];
4572 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 717643"];
4573 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 717644"];
4574 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 717645"];
4575 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 717646"];
4576 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 717647"];
4577 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 717648"];
4578 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 717649"];
4579 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 717650"];
4580 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 717651"];
4581 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 717652"];
4582 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 717653"];
4583 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 717654"];
4584 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 717655"];
4585 [label="param ValidateParameterNameConflicts(this) 717656"];
4586 [label="PooledHashSet<string>? tpNames = null; 717657"];
4587 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 717658"];
4588 [label="PooledHashSet<string>? pNames = null; 717659"];
4589 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 717660"];
4590 [label="tpNames?.Free(); 717661"];
4591 [label="pNames?.Free(); 717662"];
4592 [label="0 717663"];
4593 [label="null 717664"];
4594 [label="param TypeConversions(this) 717665"];
4595 [label="param TypeConversions(int currentRecursionDepth) 717666"];
4596 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 717667"];
4597 [label="currentRecursionDepth 717668"];
4598 [label="otherNullabilityOpt 717669"];
4599 [label="param TypeConversions(this) 717670"];
4600 [label="param ConversionsBase(int currentRecursionDepth) 717671"];
4601 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 717672"];
4602 [label="corLibrary 717673"];
4603 [label="currentRecursionDepth 717674"];
4604 [label="IncludeNullability 717675"];
4605 [label="_lazyOtherNullability 717676"];
4606 [label="Debug.Assert((object)corLibrary != null); 717677"];
4607 [label="Debug.Assert((object)corLibrary != null); 717678"];
4608 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 717679"];
4609 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 717680"];
4610 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 717681"];
4611 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 717682"];
4612 [label="diagnostics.Verify(expected); 717683"];
4613 [label="diagnostics.Verify(expected) 717684"];
4614 [label="param Verify(params DiagnosticDescription[] expected) 717685"];
4615 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 717686"];
4616 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 717687"];
4617 [label="param Verify(params DiagnosticDescription[] expected) 717688"];
4618 [label="Verify(actual, expected, errorCodeOnly: false); 717689"];
4619 [label="Verify(actual, expected, errorCodeOnly: false); 717690"];
4620 [label="Verify(actual, expected, errorCodeOnly: false) 717691"];
4621 [label="param Verify(DiagnosticDescription[] expected) 717692"];
4622 [label="param Verify(bool errorCodeOnly) 717693"];
4623 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 717694"];
4624 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 717695"];
4625 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 717696"];
4626 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 717697"];
4627 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 717698"];
4628 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 717699"];
4629 [label="=> _defaultSeverityOpt 717700"];
4630 [label="_defaultSeverityOpt 717701"];
4631 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 717702"];
4632 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 717703"];
4633 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 717704"];
4634 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 717705"];
4635 [label="=> _effectiveSeverityOpt 717706"];
4636 [label="_effectiveSeverityOpt 717707"];
4637 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 717708"];
4638 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 717709"];
4639 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 717710"];
4640 [label="_code 717711"];
4641 [label="_isWarningAsError 717712"];
4642 [label="_isSuppressed 717713"];
4643 [label="_squiggledText 717714"];
4644 [label="_arguments 717715"];
4645 [label="_startPosition 717716"];
4646 [label="_errorCodeType 717717"];
4647 [label="_defaultSeverityOpt 717718"];
4648 [label="_effectiveSeverityOpt 717719"];
4649 [label="_code 717720"];
4650 [label="DiagnosticWithInfo dinfo = null; 717721"];
4651 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 717722"];
4652 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 717723"];
4653 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 717724"];
4654 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 717725"];
4655 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 717726"];
4656 [label="int index = unmatched.IndexOf(d); 717727"];
4657 [label="if (d == null)\n                return false; 717728"];
4658 [label="if (d == null)\n                return false; 717729"];
4659 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 717730"];
4660 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 717731"];
4661 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 717732"];
4662 [label="if (_squiggledText != d._squiggledText)\n                    return false; 717733"];
4663 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 717734"];
4664 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 717735"];
4665 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 717736"];
4666 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 717737"];
4667 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 717738"];
4668 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 717739"];
4669 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 717740"];
4670 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 717741"];
4671 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 717742"];
4672 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 717743"];
4673 [label="if (d._arguments == null)\n                    return false; 717744"];
4674 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 717745"];
4675 [label="return true; 717746"];
4676 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 717747"];
4677 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 717748"];
4678 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 717749"];
4679 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 717750"];
4680 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 717751"];
4681 [label="DiagnosticDescription.GetAssertText(expected, actual) 717752"];
4682 [label="param GetAssertText(DiagnosticDescription[] expected) 717753"];
4683 [label="const int CSharp = 1; 717754"];
4684 [label="const int VisualBasic = 2; 717755"];
4685 [label="int indentDepth = (language == CSharp) ? 4 : 1; 717756"];
4686 [label="(language == CSharp) 717757"];
4687 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 717758"];
4688 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 717759"];
4689 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 717760"];
4690 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 717761"];
4691 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 717762"];
4692 [label="IsSortedOrEmpty(expected) 717763"];
4693 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 717764"];
4694 [label="var comparer = LinePositionComparer.Instance; 717765"];
4695 [label="DiagnosticDescription last = null; 717766"];
4696 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 717767"];
4697 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 717768"];
4698 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 717769"];
4699 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 717770"];
4700 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 717771"];
4701 [label="last = diagnostic; 717772"];
4702 [label="return true; 717773"];
4703 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 717774"];
4704 [label="Sort(actual) 717775"];
4705 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 717776"];
4706 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 717777"];
4707 [label="var assertText = new StringBuilder(); 717778"];
4708 [label="assertText.AppendLine(); 717779"];
4709 [label="int i; 717780"];
4710 [label="assertText.AppendLine('Expected:'); 717781"];
4711 [label="assertText.AppendLine('Expected:'); 717782"];
4712 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 717783"];
4713 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 717784"];
4714 [label="param GetDiagnosticDescription(int indentDepth) 717785"];
4715 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 717786"];
4716 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 717787"];
4717 [label="var sb = new StringBuilder(); 717788"];
4718 [label="sb.Append('Diagnostic('); 717789"];
4719 [label="sb.Append('Diagnostic('); 717790"];
4720 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 717791"];
4721 [label="sb.Append(_errorCodeType.Name); 717792"];
4722 [label="sb.Append(_errorCodeType.Name); 717793"];
4723 [label="sb.Append('.'); 717794"];
4724 [label="sb.Append('.'); 717795"];
4725 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 717796"];
4726 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 717797"];
4727 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 717798"];
4728 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 717799"];
4729 [label="sb.Append(', \\''); 717800"];
4730 [label="sb.Append(', \\''); 717801"];
4731 [label="sb.Append(_squiggledText); 717802"];
4732 [label="sb.Append(_squiggledText); 717803"];
4733 [label="sb.Append('''); 717804"];
4734 [label="sb.Append('''); 717805"];
4735 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 717806"];
4736 [label="sb.Append(')'); 717807"];
4737 [label="sb.Append(')'); 717808"];
4738 [label="sb.Append('.WithArguments('); 717809"];
4739 [label="sb.Append('.WithArguments('); 717810"];
4740 [label="sb.Append('\\''); 717811"];
4741 [label="sb.Append('\\''); 717812"];
4742 [label="sb.Append(argumentStrings.Current); 717813"];
4743 [label="sb.Append(argumentStrings.Current); 717814"];
4744 [label="sb.Append('\\''); 717815"];
4745 [label="sb.Append('\\''); 717816"];
4746 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 717817"];
4747 [label="sb.Append(', '); 717818"];
4748 [label="sb.Append(', '); 717819"];
4749 [label="sb.Append(')'); 717820"];
4750 [label="sb.Append(')'); 717821"];
4751 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 717822"];
4752 [label="sb.Append('.WithLocation('); 717823"];
4753 [label="sb.Append('.WithLocation('); 717824"];
4754 [label="sb.Append(_startPosition.Value.Line + 1); 717825"];
4755 [label="sb.Append(_startPosition.Value.Line + 1); 717826"];
4756 [label="sb.Append(', '); 717827"];
4757 [label="sb.Append(', '); 717828"];
4758 [label="sb.Append(_startPosition.Value.Character + 1); 717829"];
4759 [label="sb.Append(_startPosition.Value.Character + 1); 717830"];
4760 [label="sb.Append(')'); 717831"];
4761 [label="sb.Append(')'); 717832"];
4762 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 717833"];
4763 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 717834"];
4764 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 717835"];
4765 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 717836"];
4766 [label="return sb.ToString(); 717837"];
4767 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 717838"];
4768 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 717839"];
4769 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 717840"];
4770 [label="GetCommaSeparatedLines(assertText, expectedText); 717841"];
4771 [label="GetCommaSeparatedLines(assertText, expectedText); 717842"];
4772 [label="GetCommaSeparatedLines(assertText, expectedText) 717843"];
4773 [label="param GetCommaSeparatedLines(StringBuilder sb) 717844"];
4774 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 717845"];
4775 [label="int n = lines.Count; 717846"];
4776 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 717847"];
4777 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 717848"];
4778 [label="sb.Append(lines[i]); 717849"];
4779 [label="sb.Append(lines[i]); 717850"];
4780 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 717851"];
4781 [label="sb.AppendLine(); 717852"];
4782 [label="GetCommaSeparatedLines(assertText, expectedText); 717853"];
4783 [label="assertText.AppendLine('Actual:'); 717854"];
4784 [label="assertText.AppendLine('Actual:'); 717855"];
4785 [label="var actualText = ArrayBuilder<string>.GetInstance(); 717856"];
4786 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 717857"];
4787 [label="param Compare(this) 717858"];
4788 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 717859"];
4789 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 717860"];
4790 [label="if (y == null)\n                {\n                    return 1;\n                } 717861"];
4791 [label="if (y == null)\n                {\n                    return 1;\n                } 717862"];
4792 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 717863"];
4793 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 717864"];
4794 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 717865"];
4795 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 717866"];
4796 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 717867"];
4797 [label="Indent(assertText, indentDepth); 717868"];
4798 [label="Indent(assertText, indentDepth); 717869"];
4799 [label="Indent(assertText, indentDepth) 717870"];
4800 [label="param Indent(StringBuilder sb) 717871"];
4801 [label="param Indent(int count) 717872"];
4802 [label="sb.Append(' ', 4 * count); 717873"];
4803 [label="sb.Append(' ', 4 * count); 717874"];
4804 [label="sb.Append(' ', 4 * count); 717875"];
4805 [label="Indent(assertText, indentDepth); 717876"];
4806 [label="assertText.Append('// '); 717877"];
4807 [label="assertText.Append('// '); 717878"];
4808 [label="Indent(assertText, indentDepth); 717879"];
4809 [label="Indent(assertText, indentDepth); 717880"];
4810 [label="Indent(assertText, indentDepth) 717881"];
4811 [label="param Indent(StringBuilder sb) 717882"];
4812 [label="param Indent(int count) 717883"];
4813 [label="sb.Append(' ', 4 * count); 717884"];
4814 [label="sb.Append(' ', 4 * count); 717885"];
4815 [label="sb.Append(' ', 4 * count); 717886"];
4816 [label="Indent(assertText, indentDepth); 717887"];
4817 [label="assertText.Append('// '); 717888"];
4818 [label="assertText.Append('// '); 717889"];
4819 [label="_code 717890"];
4820 [label="_isWarningAsError 717891"];
4821 [label="_isSuppressed 717892"];
4822 [label="_squiggledText 717893"];
4823 [label="_arguments 717894"];
4824 [label="_startPosition 717895"];
4825 [label="_errorCodeType 717896"];
4826 [label="_defaultSeverityOpt 717897"];
4827 [label="_effectiveSeverityOpt 717898"];
4828 [label="_code 717899"];
4829 [label="DiagnosticWithInfo dinfo = null; 717900"];
4830 [label="var diffDescription = description; 717901"];
4831 [label="if (d == null)\n                return false; 717902"];
4832 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 717903"];
4833 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 717904"];
4834 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 717905"];
4835 [label="if (_squiggledText != d._squiggledText)\n                    return false; 717906"];
4836 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 717907"];
4837 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 717908"];
4838 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 717909"];
4839 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 717910"];
4840 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 717911"];
4841 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 717912"];
4842 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 717913"];
4843 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 717914"];
4844 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 717915"];
4845 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 717916"];
4846 [label="assertText.AppendLine(); 717917"];
4847 [label="assertText.AppendLine('Diff:'); 717918"];
4848 [label="assertText.AppendLine('Diff:'); 717919"];
4849 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717920"];
4850 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717921"];
4851 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717922"];
4852 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 717923"];
4853 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 717924"];
4854 [label="param DiffReport(IEnumerable<T> expected) 717925"];
4855 [label="param DiffReport(IEnumerable<T> actual) 717926"];
4856 [label="param DiffReport(string separator) 717927"];
4857 [label="param DiffReport(IEqualityComparer<T> comparer = null) 717928"];
4858 [label="param DiffReport(Func<T, string> toString = null) 717929"];
4859 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 717930"];
4860 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 717931"];
4861 [label="(comparer != null) 717932"];
4862 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 717933"];
4863 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 717934"];
4864 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 717935"];
4865 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 717936"];
4866 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 717937"];
4867 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717938"];
4868 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717939"];
4869 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717940"];
4870 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 717941"];
4871 [label="lcs.CalculateDiff(expectedList, actualList, toString) 717942"];
4872 [label="param CalculateDiff(IList<T> sequenceA) 717943"];
4873 [label="param CalculateDiff(IList<T> sequenceB) 717944"];
4874 [label="param CalculateDiff(Func<T, string> toString) 717945"];
4875 [label="param CalculateDiff(this) 717946"];
4876 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717947"];
4877 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717948"];
4878 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717949"];
4879 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 717950"];
4880 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 717951"];
4881 [label="param GetEdits(TSequence sequenceA) 717952"];
4882 [label="param GetEdits(int lengthA) 717953"];
4883 [label="param GetEdits(TSequence sequenceB) 717954"];
4884 [label="param GetEdits(int lengthB) 717955"];
4885 [label="param GetEdits(this) 717956"];
4886 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717957"];
4887 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717958"];
4888 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717959"];
4889 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 717960"];
4890 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 717961"];
4891 [label="param ComputeCostMatrix(TSequence sequenceA) 717962"];
4892 [label="param ComputeCostMatrix(int lengthA) 717963"];
4893 [label="param ComputeCostMatrix(TSequence sequenceB) 717964"];
4894 [label="param ComputeCostMatrix(int lengthB) 717965"];
4895 [label="param ComputeCostMatrix(this) 717966"];
4896 [label="var la = lengthA + 1; 717967"];
4897 [label="var la = lengthA + 1; 717968"];
4898 [label="var lb = lengthB + 1; 717969"];
4899 [label="var lb = lengthB + 1; 717970"];
4900 [label="var d = new int[la, lb]; 717971"];
4901 [label="d[0, 0] = 0; 717972"];
4902 [label="d[0, 0] 717973"];
4903 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 717974"];
4904 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 717975"];
4905 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 717976"];
4906 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 717977"];
4907 [label="d[i, 0] 717978"];
4908 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 717979"];
4909 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 717980"];
4910 [label="d[0, j] = d[0, j - 1] + InsertCost; 717981"];
4911 [label="d[0, j] = d[0, j - 1] + InsertCost; 717982"];
4912 [label="d[0, j] 717983"];
4913 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 717984"];
4914 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 717985"];
4915 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 717986"];
4916 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 717987"];
4917 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717988"];
4918 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717989"];
4919 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717990"];
4920 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 717991"];
4921 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 717992"];
4922 [label="param ItemsEqual(IList<T> sequenceA) 717993"];
4923 [label="param ItemsEqual(int indexA) 717994"];
4924 [label="param ItemsEqual(IList<T> sequenceB) 717995"];
4925 [label="param ItemsEqual(int indexB) 717996"];
4926 [label="param ItemsEqual(this) 717997"];
4927 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 717998"];
4928 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 717999"];
4929 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 718000"];
4930 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 718001"];
4931 [label="int m2 = d[i - 1, j] + DeleteCost; 718002"];
4932 [label="int m2 = d[i - 1, j] + DeleteCost; 718003"];
4933 [label="int m3 = d[i, j - 1] + InsertCost; 718004"];
4934 [label="int m3 = d[i, j - 1] + InsertCost; 718005"];
4935 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 718006"];
4936 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 718007"];
4937 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 718008"];
4938 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 718009"];
4939 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 718010"];
4940 [label="d[i, j] 718011"];
4941 [label="return d; 718012"];
4942 [label="int i = lengthA; 718013"];
4943 [label="int j = lengthB; 718014"];
4944 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 718015"];
4945 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 718016"];
4946 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 718017"];
4947 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 718018"];
4948 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 718019"];
4949 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 718020"];
4950 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 718021"];
4951 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 718022"];
4952 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 718023"];
4953 [label="i--; 718024"];
4954 [label="j--; 718025"];
4955 [label="yield return new Edit(EditKind.Update, i, j); 718026"];
4956 [label="yield return new Edit(EditKind.Update, i, j); 718027"];
4957 [label="yield return new Edit(EditKind.Update, i, j); 718028"];
4958 [label="yield return new Edit(EditKind.Update, i, j); 718029"];
4959 [label="new Edit(EditKind.Update, i, j) 718030"];
4960 [label="param Edit(EditKind kind) 718031"];
4961 [label="param Edit(int indexA) 718032"];
4962 [label="param Edit(int indexB) 718033"];
4963 [label="param Edit(this) 718034"];
4964 [label="this.Kind 718035"];
4965 [label="this.IndexA 718036"];
4966 [label="this.IndexB 718037"];
4967 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 718038"];
4968 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 718039"];
4969 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 718040"];
4970 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 718041"];
4971 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 718042"];
4972 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 718043"];
4973 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 718044"];
4974 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 718045"];
4975 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 718046"];
4976 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 718047"];
4977 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 718048"];
4978 [label="actualText.Free(); 718049"];
4979 [label="expectedText.Free(); 718050"];
4980 [label="return assertText.ToString(); 718051"];
4981 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 718052"];
4982 [label="diagnostics.Verify(expected); 718053"];
4983 [label="VerifyAssemblyIds(c, diagnostics) 718054"];
4984 [label="CustomAssert.True(assemblyIds.IsEmpty); 718055"];
4985 [label="VerifyAssemblyIds(c, diagnostics); 718056"];
4986 [label="return c; 718057"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 0;
206 -> 0;
208 -> 205;
208 -> 206;
208 -> 207;
209 -> 208;
210 -> 0;
211 -> 209;
211 -> 208;
211 -> 210;
212 -> 211;
213 -> 0;
214 -> 209;
214 -> 208;
214 -> 213;
215 -> 214;
216 -> 0;
217 -> 209;
217 -> 208;
217 -> 216;
218 -> 217;
219 -> 0;
220 -> 209;
220 -> 208;
220 -> 219;
221 -> 220;
222 -> 0;
223 -> 209;
223 -> 208;
223 -> 222;
224 -> 223;
225 -> 0;
226 -> 209;
226 -> 208;
226 -> 225;
227 -> 226;
228 -> 0;
229 -> 209;
229 -> 208;
229 -> 228;
230 -> 229;
231 -> 0;
232 -> 209;
232 -> 208;
232 -> 231;
233 -> 232;
234 -> 0;
235 -> 209;
235 -> 208;
235 -> 234;
236 -> 235;
237 -> 0;
238 -> 209;
238 -> 208;
238 -> 237;
239 -> 238;
240 -> 0;
241 -> 209;
241 -> 208;
241 -> 240;
242 -> 241;
243 -> 209;
246 -> 243;
246 -> 245;
247 -> 244;
247 -> 245;
248 -> 245;
249 -> 246;
249 -> 208;
249 -> 245;
250 -> 245;
251 -> 247;
251 -> 245;
252 -> 248;
252 -> 245;
253 -> 251;
253 -> 252;
253 -> 245;
254 -> 253;
254 -> 250;
254 -> 245;
255 -> 249;
255 -> 250;
255 -> 208;
255 -> 254;
255 -> 253;
255 -> 245;
256 -> 255;
257 -> 0;
258 -> 257;
260 -> 258;
260 -> 259;
261 -> 209;
261 -> 208;
261 -> 260;
262 -> 261;
263 -> 0;
264 -> 263;
265 -> 209;
265 -> 208;
265 -> 264;
266 -> 265;
267 -> 0;
268 -> 209;
268 -> 208;
268 -> 267;
269 -> 268;
270 -> 233;
272 -> 271;
273 -> 0;
274 -> 0;
275 -> 0;
277 -> 273;
277 -> 274;
277 -> 275;
277 -> 276;
278 -> 272;
279 -> 277;
279 -> 278;
279 -> 271;
280 -> 279;
284 -> 281;
284 -> 282;
284 -> 283;
285 -> 215;
285 -> 208;
285 -> 214;
285 -> 281;
285 -> 284;
286 -> 285;
287 -> 227;
288 -> 236;
289 -> 236;
290 -> 233;
291 -> 0;
292 -> 0;
294 -> 291;
294 -> 293;
295 -> 292;
295 -> 293;
296 -> 293;
297 -> 294;
297 -> 293;
298 -> 295;
298 -> 293;
299 -> 0;
299 -> 293;
300 -> 296;
300 -> 293;
301 -> 293;
302 -> 297;
302 -> 298;
302 -> 299;
302 -> 300;
302 -> 301;
302 -> 293;
303 -> 302;
304 -> 0;
305 -> 0;
307 -> 304;
307 -> 306;
308 -> 305;
308 -> 306;
309 -> 306;
310 -> 307;
310 -> 306;
311 -> 308;
311 -> 306;
312 -> 0;
312 -> 306;
313 -> 309;
313 -> 306;
314 -> 306;
315 -> 310;
315 -> 311;
315 -> 312;
315 -> 313;
315 -> 314;
315 -> 306;
316 -> 315;
318 -> 303;
318 -> 302;
318 -> 317;
319 -> 318;
321 -> 316;
321 -> 315;
321 -> 320;
322 -> 321;
323 -> 0;
324 -> 0;
326 -> 323;
326 -> 325;
327 -> 324;
327 -> 325;
328 -> 325;
329 -> 326;
329 -> 325;
330 -> 327;
330 -> 325;
331 -> 0;
331 -> 325;
332 -> 328;
332 -> 325;
333 -> 325;
334 -> 329;
334 -> 330;
334 -> 331;
334 -> 332;
334 -> 333;
334 -> 325;
335 -> 334;
336 -> 0;
337 -> 0;
339 -> 336;
339 -> 338;
340 -> 337;
340 -> 338;
341 -> 338;
342 -> 339;
342 -> 338;
343 -> 340;
343 -> 338;
344 -> 0;
344 -> 338;
345 -> 341;
345 -> 338;
346 -> 338;
347 -> 342;
347 -> 343;
347 -> 344;
347 -> 345;
347 -> 346;
347 -> 338;
348 -> 347;
349 -> 0;
350 -> 0;
352 -> 349;
352 -> 351;
353 -> 350;
353 -> 351;
354 -> 351;
355 -> 352;
355 -> 351;
356 -> 353;
356 -> 351;
357 -> 0;
357 -> 351;
358 -> 354;
358 -> 351;
359 -> 351;
360 -> 355;
360 -> 356;
360 -> 357;
360 -> 358;
360 -> 359;
360 -> 351;
361 -> 360;
362 -> 0;
363 -> 0;
365 -> 362;
365 -> 364;
366 -> 363;
366 -> 364;
367 -> 364;
368 -> 365;
368 -> 364;
369 -> 366;
369 -> 364;
370 -> 0;
370 -> 364;
371 -> 367;
371 -> 364;
372 -> 364;
373 -> 368;
373 -> 369;
373 -> 370;
373 -> 371;
373 -> 372;
373 -> 364;
374 -> 373;
375 -> 0;
376 -> 0;
378 -> 375;
378 -> 377;
379 -> 376;
379 -> 377;
380 -> 377;
381 -> 378;
381 -> 377;
382 -> 379;
382 -> 377;
383 -> 0;
383 -> 377;
384 -> 380;
384 -> 377;
385 -> 377;
386 -> 381;
386 -> 382;
386 -> 383;
386 -> 384;
386 -> 385;
386 -> 377;
387 -> 386;
388 -> 0;
389 -> 0;
391 -> 388;
391 -> 390;
392 -> 389;
392 -> 390;
393 -> 390;
394 -> 391;
394 -> 390;
395 -> 392;
395 -> 390;
396 -> 0;
396 -> 390;
397 -> 393;
397 -> 390;
398 -> 390;
399 -> 394;
399 -> 395;
399 -> 396;
399 -> 397;
399 -> 398;
399 -> 390;
400 -> 399;
402 -> 303;
402 -> 302;
402 -> 401;
403 -> 402;
405 -> 316;
405 -> 315;
405 -> 404;
406 -> 405;
408 -> 335;
408 -> 334;
408 -> 407;
409 -> 408;
411 -> 348;
411 -> 347;
411 -> 410;
412 -> 411;
413 -> 0;
414 -> 303;
414 -> 302;
414 -> 413;
414 -> 0;
415 -> 414;
416 -> 0;
417 -> 316;
417 -> 315;
417 -> 416;
417 -> 0;
418 -> 417;
419 -> 0;
420 -> 387;
420 -> 386;
420 -> 419;
420 -> 0;
421 -> 420;
422 -> 0;
423 -> 335;
423 -> 334;
423 -> 422;
423 -> 0;
424 -> 423;
425 -> 0;
426 -> 0;
426 -> 425;
427 -> 426;
428 -> 204;
428 -> 1;
429 -> 1;
430 -> 428;
430 -> 429;
431 -> 430;
431 -> 429;
432 -> 429;
433 -> 431;
433 -> 432;
434 -> 432;
435 -> 433;
435 -> 434;
435 -> 432;
436 -> 432;
436 -> 1;
437 -> 262;
437 -> 1;
438 -> 1;
439 -> 1;
440 -> 436;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 438;
442 -> 439;
443 -> 437;
443 -> 439;
444 -> 438;
444 -> 439;
445 -> 438;
445 -> 439;
446 -> 438;
446 -> 439;
447 -> 440;
447 -> 439;
448 -> 441;
448 -> 439;
449 -> 442;
449 -> 439;
450 -> 443;
450 -> 439;
451 -> 0;
451 -> 439;
452 -> 444;
452 -> 439;
453 -> 445;
453 -> 439;
454 -> 446;
454 -> 439;
455 -> 439;
456 -> 447;
456 -> 455;
457 -> 448;
457 -> 455;
458 -> 449;
458 -> 455;
459 -> 450;
459 -> 455;
460 -> 451;
460 -> 455;
461 -> 452;
461 -> 455;
462 -> 453;
462 -> 455;
463 -> 454;
463 -> 455;
464 -> 456;
464 -> 455;
465 -> 460;
465 -> 455;
466 -> 457;
466 -> 455;
467 -> 455;
468 -> 465;
468 -> 467;
469 -> 466;
469 -> 467;
470 -> 468;
470 -> 467;
471 -> 467;
472 -> 470;
472 -> 471;
473 -> 472;
473 -> 471;
474 -> 473;
475 -> 0;
475 -> 474;
476 -> 475;
476 -> 0;
476 -> 474;
477 -> 467;
478 -> 469;
478 -> 477;
478 -> 467;
479 -> 476;
479 -> 478;
480 -> 458;
480 -> 455;
481 -> 459;
481 -> 455;
482 -> 461;
482 -> 455;
483 -> 462;
483 -> 455;
484 -> 463;
484 -> 455;
485 -> 455;
486 -> 464;
486 -> 485;
487 -> 479;
487 -> 485;
488 -> 480;
488 -> 485;
489 -> 481;
489 -> 485;
490 -> 482;
490 -> 485;
491 -> 483;
491 -> 485;
492 -> 484;
492 -> 485;
493 -> 486;
493 -> 485;
494 -> 487;
494 -> 485;
495 -> 488;
495 -> 485;
496 -> 489;
496 -> 485;
497 -> 490;
497 -> 485;
498 -> 491;
498 -> 485;
499 -> 492;
499 -> 485;
500 -> 485;
501 -> 500;
501 -> 485;
502 -> 485;
503 -> 493;
503 -> 502;
504 -> 494;
504 -> 502;
505 -> 495;
505 -> 502;
506 -> 496;
506 -> 502;
507 -> 497;
507 -> 502;
508 -> 498;
508 -> 502;
509 -> 499;
509 -> 502;
510 -> 501;
510 -> 502;
511 -> 506;
511 -> 502;
512 -> 508;
512 -> 502;
513 -> 502;
514 -> 511;
514 -> 513;
515 -> 512;
515 -> 513;
516 -> 503;
516 -> 513;
517 -> 516;
517 -> 435;
517 -> 513;
518 -> 517;
519 -> 515;
519 -> 517;
520 -> 514;
520 -> 517;
521 -> 517;
522 -> 518;
522 -> 521;
523 -> 519;
523 -> 521;
524 -> 520;
524 -> 521;
525 -> 518;
525 -> 521;
526 -> 521;
527 -> 524;
527 -> 526;
527 -> 521;
528 -> 522;
528 -> 521;
529 -> 0;
529 -> 521;
530 -> 529;
530 -> 525;
530 -> 521;
531 -> 521;
532 -> 528;
532 -> 530;
532 -> 531;
532 -> 0;
532 -> 521;
533 -> 532;
533 -> 521;
534 -> 524;
534 -> 521;
535 -> 523;
535 -> 521;
536 -> 521;
537 -> 533;
537 -> 534;
537 -> 535;
537 -> 536;
537 -> 532;
537 -> 208;
537 -> 261;
537 -> 521;
538 -> 521;
539 -> 537;
539 -> 538;
540 -> 538;
541 -> 538;
542 -> 539;
542 -> 537;
542 -> 541;
542 -> 538;
543 -> 540;
543 -> 538;
544 -> 538;
545 -> 542;
545 -> 537;
545 -> 541;
545 -> 543;
545 -> 544;
545 -> 540;
545 -> 538;
546 -> 538;
547 -> 546;
547 -> 540;
547 -> 538;
548 -> 540;
548 -> 538;
549 -> 538;
550 -> 548;
550 -> 549;
550 -> 540;
550 -> 547;
550 -> 538;
551 -> 539;
551 -> 538;
552 -> 551;
552 -> 518;
552 -> 517;
553 -> 518;
553 -> 502;
554 -> 502;
555 -> 505;
555 -> 554;
555 -> 502;
556 -> 553;
556 -> 555;
557 -> 555;
558 -> 556;
558 -> 557;
558 -> 518;
558 -> 552;
558 -> 537;
558 -> 555;
559 -> 558;
559 -> 555;
560 -> 303;
560 -> 559;
561 -> 0;
561 -> 502;
562 -> 510;
562 -> 502;
563 -> 507;
563 -> 553;
563 -> 504;
563 -> 560;
563 -> 502;
564 -> 563;
564 -> 502;
565 -> 502;
566 -> 564;
566 -> 565;
567 -> 0;
567 -> 565;
568 -> 567;
569 -> 502;
570 -> 563;
570 -> 518;
570 -> 552;
570 -> 537;
570 -> 476;
570 -> 0;
570 -> 302;
570 -> 502;
571 -> 502;
572 -> 571;
573 -> 570;
573 -> 572;
573 -> 502;
574 -> 573;
574 -> 502;
575 -> 502;
576 -> 574;
576 -> 575;
577 -> 576;
577 -> 573;
577 -> 575;
578 -> 577;
578 -> 573;
578 -> 575;
579 -> 575;
580 -> 577;
580 -> 579;
580 -> 573;
580 -> 575;
581 -> 0;
581 -> 575;
582 -> 580;
582 -> 581;
582 -> 575;
583 -> 509;
583 -> 582;
583 -> 502;
584 -> 563;
584 -> 582;
584 -> 583;
585 -> 583;
586 -> 0;
586 -> 583;
587 -> 583;
588 -> 585;
588 -> 587;
589 -> 586;
589 -> 587;
590 -> 587;
591 -> 590;
591 -> 587;
592 -> 588;
592 -> 587;
593 -> 587;
594 -> 591;
594 -> 593;
595 -> 592;
595 -> 593;
596 -> 594;
596 -> 593;
597 -> 593;
598 -> 593;
599 -> 596;
599 -> 598;
600 -> 597;
600 -> 598;
601 -> 598;
602 -> 601;
602 -> 598;
603 -> 599;
603 -> 601;
603 -> 598;
604 -> 595;
604 -> 593;
605 -> 604;
605 -> 597;
605 -> 585;
605 -> 601;
605 -> 602;
605 -> 603;
605 -> 590;
605 -> 593;
606 -> 593;
607 -> 605;
607 -> 606;
608 -> 605;
608 -> 606;
609 -> 607;
609 -> 605;
609 -> 606;
610 -> 606;
611 -> 609;
611 -> 610;
612 -> 608;
612 -> 610;
613 -> 610;
614 -> 611;
614 -> 610;
615 -> 614;
616 -> 615;
616 -> 612;
616 -> 605;
616 -> 609;
616 -> 614;
617 -> 616;
617 -> 615;
618 -> 616;
618 -> 615;
619 -> 617;
619 -> 615;
620 -> 617;
620 -> 616;
620 -> 615;
621 -> 615;
622 -> 620;
622 -> 621;
623 -> 620;
623 -> 621;
624 -> 622;
624 -> 621;
625 -> 622;
625 -> 620;
625 -> 621;
626 -> 621;
627 -> 622;
627 -> 620;
627 -> 621;
628 -> 622;
628 -> 620;
628 -> 621;
629 -> 628;
629 -> 621;
630 -> 621;
631 -> 630;
631 -> 615;
632 -> 626;
632 -> 631;
632 -> 615;
633 -> 626;
633 -> 621;
634 -> 626;
634 -> 621;
635 -> 633;
635 -> 621;
636 -> 633;
636 -> 621;
637 -> 633;
637 -> 621;
638 -> 633;
638 -> 621;
639 -> 638;
639 -> 621;
640 -> 617;
640 -> 631;
640 -> 620;
640 -> 615;
641 -> 615;
642 -> 615;
643 -> 619;
643 -> 642;
644 -> 640;
644 -> 642;
645 -> 641;
645 -> 642;
646 -> 618;
646 -> 642;
647 -> 644;
647 -> 642;
648 -> 645;
648 -> 642;
649 -> 642;
650 -> 647;
650 -> 649;
651 -> 648;
651 -> 649;
652 -> 646;
652 -> 649;
653 -> 650;
653 -> 649;
654 -> 650;
654 -> 640;
654 -> 649;
655 -> 650;
655 -> 640;
655 -> 654;
656 -> 651;
656 -> 654;
657 -> 654;
658 -> 655;
658 -> 657;
659 -> 656;
659 -> 657;
660 -> 652;
660 -> 657;
661 -> 658;
661 -> 657;
662 -> 661;
663 -> 650;
663 -> 640;
663 -> 649;
664 -> 650;
664 -> 640;
664 -> 663;
665 -> 651;
665 -> 663;
666 -> 663;
667 -> 664;
667 -> 666;
668 -> 665;
668 -> 666;
669 -> 652;
669 -> 666;
670 -> 667;
670 -> 666;
671 -> 669;
671 -> 668;
671 -> 666;
672 -> 670;
672 -> 671;
672 -> 640;
672 -> 666;
673 -> 642;
674 -> 673;
674 -> 615;
675 -> 615;
676 -> 619;
676 -> 675;
677 -> 672;
677 -> 675;
678 -> 641;
678 -> 675;
679 -> 618;
679 -> 675;
680 -> 677;
680 -> 675;
681 -> 675;
682 -> 681;
682 -> 615;
683 -> 674;
683 -> 682;
683 -> 615;
684 -> 615;
685 -> 619;
685 -> 684;
686 -> 672;
686 -> 684;
687 -> 641;
687 -> 684;
688 -> 618;
688 -> 684;
689 -> 686;
689 -> 684;
690 -> 684;
691 -> 690;
691 -> 615;
692 -> 683;
692 -> 691;
692 -> 615;
693 -> 617;
693 -> 615;
694 -> 617;
694 -> 672;
694 -> 615;
695 -> 615;
696 -> 694;
696 -> 695;
697 -> 694;
697 -> 695;
698 -> 694;
698 -> 695;
699 -> 693;
699 -> 695;
700 -> 699;
700 -> 695;
701 -> 699;
701 -> 695;
702 -> 699;
702 -> 695;
703 -> 699;
703 -> 695;
704 -> 699;
704 -> 695;
705 -> 699;
705 -> 695;
706 -> 696;
706 -> 699;
706 -> 695;
707 -> 697;
707 -> 699;
707 -> 695;
708 -> 698;
708 -> 699;
708 -> 695;
709 -> 699;
709 -> 695;
710 -> 695;
711 -> 709;
711 -> 710;
711 -> 700;
711 -> 706;
711 -> 707;
711 -> 703;
711 -> 708;
711 -> 705;
711 -> 694;
711 -> 695;
712 -> 711;
712 -> 699;
712 -> 695;
713 -> 695;
714 -> 713;
714 -> 699;
714 -> 695;
715 -> 696;
715 -> 695;
716 -> 695;
717 -> 695;
718 -> 715;
718 -> 717;
719 -> 716;
719 -> 717;
721 -> 720;
723 -> 722;
725 -> 724;
728 -> 727;
729 -> 0;
730 -> 0;
731 -> 0;
732 -> 731;
734 -> 729;
734 -> 730;
734 -> 732;
734 -> 733;
735 -> 734;
737 -> 736;
739 -> 738;
741 -> 740;
743 -> 742;
744 -> 718;
744 -> 717;
745 -> 717;
746 -> 744;
746 -> 745;
747 -> 719;
747 -> 745;
748 -> 747;
748 -> 745;
749 -> 747;
749 -> 745;
750 -> 747;
750 -> 745;
751 -> 747;
751 -> 745;
752 -> 747;
752 -> 745;
753 -> 745;
754 -> 746;
754 -> 753;
754 -> 745;
755 -> 747;
755 -> 745;
756 -> 755;
756 -> 748;
756 -> 749;
756 -> 750;
756 -> 751;
756 -> 752;
756 -> 745;
757 -> 746;
757 -> 711;
757 -> 712;
757 -> 714;
757 -> 747;
757 -> 745;
758 -> 746;
758 -> 747;
758 -> 745;
759 -> 716;
759 -> 699;
759 -> 695;
760 -> 694;
760 -> 693;
760 -> 711;
760 -> 712;
760 -> 714;
760 -> 759;
760 -> 713;
760 -> 756;
760 -> 757;
760 -> 758;
760 -> 615;
761 -> 694;
761 -> 695;
762 -> 694;
762 -> 695;
763 -> 694;
763 -> 695;
764 -> 694;
764 -> 695;
765 -> 761;
765 -> 760;
765 -> 695;
766 -> 695;
767 -> 764;
767 -> 766;
768 -> 767;
768 -> 760;
768 -> 0;
768 -> 766;
769 -> 768;
769 -> 695;
770 -> 695;
771 -> 761;
771 -> 760;
771 -> 770;
771 -> 695;
772 -> 769;
772 -> 771;
772 -> 695;
773 -> 761;
773 -> 760;
773 -> 772;
774 -> 773;
774 -> 695;
775 -> 765;
775 -> 695;
776 -> 762;
776 -> 695;
777 -> 763;
777 -> 695;
778 -> 695;
779 -> 774;
779 -> 778;
780 -> 775;
780 -> 778;
781 -> 776;
781 -> 778;
782 -> 777;
782 -> 778;
783 -> 764;
783 -> 778;
784 -> 778;
785 -> 779;
785 -> 784;
785 -> 778;
786 -> 782;
786 -> 778;
787 -> 782;
787 -> 760;
787 -> 778;
788 -> 783;
788 -> 760;
788 -> 778;
789 -> 778;
790 -> 788;
790 -> 789;
791 -> 788;
791 -> 789;
792 -> 789;
793 -> 792;
793 -> 789;
794 -> 792;
794 -> 789;
795 -> 792;
795 -> 789;
796 -> 792;
796 -> 789;
797 -> 790;
797 -> 792;
797 -> 789;
798 -> 788;
798 -> 792;
798 -> 793;
798 -> 794;
798 -> 795;
798 -> 796;
798 -> 797;
798 -> 778;
799 -> 780;
799 -> 778;
800 -> 781;
800 -> 778;
801 -> 782;
801 -> 778;
802 -> 778;
803 -> 799;
803 -> 802;
804 -> 800;
804 -> 802;
805 -> 801;
805 -> 802;
806 -> 798;
806 -> 802;
807 -> 802;
808 -> 804;
808 -> 807;
808 -> 802;
809 -> 805;
809 -> 807;
809 -> 802;
810 -> 808;
810 -> 809;
810 -> 802;
811 -> 803;
811 -> 806;
811 -> 802;
812 -> 804;
812 -> 806;
812 -> 802;
813 -> 805;
813 -> 806;
813 -> 802;
814 -> 778;
815 -> 779;
815 -> 778;
816 -> 778;
817 -> 815;
817 -> 816;
818 -> 798;
818 -> 816;
819 -> 817;
819 -> 816;
820 -> 816;
821 -> 819;
821 -> 820;
822 -> 818;
822 -> 820;
823 -> 822;
823 -> 820;
824 -> 823;
824 -> 821;
824 -> 798;
824 -> 811;
824 -> 812;
824 -> 813;
824 -> 820;
825 -> 820;
826 -> 824;
826 -> 825;
827 -> 824;
827 -> 825;
828 -> 827;
828 -> 824;
828 -> 825;
829 -> 826;
829 -> 825;
830 -> 828;
830 -> 829;
830 -> 824;
830 -> 825;
831 -> 826;
831 -> 825;
832 -> 0;
832 -> 825;
833 -> 825;
834 -> 831;
834 -> 833;
835 -> 832;
835 -> 833;
836 -> 835;
836 -> 833;
837 -> 833;
838 -> 834;
838 -> 833;
839 -> 835;
839 -> 833;
840 -> 833;
841 -> 833;
842 -> 838;
842 -> 841;
843 -> 839;
843 -> 841;
844 -> 840;
844 -> 841;
845 -> 842;
845 -> 844;
845 -> 841;
846 -> 843;
846 -> 844;
846 -> 841;
847 -> 840;
847 -> 825;
848 -> 825;
849 -> 825;
850 -> 827;
850 -> 849;
851 -> 850;
851 -> 830;
851 -> 849;
852 -> 851;
852 -> 825;
853 -> 847;
853 -> 825;
854 -> 848;
854 -> 825;
855 -> 853;
855 -> 854;
855 -> 852;
855 -> 845;
855 -> 846;
855 -> 830;
855 -> 825;
856 -> 825;
857 -> 855;
857 -> 856;
858 -> 857;
858 -> 855;
858 -> 856;
859 -> 826;
859 -> 858;
860 -> 858;
861 -> 859;
861 -> 860;
862 -> 861;
862 -> 860;
863 -> 861;
863 -> 860;
864 -> 862;
864 -> 860;
865 -> 860;
866 -> 864;
866 -> 865;
867 -> 863;
867 -> 865;
868 -> 866;
868 -> 861;
868 -> 865;
869 -> 865;
870 -> 869;
870 -> 865;
871 -> 866;
871 -> 861;
871 -> 865;
872 -> 867;
872 -> 871;
872 -> 868;
872 -> 861;
873 -> 867;
873 -> 871;
873 -> 872;
874 -> 872;
875 -> 873;
875 -> 865;
876 -> 865;
877 -> 875;
877 -> 876;
877 -> 865;
878 -> 875;
878 -> 866;
878 -> 865;
879 -> 875;
879 -> 877;
880 -> 0;
880 -> 877;
881 -> 875;
881 -> 879;
881 -> 877;
882 -> 865;
883 -> 882;
883 -> 860;
884 -> 860;
885 -> 863;
885 -> 884;
886 -> 884;
887 -> 885;
887 -> 881;
887 -> 886;
888 -> 887;
888 -> 884;
889 -> 860;
890 -> 864;
890 -> 889;
891 -> 883;
891 -> 889;
892 -> 888;
892 -> 889;
893 -> 863;
893 -> 889;
894 -> 889;
895 -> 893;
895 -> 894;
896 -> 895;
896 -> 881;
896 -> 894;
897 -> 896;
897 -> 889;
898 -> 889;
899 -> 890;
899 -> 897;
899 -> 889;
900 -> 891;
900 -> 889;
901 -> 892;
901 -> 900;
902 -> 0;
902 -> 901;
903 -> 890;
903 -> 889;
904 -> 902;
904 -> 889;
905 -> 889;
906 -> 903;
906 -> 905;
907 -> 904;
907 -> 905;
908 -> 907;
908 -> 905;
909 -> 905;
910 -> 905;
910 -> 889;
911 -> 889;
912 -> 889;
913 -> 893;
913 -> 912;
914 -> 913;
914 -> 881;
914 -> 912;
915 -> 914;
915 -> 889;
916 -> 910;
916 -> 889;
917 -> 911;
917 -> 889;
918 -> 916;
918 -> 917;
918 -> 915;
918 -> 906;
918 -> 907;
918 -> 881;
918 -> 889;
919 -> 889;
920 -> 918;
921 -> 893;
921 -> 920;
922 -> 921;
922 -> 918;
922 -> 920;
923 -> 922;
923 -> 918;
924 -> 892;
924 -> 918;
925 -> 924;
926 -> 893;
926 -> 925;
927 -> 926;
927 -> 918;
927 -> 925;
928 -> 927;
928 -> 924;
929 -> 923;
929 -> 924;
930 -> 890;
930 -> 924;
931 -> 891;
931 -> 924;
932 -> 924;
933 -> 924;
934 -> 928;
934 -> 933;
935 -> 929;
935 -> 933;
936 -> 930;
936 -> 933;
937 -> 931;
937 -> 933;
938 -> 932;
938 -> 933;
939 -> 935;
939 -> 933;
940 -> 933;
941 -> 939;
941 -> 940;
942 -> 938;
942 -> 940;
943 -> 940;
944 -> 940;
945 -> 941;
945 -> 944;
945 -> 940;
946 -> 941;
946 -> 942;
946 -> 940;
947 -> 941;
947 -> 918;
947 -> 942;
947 -> 940;
948 -> 941;
948 -> 918;
948 -> 942;
948 -> 940;
949 -> 943;
949 -> 942;
949 -> 940;
950 -> 938;
950 -> 933;
951 -> 938;
951 -> 933;
952 -> 938;
952 -> 933;
953 -> 938;
953 -> 933;
954 -> 938;
954 -> 933;
955 -> 933;
956 -> 934;
956 -> 955;
956 -> 933;
957 -> 933;
958 -> 936;
958 -> 957;
958 -> 933;
959 -> 934;
959 -> 938;
959 -> 933;
960 -> 936;
960 -> 938;
960 -> 937;
960 -> 933;
961 -> 960;
961 -> 938;
961 -> 933;
962 -> 937;
962 -> 933;
963 -> 936;
963 -> 918;
963 -> 962;
964 -> 936;
964 -> 963;
965 -> 964;
965 -> 963;
965 -> 938;
966 -> 924;
967 -> 893;
967 -> 966;
968 -> 967;
968 -> 963;
968 -> 966;
969 -> 968;
969 -> 924;
970 -> 890;
970 -> 924;
971 -> 924;
972 -> 918;
973 -> 972;
973 -> 969;
974 -> 973;
974 -> 918;
975 -> 910;
975 -> 918;
976 -> 932;
976 -> 918;
977 -> 975;
977 -> 976;
977 -> 974;
977 -> 906;
977 -> 907;
977 -> 948;
977 -> 947;
977 -> 946;
977 -> 949;
977 -> 942;
977 -> 959;
977 -> 961;
977 -> 952;
977 -> 953;
977 -> 954;
977 -> 965;
977 -> 969;
977 -> 960;
977 -> 963;
977 -> 918;
978 -> 918;
979 -> 932;
979 -> 889;
980 -> 861;
980 -> 979;
980 -> 977;
980 -> 860;
981 -> 858;
982 -> 980;
982 -> 981;
983 -> 982;
983 -> 980;
983 -> 981;
984 -> 981;
985 -> 983;
985 -> 984;
985 -> 981;
986 -> 985;
986 -> 981;
987 -> 986;
987 -> 858;
988 -> 826;
988 -> 858;
989 -> 987;
989 -> 858;
990 -> 980;
990 -> 858;
991 -> 858;
992 -> 858;
993 -> 989;
993 -> 992;
994 -> 990;
994 -> 992;
995 -> 991;
995 -> 992;
996 -> 991;
996 -> 992;
997 -> 994;
997 -> 992;
998 -> 992;
999 -> 997;
999 -> 998;
1000 -> 996;
1000 -> 998;
1001 -> 998;
1002 -> 998;
1003 -> 999;
1003 -> 1002;
1003 -> 998;
1004 -> 999;
1004 -> 987;
1004 -> 1000;
1004 -> 998;
1005 -> 999;
1005 -> 987;
1005 -> 1000;
1005 -> 998;
1006 -> 1001;
1006 -> 1000;
1006 -> 998;
1007 -> 996;
1007 -> 992;
1008 -> 996;
1008 -> 992;
1009 -> 996;
1009 -> 992;
1010 -> 996;
1010 -> 992;
1011 -> 996;
1011 -> 992;
1012 -> 992;
1013 -> 993;
1013 -> 1012;
1013 -> 992;
1014 -> 993;
1014 -> 996;
1014 -> 992;
1016 -> 0;
1017 -> 0;
1018 -> 0;
1021 -> 1015;
1021 -> 1020;
1022 -> 1016;
1022 -> 1020;
1023 -> 1017;
1023 -> 1020;
1024 -> 1018;
1024 -> 1020;
1025 -> 1019;
1025 -> 1020;
1026 -> 1020;
1027 -> 1026;
1027 -> 1020;
1028 -> 1026;
1028 -> 1020;
1029 -> 1026;
1029 -> 1020;
1030 -> 1020;
1031 -> 1022;
1031 -> 1030;
1031 -> 1020;
1032 -> 1023;
1032 -> 0;
1032 -> 1020;
1033 -> 1024;
1033 -> 0;
1033 -> 1020;
1034 -> 1021;
1034 -> 1026;
1034 -> 1020;
1035 -> 1022;
1035 -> 1026;
1035 -> 1020;
1036 -> 1023;
1036 -> 1026;
1036 -> 1020;
1037 -> 1025;
1037 -> 1026;
1037 -> 1020;
1038 -> 1024;
1038 -> 1026;
1038 -> 1020;
1039 -> 1020;
1040 -> 1039;
1040 -> 992;
1041 -> 1040;
1041 -> 995;
1041 -> 992;
1042 -> 1041;
1042 -> 996;
1042 -> 992;
1043 -> 858;
1044 -> 826;
1044 -> 987;
1044 -> 1043;
1044 -> 858;
1045 -> 826;
1045 -> 987;
1045 -> 858;
1046 -> 858;
1047 -> 1045;
1047 -> 1046;
1048 -> 991;
1048 -> 1046;
1049 -> 1048;
1049 -> 1004;
1049 -> 1046;
1050 -> 0;
1050 -> 1046;
1051 -> 1046;
1052 -> 1049;
1052 -> 1051;
1053 -> 1050;
1053 -> 1051;
1054 -> 1052;
1054 -> 1053;
1054 -> 1051;
1055 -> 1047;
1055 -> 1046;
1056 -> 1054;
1056 -> 1055;
1056 -> 1046;
1057 -> 1056;
1057 -> 1046;
1058 -> 858;
1059 -> 1058;
1059 -> 1055;
1060 -> 1059;
1060 -> 858;
1061 -> 847;
1061 -> 858;
1062 -> 1057;
1062 -> 858;
1063 -> 1061;
1063 -> 1062;
1063 -> 1060;
1063 -> 845;
1063 -> 846;
1063 -> 1005;
1063 -> 1004;
1063 -> 999;
1063 -> 1006;
1063 -> 1000;
1063 -> 1014;
1063 -> 1008;
1063 -> 1042;
1063 -> 1010;
1063 -> 1011;
1063 -> 1055;
1063 -> 1034;
1063 -> 1037;
1063 -> 1035;
1063 -> 1036;
1063 -> 1038;
1063 -> 0;
1063 -> 858;
1064 -> 858;
1065 -> 1057;
1065 -> 825;
1066 -> 824;
1066 -> 1065;
1066 -> 1063;
1066 -> 820;
1067 -> 798;
1067 -> 778;
1068 -> 783;
1068 -> 1066;
1068 -> 1067;
1068 -> 778;
1069 -> 1066;
1069 -> 778;
1070 -> 694;
1070 -> 1069;
1070 -> 1068;
1070 -> 615;
1071 -> 694;
1071 -> 695;
1072 -> 694;
1072 -> 695;
1073 -> 694;
1073 -> 695;
1074 -> 694;
1074 -> 695;
1075 -> 694;
1075 -> 695;
1076 -> 1071;
1076 -> 695;
1077 -> 1072;
1077 -> 695;
1078 -> 1073;
1078 -> 695;
1079 -> 1074;
1079 -> 695;
1080 -> 695;
1081 -> 1076;
1081 -> 1080;
1082 -> 1077;
1082 -> 1080;
1083 -> 1078;
1083 -> 1080;
1084 -> 1079;
1084 -> 1080;
1085 -> 1075;
1085 -> 1080;
1086 -> 1080;
1087 -> 1082;
1087 -> 1086;
1087 -> 1080;
1088 -> 1081;
1088 -> 1080;
1089 -> 1082;
1089 -> 1080;
1090 -> 1083;
1090 -> 1080;
1091 -> 1080;
1092 -> 1083;
1092 -> 1091;
1092 -> 1080;
1093 -> 1092;
1093 -> 1084;
1093 -> 1080;
1094 -> 1080;
1095 -> 1088;
1095 -> 1094;
1096 -> 1089;
1096 -> 1094;
1097 -> 1090;
1097 -> 1094;
1098 -> 1093;
1098 -> 1094;
1099 -> 1085;
1099 -> 1094;
1100 -> 1095;
1100 -> 1070;
1100 -> 1094;
1101 -> 1095;
1101 -> 1100;
1102 -> 1096;
1102 -> 1100;
1103 -> 1100;
1104 -> 1101;
1104 -> 1103;
1105 -> 1102;
1105 -> 1103;
1106 -> 1099;
1106 -> 1103;
1107 -> 1104;
1107 -> 1103;
1108 -> 1107;
1108 -> 1103;
1109 -> 1105;
1109 -> 1103;
1110 -> 1103;
1111 -> 1108;
1111 -> 1110;
1112 -> 1109;
1112 -> 1110;
1113 -> 1106;
1113 -> 1110;
1114 -> 1111;
1114 -> 1100;
1114 -> 1110;
1115 -> 1112;
1115 -> 1110;
1116 -> 1111;
1116 -> 1110;
1117 -> 1110;
1118 -> 1114;
1118 -> 1117;
1119 -> 1115;
1119 -> 1117;
1120 -> 1116;
1120 -> 1117;
1121 -> 1113;
1121 -> 1117;
1122 -> 1121;
1122 -> 1114;
1122 -> 1117;
1123 -> 1118;
1123 -> 1117;
1124 -> 1120;
1124 -> 1117;
1125 -> 1119;
1125 -> 1117;
1126 -> 1117;
1127 -> 1122;
1127 -> 1126;
1128 -> 1123;
1128 -> 1126;
1129 -> 1124;
1129 -> 1126;
1130 -> 1125;
1130 -> 1126;
1131 -> 1128;
1131 -> 1126;
1132 -> 1127;
1132 -> 1131;
1132 -> 1114;
1132 -> 1126;
1133 -> 1126;
1134 -> 1132;
1134 -> 1133;
1134 -> 1126;
1135 -> 1132;
1135 -> 1126;
1136 -> 1130;
1136 -> 1126;
1137 -> 1129;
1137 -> 1126;
1138 -> 1126;
1139 -> 1135;
1139 -> 1138;
1140 -> 1136;
1140 -> 1138;
1141 -> 1137;
1141 -> 1138;
1142 -> 1139;
1142 -> 1132;
1142 -> 1138;
1143 -> 1138;
1144 -> 1142;
1144 -> 1143;
1145 -> 1142;
1145 -> 1143;
1146 -> 1144;
1146 -> 1143;
1147 -> 1144;
1147 -> 1142;
1147 -> 1143;
1148 -> 1143;
1149 -> 1144;
1149 -> 1142;
1149 -> 1143;
1150 -> 1144;
1150 -> 1142;
1150 -> 1143;
1151 -> 1150;
1151 -> 1143;
1152 -> 1148;
1152 -> 1143;
1153 -> 1148;
1153 -> 1143;
1154 -> 1152;
1154 -> 1143;
1155 -> 1152;
1155 -> 1143;
1156 -> 1152;
1156 -> 1143;
1157 -> 1152;
1157 -> 1143;
1158 -> 1157;
1158 -> 1143;
1159 -> 1138;
1160 -> 1142;
1160 -> 1159;
1160 -> 1138;
1161 -> 1132;
1161 -> 1126;
1162 -> 1107;
1162 -> 1142;
1162 -> 1103;
1163 -> 1103;
1164 -> 1162;
1164 -> 1163;
1165 -> 1106;
1165 -> 1163;
1166 -> 1164;
1166 -> 1142;
1166 -> 1163;
1167 -> 1164;
1167 -> 1142;
1167 -> 1163;
1168 -> 1163;
1169 -> 1167;
1169 -> 1168;
1170 -> 1167;
1170 -> 1168;
1171 -> 1165;
1171 -> 1168;
1172 -> 1169;
1172 -> 1168;
1173 -> 1170;
1173 -> 1168;
1174 -> 1172;
1174 -> 1173;
1174 -> 1166;
1174 -> 1168;
1175 -> 1174;
1175 -> 1168;
1176 -> 1171;
1176 -> 1174;
1176 -> 1175;
1177 -> 0;
1177 -> 1175;
1178 -> 1175;
1179 -> 1171;
1179 -> 1178;
1180 -> 1179;
1180 -> 1176;
1180 -> 1178;
1181 -> 1178;
1182 -> 1179;
1182 -> 1180;
1182 -> 1181;
1183 -> 1182;
1183 -> 1181;
1184 -> 1181;
1185 -> 1183;
1185 -> 1184;
1186 -> 1185;
1186 -> 1182;
1186 -> 1184;
1187 -> 1186;
1188 -> 1187;
1188 -> 1181;
1189 -> 1188;
1189 -> 1181;
1190 -> 1161;
1190 -> 1103;
1191 -> 1103;
1192 -> 1190;
1192 -> 1191;
1193 -> 1192;
1193 -> 1191;
1194 -> 1191;
1195 -> 1191;
1196 -> 1193;
1196 -> 1195;
1197 -> 1194;
1197 -> 1195;
1198 -> 1196;
1198 -> 1195;
1199 -> 1196;
1199 -> 1197;
1199 -> 1195;
1200 -> 1195;
1201 -> 1200;
1201 -> 1197;
1201 -> 1195;
1202 -> 1195;
1203 -> 1202;
1203 -> 1197;
1203 -> 1195;
1204 -> 1194;
1204 -> 1103;
1205 -> 1103;
1206 -> 1189;
1206 -> 1204;
1206 -> 1205;
1206 -> 1199;
1206 -> 1201;
1206 -> 1203;
1206 -> 1103;
1207 -> 1080;
1208 -> 1206;
1208 -> 1207;
1209 -> 1208;
1209 -> 1206;
1209 -> 1207;
1210 -> 1209;
1210 -> 1080;
1211 -> 1210;
1212 -> 1211;
1212 -> 1210;
1213 -> 1212;
1214 -> 1206;
1214 -> 1213;
1215 -> 1214;
1215 -> 1206;
1215 -> 1213;
1216 -> 1215;
1216 -> 1212;
1217 -> 1085;
1217 -> 1212;
1218 -> 1081;
1218 -> 1212;
1219 -> 1082;
1219 -> 1212;
1220 -> 1217;
1220 -> 1218;
1220 -> 1219;
1220 -> 1216;
1220 -> 1182;
1220 -> 1206;
1220 -> 1212;
1221 -> 1212;
1222 -> 1220;
1222 -> 1221;
1223 -> 1220;
1223 -> 1221;
1224 -> 1220;
1224 -> 1221;
1225 -> 1220;
1225 -> 1221;
1226 -> 1220;
1226 -> 1221;
1227 -> 1222;
1227 -> 1221;
1228 -> 1223;
1228 -> 1221;
1229 -> 1224;
1229 -> 1221;
1230 -> 1225;
1230 -> 1221;
1231 -> 1221;
1232 -> 1227;
1232 -> 1231;
1233 -> 1228;
1233 -> 1231;
1234 -> 1229;
1234 -> 1231;
1235 -> 1230;
1235 -> 1231;
1236 -> 1226;
1236 -> 1231;
1237 -> 1233;
1237 -> 1220;
1237 -> 1231;
1238 -> 1232;
1238 -> 1237;
1239 -> 1233;
1239 -> 1237;
1240 -> 1234;
1240 -> 1237;
1241 -> 1235;
1241 -> 1237;
1242 -> 1237;
1243 -> 1236;
1243 -> 1242;
1244 -> 1243;
1244 -> 1220;
1245 -> 1244;
1245 -> 1237;
1246 -> 1237;
1247 -> 1236;
1247 -> 1246;
1248 -> 1246;
1249 -> 1247;
1249 -> 1248;
1250 -> 1249;
1250 -> 1220;
1250 -> 1244;
1250 -> 1248;
1251 -> 1250;
1251 -> 1246;
1252 -> 1251;
1252 -> 1246;
1253 -> 1251;
1253 -> 1220;
1253 -> 0;
1253 -> 1246;
1254 -> 1251;
1254 -> 1246;
1255 -> 1251;
1255 -> 1246;
1256 -> 1255;
1256 -> 1237;
1257 -> 1236;
1257 -> 1220;
1257 -> 1237;
1258 -> 1237;
1259 -> 1238;
1259 -> 1258;
1260 -> 1239;
1260 -> 1258;
1261 -> 1240;
1261 -> 1258;
1262 -> 1241;
1262 -> 1258;
1263 -> 1245;
1263 -> 1258;
1264 -> 1256;
1264 -> 1258;
1265 -> 1257;
1265 -> 1258;
1266 -> 1260;
1266 -> 1258;
1267 -> 1266;
1267 -> 1220;
1267 -> 1244;
1267 -> 1250;
1267 -> 1258;
1268 -> 1260;
1268 -> 1267;
1268 -> 0;
1268 -> 1258;
1269 -> 1260;
1269 -> 1267;
1269 -> 0;
1269 -> 1258;
1270 -> 1260;
1270 -> 1258;
1271 -> 1264;
1271 -> 1258;
1272 -> 1270;
1272 -> 1271;
1272 -> 1267;
1272 -> 1258;
1273 -> 1262;
1273 -> 1258;
1274 -> 1273;
1274 -> 1258;
1275 -> 1259;
1275 -> 1258;
1276 -> 1272;
1276 -> 1258;
1277 -> 1261;
1277 -> 1258;
1278 -> 1263;
1278 -> 1258;
1279 -> 1265;
1279 -> 1258;
1280 -> 1258;
1281 -> 1275;
1281 -> 1280;
1282 -> 1276;
1282 -> 1280;
1283 -> 1277;
1283 -> 1280;
1284 -> 1278;
1284 -> 1280;
1285 -> 1279;
1285 -> 1280;
1286 -> 1280;
1287 -> 1281;
1287 -> 1286;
1287 -> 1280;
1288 -> 1282;
1288 -> 1280;
1289 -> 1284;
1289 -> 1280;
1290 -> 1280;
1291 -> 1288;
1291 -> 1289;
1291 -> 1290;
1291 -> 1272;
1291 -> 1280;
1292 -> 1280;
1293 -> 1291;
1293 -> 1280;
1294 -> 1280;
1295 -> 1292;
1295 -> 1294;
1295 -> 1280;
1296 -> 1291;
1296 -> 1280;
1297 -> 1296;
1297 -> 1258;
1298 -> 1273;
1298 -> 1297;
1299 -> 1237;
1300 -> 1221;
1301 -> 1206;
1301 -> 1210;
1302 -> 1301;
1302 -> 695;
1303 -> 1072;
1303 -> 695;
1304 -> 1071;
1304 -> 695;
1305 -> 1073;
1305 -> 695;
1306 -> 695;
1307 -> 1302;
1307 -> 1306;
1308 -> 1303;
1308 -> 1306;
1309 -> 1304;
1309 -> 1306;
1310 -> 1305;
1310 -> 1306;
1311 -> 1075;
1311 -> 1306;
1312 -> 1306;
1313 -> 1307;
1313 -> 1312;
1314 -> 1313;
1314 -> 1206;
1314 -> 1312;
1315 -> 1314;
1315 -> 0;
1315 -> 1312;
1316 -> 1315;
1316 -> 1306;
1317 -> 1307;
1317 -> 1306;
1318 -> 695;
1319 -> 1317;
1319 -> 1318;
1320 -> 1319;
1320 -> 1206;
1320 -> 1318;
1321 -> 694;
1321 -> 1320;
1321 -> 1291;
1321 -> 615;
1322 -> 694;
1322 -> 695;
1323 -> 694;
1323 -> 695;
1324 -> 694;
1324 -> 695;
1325 -> 694;
1325 -> 695;
1326 -> 1322;
1326 -> 695;
1327 -> 1324;
1327 -> 695;
1328 -> 1323;
1328 -> 695;
1329 -> 695;
1330 -> 1326;
1330 -> 1329;
1331 -> 1327;
1331 -> 1329;
1332 -> 1328;
1332 -> 1329;
1333 -> 1330;
1333 -> 1329;
1334 -> 1329;
1335 -> 1321;
1335 -> 1334;
1335 -> 1329;
1336 -> 1332;
1336 -> 1329;
1337 -> 1331;
1337 -> 1329;
1338 -> 1329;
1339 -> 1336;
1339 -> 1338;
1340 -> 1337;
1340 -> 1338;
1341 -> 1338;
1342 -> 1321;
1342 -> 1341;
1343 -> 1321;
1343 -> 1341;
1344 -> 1342;
1344 -> 1341;
1345 -> 1342;
1345 -> 1321;
1345 -> 1341;
1346 -> 1341;
1347 -> 1342;
1347 -> 1321;
1347 -> 1341;
1348 -> 1342;
1348 -> 1321;
1348 -> 1341;
1349 -> 1348;
1349 -> 1341;
1350 -> 1341;
1351 -> 1346;
1351 -> 1350;
1351 -> 1338;
1352 -> 1338;
1353 -> 1321;
1353 -> 1352;
1353 -> 1338;
1354 -> 694;
1354 -> 695;
1355 -> 694;
1355 -> 695;
1356 -> 694;
1356 -> 695;
1357 -> 694;
1357 -> 695;
1358 -> 694;
1358 -> 695;
1359 -> 695;
1360 -> 1354;
1360 -> 1321;
1360 -> 695;
1361 -> 695;
1362 -> 1355;
1362 -> 1321;
1362 -> 695;
1363 -> 1359;
1363 -> 695;
1364 -> 1361;
1364 -> 695;
1365 -> 615;
1366 -> 1321;
1366 -> 1365;
1367 -> 618;
1367 -> 1365;
1368 -> 1365;
1369 -> 1366;
1370 -> 1366;
1371 -> 1369;
1371 -> 1366;
1372 -> 1366;
1373 -> 1366;
1374 -> 1371;
1374 -> 1373;
1375 -> 1371;
1375 -> 1373;
1376 -> 1372;
1376 -> 1373;
1377 -> 1370;
1377 -> 1373;
1378 -> 1375;
1378 -> 1373;
1379 -> 1373;
1380 -> 1379;
1380 -> 1366;
1381 -> 1366;
1382 -> 1371;
1382 -> 1381;
1383 -> 1371;
1383 -> 1381;
1384 -> 1372;
1384 -> 1381;
1385 -> 1370;
1385 -> 1381;
1386 -> 1383;
1386 -> 1381;
1387 -> 1384;
1387 -> 1381;
1388 -> 1381;
1389 -> 1386;
1389 -> 1388;
1390 -> 1387;
1390 -> 1388;
1391 -> 1385;
1391 -> 1388;
1392 -> 1389;
1392 -> 1366;
1392 -> 1388;
1393 -> 1389;
1393 -> 1366;
1393 -> 1388;
1394 -> 1389;
1394 -> 1366;
1394 -> 0;
1394 -> 1388;
1395 -> 1393;
1395 -> 1388;
1396 -> 1390;
1396 -> 1388;
1397 -> 1388;
1398 -> 1395;
1398 -> 1397;
1399 -> 1396;
1399 -> 1397;
1400 -> 1391;
1400 -> 1397;
1401 -> 1398;
1401 -> 1397;
1402 -> 1398;
1402 -> 1366;
1402 -> 1397;
1403 -> 1398;
1403 -> 1366;
1403 -> 1402;
1404 -> 1399;
1404 -> 1402;
1405 -> 1402;
1406 -> 1403;
1406 -> 1405;
1407 -> 1404;
1407 -> 1405;
1408 -> 1400;
1408 -> 1405;
1409 -> 1406;
1409 -> 1405;
1410 -> 1409;
1411 -> 1399;
1411 -> 1398;
1412 -> 1400;
1412 -> 1398;
1413 -> 1412;
1413 -> 1411;
1413 -> 1398;
1414 -> 1381;
1415 -> 1414;
1415 -> 1366;
1416 -> 1380;
1416 -> 1415;
1416 -> 1366;
1417 -> 1366;
1418 -> 1371;
1418 -> 1417;
1419 -> 1413;
1419 -> 1417;
1420 -> 1372;
1420 -> 1417;
1421 -> 1370;
1421 -> 1417;
1422 -> 1419;
1422 -> 1417;
1423 -> 1422;
1423 -> 1413;
1424 -> 1420;
1424 -> 1422;
1425 -> 1422;
1426 -> 1423;
1426 -> 1425;
1427 -> 1424;
1427 -> 1425;
1428 -> 1421;
1428 -> 1425;
1429 -> 1426;
1429 -> 1413;
1429 -> 1425;
1430 -> 1426;
1430 -> 1425;
1431 -> 1426;
1431 -> 1413;
1431 -> 1425;
1432 -> 1426;
1432 -> 1413;
1432 -> 1431;
1433 -> 1427;
1433 -> 1431;
1434 -> 1431;
1435 -> 1432;
1435 -> 1434;
1436 -> 1433;
1436 -> 1434;
1437 -> 1428;
1437 -> 1434;
1438 -> 1435;
1438 -> 1434;
1439 -> 1438;
1440 -> 1428;
1440 -> 1426;
1441 -> 1440;
1441 -> 1427;
1441 -> 1426;
1442 -> 1441;
1443 -> 1441;
1444 -> 1441;
1445 -> 1441;
1445 -> 1444;
1446 -> 1444;
1447 -> 1445;
1447 -> 1446;
1448 -> 1445;
1448 -> 1446;
1449 -> 1447;
1449 -> 1446;
1450 -> 1449;
1451 -> 1417;
1452 -> 1451;
1452 -> 1366;
1453 -> 1416;
1453 -> 1452;
1453 -> 1366;
1454 -> 1366;
1454 -> 1453;
1454 -> 1441;
1455 -> 1454;
1456 -> 1454;
1457 -> 1454;
1458 -> 1454;
1459 -> 1456;
1459 -> 1454;
1460 -> 1454;
1461 -> 1454;
1462 -> 1454;
1463 -> 1454;
1464 -> 1454;
1464 -> 1463;
1465 -> 1463;
1466 -> 1464;
1466 -> 1465;
1467 -> 1464;
1467 -> 1465;
1468 -> 1466;
1468 -> 1465;
1469 -> 1468;
1470 -> 1454;
1471 -> 1368;
1471 -> 1365;
1472 -> 1471;
1472 -> 615;
1473 -> 616;
1473 -> 1472;
1473 -> 1454;
1473 -> 614;
1474 -> 1473;
1475 -> 1473;
1476 -> 1473;
1477 -> 1473;
1477 -> 1476;
1478 -> 1476;
1479 -> 1477;
1479 -> 1478;
1480 -> 1477;
1480 -> 1478;
1481 -> 1479;
1481 -> 1478;
1482 -> 1481;
1483 -> 1473;
1484 -> 1473;
1485 -> 1483;
1485 -> 1484;
1486 -> 1483;
1486 -> 1484;
1487 -> 1483;
1487 -> 1484;
1488 -> 1473;
1488 -> 1484;
1489 -> 1486;
1489 -> 1484;
1490 -> 1484;
1491 -> 1483;
1491 -> 1490;
1491 -> 1473;
1492 -> 1473;
1493 -> 1483;
1493 -> 1492;
1494 -> 1483;
1494 -> 1492;
1495 -> 1483;
1495 -> 1492;
1496 -> 1473;
1496 -> 1492;
1497 -> 1494;
1497 -> 1492;
1498 -> 1491;
1498 -> 1492;
1498 -> 1473;
1499 -> 1473;
1500 -> 1473;
1501 -> 1473;
1502 -> 1473;
1503 -> 1473;
1504 -> 1473;
1505 -> 1473;
1506 -> 1473;
1507 -> 1473;
1508 -> 1506;
1508 -> 1473;
1509 -> 1473;
1510 -> 1508;
1510 -> 1509;
1511 -> 1507;
1511 -> 1509;
1512 -> 1511;
1512 -> 1473;
1512 -> 1509;
1513 -> 1510;
1513 -> 1509;
1514 -> 1512;
1514 -> 1513;
1514 -> 1473;
1514 -> 1509;
1515 -> 902;
1515 -> 1509;
1516 -> 1509;
1517 -> 1510;
1517 -> 1514;
1517 -> 1516;
1517 -> 1509;
1518 -> 1511;
1518 -> 1514;
1518 -> 1509;
1519 -> 1510;
1519 -> 1514;
1519 -> 1509;
1520 -> 0;
1520 -> 1517;
1521 -> 1510;
1521 -> 1509;
1522 -> 1520;
1522 -> 1509;
1523 -> 1509;
1524 -> 1521;
1524 -> 1523;
1525 -> 1522;
1525 -> 1523;
1526 -> 1511;
1526 -> 1523;
1527 -> 1524;
1527 -> 1523;
1528 -> 1525;
1528 -> 1523;
1529 -> 1523;
1530 -> 1527;
1530 -> 1529;
1531 -> 1528;
1531 -> 1529;
1532 -> 1531;
1532 -> 1529;
1533 -> 1529;
1534 -> 1529;
1534 -> 1523;
1535 -> 1523;
1536 -> 1523;
1537 -> 1526;
1537 -> 1536;
1538 -> 1537;
1538 -> 1518;
1538 -> 1536;
1539 -> 1538;
1539 -> 1523;
1540 -> 1534;
1540 -> 1523;
1541 -> 1535;
1541 -> 1523;
1542 -> 1540;
1542 -> 1541;
1542 -> 1539;
1542 -> 1530;
1542 -> 1531;
1542 -> 1518;
1542 -> 1523;
1543 -> 1523;
1544 -> 1524;
1544 -> 1542;
1545 -> 1542;
1546 -> 1544;
1546 -> 1545;
1547 -> 1545;
1548 -> 1547;
1548 -> 1545;
1549 -> 1545;
1550 -> 1546;
1550 -> 1549;
1551 -> 1550;
1551 -> 1546;
1551 -> 1549;
1552 -> 1551;
1552 -> 1545;
1553 -> 1545;
1554 -> 1546;
1554 -> 1545;
1555 -> 1545;
1556 -> 1546;
1557 -> 1546;
1558 -> 1546;
1559 -> 1546;
1560 -> 1525;
1560 -> 1546;
1560 -> 1542;
1561 -> 1560;
1562 -> 1561;
1562 -> 1560;
1563 -> 1524;
1563 -> 1560;
1564 -> 1525;
1564 -> 0;
1564 -> 1560;
1565 -> 1562;
1565 -> 1564;
1566 -> 1546;
1566 -> 1564;
1567 -> 1564;
1568 -> 1564;
1569 -> 1565;
1569 -> 1568;
1570 -> 1566;
1570 -> 1568;
1571 -> 1567;
1571 -> 1568;
1572 -> 1567;
1572 -> 1568;
1573 -> 1568;
1574 -> 1570;
1574 -> 1573;
1574 -> 1568;
1575 -> 1570;
1575 -> 1562;
1575 -> 1572;
1575 -> 1568;
1576 -> 1570;
1576 -> 1562;
1576 -> 1572;
1576 -> 1568;
1577 -> 1572;
1577 -> 1568;
1578 -> 1568;
1579 -> 1569;
1579 -> 1578;
1579 -> 1568;
1580 -> 1564;
1581 -> 1524;
1581 -> 1562;
1581 -> 1580;
1581 -> 1564;
1582 -> 1524;
1582 -> 1562;
1582 -> 1542;
1583 -> 1542;
1584 -> 1582;
1584 -> 1583;
1585 -> 1567;
1585 -> 1583;
1586 -> 1585;
1586 -> 1575;
1586 -> 1583;
1587 -> 1586;
1587 -> 1584;
1587 -> 1583;
1588 -> 1542;
1589 -> 1588;
1589 -> 1584;
1590 -> 1589;
1590 -> 1542;
1591 -> 1534;
1591 -> 1542;
1592 -> 1587;
1592 -> 1542;
1593 -> 1591;
1593 -> 1592;
1593 -> 1590;
1593 -> 1530;
1593 -> 1531;
1593 -> 1576;
1593 -> 1575;
1593 -> 1570;
1593 -> 1572;
1593 -> 1569;
1593 -> 1571;
1593 -> 1584;
1593 -> 1542;
1594 -> 1542;
1595 -> 1587;
1595 -> 1523;
1596 -> 1473;
1596 -> 1595;
1596 -> 1593;
1597 -> 1596;
1598 -> 1596;
1599 -> 1597;
1599 -> 1596;
1600 -> 1596;
1601 -> 1599;
1601 -> 1600;
1602 -> 1599;
1602 -> 1600;
1603 -> 1599;
1603 -> 1600;
1604 -> 1599;
1604 -> 1600;
1605 -> 1604;
1605 -> 1600;
1606 -> 1604;
1606 -> 1600;
1607 -> 1604;
1607 -> 1600;
1608 -> 1600;
1609 -> 1601;
1609 -> 1608;
1609 -> 1600;
1610 -> 1599;
1610 -> 1600;
1611 -> 1599;
1611 -> 1600;
1612 -> 1599;
1612 -> 1600;
1613 -> 1599;
1613 -> 1600;
1614 -> 1600;
1615 -> 1610;
1615 -> 1614;
1615 -> 1600;
1616 -> 1612;
1616 -> 1600;
1617 -> 1612;
1617 -> 1604;
1617 -> 1600;
1618 -> 1600;
1619 -> 1611;
1619 -> 1618;
1619 -> 1600;
1620 -> 1612;
1620 -> 1618;
1620 -> 1600;
1621 -> 1613;
1621 -> 1600;
1622 -> 1613;
1622 -> 1600;
1623 -> 1621;
1623 -> 1613;
1623 -> 1600;
1624 -> 1600;
1625 -> 1623;
1625 -> 1624;
1626 -> 1622;
1626 -> 1624;
1627 -> 1626;
1627 -> 1625;
1627 -> 1613;
1627 -> 1624;
1628 -> 1627;
1628 -> 1624;
1629 -> 1627;
1629 -> 1624;
1630 -> 1628;
1630 -> 1627;
1630 -> 1624;
1631 -> 1624;
1632 -> 1630;
1632 -> 1631;
1633 -> 1629;
1633 -> 1631;
1634 -> 1633;
1634 -> 1632;
1634 -> 1627;
1634 -> 1631;
1635 -> 1546;
1635 -> 1631;
1636 -> 1634;
1636 -> 1631;
1637 -> 1631;
1638 -> 1634;
1639 -> 1638;
1639 -> 1634;
1640 -> 1634;
1641 -> 1634;
1641 -> 1640;
1642 -> 1641;
1642 -> 1634;
1642 -> 1640;
1643 -> 1642;
1643 -> 1634;
1644 -> 1634;
1645 -> 1634;
1646 -> 1634;
1647 -> 1634;
1648 -> 1634;
1649 -> 1634;
1650 -> 1634;
1651 -> 1634;
1652 -> 1624;
1653 -> 1634;
1653 -> 1652;
1654 -> 1634;
1654 -> 1652;
1655 -> 1599;
1655 -> 1600;
1656 -> 1599;
1656 -> 1600;
1657 -> 1599;
1657 -> 1600;
1658 -> 1600;
1659 -> 1656;
1659 -> 1658;
1659 -> 1600;
1660 -> 1657;
1660 -> 1600;
1661 -> 1657;
1661 -> 1654;
1661 -> 1655;
1661 -> 1600;
1662 -> 1656;
1662 -> 1600;
1663 -> 1600;
1664 -> 1600;
1665 -> 1660;
1665 -> 1664;
1666 -> 1661;
1666 -> 1664;
1667 -> 1662;
1667 -> 1664;
1668 -> 1663;
1668 -> 1664;
1669 -> 1665;
1669 -> 1664;
1670 -> 1666;
1670 -> 1664;
1671 -> 1664;
1672 -> 1669;
1672 -> 1671;
1673 -> 1670;
1673 -> 1671;
1674 -> 1668;
1674 -> 1671;
1675 -> 1671;
1676 -> 1672;
1676 -> 1675;
1676 -> 1671;
1677 -> 1673;
1677 -> 1671;
1678 -> 0;
1678 -> 1671;
1679 -> 1671;
1680 -> 1677;
1680 -> 1679;
1681 -> 1678;
1681 -> 1679;
1682 -> 1673;
1682 -> 1671;
1683 -> 0;
1683 -> 1671;
1684 -> 1671;
1685 -> 1682;
1685 -> 1684;
1686 -> 1683;
1686 -> 1684;
1687 -> 1672;
1687 -> 1674;
1687 -> 1671;
1688 -> 1673;
1688 -> 1674;
1688 -> 1671;
1689 -> 1672;
1689 -> 1654;
1689 -> 1674;
1689 -> 1671;
1690 -> 1668;
1690 -> 1664;
1691 -> 1664;
1692 -> 1667;
1692 -> 1691;
1692 -> 1664;
1693 -> 1667;
1693 -> 1668;
1693 -> 1664;
1694 -> 1663;
1694 -> 1596;
1695 -> 1599;
1695 -> 1694;
1695 -> 1654;
1695 -> 1689;
1695 -> 1688;
1695 -> 1687;
1695 -> 1674;
1695 -> 1693;
1695 -> 1596;
1696 -> 1599;
1696 -> 1600;
1697 -> 1599;
1697 -> 1600;
1698 -> 1599;
1698 -> 1600;
1699 -> 1599;
1699 -> 1600;
1700 -> 1599;
1700 -> 1600;
1701 -> 1698;
1701 -> 1600;
1702 -> 1699;
1702 -> 1600;
1703 -> 1600;
1704 -> 1697;
1704 -> 1703;
1704 -> 1600;
1705 -> 1701;
1705 -> 1702;
1705 -> 1600;
1706 -> 1697;
1706 -> 1600;
1707 -> 1701;
1707 -> 1600;
1708 -> 1705;
1708 -> 1600;
1709 -> 1706;
1709 -> 1695;
1710 -> 1709;
1710 -> 1695;
1711 -> 1710;
1711 -> 1695;
1712 -> 1695;
1713 -> 1712;
1713 -> 1695;
1714 -> 1711;
1714 -> 1695;
1715 -> 1695;
1716 -> 1714;
1716 -> 1695;
1717 -> 1713;
1717 -> 1695;
1718 -> 1695;
1719 -> 1712;
1719 -> 1695;
1720 -> 1712;
1721 -> 1712;
1722 -> 1712;
1723 -> 1720;
1723 -> 1712;
1724 -> 1721;
1724 -> 1712;
1725 -> 1722;
1725 -> 1712;
1726 -> 1724;
1726 -> 1720;
1727 -> 1725;
1727 -> 1720;
1728 -> 1712;
1728 -> 1720;
1729 -> 1728;
1729 -> 1712;
1729 -> 1720;
1730 -> 1720;
1731 -> 1730;
1731 -> 1712;
1731 -> 1720;
1732 -> 1731;
1732 -> 1720;
1733 -> 1731;
1733 -> 1712;
1733 -> 0;
1733 -> 1720;
1734 -> 1731;
1734 -> 1720;
1735 -> 1723;
1735 -> 1720;
1736 -> 1726;
1736 -> 1720;
1737 -> 1727;
1737 -> 1720;
1738 -> 1723;
1738 -> 1720;
1739 -> 1720;
1739 -> 0;
1740 -> 1720;
1740 -> 0;
1741 -> 1737;
1741 -> 1720;
1742 -> 1741;
1742 -> 1720;
1743 -> 1735;
1743 -> 1720;
1744 -> 1736;
1744 -> 1720;
1745 -> 1738;
1745 -> 1720;
1746 -> 1720;
1747 -> 1743;
1747 -> 1746;
1747 -> 1720;
1748 -> 1720;
1749 -> 1731;
1749 -> 1720;
1750 -> 1720;
1751 -> 1748;
1751 -> 1750;
1751 -> 1720;
1752 -> 1731;
1752 -> 1720;
1753 -> 1752;
1753 -> 1720;
1754 -> 1741;
1754 -> 1753;
1755 -> 1697;
1755 -> 1600;
1756 -> 1696;
1756 -> 1600;
1757 -> 1698;
1757 -> 1600;
1758 -> 1700;
1758 -> 1600;
1759 -> 1600;
1760 -> 1712;
1760 -> 1759;
1761 -> 1760;
1761 -> 1712;
1761 -> 1759;
1762 -> 1761;
1762 -> 0;
1762 -> 1759;
1763 -> 1762;
1763 -> 1600;
1764 -> 1596;
1765 -> 1596;
1766 -> 1599;
1766 -> 1765;
1767 -> 1731;
1767 -> 1765;
1768 -> 1764;
1768 -> 1765;
1769 -> 1598;
1769 -> 1765;
1770 -> 1767;
1770 -> 1731;
1770 -> 1765;
1771 -> 1767;
1771 -> 1765;
1772 -> 1767;
1772 -> 1731;
1772 -> 1765;
1773 -> 1767;
1773 -> 1731;
1773 -> 1772;
1774 -> 1768;
1774 -> 1772;
1775 -> 1772;
1776 -> 1773;
1776 -> 1775;
1777 -> 1774;
1777 -> 1775;
1778 -> 1769;
1778 -> 1775;
1779 -> 1776;
1779 -> 1775;
1780 -> 1779;
1781 -> 1769;
1781 -> 1767;
1782 -> 1765;
1782 -> 1596;
1783 -> 1781;
1784 -> 1781;
1785 -> 1781;
1786 -> 1781;
1787 -> 1784;
1787 -> 1781;
1788 -> 1781;
1789 -> 1788;
1790 -> 1788;
1791 -> 1788;
1792 -> 1788;
1793 -> 1788;
1794 -> 1788;
1795 -> 1788;
1795 -> 1794;
1796 -> 1794;
1797 -> 1788;
1798 -> 1795;
1798 -> 1788;
1799 -> 1795;
1799 -> 1788;
1800 -> 1799;
1800 -> 1795;
1800 -> 1788;
1801 -> 1798;
1801 -> 1788;
1802 -> 1800;
1802 -> 1801;
1802 -> 1795;
1802 -> 1788;
1803 -> 1788;
1804 -> 1799;
1804 -> 1802;
1804 -> 1788;
1805 -> 1798;
1805 -> 1788;
1806 -> 1799;
1806 -> 1804;
1807 -> 1798;
1807 -> 1804;
1808 -> 1634;
1808 -> 1806;
1809 -> 1798;
1809 -> 1788;
1810 -> 1808;
1810 -> 1788;
1811 -> 1788;
1812 -> 1809;
1812 -> 1811;
1813 -> 1810;
1813 -> 1811;
1814 -> 1813;
1814 -> 1811;
1815 -> 1811;
1816 -> 1811;
1816 -> 1788;
1817 -> 1788;
1818 -> 1788;
1819 -> 1799;
1819 -> 1818;
1820 -> 1819;
1820 -> 1806;
1820 -> 1818;
1821 -> 1820;
1821 -> 1788;
1822 -> 1816;
1822 -> 1788;
1823 -> 1817;
1823 -> 1788;
1824 -> 1822;
1824 -> 1823;
1824 -> 1821;
1824 -> 1812;
1824 -> 1813;
1824 -> 1806;
1824 -> 1788;
1825 -> 1788;
1826 -> 1798;
1826 -> 1824;
1827 -> 1824;
1828 -> 1826;
1828 -> 1827;
1828 -> 1824;
1829 -> 1826;
1829 -> 1828;
1830 -> 0;
1830 -> 1828;
1831 -> 1828;
1832 -> 1829;
1832 -> 1831;
1833 -> 1830;
1833 -> 1831;
1834 -> 1833;
1834 -> 1831;
1835 -> 1831;
1836 -> 1832;
1837 -> 1836;
1837 -> 1832;
1838 -> 1832;
1839 -> 1832;
1839 -> 1838;
1840 -> 1839;
1840 -> 1832;
1840 -> 1838;
1841 -> 1840;
1841 -> 1832;
1842 -> 1832;
1843 -> 1832;
1844 -> 1832;
1845 -> 1832;
1846 -> 1832;
1847 -> 1832;
1848 -> 1833;
1849 -> 1833;
1850 -> 1833;
1851 -> 1833;
1852 -> 1824;
1853 -> 1808;
1853 -> 1832;
1853 -> 1824;
1854 -> 1808;
1854 -> 0;
1854 -> 1824;
1855 -> 1798;
1855 -> 1832;
1855 -> 1824;
1856 -> 1824;
1857 -> 1855;
1857 -> 1856;
1858 -> 1833;
1858 -> 1856;
1859 -> 1824;
1860 -> 1859;
1860 -> 1857;
1861 -> 1860;
1861 -> 1824;
1862 -> 1816;
1862 -> 1824;
1863 -> 1857;
1863 -> 1824;
1864 -> 1824;
1865 -> 1857;
1865 -> 1788;
1866 -> 1795;
1866 -> 1865;
1866 -> 1861;
1866 -> 1788;
1867 -> 1788;
1868 -> 1788;
1869 -> 1866;
1869 -> 1788;
1870 -> 0;
1870 -> 1788;
1871 -> 1788;
1872 -> 1869;
1872 -> 1871;
1873 -> 1870;
1873 -> 1871;
1874 -> 1866;
1874 -> 1788;
1875 -> 0;
1875 -> 1788;
1876 -> 1788;
1877 -> 1874;
1877 -> 1876;
1878 -> 1875;
1878 -> 1876;
1879 -> 1788;
1880 -> 1788;
1881 -> 1781;
1881 -> 1788;
1882 -> 1781;
1882 -> 1788;
1883 -> 1781;
1883 -> 1788;
1884 -> 1781;
1884 -> 1788;
1885 -> 1781;
1885 -> 1788;
1886 -> 1788;
1887 -> 1881;
1887 -> 1866;
1887 -> 1788;
1888 -> 1788;
1889 -> 1882;
1889 -> 1866;
1889 -> 1788;
1890 -> 1886;
1890 -> 1788;
1891 -> 1888;
1891 -> 1788;
1892 -> 1781;
1892 -> 1788;
1893 -> 1781;
1893 -> 1788;
1894 -> 1892;
1894 -> 1788;
1895 -> 1893;
1895 -> 1788;
1896 -> 1788;
1897 -> 1894;
1897 -> 1895;
1897 -> 1788;
1898 -> 1788;
1899 -> 1894;
1899 -> 1788;
1900 -> 1897;
1900 -> 1788;
1901 -> 1898;
1901 -> 1866;
1902 -> 1901;
1902 -> 1866;
1903 -> 1902;
1903 -> 1866;
1904 -> 1866;
1905 -> 1903;
1905 -> 1866;
1906 -> 1866;
1907 -> 1905;
1907 -> 1866;
1908 -> 1904;
1908 -> 1866;
1909 -> 1866;
1910 -> 1866;
1911 -> 1866;
1912 -> 1866;
1913 -> 1866;
1914 -> 1911;
1914 -> 1866;
1915 -> 1912;
1915 -> 1866;
1916 -> 1866;
1917 -> 1866;
1917 -> 0;
1918 -> 1866;
1919 -> 1913;
1919 -> 1866;
1920 -> 1914;
1920 -> 1866;
1921 -> 1915;
1921 -> 1866;
1922 -> 1913;
1922 -> 1866;
1923 -> 1913;
1923 -> 0;
1923 -> 1866;
1924 -> 1913;
1924 -> 0;
1924 -> 1866;
1925 -> 1921;
1925 -> 1866;
1926 -> 1925;
1926 -> 1866;
1927 -> 1919;
1927 -> 1866;
1928 -> 1920;
1928 -> 1866;
1929 -> 1922;
1929 -> 1866;
1930 -> 1866;
1931 -> 1927;
1931 -> 1930;
1931 -> 1866;
1932 -> 1866;
1933 -> 1919;
1933 -> 1866;
1934 -> 1866;
1935 -> 1932;
1935 -> 1934;
1935 -> 1866;
1936 -> 1919;
1936 -> 1866;
1937 -> 1936;
1937 -> 1866;
1938 -> 1925;
1938 -> 1937;
1939 -> 1788;
1940 -> 1788;
1941 -> 1892;
1941 -> 1788;
1942 -> 1788;
1943 -> 1788;
1944 -> 1866;
1944 -> 1943;
1945 -> 1944;
1945 -> 1866;
1945 -> 1943;
1946 -> 1945;
1946 -> 0;
1946 -> 1943;
1947 -> 1946;
1947 -> 1788;
1948 -> 1781;
1949 -> 1919;
1949 -> 1781;
1950 -> 1919;
1950 -> 1781;
1951 -> 1919;
1951 -> 1781;
1952 -> 1919;
1952 -> 1951;
1953 -> 1788;
1953 -> 1951;
1954 -> 1951;
1955 -> 1952;
1955 -> 1954;
1956 -> 1953;
1956 -> 1954;
1957 -> 1955;
1957 -> 1954;
1958 -> 1957;
1959 -> 1788;
1959 -> 1781;
1960 -> 1919;
1961 -> 1919;
1962 -> 1919;
1963 -> 1919;
1964 -> 1961;
1964 -> 1919;
1965 -> 1919;
1966 -> 1919;
1967 -> 1919;
1968 -> 1919;
1969 -> 1919;
1970 -> 1919;
1971 -> 1970;
1971 -> 1919;
1971 -> 1969;
1972 -> 1919;
1973 -> 1919;
1973 -> 1832;
1974 -> 1919;
1974 -> 0;
1975 -> 1919;
1976 -> 1919;
1977 -> 1971;
1977 -> 1919;
1978 -> 0;
1978 -> 1919;
1979 -> 1919;
1980 -> 1977;
1980 -> 1979;
1981 -> 1978;
1981 -> 1979;
1982 -> 1971;
1982 -> 1919;
1983 -> 0;
1983 -> 1919;
1984 -> 1919;
1985 -> 1982;
1985 -> 1984;
1986 -> 1983;
1986 -> 1984;
1987 -> 1919;
1988 -> 1919;
1989 -> 1919;
1990 -> 1919;
1991 -> 1919;
1992 -> 1919;
1993 -> 1919;
1994 -> 1919;
1995 -> 1989;
1995 -> 1971;
1995 -> 1919;
1996 -> 1919;
1997 -> 1990;
1997 -> 1971;
1997 -> 1919;
1998 -> 1994;
1998 -> 1919;
1999 -> 1996;
1999 -> 1919;
2000 -> 1919;
2001 -> 1919;
2002 -> 2000;
2002 -> 1919;
2003 -> 2001;
2003 -> 1919;
2004 -> 1919;
2005 -> 2002;
2005 -> 2003;
2005 -> 1919;
2006 -> 1919;
2007 -> 2002;
2007 -> 1919;
2008 -> 2005;
2008 -> 1919;
2009 -> 2006;
2009 -> 1971;
2010 -> 2009;
2010 -> 1971;
2011 -> 2010;
2011 -> 1971;
2012 -> 1971;
2013 -> 2011;
2013 -> 1971;
2014 -> 1971;
2015 -> 2013;
2015 -> 1971;
2016 -> 2012;
2016 -> 1971;
2017 -> 1971;
2018 -> 1971;
2019 -> 1971;
2020 -> 1971;
2021 -> 2019;
2021 -> 1971;
2022 -> 2020;
2022 -> 1971;
2023 -> 1971;
2024 -> 1971;
2024 -> 0;
2025 -> 1971;
2026 -> 2021;
2026 -> 1971;
2027 -> 2022;
2027 -> 1971;
2028 -> 1971;
2029 -> 1971;
2029 -> 0;
2030 -> 1971;
2030 -> 0;
2031 -> 2027;
2031 -> 1971;
2032 -> 2031;
2032 -> 1971;
2033 -> 1971;
2034 -> 2026;
2034 -> 1971;
2035 -> 2028;
2035 -> 1971;
2036 -> 1971;
2037 -> 2033;
2037 -> 2036;
2037 -> 1971;
2038 -> 1971;
2039 -> 1971;
2040 -> 1971;
2041 -> 2038;
2041 -> 2040;
2041 -> 1971;
2042 -> 1971;
2043 -> 2042;
2043 -> 1971;
2044 -> 2031;
2044 -> 2043;
2045 -> 1919;
2046 -> 1919;
2047 -> 2000;
2047 -> 1919;
2048 -> 1919;
2049 -> 1919;
2050 -> 1971;
2050 -> 2049;
2051 -> 2050;
2051 -> 1971;
2051 -> 2049;
2052 -> 2051;
2052 -> 0;
2052 -> 2049;
2053 -> 2052;
2053 -> 1919;
2054 -> 1919;
2055 -> 1971;
2055 -> 1919;
2056 -> 1971;
2056 -> 1919;
2057 -> 1971;
2057 -> 1919;
2058 -> 1971;
2058 -> 2057;
2059 -> 1919;
2059 -> 2057;
2060 -> 2057;
2061 -> 2058;
2061 -> 2060;
2062 -> 2059;
2062 -> 2060;
2063 -> 2061;
2063 -> 2060;
2064 -> 2063;
2065 -> 1919;
2066 -> 1971;
2067 -> 1971;
2068 -> 1971;
2069 -> 1971;
2070 -> 2067;
2070 -> 1971;
2071 -> 1971;
2072 -> 1971;
2073 -> 1971;
2074 -> 1971;
2075 -> 1971;
2075 -> 2074;
2076 -> 2074;
2077 -> 2075;
2077 -> 2076;
2078 -> 2075;
2078 -> 2076;
2079 -> 2077;
2079 -> 2076;
2080 -> 2079;
2081 -> 1971;
2082 -> 613;
2082 -> 610;
2083 -> 2082;
2083 -> 606;
2084 -> 587;
2085 -> 0;
2085 -> 587;
2086 -> 590;
2086 -> 587;
2087 -> 2085;
2087 -> 587;
2088 -> 2086;
2088 -> 2087;
2088 -> 1971;
2088 -> 2085;
2088 -> 587;
2089 -> 590;
2089 -> 2088;
2089 -> 587;
2091 -> 2090;
2092 -> 2091;
2093 -> 589;
2093 -> 587;
2094 -> 2088;
2094 -> 587;
2095 -> 587;
2096 -> 587;
2097 -> 2093;
2097 -> 2096;
2098 -> 2094;
2098 -> 2096;
2099 -> 2095;
2099 -> 2096;
2100 -> 2095;
2100 -> 2096;
2101 -> 2095;
2101 -> 2096;
2102 -> 2095;
2102 -> 2096;
2103 -> 2095;
2103 -> 2096;
2104 -> 2095;
2104 -> 2096;
2105 -> 2096;
2106 -> 2096;
2107 -> 2097;
2107 -> 2106;
2107 -> 2096;
2108 -> 2098;
2108 -> 2107;
2109 -> 2097;
2109 -> 2096;
2110 -> 2098;
2110 -> 2096;
2111 -> 2099;
2111 -> 2096;
2112 -> 2096;
2113 -> 2109;
2113 -> 2112;
2114 -> 2110;
2114 -> 2112;
2115 -> 2111;
2115 -> 2112;
2116 -> 2113;
2116 -> 2112;
2117 -> 2114;
2117 -> 2112;
2118 -> 2116;
2118 -> 2117;
2118 -> 2112;
2119 -> 2113;
2119 -> 0;
2119 -> 2112;
2120 -> 2114;
2120 -> 2088;
2120 -> 2089;
2120 -> 2112;
2121 -> 2112;
2122 -> 2119;
2122 -> 2121;
2123 -> 2120;
2123 -> 2121;
2124 -> 2122;
2124 -> 2123;
2124 -> 2121;
2125 -> 2122;
2125 -> 2121;
2126 -> 2112;
2127 -> 2126;
2127 -> 2096;
2128 -> 2127;
2129 -> 2128;
2129 -> 587;
2130 -> 573;
2130 -> 502;
2131 -> 0;
2131 -> 1;
2132 -> 1;
2133 -> 2131;
2133 -> 2132;
2134 -> 438;
2134 -> 2132;
2135 -> 438;
2135 -> 2132;
2136 -> 438;
2136 -> 2132;
2137 -> 438;
2137 -> 2132;
2138 -> 438;
2138 -> 2132;
2139 -> 438;
2139 -> 2132;
2140 -> 2133;
2140 -> 2132;
2141 -> 2134;
2141 -> 2132;
2142 -> 2135;
2142 -> 2132;
2143 -> 2136;
2143 -> 2132;
2144 -> 2137;
2144 -> 2132;
2145 -> 2138;
2145 -> 2132;
2146 -> 2139;
2146 -> 2132;
2147 -> 2132;
2148 -> 2140;
2148 -> 2147;
2149 -> 2141;
2149 -> 2147;
2150 -> 2142;
2150 -> 2147;
2151 -> 2143;
2151 -> 2147;
2152 -> 2144;
2152 -> 2147;
2153 -> 2145;
2153 -> 2147;
2154 -> 2146;
2154 -> 2147;
2155 -> 2148;
2155 -> 2147;
2156 -> 2148;
2156 -> 2147;
2157 -> 2147;
2158 -> 2149;
2158 -> 2147;
2159 -> 2150;
2159 -> 2147;
2160 -> 2151;
2160 -> 2147;
2161 -> 2152;
2161 -> 2147;
2162 -> 2153;
2162 -> 2147;
2164 -> 2163;
2166 -> 2165;
2167 -> 2154;
2167 -> 2147;
2168 -> 2147;
2169 -> 2156;
2169 -> 2168;
2170 -> 2157;
2170 -> 2168;
2171 -> 2158;
2171 -> 2168;
2172 -> 2159;
2172 -> 2168;
2173 -> 2160;
2173 -> 2168;
2174 -> 2161;
2174 -> 2168;
2175 -> 2162;
2175 -> 2168;
2176 -> 2156;
2176 -> 2168;
2177 -> 2167;
2177 -> 2168;
2178 -> 2157;
2178 -> 2168;
2179 -> 2157;
2179 -> 2168;
2180 -> 2157;
2180 -> 2168;
2181 -> 2180;
2181 -> 2168;
2182 -> 2180;
2182 -> 2168;
2183 -> 2180;
2183 -> 2168;
2184 -> 2180;
2184 -> 2168;
2185 -> 2180;
2185 -> 2168;
2186 -> 2180;
2186 -> 2168;
2187 -> 2180;
2187 -> 2168;
2188 -> 2180;
2188 -> 2168;
2189 -> 2180;
2189 -> 2168;
2190 -> 2180;
2190 -> 2168;
2191 -> 2180;
2191 -> 2168;
2192 -> 2180;
2192 -> 2168;
2193 -> 2180;
2193 -> 2168;
2194 -> 2180;
2194 -> 2168;
2195 -> 2180;
2195 -> 2168;
2196 -> 2169;
2196 -> 2180;
2196 -> 2168;
2197 -> 2170;
2197 -> 2180;
2197 -> 2168;
2198 -> 2171;
2198 -> 2180;
2198 -> 2168;
2199 -> 2172;
2199 -> 2180;
2199 -> 2168;
2200 -> 2173;
2200 -> 2180;
2200 -> 2168;
2201 -> 2174;
2201 -> 2180;
2201 -> 2168;
2202 -> 2175;
2202 -> 2180;
2202 -> 2168;
2203 -> 2176;
2203 -> 2168;
2204 -> 2203;
2204 -> 2180;
2204 -> 2168;
2205 -> 2177;
2205 -> 2180;
2205 -> 2168;
2206 -> 2178;
2206 -> 2180;
2206 -> 2168;
2207 -> 2179;
2207 -> 2180;
2207 -> 2168;
2208 -> 2157;
2208 -> 2132;
2209 -> 2208;
2209 -> 1;
2210 -> 438;
2210 -> 1;
2211 -> 1;
2212 -> 438;
2212 -> 2211;
2213 -> 2209;
2213 -> 2211;
2214 -> 2213;
2214 -> 2196;
2214 -> 2211;
2215 -> 2213;
2215 -> 2197;
2215 -> 2211;
2216 -> 2213;
2216 -> 2198;
2216 -> 2211;
2217 -> 2212;
2217 -> 2211;
2218 -> 2213;
2218 -> 2200;
2218 -> 2211;
2219 -> 2213;
2219 -> 2201;
2219 -> 2211;
2220 -> 2211;
2221 -> 2213;
2221 -> 2204;
2221 -> 2211;
2222 -> 2213;
2222 -> 2205;
2222 -> 2211;
2223 -> 2213;
2223 -> 2206;
2223 -> 2211;
2224 -> 2213;
2224 -> 2207;
2224 -> 2211;
2225 -> 2211;
2226 -> 2214;
2226 -> 2225;
2227 -> 2215;
2227 -> 2225;
2228 -> 2216;
2228 -> 2225;
2229 -> 2217;
2229 -> 2225;
2230 -> 2218;
2230 -> 2225;
2231 -> 2219;
2231 -> 2225;
2232 -> 2220;
2232 -> 2225;
2233 -> 2221;
2233 -> 2225;
2234 -> 2222;
2234 -> 2225;
2235 -> 2223;
2235 -> 2225;
2236 -> 2224;
2236 -> 2225;
2237 -> 2220;
2237 -> 2225;
2238 -> 2237;
2238 -> 2225;
2239 -> 2237;
2239 -> 2225;
2240 -> 2237;
2240 -> 2225;
2241 -> 2237;
2241 -> 2225;
2242 -> 2237;
2242 -> 2225;
2243 -> 2237;
2243 -> 2225;
2244 -> 2237;
2244 -> 2225;
2245 -> 2237;
2245 -> 2225;
2246 -> 2237;
2246 -> 2225;
2247 -> 2237;
2247 -> 2225;
2248 -> 2237;
2248 -> 2225;
2249 -> 2237;
2249 -> 2225;
2250 -> 2237;
2250 -> 2225;
2251 -> 2237;
2251 -> 2225;
2252 -> 2237;
2252 -> 2225;
2253 -> 2229;
2253 -> 2237;
2253 -> 2225;
2254 -> 2232;
2254 -> 2237;
2254 -> 2225;
2255 -> 2220;
2255 -> 1;
2256 -> 1;
2257 -> 438;
2257 -> 2256;
2258 -> 438;
2258 -> 2256;
2259 -> 2255;
2259 -> 2256;
2260 -> 2259;
2260 -> 2226;
2260 -> 2256;
2261 -> 2259;
2261 -> 2227;
2261 -> 2256;
2262 -> 2259;
2262 -> 2228;
2262 -> 2256;
2263 -> 2259;
2263 -> 2253;
2263 -> 2256;
2264 -> 2256;
2265 -> 2257;
2265 -> 2264;
2265 -> 2256;
2266 -> 2258;
2266 -> 2264;
2266 -> 2256;
2267 -> 2265;
2267 -> 2266;
2267 -> 2256;
2268 -> 2259;
2268 -> 2231;
2268 -> 2256;
2269 -> 2259;
2269 -> 2254;
2269 -> 2256;
2270 -> 2259;
2270 -> 2233;
2270 -> 2256;
2271 -> 2259;
2271 -> 2234;
2271 -> 2256;
2272 -> 2259;
2272 -> 2235;
2272 -> 2256;
2273 -> 2259;
2273 -> 2236;
2273 -> 2256;
2274 -> 2256;
2275 -> 2260;
2275 -> 2274;
2276 -> 2261;
2276 -> 2274;
2277 -> 2262;
2277 -> 2274;
2278 -> 2263;
2278 -> 2274;
2279 -> 2267;
2279 -> 2274;
2280 -> 2268;
2280 -> 2274;
2281 -> 2269;
2281 -> 2274;
2282 -> 2270;
2282 -> 2274;
2283 -> 2271;
2283 -> 2274;
2284 -> 2272;
2284 -> 2274;
2285 -> 2273;
2285 -> 2274;
2286 -> 2264;
2286 -> 2274;
2287 -> 2286;
2287 -> 2274;
2288 -> 2286;
2288 -> 2274;
2289 -> 2286;
2289 -> 2274;
2290 -> 2286;
2290 -> 2274;
2291 -> 2286;
2291 -> 2274;
2292 -> 2286;
2292 -> 2274;
2293 -> 2286;
2293 -> 2274;
2294 -> 2286;
2294 -> 2274;
2295 -> 2286;
2295 -> 2274;
2296 -> 2286;
2296 -> 2274;
2297 -> 2286;
2297 -> 2274;
2298 -> 2286;
2298 -> 2274;
2299 -> 2286;
2299 -> 2274;
2300 -> 2286;
2300 -> 2274;
2301 -> 2286;
2301 -> 2274;
2302 -> 2279;
2302 -> 2286;
2302 -> 2274;
2303 -> 2264;
2303 -> 1;
2304 -> 2303;
2304 -> 438;
2304 -> 1;
2305 -> 1;
2306 -> 2130;
2306 -> 2305;
2307 -> 438;
2307 -> 2305;
2308 -> 2305;
2309 -> 2308;
2309 -> 2306;
2309 -> 2123;
2309 -> 2305;
2310 -> 2309;
2310 -> 2308;
2311 -> 2310;
2311 -> 2309;
2311 -> 2308;
2312 -> 2308;
2313 -> 2311;
2313 -> 2309;
2313 -> 2312;
2313 -> 2308;
2314 -> 2310;
2314 -> 2309;
2314 -> 2312;
2314 -> 2308;
2315 -> 1039;
2315 -> 2313;
2316 -> 2309;
2316 -> 2308;
2317 -> 2309;
2317 -> 2308;
2318 -> 2308;
2319 -> 2316;
2319 -> 2315;
2319 -> 2318;
2320 -> 2317;
2320 -> 2319;
2320 -> 2318;
2321 -> 2320;
2321 -> 2318;
2322 -> 0;
2322 -> 2321;
2323 -> 2320;
2323 -> 2318;
2324 -> 2316;
2324 -> 2318;
2325 -> 2317;
2325 -> 2322;
2325 -> 2323;
2325 -> 2324;
2325 -> 2318;
2326 -> 0;
2326 -> 2325;
2327 -> 2326;
2328 -> 2317;
2328 -> 2327;
2329 -> 2328;
2329 -> 1039;
2329 -> 2327;
2330 -> 2329;
2331 -> 2326;
2332 -> 0;
2332 -> 2326;
2333 -> 2332;
2334 -> 2309;
2334 -> 2308;
2335 -> 2309;
2335 -> 2308;
2336 -> 2309;
2336 -> 2308;
2337 -> 2309;
2337 -> 2308;
2338 -> 2309;
2338 -> 2308;
2339 -> 2308;
2340 -> 2337;
2340 -> 2339;
2340 -> 2308;
2341 -> 2338;
2341 -> 2339;
2341 -> 2308;
2342 -> 2340;
2342 -> 2341;
2342 -> 2308;
2343 -> 2335;
2343 -> 2308;
2344 -> 2334;
2344 -> 2308;
2345 -> 2335;
2345 -> 2308;
2346 -> 2336;
2346 -> 2308;
2347 -> 2337;
2347 -> 2308;
2348 -> 2338;
2348 -> 2308;
2349 -> 2343;
2349 -> 2308;
2350 -> 2308;
2351 -> 2344;
2351 -> 2350;
2352 -> 2345;
2352 -> 2350;
2353 -> 2346;
2353 -> 2350;
2354 -> 2347;
2354 -> 2350;
2355 -> 2348;
2355 -> 2350;
2356 -> 2349;
2356 -> 2350;
2357 -> 2350;
2358 -> 2355;
2358 -> 2357;
2358 -> 2350;
2359 -> 2354;
2359 -> 2357;
2359 -> 2350;
2360 -> 2358;
2360 -> 2359;
2360 -> 2350;
2361 -> 2350;
2362 -> 2351;
2362 -> 2350;
2363 -> 2352;
2363 -> 2350;
2364 -> 2361;
2364 -> 2350;
2365 -> 2356;
2365 -> 2350;
2366 -> 2350;
2367 -> 2362;
2367 -> 2366;
2368 -> 2363;
2368 -> 2366;
2369 -> 2364;
2369 -> 2366;
2370 -> 2365;
2370 -> 2366;
2371 -> 2368;
2371 -> 2366;
2372 -> 2371;
2372 -> 2367;
2372 -> 2332;
2372 -> 2366;
2373 -> 2366;
2374 -> 2372;
2374 -> 2373;
2375 -> 2372;
2375 -> 2373;
2376 -> 2374;
2376 -> 2373;
2377 -> 2374;
2377 -> 2372;
2377 -> 2373;
2378 -> 2373;
2379 -> 2374;
2379 -> 2372;
2379 -> 2373;
2380 -> 2374;
2380 -> 2372;
2380 -> 2373;
2381 -> 2380;
2381 -> 2373;
2382 -> 2373;
2383 -> 2378;
2383 -> 2382;
2383 -> 2366;
2384 -> 2378;
2384 -> 2373;
2385 -> 2378;
2385 -> 2373;
2386 -> 2384;
2386 -> 2373;
2387 -> 2384;
2387 -> 2373;
2388 -> 2384;
2388 -> 2373;
2389 -> 2384;
2389 -> 2373;
2390 -> 2389;
2390 -> 2373;
2391 -> 2389;
2391 -> 2390;
2392 -> 2366;
2393 -> 2372;
2393 -> 2392;
2393 -> 2366;
2394 -> 2372;
2394 -> 2393;
2395 -> 2393;
2396 -> 2394;
2396 -> 2395;
2397 -> 2394;
2397 -> 2395;
2398 -> 2396;
2398 -> 2395;
2399 -> 2396;
2399 -> 2394;
2399 -> 2395;
2400 -> 2395;
2401 -> 2396;
2401 -> 2394;
2401 -> 2395;
2402 -> 2396;
2402 -> 2394;
2402 -> 2395;
2403 -> 2402;
2403 -> 2395;
2404 -> 2400;
2404 -> 2395;
2405 -> 2400;
2405 -> 2395;
2406 -> 2404;
2406 -> 2395;
2407 -> 2404;
2407 -> 2395;
2408 -> 2404;
2408 -> 2395;
2409 -> 2404;
2409 -> 2395;
2410 -> 2409;
2410 -> 2395;
2411 -> 2393;
2412 -> 2395;
2412 -> 2411;
2412 -> 2393;
2413 -> 2372;
2413 -> 2366;
2414 -> 2350;
2415 -> 2395;
2415 -> 2414;
2415 -> 2350;
2416 -> 2413;
2416 -> 2350;
2417 -> 2395;
2417 -> 2373;
2418 -> 2395;
2418 -> 2373;
2419 -> 2417;
2419 -> 2373;
2420 -> 2417;
2420 -> 2395;
2420 -> 2373;
2421 -> 2417;
2421 -> 2395;
2421 -> 2373;
2422 -> 2417;
2422 -> 2395;
2422 -> 2373;
2423 -> 2422;
2423 -> 2373;
2424 -> 2400;
2425 -> 2400;
2426 -> 2424;
2426 -> 2400;
2427 -> 2424;
2427 -> 2400;
2428 -> 2424;
2428 -> 2400;
2429 -> 2424;
2429 -> 2400;
2430 -> 2429;
2430 -> 2400;
2431 -> 2395;
2432 -> 2400;
2432 -> 2431;
2432 -> 2395;
2433 -> 2395;
2433 -> 2366;
2434 -> 2400;
2434 -> 2414;
2434 -> 2350;
2435 -> 2433;
2435 -> 2350;
2436 -> 2400;
2437 -> 2400;
2437 -> 2366;
2438 -> 2437;
2438 -> 2350;
2439 -> 2309;
2439 -> 2308;
2440 -> 2309;
2440 -> 2308;
2441 -> 2439;
2441 -> 2308;
2442 -> 2439;
2442 -> 2400;
2442 -> 2308;
2443 -> 2308;
2444 -> 2439;
2444 -> 2400;
2444 -> 2308;
2445 -> 2439;
2445 -> 2400;
2445 -> 2308;
2446 -> 2445;
2446 -> 2308;
2447 -> 2308;
2448 -> 2443;
2448 -> 2447;
2448 -> 2305;
2449 -> 2443;
2449 -> 2308;
2450 -> 2443;
2450 -> 2308;
2451 -> 2449;
2451 -> 2308;
2452 -> 2449;
2452 -> 2308;
2453 -> 2449;
2453 -> 2308;
2454 -> 2449;
2454 -> 2308;
2455 -> 2454;
2455 -> 2308;
2456 -> 2443;
2456 -> 2308;
2457 -> 2443;
2457 -> 2308;
2458 -> 2443;
2458 -> 2308;
2459 -> 2443;
2459 -> 2308;
2460 -> 2459;
2460 -> 2308;
2461 -> 2459;
2461 -> 2308;
2462 -> 2459;
2462 -> 2308;
2463 -> 2459;
2463 -> 2308;
2464 -> 2459;
2464 -> 2308;
2465 -> 2459;
2465 -> 2308;
2466 -> 2456;
2466 -> 2459;
2466 -> 2308;
2467 -> 2457;
2467 -> 2459;
2467 -> 2308;
2468 -> 2458;
2468 -> 2459;
2468 -> 2308;
2469 -> 2459;
2469 -> 2308;
2470 -> 2308;
2471 -> 2469;
2471 -> 2470;
2471 -> 2460;
2471 -> 2466;
2471 -> 2467;
2471 -> 2463;
2471 -> 2468;
2471 -> 2465;
2471 -> 2308;
2472 -> 2471;
2472 -> 2459;
2472 -> 2308;
2473 -> 2308;
2474 -> 2473;
2474 -> 2459;
2474 -> 2308;
2475 -> 2456;
2475 -> 2308;
2476 -> 2308;
2477 -> 2308;
2478 -> 2475;
2478 -> 2477;
2479 -> 2476;
2479 -> 2477;
2480 -> 2478;
2480 -> 2477;
2481 -> 2477;
2482 -> 2480;
2482 -> 2481;
2483 -> 2479;
2483 -> 2481;
2484 -> 2483;
2484 -> 2481;
2485 -> 2483;
2485 -> 2481;
2486 -> 2483;
2486 -> 2481;
2487 -> 2483;
2487 -> 2481;
2488 -> 2483;
2488 -> 2481;
2489 -> 2481;
2490 -> 2482;
2490 -> 2489;
2490 -> 2481;
2491 -> 2483;
2491 -> 2481;
2492 -> 2491;
2492 -> 2484;
2492 -> 2485;
2492 -> 2486;
2492 -> 2487;
2492 -> 2488;
2492 -> 2481;
2493 -> 2482;
2493 -> 2483;
2493 -> 2481;
2494 -> 2482;
2494 -> 2483;
2494 -> 2481;
2495 -> 2476;
2495 -> 2459;
2495 -> 2308;
2496 -> 2443;
2496 -> 2471;
2496 -> 2472;
2496 -> 2474;
2496 -> 2495;
2496 -> 2473;
2496 -> 2492;
2496 -> 2493;
2496 -> 2494;
2496 -> 2305;
2497 -> 2443;
2497 -> 2308;
2498 -> 2443;
2498 -> 2308;
2499 -> 2443;
2499 -> 2308;
2500 -> 2443;
2500 -> 2308;
2501 -> 2497;
2501 -> 2308;
2502 -> 2308;
2503 -> 2500;
2503 -> 2502;
2504 -> 2503;
2504 -> 0;
2504 -> 2502;
2505 -> 2504;
2505 -> 2308;
2506 -> 2308;
2507 -> 2497;
2507 -> 2506;
2507 -> 2308;
2508 -> 2505;
2508 -> 2507;
2508 -> 2308;
2509 -> 2497;
2509 -> 2508;
2510 -> 2509;
2510 -> 2308;
2511 -> 2501;
2511 -> 2308;
2512 -> 2498;
2512 -> 2308;
2513 -> 2499;
2513 -> 2308;
2514 -> 2308;
2515 -> 2510;
2515 -> 2514;
2516 -> 2511;
2516 -> 2514;
2517 -> 2512;
2517 -> 2514;
2518 -> 2513;
2518 -> 2514;
2519 -> 2500;
2519 -> 2514;
2520 -> 2514;
2521 -> 2515;
2521 -> 2520;
2521 -> 2514;
2522 -> 2518;
2522 -> 2514;
2523 -> 2519;
2523 -> 2514;
2524 -> 2514;
2525 -> 2523;
2525 -> 2524;
2526 -> 2523;
2526 -> 2524;
2527 -> 2524;
2528 -> 2527;
2528 -> 2524;
2529 -> 2527;
2529 -> 2524;
2530 -> 2527;
2530 -> 2524;
2531 -> 2527;
2531 -> 2524;
2532 -> 2525;
2532 -> 2527;
2532 -> 2524;
2533 -> 2523;
2533 -> 2527;
2533 -> 2528;
2533 -> 2529;
2533 -> 2530;
2533 -> 2531;
2533 -> 2532;
2533 -> 2514;
2534 -> 2516;
2534 -> 2514;
2535 -> 2517;
2535 -> 2514;
2536 -> 2518;
2536 -> 2514;
2537 -> 2514;
2538 -> 2534;
2538 -> 2537;
2539 -> 2535;
2539 -> 2537;
2540 -> 2536;
2540 -> 2537;
2541 -> 2533;
2541 -> 2537;
2542 -> 2537;
2543 -> 2539;
2543 -> 2542;
2543 -> 2537;
2544 -> 2540;
2544 -> 2542;
2544 -> 2537;
2545 -> 2543;
2545 -> 2544;
2545 -> 2537;
2546 -> 2538;
2546 -> 2541;
2546 -> 2537;
2547 -> 2539;
2547 -> 2541;
2547 -> 2537;
2548 -> 2540;
2548 -> 2541;
2548 -> 2537;
2549 -> 2514;
2550 -> 2515;
2550 -> 2514;
2551 -> 2514;
2552 -> 2550;
2552 -> 2551;
2553 -> 2533;
2553 -> 2551;
2554 -> 2552;
2554 -> 2551;
2555 -> 2551;
2556 -> 2554;
2556 -> 2555;
2557 -> 2553;
2557 -> 2555;
2558 -> 2557;
2558 -> 2555;
2559 -> 2558;
2559 -> 2556;
2559 -> 2533;
2559 -> 2546;
2559 -> 2547;
2559 -> 2548;
2559 -> 2555;
2560 -> 2555;
2561 -> 2559;
2561 -> 2560;
2562 -> 2559;
2562 -> 2560;
2563 -> 2562;
2563 -> 2559;
2563 -> 2560;
2564 -> 2561;
2564 -> 2560;
2565 -> 2563;
2565 -> 2564;
2565 -> 2559;
2565 -> 2560;
2566 -> 2561;
2566 -> 2560;
2567 -> 1832;
2567 -> 2560;
2568 -> 2560;
2569 -> 2566;
2569 -> 2568;
2570 -> 2567;
2570 -> 2568;
2571 -> 2568;
2572 -> 2569;
2572 -> 2568;
2573 -> 2568;
2574 -> 2568;
2575 -> 2572;
2575 -> 2574;
2576 -> 2573;
2576 -> 2574;
2577 -> 2575;
2577 -> 2576;
2577 -> 2574;
2578 -> 2573;
2578 -> 2560;
2579 -> 2560;
2580 -> 2560;
2581 -> 2562;
2581 -> 2580;
2582 -> 2581;
2582 -> 2565;
2582 -> 2580;
2583 -> 2582;
2583 -> 2560;
2584 -> 2578;
2584 -> 2560;
2585 -> 2579;
2585 -> 2560;
2586 -> 2584;
2586 -> 2585;
2586 -> 2583;
2586 -> 2577;
2586 -> 2567;
2586 -> 2565;
2586 -> 2560;
2587 -> 2560;
2588 -> 2586;
2589 -> 2588;
2589 -> 2586;
2590 -> 2586;
2591 -> 2586;
2591 -> 2590;
2592 -> 2591;
2592 -> 2586;
2592 -> 2590;
2593 -> 2592;
2593 -> 2586;
2594 -> 2586;
2595 -> 2586;
2596 -> 2586;
2597 -> 2586;
2598 -> 2586;
2599 -> 2586;
2600 -> 2586;
2601 -> 2586;
2602 -> 2533;
2602 -> 2514;
2603 -> 2443;
2603 -> 2308;
2604 -> 2443;
2604 -> 2308;
2605 -> 2443;
2605 -> 2308;
2606 -> 2443;
2606 -> 2308;
2607 -> 2443;
2607 -> 2308;
2608 -> 2603;
2608 -> 2308;
2609 -> 2604;
2609 -> 2308;
2610 -> 2605;
2610 -> 2308;
2611 -> 2606;
2611 -> 2308;
2612 -> 2308;
2613 -> 2608;
2613 -> 2612;
2614 -> 2609;
2614 -> 2612;
2615 -> 2610;
2615 -> 2612;
2616 -> 2611;
2616 -> 2612;
2617 -> 2607;
2617 -> 2612;
2618 -> 2612;
2619 -> 2614;
2619 -> 2618;
2619 -> 2612;
2620 -> 2613;
2620 -> 2612;
2621 -> 2614;
2621 -> 2612;
2622 -> 2615;
2622 -> 2612;
2623 -> 2612;
2624 -> 2615;
2624 -> 2623;
2624 -> 2612;
2625 -> 2624;
2625 -> 2616;
2625 -> 2612;
2626 -> 2612;
2627 -> 2620;
2627 -> 2626;
2628 -> 2621;
2628 -> 2626;
2629 -> 2622;
2629 -> 2626;
2630 -> 2625;
2630 -> 2626;
2631 -> 2617;
2631 -> 2626;
2632 -> 2627;
2632 -> 2626;
2633 -> 2627;
2633 -> 2632;
2634 -> 2628;
2634 -> 2632;
2635 -> 2632;
2636 -> 2633;
2636 -> 2635;
2637 -> 2634;
2637 -> 2635;
2638 -> 2631;
2638 -> 2635;
2639 -> 2636;
2639 -> 2635;
2640 -> 2639;
2640 -> 2635;
2641 -> 2637;
2641 -> 2635;
2642 -> 2635;
2643 -> 2640;
2643 -> 2642;
2644 -> 2641;
2644 -> 2642;
2645 -> 2638;
2645 -> 2642;
2646 -> 2643;
2646 -> 2642;
2647 -> 2644;
2647 -> 2642;
2648 -> 2642;
2649 -> 2646;
2649 -> 2648;
2650 -> 2647;
2650 -> 2648;
2651 -> 2646;
2651 -> 2648;
2652 -> 2645;
2652 -> 2648;
2653 -> 2652;
2653 -> 2648;
2654 -> 2649;
2654 -> 2648;
2655 -> 2651;
2655 -> 2648;
2656 -> 2650;
2656 -> 2648;
2657 -> 2648;
2658 -> 2653;
2658 -> 2657;
2659 -> 2654;
2659 -> 2657;
2660 -> 2655;
2660 -> 2657;
2661 -> 2656;
2661 -> 2657;
2662 -> 2659;
2662 -> 2657;
2663 -> 2658;
2663 -> 2662;
2663 -> 2657;
2664 -> 2657;
2665 -> 2663;
2665 -> 2664;
2665 -> 2657;
2666 -> 2663;
2666 -> 2657;
2667 -> 2661;
2667 -> 2657;
2668 -> 2660;
2668 -> 2657;
2669 -> 2657;
2670 -> 2666;
2670 -> 2669;
2671 -> 2667;
2671 -> 2669;
2672 -> 2668;
2672 -> 2669;
2673 -> 2670;
2673 -> 2663;
2673 -> 2669;
2674 -> 2669;
2675 -> 2673;
2675 -> 2674;
2675 -> 2669;
2676 -> 2663;
2676 -> 2657;
2677 -> 2639;
2677 -> 2635;
2678 -> 2635;
2679 -> 2677;
2679 -> 2678;
2680 -> 2638;
2680 -> 2678;
2681 -> 2679;
2681 -> 2678;
2682 -> 2679;
2682 -> 2678;
2683 -> 2678;
2684 -> 2682;
2684 -> 2683;
2685 -> 2682;
2685 -> 2683;
2686 -> 2680;
2686 -> 2683;
2687 -> 2684;
2687 -> 2683;
2688 -> 2685;
2688 -> 2683;
2689 -> 2687;
2689 -> 2688;
2689 -> 2683;
2690 -> 2689;
2690 -> 2683;
2691 -> 2686;
2691 -> 2690;
2692 -> 0;
2692 -> 2690;
2693 -> 2690;
2694 -> 2686;
2694 -> 2693;
2695 -> 2694;
2695 -> 2693;
2696 -> 2693;
2697 -> 2694;
2697 -> 2696;
2698 -> 2697;
2698 -> 2696;
2699 -> 2697;
2699 -> 2696;
2700 -> 2696;
2701 -> 2699;
2701 -> 2700;
2702 -> 2701;
2702 -> 2700;
2703 -> 2702;
2704 -> 2703;
2704 -> 2696;
2705 -> 2704;
2705 -> 2696;
2706 -> 2705;
2706 -> 2690;
2707 -> 2676;
2707 -> 2635;
2708 -> 2635;
2709 -> 2707;
2709 -> 2708;
2710 -> 2709;
2710 -> 2708;
2711 -> 2708;
2712 -> 2708;
2713 -> 2710;
2713 -> 2712;
2714 -> 2711;
2714 -> 2712;
2715 -> 2713;
2715 -> 2712;
2716 -> 2713;
2716 -> 2714;
2716 -> 2712;
2717 -> 2712;
2718 -> 2717;
2718 -> 2714;
2718 -> 2712;
2719 -> 2712;
2720 -> 2719;
2720 -> 2714;
2720 -> 2712;
2721 -> 2711;
2721 -> 2635;
2722 -> 2635;
2723 -> 2706;
2723 -> 2721;
2723 -> 2722;
2723 -> 2716;
2723 -> 2718;
2723 -> 2720;
2723 -> 2635;
2724 -> 2612;
2725 -> 2723;
2725 -> 2724;
2726 -> 2725;
2726 -> 2723;
2726 -> 2724;
2727 -> 2726;
2727 -> 2612;
2728 -> 2727;
2729 -> 2728;
2729 -> 2727;
2730 -> 2729;
2731 -> 2723;
2731 -> 2730;
2732 -> 2731;
2732 -> 2723;
2732 -> 2730;
2733 -> 2732;
2733 -> 2729;
2734 -> 2617;
2734 -> 2729;
2735 -> 2613;
2735 -> 2729;
2736 -> 2614;
2736 -> 2729;
2737 -> 2734;
2737 -> 2735;
2737 -> 2736;
2737 -> 2733;
2737 -> 2723;
2737 -> 2729;
2738 -> 2729;
2739 -> 2737;
2739 -> 2738;
2740 -> 2737;
2740 -> 2738;
2741 -> 2737;
2741 -> 2738;
2742 -> 2737;
2742 -> 2738;
2743 -> 2737;
2743 -> 2738;
2744 -> 2739;
2744 -> 2738;
2745 -> 2740;
2745 -> 2738;
2746 -> 2741;
2746 -> 2738;
2747 -> 2742;
2747 -> 2738;
2748 -> 2738;
2749 -> 2744;
2749 -> 2748;
2750 -> 2745;
2750 -> 2748;
2751 -> 2746;
2751 -> 2748;
2752 -> 2747;
2752 -> 2748;
2753 -> 2743;
2753 -> 2748;
2754 -> 2750;
2754 -> 2737;
2754 -> 2748;
2755 -> 2749;
2755 -> 2754;
2756 -> 2750;
2756 -> 2754;
2757 -> 2751;
2757 -> 2754;
2758 -> 2752;
2758 -> 2754;
2759 -> 2754;
2760 -> 2753;
2760 -> 2759;
2761 -> 2760;
2761 -> 2737;
2761 -> 2759;
2762 -> 2759;
2763 -> 2761;
2763 -> 2762;
2763 -> 2759;
2764 -> 2763;
2764 -> 2759;
2765 -> 2760;
2765 -> 2737;
2765 -> 2764;
2766 -> 2765;
2766 -> 2754;
2767 -> 2754;
2768 -> 2753;
2768 -> 2767;
2769 -> 2767;
2770 -> 2768;
2770 -> 2769;
2771 -> 2770;
2771 -> 2737;
2771 -> 2765;
2771 -> 2769;
2772 -> 2769;
2773 -> 2771;
2773 -> 2767;
2774 -> 2773;
2774 -> 2767;
2775 -> 2773;
2775 -> 2737;
2775 -> 0;
2775 -> 2767;
2776 -> 2773;
2776 -> 2767;
2777 -> 2773;
2777 -> 2767;
2778 -> 2777;
2778 -> 2754;
2779 -> 2753;
2779 -> 2737;
2779 -> 2754;
2780 -> 2754;
2781 -> 2755;
2781 -> 2780;
2782 -> 2756;
2782 -> 2780;
2783 -> 2757;
2783 -> 2780;
2784 -> 2758;
2784 -> 2780;
2785 -> 2766;
2785 -> 2780;
2786 -> 2778;
2786 -> 2780;
2787 -> 2779;
2787 -> 2780;
2788 -> 2782;
2788 -> 2780;
2789 -> 2788;
2789 -> 2737;
2789 -> 2765;
2789 -> 2771;
2789 -> 2780;
2790 -> 2782;
2790 -> 2789;
2790 -> 0;
2790 -> 2780;
2791 -> 2782;
2791 -> 2789;
2791 -> 0;
2791 -> 2780;
2792 -> 2782;
2792 -> 2780;
2793 -> 2786;
2793 -> 2780;
2794 -> 2792;
2794 -> 2793;
2794 -> 2789;
2794 -> 2780;
2795 -> 2784;
2795 -> 2780;
2796 -> 2795;
2796 -> 2780;
2797 -> 2781;
2797 -> 2780;
2798 -> 2794;
2798 -> 2780;
2799 -> 2783;
2799 -> 2780;
2800 -> 2785;
2800 -> 2780;
2801 -> 2787;
2801 -> 2780;
2802 -> 2780;
2803 -> 2797;
2803 -> 2802;
2804 -> 2798;
2804 -> 2802;
2805 -> 2799;
2805 -> 2802;
2806 -> 2800;
2806 -> 2802;
2807 -> 2801;
2807 -> 2802;
2808 -> 2802;
2809 -> 2803;
2809 -> 2808;
2809 -> 2802;
2810 -> 2804;
2810 -> 2802;
2811 -> 2806;
2811 -> 2802;
2812 -> 2802;
2813 -> 2810;
2813 -> 2811;
2813 -> 2812;
2813 -> 2794;
2813 -> 2802;
2814 -> 2802;
2815 -> 2813;
2815 -> 2802;
2816 -> 2802;
2817 -> 2814;
2817 -> 2816;
2817 -> 2802;
2818 -> 2813;
2818 -> 2802;
2819 -> 2818;
2819 -> 2780;
2820 -> 2795;
2820 -> 2819;
2821 -> 2754;
2822 -> 2738;
2823 -> 2723;
2823 -> 2727;
2824 -> 2823;
2824 -> 2308;
2825 -> 2604;
2825 -> 2308;
2826 -> 2603;
2826 -> 2308;
2827 -> 2605;
2827 -> 2308;
2828 -> 2308;
2829 -> 2824;
2829 -> 2828;
2830 -> 2825;
2830 -> 2828;
2831 -> 2826;
2831 -> 2828;
2832 -> 2827;
2832 -> 2828;
2833 -> 2607;
2833 -> 2828;
2834 -> 2828;
2835 -> 2829;
2835 -> 2834;
2836 -> 2835;
2836 -> 2723;
2836 -> 2834;
2837 -> 2836;
2837 -> 0;
2837 -> 2834;
2838 -> 2837;
2838 -> 2828;
2839 -> 2829;
2839 -> 2828;
2840 -> 2308;
2841 -> 2839;
2841 -> 2840;
2842 -> 2841;
2842 -> 2723;
2842 -> 2840;
2843 -> 2443;
2843 -> 2842;
2843 -> 2813;
2843 -> 2305;
2844 -> 2443;
2844 -> 2308;
2845 -> 2443;
2845 -> 2308;
2846 -> 2443;
2846 -> 2308;
2847 -> 2443;
2847 -> 2308;
2848 -> 2847;
2848 -> 2308;
2849 -> 2844;
2849 -> 2308;
2850 -> 2846;
2850 -> 2308;
2851 -> 2845;
2851 -> 2308;
2852 -> 2308;
2853 -> 2848;
2853 -> 2852;
2854 -> 2849;
2854 -> 2852;
2855 -> 2850;
2855 -> 2852;
2856 -> 2851;
2856 -> 2852;
2857 -> 2854;
2857 -> 2852;
2858 -> 2853;
2858 -> 2857;
2858 -> 2852;
2859 -> 2852;
2860 -> 2858;
2860 -> 2859;
2860 -> 2852;
2861 -> 2858;
2861 -> 2852;
2862 -> 2856;
2862 -> 2852;
2863 -> 2855;
2863 -> 2852;
2864 -> 2852;
2865 -> 2861;
2865 -> 2864;
2866 -> 2862;
2866 -> 2864;
2867 -> 2863;
2867 -> 2864;
2868 -> 2865;
2868 -> 2858;
2868 -> 2864;
2869 -> 2864;
2870 -> 2868;
2870 -> 2869;
2870 -> 2864;
2871 -> 2858;
2871 -> 2852;
2872 -> 2443;
2872 -> 2871;
2872 -> 2868;
2872 -> 2305;
2873 -> 2443;
2873 -> 2308;
2874 -> 2443;
2874 -> 2308;
2875 -> 2443;
2875 -> 2308;
2876 -> 2443;
2876 -> 2308;
2877 -> 2443;
2877 -> 2308;
2878 -> 2308;
2879 -> 2873;
2879 -> 2308;
2880 -> 2308;
2881 -> 2874;
2881 -> 2308;
2882 -> 2878;
2882 -> 2308;
2883 -> 2880;
2883 -> 2308;
2884 -> 2443;
2884 -> 2308;
2885 -> 2443;
2885 -> 2308;
2886 -> 2443;
2886 -> 2308;
2887 -> 2443;
2887 -> 2308;
2888 -> 2308;
2889 -> 2884;
2889 -> 2308;
2890 -> 2885;
2890 -> 2308;
2891 -> 2887;
2891 -> 2308;
2892 -> 2888;
2892 -> 2308;
2893 -> 2886;
2893 -> 2308;
2894 -> 2308;
2895 -> 2308;
2896 -> 2889;
2896 -> 2895;
2897 -> 2890;
2897 -> 2895;
2898 -> 2891;
2898 -> 2895;
2899 -> 2892;
2899 -> 2895;
2900 -> 2890;
2900 -> 2895;
2901 -> 2893;
2901 -> 2895;
2902 -> 2894;
2902 -> 2895;
2903 -> 2895;
2904 -> 2896;
2904 -> 2903;
2904 -> 2895;
2905 -> 2895;
2906 -> 2897;
2906 -> 2905;
2906 -> 2895;
2907 -> 2897;
2907 -> 2895;
2908 -> 2897;
2908 -> 2895;
2909 -> 2895;
2910 -> 2896;
2910 -> 2895;
2911 -> 2896;
2911 -> 0;
2911 -> 2895;
2912 -> 2896;
2912 -> 2911;
2913 -> 2896;
2913 -> 2911;
2914 -> 2897;
2914 -> 2911;
2915 -> 2898;
2915 -> 2911;
2916 -> 2909;
2916 -> 2911;
2917 -> 2900;
2917 -> 2911;
2918 -> 2901;
2918 -> 2911;
2919 -> 2911;
2920 -> 2911;
2921 -> 2913;
2921 -> 2920;
2922 -> 2913;
2922 -> 2920;
2923 -> 2914;
2923 -> 2920;
2924 -> 2915;
2924 -> 2920;
2925 -> 2916;
2925 -> 2920;
2926 -> 2917;
2926 -> 2920;
2927 -> 2918;
2927 -> 2920;
2928 -> 2919;
2928 -> 2920;
2929 -> 2923;
2929 -> 2920;
2930 -> 2920;
2931 -> 2921;
2931 -> 2930;
2931 -> 2920;
2932 -> 2920;
2933 -> 2921;
2933 -> 2923;
2933 -> 2920;
2934 -> 2921;
2934 -> 2920;
2935 -> 2923;
2935 -> 2920;
2936 -> 2927;
2936 -> 2920;
2937 -> 2928;
2937 -> 2920;
2938 -> 2920;
2939 -> 2934;
2939 -> 2938;
2940 -> 2935;
2940 -> 2938;
2941 -> 2936;
2941 -> 2938;
2942 -> 2937;
2942 -> 2938;
2943 -> 2940;
2943 -> 2938;
2944 -> 2938;
2945 -> 2939;
2945 -> 2944;
2945 -> 2938;
2946 -> 2940;
2946 -> 2938;
2947 -> 2938;
2948 -> 2939;
2948 -> 2938;
2949 -> 2939;
2949 -> 2938;
2950 -> 2938;
2951 -> 2949;
2951 -> 2950;
2951 -> 2938;
2952 -> 2951;
2952 -> 2938;
2953 -> 2940;
2953 -> 2952;
2954 -> 2952;
2955 -> 2952;
2955 -> 2954;
2956 -> 2952;
2956 -> 2954;
2957 -> 2953;
2957 -> 2954;
2958 -> 2957;
2958 -> 2954;
2959 -> 2954;
2960 -> 2955;
2960 -> 2959;
2960 -> 2954;
2961 -> 2956;
2961 -> 2954;
2962 -> 2961;
2963 -> 2922;
2963 -> 0;
2963 -> 2920;
2964 -> 2921;
2964 -> 2920;
2965 -> 2922;
2965 -> 2920;
2966 -> 2923;
2966 -> 2920;
2967 -> 2924;
2967 -> 2920;
2968 -> 2932;
2968 -> 2920;
2969 -> 2926;
2969 -> 2920;
2970 -> 2941;
2970 -> 2920;
2971 -> 2928;
2971 -> 2920;
2972 -> 2920;
2973 -> 2964;
2973 -> 2972;
2974 -> 2965;
2974 -> 2972;
2975 -> 2966;
2975 -> 2972;
2976 -> 2967;
2976 -> 2972;
2977 -> 2968;
2977 -> 2972;
2978 -> 2969;
2978 -> 2972;
2979 -> 2970;
2979 -> 2972;
2980 -> 2971;
2980 -> 2972;
2981 -> 2972;
2982 -> 2973;
2982 -> 2972;
2983 -> 2975;
2983 -> 2972;
2984 -> 2972;
2985 -> 2983;
2985 -> 2984;
2985 -> 2972;
2986 -> 2985;
2986 -> 2972;
2987 -> 2983;
2987 -> 2986;
2988 -> 2983;
2988 -> 2972;
2989 -> 2974;
2989 -> 2972;
2990 -> 2983;
2990 -> 2989;
2991 -> 2976;
2991 -> 2989;
2992 -> 2982;
2992 -> 2989;
2993 -> 2981;
2993 -> 2989;
2994 -> 2978;
2994 -> 2989;
2995 -> 2979;
2995 -> 2989;
2996 -> 2980;
2996 -> 2989;
2997 -> 2989;
2998 -> 2990;
2998 -> 2997;
2999 -> 2991;
2999 -> 2997;
3000 -> 2992;
3000 -> 2997;
3001 -> 2993;
3001 -> 2997;
3002 -> 2994;
3002 -> 2997;
3003 -> 2995;
3003 -> 2997;
3004 -> 2996;
3004 -> 2997;
3005 -> 2997;
3006 -> 3000;
3006 -> 0;
3006 -> 2997;
3007 -> 2997;
3008 -> 2998;
3008 -> 3007;
3008 -> 2997;
3009 -> 2998;
3009 -> 2997;
3010 -> 3000;
3010 -> 2997;
3011 -> 2997;
3012 -> 3009;
3012 -> 3011;
3013 -> 3010;
3013 -> 3011;
3014 -> 3011;
3015 -> 3012;
3015 -> 3014;
3015 -> 3011;
3016 -> 3011;
3017 -> 3013;
3017 -> 3016;
3017 -> 3011;
3018 -> 3013;
3018 -> 3011;
3019 -> 3012;
3019 -> 3011;
3020 -> 3011;
3021 -> 3019;
3021 -> 3020;
3021 -> 3011;
3022 -> 3019;
3022 -> 3021;
3023 -> 3019;
3023 -> 3013;
3023 -> 3021;
3024 -> 3019;
3024 -> 3021;
3025 -> 3011;
3026 -> 3025;
3026 -> 2997;
3027 -> 2998;
3027 -> 2997;
3028 -> 2997;
3029 -> 2999;
3029 -> 3028;
3029 -> 2997;
3030 -> 3029;
3030 -> 2997;
3031 -> 2997;
3032 -> 3027;
3032 -> 3031;
3032 -> 2997;
3033 -> 3027;
3033 -> 3032;
3034 -> 3027;
3034 -> 3032;
3035 -> 3000;
3035 -> 3032;
3036 -> 3002;
3036 -> 3032;
3037 -> 3003;
3037 -> 3032;
3038 -> 3004;
3038 -> 3032;
3039 -> 3032;
3040 -> 3034;
3040 -> 3039;
3041 -> 3035;
3041 -> 3039;
3042 -> 3036;
3042 -> 3039;
3043 -> 3037;
3043 -> 3039;
3044 -> 3038;
3044 -> 3039;
3045 -> 3040;
3045 -> 3039;
3046 -> 3041;
3046 -> 3039;
3047 -> 3039;
3048 -> 3039;
3049 -> 3041;
3049 -> 3039;
3050 -> 3049;
3050 -> 3039;
3051 -> 3039;
3052 -> 3040;
3052 -> 3039;
3053 -> 3039;
3054 -> 3039;
3055 -> 3052;
3055 -> 3054;
3055 -> 3039;
3056 -> 3052;
3056 -> 3055;
3057 -> 3052;
3057 -> 3055;
3058 -> 3049;
3058 -> 3057;
3058 -> 3055;
3059 -> 3052;
3059 -> 3041;
3059 -> 3055;
3060 -> 3049;
3060 -> 3055;
3061 -> 3052;
3061 -> 3055;
3062 -> 3044;
3062 -> 3055;
3063 -> 3042;
3063 -> 3055;
3064 -> 3051;
3064 -> 3055;
3065 -> 3061;
3065 -> 3062;
3065 -> 3063;
3065 -> 3064;
3065 -> 3055;
3066 -> 3055;
3067 -> 3065;
3067 -> 3066;
3067 -> 3055;
3068 -> 3065;
3068 -> 3067;
3069 -> 3068;
3069 -> 3067;
3070 -> 3043;
3070 -> 3067;
3071 -> 3069;
3071 -> 3070;
3071 -> 3065;
3071 -> 3067;
3072 -> 3068;
3072 -> 3071;
3073 -> 3068;
3074 -> 3073;
3074 -> 3071;
3074 -> 3068;
3075 -> 3049;
3075 -> 3074;
3075 -> 3068;
3076 -> 3068;
3076 -> 3041;
3077 -> 3075;
3078 -> 3065;
3078 -> 3039;
3079 -> 3077;
3079 -> 3039;
3080 -> 3047;
3080 -> 3039;
3081 -> 3048;
3081 -> 3039;
3082 -> 3077;
3082 -> 3039;
3083 -> 3082;
3084 -> 3030;
3084 -> 3083;
3084 -> 3082;
3085 -> 3084;
3086 -> 3071;
3086 -> 2308;
3087 -> 3086;
3087 -> 2895;
3088 -> 3071;
3088 -> 2903;
3088 -> 2895;
3089 -> 3071;
3089 -> 2905;
3089 -> 2895;
3090 -> 3071;
3090 -> 3085;
3090 -> 2895;
3091 -> 3071;
3091 -> 2895;
3092 -> 3071;
3092 -> 3085;
3093 -> 2909;
3093 -> 3085;
3094 -> 3093;
3094 -> 3085;
3095 -> 3092;
3095 -> 3085;
3096 -> 3085;
3097 -> 3092;
3097 -> 3096;
3097 -> 3085;
3098 -> 3085;
3099 -> 3092;
3099 -> 3085;
3100 -> 3092;
3100 -> 3085;
3101 -> 3092;
3101 -> 3085;
3102 -> 3085;
3103 -> 3101;
3103 -> 3085;
3104 -> 3085;
3105 -> 3100;
3105 -> 3104;
3105 -> 3085;
3106 -> 3101;
3106 -> 3092;
3106 -> 3085;
3107 -> 3085;
3108 -> 3100;
3108 -> 3092;
3108 -> 3085;
3109 -> 3100;
3109 -> 3092;
3109 -> 3085;
3110 -> 3085;
3111 -> 3109;
3111 -> 3110;
3111 -> 3085;
3112 -> 3111;
3112 -> 3085;
3113 -> 3101;
3113 -> 3112;
3114 -> 3112;
3115 -> 3112;
3115 -> 3114;
3116 -> 3112;
3116 -> 3114;
3117 -> 3113;
3117 -> 3114;
3118 -> 3117;
3118 -> 3114;
3119 -> 3114;
3120 -> 3115;
3120 -> 3119;
3120 -> 3114;
3121 -> 3116;
3121 -> 3114;
3122 -> 3121;
3123 -> 3092;
3123 -> 0;
3123 -> 3085;
3124 -> 3123;
3125 -> 3085;
3125 -> 2308;
3126 -> 3085;
3126 -> 2308;
3127 -> 3125;
3127 -> 2308;
3128 -> 3125;
3128 -> 3124;
3128 -> 2308;
3129 -> 3125;
3129 -> 3124;
3129 -> 2308;
3130 -> 3125;
3130 -> 3124;
3130 -> 2308;
3131 -> 3130;
3131 -> 2308;
3132 -> 3130;
3132 -> 3124;
3132 -> 3131;
3133 -> 2454;
3133 -> 2455;
3134 -> 2963;
3135 -> 2941;
3135 -> 3134;
3135 -> 2305;
3136 -> 2941;
3136 -> 2308;
3137 -> 2941;
3137 -> 2308;
3138 -> 3136;
3138 -> 2308;
3139 -> 3136;
3139 -> 2308;
3140 -> 3136;
3140 -> 2308;
3141 -> 3136;
3141 -> 2308;
3142 -> 3141;
3142 -> 2308;
3143 -> 3141;
3143 -> 3142;
3144 -> 3071;
3144 -> 2308;
3145 -> 3071;
3145 -> 2308;
3146 -> 3144;
3146 -> 2308;
3147 -> 3144;
3147 -> 3085;
3147 -> 2308;
3148 -> 3144;
3148 -> 3085;
3148 -> 2308;
3149 -> 3144;
3149 -> 3085;
3149 -> 2308;
3150 -> 3149;
3150 -> 2308;
3151 -> 3149;
3151 -> 3085;
3151 -> 3150;
3152 -> 2941;
3152 -> 2308;
3153 -> 2941;
3153 -> 2308;
3154 -> 3152;
3154 -> 2895;
3155 -> 3153;
3155 -> 2895;
3156 -> 3152;
3156 -> 2895;
3157 -> 2941;
3157 -> 2903;
3157 -> 2895;
3158 -> 3154;
3158 -> 2905;
3158 -> 2895;
3159 -> 3154;
3159 -> 2895;
3160 -> 3154;
3160 -> 2895;
3161 -> 2941;
3162 -> 2909;
3162 -> 2941;
3163 -> 2941;
3164 -> 2941;
3165 -> 3154;
3165 -> 2941;
3166 -> 3155;
3166 -> 2941;
3167 -> 3162;
3167 -> 2941;
3168 -> 3156;
3168 -> 2941;
3169 -> 2941;
3170 -> 3165;
3170 -> 2941;
3171 -> 2941;
3172 -> 3163;
3172 -> 3171;
3172 -> 2941;
3173 -> 2941;
3174 -> 3163;
3174 -> 3165;
3174 -> 2941;
3175 -> 3163;
3175 -> 2941;
3176 -> 3165;
3176 -> 2941;
3177 -> 3169;
3177 -> 2941;
3178 -> 3176;
3178 -> 2941;
3179 -> 2941;
3180 -> 3175;
3180 -> 3179;
3180 -> 2941;
3181 -> 3176;
3181 -> 2941;
3182 -> 2941;
3183 -> 3175;
3183 -> 2941;
3184 -> 3175;
3184 -> 2941;
3185 -> 2941;
3186 -> 3184;
3186 -> 3185;
3186 -> 2941;
3187 -> 3186;
3187 -> 2941;
3188 -> 3176;
3188 -> 3187;
3189 -> 3187;
3190 -> 3187;
3190 -> 3189;
3191 -> 3187;
3191 -> 3189;
3192 -> 3188;
3192 -> 3189;
3193 -> 3192;
3193 -> 3189;
3194 -> 3189;
3195 -> 3190;
3195 -> 3194;
3195 -> 3189;
3196 -> 3191;
3196 -> 3189;
3197 -> 3196;
3198 -> 3164;
3198 -> 0;
3198 -> 2941;
3199 -> 3198;
3200 -> 3152;
3200 -> 3199;
3200 -> 2305;
3201 -> 3152;
3201 -> 2308;
3202 -> 3201;
3202 -> 2895;
3203 -> 3201;
3203 -> 2895;
3204 -> 3152;
3204 -> 2903;
3204 -> 2895;
3205 -> 3152;
3206 -> 2909;
3206 -> 3152;
3207 -> 3152;
3208 -> 3152;
3209 -> 3154;
3209 -> 3152;
3210 -> 3202;
3210 -> 3152;
3211 -> 3206;
3211 -> 3152;
3212 -> 3203;
3212 -> 3152;
3213 -> 3152;
3214 -> 3209;
3214 -> 3152;
3215 -> 3152;
3216 -> 3207;
3216 -> 3215;
3216 -> 3152;
3217 -> 3152;
3218 -> 3207;
3218 -> 3209;
3218 -> 3152;
3219 -> 3207;
3219 -> 3152;
3220 -> 3209;
3220 -> 3152;
3221 -> 3213;
3221 -> 3152;
3222 -> 3220;
3222 -> 3152;
3223 -> 3152;
3224 -> 3219;
3224 -> 3223;
3224 -> 3152;
3225 -> 3220;
3225 -> 3152;
3226 -> 3152;
3227 -> 3219;
3227 -> 3152;
3228 -> 3219;
3228 -> 3152;
3229 -> 3152;
3230 -> 3228;
3230 -> 3229;
3230 -> 3152;
3231 -> 3230;
3231 -> 3152;
3232 -> 3220;
3232 -> 3231;
3233 -> 3231;
3234 -> 3231;
3234 -> 3233;
3235 -> 3231;
3235 -> 3233;
3236 -> 3232;
3236 -> 3233;
3237 -> 3236;
3237 -> 3233;
3238 -> 3233;
3239 -> 3234;
3239 -> 3238;
3239 -> 3233;
3240 -> 3235;
3240 -> 3233;
3241 -> 3240;
3242 -> 3208;
3242 -> 0;
3242 -> 3152;
3243 -> 3207;
3243 -> 3152;
3244 -> 3208;
3244 -> 3152;
3245 -> 3209;
3245 -> 3152;
3246 -> 3210;
3246 -> 3152;
3247 -> 3217;
3247 -> 3152;
3248 -> 3212;
3248 -> 3152;
3249 -> 3201;
3249 -> 3152;
3250 -> 3213;
3250 -> 3152;
3251 -> 3152;
3252 -> 3243;
3252 -> 3251;
3253 -> 3244;
3253 -> 3251;
3254 -> 3245;
3254 -> 3251;
3255 -> 3246;
3255 -> 3251;
3256 -> 3247;
3256 -> 3251;
3257 -> 3248;
3257 -> 3251;
3258 -> 3249;
3258 -> 3251;
3259 -> 3250;
3259 -> 3251;
3260 -> 3251;
3261 -> 3252;
3261 -> 3251;
3262 -> 3254;
3262 -> 3251;
3263 -> 3251;
3264 -> 3262;
3264 -> 3263;
3264 -> 3251;
3265 -> 3264;
3265 -> 3251;
3266 -> 3262;
3266 -> 3265;
3267 -> 3262;
3267 -> 3251;
3268 -> 3253;
3268 -> 3251;
3269 -> 3267;
3269 -> 3268;
3270 -> 3252;
3270 -> 3268;
3271 -> 3268;
3272 -> 3269;
3272 -> 3271;
3273 -> 3270;
3273 -> 3271;
3274 -> 3272;
3274 -> 3271;
3275 -> 3273;
3275 -> 3271;
3276 -> 3274;
3276 -> 3275;
3276 -> 3271;
3277 -> 3276;
3278 -> 3258;
3278 -> 3277;
3278 -> 2305;
3279 -> 3258;
3279 -> 2895;
3280 -> 3258;
3280 -> 2895;
3281 -> 3258;
3281 -> 2895;
3282 -> 3258;
3282 -> 2903;
3282 -> 2895;
3283 -> 3279;
3283 -> 2905;
3283 -> 2895;
3284 -> 3279;
3284 -> 2895;
3285 -> 3279;
3285 -> 2895;
3286 -> 3258;
3287 -> 2909;
3287 -> 3258;
3288 -> 3258;
3289 -> 3258;
3290 -> 3279;
3290 -> 3258;
3291 -> 3280;
3291 -> 3258;
3292 -> 3287;
3292 -> 3258;
3293 -> 3281;
3293 -> 3258;
3294 -> 3258;
3295 -> 3290;
3295 -> 3258;
3296 -> 3258;
3297 -> 3288;
3297 -> 3296;
3297 -> 3258;
3298 -> 3258;
3299 -> 3288;
3299 -> 3290;
3299 -> 3258;
3300 -> 3288;
3300 -> 3258;
3301 -> 3290;
3301 -> 3258;
3302 -> 3294;
3302 -> 3258;
3303 -> 3301;
3303 -> 3258;
3304 -> 3258;
3305 -> 3300;
3305 -> 3304;
3305 -> 3258;
3306 -> 3301;
3306 -> 3258;
3307 -> 3258;
3308 -> 3300;
3308 -> 3258;
3309 -> 3300;
3309 -> 3258;
3310 -> 3258;
3311 -> 3309;
3311 -> 3310;
3311 -> 3258;
3312 -> 3311;
3312 -> 3258;
3313 -> 3301;
3313 -> 3312;
3314 -> 3312;
3315 -> 3312;
3315 -> 3314;
3316 -> 3312;
3316 -> 3314;
3317 -> 3313;
3317 -> 3314;
3318 -> 3317;
3318 -> 3314;
3319 -> 3314;
3320 -> 3315;
3320 -> 3319;
3320 -> 3314;
3321 -> 3316;
3321 -> 3314;
3322 -> 3321;
3323 -> 3289;
3323 -> 0;
3323 -> 3258;
3324 -> 3323;
3325 -> 3288;
3325 -> 3324;
3325 -> 2305;
3326 -> 3288;
3326 -> 2308;
3327 -> 3288;
3327 -> 2308;
3328 -> 3326;
3328 -> 2308;
3329 -> 3326;
3329 -> 2308;
3330 -> 3326;
3330 -> 2308;
3331 -> 3326;
3331 -> 2308;
3332 -> 3331;
3332 -> 2308;
3333 -> 3331;
3333 -> 3332;
3334 -> 2912;
3335 -> 3334;
3335 -> 2911;
3336 -> 3335;
3336 -> 2920;
3337 -> 3201;
3337 -> 2895;
3338 -> 3201;
3338 -> 2903;
3338 -> 2895;
3339 -> 3337;
3339 -> 2905;
3339 -> 2895;
3340 -> 3337;
3340 -> 2895;
3341 -> 3337;
3341 -> 2895;
3342 -> 3201;
3343 -> 3155;
3343 -> 3201;
3344 -> 2909;
3344 -> 3201;
3345 -> 3201;
3346 -> 3201;
3347 -> 3337;
3347 -> 3201;
3348 -> 3343;
3348 -> 3201;
3349 -> 3344;
3349 -> 3201;
3350 -> 3203;
3350 -> 3201;
3351 -> 3201;
3352 -> 3347;
3352 -> 3201;
3353 -> 3201;
3354 -> 3345;
3354 -> 3353;
3354 -> 3201;
3355 -> 3201;
3356 -> 3345;
3356 -> 3347;
3356 -> 3201;
3357 -> 3345;
3357 -> 3201;
3358 -> 3347;
3358 -> 3201;
3359 -> 3351;
3359 -> 3201;
3360 -> 3358;
3360 -> 3201;
3361 -> 3201;
3362 -> 3357;
3362 -> 3361;
3362 -> 3201;
3363 -> 3358;
3363 -> 3201;
3364 -> 3201;
3365 -> 3357;
3365 -> 3201;
3366 -> 3357;
3366 -> 3201;
3367 -> 3201;
3368 -> 3366;
3368 -> 3367;
3368 -> 3201;
3369 -> 3368;
3369 -> 3201;
3370 -> 3358;
3370 -> 3369;
3371 -> 3369;
3372 -> 3369;
3372 -> 3371;
3373 -> 3369;
3373 -> 3371;
3374 -> 3370;
3374 -> 3371;
3375 -> 3374;
3375 -> 3371;
3376 -> 3371;
3377 -> 3372;
3377 -> 3376;
3377 -> 3371;
3378 -> 3373;
3378 -> 3371;
3379 -> 3378;
3380 -> 3346;
3380 -> 0;
3380 -> 3201;
3381 -> 3380;
3382 -> 3345;
3382 -> 3381;
3382 -> 2305;
3383 -> 3345;
3383 -> 2308;
3384 -> 3345;
3384 -> 2308;
3385 -> 3345;
3385 -> 2308;
3386 -> 3383;
3386 -> 2308;
3387 -> 2308;
3388 -> 3384;
3388 -> 2308;
3389 -> 2308;
3390 -> 2308;
3391 -> 3386;
3391 -> 3390;
3392 -> 3387;
3392 -> 3390;
3393 -> 3388;
3393 -> 3390;
3394 -> 3389;
3394 -> 3390;
3395 -> 3385;
3395 -> 3390;
3396 -> 3391;
3396 -> 3390;
3397 -> 3392;
3397 -> 3390;
3398 -> 3393;
3398 -> 3390;
3399 -> 3394;
3399 -> 3390;
3400 -> 3390;
3401 -> 3396;
3401 -> 3400;
3402 -> 3397;
3402 -> 3400;
3403 -> 3398;
3403 -> 3400;
3404 -> 3399;
3404 -> 3400;
3405 -> 3395;
3405 -> 3400;
3406 -> 3405;
3406 -> 3400;
3407 -> 3405;
3407 -> 3400;
3408 -> 3405;
3408 -> 3400;
3409 -> 3405;
3409 -> 3400;
3410 -> 3400;
3411 -> 3401;
3411 -> 3410;
3411 -> 3400;
3412 -> 3400;
3413 -> 3404;
3413 -> 3412;
3413 -> 3400;
3414 -> 3400;
3415 -> 3404;
3415 -> 3414;
3415 -> 3400;
3416 -> 3401;
3416 -> 3405;
3416 -> 3400;
3417 -> 3402;
3417 -> 3405;
3417 -> 3400;
3418 -> 3403;
3418 -> 3405;
3418 -> 3400;
3419 -> 3404;
3419 -> 3405;
3419 -> 3400;
3420 -> 3345;
3420 -> 3416;
3420 -> 3417;
3420 -> 3418;
3420 -> 3419;
3420 -> 2305;
3421 -> 2306;
3421 -> 2308;
3421 -> 2315;
3421 -> 2309;
3421 -> 2447;
3421 -> 2443;
3421 -> 2400;
3421 -> 2842;
3421 -> 2871;
3421 -> 3085;
3421 -> 3124;
3421 -> 3134;
3421 -> 3199;
3421 -> 3277;
3421 -> 3324;
3421 -> 3381;
3421 -> 3345;
3421 -> 2496;
3421 -> 2843;
3421 -> 2872;
3421 -> 3420;
3421 -> 2305;
3422 -> 3421;
3422 -> 2305;
3423 -> 2307;
3423 -> 2305;
3424 -> 2305;
3425 -> 3422;
3425 -> 3424;
3426 -> 3423;
3426 -> 3424;
3427 -> 3425;
3427 -> 3424;
3428 -> 3426;
3428 -> 3424;
3429 -> 3424;
3430 -> 3427;
3430 -> 3429;
3431 -> 3428;
3431 -> 3429;
3432 -> 3430;
3432 -> 3429;
3433 -> 3431;
3433 -> 3429;
3434 -> 3429;
3435 -> 3429;
3436 -> 3432;
3436 -> 3435;
3437 -> 3433;
3437 -> 3435;
3438 -> 3434;
3438 -> 3435;
3439 -> 3435;
3440 -> 3437;
3440 -> 3439;
3440 -> 3435;
3441 -> 3437;
3441 -> 3435;
3442 -> 3441;
3442 -> 438;
3442 -> 2304;
3442 -> 2275;
3442 -> 2276;
3442 -> 2285;
3442 -> 2277;
3442 -> 2278;
3442 -> 2302;
3442 -> 2281;
3442 -> 2282;
3442 -> 2295;
3442 -> 2283;
3442 -> 2284;
3442 -> 2280;
3442 -> 2299;
3442 -> 2300;
3442 -> 2301;
3442 -> 2267;
3442 -> 2210;
3442 -> 2156;
3442 -> 3435;
3443 -> 3435;
3444 -> 3441;
3444 -> 3443;
3444 -> 438;
3444 -> 2304;
3444 -> 2275;
3444 -> 2276;
3444 -> 2285;
3444 -> 2277;
3444 -> 2278;
3444 -> 2302;
3444 -> 2281;
3444 -> 2282;
3444 -> 2295;
3444 -> 2283;
3444 -> 2284;
3444 -> 2280;
3444 -> 2299;
3444 -> 2300;
3444 -> 2301;
3444 -> 2267;
3444 -> 2210;
3444 -> 2156;
3444 -> 3435;
3445 -> 3444;
3445 -> 3443;
3446 -> 3445;
3446 -> 3444;
3446 -> 3443;
3447 -> 3437;
3447 -> 3435;
3448 -> 3447;
3448 -> 3446;
3448 -> 3435;
3449 -> 3435;
3450 -> 3447;
3450 -> 3449;
3450 -> 3446;
3450 -> 3435;
3451 -> 3450;
3451 -> 3449;
3452 -> 3451;
3452 -> 3450;
3452 -> 3449;
3453 -> 3436;
3453 -> 3435;
3454 -> 3438;
3454 -> 3446;
3454 -> 3452;
3454 -> 3435;
3455 -> 3453;
3455 -> 3454;
3455 -> 3435;
3456 -> 3435;
3457 -> 3455;
3457 -> 3456;
3458 -> 3455;
3458 -> 3456;
3459 -> 3455;
3459 -> 3456;
3460 -> 3455;
3460 -> 3456;
3461 -> 3455;
3461 -> 3456;
3462 -> 3461;
3462 -> 3456;
3463 -> 3461;
3463 -> 3456;
3464 -> 3461;
3464 -> 3456;
3465 -> 3461;
3465 -> 3456;
3466 -> 3461;
3466 -> 3456;
3467 -> 3461;
3467 -> 3456;
3468 -> 3461;
3468 -> 3456;
3469 -> 3461;
3469 -> 3456;
3470 -> 3461;
3470 -> 3456;
3471 -> 3461;
3471 -> 3456;
3472 -> 3461;
3472 -> 3456;
3473 -> 3457;
3473 -> 3455;
3473 -> 3461;
3473 -> 3456;
3474 -> 3457;
3474 -> 3455;
3474 -> 3461;
3474 -> 3456;
3475 -> 3457;
3475 -> 3455;
3475 -> 3461;
3475 -> 3456;
3476 -> 3457;
3476 -> 3455;
3476 -> 3461;
3476 -> 3456;
3477 -> 3459;
3477 -> 3456;
3478 -> 3477;
3479 -> 3478;
3479 -> 3461;
3479 -> 3456;
3480 -> 3460;
3480 -> 3456;
3481 -> 3480;
3482 -> 3481;
3482 -> 3461;
3482 -> 3456;
3483 -> 3456;
3484 -> 3456;
3485 -> 3457;
3485 -> 3455;
3485 -> 3484;
3485 -> 3456;
3486 -> 3457;
3486 -> 3455;
3486 -> 3456;
3487 -> 0;
3487 -> 3456;
3488 -> 3457;
3488 -> 3485;
3489 -> 3485;
3490 -> 3488;
3490 -> 3489;
3490 -> 3485;
3491 -> 3488;
3491 -> 3486;
3491 -> 3461;
3491 -> 3490;
3492 -> 3457;
3492 -> 3486;
3492 -> 3461;
3492 -> 3490;
3493 -> 3458;
3493 -> 3461;
3493 -> 3456;
3494 -> 3461;
3494 -> 3493;
3494 -> 3456;
3495 -> 3461;
3495 -> 3476;
3495 -> 3486;
3495 -> 3494;
3496 -> 3495;
3497 -> 3496;
3497 -> 3461;
3497 -> 3495;
3498 -> 3494;
3499 -> 3488;
3499 -> 3498;
3499 -> 3494;
3500 -> 3488;
3500 -> 3496;
3500 -> 3461;
3500 -> 3499;
3501 -> 3494;
3502 -> 3461;
3502 -> 3500;
3502 -> 3501;
3502 -> 3494;
3503 -> 3461;
3503 -> 3500;
3503 -> 3496;
3503 -> 3501;
3503 -> 3494;
3504 -> 3461;
3504 -> 3476;
3504 -> 3496;
3504 -> 3456;
3505 -> 3504;
3505 -> 3461;
3505 -> 3456;
3506 -> 3455;
3506 -> 3504;
3506 -> 3492;
3506 -> 3474;
3506 -> 3475;
3506 -> 3497;
3506 -> 3500;
3506 -> 3505;
3506 -> 3468;
3506 -> 3491;
3506 -> 3493;
3506 -> 3479;
3506 -> 3482;
3506 -> 3472;
3506 -> 3461;
3506 -> 3476;
3506 -> 3435;
3507 -> 3437;
3507 -> 3435;
3508 -> 3507;
3508 -> 3452;
3508 -> 3435;
3509 -> 3508;
3510 -> 3509;
3510 -> 3506;
3510 -> 3452;
3510 -> 3508;
3511 -> 3510;
3511 -> 3509;
3512 -> 3510;
3512 -> 3509;
3513 -> 3511;
3513 -> 3509;
3514 -> 3509;
3515 -> 3513;
3515 -> 3514;
3515 -> 3509;
3516 -> 3513;
3516 -> 3510;
3516 -> 3509;
3517 -> 3512;
3517 -> 3510;
3517 -> 3516;
3517 -> 3509;
3518 -> 3512;
3518 -> 3517;
3518 -> 3513;
3518 -> 3509;
3519 -> 3512;
3519 -> 3517;
3519 -> 3513;
3519 -> 3509;
3520 -> 3512;
3520 -> 3517;
3520 -> 3509;
3521 -> 3512;
3521 -> 3517;
3521 -> 3513;
3521 -> 3520;
3522 -> 3509;
3523 -> 3512;
3523 -> 3517;
3523 -> 3522;
3523 -> 3509;
3524 -> 3523;
3525 -> 3512;
3525 -> 3517;
3525 -> 3513;
3525 -> 3524;
3526 -> 3509;
3527 -> 3512;
3527 -> 3517;
3527 -> 3526;
3527 -> 3509;
3528 -> 3509;
3529 -> 3513;
3529 -> 3517;
3529 -> 3528;
3529 -> 3509;
3530 -> 3512;
3530 -> 3517;
3530 -> 3513;
3530 -> 3509;
3531 -> 3509;
3532 -> 3512;
3532 -> 3517;
3532 -> 3531;
3532 -> 3509;
3533 -> 3532;
3534 -> 3532;
3535 -> 3512;
3535 -> 3534;
3536 -> 3534;
3537 -> 3535;
3537 -> 3517;
3537 -> 3536;
3537 -> 3534;
3538 -> 3535;
3538 -> 3517;
3538 -> 3537;
3539 -> 3537;
3540 -> 3538;
3540 -> 3535;
3540 -> 3537;
3541 -> 3535;
3541 -> 3517;
3541 -> 3540;
3541 -> 3534;
3542 -> 3541;
3542 -> 3532;
3543 -> 3532;
3544 -> 3513;
3544 -> 3543;
3545 -> 3543;
3546 -> 3544;
3546 -> 3517;
3546 -> 3540;
3546 -> 3545;
3546 -> 3543;
3547 -> 3544;
3547 -> 3517;
3547 -> 3540;
3547 -> 3546;
3547 -> 3543;
3548 -> 3547;
3548 -> 3532;
3549 -> 3512;
3549 -> 3517;
3549 -> 3513;
3549 -> 3532;
3550 -> 3542;
3550 -> 3549;
3551 -> 3548;
3551 -> 3549;
3552 -> 3550;
3552 -> 3551;
3552 -> 3517;
3552 -> 3540;
3552 -> 3546;
3552 -> 3538;
3552 -> 3539;
3552 -> 3549;
3553 -> 3512;
3553 -> 3552;
3553 -> 3513;
3553 -> 3509;
3554 -> 3509;
3555 -> 3510;
3555 -> 3554;
3555 -> 3552;
3555 -> 3508;
3556 -> 3508;
3557 -> 3555;
3557 -> 3556;
3557 -> 3508;
3558 -> 3555;
3558 -> 3557;
3559 -> 3435;
3560 -> 3506;
3560 -> 3558;
3560 -> 3559;
3560 -> 3435;
3561 -> 3435;
3562 -> 3437;
3562 -> 3435;
3563 -> 3436;
3563 -> 3435;
3564 -> 3435;
3565 -> 3562;
3565 -> 3564;
3566 -> 3563;
3566 -> 3564;
3567 -> 3564;
3568 -> 3564;
3569 -> 3566;
3569 -> 3564;
3570 -> 3569;
3570 -> 3558;
3570 -> 3564;
3571 -> 3558;
3571 -> 3564;
3572 -> 3570;
3572 -> 3564;
3573 -> 3567;
3573 -> 3572;
3574 -> 3573;
3574 -> 3564;
3575 -> 3573;
3575 -> 3564;
3576 -> 3575;
3576 -> 3564;
3577 -> 3565;
3577 -> 3564;
3578 -> 3577;
3578 -> 3558;
3578 -> 3564;
3579 -> 3564;
3580 -> 3577;
3580 -> 3579;
3580 -> 3558;
3580 -> 3564;
3581 -> 3565;
3581 -> 3564;
3582 -> 3581;
3582 -> 3580;
3582 -> 3564;
3583 -> 3564;
3584 -> 3581;
3584 -> 3583;
3584 -> 3580;
3584 -> 3564;
3585 -> 3565;
3585 -> 3564;
3586 -> 3564;
3587 -> 3585;
3587 -> 3586;
3589 -> 3588;
3590 -> 3588;
3591 -> 3590;
3591 -> 3586;
3592 -> 3586;
3593 -> 3587;
3593 -> 3586;
3594 -> 3593;
3594 -> 3584;
3594 -> 3586;
3595 -> 3594;
3596 -> 3594;
3597 -> 3592;
3597 -> 3596;
3597 -> 3594;
3598 -> 3594;
3599 -> 3586;
3600 -> 3599;
3600 -> 3564;
3601 -> 3566;
3601 -> 3600;
3602 -> 3600;
3603 -> 3601;
3603 -> 3602;
3604 -> 3603;
3604 -> 3602;
3605 -> 3602;
3606 -> 3590;
3606 -> 3602;
3607 -> 3604;
3607 -> 3605;
3607 -> 3606;
3607 -> 3584;
3607 -> 3602;
3608 -> 3564;
3609 -> 3608;
3609 -> 3564;
3610 -> 3564;
3611 -> 3564;
3612 -> 3608;
3612 -> 3611;
3612 -> 3609;
3612 -> 3564;
3613 -> 3564;
3614 -> 3565;
3614 -> 3564;
3615 -> 3614;
3615 -> 3607;
3615 -> 3564;
3616 -> 3615;
3617 -> 3576;
3617 -> 3615;
3618 -> 3615;
3619 -> 3616;
3619 -> 3618;
3620 -> 3617;
3620 -> 3618;
3621 -> 3618;
3622 -> 3621;
3622 -> 3620;
3622 -> 3618;
3623 -> 3618;
3624 -> 3619;
3624 -> 3623;
3625 -> 3623;
3626 -> 3623;
3627 -> 3625;
3627 -> 3626;
3627 -> 3623;
3628 -> 3623;
3629 -> 3624;
3629 -> 3607;
3629 -> 3628;
3629 -> 3623;
3630 -> 3624;
3630 -> 3607;
3630 -> 3629;
3631 -> 3625;
3631 -> 3630;
3631 -> 3627;
3631 -> 3629;
3632 -> 3629;
3633 -> 3625;
3633 -> 3632;
3633 -> 3631;
3633 -> 3629;
3634 -> 3624;
3634 -> 3607;
3634 -> 3629;
3635 -> 3625;
3635 -> 3634;
3635 -> 3633;
3635 -> 3629;
3636 -> 3623;
3637 -> 3624;
3637 -> 3607;
3637 -> 3636;
3637 -> 3623;
3638 -> 3637;
3639 -> 3638;
3640 -> 3625;
3640 -> 3639;
3640 -> 3635;
3640 -> 3638;
3641 -> 3624;
3641 -> 3607;
3641 -> 3638;
3642 -> 3625;
3642 -> 3641;
3642 -> 3640;
3642 -> 3638;
3643 -> 3637;
3644 -> 3625;
3644 -> 3643;
3644 -> 3642;
3644 -> 3637;
3645 -> 3624;
3645 -> 3607;
3645 -> 3623;
3646 -> 3623;
3647 -> 3625;
3647 -> 3646;
3647 -> 3644;
3647 -> 3623;
3648 -> 3623;
3649 -> 3624;
3649 -> 3607;
3649 -> 3648;
3649 -> 3623;
3650 -> 3649;
3651 -> 3625;
3651 -> 3650;
3651 -> 3647;
3651 -> 3649;
3652 -> 3649;
3653 -> 3652;
3653 -> 3649;
3654 -> 3649;
3655 -> 3653;
3655 -> 3649;
3656 -> 3655;
3657 -> 3625;
3657 -> 3656;
3657 -> 3651;
3657 -> 3655;
3658 -> 3653;
3658 -> 3655;
3659 -> 3625;
3659 -> 3658;
3659 -> 3657;
3659 -> 3655;
3660 -> 3655;
3661 -> 3625;
3661 -> 3660;
3661 -> 3659;
3661 -> 3655;
3662 -> 3655;
3663 -> 3662;
3664 -> 3625;
3664 -> 3663;
3664 -> 3661;
3664 -> 3662;
3665 -> 3649;
3666 -> 3625;
3666 -> 3665;
3666 -> 3664;
3666 -> 3649;
3667 -> 3623;
3668 -> 3624;
3668 -> 3655;
3668 -> 3667;
3668 -> 3623;
3669 -> 3668;
3670 -> 3625;
3670 -> 3669;
3670 -> 3666;
3670 -> 3668;
3671 -> 3668;
3672 -> 3625;
3672 -> 3671;
3672 -> 3670;
3672 -> 3668;
3673 -> 3668;
3674 -> 3625;
3674 -> 3673;
3674 -> 3672;
3674 -> 3668;
3675 -> 3668;
3676 -> 3625;
3676 -> 3675;
3676 -> 3674;
3676 -> 3668;
3677 -> 3668;
3678 -> 3625;
3678 -> 3677;
3678 -> 3676;
3678 -> 3668;
3679 -> 3624;
3679 -> 3655;
3679 -> 3623;
3680 -> 3623;
3681 -> 3624;
3681 -> 3655;
3681 -> 3680;
3681 -> 3623;
3682 -> 3623;
3683 -> 3624;
3683 -> 3655;
3683 -> 3682;
3683 -> 3623;
3684 -> 3623;
3685 -> 3624;
3685 -> 3655;
3685 -> 3684;
3685 -> 3623;
3686 -> 3625;
3686 -> 3678;
3686 -> 3623;
3687 -> 3686;
3687 -> 3618;
3688 -> 3622;
3688 -> 3687;
3688 -> 3618;
3689 -> 3613;
3689 -> 3688;
3689 -> 3615;
3690 -> 3608;
3690 -> 3564;
3691 -> 3613;
3691 -> 3564;
3692 -> 3564;
3693 -> 3690;
3693 -> 3692;
3694 -> 3691;
3694 -> 3692;
3695 -> 3694;
3695 -> 3689;
3695 -> 3692;
3696 -> 3692;
3697 -> 3696;
3697 -> 3695;
3697 -> 3692;
3698 -> 3694;
3698 -> 3696;
3698 -> 3689;
3698 -> 3697;
3699 -> 3693;
3699 -> 3698;
3699 -> 3612;
3699 -> 3697;
3700 -> 3697;
3701 -> 3693;
3701 -> 3699;
3701 -> 3697;
3702 -> 3564;
3703 -> 3564;
3704 -> 3608;
3704 -> 3703;
3704 -> 3701;
3704 -> 3564;
3705 -> 3564;
3706 -> 3607;
3706 -> 3655;
3706 -> 3564;
3707 -> 3564;
3708 -> 3706;
3708 -> 3564;
3709 -> 3708;
3709 -> 3707;
3710 -> 3708;
3710 -> 3707;
3711 -> 3708;
3711 -> 3707;
3712 -> 3707;
3713 -> 3709;
3713 -> 3712;
3713 -> 3707;
3714 -> 3707;
3715 -> 3710;
3715 -> 3714;
3715 -> 3707;
3716 -> 3710;
3716 -> 3708;
3716 -> 3707;
3717 -> 3709;
3717 -> 3708;
3717 -> 3716;
3717 -> 3707;
3718 -> 3707;
3719 -> 3717;
3719 -> 3718;
3719 -> 3707;
3720 -> 3710;
3720 -> 3708;
3720 -> 3707;
3721 -> 3709;
3721 -> 3708;
3721 -> 3720;
3721 -> 3707;
3722 -> 3710;
3722 -> 3721;
3722 -> 3707;
3723 -> 3722;
3723 -> 3718;
3723 -> 3707;
3724 -> 3706;
3724 -> 3721;
3725 -> 3724;
3725 -> 3721;
3726 -> 3725;
3726 -> 3721;
3727 -> 3721;
3728 -> 3721;
3729 -> 3574;
3729 -> 3721;
3730 -> 3608;
3730 -> 3729;
3731 -> 3576;
3731 -> 3729;
3732 -> 3729;
3733 -> 3730;
3733 -> 3732;
3734 -> 3731;
3734 -> 3732;
3735 -> 3732;
3736 -> 3735;
3736 -> 3734;
3736 -> 3732;
3737 -> 3733;
3737 -> 3735;
3737 -> 3736;
3737 -> 3704;
3737 -> 3732;
3738 -> 3729;
3739 -> 3729;
3740 -> 3608;
3740 -> 3739;
3740 -> 3737;
3740 -> 3729;
3741 -> 3724;
3741 -> 3725;
3741 -> 3729;
3742 -> 3608;
3742 -> 3741;
3742 -> 3740;
3742 -> 3729;
3743 -> 3724;
3743 -> 3741;
3743 -> 3729;
3744 -> 3743;
3744 -> 3741;
3744 -> 3729;
3745 -> 3608;
3745 -> 3744;
3746 -> 3576;
3746 -> 3744;
3747 -> 3744;
3748 -> 3745;
3748 -> 3747;
3749 -> 3746;
3749 -> 3747;
3750 -> 3747;
3751 -> 3750;
3751 -> 3749;
3751 -> 3747;
3752 -> 3748;
3752 -> 3750;
3752 -> 3751;
3752 -> 3742;
3752 -> 3747;
3753 -> 3744;
3754 -> 3744;
3755 -> 3608;
3755 -> 3754;
3755 -> 3752;
3755 -> 3744;
3756 -> 3744;
3757 -> 3608;
3757 -> 3756;
3757 -> 3755;
3757 -> 3744;
3758 -> 3724;
3758 -> 3721;
3759 -> 3721;
3760 -> 3578;
3760 -> 3721;
3761 -> 3582;
3761 -> 3721;
3762 -> 3721;
3763 -> 3758;
3763 -> 3762;
3764 -> 3759;
3764 -> 3762;
3765 -> 3760;
3765 -> 3762;
3766 -> 3761;
3766 -> 3762;
3767 -> 3759;
3767 -> 3762;
3768 -> 3767;
3768 -> 3762;
3769 -> 3767;
3769 -> 3762;
3770 -> 3767;
3770 -> 3762;
3771 -> 3767;
3771 -> 3762;
3772 -> 3767;
3772 -> 3762;
3773 -> 3767;
3773 -> 3762;
3774 -> 3767;
3774 -> 3762;
3775 -> 3767;
3775 -> 3762;
3776 -> 3767;
3776 -> 3762;
3777 -> 3763;
3777 -> 3756;
3777 -> 3767;
3777 -> 3762;
3778 -> 3763;
3778 -> 3756;
3778 -> 3767;
3778 -> 3762;
3779 -> 3763;
3779 -> 3756;
3779 -> 3767;
3779 -> 3762;
3780 -> 3763;
3780 -> 3756;
3780 -> 3767;
3780 -> 3762;
3781 -> 3762;
3782 -> 3763;
3782 -> 3756;
3782 -> 3762;
3783 -> 3767;
3784 -> 3767;
3784 -> 3782;
3784 -> 3783;
3785 -> 3767;
3785 -> 3782;
3785 -> 3780;
3785 -> 3783;
3786 -> 3759;
3786 -> 3721;
3787 -> 3565;
3787 -> 3721;
3788 -> 3759;
3788 -> 3721;
3789 -> 3787;
3789 -> 3788;
3789 -> 3780;
3789 -> 3782;
3789 -> 3778;
3789 -> 3779;
3789 -> 3767;
3789 -> 3764;
3789 -> 3765;
3789 -> 3766;
3789 -> 3721;
3790 -> 3721;
3791 -> 3790;
3792 -> 3789;
3792 -> 3791;
3792 -> 3790;
3793 -> 3789;
3793 -> 3790;
3794 -> 3789;
3794 -> 3790;
3795 -> 3789;
3795 -> 3790;
3796 -> 3789;
3796 -> 3795;
3797 -> 3790;
3798 -> 3789;
3798 -> 3797;
3798 -> 3790;
3799 -> 3798;
3800 -> 3789;
3800 -> 3799;
3801 -> 3790;
3802 -> 3789;
3802 -> 3801;
3802 -> 3790;
3803 -> 3790;
3804 -> 3789;
3804 -> 3803;
3804 -> 3790;
3805 -> 3789;
3805 -> 3790;
3806 -> 3789;
3807 -> 3789;
3807 -> 3790;
3808 -> 3721;
3809 -> 3789;
3809 -> 3808;
3809 -> 3721;
3810 -> 3565;
3810 -> 3789;
3810 -> 3809;
3811 -> 3759;
3811 -> 3721;
3812 -> 3576;
3812 -> 3721;
3813 -> 3721;
3814 -> 3811;
3814 -> 3813;
3815 -> 3812;
3815 -> 3813;
3816 -> 3813;
3817 -> 3816;
3817 -> 3815;
3817 -> 3813;
3818 -> 3813;
3819 -> 3813;
3820 -> 3818;
3820 -> 3819;
3820 -> 3813;
3821 -> 3813;
3822 -> 3814;
3822 -> 3789;
3822 -> 3821;
3822 -> 3813;
3823 -> 3814;
3823 -> 3789;
3823 -> 3822;
3824 -> 3818;
3824 -> 3823;
3824 -> 3820;
3824 -> 3822;
3825 -> 3822;
3826 -> 3818;
3826 -> 3825;
3826 -> 3824;
3826 -> 3822;
3827 -> 3814;
3827 -> 3789;
3827 -> 3822;
3828 -> 3818;
3828 -> 3827;
3828 -> 3826;
3828 -> 3822;
3829 -> 3813;
3830 -> 3814;
3830 -> 3789;
3830 -> 3829;
3830 -> 3813;
3831 -> 3830;
3832 -> 3831;
3833 -> 3818;
3833 -> 3832;
3833 -> 3828;
3833 -> 3831;
3834 -> 3814;
3834 -> 3789;
3834 -> 3831;
3835 -> 3818;
3835 -> 3834;
3835 -> 3833;
3835 -> 3831;
3836 -> 3830;
3837 -> 3818;
3837 -> 3836;
3837 -> 3835;
3837 -> 3830;
3838 -> 3814;
3838 -> 3789;
3838 -> 3813;
3839 -> 3813;
3840 -> 3818;
3840 -> 3839;
3840 -> 3837;
3840 -> 3813;
3841 -> 3814;
3841 -> 3789;
3841 -> 3813;
3842 -> 3841;
3843 -> 3818;
3843 -> 3842;
3843 -> 3840;
3843 -> 3841;
3844 -> 3841;
3845 -> 3818;
3845 -> 3844;
3845 -> 3843;
3845 -> 3841;
3846 -> 3841;
3847 -> 3818;
3847 -> 3846;
3847 -> 3845;
3847 -> 3841;
3848 -> 3841;
3849 -> 3818;
3849 -> 3848;
3849 -> 3847;
3849 -> 3841;
3850 -> 3841;
3851 -> 3850;
3852 -> 3818;
3852 -> 3851;
3852 -> 3849;
3852 -> 3850;
3853 -> 3841;
3854 -> 3818;
3854 -> 3853;
3854 -> 3852;
3854 -> 3841;
3855 -> 3813;
3856 -> 3814;
3856 -> 3841;
3856 -> 3855;
3856 -> 3813;
3857 -> 3856;
3858 -> 3818;
3858 -> 3857;
3858 -> 3854;
3858 -> 3856;
3859 -> 3856;
3860 -> 3818;
3860 -> 3859;
3860 -> 3858;
3860 -> 3856;
3861 -> 3856;
3862 -> 3818;
3862 -> 3861;
3862 -> 3860;
3862 -> 3856;
3863 -> 3856;
3864 -> 3818;
3864 -> 3863;
3864 -> 3862;
3864 -> 3856;
3865 -> 3856;
3866 -> 3818;
3866 -> 3865;
3866 -> 3864;
3866 -> 3856;
3867 -> 3814;
3867 -> 3841;
3867 -> 3813;
3868 -> 3813;
3869 -> 3814;
3869 -> 3841;
3869 -> 3868;
3869 -> 3813;
3870 -> 3813;
3871 -> 3814;
3871 -> 3841;
3871 -> 3870;
3871 -> 3813;
3872 -> 3813;
3873 -> 3814;
3873 -> 3841;
3873 -> 3872;
3873 -> 3813;
3874 -> 3818;
3874 -> 3866;
3874 -> 3813;
3875 -> 3874;
3875 -> 3813;
3876 -> 3817;
3876 -> 3875;
3876 -> 3813;
3877 -> 3608;
3877 -> 3876;
3877 -> 3757;
3877 -> 3721;
3878 -> 3810;
3878 -> 3721;
3879 -> 3576;
3879 -> 3721;
3880 -> 3721;
3881 -> 3878;
3881 -> 3880;
3882 -> 3879;
3882 -> 3880;
3883 -> 3880;
3884 -> 3883;
3884 -> 3882;
3884 -> 3880;
3885 -> 3880;
3886 -> 3880;
3887 -> 3885;
3887 -> 3886;
3887 -> 3880;
3888 -> 3880;
3889 -> 3881;
3889 -> 3841;
3889 -> 3888;
3889 -> 3880;
3890 -> 3881;
3890 -> 3841;
3890 -> 3889;
3891 -> 3885;
3891 -> 3890;
3891 -> 3887;
3891 -> 3889;
3892 -> 3889;
3893 -> 3885;
3893 -> 3892;
3893 -> 3891;
3893 -> 3889;
3894 -> 3881;
3894 -> 3841;
3894 -> 3889;
3895 -> 3885;
3895 -> 3894;
3895 -> 3893;
3895 -> 3889;
3896 -> 3880;
3897 -> 3881;
3897 -> 3841;
3897 -> 3896;
3897 -> 3880;
3898 -> 3897;
3899 -> 3898;
3900 -> 3885;
3900 -> 3899;
3900 -> 3895;
3900 -> 3898;
3901 -> 3881;
3901 -> 3841;
3901 -> 3898;
3902 -> 3885;
3902 -> 3901;
3902 -> 3900;
3902 -> 3898;
3903 -> 3897;
3904 -> 3885;
3904 -> 3903;
3904 -> 3902;
3904 -> 3897;
3905 -> 3881;
3905 -> 3841;
3905 -> 3880;
3906 -> 3880;
3907 -> 3885;
3907 -> 3906;
3907 -> 3904;
3907 -> 3880;
3908 -> 3881;
3908 -> 3841;
3908 -> 3880;
3909 -> 3908;
3910 -> 3885;
3910 -> 3909;
3910 -> 3907;
3910 -> 3908;
3911 -> 3908;
3912 -> 3885;
3912 -> 3911;
3912 -> 3910;
3912 -> 3908;
3913 -> 3908;
3914 -> 3885;
3914 -> 3913;
3914 -> 3912;
3914 -> 3908;
3915 -> 3908;
3916 -> 3885;
3916 -> 3915;
3916 -> 3914;
3916 -> 3908;
3917 -> 3908;
3918 -> 3917;
3919 -> 3885;
3919 -> 3918;
3919 -> 3916;
3919 -> 3917;
3920 -> 3908;
3921 -> 3885;
3921 -> 3920;
3921 -> 3919;
3921 -> 3908;
3922 -> 3880;
3923 -> 3881;
3923 -> 3908;
3923 -> 3922;
3923 -> 3880;
3924 -> 3923;
3925 -> 3885;
3925 -> 3924;
3925 -> 3921;
3925 -> 3923;
3926 -> 3923;
3927 -> 3885;
3927 -> 3926;
3927 -> 3925;
3927 -> 3923;
3928 -> 3923;
3929 -> 3885;
3929 -> 3928;
3929 -> 3927;
3929 -> 3923;
3930 -> 3923;
3931 -> 3885;
3931 -> 3930;
3931 -> 3929;
3931 -> 3923;
3932 -> 3923;
3933 -> 3885;
3933 -> 3932;
3933 -> 3931;
3933 -> 3923;
3934 -> 3881;
3934 -> 3908;
3934 -> 3880;
3935 -> 3880;
3936 -> 3881;
3936 -> 3908;
3936 -> 3935;
3936 -> 3880;
3937 -> 3880;
3938 -> 3881;
3938 -> 3908;
3938 -> 3937;
3938 -> 3880;
3939 -> 3880;
3940 -> 3881;
3940 -> 3908;
3940 -> 3939;
3940 -> 3880;
3941 -> 3885;
3941 -> 3933;
3941 -> 3880;
3942 -> 3941;
3942 -> 3880;
3943 -> 3884;
3943 -> 3942;
3943 -> 3880;
3944 -> 3705;
3944 -> 3943;
3944 -> 3721;
3945 -> 3564;
3946 -> 3721;
3946 -> 3945;
3946 -> 3564;
3947 -> 3608;
3947 -> 3877;
3947 -> 3946;
3948 -> 3564;
3949 -> 3608;
3949 -> 3948;
3949 -> 3947;
3949 -> 3564;
3950 -> 3613;
3950 -> 3564;
3951 -> 3705;
3951 -> 3564;
3955 -> 3953;
3955 -> 3952;
3956 -> 3954;
3956 -> 3952;
3957 -> 3952;
3958 -> 0;
3958 -> 3564;
3959 -> 3564;
3960 -> 3564;
3961 -> 3950;
3961 -> 3960;
3962 -> 3951;
3962 -> 3960;
3963 -> 3958;
3963 -> 3960;
3964 -> 3959;
3964 -> 3960;
3965 -> 3959;
3965 -> 3960;
3966 -> 3960;
3967 -> 3964;
3967 -> 3966;
3967 -> 3960;
3968 -> 3967;
3968 -> 3960;
3969 -> 0;
3971 -> 3969;
3971 -> 3970;
3972 -> 3970;
3974 -> 3973;
3976 -> 3975;
3978 -> 3977;
3979 -> 3972;
3980 -> 3972;
3980 -> 3970;
3981 -> 3971;
3981 -> 3972;
3981 -> 3970;
3982 -> 3970;
3983 -> 3960;
3984 -> 3983;
3984 -> 3965;
3984 -> 3960;
3985 -> 3961;
3985 -> 3960;
3986 -> 3962;
3986 -> 3960;
3987 -> 3963;
3987 -> 3960;
3988 -> 3985;
3988 -> 3960;
3989 -> 3986;
3989 -> 3960;
3990 -> 3984;
3990 -> 3960;
3991 -> 3960;
3992 -> 3988;
3992 -> 3991;
3993 -> 3989;
3993 -> 3991;
3994 -> 3990;
3994 -> 3991;
3995 -> 3968;
3995 -> 3991;
3996 -> 3992;
3996 -> 3991;
3997 -> 3992;
3997 -> 3985;
3997 -> 3991;
3998 -> 3993;
3998 -> 3991;
3999 -> 3993;
3999 -> 3986;
3999 -> 3991;
4000 -> 3991;
4001 -> 3996;
4001 -> 4000;
4002 -> 3997;
4002 -> 4000;
4003 -> 3998;
4003 -> 4000;
4004 -> 3999;
4004 -> 4000;
4005 -> 3995;
4005 -> 4000;
4006 -> 4001;
4006 -> 4000;
4007 -> 4002;
4007 -> 4000;
4008 -> 4003;
4008 -> 4000;
4009 -> 4004;
4009 -> 4000;
4010 -> 4000;
4011 -> 4006;
4011 -> 4010;
4012 -> 4007;
4012 -> 4010;
4013 -> 4008;
4013 -> 4010;
4014 -> 4009;
4014 -> 4010;
4015 -> 4005;
4015 -> 4010;
4016 -> 4010;
4017 -> 4012;
4017 -> 4016;
4017 -> 4010;
4018 -> 4010;
4019 -> 4014;
4019 -> 4018;
4019 -> 4010;
4020 -> 4017;
4020 -> 4019;
4020 -> 4010;
4021 -> 4010;
4022 -> 4021;
4022 -> 4020;
4022 -> 4010;
4023 -> 4010;
4024 -> 4023;
4024 -> 4012;
4024 -> 4010;
4025 -> 4024;
4026 -> 4020;
4026 -> 4022;
4026 -> 4025;
4026 -> 4024;
4027 -> 4026;
4027 -> 4023;
4027 -> 4025;
4027 -> 4020;
4027 -> 4024;
4028 -> 4010;
4029 -> 4028;
4029 -> 4014;
4029 -> 4010;
4030 -> 4029;
4031 -> 4020;
4031 -> 4022;
4031 -> 4027;
4031 -> 4030;
4031 -> 4029;
4032 -> 4031;
4032 -> 4030;
4032 -> 4028;
4032 -> 4020;
4032 -> 4029;
4033 -> 4010;
4034 -> 4033;
4034 -> 4012;
4034 -> 4010;
4035 -> 4034;
4036 -> 4035;
4036 -> 4014;
4036 -> 4034;
4037 -> 4036;
4038 -> 4020;
4038 -> 4022;
4038 -> 4027;
4038 -> 4032;
4038 -> 4037;
4038 -> 4036;
4039 -> 4011;
4039 -> 4036;
4040 -> 4013;
4040 -> 4036;
4041 -> 4036;
4042 -> 4039;
4042 -> 4041;
4043 -> 4037;
4043 -> 4041;
4044 -> 4040;
4044 -> 4041;
4045 -> 4037;
4045 -> 4041;
4046 -> 4015;
4046 -> 4041;
4047 -> 4042;
4047 -> 3985;
4047 -> 4043;
4047 -> 4041;
4048 -> 4044;
4048 -> 3986;
4048 -> 4045;
4048 -> 4041;
4049 -> 4046;
4049 -> 0;
4049 -> 4047;
4049 -> 4048;
4049 -> 3985;
4049 -> 3986;
4049 -> 4041;
4050 -> 4038;
4050 -> 4049;
4050 -> 4036;
4051 -> 4036;
4052 -> 4020;
4052 -> 4022;
4052 -> 4027;
4052 -> 4032;
4052 -> 4051;
4052 -> 4035;
4052 -> 4036;
4053 -> 4036;
4054 -> 4020;
4054 -> 4022;
4054 -> 4027;
4054 -> 4032;
4054 -> 4033;
4054 -> 4053;
4054 -> 4036;
4055 -> 4050;
4055 -> 4036;
4056 -> 4052;
4056 -> 4036;
4057 -> 4055;
4057 -> 4056;
4057 -> 4036;
4058 -> 4054;
4058 -> 4036;
4059 -> 4057;
4059 -> 4058;
4059 -> 4036;
4060 -> 4059;
4060 -> 4033;
4060 -> 4035;
4060 -> 4020;
4060 -> 4036;
4061 -> 4020;
4061 -> 4010;
4062 -> 4002;
4062 -> 4000;
4063 -> 4004;
4063 -> 4000;
4064 -> 4000;
4065 -> 4062;
4065 -> 4064;
4065 -> 4000;
4066 -> 4063;
4066 -> 4064;
4066 -> 4000;
4067 -> 4065;
4067 -> 4066;
4067 -> 4000;
4068 -> 4061;
4068 -> 4020;
4068 -> 4022;
4068 -> 4027;
4068 -> 4032;
4068 -> 4060;
4068 -> 4062;
4068 -> 4063;
4068 -> 4067;
4069 -> 4067;
4070 -> 4061;
4070 -> 4020;
4070 -> 4022;
4070 -> 4027;
4070 -> 4032;
4070 -> 4060;
4070 -> 4069;
4070 -> 4063;
4070 -> 4067;
4071 -> 4061;
4071 -> 4020;
4071 -> 4022;
4071 -> 4027;
4071 -> 4032;
4071 -> 4060;
4071 -> 4062;
4071 -> 4063;
4071 -> 4070;
4072 -> 4070;
4073 -> 4062;
4073 -> 4072;
4074 -> 4063;
4074 -> 4072;
4075 -> 4072;
4076 -> 0;
4076 -> 4072;
4077 -> 4073;
4077 -> 4072;
4078 -> 4074;
4078 -> 4072;
4079 -> 4072;
4080 -> 4076;
4080 -> 4079;
4081 -> 4077;
4081 -> 4079;
4082 -> 4078;
4082 -> 4079;
4083 -> 4075;
4083 -> 4079;
4084 -> 4080;
4084 -> 4083;
4084 -> 4079;
4085 -> 4081;
4085 -> 4083;
4085 -> 4079;
4086 -> 4082;
4086 -> 4083;
4086 -> 4079;
4087 -> 4000;
4088 -> 4073;
4088 -> 4087;
4088 -> 4000;
4089 -> 4000;
4090 -> 4074;
4090 -> 4089;
4090 -> 4000;
4091 -> 4075;
4091 -> 4084;
4091 -> 4085;
4091 -> 4086;
4091 -> 3991;
4092 -> 4091;
4093 -> 4092;
4094 -> 3993;
4094 -> 3986;
4094 -> 4049;
4094 -> 4091;
4094 -> 4092;
4095 -> 3994;
4095 -> 4094;
4095 -> 3983;
4095 -> 4092;
4096 -> 3987;
4096 -> 4093;
4096 -> 3960;
4097 -> 3608;
4097 -> 4096;
4097 -> 3949;
4097 -> 3564;
4098 -> 3705;
4098 -> 3944;
4098 -> 3564;
4099 -> 3613;
4099 -> 3698;
4099 -> 3564;
4100 -> 3608;
4100 -> 4097;
4100 -> 3564;
4101 -> 3424;
4102 -> 2305;
4103 -> 2306;
4103 -> 2305;
4104 -> 3421;
4104 -> 2305;
4105 -> 2305;
4106 -> 4103;
4106 -> 4105;
4107 -> 4104;
4107 -> 4105;
4108 -> 4107;
4108 -> 4105;
4109 -> 4108;
4109 -> 3421;
4109 -> 3908;
4110 -> 4106;
4110 -> 4109;
4110 -> 3908;
4110 -> 4108;
4111 -> 4108;
4111 -> 4110;
4112 -> 4111;
4112 -> 4110;
4113 -> 2305;
4114 -> 2306;
4114 -> 2305;
4115 -> 204;
4115 -> 1;
4116 -> 1;
4117 -> 4115;
4117 -> 4116;
4118 -> 4117;
4118 -> 4116;
4119 -> 4116;
4120 -> 4118;
4120 -> 4119;
4121 -> 4119;
4122 -> 4120;
4122 -> 4121;
4122 -> 4119;
4123 -> 4119;
4123 -> 1;
4124 -> 1;
4125 -> 1;
4126 -> 4123;
4126 -> 4125;
4127 -> 4124;
4127 -> 4125;
4128 -> 4124;
4128 -> 4125;
4129 -> 4124;
4129 -> 4125;
4130 -> 4124;
4130 -> 4125;
4131 -> 4124;
4131 -> 4125;
4132 -> 4124;
4132 -> 4125;
4133 -> 4126;
4133 -> 4125;
4134 -> 4127;
4134 -> 4125;
4135 -> 4128;
4135 -> 4125;
4136 -> 4129;
4136 -> 4125;
4137 -> 0;
4137 -> 4125;
4138 -> 4130;
4138 -> 4125;
4139 -> 4131;
4139 -> 4125;
4140 -> 4132;
4140 -> 4125;
4141 -> 4125;
4142 -> 4133;
4142 -> 4141;
4143 -> 4134;
4143 -> 4141;
4144 -> 4135;
4144 -> 4141;
4145 -> 4136;
4145 -> 4141;
4146 -> 4137;
4146 -> 4141;
4147 -> 4138;
4147 -> 4141;
4148 -> 4139;
4148 -> 4141;
4149 -> 4140;
4149 -> 4141;
4150 -> 4142;
4150 -> 4141;
4151 -> 4146;
4151 -> 4141;
4152 -> 4143;
4152 -> 4141;
4153 -> 4141;
4154 -> 4151;
4154 -> 4153;
4155 -> 4152;
4155 -> 4153;
4156 -> 4154;
4156 -> 4153;
4157 -> 4153;
4158 -> 4156;
4158 -> 4157;
4159 -> 4158;
4159 -> 4157;
4160 -> 4159;
4161 -> 0;
4161 -> 4160;
4162 -> 4161;
4162 -> 4111;
4162 -> 4160;
4163 -> 4153;
4164 -> 4155;
4164 -> 4163;
4164 -> 4153;
4165 -> 4162;
4165 -> 4164;
4166 -> 4144;
4166 -> 4141;
4167 -> 4145;
4167 -> 4141;
4168 -> 4147;
4168 -> 4141;
4169 -> 4148;
4169 -> 4141;
4170 -> 4149;
4170 -> 4141;
4171 -> 4141;
4172 -> 4150;
4172 -> 4171;
4173 -> 4166;
4173 -> 4171;
4174 -> 4167;
4174 -> 4171;
4175 -> 4168;
4175 -> 4171;
4176 -> 4169;
4176 -> 4171;
4177 -> 4170;
4177 -> 4171;
4178 -> 4172;
4178 -> 4171;
4179 -> 4173;
4179 -> 4171;
4180 -> 4174;
4180 -> 4171;
4181 -> 4175;
4181 -> 4171;
4182 -> 4176;
4182 -> 4171;
4183 -> 4177;
4183 -> 4171;
4184 -> 4171;
4185 -> 4184;
4185 -> 4171;
4186 -> 4171;
4187 -> 4178;
4187 -> 4186;
4188 -> 4179;
4188 -> 4186;
4189 -> 4180;
4189 -> 4186;
4190 -> 4181;
4190 -> 4186;
4191 -> 4182;
4191 -> 4186;
4192 -> 4183;
4192 -> 4186;
4193 -> 4185;
4193 -> 4186;
4194 -> 4189;
4194 -> 4186;
4195 -> 4191;
4195 -> 4186;
4196 -> 4186;
4197 -> 4194;
4197 -> 4196;
4198 -> 4195;
4198 -> 4196;
4199 -> 4187;
4199 -> 4196;
4200 -> 4199;
4200 -> 4122;
4200 -> 4196;
4201 -> 4200;
4202 -> 4198;
4202 -> 4200;
4203 -> 4197;
4203 -> 4200;
4204 -> 4200;
4205 -> 4201;
4205 -> 4204;
4206 -> 4202;
4206 -> 4204;
4207 -> 4203;
4207 -> 4204;
4208 -> 4201;
4208 -> 4204;
4209 -> 4204;
4210 -> 4207;
4210 -> 4209;
4210 -> 4204;
4211 -> 209;
4211 -> 4210;
4212 -> 4205;
4212 -> 4204;
4213 -> 0;
4213 -> 4204;
4214 -> 4213;
4214 -> 4208;
4214 -> 4204;
4215 -> 4204;
4216 -> 4212;
4216 -> 4214;
4216 -> 4215;
4216 -> 4111;
4216 -> 4204;
4217 -> 4211;
4217 -> 4204;
4218 -> 4206;
4218 -> 4204;
4219 -> 4204;
4220 -> 4216;
4220 -> 4217;
4220 -> 4218;
4220 -> 4219;
4220 -> 4204;
4221 -> 4204;
4222 -> 4221;
4223 -> 4221;
4224 -> 4220;
4224 -> 4223;
4224 -> 4221;
4225 -> 4222;
4225 -> 4221;
4226 -> 4221;
4227 -> 4224;
4227 -> 4220;
4227 -> 4223;
4227 -> 4225;
4227 -> 4226;
4227 -> 4222;
4227 -> 4221;
4228 -> 4221;
4229 -> 4228;
4229 -> 4222;
4229 -> 4221;
4230 -> 4222;
4230 -> 4221;
4231 -> 4221;
4232 -> 4230;
4232 -> 4231;
4232 -> 4222;
4232 -> 4229;
4232 -> 4221;
4233 -> 4201;
4233 -> 4186;
4234 -> 4186;
4235 -> 4188;
4235 -> 4234;
4235 -> 4186;
4236 -> 4233;
4236 -> 4235;
4237 -> 4235;
4238 -> 0;
4238 -> 4186;
4239 -> 4193;
4239 -> 4186;
4240 -> 4220;
4240 -> 4186;
4241 -> 4186;
4242 -> 4240;
4242 -> 4241;
4243 -> 0;
4243 -> 4241;
4244 -> 4243;
4245 -> 4186;
4246 -> 4186;
4247 -> 4246;
4248 -> 4186;
4249 -> 4220;
4249 -> 4248;
4250 -> 4248;
4251 -> 0;
4251 -> 4248;
4252 -> 0;
4252 -> 1;
4253 -> 1;
4254 -> 4252;
4254 -> 4253;
4255 -> 4124;
4255 -> 4253;
4256 -> 4124;
4256 -> 4253;
4257 -> 4124;
4257 -> 4253;
4258 -> 4124;
4258 -> 4253;
4259 -> 4124;
4259 -> 4253;
4260 -> 4124;
4260 -> 4253;
4261 -> 4254;
4261 -> 4253;
4262 -> 4255;
4262 -> 4253;
4263 -> 4256;
4263 -> 4253;
4264 -> 4257;
4264 -> 4253;
4265 -> 4258;
4265 -> 4253;
4266 -> 4259;
4266 -> 4253;
4267 -> 4260;
4267 -> 4253;
4268 -> 4253;
4269 -> 4261;
4269 -> 4268;
4270 -> 4262;
4270 -> 4268;
4271 -> 4263;
4271 -> 4268;
4272 -> 4264;
4272 -> 4268;
4273 -> 4265;
4273 -> 4268;
4274 -> 4266;
4274 -> 4268;
4275 -> 4267;
4275 -> 4268;
4276 -> 4269;
4276 -> 4268;
4277 -> 4269;
4277 -> 4268;
4278 -> 4268;
4279 -> 4270;
4279 -> 4268;
4280 -> 4271;
4280 -> 4268;
4281 -> 4272;
4281 -> 4268;
4282 -> 4273;
4282 -> 4268;
4283 -> 4274;
4283 -> 4268;
4284 -> 4275;
4284 -> 4268;
4285 -> 4268;
4286 -> 4277;
4286 -> 4285;
4287 -> 4278;
4287 -> 4285;
4288 -> 4279;
4288 -> 4285;
4289 -> 4280;
4289 -> 4285;
4290 -> 4281;
4290 -> 4285;
4291 -> 4282;
4291 -> 4285;
4292 -> 4283;
4292 -> 4285;
4293 -> 4277;
4293 -> 4285;
4294 -> 4284;
4294 -> 4285;
4295 -> 4278;
4295 -> 4285;
4296 -> 4278;
4296 -> 4285;
4297 -> 4278;
4297 -> 4285;
4298 -> 4297;
4298 -> 4285;
4299 -> 4297;
4299 -> 4285;
4300 -> 4297;
4300 -> 4285;
4301 -> 4297;
4301 -> 4285;
4302 -> 4297;
4302 -> 4285;
4303 -> 4297;
4303 -> 4285;
4304 -> 4297;
4304 -> 4285;
4305 -> 4297;
4305 -> 4285;
4306 -> 4297;
4306 -> 4285;
4307 -> 4297;
4307 -> 4285;
4308 -> 4297;
4308 -> 4285;
4309 -> 4297;
4309 -> 4285;
4310 -> 4297;
4310 -> 4285;
4311 -> 4297;
4311 -> 4285;
4312 -> 4297;
4312 -> 4285;
4313 -> 4286;
4313 -> 4297;
4313 -> 4285;
4314 -> 4287;
4314 -> 4297;
4314 -> 4285;
4315 -> 4288;
4315 -> 4297;
4315 -> 4285;
4316 -> 4289;
4316 -> 4297;
4316 -> 4285;
4317 -> 4290;
4317 -> 4297;
4317 -> 4285;
4318 -> 4291;
4318 -> 4297;
4318 -> 4285;
4319 -> 4292;
4319 -> 4297;
4319 -> 4285;
4320 -> 4293;
4320 -> 4285;
4321 -> 4320;
4321 -> 4297;
4321 -> 4285;
4322 -> 4294;
4322 -> 4297;
4322 -> 4285;
4323 -> 4295;
4323 -> 4297;
4323 -> 4285;
4324 -> 4296;
4324 -> 4297;
4324 -> 4285;
4325 -> 4278;
4325 -> 4253;
4326 -> 4325;
4326 -> 1;
4327 -> 4124;
4327 -> 1;
4328 -> 1;
4329 -> 4124;
4329 -> 4328;
4330 -> 4326;
4330 -> 4328;
4331 -> 4330;
4331 -> 4313;
4331 -> 4328;
4332 -> 4330;
4332 -> 4314;
4332 -> 4328;
4333 -> 4330;
4333 -> 4315;
4333 -> 4328;
4334 -> 4329;
4334 -> 4328;
4335 -> 4330;
4335 -> 4317;
4335 -> 4328;
4336 -> 4330;
4336 -> 4318;
4336 -> 4328;
4337 -> 4328;
4338 -> 4330;
4338 -> 4321;
4338 -> 4328;
4339 -> 4330;
4339 -> 4322;
4339 -> 4328;
4340 -> 4330;
4340 -> 4323;
4340 -> 4328;
4341 -> 4330;
4341 -> 4324;
4341 -> 4328;
4342 -> 4328;
4343 -> 4331;
4343 -> 4342;
4344 -> 4332;
4344 -> 4342;
4345 -> 4333;
4345 -> 4342;
4346 -> 4334;
4346 -> 4342;
4347 -> 4335;
4347 -> 4342;
4348 -> 4336;
4348 -> 4342;
4349 -> 4337;
4349 -> 4342;
4350 -> 4338;
4350 -> 4342;
4351 -> 4339;
4351 -> 4342;
4352 -> 4340;
4352 -> 4342;
4353 -> 4341;
4353 -> 4342;
4354 -> 4337;
4354 -> 4342;
4355 -> 4354;
4355 -> 4342;
4356 -> 4354;
4356 -> 4342;
4357 -> 4354;
4357 -> 4342;
4358 -> 4354;
4358 -> 4342;
4359 -> 4354;
4359 -> 4342;
4360 -> 4354;
4360 -> 4342;
4361 -> 4354;
4361 -> 4342;
4362 -> 4354;
4362 -> 4342;
4363 -> 4354;
4363 -> 4342;
4364 -> 4354;
4364 -> 4342;
4365 -> 4354;
4365 -> 4342;
4366 -> 4354;
4366 -> 4342;
4367 -> 4354;
4367 -> 4342;
4368 -> 4354;
4368 -> 4342;
4369 -> 4354;
4369 -> 4342;
4370 -> 4346;
4370 -> 4354;
4370 -> 4342;
4371 -> 4349;
4371 -> 4354;
4371 -> 4342;
4372 -> 4337;
4372 -> 1;
4373 -> 1;
4374 -> 4124;
4374 -> 4373;
4375 -> 4124;
4375 -> 4373;
4376 -> 4372;
4376 -> 4373;
4377 -> 4376;
4377 -> 4343;
4377 -> 4373;
4378 -> 4376;
4378 -> 4344;
4378 -> 4373;
4379 -> 4376;
4379 -> 4345;
4379 -> 4373;
4380 -> 4376;
4380 -> 4370;
4380 -> 4373;
4381 -> 4373;
4382 -> 4374;
4382 -> 4381;
4382 -> 4373;
4383 -> 4375;
4383 -> 4381;
4383 -> 4373;
4384 -> 4382;
4384 -> 4383;
4384 -> 4373;
4385 -> 4376;
4385 -> 4348;
4385 -> 4373;
4386 -> 4376;
4386 -> 4371;
4386 -> 4373;
4387 -> 4376;
4387 -> 4350;
4387 -> 4373;
4388 -> 4376;
4388 -> 4351;
4388 -> 4373;
4389 -> 4376;
4389 -> 4352;
4389 -> 4373;
4390 -> 4376;
4390 -> 4353;
4390 -> 4373;
4391 -> 4373;
4392 -> 4377;
4392 -> 4391;
4393 -> 4378;
4393 -> 4391;
4394 -> 4379;
4394 -> 4391;
4395 -> 4380;
4395 -> 4391;
4396 -> 4384;
4396 -> 4391;
4397 -> 4385;
4397 -> 4391;
4398 -> 4386;
4398 -> 4391;
4399 -> 4387;
4399 -> 4391;
4400 -> 4388;
4400 -> 4391;
4401 -> 4389;
4401 -> 4391;
4402 -> 4390;
4402 -> 4391;
4403 -> 4381;
4403 -> 4391;
4404 -> 4403;
4404 -> 4391;
4405 -> 4403;
4405 -> 4391;
4406 -> 4403;
4406 -> 4391;
4407 -> 4403;
4407 -> 4391;
4408 -> 4403;
4408 -> 4391;
4409 -> 4403;
4409 -> 4391;
4410 -> 4403;
4410 -> 4391;
4411 -> 4403;
4411 -> 4391;
4412 -> 4403;
4412 -> 4391;
4413 -> 4403;
4413 -> 4391;
4414 -> 4403;
4414 -> 4391;
4415 -> 4403;
4415 -> 4391;
4416 -> 4403;
4416 -> 4391;
4417 -> 4403;
4417 -> 4391;
4418 -> 4403;
4418 -> 4391;
4419 -> 4396;
4419 -> 4403;
4419 -> 4391;
4420 -> 4381;
4420 -> 1;
4421 -> 4420;
4421 -> 4124;
4421 -> 1;
4422 -> 1;
4423 -> 4220;
4423 -> 4422;
4424 -> 4124;
4424 -> 4422;
4425 -> 4422;
4426 -> 4425;
4427 -> 4425;
4428 -> 4423;
4429 -> 4423;
4429 -> 4425;
4430 -> 4423;
4430 -> 4425;
4431 -> 4423;
4431 -> 4425;
4432 -> 4425;
4433 -> 4430;
4433 -> 4432;
4433 -> 4425;
4434 -> 4431;
4434 -> 4432;
4434 -> 4425;
4435 -> 4433;
4435 -> 4434;
4435 -> 4425;
4436 -> 4423;
4436 -> 4425;
4437 -> 4425;
4438 -> 4429;
4438 -> 4437;
4439 -> 4430;
4439 -> 4437;
4440 -> 4431;
4440 -> 4437;
4441 -> 4436;
4441 -> 4437;
4442 -> 4437;
4443 -> 4440;
4443 -> 4442;
4443 -> 4437;
4444 -> 4439;
4444 -> 4442;
4444 -> 4437;
4445 -> 4443;
4445 -> 4444;
4445 -> 4437;
4446 -> 4437;
4447 -> 4446;
4447 -> 4437;
4448 -> 4437;
4449 -> 4447;
4449 -> 4448;
4450 -> 4441;
4450 -> 4448;
4451 -> 4448;
4452 -> 4448;
4453 -> 4423;
4454 -> 4423;
4454 -> 4448;
4455 -> 4437;
4456 -> 4423;
4456 -> 4455;
4456 -> 4437;
4457 -> 4454;
4457 -> 4437;
4458 -> 4429;
4459 -> 4429;
4459 -> 4448;
4460 -> 4429;
4460 -> 4455;
4460 -> 4437;
4461 -> 4459;
4461 -> 4437;
4462 -> 4425;
4463 -> 4425;
4464 -> 4425;
4465 -> 4464;
4466 -> 4429;
4466 -> 4465;
4466 -> 4464;
4467 -> 4464;
4468 -> 4467;
4469 -> 4468;
4469 -> 4467;
4470 -> 4468;
4470 -> 4467;
4471 -> 4468;
4471 -> 4467;
4472 -> 4468;
4472 -> 4467;
4473 -> 4464;
4474 -> 4473;
4475 -> 4429;
4475 -> 4474;
4475 -> 4473;
4476 -> 4464;
4477 -> 4464;
4478 -> 4477;
4479 -> 4478;
4480 -> 2586;
4480 -> 4479;
4481 -> 4479;
4482 -> 4480;
4482 -> 4481;
4483 -> 4481;
4484 -> 4481;
4485 -> 4481;
4486 -> 4484;
4486 -> 4485;
4487 -> 4484;
4487 -> 4479;
4488 -> 4479;
4489 -> 4479;
4490 -> 4487;
4490 -> 4479;
4491 -> 4488;
4491 -> 4479;
4492 -> 4479;
4493 -> 4429;
4494 -> 4493;
4494 -> 4429;
4495 -> 4429;
4496 -> 4429;
4496 -> 4495;
4497 -> 4496;
4497 -> 4429;
4497 -> 4495;
4498 -> 4497;
4498 -> 4429;
4499 -> 4429;
4500 -> 4429;
4501 -> 4429;
4502 -> 4429;
4503 -> 4429;
4504 -> 4429;
4505 -> 4429;
4506 -> 4429;
4507 -> 4423;
4507 -> 4425;
4508 -> 4423;
4508 -> 4425;
4509 -> 4425;
4510 -> 4507;
4510 -> 4509;
4511 -> 4508;
4511 -> 4509;
4512 -> 4509;
4513 -> 4423;
4513 -> 4512;
4513 -> 4509;
4514 -> 4509;
4515 -> 4510;
4515 -> 4511;
4515 -> 4509;
4516 -> 4509;
4517 -> 4423;
4517 -> 4516;
4518 -> 4510;
4518 -> 4516;
4519 -> 4515;
4519 -> 4516;
4520 -> 4517;
4520 -> 4429;
4521 -> 4520;
4521 -> 4429;
4522 -> 4521;
4522 -> 4429;
4523 -> 4429;
4524 -> 4522;
4524 -> 4429;
4525 -> 4429;
4526 -> 4524;
4526 -> 4429;
4527 -> 4523;
4527 -> 4429;
4528 -> 4429;
4529 -> 4429;
4530 -> 4509;
4531 -> 4429;
4532 -> 4429;
4533 -> 4531;
4533 -> 4429;
4534 -> 4532;
4534 -> 4429;
4535 -> 4429;
4536 -> 4429;
4536 -> 0;
4537 -> 4429;
4538 -> 4533;
4538 -> 4429;
4539 -> 4534;
4539 -> 4429;
4540 -> 4429;
4541 -> 4429;
4541 -> 0;
4542 -> 4429;
4542 -> 0;
4543 -> 4539;
4543 -> 4429;
4544 -> 4543;
4544 -> 4429;
4545 -> 4429;
4546 -> 4538;
4546 -> 4429;
4547 -> 4540;
4547 -> 4429;
4548 -> 4429;
4549 -> 4545;
4549 -> 4548;
4549 -> 4429;
4550 -> 4429;
4551 -> 4429;
4552 -> 4429;
4553 -> 4550;
4553 -> 4552;
4553 -> 4429;
4554 -> 4429;
4555 -> 4554;
4555 -> 4429;
4556 -> 4543;
4556 -> 4555;
4557 -> 4425;
4558 -> 4429;
4558 -> 4557;
4559 -> 4429;
4559 -> 4557;
4560 -> 4507;
4560 -> 4557;
4561 -> 4423;
4561 -> 4557;
4562 -> 4557;
4563 -> 4429;
4563 -> 4562;
4564 -> 4563;
4564 -> 4429;
4564 -> 4562;
4565 -> 4564;
4565 -> 0;
4565 -> 4562;
4566 -> 4565;
4566 -> 4557;
4567 -> 4425;
4568 -> 4423;
4568 -> 4425;
4569 -> 4425;
4570 -> 4429;
4570 -> 4569;
4571 -> 4568;
4571 -> 4569;
4572 -> 4569;
4573 -> 4429;
4573 -> 4572;
4573 -> 4569;
4574 -> 4569;
4575 -> 4571;
4575 -> 4574;
4576 -> 4570;
4576 -> 4574;
4577 -> 4574;
4578 -> 4429;
4578 -> 4577;
4578 -> 4574;
4579 -> 4570;
4579 -> 4577;
4579 -> 4574;
4580 -> 4570;
4580 -> 4572;
4580 -> 4569;
4581 -> 4423;
4581 -> 4425;
4582 -> 4423;
4582 -> 4425;
4583 -> 4423;
4583 -> 4425;
4584 -> 4423;
4584 -> 4425;
4585 -> 4423;
4585 -> 4425;
4586 -> 4425;
4587 -> 4581;
4587 -> 4570;
4587 -> 4425;
4588 -> 4425;
4589 -> 4582;
4589 -> 4570;
4589 -> 4425;
4590 -> 4586;
4590 -> 4425;
4591 -> 4588;
4591 -> 4425;
4592 -> 4425;
4593 -> 4425;
4594 -> 4425;
4595 -> 4592;
4595 -> 4594;
4596 -> 4593;
4596 -> 4594;
4597 -> 4595;
4597 -> 4594;
4598 -> 4596;
4598 -> 4594;
4599 -> 4594;
4600 -> 4597;
4600 -> 4599;
4601 -> 4598;
4601 -> 4599;
4602 -> 4423;
4602 -> 4599;
4603 -> 4423;
4603 -> 4599;
4604 -> 4423;
4604 -> 4599;
4605 -> 4423;
4605 -> 4599;
4606 -> 4599;
4607 -> 4423;
4607 -> 4606;
4607 -> 4599;
4608 -> 4599;
4609 -> 4601;
4609 -> 4608;
4609 -> 4599;
4610 -> 4599;
4611 -> 4601;
4611 -> 4610;
4611 -> 4599;
4612 -> 4424;
4612 -> 4422;
4613 -> 4422;
4614 -> 4612;
4614 -> 4613;
4615 -> 4614;
4615 -> 4613;
4616 -> 4613;
4617 -> 4615;
4617 -> 4616;
4618 -> 4617;
4618 -> 4616;
4619 -> 4616;
4620 -> 4616;
4621 -> 4618;
4621 -> 4620;
4622 -> 4619;
4622 -> 4620;
4623 -> 4620;
4624 -> 4621;
4624 -> 4623;
4624 -> 4620;
4625 -> 4621;
4625 -> 4620;
4626 -> 4625;
4626 -> 4124;
4626 -> 4421;
4626 -> 4392;
4626 -> 4393;
4626 -> 4402;
4626 -> 4394;
4626 -> 4395;
4626 -> 4419;
4626 -> 4398;
4626 -> 4399;
4626 -> 4412;
4626 -> 4400;
4626 -> 4401;
4626 -> 4397;
4626 -> 4416;
4626 -> 4417;
4626 -> 4418;
4626 -> 4384;
4626 -> 4327;
4626 -> 4277;
4626 -> 4620;
4627 -> 4620;
4628 -> 4625;
4628 -> 4627;
4628 -> 4124;
4628 -> 4421;
4628 -> 4392;
4628 -> 4393;
4628 -> 4402;
4628 -> 4394;
4628 -> 4395;
4628 -> 4419;
4628 -> 4398;
4628 -> 4399;
4628 -> 4412;
4628 -> 4400;
4628 -> 4401;
4628 -> 4397;
4628 -> 4416;
4628 -> 4417;
4628 -> 4418;
4628 -> 4384;
4628 -> 4327;
4628 -> 4277;
4628 -> 4620;
4629 -> 4628;
4629 -> 4627;
4630 -> 4629;
4630 -> 4628;
4630 -> 4627;
4631 -> 4621;
4631 -> 4620;
4632 -> 4631;
4632 -> 4630;
4632 -> 4620;
4633 -> 4620;
4634 -> 4631;
4634 -> 4633;
4634 -> 4630;
4634 -> 4620;
4635 -> 4634;
4635 -> 4633;
4636 -> 4635;
4636 -> 4634;
4636 -> 4633;
4637 -> 4622;
4637 -> 4630;
4637 -> 4636;
4637 -> 4620;
4638 -> 4570;
4638 -> 4637;
4638 -> 4620;
4639 -> 4620;
4640 -> 4638;
4640 -> 4639;
4641 -> 4638;
4641 -> 4639;
4642 -> 4638;
4642 -> 4639;
4643 -> 4638;
4643 -> 4639;
4644 -> 4638;
4644 -> 4639;
4645 -> 4638;
4645 -> 4639;
4646 -> 4638;
4646 -> 4639;
4647 -> 4638;
4647 -> 4639;
4648 -> 4638;
4648 -> 4639;
4649 -> 4638;
4649 -> 4639;
4650 -> 4639;
4651 -> 4639;
4652 -> 0;
4652 -> 4639;
4653 -> 4638;
4654 -> 4621;
4654 -> 4620;
4655 -> 4654;
4655 -> 4636;
4655 -> 4620;
4656 -> 4655;
4657 -> 4656;
4658 -> 4638;
4658 -> 4657;
4658 -> 4656;
4659 -> 4638;
4659 -> 4656;
4660 -> 4638;
4660 -> 4656;
4661 -> 4638;
4661 -> 4656;
4662 -> 4638;
4662 -> 4661;
4663 -> 4656;
4664 -> 4638;
4664 -> 4663;
4664 -> 4656;
4665 -> 4664;
4666 -> 4638;
4666 -> 4665;
4667 -> 4656;
4668 -> 4638;
4668 -> 4667;
4668 -> 4656;
4669 -> 4656;
4670 -> 4638;
4670 -> 4669;
4670 -> 4656;
4671 -> 4638;
4671 -> 4656;
4672 -> 4656;
4673 -> 4638;
4674 -> 4638;
4674 -> 4656;
4675 -> 4656;
4676 -> 4655;
4677 -> 4620;
4678 -> 4638;
4678 -> 4677;
4678 -> 4620;
4679 -> 4620;
4680 -> 4621;
4680 -> 4620;
4681 -> 4620;
4682 -> 4680;
4682 -> 4681;
4683 -> 4681;
4684 -> 4681;
4685 -> 4638;
4685 -> 4681;
4686 -> 4685;
4686 -> 4681;
4687 -> 4682;
4687 -> 4681;
4688 -> 4681;
4689 -> 4682;
4689 -> 4681;
4690 -> 4681;
4691 -> 4682;
4691 -> 4681;
4692 -> 4681;
4693 -> 4691;
4693 -> 4692;
4694 -> 3590;
4694 -> 4692;
4695 -> 4692;
4696 -> 4693;
4696 -> 4692;
4697 -> 4696;
4697 -> 4638;
4697 -> 4692;
4698 -> 4697;
4699 -> 4697;
4700 -> 4695;
4700 -> 4699;
4700 -> 4697;
4701 -> 4697;
4702 -> 4692;
4703 -> 4702;
4703 -> 4681;
4704 -> 4703;
4705 -> 4704;
4706 -> 3590;
4706 -> 4704;
4707 -> 4681;
4708 -> 4707;
4708 -> 4681;
4709 -> 4681;
4710 -> 4681;
4711 -> 4707;
4711 -> 4710;
4711 -> 4708;
4711 -> 4681;
4712 -> 4681;
4713 -> 4682;
4713 -> 4681;
4714 -> 4686;
4714 -> 4638;
4715 -> 4638;
4716 -> 4715;
4716 -> 4714;
4716 -> 4638;
4717 -> 4638;
4718 -> 4638;
4719 -> 4717;
4719 -> 4718;
4719 -> 4638;
4720 -> 4638;
4721 -> 4638;
4721 -> 4720;
4722 -> 4717;
4722 -> 4721;
4722 -> 4719;
4722 -> 4720;
4723 -> 4720;
4724 -> 4717;
4724 -> 4723;
4724 -> 4722;
4724 -> 4720;
4725 -> 4638;
4725 -> 4720;
4726 -> 4717;
4726 -> 4725;
4726 -> 4724;
4726 -> 4720;
4727 -> 4638;
4728 -> 4727;
4729 -> 4728;
4730 -> 4717;
4730 -> 4729;
4730 -> 4726;
4730 -> 4728;
4731 -> 4638;
4731 -> 4728;
4732 -> 4717;
4732 -> 4731;
4732 -> 4730;
4732 -> 4728;
4733 -> 4727;
4734 -> 4717;
4734 -> 4733;
4734 -> 4732;
4734 -> 4727;
4735 -> 4638;
4736 -> 4638;
4737 -> 4717;
4737 -> 4736;
4737 -> 4734;
4737 -> 4638;
4738 -> 4638;
4739 -> 4717;
4739 -> 4738;
4739 -> 4737;
4739 -> 4638;
4740 -> 4638;
4741 -> 4717;
4741 -> 4740;
4741 -> 4739;
4741 -> 4638;
4742 -> 4638;
4743 -> 4717;
4743 -> 4742;
4743 -> 4741;
4743 -> 4638;
4744 -> 4638;
4745 -> 4717;
4745 -> 4744;
4745 -> 4743;
4745 -> 4638;
4746 -> 4638;
4747 -> 4746;
4748 -> 4717;
4748 -> 4747;
4748 -> 4745;
4748 -> 4746;
4749 -> 4638;
4750 -> 4717;
4750 -> 4749;
4750 -> 4748;
4750 -> 4638;
4751 -> 4638;
4752 -> 4751;
4753 -> 4717;
4753 -> 4752;
4753 -> 4750;
4753 -> 4751;
4754 -> 4751;
4755 -> 4717;
4755 -> 4754;
4755 -> 4753;
4755 -> 4751;
4756 -> 4751;
4757 -> 4717;
4757 -> 4756;
4757 -> 4755;
4757 -> 4751;
4758 -> 4751;
4759 -> 4717;
4759 -> 4758;
4759 -> 4757;
4759 -> 4751;
4760 -> 4751;
4761 -> 4717;
4761 -> 4760;
4761 -> 4759;
4761 -> 4751;
4762 -> 4638;
4763 -> 4638;
4764 -> 4638;
4765 -> 4638;
4766 -> 4717;
4766 -> 4761;
4766 -> 4638;
4767 -> 4766;
4767 -> 4638;
4768 -> 4716;
4768 -> 4767;
4768 -> 4638;
4769 -> 4712;
4769 -> 4768;
4769 -> 4638;
4770 -> 4707;
4770 -> 4681;
4771 -> 4712;
4771 -> 4681;
4772 -> 4681;
4773 -> 4770;
4773 -> 4772;
4774 -> 4771;
4774 -> 4772;
4775 -> 4774;
4775 -> 4769;
4775 -> 4772;
4776 -> 4772;
4777 -> 4776;
4777 -> 4775;
4777 -> 4772;
4778 -> 4774;
4778 -> 4776;
4778 -> 4769;
4778 -> 4777;
4779 -> 4773;
4779 -> 4778;
4779 -> 4711;
4779 -> 4777;
4780 -> 4777;
4781 -> 4773;
4781 -> 4779;
4781 -> 4777;
4782 -> 4681;
4783 -> 4681;
4784 -> 4707;
4784 -> 4783;
4784 -> 4781;
4784 -> 4681;
4785 -> 4681;
4786 -> 4681;
4787 -> 4638;
4787 -> 4786;
4788 -> 4786;
4789 -> 4638;
4789 -> 4788;
4789 -> 4786;
4790 -> 4786;
4791 -> 4638;
4791 -> 4790;
4791 -> 4786;
4792 -> 4638;
4792 -> 4786;
4793 -> 4786;
4794 -> 4792;
4794 -> 4793;
4794 -> 4786;
4795 -> 4638;
4796 -> 4638;
4797 -> 4707;
4797 -> 4638;
4798 -> 4686;
4798 -> 4638;
4799 -> 4638;
4800 -> 4797;
4800 -> 4799;
4801 -> 4798;
4801 -> 4799;
4802 -> 4799;
4803 -> 4802;
4803 -> 4801;
4803 -> 4799;
4804 -> 4800;
4804 -> 4802;
4804 -> 4803;
4804 -> 4784;
4804 -> 4799;
4805 -> 4638;
4806 -> 4638;
4807 -> 4707;
4807 -> 4806;
4807 -> 4804;
4807 -> 4638;
4808 -> 4707;
4808 -> 4638;
4809 -> 4686;
4809 -> 4638;
4810 -> 4638;
4811 -> 4808;
4811 -> 4810;
4812 -> 4809;
4812 -> 4810;
4813 -> 4810;
4814 -> 4813;
4814 -> 4812;
4814 -> 4810;
4815 -> 4811;
4815 -> 4813;
4815 -> 4814;
4815 -> 4807;
4815 -> 4810;
4816 -> 4638;
4817 -> 4638;
4818 -> 4707;
4818 -> 4817;
4818 -> 4815;
4818 -> 4638;
4819 -> 4638;
4820 -> 4638;
4821 -> 4638;
4822 -> 4638;
4823 -> 4638;
4824 -> 4638;
4825 -> 4638;
4826 -> 4638;
4827 -> 4638;
4828 -> 4638;
4829 -> 4638;
4830 -> 4638;
4831 -> 4638;
4832 -> 4638;
4833 -> 4638;
4834 -> 4638;
4835 -> 4638;
4835 -> 4834;
4836 -> 4638;
4837 -> 4836;
4838 -> 4638;
4838 -> 4837;
4839 -> 4638;
4840 -> 4638;
4841 -> 4638;
4842 -> 4638;
4843 -> 4785;
4843 -> 4768;
4843 -> 4638;
4844 -> 4681;
4845 -> 4638;
4845 -> 4844;
4845 -> 4681;
4846 -> 4707;
4846 -> 4818;
4846 -> 4845;
4847 -> 4681;
4848 -> 4707;
4848 -> 4847;
4848 -> 4846;
4848 -> 4681;
4849 -> 4712;
4849 -> 4681;
4850 -> 4785;
4850 -> 4681;
4851 -> 0;
4851 -> 4681;
4852 -> 4681;
4853 -> 4681;
4854 -> 4849;
4854 -> 4853;
4855 -> 4850;
4855 -> 4853;
4856 -> 4851;
4856 -> 4853;
4857 -> 4852;
4857 -> 4853;
4858 -> 4852;
4858 -> 4853;
4859 -> 4853;
4860 -> 4857;
4860 -> 4859;
4860 -> 4853;
4861 -> 4860;
4861 -> 4853;
4862 -> 3968;
4862 -> 4861;
4863 -> 4853;
4864 -> 4863;
4864 -> 4858;
4864 -> 4853;
4865 -> 4854;
4865 -> 4853;
4866 -> 4855;
4866 -> 4853;
4867 -> 4856;
4867 -> 4853;
4868 -> 4865;
4868 -> 4853;
4869 -> 4866;
4869 -> 4853;
4870 -> 4864;
4870 -> 4853;
4871 -> 4853;
4872 -> 4868;
4872 -> 4871;
4873 -> 4869;
4873 -> 4871;
4874 -> 4870;
4874 -> 4871;
4875 -> 4862;
4875 -> 4871;
4876 -> 4872;
4876 -> 4871;
4877 -> 4872;
4877 -> 4865;
4877 -> 4871;
4878 -> 4873;
4878 -> 4871;
4879 -> 4873;
4879 -> 4866;
4879 -> 4871;
4880 -> 4871;
4881 -> 4876;
4881 -> 4880;
4882 -> 4877;
4882 -> 4880;
4883 -> 4878;
4883 -> 4880;
4884 -> 4879;
4884 -> 4880;
4885 -> 4875;
4885 -> 4880;
4886 -> 4881;
4886 -> 4880;
4887 -> 4882;
4887 -> 4880;
4888 -> 4883;
4888 -> 4880;
4889 -> 4884;
4889 -> 4880;
4890 -> 4880;
4891 -> 4886;
4891 -> 4890;
4892 -> 4887;
4892 -> 4890;
4893 -> 4888;
4893 -> 4890;
4894 -> 4889;
4894 -> 4890;
4895 -> 4885;
4895 -> 4890;
4896 -> 4890;
4897 -> 4892;
4897 -> 4896;
4897 -> 4890;
4898 -> 4890;
4899 -> 4894;
4899 -> 4898;
4899 -> 4890;
4900 -> 4897;
4900 -> 4899;
4900 -> 4890;
4901 -> 4890;
4902 -> 4901;
4902 -> 4900;
4902 -> 4890;
4903 -> 4890;
4904 -> 4903;
4904 -> 4892;
4904 -> 4890;
4905 -> 4904;
4906 -> 4900;
4906 -> 4902;
4906 -> 4905;
4906 -> 4904;
4907 -> 4906;
4907 -> 4903;
4907 -> 4905;
4907 -> 4900;
4907 -> 4904;
4908 -> 4890;
4909 -> 4908;
4909 -> 4894;
4909 -> 4890;
4910 -> 4909;
4911 -> 4900;
4911 -> 4902;
4911 -> 4907;
4911 -> 4910;
4911 -> 4909;
4912 -> 4911;
4912 -> 4910;
4912 -> 4908;
4912 -> 4900;
4912 -> 4909;
4913 -> 4890;
4914 -> 4913;
4914 -> 4892;
4914 -> 4890;
4915 -> 4914;
4916 -> 4915;
4916 -> 4894;
4916 -> 4914;
4917 -> 4916;
4918 -> 4900;
4918 -> 4902;
4918 -> 4907;
4918 -> 4912;
4918 -> 4917;
4918 -> 4916;
4919 -> 4891;
4919 -> 4916;
4920 -> 4893;
4920 -> 4916;
4921 -> 4916;
4922 -> 4919;
4922 -> 4921;
4923 -> 4917;
4923 -> 4921;
4924 -> 4920;
4924 -> 4921;
4925 -> 4917;
4925 -> 4921;
4926 -> 4895;
4926 -> 4921;
4927 -> 4922;
4927 -> 4865;
4927 -> 4923;
4927 -> 4921;
4928 -> 4924;
4928 -> 4866;
4928 -> 4925;
4928 -> 4921;
4929 -> 4926;
4929 -> 0;
4929 -> 4927;
4929 -> 4928;
4929 -> 4865;
4929 -> 4866;
4929 -> 4921;
4930 -> 4918;
4930 -> 4929;
4930 -> 4916;
4931 -> 4916;
4932 -> 4900;
4932 -> 4902;
4932 -> 4907;
4932 -> 4912;
4932 -> 4931;
4932 -> 4915;
4932 -> 4916;
4933 -> 4916;
4934 -> 4900;
4934 -> 4902;
4934 -> 4907;
4934 -> 4912;
4934 -> 4913;
4934 -> 4933;
4934 -> 4916;
4935 -> 4930;
4935 -> 4916;
4936 -> 4932;
4936 -> 4916;
4937 -> 4935;
4937 -> 4936;
4937 -> 4916;
4938 -> 4934;
4938 -> 4916;
4939 -> 4937;
4939 -> 4938;
4939 -> 4916;
4940 -> 4939;
4940 -> 4913;
4940 -> 4915;
4940 -> 4900;
4940 -> 4916;
4941 -> 4900;
4941 -> 4890;
4942 -> 4882;
4942 -> 4880;
4943 -> 4884;
4943 -> 4880;
4944 -> 4880;
4945 -> 4942;
4945 -> 4944;
4945 -> 4880;
4946 -> 4943;
4946 -> 4944;
4946 -> 4880;
4947 -> 4945;
4947 -> 4946;
4947 -> 4880;
4948 -> 4941;
4948 -> 4900;
4948 -> 4902;
4948 -> 4907;
4948 -> 4912;
4948 -> 4940;
4948 -> 4942;
4948 -> 4943;
4948 -> 4947;
4949 -> 4947;
4950 -> 4941;
4950 -> 4900;
4950 -> 4902;
4950 -> 4907;
4950 -> 4912;
4950 -> 4940;
4950 -> 4949;
4950 -> 4943;
4950 -> 4947;
4951 -> 4941;
4951 -> 4900;
4951 -> 4902;
4951 -> 4907;
4951 -> 4912;
4951 -> 4940;
4951 -> 4942;
4951 -> 4943;
4951 -> 4950;
4952 -> 4950;
4953 -> 4942;
4953 -> 4952;
4954 -> 4943;
4954 -> 4952;
4955 -> 4952;
4956 -> 0;
4956 -> 4952;
4957 -> 4953;
4957 -> 4952;
4958 -> 4954;
4958 -> 4952;
4959 -> 4952;
4960 -> 4956;
4960 -> 4959;
4961 -> 4957;
4961 -> 4959;
4962 -> 4958;
4962 -> 4959;
4963 -> 4955;
4963 -> 4959;
4964 -> 4960;
4964 -> 4963;
4964 -> 4959;
4965 -> 4961;
4965 -> 4963;
4965 -> 4959;
4966 -> 4962;
4966 -> 4963;
4966 -> 4959;
4967 -> 4880;
4968 -> 4953;
4968 -> 4967;
4968 -> 4880;
4969 -> 4880;
4970 -> 4954;
4970 -> 4969;
4970 -> 4880;
4971 -> 4955;
4971 -> 4964;
4971 -> 4965;
4971 -> 4966;
4971 -> 4871;
4972 -> 4971;
4973 -> 4972;
4974 -> 4873;
4974 -> 4866;
4974 -> 4929;
4974 -> 4971;
4974 -> 4972;
4975 -> 4874;
4975 -> 4974;
4975 -> 4863;
4975 -> 4972;
4976 -> 4867;
4976 -> 4973;
4976 -> 4853;
4977 -> 4707;
4977 -> 4976;
4977 -> 4848;
4977 -> 4681;
4978 -> 4785;
4978 -> 4843;
4978 -> 4681;
4979 -> 4712;
4979 -> 4778;
4979 -> 4681;
4980 -> 4707;
4980 -> 4977;
4980 -> 4681;
4981 -> 4613;
4982 -> 4422;
4983 -> 4422;
4984 -> 4638;
4985 -> 4422;
4986 -> 4423;
4986 -> 4422;
}