digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 817993"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 817994"];
3 [label="param CompilationEmitTests(this) 817995"];
4 [label="param EmitMetadataTestBase(this) 817996"];
5 [label="param CSharpTestBase(this) 817997"];
6 [label="param CommonTestBase(this) 817998"];
7 [label="param TestBase(this) 817999"];
8 [label="_temp 818000"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 818001"];
10 [label="param IllegalNameOverride(this) 818002"];
11 [label="var compilation = CreateCompilation('class A { }', options: TestOptions.ReleaseDll); 818003"];
12 [label="'class A { }' 818004"];
13 [label="param operator(string source) 818005"];
14 [label="source 818006"];
15 [label="new CSharpTestSource(source) 818007"];
16 [label="param CSharpTestSource(object value) 818008"];
17 [label="param CSharpTestSource(this) 818009"];
18 [label="Value 818010"];
19 [label="var compilation = CreateCompilation('class A { }', options: TestOptions.ReleaseDll); 818011"];
20 [label="var compilation = CreateCompilation('class A { }', options: TestOptions.ReleaseDll); 818012"];
21 [label="CreateCompilation('class A { }', options: TestOptions.ReleaseDll) 818013"];
22 [label="param CreateCompilation(CSharpTestSource source) 818014"];
23 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 818015"];
24 [label="param CreateCompilation(CSharpCompilationOptions options = null) 818016"];
25 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 818017"];
26 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 818018"];
27 [label="param CreateCompilation(string assemblyName = '') 818019"];
28 [label="param CreateCompilation(string sourceFileName = '') 818020"];
29 [label="param CreateCompilation(bool skipUsesIsNullable = false) 818021"];
30 [label="source 818022"];
31 [label="targetFramework 818023"];
32 [label="references 818024"];
33 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 818025"];
34 [label="param GetReferences(TargetFramework tf) 818026"];
35 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 818027"];
36 [label="var references = GetReferences(tf); 818028"];
37 [label="GetReferences(tf) 818029"];
38 [label="param GetReferences(TargetFramework targetFramework) 818030"];
39 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 818031"];
40 [label="StandardReferences 818032"];
41 [label="RuntimeUtilities.IsCoreClrRuntime 818033"];
42 [label="NetStandard20References 818034"];
43 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 818035"];
44 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 818036"];
45 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 818037"];
46 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 818038"];
47 [label="return references; 818039"];
48 [label="options 818040"];
49 [label="parseOptions 818041"];
50 [label="assemblyName 818042"];
51 [label="sourceFileName 818043"];
52 [label="skipUsesIsNullable 818044"];
53 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 818045"];
54 [label="param CreateEmptyCompilation(CSharpTestSource source) 818046"];
55 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 818047"];
56 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 818048"];
57 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 818049"];
58 [label="param CreateEmptyCompilation(string assemblyName = '') 818050"];
59 [label="param CreateEmptyCompilation(string sourceFileName = '') 818051"];
60 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 818052"];
61 [label="source 818053"];
62 [label="references 818054"];
63 [label="options 818055"];
64 [label="parseOptions 818056"];
65 [label="assemblyName 818057"];
66 [label="sourceFileName 818058"];
67 [label="skipUsesIsNullable 818059"];
68 [label="null 818060"];
69 [label="experimentalFeature: null 818061"];
70 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 818062"];
71 [label="param CreateCompilationCore(CSharpTestSource source) 818063"];
72 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 818064"];
73 [label="param CreateCompilationCore(CSharpCompilationOptions options) 818065"];
74 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 818066"];
75 [label="param CreateCompilationCore(string assemblyName) 818067"];
76 [label="param CreateCompilationCore(string sourceFileName) 818068"];
77 [label="param CreateCompilationCore(bool skipUsesIsNullable) 818069"];
78 [label="param CreateCompilationCore(MessageID? experimentalFeature) 818070"];
79 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 818071"];
80 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 818072"];
81 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 818073"];
82 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 818074"];
83 [label="param GetSyntaxTrees(string sourceFileName = '') 818075"];
84 [label="param GetSyntaxTrees(this) 818076"];
85 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 818077"];
86 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 818078"];
87 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 818079"];
88 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 818080"];
89 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 818081"];
90 [label="param Parse(string text) 818082"];
91 [label="param Parse(string filename = '') 818083"];
92 [label="param Parse(CSharpParseOptions options = null) 818084"];
93 [label="param Parse(Encoding encoding = null) 818085"];
94 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 818086"];
95 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 818087"];
96 [label="options = TestOptions.Regular; 818088"];
97 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 818089"];
98 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 818090"];
99 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 818091"];
100 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 818092"];
101 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 818093"];
102 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 818094"];
103 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 818095"];
104 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 818096"];
105 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 818097"];
106 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 818098"];
107 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 818099"];
108 [label="param CheckSerializable(SyntaxTree tree) 818100"];
109 [label="var stream = new MemoryStream(); 818101"];
110 [label="var root = tree.GetRoot(); 818102"];
111 [label="var root = tree.GetRoot(); 818103"];
112 [label="root.SerializeTo(stream); 818104"];
113 [label="root.SerializeTo(stream); 818105"];
114 [label="root.SerializeTo(stream); 818106"];
115 [label="stream.Position = 0; 818107"];
116 [label="stream.Position 818108"];
117 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 818109"];
118 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 818110"];
119 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 818111"];
120 [label="return tree; 818112"];
121 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 818113"];
122 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 818114"];
123 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 818115"];
124 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 818116"];
125 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 818117"];
126 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 818118"];
127 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 818119"];
128 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 818120"];
129 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 818121"];
130 [label="param ValidateIOperations(Func<Compilation> createCompilation) 818122"];
131 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 818123"];
132 [label="return; 818124"];
133 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 818125"];
134 [label="var compilation = createCompilationLambda(); 818126"];
135 [label="var compilation = createCompilationLambda(); 818127"];
136 [label="return Guid.NewGuid().ToString('D'); 818128"];
137 [label="var compilation = createCompilationLambda(); 818129"];
138 [label="OutputKind.ConsoleApplication 818130"];
139 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 818131"];
140 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 818132"];
141 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 818133"];
142 [label="OutputKind.DynamicallyLinkedLibrary 818134"];
143 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 818135"];
144 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 818136"];
145 [label="true 818137"];
146 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 818138"];
147 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 818139"];
148 [label="param Create(string? assemblyName) 818140"];
149 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 818141"];
150 [label="param Create(IEnumerable<MetadataReference>? references = null) 818142"];
151 [label="param Create(CSharpCompilationOptions? options = null) 818143"];
152 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 818144"];
153 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 818145"];
154 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 818146"];
155 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 818147"];
156 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 818148"];
157 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 818149"];
158 [label="param Create(string? assemblyName) 818150"];
159 [label="param Create(CSharpCompilationOptions options) 818151"];
160 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 818152"];
161 [label="param Create(IEnumerable<MetadataReference>? references) 818153"];
162 [label="param Create(CSharpCompilation? previousSubmission) 818154"];
163 [label="param Create(Type? returnType) 818155"];
164 [label="param Create(Type? hostObjectType) 818156"];
165 [label="param Create(bool isSubmission) 818157"];
166 [label="RoslynDebug.Assert(options != null); 818158"];
167 [label="RoslynDebug.Assert(options != null); 818159"];
168 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 818160"];
169 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 818161"];
170 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 818162"];
171 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818163"];
172 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818164"];
173 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818165"];
174 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818166"];
175 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818167"];
176 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818168"];
177 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818169"];
178 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818170"];
179 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818171"];
180 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 818172"];
181 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 818173"];
182 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 818174"];
183 [label="param SyntaxAndDeclarationManager(string scriptClassName) 818175"];
184 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 818176"];
185 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 818177"];
186 [label="param SyntaxAndDeclarationManager(bool isSubmission) 818178"];
187 [label="param SyntaxAndDeclarationManager(State state) 818179"];
188 [label="param SyntaxAndDeclarationManager(this) 818180"];
189 [label="externalSyntaxTrees 818181"];
190 [label="scriptClassName 818182"];
191 [label="resolver 818183"];
192 [label="messageProvider 818184"];
193 [label="isSubmission 818185"];
194 [label="param SyntaxAndDeclarationManager(this) 818186"];
195 [label="param SyntaxAndDeclarationManager(this) 818187"];
196 [label="_lazyState 818188"];
197 [label="_lazyState 818189"];
198 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 818190"];
199 [label="param CSharpCompilation(string? assemblyName) 818191"];
200 [label="param CSharpCompilation(CSharpCompilationOptions options) 818192"];
201 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 818193"];
202 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 818194"];
203 [label="param CSharpCompilation(Type? submissionReturnType) 818195"];
204 [label="param CSharpCompilation(Type? hostObjectType) 818196"];
205 [label="param CSharpCompilation(bool isSubmission) 818197"];
206 [label="param CSharpCompilation(ReferenceManager? referenceManager) 818198"];
207 [label="param CSharpCompilation(bool reuseReferenceManager) 818199"];
208 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 818200"];
209 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 818201"];
210 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 818202"];
211 [label="param CSharpCompilation(this) 818203"];
212 [label="assemblyName 818204"];
213 [label="options 818205"];
214 [label="references 818206"];
215 [label="previousSubmission 818207"];
216 [label="submissionReturnType 818208"];
217 [label="hostObjectType 818209"];
218 [label="isSubmission 818210"];
219 [label="referenceManager 818211"];
220 [label="reuseReferenceManager 818212"];
221 [label="syntaxAndDeclarations 818213"];
222 [label="syntaxAndDeclarations.ExternalSyntaxTrees 818214"];
223 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 818215"];
224 [label="semanticModelProvider 818216"];
225 [label="eventQueue 818217"];
226 [label="param CSharpCompilation(this) 818218"];
227 [label="param CSharpCompilation(string? assemblyName) 818219"];
228 [label="param CSharpCompilation(CSharpCompilationOptions options) 818220"];
229 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 818221"];
230 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 818222"];
231 [label="param CSharpCompilation(Type? submissionReturnType) 818223"];
232 [label="param CSharpCompilation(Type? hostObjectType) 818224"];
233 [label="param CSharpCompilation(bool isSubmission) 818225"];
234 [label="param CSharpCompilation(ReferenceManager? referenceManager) 818226"];
235 [label="param CSharpCompilation(bool reuseReferenceManager) 818227"];
236 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 818228"];
237 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 818229"];
238 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 818230"];
239 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 818231"];
240 [label="param CSharpCompilation(this) 818232"];
241 [label="assemblyName 818233"];
242 [label="references 818234"];
243 [label="features 818235"];
244 [label="isSubmission 818236"];
245 [label="semanticModelProvider 818237"];
246 [label="eventQueue 818238"];
247 [label="param CSharpCompilation(this) 818239"];
248 [label="param CSharpCompilation(this) 818240"];
249 [label="_options 818241"];
250 [label="_globalImports 818242"];
251 [label="_previousSubmissionImports 818243"];
252 [label="_globalNamespaceAlias 818244"];
253 [label="_scriptClass 818245"];
254 [label="_lazyHostObjectTypeSymbol 818246"];
255 [label="_lazyImportInfos 818247"];
256 [label="_conversions 818248"];
257 [label="_anonymousTypeManager 818249"];
258 [label="_lazyGlobalNamespace 818250"];
259 [label="builtInOperators 818251"];
260 [label="_lazyAssemblySymbol 818252"];
261 [label="_referenceManager 818253"];
262 [label="_syntaxAndDeclarations 818254"];
263 [label="_lazyEntryPoint 818255"];
264 [label="_lazyEmitNullablePublicOnly 818256"];
265 [label="_lazyCompilationUnitCompletedTrees 818257"];
266 [label="NullableAnalysisData 818258"];
267 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 818259"];
268 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 818260"];
269 [label="_externAliasTargets 818261"];
270 [label="_moduleInitializerMethods 818262"];
271 [label="_binderFactories 818263"];
272 [label="_ignoreAccessibilityBinderFactories 818264"];
273 [label="_lazyDeclarationDiagnostics 818265"];
274 [label="_declarationDiagnosticsFrozen 818266"];
275 [label="new DiagnosticBag() 818267"];
276 [label="_additionalCodegenWarnings = new DiagnosticBag() 818268"];
277 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 818269"];
278 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 818270"];
279 [label="WellKnownMemberSignatureComparer 818271"];
280 [label="_options 818272"];
281 [label="this.builtInOperators = new BuiltInOperators(this); 818273"];
282 [label="this.builtInOperators = new BuiltInOperators(this); 818274"];
283 [label="new BuiltInOperators(this) 818275"];
284 [label="param BuiltInOperators(CSharpCompilation compilation) 818276"];
285 [label="param BuiltInOperators(this) 818277"];
286 [label="_compilation 818278"];
287 [label="_builtInUnaryOperators 818279"];
288 [label="_builtInOperators 818280"];
289 [label="_compilation 818281"];
290 [label="this.builtInOperators 818282"];
291 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 818283"];
292 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 818284"];
293 [label="_scriptClass 818285"];
294 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 818286"];
295 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 818287"];
296 [label="_globalImports 818288"];
297 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 818289"];
298 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 818290"];
299 [label="_previousSubmissionImports 818291"];
300 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 818292"];
301 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 818293"];
302 [label="_globalNamespaceAlias 818294"];
303 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 818295"];
304 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 818296"];
305 [label="_anonymousTypeManager 818297"];
306 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 818298"];
307 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 818299"];
308 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 818300"];
309 [label="LanguageVersion? result = null; 818301"];
310 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 818302"];
311 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 818303"];
312 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 818304"];
313 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 818305"];
314 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 818306"];
315 [label="this.LanguageVersion 818307"];
316 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 818308"];
317 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818309"];
318 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818310"];
319 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818311"];
320 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818312"];
321 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818313"];
322 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818314"];
323 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 818315"];
324 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 818316"];
325 [label="this.Options 818317"];
326 [label="get\n            {\n                return _options;\n            } 818318"];
327 [label="return _options; 818319"];
328 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 818320"];
329 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 818321"];
330 [label="_referenceManager 818322"];
331 [label="_syntaxAndDeclarations 818323"];
332 [label="Debug.Assert(_lazyAssemblySymbol is null); 818324"];
333 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 818325"];
334 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 818326"];
335 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 818327"];
336 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 818328"];
337 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 818329"];
338 [label="compilation.AddSyntaxTrees(syntaxTrees) 818330"];
339 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 818331"];
340 [label="param AddSyntaxTrees(this) 818332"];
341 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 818333"];
342 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 818334"];
343 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 818335"];
344 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 818336"];
345 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 818337"];
346 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 818338"];
347 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 818339"];
348 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 818340"];
349 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 818341"];
350 [label="bool reuseReferenceManager = true; 818342"];
351 [label="int i = 0; 818343"];
352 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 818344"];
353 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 818345"];
354 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 818346"];
355 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 818347"];
356 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 818348"];
357 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 818349"];
358 [label="externalSyntaxTrees.Add(tree); 818350"];
359 [label="externalSyntaxTrees.Add(tree); 818351"];
360 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 818352"];
361 [label="i++; 818353"];
362 [label="externalSyntaxTrees.Free(); 818354"];
363 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 818355"];
364 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 818356"];
365 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 818357"];
366 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 818358"];
367 [label="param AddSyntaxTrees(this) 818359"];
368 [label="var scriptClassName = this.ScriptClassName; 818360"];
369 [label="var resolver = this.Resolver; 818361"];
370 [label="var messageProvider = this.MessageProvider; 818362"];
371 [label="var isSubmission = this.IsSubmission; 818363"];
372 [label="var state = _lazyState; 818364"];
373 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 818365"];
374 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 818366"];
375 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 818367"];
376 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 818368"];
377 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 818369"];
378 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 818370"];
379 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 818371"];
380 [label="param WithExternalSyntaxTrees(this) 818372"];
381 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 818373"];
382 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 818374"];
383 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 818375"];
384 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 818376"];
385 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 818377"];
386 [label="param SyntaxAndDeclarationManager(string scriptClassName) 818378"];
387 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 818379"];
388 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 818380"];
389 [label="param SyntaxAndDeclarationManager(bool isSubmission) 818381"];
390 [label="param SyntaxAndDeclarationManager(State state) 818382"];
391 [label="param SyntaxAndDeclarationManager(this) 818383"];
392 [label="param SyntaxAndDeclarationManager(this) 818384"];
393 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 818385"];
394 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 818386"];
395 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 818387"];
396 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 818388"];
397 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 818389"];
398 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 818390"];
399 [label="param Update(ReferenceManager referenceManager) 818391"];
400 [label="param Update(bool reuseReferenceManager) 818392"];
401 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 818393"];
402 [label="param Update(this) 818394"];
403 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818395"];
404 [label="this.PreviousSubmission 818396"];
405 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 818397"];
406 [label="ScriptCompilationInfo 818398"];
407 [label="ScriptCompilationInfo?.PreviousScriptCompilation 818399"];
408 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818400"];
409 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818401"];
410 [label="this.SubmissionReturnType 818402"];
411 [label="=> ScriptCompilationInfo 818403"];
412 [label="ScriptCompilationInfo 818404"];
413 [label="this.HostObjectType 818405"];
414 [label="=> ScriptCompilationInfo 818406"];
415 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818407"];
416 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818408"];
417 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818409"];
418 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 818410"];
419 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 818411"];
420 [label="param CSharpCompilation(string? assemblyName) 818412"];
421 [label="param CSharpCompilation(CSharpCompilationOptions options) 818413"];
422 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 818414"];
423 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 818415"];
424 [label="param CSharpCompilation(Type? submissionReturnType) 818416"];
425 [label="param CSharpCompilation(Type? hostObjectType) 818417"];
426 [label="param CSharpCompilation(bool isSubmission) 818418"];
427 [label="param CSharpCompilation(ReferenceManager? referenceManager) 818419"];
428 [label="param CSharpCompilation(bool reuseReferenceManager) 818420"];
429 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 818421"];
430 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 818422"];
431 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 818423"];
432 [label="param CSharpCompilation(this) 818424"];
433 [label="previousSubmission 818425"];
434 [label="submissionReturnType 818426"];
435 [label="hostObjectType 818427"];
436 [label="syntaxAndDeclarations.ExternalSyntaxTrees 818428"];
437 [label="eventQueue 818429"];
438 [label="param CSharpCompilation(this) 818430"];
439 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 818431"];
440 [label="param CSharpCompilation(Type? submissionReturnType) 818432"];
441 [label="param CSharpCompilation(Type? hostObjectType) 818433"];
442 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 818434"];
443 [label="param CSharpCompilation(this) 818435"];
444 [label="eventQueue 818436"];
445 [label="param CSharpCompilation(this) 818437"];
446 [label="_options 818438"];
447 [label="_globalImports 818439"];
448 [label="_previousSubmissionImports 818440"];
449 [label="_globalNamespaceAlias 818441"];
450 [label="_scriptClass 818442"];
451 [label="_lazyHostObjectTypeSymbol 818443"];
452 [label="_lazyImportInfos 818444"];
453 [label="_conversions 818445"];
454 [label="_anonymousTypeManager 818446"];
455 [label="_lazyGlobalNamespace 818447"];
456 [label="builtInOperators 818448"];
457 [label="_lazyAssemblySymbol 818449"];
458 [label="_referenceManager 818450"];
459 [label="_syntaxAndDeclarations 818451"];
460 [label="_lazyEntryPoint 818452"];
461 [label="_lazyEmitNullablePublicOnly 818453"];
462 [label="_lazyCompilationUnitCompletedTrees 818454"];
463 [label="NullableAnalysisData 818455"];
464 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 818456"];
465 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 818457"];
466 [label="_externAliasTargets 818458"];
467 [label="_moduleInitializerMethods 818459"];
468 [label="_binderFactories 818460"];
469 [label="_ignoreAccessibilityBinderFactories 818461"];
470 [label="_lazyDeclarationDiagnostics 818462"];
471 [label="_declarationDiagnosticsFrozen 818463"];
472 [label="new DiagnosticBag() 818464"];
473 [label="_additionalCodegenWarnings = new DiagnosticBag() 818465"];
474 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 818466"];
475 [label="this.builtInOperators = new BuiltInOperators(this); 818467"];
476 [label="this.builtInOperators = new BuiltInOperators(this); 818468"];
477 [label="new BuiltInOperators(this) 818469"];
478 [label="param BuiltInOperators(CSharpCompilation compilation) 818470"];
479 [label="param BuiltInOperators(this) 818471"];
480 [label="_compilation 818472"];
481 [label="_builtInUnaryOperators 818473"];
482 [label="_builtInOperators 818474"];
483 [label="_compilation 818475"];
484 [label="this.builtInOperators 818476"];
485 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 818477"];
486 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 818478"];
487 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 818479"];
488 [label="LanguageVersion? result = null; 818480"];
489 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 818481"];
490 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 818482"];
491 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 818483"];
492 [label="result = version; 818484"];
493 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 818485"];
494 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818486"];
495 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818487"];
496 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818488"];
497 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818489"];
498 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818490"];
499 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 818491"];
500 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 818492"];
501 [label="referenceManager.AssertCanReuseForCompilation(this); 818493"];
502 [label="referenceManager.AssertCanReuseForCompilation(this); 818494"];
503 [label="_referenceManager 818495"];
504 [label="Debug.Assert(_lazyAssemblySymbol is null); 818496"];
505 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 818497"];
506 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 818498"];
507 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 818499"];
508 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 818500"];
509 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 818501"];
510 [label="return compilation; 818502"];
511 [label="var compilation = createCompilationLambda(); 818503"];
512 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 818504"];
513 [label="IsNullableEnabled(compilation) 818505"];
514 [label="param IsNullableEnabled(CSharpCompilation compilation) 818506"];
515 [label="compilation.SyntaxTrees 818507"];
516 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 818508"];
517 [label="_syntaxAndDeclarations.GetLazyState() 818509"];
518 [label="param GetLazyState(this) 818510"];
519 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 818511"];
520 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 818512"];
521 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 818513"];
522 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 818514"];
523 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 818515"];
524 [label="param CreateState(string scriptClassName) 818516"];
525 [label="param CreateState(SourceReferenceResolver resolver) 818517"];
526 [label="param CreateState(CommonMessageProvider messageProvider) 818518"];
527 [label="param CreateState(bool isSubmission) 818519"];
528 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 818520"];
529 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 818521"];
530 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 818522"];
531 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 818523"];
532 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 818524"];
533 [label="var declTable = DeclarationTable.Empty; 818525"];
534 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 818526"];
535 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818527"];
536 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818528"];
537 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818529"];
538 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818530"];
539 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818531"];
540 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818532"];
541 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818533"];
542 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818534"];
543 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818535"];
544 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818536"];
545 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 818537"];
546 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 818538"];
547 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 818539"];
548 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 818540"];
549 [label="param AppendAllSyntaxTrees(string scriptClassName) 818541"];
550 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 818542"];
551 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 818543"];
552 [label="param AppendAllSyntaxTrees(bool isSubmission) 818544"];
553 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 818545"];
554 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 818546"];
555 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 818547"];
556 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 818548"];
557 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 818549"];
558 [label="var sourceCodeKind = tree.Options.Kind; 818550"];
559 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 818551"];
560 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 818552"];
561 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 818553"];
562 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 818554"];
563 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 818555"];
564 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 818556"];
565 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 818557"];
566 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 818558"];
567 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 818559"];
568 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 818560"];
569 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 818561"];
570 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 818562"];
571 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 818563"];
572 [label="declMapBuilder.Add(tree, lazyRoot); 818564"];
573 [label="declMapBuilder.Add(tree, lazyRoot); 818565"];
574 [label="declMapBuilder.Add(tree, lazyRoot); 818566"];
575 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 818567"];
576 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 818568"];
577 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 818569"];
578 [label="treesBuilder.Add(tree); 818570"];
579 [label="treesBuilder.Add(tree); 818571"];
580 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 818572"];
581 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 818573"];
582 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 818574"];
583 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 818575"];
584 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 818576"];
585 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 818577"];
586 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 818578"];
587 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 818579"];
588 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 818580"];
589 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 818581"];
590 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 818582"];
591 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 818583"];
592 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 818584"];
593 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 818585"];
594 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 818586"];
595 [label="param State(DeclarationTable declarationTable) 818587"];
596 [label="param State(this) 818588"];
597 [label="OrdinalMap 818589"];
598 [label="LoadDirectiveMap 818590"];
599 [label="LoadedSyntaxTreeMap 818591"];
600 [label="RootNamespaces 818592"];
601 [label="DeclarationTable 818593"];
602 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 818594"];
603 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 818595"];
604 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 818596"];
605 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 818597"];
606 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 818598"];
607 [label="this.SyntaxTrees 818599"];
608 [label="this.OrdinalMap 818600"];
609 [label="this.LoadDirectiveMap 818601"];
610 [label="this.LoadedSyntaxTreeMap 818602"];
611 [label="this.RootNamespaces 818603"];
612 [label="this.DeclarationTable 818604"];
613 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 818605"];
614 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 818606"];
615 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 818607"];
616 [label="return _lazyState; 818608"];
617 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 818609"];
618 [label="var trees = compilation.SyntaxTrees; 818610"];
619 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 818611"];
620 [label="var options = (CSharpParseOptions)trees[0].Options; 818612"];
621 [label="var options = (CSharpParseOptions)trees[0].Options; 818613"];
622 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 818614"];
623 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 818615"];
624 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 818616"];
625 [label="return compilation; 818617"];
626 [label="compilation.VerifyDiagnostics(); 818618"];
627 [label="compilation.VerifyDiagnostics(); 818619"];
628 [label="compilation.VerifyDiagnostics() 818620"];
629 [label="param VerifyDiagnostics(this TCompilation c) 818621"];
630 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 818622"];
631 [label="var diagnostics = c.GetDiagnostics(); 818623"];
632 [label="c.GetDiagnostics() 818624"];
633 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 818625"];
634 [label="param GetDiagnostics(this) 818626"];
635 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 818627"];
636 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 818628"];
637 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 818629"];
638 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 818630"];
639 [label="param GetDiagnostics(CompilationStage stage) 818631"];
640 [label="param GetDiagnostics(bool includeEarlierStages) 818632"];
641 [label="param GetDiagnostics(CancellationToken cancellationToken) 818633"];
642 [label="param GetDiagnostics(this) 818634"];
643 [label="var diagnostics = DiagnosticBag.GetInstance(); 818635"];
644 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 818636"];
645 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 818637"];
646 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 818638"];
647 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 818639"];
648 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 818640"];
649 [label="param GetDiagnostics(CompilationStage stage) 818641"];
650 [label="param GetDiagnostics(bool includeEarlierStages) 818642"];
651 [label="param GetDiagnostics(DiagnosticBag diagnostics) 818643"];
652 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 818644"];
653 [label="param GetDiagnostics(this) 818645"];
654 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 818646"];
655 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 818647"];
656 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 818648"];
657 [label="this.SyntaxTrees 818649"];
658 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 818650"];
659 [label="_syntaxAndDeclarations.GetLazyState() 818651"];
660 [label="param GetLazyState(this) 818652"];
661 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 818653"];
662 [label="var syntaxTrees = this.SyntaxTrees; 818654"];
663 [label="this.Options 818655"];
664 [label="get\n            {\n                return _options;\n            } 818656"];
665 [label="return _options; 818657"];
666 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 818658"];
667 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 818659"];
668 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 818660"];
669 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 818661"];
670 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 818662"];
671 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 818663"];
672 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 818664"];
673 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 818665"];
674 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 818666"];
675 [label="ImmutableArray<LoadDirective> loadDirectives; 818667"];
676 [label="loadDirectives 818668"];
677 [label="syntaxAndDeclarations.GetLazyState() 818669"];
678 [label="param GetLazyState(this) 818670"];
679 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 818671"];
680 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 818672"];
681 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 818673"];
682 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 818674"];
683 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 818675"];
684 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 818676"];
685 [label="cancellationToken.ThrowIfCancellationRequested(); 818677"];
686 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 818678"];
687 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 818679"];
688 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 818680"];
689 [label="CheckAssemblyName(builder); 818681"];
690 [label="CheckAssemblyName(builder); 818682"];
691 [label="CheckAssemblyName(builder); 818683"];
692 [label="get { return _syntaxAndDeclarations.MessageProvider; } 818684"];
693 [label="return _syntaxAndDeclarations.MessageProvider; 818685"];
694 [label="Options 818686"];
695 [label="get\n            {\n                return _options;\n            } 818687"];
696 [label="return _options; 818688"];
697 [label="builder.AddRange(Options.Errors); 818689"];
698 [label="Options 818690"];
699 [label="get\n            {\n                return _options;\n            } 818691"];
700 [label="return _options; 818692"];
701 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 818693"];
702 [label="cancellationToken.ThrowIfCancellationRequested(); 818694"];
703 [label="GetBoundReferenceManager() 818695"];
704 [label="param GetBoundReferenceManager(this) 818696"];
705 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818697"];
706 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 818698"];
707 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 818699"];
708 [label="get { return this.Declarations.ReferenceDirectives; } 818700"];
709 [label="this.Declarations 818701"];
710 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 818702"];
711 [label="_syntaxAndDeclarations.GetLazyState() 818703"];
712 [label="param GetLazyState(this) 818704"];
713 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 818705"];
714 [label="return this.Declarations.ReferenceDirectives; 818706"];
715 [label="get { return _options; } 818707"];
716 [label="return _options; 818708"];
717 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 818709"];
718 [label="_syntaxAndDeclarations.GetLazyState() 818710"];
719 [label="Debug.Assert(_lazyAssemblySymbol is object); 818711"];
720 [label="return _referenceManager; 818712"];
721 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 818713"];
722 [label="cancellationToken.ThrowIfCancellationRequested(); 818714"];
723 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 818715"];
724 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 818716"];
725 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 818717"];
726 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 818718"];
727 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 818719"];
728 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 818720"];
729 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 818721"];
730 [label="param GetSourceDeclarationDiagnostics(this) 818722"];
731 [label="GlobalImports 818723"];
732 [label="=> _globalImports.Value 818724"];
733 [label="_globalImports.Value 818725"];
734 [label="_globalImports.Value 818726"];
735 [label="=> Imports.FromGlobalUsings(this) 818727"];
736 [label="this 818728"];
737 [label="Imports.FromGlobalUsings(this) 818729"];
738 [label="Imports.FromGlobalUsings(this) 818730"];
739 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 818731"];
740 [label="ScriptCompilationInfo 818732"];
741 [label="ScriptCompilationInfo?.PreviousScriptCompilation 818733"];
742 [label="GlobalImports.Complete(cancellationToken); 818734"];
743 [label="GlobalImports.Complete(cancellationToken); 818735"];
744 [label="GlobalImports.Complete(cancellationToken); 818736"];
745 [label="SourceLocation? location = null; 818737"];
746 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 818738"];
747 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 818739"];
748 [label="Assembly 818740"];
749 [label="get\n            {\n                return SourceAssembly;\n            } 818741"];
750 [label="SourceAssembly 818742"];
751 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 818743"];
752 [label="GetBoundReferenceManager() 818744"];
753 [label="param GetBoundReferenceManager(this) 818745"];
754 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818746"];
755 [label="return _referenceManager; 818747"];
756 [label="GetBoundReferenceManager(); 818748"];
757 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 818749"];
758 [label="return _lazyAssemblySymbol; 818750"];
759 [label="return SourceAssembly; 818751"];
760 [label="Assembly.ForceComplete(location, cancellationToken); 818752"];
761 [label="Assembly.ForceComplete(location, cancellationToken); 818753"];
762 [label="Assembly.ForceComplete(location, cancellationToken); 818754"];
763 [label="Assembly.ForceComplete(location, cancellationToken); 818755"];
764 [label="Assembly.ForceComplete(location, cancellationToken); 818756"];
765 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 818757"];
766 [label="Declarations 818758"];
767 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 818759"];
768 [label="_syntaxAndDeclarations.GetLazyState() 818760"];
769 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 818761"];
770 [label="return Declarations.GetMergedRoot(this); 818762"];
771 [label="return Declarations.GetMergedRoot(this); 818763"];
772 [label="return Declarations.GetMergedRoot(this); 818764"];
773 [label="_syntaxAndDeclarations.GetLazyState() 818765"];
774 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 818766"];
775 [label="SourceAssembly 818767"];
776 [label="GetBoundReferenceManager() 818768"];
777 [label="param GetBoundReferenceManager(this) 818769"];
778 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818770"];
779 [label="return _referenceManager; 818771"];
780 [label="GetBoundReferenceManager(); 818772"];
781 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 818773"];
782 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 818774"];
783 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 818775"];
784 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 818776"];
785 [label="var diagnostics = new DiagnosticBag(); 818777"];
786 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 818778"];
787 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 818779"];
788 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 818780"];
789 [label="return _lazyDeclarationDiagnostics; 818781"];
790 [label="param SymbolDeclaredEvent(Symbol symbol) 818782"];
791 [label="param SymbolDeclaredEvent(this) 818783"];
792 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 818784"];
793 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 818785"];
794 [label="param GetUnaliasedReferencedAssemblies(this) 818786"];
795 [label="GetBoundReferenceManager() 818787"];
796 [label="param GetBoundReferenceManager(this) 818788"];
797 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818789"];
798 [label="return _referenceManager; 818790"];
799 [label="var referenceManager = GetBoundReferenceManager(); 818791"];
800 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 818792"];
801 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 818793"];
802 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 818794"];
803 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 818795"];
804 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 818796"];
805 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 818797"];
806 [label="return _additionalCodegenWarnings; 818798"];
807 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818799"];
808 [label="return _referenceManager; 818800"];
809 [label="GetBoundReferenceManager(); 818801"];
810 [label="param GetSpecialType(SpecialType specialType) 818802"];
811 [label="param GetSpecialType(this) 818803"];
812 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 818804"];
813 [label="NamedTypeSymbol result; 818805"];
814 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 818806"];
815 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 818807"];
816 [label="Assembly 818808"];
817 [label="GetBoundReferenceManager() 818809"];
818 [label="GetBoundReferenceManager(); 818810"];
819 [label="result = Assembly.GetSpecialType(specialType); 818811"];
820 [label="result = Assembly.GetSpecialType(specialType); 818812"];
821 [label="Debug.Assert(result.SpecialType == specialType); 818813"];
822 [label="return result; 818814"];
823 [label="param ShouldEmitNullableAttributes(Symbol symbol) 818815"];
824 [label="param ShouldEmitNullableAttributes(this) 818816"];
825 [label="RoslynDebug.Assert(symbol is object); 818817"];
826 [label="RoslynDebug.Assert(symbol is object); 818818"];
827 [label="Debug.Assert(symbol.IsDefinition); 818819"];
828 [label="SourceModule 818820"];
829 [label="get\n            {\n                return Assembly.Modules[0];\n            } 818821"];
830 [label="Assembly 818822"];
831 [label="get\n            {\n                return SourceAssembly;\n            } 818823"];
832 [label="SourceAssembly 818824"];
833 [label="GetBoundReferenceManager() 818825"];
834 [label="param GetBoundReferenceManager(this) 818826"];
835 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818827"];
836 [label="return _referenceManager; 818828"];
837 [label="GetBoundReferenceManager(); 818829"];
838 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 818830"];
839 [label="return Assembly.Modules[0]; 818831"];
840 [label="return Assembly.Modules[0]; 818832"];
841 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 818833"];
842 [label="EmitNullablePublicOnly 818834"];
843 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 818835"];
844 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 818836"];
845 [label="SyntaxTrees 818837"];
846 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 818838"];
847 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 818839"];
848 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 818840"];
849 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 818841"];
850 [label="_lazyEmitNullablePublicOnly 818842"];
851 [label="return _lazyEmitNullablePublicOnly.Value(); 818843"];
852 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 818844"];
853 [label="return true; 818845"];
854 [label="Debug.Assert(symbol.IsDefinition); 818846"];
855 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 818847"];
856 [label="return _referenceManager; 818848"];
857 [label="GetBoundReferenceManager(); 818849"];
858 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 818850"];
859 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 818851"];
860 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 818852"];
861 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 818853"];
862 [label="_declarationDiagnosticsFrozen = true; 818854"];
863 [label="_declarationDiagnosticsFrozen 818855"];
864 [label="_needsGeneratedAttributes_IsFrozen = true; 818856"];
865 [label="_needsGeneratedAttributes_IsFrozen 818857"];
866 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 818858"];
867 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 818859"];
868 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 818860"];
869 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 818861"];
870 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 818862"];
871 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 818863"];
872 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 818864"];
873 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 818865"];
874 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 818866"];
875 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 818867"];
876 [label="param GetClsComplianceDiagnostics(this) 818868"];
877 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 818869"];
878 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 818870"];
879 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 818871"];
880 [label="var builder = DiagnosticBag.GetInstance(); 818872"];
881 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 818873"];
882 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 818874"];
883 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 818875"];
884 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 818876"];
885 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 818877"];
886 [label="param CheckCompliance(CSharpCompilation compilation) 818878"];
887 [label="param CheckCompliance(DiagnosticBag diagnostics) 818879"];
888 [label="param CheckCompliance(CancellationToken cancellationToken) 818880"];
889 [label="param CheckCompliance(SyntaxTree filterTree = null) 818881"];
890 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 818882"];
891 [label="var queue = new ConcurrentQueue<Diagnostic>(); 818883"];
892 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 818884"];
893 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 818885"];
894 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 818886"];
895 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 818887"];
896 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 818888"];
897 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 818889"];
898 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 818890"];
899 [label="param ClsComplianceChecker(CSharpCompilation compilation) 818891"];
900 [label="param ClsComplianceChecker(SyntaxTree filterTree) 818892"];
901 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 818893"];
902 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 818894"];
903 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 818895"];
904 [label="param ClsComplianceChecker(this) 818896"];
905 [label="param ClsComplianceChecker(this) 818897"];
906 [label="_compilation 818898"];
907 [label="_filterTree 818899"];
908 [label="_filterSpanWithinTree 818900"];
909 [label="_diagnostics 818901"];
910 [label="_declaredOrInheritedCompliance 818902"];
911 [label="_compilerTasks 818903"];
912 [label="_compilation 818904"];
913 [label="_filterTree 818905"];
914 [label="_filterSpanWithinTree 818906"];
915 [label="_diagnostics 818907"];
916 [label="_cancellationToken 818908"];
917 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 818909"];
918 [label="_declaredOrInheritedCompliance 818910"];
919 [label="ConcurrentAnalysis 818911"];
920 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 818912"];
921 [label="null 818913"];
922 [label="_filterTree == null 818914"];
923 [label="_compilation.Options 818915"];
924 [label="get\n            {\n                return _options;\n            } 818916"];
925 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 818917"];
926 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 818918"];
927 [label="_compilerTasks = new ConcurrentStack<Task>(); 818919"];
928 [label="_compilerTasks 818920"];
929 [label="compilation.Assembly 818921"];
930 [label="get\n            {\n                return SourceAssembly;\n            } 818922"];
931 [label="GetBoundReferenceManager() 818923"];
932 [label="param GetBoundReferenceManager(this) 818924"];
933 [label="GetBoundReferenceManager(); 818925"];
934 [label="checker.Visit(compilation.Assembly); 818926"];
935 [label="checker.Visit(compilation.Assembly); 818927"];
936 [label="checker.Visit(compilation.Assembly); 818928"];
937 [label="param VisitAssembly(AssemblySymbol symbol) 818929"];
938 [label="param VisitAssembly(this) 818930"];
939 [label="_cancellationToken.ThrowIfCancellationRequested(); 818931"];
940 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 818932"];
941 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 818933"];
942 [label="GetDeclaredOrInheritedCompliance(symbol) 818934"];
943 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 818935"];
944 [label="param GetDeclaredOrInheritedCompliance(this) 818936"];
945 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 818937"];
946 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 818938"];
947 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 818939"];
948 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 818940"];
949 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 818941"];
950 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 818942"];
951 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 818943"];
952 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 818944"];
953 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 818945"];
954 [label="Compliance compliance; 818946"];
955 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 818947"];
956 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 818948"];
957 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 818949"];
958 [label="Location ignoredLocation; 818950"];
959 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 818951"];
960 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 818952"];
961 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 818953"];
962 [label="param GetDeclaredCompliance(Symbol symbol) 818954"];
963 [label="param GetDeclaredCompliance(out Location attributeLocation) 818955"];
964 [label="param GetDeclaredCompliance(this) 818956"];
965 [label="attributeLocation = null; 818957"];
966 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 818958"];
967 [label="return null; 818959"];
968 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 818960"];
969 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 818961"];
970 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 818962"];
971 [label="compliance = Compliance.ImpliedFalse; 818963"];
972 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 818964"];
973 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 818965"];
974 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 818966"];
975 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 818967"];
976 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 818968"];
977 [label="IsTrue(assemblyCompliance) 818969"];
978 [label="param IsTrue(Compliance compliance) 818970"];
979 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 818971"];
980 [label="return false; 818972"];
981 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 818973"];
982 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 818974"];
983 [label="ModuleSymbol module = symbol.Modules[i]; 818975"];
984 [label="Location attributeLocation; 818976"];
985 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 818977"];
986 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 818978"];
987 [label="GetDeclaredCompliance(module, out attributeLocation) 818979"];
988 [label="param GetDeclaredCompliance(Symbol symbol) 818980"];
989 [label="param GetDeclaredCompliance(out Location attributeLocation) 818981"];
990 [label="param GetDeclaredCompliance(this) 818982"];
991 [label="attributeLocation = null; 818983"];
992 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 818984"];
993 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 818985"];
994 [label="i == 0 818986"];
995 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 818987"];
996 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 818988"];
997 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 818989"];
998 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 818990"];
999 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 818991"];
1000 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 818992"];
1001 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 818993"];
1002 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 818994"];
1003 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 818995"];
1004 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 818996"];
1005 [label="GetDeclaredOrInheritedCompliance(sourceModule) 818997"];
1006 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 818998"];
1007 [label="param GetDeclaredOrInheritedCompliance(this) 818999"];
1008 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819000"];
1009 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819001"];
1010 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 819002"];
1011 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 819003"];
1012 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 819004"];
1013 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 819005"];
1014 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 819006"];
1015 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 819007"];
1016 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 819008"];
1017 [label="Compliance compliance; 819009"];
1018 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 819010"];
1019 [label="Location ignoredLocation; 819011"];
1020 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 819012"];
1021 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 819013"];
1022 [label="param GetDeclaredCompliance(out Location attributeLocation) 819014"];
1023 [label="param GetDeclaredCompliance(this) 819015"];
1024 [label="attributeLocation = null; 819016"];
1025 [label="return null; 819017"];
1026 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 819018"];
1027 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 819019"];
1028 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 819020"];
1029 [label="GetInheritedCompliance(symbol) 819021"];
1030 [label="param GetInheritedCompliance(Symbol symbol) 819022"];
1031 [label="param GetInheritedCompliance(this) 819023"];
1032 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 819024"];
1033 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 819025"];
1034 [label="System.Diagnostics.Debug.Assert((object)containing != null); 819026"];
1035 [label="System.Diagnostics.Debug.Assert((object)containing != null); 819027"];
1036 [label="return GetDeclaredOrInheritedCompliance(containing); 819028"];
1037 [label="GetDeclaredOrInheritedCompliance(containing) 819029"];
1038 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 819030"];
1039 [label="param GetDeclaredOrInheritedCompliance(this) 819031"];
1040 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819032"];
1041 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819033"];
1042 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 819034"];
1043 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 819035"];
1044 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 819036"];
1045 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 819037"];
1046 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 819038"];
1047 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 819039"];
1048 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 819040"];
1049 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 819041"];
1050 [label="return compliance; 819042"];
1051 [label="IsTrue(GetInheritedCompliance(symbol)) 819043"];
1052 [label="param IsTrue(Compliance compliance) 819044"];
1053 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 819045"];
1054 [label="return false; 819046"];
1055 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 819047"];
1056 [label="param IsTrue(Compliance compliance) 819048"];
1057 [label="Visit(symbol.GlobalNamespace); 819049"];
1058 [label="Visit(symbol.GlobalNamespace); 819050"];
1059 [label="param VisitNamespace(NamespaceSymbol symbol) 819051"];
1060 [label="param VisitNamespace(this) 819052"];
1061 [label="_cancellationToken.ThrowIfCancellationRequested(); 819053"];
1062 [label="if (DoNotVisit(symbol)) return; 819054"];
1063 [label="DoNotVisit(symbol) 819055"];
1064 [label="param DoNotVisit(Symbol symbol) 819056"];
1065 [label="param DoNotVisit(this) 819057"];
1066 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 819058"];
1067 [label="return false; 819059"];
1068 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 819060"];
1069 [label="GetDeclaredOrInheritedCompliance(symbol) 819061"];
1070 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 819062"];
1071 [label="param GetDeclaredOrInheritedCompliance(this) 819063"];
1072 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819064"];
1073 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819065"];
1074 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 819066"];
1075 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 819067"];
1076 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 819068"];
1077 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 819069"];
1078 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819070"];
1079 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 819071"];
1080 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 819072"];
1081 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 819073"];
1082 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 819074"];
1083 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 819075"];
1084 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 819076"];
1085 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 819077"];
1086 [label="return compliance; 819078"];
1087 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 819079"];
1088 [label="param IsTrue(Compliance compliance) 819080"];
1089 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 819081"];
1090 [label="return false; 819082"];
1091 [label="ConcurrentAnalysis 819083"];
1092 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 819084"];
1093 [label="null 819085"];
1094 [label="_filterTree == null 819086"];
1095 [label="_compilation.Options 819087"];
1096 [label="get\n            {\n                return _options;\n            } 819088"];
1097 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 819089"];
1098 [label="VisitNamespaceMembersAsTasks(symbol); 819090"];
1099 [label="VisitNamespaceMembersAsTasks(symbol) 819091"];
1100 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 819092"];
1101 [label="param VisitNamespaceMembersAsTasks(this) 819093"];
1102 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 819094"];
1103 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 819095"];
1104 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 819096"];
1105 [label="VisitNamespaceMembersAsTasks(symbol); 819097"];
1106 [label="checker.WaitForWorkers() 819098"];
1107 [label="param WaitForWorkers(this) 819099"];
1108 [label="var tasks = _compilerTasks; 819100"];
1109 [label="if (tasks == null)\n            {\n                return;\n            } 819101"];
1110 [label="if (tasks == null)\n            {\n                return;\n            } 819102"];
1111 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 819103"];
1112 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 819104"];
1113 [label="curTask.GetAwaiter().GetResult(); 819105"];
1114 [label="checker.WaitForWorkers(); 819106"];
1115 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 819107"];
1116 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 819108"];
1117 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 819109"];
1118 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 819110"];
1119 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 819111"];
1120 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 819112"];
1121 [label="return _lazyClsComplianceDiagnostics; 819113"];
1122 [label="return result.AsImmutable().Concat(clsDiagnostics); 819114"];
1123 [label="return result.AsImmutable().Concat(clsDiagnostics); 819115"];
1124 [label="return result.AsImmutable().Concat(clsDiagnostics); 819116"];
1125 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 819117"];
1126 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 819118"];
1127 [label="cancellationToken.ThrowIfCancellationRequested(); 819119"];
1128 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 819120"];
1129 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 819121"];
1130 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 819122"];
1131 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 819123"];
1132 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 819124"];
1133 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 819125"];
1134 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 819126"];
1135 [label="param GetDiagnosticsForAllMethodBodies(this) 819127"];
1136 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 819128"];
1137 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 819129"];
1138 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 819130"];
1139 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 819131"];
1140 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 819132"];
1141 [label="param CompileMethodBodies(CSharpCompilation compilation) 819133"];
1142 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 819134"];
1143 [label="param CompileMethodBodies(bool emittingPdb) 819135"];
1144 [label="param CompileMethodBodies(bool emitTestCoverageData) 819136"];
1145 [label="param CompileMethodBodies(bool hasDeclarationErrors) 819137"];
1146 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 819138"];
1147 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 819139"];
1148 [label="param CompileMethodBodies(CancellationToken cancellationToken) 819140"];
1149 [label="Debug.Assert(compilation != null); 819141"];
1150 [label="Debug.Assert(compilation != null); 819142"];
1151 [label="Debug.Assert(diagnostics != null); 819143"];
1152 [label="Debug.Assert(diagnostics != null); 819144"];
1153 [label="compilation.PreviousSubmission 819145"];
1154 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 819146"];
1155 [label="ScriptCompilationInfo 819147"];
1156 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 819148"];
1157 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 819149"];
1158 [label="MethodSymbol entryPoint = null; 819150"];
1159 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 819151"];
1160 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 819152"];
1161 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 819153"];
1162 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 819154"];
1163 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 819155"];
1164 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 819156"];
1165 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 819157"];
1166 [label="param GetEntryPoint(CSharpCompilation compilation) 819158"];
1167 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 819159"];
1168 [label="param GetEntryPoint(bool hasDeclarationErrors) 819160"];
1169 [label="param GetEntryPoint(DiagnosticBag diagnostics) 819161"];
1170 [label="param GetEntryPoint(CancellationToken cancellationToken) 819162"];
1171 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 819163"];
1172 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 819164"];
1173 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 819165"];
1174 [label="param GetEntryPointAndDiagnostics(this) 819166"];
1175 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 819167"];
1176 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 819168"];
1177 [label="EntryPoint? entryPoint; 819169"];
1178 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 819170"];
1179 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 819171"];
1180 [label="GetBoundReferenceManager() 819172"];
1181 [label="GetBoundReferenceManager(); 819173"];
1182 [label="this.Options 819174"];
1183 [label="return _options; 819175"];
1184 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 819176"];
1185 [label="this.ScriptClass 819177"];
1186 [label="get { return _scriptClass.Value; } 819178"];
1187 [label="return _scriptClass.Value; 819179"];
1188 [label="_scriptClass.Value 819180"];
1189 [label="param BindScriptClass(this) 819181"];
1190 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 819182"];
1191 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 819183"];
1192 [label="get { return this.SourceModule.GetPublicSymbol(); } 819184"];
1193 [label="this.SourceModule 819185"];
1194 [label="get\n            {\n                return Assembly.Modules[0];\n            } 819186"];
1195 [label="GetBoundReferenceManager() 819187"];
1196 [label="param GetBoundReferenceManager(this) 819188"];
1197 [label="GetBoundReferenceManager(); 819189"];
1198 [label="return this.SourceModule.GetPublicSymbol(); 819190"];
1199 [label="get\n            {\n                return this.SyntaxTrees;\n            } 819191"];
1200 [label="this.SyntaxTrees 819192"];
1201 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 819193"];
1202 [label="param GetLazyState(this) 819194"];
1203 [label="return this.SyntaxTrees; 819195"];
1204 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 819196"];
1205 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 819197"];
1206 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 819198"];
1207 [label="null 819199"];
1208 [label="ImmutableArray<Diagnostic>.Empty 819200"];
1209 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 819201"];
1210 [label="param EntryPoint(MethodSymbol? methodSymbol) 819202"];
1211 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 819203"];
1212 [label="param EntryPoint(this) 819204"];
1213 [label="MethodSymbol 819205"];
1214 [label="this.MethodSymbol 819206"];
1215 [label="this.Diagnostics 819207"];
1216 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 819208"];
1217 [label="entryPoint = EntryPoint.None; 819209"];
1218 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 819210"];
1219 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 819211"];
1220 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 819212"];
1221 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 819213"];
1222 [label="return _lazyEntryPoint; 819214"];
1223 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 819215"];
1224 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 819216"];
1225 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 819217"];
1226 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 819218"];
1227 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 819219"];
1228 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 819220"];
1229 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 819221"];
1230 [label="return null; 819222"];
1231 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819223"];
1232 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819224"];
1233 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819225"];
1234 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819226"];
1235 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819227"];
1236 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819228"];
1237 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819229"];
1238 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819230"];
1239 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819231"];
1240 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 819232"];
1241 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 819233"];
1242 [label="param MethodCompiler(CSharpCompilation compilation) 819234"];
1243 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 819235"];
1244 [label="param MethodCompiler(bool emittingPdb) 819236"];
1245 [label="param MethodCompiler(bool emitTestCoverageData) 819237"];
1246 [label="param MethodCompiler(bool hasDeclarationErrors) 819238"];
1247 [label="param MethodCompiler(DiagnosticBag diagnostics) 819239"];
1248 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 819240"];
1249 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 819241"];
1250 [label="param MethodCompiler(CancellationToken cancellationToken) 819242"];
1251 [label="param MethodCompiler(this) 819243"];
1252 [label="param MethodCompiler(this) 819244"];
1253 [label="_compilation 819245"];
1254 [label="_emittingPdb 819246"];
1255 [label="_emitTestCoverageData 819247"];
1256 [label="_diagnostics 819248"];
1257 [label="_hasDeclarationErrors 819249"];
1258 [label="_moduleBeingBuiltOpt 819250"];
1259 [label="_filterOpt 819251"];
1260 [label="_debugDocumentProvider 819252"];
1261 [label="_entryPointOpt 819253"];
1262 [label="_compilerTasks 819254"];
1263 [label="_globalHasErrors 819255"];
1264 [label="Debug.Assert(compilation != null); 819256"];
1265 [label="Debug.Assert(compilation != null); 819257"];
1266 [label="Debug.Assert(diagnostics != null); 819258"];
1267 [label="Debug.Assert(diagnostics != null); 819259"];
1268 [label="_compilation 819260"];
1269 [label="_moduleBeingBuiltOpt 819261"];
1270 [label="_emittingPdb 819262"];
1271 [label="_cancellationToken 819263"];
1272 [label="_diagnostics 819264"];
1273 [label="_filterOpt 819265"];
1274 [label="_entryPointOpt 819266"];
1275 [label="_hasDeclarationErrors 819267"];
1276 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 819268"];
1277 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 819269"];
1278 [label="param SetGlobalErrorIfTrue(bool arg) 819270"];
1279 [label="param SetGlobalErrorIfTrue(this) 819271"];
1280 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 819272"];
1281 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 819273"];
1282 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 819274"];
1283 [label="_emitTestCoverageData 819275"];
1284 [label="compilation.Options 819276"];
1285 [label="get\n            {\n                return _options;\n            } 819277"];
1286 [label="return _options; 819278"];
1287 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 819279"];
1288 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 819280"];
1289 [label="methodCompiler._compilerTasks 819281"];
1290 [label="compilation.SourceModule 819282"];
1291 [label="get\n            {\n                return Assembly.Modules[0];\n            } 819283"];
1292 [label="Assembly 819284"];
1293 [label="get\n            {\n                return SourceAssembly;\n            } 819285"];
1294 [label="SourceAssembly 819286"];
1295 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 819287"];
1296 [label="GetBoundReferenceManager() 819288"];
1297 [label="param GetBoundReferenceManager(this) 819289"];
1298 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 819290"];
1299 [label="return _referenceManager; 819291"];
1300 [label="GetBoundReferenceManager(); 819292"];
1301 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 819293"];
1302 [label="return Assembly.Modules[0]; 819294"];
1303 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 819295"];
1304 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 819296"];
1305 [label="param CompileNamespace(NamespaceSymbol symbol) 819297"];
1306 [label="param CompileNamespace(this) 819298"];
1307 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 819299"];
1308 [label="s.Accept(this, null); 819300"];
1309 [label="s.Accept(this, null); 819301"];
1310 [label="s.Accept(this, null); 819302"];
1311 [label="param VisitNamedType(NamedTypeSymbol symbol) 819303"];
1312 [label="param VisitNamedType(TypeCompilationState arg) 819304"];
1313 [label="param VisitNamedType(this) 819305"];
1314 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 819306"];
1315 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 819307"];
1316 [label="PassesFilter(_filterOpt, symbol) 819308"];
1317 [label="param PassesFilter(Predicate<Symbol> filterOpt) 819309"];
1318 [label="param PassesFilter(Symbol symbol) 819310"];
1319 [label="return (filterOpt == null) || filterOpt(symbol); 819311"];
1320 [label="return (filterOpt == null) || filterOpt(symbol); 819312"];
1321 [label="arg = null; 819313"];
1322 [label="_cancellationToken.ThrowIfCancellationRequested(); 819314"];
1323 [label="_compilation.Options 819315"];
1324 [label="get\n            {\n                return _options;\n            } 819316"];
1325 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 819317"];
1326 [label="Task worker = CompileNamedTypeAsync(symbol); 819318"];
1327 [label="CompileNamedTypeAsync(symbol) 819319"];
1328 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 819320"];
1329 [label="param CompileNamedTypeAsync(this) 819321"];
1330 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 819322"];
1331 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 819323"];
1332 [label="Task worker = CompileNamedTypeAsync(symbol); 819324"];
1333 [label="_compilerTasks.Push(worker); 819325"];
1334 [label="return null; 819326"];
1335 [label="s.Accept(this, null); 819327"];
1336 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 819328"];
1337 [label="methodCompiler.WaitForWorkers() 819329"];
1338 [label="param WaitForWorkers(this) 819330"];
1339 [label="var tasks = _compilerTasks; 819331"];
1340 [label="if (tasks == null)\n            {\n                return;\n            } 819332"];
1341 [label="if (tasks == null)\n            {\n                return;\n            } 819333"];
1342 [label="Task curTask; 819334"];
1343 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 819335"];
1344 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 819336"];
1345 [label="curTask.GetAwaiter().GetResult(); 819337"];
1346 [label="methodCompiler.WaitForWorkers(); 819338"];
1347 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 819339"];
1348 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 819340"];
1349 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 819341"];
1350 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 819342"];
1351 [label="compilation.AdditionalCodegenWarnings 819343"];
1352 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 819344"];
1353 [label="return _additionalCodegenWarnings; 819345"];
1354 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 819346"];
1355 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 819347"];
1356 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 819348"];
1357 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 819349"];
1358 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 819350"];
1359 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 819351"];
1360 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 819352"];
1361 [label="param WarnUnusedFields(CSharpCompilation compilation) 819353"];
1362 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 819354"];
1363 [label="param WarnUnusedFields(CancellationToken cancellationToken) 819355"];
1364 [label="compilation.Assembly 819356"];
1365 [label="get\n            {\n                return SourceAssembly;\n            } 819357"];
1366 [label="SourceAssembly 819358"];
1367 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 819359"];
1368 [label="GetBoundReferenceManager() 819360"];
1369 [label="param GetBoundReferenceManager(this) 819361"];
1370 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 819362"];
1371 [label="return _referenceManager; 819363"];
1372 [label="GetBoundReferenceManager(); 819364"];
1373 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 819365"];
1374 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 819366"];
1375 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 819367"];
1376 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 819368"];
1377 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 819369"];
1378 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 819370"];
1379 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 819371"];
1380 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 819372"];
1381 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 819373"];
1382 [label="new[] { '\\r\\n', '\\r', '\\n' } 819374"];
1383 [label="'\\r\\n' 819375"];
1384 [label="'\\r' 819376"];
1385 [label="'\\n' 819377"];
1386 [label="new[] { '\\r\\n', '\\r', '\\n' } 819378"];
1387 [label="new[] { '\\r\\n', '\\r', '\\n' } 819379"];
1388 [label="new[] { '\\r\\n', '\\r', '\\n' } 819380"];
1389 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 819381"];
1390 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 819382"];
1391 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 819383"];
1392 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 819384"];
1393 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 819385"];
1394 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 819386"];
1395 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 819387"];
1396 [label="param WriteDocumentationCommentXml(string? assemblyName) 819388"];
1397 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 819389"];
1398 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 819390"];
1399 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 819391"];
1400 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 819392"];
1401 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 819393"];
1402 [label="StreamWriter writer = null; 819394"];
1403 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 819395"];
1404 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 819396"];
1405 [label="compilation.SourceAssembly 819397"];
1406 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 819398"];
1407 [label="GetBoundReferenceManager() 819399"];
1408 [label="param GetBoundReferenceManager(this) 819400"];
1409 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 819401"];
1410 [label="return _referenceManager; 819402"];
1411 [label="GetBoundReferenceManager(); 819403"];
1412 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 819404"];
1413 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819405"];
1414 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819406"];
1415 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819407"];
1416 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819408"];
1417 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819409"];
1418 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819410"];
1419 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819411"];
1420 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819412"];
1421 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 819413"];
1422 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 819414"];
1423 [label="param DocumentationCommentCompiler(string assemblyName) 819415"];
1424 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 819416"];
1425 [label="param DocumentationCommentCompiler(TextWriter writer) 819417"];
1426 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 819418"];
1427 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 819419"];
1428 [label="param DocumentationCommentCompiler(bool processIncludes) 819420"];
1429 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 819421"];
1430 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 819422"];
1431 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 819423"];
1432 [label="param DocumentationCommentCompiler(this) 819424"];
1433 [label="param DocumentationCommentCompiler(this) 819425"];
1434 [label="_assemblyName 819426"];
1435 [label="_compilation 819427"];
1436 [label="_writer 819428"];
1437 [label="_filterTree 819429"];
1438 [label="_filterSpanWithinTree 819430"];
1439 [label="_processIncludes 819431"];
1440 [label="_isForSingleSymbol 819432"];
1441 [label="_diagnostics 819433"];
1442 [label="_lazyComparer 819434"];
1443 [label="_includedFileCache 819435"];
1444 [label="_indentDepth 819436"];
1445 [label="_temporaryStringBuilders 819437"];
1446 [label="_assemblyName 819438"];
1447 [label="_compilation 819439"];
1448 [label="_writer 819440"];
1449 [label="_filterTree 819441"];
1450 [label="_filterSpanWithinTree 819442"];
1451 [label="_processIncludes 819443"];
1452 [label="_isForSingleSymbol 819444"];
1453 [label="_diagnostics 819445"];
1454 [label="_cancellationToken 819446"];
1455 [label="compilation.SourceAssembly 819447"];
1456 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 819448"];
1457 [label="GetBoundReferenceManager() 819449"];
1458 [label="param GetBoundReferenceManager(this) 819450"];
1459 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 819451"];
1460 [label="return _referenceManager; 819452"];
1461 [label="GetBoundReferenceManager(); 819453"];
1462 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 819454"];
1463 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 819455"];
1464 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 819456"];
1465 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 819457"];
1466 [label="param VisitNamespace(NamespaceSymbol symbol) 819458"];
1467 [label="param VisitNamespace(this) 819459"];
1468 [label="_cancellationToken.ThrowIfCancellationRequested(); 819460"];
1469 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 819461"];
1470 [label="Debug.Assert(_assemblyName != null); 819462"];
1471 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 819463"];
1472 [label="WriteLine('<?xml version=\\'1.0\\'?>') 819464"];
1473 [label="param WriteLine(string message) 819465"];
1474 [label="param WriteLine(this) 819466"];
1475 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819467"];
1476 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819468"];
1477 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819469"];
1478 [label="WriteLine('<doc>'); 819470"];
1479 [label="WriteLine('<doc>') 819471"];
1480 [label="param WriteLine(string message) 819472"];
1481 [label="param WriteLine(this) 819473"];
1482 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819474"];
1483 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819475"];
1484 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819476"];
1485 [label="Indent() 819477"];
1486 [label="param Indent(this) 819478"];
1487 [label="_indentDepth 819479"];
1488 [label="Indent(); 819480"];
1489 [label="_compilation.Options 819481"];
1490 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 819482"];
1491 [label="WriteLine('<assembly>'); 819483"];
1492 [label="WriteLine('<assembly>') 819484"];
1493 [label="param WriteLine(string message) 819485"];
1494 [label="param WriteLine(this) 819486"];
1495 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819487"];
1496 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819488"];
1497 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819489"];
1498 [label="Indent() 819490"];
1499 [label="param Indent(this) 819491"];
1500 [label="_indentDepth 819492"];
1501 [label="Indent(); 819493"];
1502 [label="WriteLine('<name>{0}</name>', _assemblyName); 819494"];
1503 [label="WriteLine('<name>{0}</name>', _assemblyName) 819495"];
1504 [label="WriteLine('<name>{0}</name>', _assemblyName) 819496"];
1505 [label="param WriteLine(string format) 819497"];
1506 [label="param WriteLine(params object[] args) 819498"];
1507 [label="param WriteLine(this) 819499"];
1508 [label="WriteLine(string.Format(format, args)); 819500"];
1509 [label="WriteLine(string.Format(format, args)); 819501"];
1510 [label="WriteLine(string.Format(format, args)); 819502"];
1511 [label="WriteLine(string.Format(format, args)) 819503"];
1512 [label="param WriteLine(string message) 819504"];
1513 [label="param WriteLine(this) 819505"];
1514 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819506"];
1515 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819507"];
1516 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819508"];
1517 [label="WriteLine(string.Format(format, args)); 819509"];
1518 [label="Unindent() 819510"];
1519 [label="param Unindent(this) 819511"];
1520 [label="_indentDepth 819512"];
1521 [label="Debug.Assert(_indentDepth >= 0); 819513"];
1522 [label="Debug.Assert(_indentDepth >= 0); 819514"];
1523 [label="Unindent(); 819515"];
1524 [label="WriteLine('</assembly>'); 819516"];
1525 [label="WriteLine('</assembly>') 819517"];
1526 [label="param WriteLine(string message) 819518"];
1527 [label="param WriteLine(this) 819519"];
1528 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819520"];
1529 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819521"];
1530 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819522"];
1531 [label="WriteLine('<members>'); 819523"];
1532 [label="WriteLine('<members>') 819524"];
1533 [label="param WriteLine(string message) 819525"];
1534 [label="param WriteLine(this) 819526"];
1535 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819527"];
1536 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819528"];
1537 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819529"];
1538 [label="Indent() 819530"];
1539 [label="param Indent(this) 819531"];
1540 [label="_indentDepth 819532"];
1541 [label="Indent(); 819533"];
1542 [label="Debug.Assert(!_isForSingleSymbol); 819534"];
1543 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 819535"];
1544 [label="_cancellationToken.ThrowIfCancellationRequested(); 819536"];
1545 [label="s.Accept(this); 819537"];
1546 [label="s.Accept(this); 819538"];
1547 [label="s.Accept(this); 819539"];
1548 [label="param VisitNamedType(NamedTypeSymbol symbol) 819540"];
1549 [label="param VisitNamedType(this) 819541"];
1550 [label="_cancellationToken.ThrowIfCancellationRequested(); 819542"];
1551 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 819543"];
1552 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 819544"];
1553 [label="DefaultVisit(symbol); 819545"];
1554 [label="DefaultVisit(symbol) 819546"];
1555 [label="param DefaultVisit(Symbol symbol) 819547"];
1556 [label="param DefaultVisit(this) 819548"];
1557 [label="_cancellationToken.ThrowIfCancellationRequested(); 819549"];
1558 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 819550"];
1559 [label="ShouldSkip(symbol) 819551"];
1560 [label="param ShouldSkip(Symbol symbol) 819552"];
1561 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 819553"];
1562 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 819554"];
1563 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 819555"];
1564 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 819556"];
1565 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 819557"];
1566 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 819558"];
1567 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 819559"];
1568 [label="DocumentationMode maxDocumentationMode; 819560"];
1569 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 819561"];
1570 [label="docCommentNodes 819562"];
1571 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 819563"];
1572 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 819564"];
1573 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 819565"];
1574 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 819566"];
1575 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 819567"];
1576 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 819568"];
1577 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 819569"];
1578 [label="param TryGetDocumentationCommentNodes(this) 819570"];
1579 [label="maxDocumentationMode = DocumentationMode.None; 819571"];
1580 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 819572"];
1581 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 819573"];
1582 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 819574"];
1583 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 819575"];
1584 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 819576"];
1585 [label="currDocumentationMode > maxDocumentationMode 819577"];
1586 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 819578"];
1587 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 819579"];
1588 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 819580"];
1589 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 819581"];
1590 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 819582"];
1591 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 819583"];
1592 [label="return true; 819584"];
1593 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 819585"];
1594 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 819586"];
1595 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 819587"];
1596 [label="return; 819588"];
1597 [label="DefaultVisit(symbol); 819589"];
1598 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 819590"];
1599 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 819591"];
1600 [label="_cancellationToken.ThrowIfCancellationRequested(); 819592"];
1601 [label="member.Accept(this); 819593"];
1602 [label="member.Accept(this); 819594"];
1603 [label="member.Accept(this); 819595"];
1604 [label="return; 819596"];
1605 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 819597"];
1606 [label="Unindent() 819598"];
1607 [label="Debug.Assert(_indentDepth >= 0); 819599"];
1608 [label="Unindent(); 819600"];
1609 [label="WriteLine('</members>'); 819601"];
1610 [label="WriteLine('</members>') 819602"];
1611 [label="param WriteLine(string message) 819603"];
1612 [label="param WriteLine(this) 819604"];
1613 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819605"];
1614 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819606"];
1615 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819607"];
1616 [label="Unindent() 819608"];
1617 [label="_indentDepth 819609"];
1618 [label="Debug.Assert(_indentDepth >= 0); 819610"];
1619 [label="Debug.Assert(_indentDepth >= 0); 819611"];
1620 [label="Unindent(); 819612"];
1621 [label="WriteLine('</doc>'); 819613"];
1622 [label="WriteLine('</doc>') 819614"];
1623 [label="param WriteLine(string message) 819615"];
1624 [label="param WriteLine(this) 819616"];
1625 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819617"];
1626 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819618"];
1627 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 819619"];
1628 [label="Debug.Assert(compiler._indentDepth == 0); 819620"];
1629 [label="Debug.Assert(compiler._indentDepth == 0); 819621"];
1630 [label="writer?.Flush(); 819622"];
1631 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 819623"];
1632 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 819624"];
1633 [label="compilation.SyntaxTrees 819625"];
1634 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 819626"];
1635 [label="_syntaxAndDeclarations.GetLazyState() 819627"];
1636 [label="param GetLazyState(this) 819628"];
1637 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 819629"];
1638 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 819630"];
1639 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 819631"];
1640 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 819632"];
1641 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 819633"];
1642 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 819634"];
1643 [label="param ReportUnprocessed(SyntaxTree tree) 819635"];
1644 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 819636"];
1645 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 819637"];
1646 [label="param ReportUnprocessed(CancellationToken cancellationToken) 819638"];
1647 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 819639"];
1648 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 819640"];
1649 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 819641"];
1650 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 819642"];
1651 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 819643"];
1652 [label="param ReportUnusedImports(SyntaxTree? filterTree) 819644"];
1653 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 819645"];
1654 [label="param ReportUnusedImports(CancellationToken cancellationToken) 819646"];
1655 [label="param ReportUnusedImports(this) 819647"];
1656 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 819648"];
1657 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 819649"];
1658 [label="CompleteTrees(filterTree); 819650"];
1659 [label="CompleteTrees(filterTree) 819651"];
1660 [label="param CompleteTrees(SyntaxTree? filterTree) 819652"];
1661 [label="param CompleteTrees(this) 819653"];
1662 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 819654"];
1663 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 819655"];
1664 [label="CompleteTrees(filterTree); 819656"];
1665 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 819657"];
1666 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 819658"];
1667 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 819659"];
1668 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 819660"];
1669 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 819661"];
1670 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 819662"];
1671 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 819663"];
1672 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 819664"];
1673 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 819665"];
1674 [label="return diagnostics.ToReadOnlyAndFree(); 819666"];
1675 [label="diagnostics.Verify(expected); 819667"];
1676 [label="diagnostics.Verify(expected); 819668"];
1677 [label="diagnostics.Verify(expected) 819669"];
1678 [label="param Verify(this ImmutableArray<Diagnostic> actual) 819670"];
1679 [label="param Verify(params DiagnosticDescription[] expected) 819671"];
1680 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 819672"];
1681 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 819673"];
1682 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 819674"];
1683 [label="param Verify(this IEnumerable<Diagnostic> actual) 819675"];
1684 [label="param Verify(params DiagnosticDescription[] expected) 819676"];
1685 [label="Verify(actual, expected, errorCodeOnly: false); 819677"];
1686 [label="Verify(actual, expected, errorCodeOnly: false); 819678"];
1687 [label="Verify(actual, expected, errorCodeOnly: false); 819679"];
1688 [label="Verify(actual, expected, errorCodeOnly: false) 819680"];
1689 [label="param Verify(IEnumerable<Diagnostic> actual) 819681"];
1690 [label="param Verify(DiagnosticDescription[] expected) 819682"];
1691 [label="param Verify(bool errorCodeOnly) 819683"];
1692 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 819684"];
1693 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 819685"];
1694 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 819686"];
1695 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 819687"];
1696 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 819688"];
1697 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 819689"];
1698 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 819690"];
1699 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 819691"];
1700 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 819692"];
1701 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 819693"];
1702 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 819694"];
1703 [label="{ } 819695"];
1704 [label="None = { } 819696"];
1705 [label="null 819697"];
1706 [label="Any = null 819698"];
1707 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 819699"];
1708 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 819700"];
1709 [label="DiagnosticDescription.GetAssertText(expected, actual) 819701"];
1710 [label="param GetAssertText(DiagnosticDescription[] expected) 819702"];
1711 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 819703"];
1712 [label="const int CSharp = 1; 819704"];
1713 [label="const int VisualBasic = 2; 819705"];
1714 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 819706"];
1715 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 819707"];
1716 [label="actual.Any() && actual.First() is CSDiagnostic 819708"];
1717 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 819709"];
1718 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 819710"];
1719 [label="int indentDepth = (language == CSharp) ? 4 : 1; 819711"];
1720 [label="(language == CSharp) 819712"];
1721 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 819713"];
1722 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 819714"];
1723 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 819715"];
1724 [label="IsSortedOrEmpty(expected) 819716"];
1725 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 819717"];
1726 [label="new LinePositionComparer() 819718"];
1727 [label="param LinePositionComparer(this) 819719"];
1728 [label="Instance = new LinePositionComparer() 819720"];
1729 [label="var comparer = LinePositionComparer.Instance; 819721"];
1730 [label="DiagnosticDescription last = null; 819722"];
1731 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 819723"];
1732 [label="return true; 819724"];
1733 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 819725"];
1734 [label="actual = Sort(actual); 819726"];
1735 [label="Sort(actual) 819727"];
1736 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 819728"];
1737 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 819729"];
1738 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 819730"];
1739 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 819731"];
1740 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 819732"];
1741 [label="var assertText = new StringBuilder(); 819733"];
1742 [label="assertText.AppendLine(); 819734"];
1743 [label="int i; 819735"];
1744 [label="assertText.AppendLine('Expected:'); 819736"];
1745 [label="assertText.AppendLine('Expected:'); 819737"];
1746 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 819738"];
1747 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 819739"];
1748 [label="GetCommaSeparatedLines(assertText, expectedText); 819740"];
1749 [label="GetCommaSeparatedLines(assertText, expectedText); 819741"];
1750 [label="GetCommaSeparatedLines(assertText, expectedText) 819742"];
1751 [label="param GetCommaSeparatedLines(StringBuilder sb) 819743"];
1752 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 819744"];
1753 [label="int n = lines.Count; 819745"];
1754 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 819746"];
1755 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 819747"];
1756 [label="GetCommaSeparatedLines(assertText, expectedText); 819748"];
1757 [label="assertText.AppendLine('Actual:'); 819749"];
1758 [label="assertText.AppendLine('Actual:'); 819750"];
1759 [label="var actualText = ArrayBuilder<string>.GetInstance(); 819751"];
1760 [label="var e = actual.GetEnumerator(); 819752"];
1761 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 819753"];
1762 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 819754"];
1763 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 819755"];
1764 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 819756"];
1765 [label="assertText.AppendLine('Diff:'); 819757"];
1766 [label="assertText.AppendLine('Diff:'); 819758"];
1767 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 819759"];
1768 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 819760"];
1769 [label="new[] { '\\r', '\\n' } 819761"];
1770 [label="'\\r' 819762"];
1771 [label="'\\n' 819763"];
1772 [label="new[] { '\\r', '\\n' } 819764"];
1773 [label="new[] { '\\r', '\\n' } 819765"];
1774 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 819766"];
1775 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 819767"];
1776 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 819768"];
1777 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 819769"];
1778 [label="param DiffReport(IEnumerable<T> expected) 819770"];
1779 [label="param DiffReport(IEnumerable<T> actual) 819771"];
1780 [label="param DiffReport(string separator) 819772"];
1781 [label="param DiffReport(IEqualityComparer<T> comparer = null) 819773"];
1782 [label="param DiffReport(Func<T, string> toString = null) 819774"];
1783 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 819775"];
1784 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 819776"];
1785 [label="(comparer != null) 819777"];
1786 [label="EqualityComparer<T>.Default 819778"];
1787 [label="new LCS<T>(EqualityComparer<T>.Default) 819779"];
1788 [label="param LCS(IEqualityComparer<T> comparer) 819780"];
1789 [label="param LCS(this) 819781"];
1790 [label="1 819782"];
1791 [label="DeleteCost = 1 819783"];
1792 [label="1 819784"];
1793 [label="InsertCost = 1 819785"];
1794 [label="2 819786"];
1795 [label="UpdateCost = 2 819787"];
1796 [label="param LongestCommonSubsequence(this) 819788"];
1797 [label="_comparer 819789"];
1798 [label="_comparer 819790"];
1799 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 819791"];
1800 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 819792"];
1801 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 819793"];
1802 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 819794"];
1803 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 819795"];
1804 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 819796"];
1805 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 819797"];
1806 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 819798"];
1807 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 819799"];
1808 [label="lcs.CalculateDiff(expectedList, actualList, toString) 819800"];
1809 [label="param CalculateDiff(IList<T> sequenceA) 819801"];
1810 [label="param CalculateDiff(IList<T> sequenceB) 819802"];
1811 [label="param CalculateDiff(Func<T, string> toString) 819803"];
1812 [label="param CalculateDiff(this) 819804"];
1813 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 819805"];
1814 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 819806"];
1815 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 819807"];
1816 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 819808"];
1817 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 819809"];
1818 [label="param GetEdits(TSequence sequenceA) 819810"];
1819 [label="param GetEdits(int lengthA) 819811"];
1820 [label="param GetEdits(TSequence sequenceB) 819812"];
1821 [label="param GetEdits(int lengthB) 819813"];
1822 [label="param GetEdits(this) 819814"];
1823 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 819815"];
1824 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 819816"];
1825 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 819817"];
1826 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 819818"];
1827 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 819819"];
1828 [label="param ComputeCostMatrix(TSequence sequenceA) 819820"];
1829 [label="param ComputeCostMatrix(int lengthA) 819821"];
1830 [label="param ComputeCostMatrix(TSequence sequenceB) 819822"];
1831 [label="param ComputeCostMatrix(int lengthB) 819823"];
1832 [label="param ComputeCostMatrix(this) 819824"];
1833 [label="var la = lengthA + 1; 819825"];
1834 [label="var la = lengthA + 1; 819826"];
1835 [label="var lb = lengthB + 1; 819827"];
1836 [label="var lb = lengthB + 1; 819828"];
1837 [label="var d = new int[la, lb]; 819829"];
1838 [label="d[0, 0] = 0; 819830"];
1839 [label="d[0, 0] 819831"];
1840 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 819832"];
1841 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 819833"];
1842 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 819834"];
1843 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 819835"];
1844 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 819836"];
1845 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 819837"];
1846 [label="return d; 819838"];
1847 [label="int i = lengthA; 819839"];
1848 [label="int j = lengthB; 819840"];
1849 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 819841"];
1850 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 819842"];
1851 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 819843"];
1852 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 819844"];
1853 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 819845"];
1854 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 819846"];
1855 [label="param GetEdits(this) 819847"];
1856 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 819848"];
1857 [label="param CalculateDiff(this) 819849"];
1858 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 819850"];
1859 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 819851"];
1860 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 819852"];
1861 [label="actualText.Free(); 819853"];
1862 [label="expectedText.Free(); 819854"];
1863 [label="return assertText.ToString(); 819855"];
1864 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 819856"];
1865 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 819857"];
1866 [label="diagnostics.Verify(expected); 819858"];
1867 [label="VerifyAssemblyIds(c, diagnostics); 819859"];
1868 [label="VerifyAssemblyIds(c, diagnostics); 819860"];
1869 [label="VerifyAssemblyIds(c, diagnostics) 819861"];
1870 [label="param VerifyAssemblyIds(TCompilation c) 819862"];
1871 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 819863"];
1872 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 819864"];
1873 [label="VerifyAssemblyIds(c, diagnostics); 819865"];
1874 [label="return c; 819866"];
1875 [label="var result = compilation.Emit(new MemoryStream(), options: new EmitOptions(outputNameOverride: 'x\\0x')); 819867"];
1876 [label="var result = compilation.Emit(new MemoryStream(), options: new EmitOptions(outputNameOverride: 'x\\0x')); 819868"];
1877 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 819869"];
1878 [label="result.Diagnostics 819870"];
1879 [label="param Diagnostic(object code) 819871"];
1880 [label="param Diagnostic(string squiggledText = null) 819872"];
1881 [label="param Diagnostic(object[] arguments = null) 819873"];
1882 [label="param Diagnostic(LinePosition? startLocation = null) 819874"];
1883 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 819875"];
1884 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 819876"];
1885 [label="param Diagnostic(bool isSuppressed = false) 819877"];
1886 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819878"];
1887 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819879"];
1888 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819880"];
1889 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819881"];
1890 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819882"];
1891 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819883"];
1892 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819884"];
1893 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 819885"];
1894 [label="param Diagnostic(object code) 819886"];
1895 [label="param Diagnostic(string squiggledText = null) 819887"];
1896 [label="param Diagnostic(object[] arguments = null) 819888"];
1897 [label="param Diagnostic(LinePosition? startLocation = null) 819889"];
1898 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 819890"];
1899 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 819891"];
1900 [label="param Diagnostic(bool isSuppressed = false) 819892"];
1901 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 819893"];
1902 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819894"];
1903 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819895"];
1904 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819896"];
1905 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819897"];
1906 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819898"];
1907 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819899"];
1908 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819900"];
1909 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 819901"];
1910 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 819902"];
1911 [label="param DiagnosticDescription(object code) 819903"];
1912 [label="param DiagnosticDescription(bool isWarningAsError) 819904"];
1913 [label="param DiagnosticDescription(string squiggledText) 819905"];
1914 [label="param DiagnosticDescription(object[] arguments) 819906"];
1915 [label="param DiagnosticDescription(LinePosition? startLocation) 819907"];
1916 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 819908"];
1917 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 819909"];
1918 [label="param DiagnosticDescription(Type errorCodeType = null) 819910"];
1919 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 819911"];
1920 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 819912"];
1921 [label="param DiagnosticDescription(bool isSuppressed = false) 819913"];
1922 [label="param DiagnosticDescription(this) 819914"];
1923 [label="_code 819915"];
1924 [label="_isWarningAsError 819916"];
1925 [label="_isSuppressed 819917"];
1926 [label="_squiggledText 819918"];
1927 [label="_arguments 819919"];
1928 [label="_startPosition 819920"];
1929 [label="_argumentOrderDoesNotMatter 819921"];
1930 [label="_errorCodeType 819922"];
1931 [label="_ignoreArgumentsWhenComparing 819923"];
1932 [label="_defaultSeverityOpt 819924"];
1933 [label="_effectiveSeverityOpt 819925"];
1934 [label="_syntaxPredicate 819926"];
1935 [label="_showPredicate 819927"];
1936 [label="_location 819928"];
1937 [label="_argumentsAsStrings 819929"];
1938 [label="_code 819930"];
1939 [label="_isWarningAsError 819931"];
1940 [label="_squiggledText 819932"];
1941 [label="_arguments 819933"];
1942 [label="_startPosition 819934"];
1943 [label="_syntaxPredicate 819935"];
1944 [label="_argumentOrderDoesNotMatter 819936"];
1945 [label="_errorCodeType = errorCodeType ?? code.GetType(); 819937"];
1946 [label="_errorCodeType 819938"];
1947 [label="_defaultSeverityOpt 819939"];
1948 [label="_effectiveSeverityOpt 819940"];
1949 [label="_isSuppressed 819941"];
1950 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 819942"];
1951 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 819943"];
1952 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 819944"];
1953 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 819945"];
1954 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 819946"];
1955 [label="Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.') 819947"];
1956 [label="Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.') 819948"];
1957 [label="param WithArguments(params object[] arguments) 819949"];
1958 [label="param WithArguments(this) 819950"];
1959 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 819951"];
1960 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 819952"];
1961 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 819953"];
1962 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 819954"];
1963 [label="param DiagnosticDescription(object code) 819955"];
1964 [label="param DiagnosticDescription(bool isWarningAsError) 819956"];
1965 [label="param DiagnosticDescription(string squiggledText) 819957"];
1966 [label="param DiagnosticDescription(object[] arguments) 819958"];
1967 [label="param DiagnosticDescription(LinePosition? startLocation) 819959"];
1968 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 819960"];
1969 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 819961"];
1970 [label="param DiagnosticDescription(Type errorCodeType = null) 819962"];
1971 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 819963"];
1972 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 819964"];
1973 [label="param DiagnosticDescription(bool isSuppressed = false) 819965"];
1974 [label="param DiagnosticDescription(this) 819966"];
1975 [label="_code 819967"];
1976 [label="_isWarningAsError 819968"];
1977 [label="_isSuppressed 819969"];
1978 [label="_squiggledText 819970"];
1979 [label="_arguments 819971"];
1980 [label="_startPosition 819972"];
1981 [label="_argumentOrderDoesNotMatter 819973"];
1982 [label="_errorCodeType 819974"];
1983 [label="_ignoreArgumentsWhenComparing 819975"];
1984 [label="_defaultSeverityOpt 819976"];
1985 [label="_effectiveSeverityOpt 819977"];
1986 [label="_syntaxPredicate 819978"];
1987 [label="_showPredicate 819979"];
1988 [label="_location 819980"];
1989 [label="_argumentsAsStrings 819981"];
1990 [label="_code 819982"];
1991 [label="_isWarningAsError 819983"];
1992 [label="_squiggledText 819984"];
1993 [label="_arguments 819985"];
1994 [label="_startPosition 819986"];
1995 [label="_syntaxPredicate 819987"];
1996 [label="_argumentOrderDoesNotMatter 819988"];
1997 [label="_errorCodeType = errorCodeType ?? code.GetType(); 819989"];
1998 [label="_errorCodeType 819990"];
1999 [label="_defaultSeverityOpt 819991"];
2000 [label="_effectiveSeverityOpt 819992"];
2001 [label="_isSuppressed 819993"];
2002 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 819994"];
2003 [label="Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1) 819995"];
2004 [label="param WithLocation(int line) 819996"];
2005 [label="param WithLocation(int column) 819997"];
2006 [label="param WithLocation(this) 819998"];
2007 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 819999"];
2008 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820000"];
2009 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820001"];
2010 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820002"];
2011 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820003"];
2012 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820004"];
2013 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820005"];
2014 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820006"];
2015 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820007"];
2016 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820008"];
2017 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820009"];
2018 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820010"];
2019 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820011"];
2020 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 820012"];
2021 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 820013"];
2022 [label="param DiagnosticDescription(object code) 820014"];
2023 [label="param DiagnosticDescription(bool isWarningAsError) 820015"];
2024 [label="param DiagnosticDescription(string squiggledText) 820016"];
2025 [label="param DiagnosticDescription(object[] arguments) 820017"];
2026 [label="param DiagnosticDescription(LinePosition? startLocation) 820018"];
2027 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 820019"];
2028 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 820020"];
2029 [label="param DiagnosticDescription(Type errorCodeType = null) 820021"];
2030 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 820022"];
2031 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 820023"];
2032 [label="param DiagnosticDescription(bool isSuppressed = false) 820024"];
2033 [label="param DiagnosticDescription(this) 820025"];
2034 [label="_code 820026"];
2035 [label="_isWarningAsError 820027"];
2036 [label="_isSuppressed 820028"];
2037 [label="_squiggledText 820029"];
2038 [label="_arguments 820030"];
2039 [label="_startPosition 820031"];
2040 [label="_argumentOrderDoesNotMatter 820032"];
2041 [label="_errorCodeType 820033"];
2042 [label="_ignoreArgumentsWhenComparing 820034"];
2043 [label="_defaultSeverityOpt 820035"];
2044 [label="_effectiveSeverityOpt 820036"];
2045 [label="_syntaxPredicate 820037"];
2046 [label="_showPredicate 820038"];
2047 [label="_location 820039"];
2048 [label="_argumentsAsStrings 820040"];
2049 [label="_startPosition 820041"];
2050 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)); 820042"];
2051 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)) 820043"];
2052 [label="result.Diagnostics.Verify(\n                // error CS2041: Invalid output name: Name contains invalid characters.\n                Diagnostic(ErrorCode.ERR_InvalidOutputName).WithArguments('Name contains invalid characters.').WithLocation(1, 1)) 820044"];
2053 [label="param Verify(this ImmutableArray<Diagnostic> actual) 820045"];
2054 [label="param Verify(params DiagnosticDescription[] expected) 820046"];
2055 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 820047"];
2056 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 820048"];
2057 [label="param Verify(params DiagnosticDescription[] expected) 820049"];
2058 [label="Verify(actual, expected, errorCodeOnly: false); 820050"];
2059 [label="Verify(actual, expected, errorCodeOnly: false); 820051"];
2060 [label="Verify(actual, expected, errorCodeOnly: false) 820052"];
2061 [label="param Verify(DiagnosticDescription[] expected) 820053"];
2062 [label="param Verify(bool errorCodeOnly) 820054"];
2063 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 820055"];
2064 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 820056"];
2065 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 820057"];
2066 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 820058"];
2067 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 820059"];
2068 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 820060"];
2069 [label="=> _defaultSeverityOpt 820061"];
2070 [label="_defaultSeverityOpt 820062"];
2071 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 820063"];
2072 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 820064"];
2073 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 820065"];
2074 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 820066"];
2075 [label="=> _effectiveSeverityOpt 820067"];
2076 [label="_effectiveSeverityOpt 820068"];
2077 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 820069"];
2078 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 820070"];
2079 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 820071"];
2080 [label="param DiagnosticDescription(Diagnostic d) 820072"];
2081 [label="param DiagnosticDescription(bool errorCodeOnly) 820073"];
2082 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 820074"];
2083 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 820075"];
2084 [label="param DiagnosticDescription(this) 820076"];
2085 [label="_code 820077"];
2086 [label="_isWarningAsError 820078"];
2087 [label="_isSuppressed 820079"];
2088 [label="_squiggledText 820080"];
2089 [label="_arguments 820081"];
2090 [label="_startPosition 820082"];
2091 [label="_argumentOrderDoesNotMatter 820083"];
2092 [label="_errorCodeType 820084"];
2093 [label="_defaultSeverityOpt 820085"];
2094 [label="_effectiveSeverityOpt 820086"];
2095 [label="_syntaxPredicate 820087"];
2096 [label="_code 820088"];
2097 [label="_isWarningAsError 820089"];
2098 [label="_isSuppressed 820090"];
2099 [label="_location 820091"];
2100 [label="includeDefaultSeverity 820092"];
2101 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 820093"];
2102 [label="_defaultSeverityOpt 820094"];
2103 [label="includeEffectiveSeverity 820095"];
2104 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 820096"];
2105 [label="_effectiveSeverityOpt 820097"];
2106 [label="DiagnosticWithInfo dinfo = null; 820098"];
2107 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 820099"];
2108 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 820100"];
2109 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 820101"];
2110 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 820102"];
2111 [label="dinfo = d as DiagnosticWithInfo; 820103"];
2112 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 820104"];
2113 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 820105"];
2114 [label="_errorCodeType 820106"];
2115 [label="_code 820107"];
2116 [label="_ignoreArgumentsWhenComparing 820108"];
2117 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 820109"];
2118 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 820110"];
2119 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 820111"];
2120 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 820112"];
2121 [label="_arguments 820113"];
2122 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 820114"];
2123 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 820115"];
2124 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 820116"];
2125 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 820117"];
2126 [label="_startPosition 820118"];
2127 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 820119"];
2128 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 820120"];
2129 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 820121"];
2130 [label="int index = unmatched.IndexOf(d); 820122"];
2131 [label="int index = unmatched.IndexOf(d); 820123"];
2132 [label="param Equals(object obj) 820124"];
2133 [label="param Equals(this) 820125"];
2134 [label="var d = obj as DiagnosticDescription; 820126"];
2135 [label="if (d == null)\n                return false; 820127"];
2136 [label="if (d == null)\n                return false; 820128"];
2137 [label="if (!_code.Equals(d._code))\n                return false; 820129"];
2138 [label="if (!_code.Equals(d._code))\n                return false; 820130"];
2139 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 820131"];
2140 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 820132"];
2141 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 820133"];
2142 [label="if (_squiggledText != d._squiggledText)\n                    return false; 820134"];
2143 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 820135"];
2144 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 820136"];
2145 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 820137"];
2146 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 820138"];
2147 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 820139"];
2148 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 820140"];
2149 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 820141"];
2150 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 820142"];
2151 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 820143"];
2152 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 820144"];
2153 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 820145"];
2154 [label="if (d._arguments == null)\n                    return false; 820146"];
2155 [label="GetArgumentsAsStrings() 820147"];
2156 [label="param GetArgumentsAsStrings(this) 820148"];
2157 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 820149"];
2158 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 820150"];
2159 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 820151"];
2160 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 820152"];
2161 [label="_argumentsAsStrings 820153"];
2162 [label="return _argumentsAsStrings; 820154"];
2163 [label="var args1 = GetArgumentsAsStrings(); 820155"];
2164 [label="d.GetArgumentsAsStrings() 820156"];
2165 [label="param GetArgumentsAsStrings(this) 820157"];
2166 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 820158"];
2167 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 820159"];
2168 [label="return _argumentsAsStrings; 820160"];
2169 [label="var args2 = d.GetArgumentsAsStrings(); 820161"];
2170 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 820162"];
2171 [label="if (!args1.SequenceEqual(args2))\n                        return false; 820163"];
2172 [label="if (!args1.SequenceEqual(args2))\n                        return false; 820164"];
2173 [label="if (!args1.SequenceEqual(args2))\n                        return false; 820165"];
2174 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 820166"];
2175 [label="return true; 820167"];
2176 [label="int index = unmatched.IndexOf(d); 820168"];
2177 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 820169"];
2178 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 820170"];
2179 [label="unmatched.RemoveAt(index); 820171"];
2180 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 820172"];
2181 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 820173"];
2182 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 820174"];
2183 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 820175"];
2184 [label="DiagnosticDescription.GetAssertText(expected, actual) 820176"];
2185 [label="param GetAssertText(DiagnosticDescription[] expected) 820177"];
2186 [label="const int CSharp = 1; 820178"];
2187 [label="const int VisualBasic = 2; 820179"];
2188 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 820180"];
2189 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 820181"];
2190 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 820182"];
2191 [label="actual.Any() && actual.First() is CSDiagnostic 820183"];
2192 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 820184"];
2193 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 820185"];
2194 [label="int indentDepth = (language == CSharp) ? 4 : 1; 820186"];
2195 [label="(language == CSharp) 820187"];
2196 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 820188"];
2197 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 820189"];
2198 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 820190"];
2199 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 820191"];
2200 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 820192"];
2201 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 820193"];
2202 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 820194"];
2203 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 820195"];
2204 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 820196"];
2205 [label="IsSortedOrEmpty(expected) 820197"];
2206 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 820198"];
2207 [label="var comparer = LinePositionComparer.Instance; 820199"];
2208 [label="DiagnosticDescription last = null; 820200"];
2209 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 820201"];
2210 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 820202"];
2211 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 820203"];
2212 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 820204"];
2213 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 820205"];
2214 [label="last = diagnostic; 820206"];
2215 [label="return true; 820207"];
2216 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 820208"];
2217 [label="Sort(actual) 820209"];
2218 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 820210"];
2219 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 820211"];
2220 [label="var assertText = new StringBuilder(); 820212"];
2221 [label="assertText.AppendLine(); 820213"];
2222 [label="int i; 820214"];
2223 [label="assertText.AppendLine('Expected:'); 820215"];
2224 [label="assertText.AppendLine('Expected:'); 820216"];
2225 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 820217"];
2226 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 820218"];
2227 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 820219"];
2228 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 820220"];
2229 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 820221"];
2230 [label="GetDiagnosticDescription(d, indentDepth) 820222"];
2231 [label="param GetDiagnosticDescription(DiagnosticDescription d) 820223"];
2232 [label="param GetDiagnosticDescription(int indentDepth) 820224"];
2233 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820225"];
2234 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820226"];
2235 [label="d.ToString() 820227"];
2236 [label="param ToString(this) 820228"];
2237 [label="var sb = new StringBuilder(); 820229"];
2238 [label="sb.Append('Diagnostic('); 820230"];
2239 [label="sb.Append('Diagnostic('); 820231"];
2240 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 820232"];
2241 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 820233"];
2242 [label="sb.Append(_errorCodeType.Name); 820234"];
2243 [label="sb.Append(_errorCodeType.Name); 820235"];
2244 [label="sb.Append('.'); 820236"];
2245 [label="sb.Append('.'); 820237"];
2246 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 820238"];
2247 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 820239"];
2248 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 820240"];
2249 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 820241"];
2250 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 820242"];
2251 [label="sb.Append(')'); 820243"];
2252 [label="sb.Append(')'); 820244"];
2253 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 820245"];
2254 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 820246"];
2255 [label="sb.Append('.WithArguments('); 820247"];
2256 [label="sb.Append('.WithArguments('); 820248"];
2257 [label="GetArgumentsAsStrings() 820249"];
2258 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 820250"];
2259 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 820251"];
2260 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 820252"];
2261 [label="sb.Append('\\''); 820253"];
2262 [label="sb.Append('\\''); 820254"];
2263 [label="sb.Append(argumentStrings.Current); 820255"];
2264 [label="sb.Append(argumentStrings.Current); 820256"];
2265 [label="sb.Append('\\''); 820257"];
2266 [label="sb.Append('\\''); 820258"];
2267 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 820259"];
2268 [label="sb.Append(')'); 820260"];
2269 [label="sb.Append(')'); 820261"];
2270 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 820262"];
2271 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 820263"];
2272 [label="sb.Append('.WithLocation('); 820264"];
2273 [label="sb.Append('.WithLocation('); 820265"];
2274 [label="sb.Append(_startPosition.Value.Line + 1); 820266"];
2275 [label="sb.Append(_startPosition.Value.Line + 1); 820267"];
2276 [label="sb.Append(', '); 820268"];
2277 [label="sb.Append(', '); 820269"];
2278 [label="sb.Append(_startPosition.Value.Character + 1); 820270"];
2279 [label="sb.Append(_startPosition.Value.Character + 1); 820271"];
2280 [label="sb.Append(')'); 820272"];
2281 [label="sb.Append(')'); 820273"];
2282 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 820274"];
2283 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 820275"];
2284 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 820276"];
2285 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 820277"];
2286 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 820278"];
2287 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 820279"];
2288 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 820280"];
2289 [label="return sb.ToString(); 820281"];
2290 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820282"];
2291 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820283"];
2292 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 820284"];
2293 [label="GetCommaSeparatedLines(assertText, expectedText); 820285"];
2294 [label="GetCommaSeparatedLines(assertText, expectedText); 820286"];
2295 [label="GetCommaSeparatedLines(assertText, expectedText) 820287"];
2296 [label="param GetCommaSeparatedLines(StringBuilder sb) 820288"];
2297 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 820289"];
2298 [label="int n = lines.Count; 820290"];
2299 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 820291"];
2300 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 820292"];
2301 [label="sb.Append(lines[i]); 820293"];
2302 [label="sb.Append(lines[i]); 820294"];
2303 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 820295"];
2304 [label="sb.AppendLine(); 820296"];
2305 [label="GetCommaSeparatedLines(assertText, expectedText); 820297"];
2306 [label="assertText.AppendLine('Actual:'); 820298"];
2307 [label="assertText.AppendLine('Actual:'); 820299"];
2308 [label="var actualText = ArrayBuilder<string>.GetInstance(); 820300"];
2309 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 820301"];
2310 [label="Diagnostic d = e.Current; 820302"];
2311 [label="string message = d.ToString(); 820303"];
2312 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 820304"];
2313 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 820305"];
2314 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 820306"];
2315 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 820307"];
2316 [label="Indent(assertText, indentDepth); 820308"];
2317 [label="Indent(assertText, indentDepth); 820309"];
2318 [label="Indent(assertText, indentDepth) 820310"];
2319 [label="param Indent(StringBuilder sb) 820311"];
2320 [label="param Indent(int count) 820312"];
2321 [label="sb.Append(' ', 4 * count); 820313"];
2322 [label="sb.Append(' ', 4 * count); 820314"];
2323 [label="sb.Append(' ', 4 * count); 820315"];
2324 [label="Indent(assertText, indentDepth); 820316"];
2325 [label="assertText.Append('// '); 820317"];
2326 [label="assertText.Append('// '); 820318"];
2327 [label="assertText.AppendLine(d.ToString()); 820319"];
2328 [label="assertText.AppendLine(d.ToString()); 820320"];
2329 [label="var l = d.Location; 820321"];
2330 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 820322"];
2331 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 820323"];
2332 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 820324"];
2333 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 820325"];
2334 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 820326"];
2335 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 820327"];
2336 [label="param DiagnosticDescription(Diagnostic d) 820328"];
2337 [label="param DiagnosticDescription(bool errorCodeOnly) 820329"];
2338 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 820330"];
2339 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 820331"];
2340 [label="param DiagnosticDescription(this) 820332"];
2341 [label="_code 820333"];
2342 [label="_isWarningAsError 820334"];
2343 [label="_isSuppressed 820335"];
2344 [label="_arguments 820336"];
2345 [label="_startPosition 820337"];
2346 [label="_errorCodeType 820338"];
2347 [label="_defaultSeverityOpt 820339"];
2348 [label="_effectiveSeverityOpt 820340"];
2349 [label="_code 820341"];
2350 [label="_isWarningAsError 820342"];
2351 [label="_isSuppressed 820343"];
2352 [label="_location 820344"];
2353 [label="DiagnosticWithInfo dinfo = null; 820345"];
2354 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 820346"];
2355 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 820347"];
2356 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 820348"];
2357 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 820349"];
2358 [label="var diffDescription = description; 820350"];
2359 [label="var idx = Array.IndexOf(expected, description); 820351"];
2360 [label="var idx = Array.IndexOf(expected, description); 820352"];
2361 [label="var idx = Array.IndexOf(expected, description); 820353"];
2362 [label="var idx = Array.IndexOf(expected, description); 820354"];
2363 [label="if (d == null)\n                return false; 820355"];
2364 [label="if (d == null)\n                return false; 820356"];
2365 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 820357"];
2366 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 820358"];
2367 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 820359"];
2368 [label="if (_squiggledText != d._squiggledText)\n                    return false; 820360"];
2369 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 820361"];
2370 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 820362"];
2371 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 820363"];
2372 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 820364"];
2373 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 820365"];
2374 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 820366"];
2375 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 820367"];
2376 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 820368"];
2377 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 820369"];
2378 [label="if (d._arguments == null)\n                    return false; 820370"];
2379 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 820371"];
2380 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 820372"];
2381 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 820373"];
2382 [label="diffDescription = expected[idx]; 820374"];
2383 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 820375"];
2384 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 820376"];
2385 [label="GetDiagnosticDescription(description, indentDepth) 820377"];
2386 [label="param GetDiagnosticDescription(DiagnosticDescription d) 820378"];
2387 [label="param GetDiagnosticDescription(int indentDepth) 820379"];
2388 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820380"];
2389 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820381"];
2390 [label="var sb = new StringBuilder(); 820382"];
2391 [label="sb.Append('Diagnostic('); 820383"];
2392 [label="sb.Append('Diagnostic('); 820384"];
2393 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 820385"];
2394 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 820386"];
2395 [label="sb.Append(_errorCodeType.Name); 820387"];
2396 [label="sb.Append(_errorCodeType.Name); 820388"];
2397 [label="sb.Append('.'); 820389"];
2398 [label="sb.Append('.'); 820390"];
2399 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 820391"];
2400 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 820392"];
2401 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 820393"];
2402 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 820394"];
2403 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 820395"];
2404 [label="sb.Append(')'); 820396"];
2405 [label="sb.Append(')'); 820397"];
2406 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 820398"];
2407 [label="sb.Append('.WithArguments('); 820399"];
2408 [label="sb.Append('.WithArguments('); 820400"];
2409 [label="sb.Append('\\''); 820401"];
2410 [label="sb.Append('\\''); 820402"];
2411 [label="sb.Append(argumentStrings.Current); 820403"];
2412 [label="sb.Append(argumentStrings.Current); 820404"];
2413 [label="sb.Append('\\''); 820405"];
2414 [label="sb.Append('\\''); 820406"];
2415 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 820407"];
2416 [label="sb.Append(')'); 820408"];
2417 [label="sb.Append(')'); 820409"];
2418 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 820410"];
2419 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 820411"];
2420 [label="sb.Append('.WithLocation('); 820412"];
2421 [label="sb.Append('.WithLocation('); 820413"];
2422 [label="sb.Append(_startPosition.Value.Line + 1); 820414"];
2423 [label="sb.Append(_startPosition.Value.Line + 1); 820415"];
2424 [label="sb.Append(', '); 820416"];
2425 [label="sb.Append(', '); 820417"];
2426 [label="sb.Append(_startPosition.Value.Character + 1); 820418"];
2427 [label="sb.Append(_startPosition.Value.Character + 1); 820419"];
2428 [label="sb.Append(')'); 820420"];
2429 [label="sb.Append(')'); 820421"];
2430 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 820422"];
2431 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 820423"];
2432 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 820424"];
2433 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 820425"];
2434 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 820426"];
2435 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 820427"];
2436 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 820428"];
2437 [label="return sb.ToString(); 820429"];
2438 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820430"];
2439 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820431"];
2440 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 820432"];
2441 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 820433"];
2442 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 820434"];
2443 [label="GetDiagnosticDescription(diffDescription, indentDepth) 820435"];
2444 [label="param GetDiagnosticDescription(DiagnosticDescription d) 820436"];
2445 [label="param GetDiagnosticDescription(int indentDepth) 820437"];
2446 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820438"];
2447 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820439"];
2448 [label="var sb = new StringBuilder(); 820440"];
2449 [label="sb.Append('Diagnostic('); 820441"];
2450 [label="sb.Append('Diagnostic('); 820442"];
2451 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 820443"];
2452 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 820444"];
2453 [label="sb.Append(_errorCodeType.Name); 820445"];
2454 [label="sb.Append(_errorCodeType.Name); 820446"];
2455 [label="sb.Append('.'); 820447"];
2456 [label="sb.Append('.'); 820448"];
2457 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 820449"];
2458 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 820450"];
2459 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 820451"];
2460 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 820452"];
2461 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 820453"];
2462 [label="sb.Append(')'); 820454"];
2463 [label="sb.Append(')'); 820455"];
2464 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 820456"];
2465 [label="sb.Append('.WithArguments('); 820457"];
2466 [label="sb.Append('.WithArguments('); 820458"];
2467 [label="sb.Append('\\''); 820459"];
2468 [label="sb.Append('\\''); 820460"];
2469 [label="sb.Append(argumentStrings.Current); 820461"];
2470 [label="sb.Append(argumentStrings.Current); 820462"];
2471 [label="sb.Append('\\''); 820463"];
2472 [label="sb.Append('\\''); 820464"];
2473 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 820465"];
2474 [label="sb.Append(')'); 820466"];
2475 [label="sb.Append(')'); 820467"];
2476 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 820468"];
2477 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 820469"];
2478 [label="sb.Append('.WithLocation('); 820470"];
2479 [label="sb.Append('.WithLocation('); 820471"];
2480 [label="sb.Append(_startPosition.Value.Line + 1); 820472"];
2481 [label="sb.Append(_startPosition.Value.Line + 1); 820473"];
2482 [label="sb.Append(', '); 820474"];
2483 [label="sb.Append(', '); 820475"];
2484 [label="sb.Append(_startPosition.Value.Character + 1); 820476"];
2485 [label="sb.Append(_startPosition.Value.Character + 1); 820477"];
2486 [label="sb.Append(')'); 820478"];
2487 [label="sb.Append(')'); 820479"];
2488 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 820480"];
2489 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 820481"];
2490 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 820482"];
2491 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 820483"];
2492 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 820484"];
2493 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 820485"];
2494 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 820486"];
2495 [label="return sb.ToString(); 820487"];
2496 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820488"];
2497 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 820489"];
2498 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 820490"];
2499 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 820491"];
2500 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 820492"];
2501 [label="assertText.AppendLine(); 820493"];
2502 [label="assertText.AppendLine('Diff:'); 820494"];
2503 [label="assertText.AppendLine('Diff:'); 820495"];
2504 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 820496"];
2505 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 820497"];
2506 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 820498"];
2507 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 820499"];
2508 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 820500"];
2509 [label="param DiffReport(IEnumerable<T> expected) 820501"];
2510 [label="param DiffReport(IEnumerable<T> actual) 820502"];
2511 [label="param DiffReport(string separator) 820503"];
2512 [label="param DiffReport(IEqualityComparer<T> comparer = null) 820504"];
2513 [label="param DiffReport(Func<T, string> toString = null) 820505"];
2514 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 820506"];
2515 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 820507"];
2516 [label="(comparer != null) 820508"];
2517 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 820509"];
2518 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 820510"];
2519 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 820511"];
2520 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 820512"];
2521 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 820513"];
2522 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 820514"];
2523 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 820515"];
2524 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 820516"];
2525 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 820517"];
2526 [label="lcs.CalculateDiff(expectedList, actualList, toString) 820518"];
2527 [label="param CalculateDiff(IList<T> sequenceA) 820519"];
2528 [label="param CalculateDiff(IList<T> sequenceB) 820520"];
2529 [label="param CalculateDiff(Func<T, string> toString) 820521"];
2530 [label="param CalculateDiff(this) 820522"];
2531 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 820523"];
2532 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 820524"];
2533 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 820525"];
2534 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 820526"];
2535 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 820527"];
2536 [label="param GetEdits(TSequence sequenceA) 820528"];
2537 [label="param GetEdits(int lengthA) 820529"];
2538 [label="param GetEdits(TSequence sequenceB) 820530"];
2539 [label="param GetEdits(int lengthB) 820531"];
2540 [label="param GetEdits(this) 820532"];
2541 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 820533"];
2542 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 820534"];
2543 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 820535"];
2544 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 820536"];
2545 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 820537"];
2546 [label="param ComputeCostMatrix(TSequence sequenceA) 820538"];
2547 [label="param ComputeCostMatrix(int lengthA) 820539"];
2548 [label="param ComputeCostMatrix(TSequence sequenceB) 820540"];
2549 [label="param ComputeCostMatrix(int lengthB) 820541"];
2550 [label="param ComputeCostMatrix(this) 820542"];
2551 [label="var la = lengthA + 1; 820543"];
2552 [label="var la = lengthA + 1; 820544"];
2553 [label="var lb = lengthB + 1; 820545"];
2554 [label="var lb = lengthB + 1; 820546"];
2555 [label="var d = new int[la, lb]; 820547"];
2556 [label="d[0, 0] = 0; 820548"];
2557 [label="d[0, 0] 820549"];
2558 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 820550"];
2559 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 820551"];
2560 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 820552"];
2561 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 820553"];
2562 [label="d[i, 0] 820554"];
2563 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 820555"];
2564 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 820556"];
2565 [label="d[0, j] = d[0, j - 1] + InsertCost; 820557"];
2566 [label="d[0, j] = d[0, j - 1] + InsertCost; 820558"];
2567 [label="d[0, j] 820559"];
2568 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 820560"];
2569 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 820561"];
2570 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 820562"];
2571 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 820563"];
2572 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 820564"];
2573 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 820565"];
2574 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 820566"];
2575 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 820567"];
2576 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 820568"];
2577 [label="param ItemsEqual(IList<T> sequenceA) 820569"];
2578 [label="param ItemsEqual(int indexA) 820570"];
2579 [label="param ItemsEqual(IList<T> sequenceB) 820571"];
2580 [label="param ItemsEqual(int indexB) 820572"];
2581 [label="param ItemsEqual(this) 820573"];
2582 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 820574"];
2583 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 820575"];
2584 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 820576"];
2585 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 820577"];
2586 [label="int m2 = d[i - 1, j] + DeleteCost; 820578"];
2587 [label="int m2 = d[i - 1, j] + DeleteCost; 820579"];
2588 [label="int m3 = d[i, j - 1] + InsertCost; 820580"];
2589 [label="int m3 = d[i, j - 1] + InsertCost; 820581"];
2590 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 820582"];
2591 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 820583"];
2592 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 820584"];
2593 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 820585"];
2594 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 820586"];
2595 [label="d[i, j] 820587"];
2596 [label="return d; 820588"];
2597 [label="int i = lengthA; 820589"];
2598 [label="int j = lengthB; 820590"];
2599 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 820591"];
2600 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 820592"];
2601 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 820593"];
2602 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 820594"];
2603 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 820595"];
2604 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 820596"];
2605 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 820597"];
2606 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 820598"];
2607 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 820599"];
2608 [label="i--; 820600"];
2609 [label="j--; 820601"];
2610 [label="yield return new Edit(EditKind.Update, i, j); 820602"];
2611 [label="yield return new Edit(EditKind.Update, i, j); 820603"];
2612 [label="yield return new Edit(EditKind.Update, i, j); 820604"];
2613 [label="yield return new Edit(EditKind.Update, i, j); 820605"];
2614 [label="new Edit(EditKind.Update, i, j) 820606"];
2615 [label="param Edit(EditKind kind) 820607"];
2616 [label="param Edit(int indexA) 820608"];
2617 [label="param Edit(int indexB) 820609"];
2618 [label="param Edit(this) 820610"];
2619 [label="this.Kind 820611"];
2620 [label="this.IndexA 820612"];
2621 [label="this.IndexB 820613"];
2622 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 820614"];
2623 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 820615"];
2624 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 820616"];
2625 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 820617"];
2626 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 820618"];
2627 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 820619"];
2628 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 820620"];
2629 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 820621"];
2630 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 820622"];
2631 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 820623"];
2632 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 820624"];
2633 [label="actualText.Free(); 820625"];
2634 [label="expectedText.Free(); 820626"];
2635 [label="return assertText.ToString(); 820627"];
2636 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 820628"];
2637 [label="CustomAssert.False(result.Success); 820629"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 1;
13 -> 11;
13 -> 12;
14 -> 13;
14 -> 12;
15 -> 12;
16 -> 14;
16 -> 15;
17 -> 15;
18 -> 16;
18 -> 17;
18 -> 15;
19 -> 15;
19 -> 1;
20 -> 0;
20 -> 1;
21 -> 1;
22 -> 19;
22 -> 21;
23 -> 11;
23 -> 21;
24 -> 20;
24 -> 21;
25 -> 11;
25 -> 21;
26 -> 11;
26 -> 21;
27 -> 11;
27 -> 21;
28 -> 11;
28 -> 21;
29 -> 11;
29 -> 21;
30 -> 22;
30 -> 21;
31 -> 26;
31 -> 21;
32 -> 23;
32 -> 21;
33 -> 21;
34 -> 31;
34 -> 33;
35 -> 32;
35 -> 33;
36 -> 34;
36 -> 33;
37 -> 33;
38 -> 36;
38 -> 37;
39 -> 38;
39 -> 37;
40 -> 39;
41 -> 0;
41 -> 40;
42 -> 41;
43 -> 42;
44 -> 43;
44 -> 40;
45 -> 33;
46 -> 35;
46 -> 45;
46 -> 33;
47 -> 44;
47 -> 46;
48 -> 24;
48 -> 21;
49 -> 25;
49 -> 21;
50 -> 27;
50 -> 21;
51 -> 28;
51 -> 21;
52 -> 29;
52 -> 21;
53 -> 21;
54 -> 30;
54 -> 53;
55 -> 47;
55 -> 53;
56 -> 48;
56 -> 53;
57 -> 49;
57 -> 53;
58 -> 50;
58 -> 53;
59 -> 51;
59 -> 53;
60 -> 52;
60 -> 53;
61 -> 54;
61 -> 53;
62 -> 55;
62 -> 53;
63 -> 56;
63 -> 53;
64 -> 57;
64 -> 53;
65 -> 58;
65 -> 53;
66 -> 59;
66 -> 53;
67 -> 60;
67 -> 53;
68 -> 53;
69 -> 68;
69 -> 53;
70 -> 53;
71 -> 61;
71 -> 70;
72 -> 62;
72 -> 70;
73 -> 63;
73 -> 70;
74 -> 64;
74 -> 70;
75 -> 65;
75 -> 70;
76 -> 66;
76 -> 70;
77 -> 67;
77 -> 70;
78 -> 69;
78 -> 70;
79 -> 74;
79 -> 70;
80 -> 76;
80 -> 70;
81 -> 70;
82 -> 79;
82 -> 81;
83 -> 80;
83 -> 81;
84 -> 71;
84 -> 81;
85 -> 84;
85 -> 18;
85 -> 81;
86 -> 85;
87 -> 83;
87 -> 85;
88 -> 82;
88 -> 85;
89 -> 85;
90 -> 86;
90 -> 89;
91 -> 87;
91 -> 89;
92 -> 88;
92 -> 89;
93 -> 86;
93 -> 89;
94 -> 89;
95 -> 92;
95 -> 94;
95 -> 89;
96 -> 0;
96 -> 95;
97 -> 90;
97 -> 89;
98 -> 0;
98 -> 89;
99 -> 98;
99 -> 93;
99 -> 89;
100 -> 89;
101 -> 97;
101 -> 99;
101 -> 100;
101 -> 0;
101 -> 89;
102 -> 101;
102 -> 89;
103 -> 96;
103 -> 89;
104 -> 91;
104 -> 89;
105 -> 89;
106 -> 102;
106 -> 103;
106 -> 104;
106 -> 105;
106 -> 101;
106 -> 0;
106 -> 89;
107 -> 89;
108 -> 106;
108 -> 107;
109 -> 107;
110 -> 107;
111 -> 108;
111 -> 106;
111 -> 110;
111 -> 107;
112 -> 109;
112 -> 107;
113 -> 107;
114 -> 111;
114 -> 106;
114 -> 110;
114 -> 112;
114 -> 113;
114 -> 109;
114 -> 107;
115 -> 107;
116 -> 115;
116 -> 109;
116 -> 107;
117 -> 109;
117 -> 107;
118 -> 107;
119 -> 117;
119 -> 118;
119 -> 109;
119 -> 116;
119 -> 107;
120 -> 108;
120 -> 107;
121 -> 120;
121 -> 86;
121 -> 85;
122 -> 86;
122 -> 70;
123 -> 70;
124 -> 73;
124 -> 123;
124 -> 70;
125 -> 0;
125 -> 70;
126 -> 78;
126 -> 70;
127 -> 75;
127 -> 122;
127 -> 72;
127 -> 73;
127 -> 70;
128 -> 127;
128 -> 70;
129 -> 70;
130 -> 128;
130 -> 129;
131 -> 0;
131 -> 129;
132 -> 131;
133 -> 70;
134 -> 127;
134 -> 86;
134 -> 121;
134 -> 106;
134 -> 43;
134 -> 0;
134 -> 70;
135 -> 70;
136 -> 135;
137 -> 134;
137 -> 136;
137 -> 70;
138 -> 0;
140 -> 138;
140 -> 139;
141 -> 140;
142 -> 0;
144 -> 142;
144 -> 143;
146 -> 144;
146 -> 145;
147 -> 146;
148 -> 134;
148 -> 135;
149 -> 134;
149 -> 135;
150 -> 134;
150 -> 135;
151 -> 134;
151 -> 135;
152 -> 148;
152 -> 135;
153 -> 151;
153 -> 135;
154 -> 149;
154 -> 135;
155 -> 150;
155 -> 135;
156 -> 135;
157 -> 135;
158 -> 152;
158 -> 157;
159 -> 153;
159 -> 157;
160 -> 154;
160 -> 157;
161 -> 155;
161 -> 157;
162 -> 156;
162 -> 157;
163 -> 156;
163 -> 157;
164 -> 156;
164 -> 157;
165 -> 156;
165 -> 157;
166 -> 157;
167 -> 159;
167 -> 166;
167 -> 157;
168 -> 165;
168 -> 157;
169 -> 161;
169 -> 157;
170 -> 169;
170 -> 137;
170 -> 157;
171 -> 158;
171 -> 157;
172 -> 159;
172 -> 157;
173 -> 170;
173 -> 157;
174 -> 162;
174 -> 157;
175 -> 163;
175 -> 157;
176 -> 164;
176 -> 157;
177 -> 165;
177 -> 157;
178 -> 157;
179 -> 0;
179 -> 157;
180 -> 159;
180 -> 170;
180 -> 157;
181 -> 157;
182 -> 179;
182 -> 181;
183 -> 180;
183 -> 181;
184 -> 180;
184 -> 181;
185 -> 179;
185 -> 181;
186 -> 177;
186 -> 181;
187 -> 178;
187 -> 181;
188 -> 178;
188 -> 181;
189 -> 182;
189 -> 181;
190 -> 183;
190 -> 181;
191 -> 184;
191 -> 181;
192 -> 185;
192 -> 181;
193 -> 186;
193 -> 181;
194 -> 181;
195 -> 194;
195 -> 189;
195 -> 190;
195 -> 191;
195 -> 192;
195 -> 193;
195 -> 0;
195 -> 170;
195 -> 181;
196 -> 194;
196 -> 181;
197 -> 187;
197 -> 194;
197 -> 181;
198 -> 157;
199 -> 171;
199 -> 198;
200 -> 172;
200 -> 198;
201 -> 173;
201 -> 198;
202 -> 174;
202 -> 198;
203 -> 175;
203 -> 198;
204 -> 176;
204 -> 198;
205 -> 177;
205 -> 198;
206 -> 178;
206 -> 198;
207 -> 178;
207 -> 198;
208 -> 178;
208 -> 198;
209 -> 178;
209 -> 198;
210 -> 178;
210 -> 198;
211 -> 178;
211 -> 198;
212 -> 199;
212 -> 198;
213 -> 200;
213 -> 198;
214 -> 201;
214 -> 198;
215 -> 202;
215 -> 198;
216 -> 203;
216 -> 198;
217 -> 204;
217 -> 198;
218 -> 205;
218 -> 198;
219 -> 206;
219 -> 198;
220 -> 207;
220 -> 198;
221 -> 208;
221 -> 198;
222 -> 208;
222 -> 195;
222 -> 198;
223 -> 222;
223 -> 195;
223 -> 196;
223 -> 197;
223 -> 198;
224 -> 209;
224 -> 198;
225 -> 210;
225 -> 198;
226 -> 198;
227 -> 212;
227 -> 226;
228 -> 213;
228 -> 226;
229 -> 214;
229 -> 226;
230 -> 215;
230 -> 226;
231 -> 216;
231 -> 226;
232 -> 217;
232 -> 226;
233 -> 218;
233 -> 226;
234 -> 219;
234 -> 226;
235 -> 220;
235 -> 226;
236 -> 221;
236 -> 226;
237 -> 223;
237 -> 226;
238 -> 224;
238 -> 226;
239 -> 225;
239 -> 226;
240 -> 211;
240 -> 226;
241 -> 227;
241 -> 226;
242 -> 229;
242 -> 226;
243 -> 237;
243 -> 226;
244 -> 233;
244 -> 226;
245 -> 238;
245 -> 226;
246 -> 239;
246 -> 226;
247 -> 226;
248 -> 247;
248 -> 241;
248 -> 242;
248 -> 243;
248 -> 244;
248 -> 245;
248 -> 246;
248 -> 170;
248 -> 223;
248 -> 226;
249 -> 247;
249 -> 226;
250 -> 247;
250 -> 226;
251 -> 247;
251 -> 226;
252 -> 247;
252 -> 226;
253 -> 247;
253 -> 226;
254 -> 247;
254 -> 226;
255 -> 247;
255 -> 226;
256 -> 247;
256 -> 226;
257 -> 247;
257 -> 226;
258 -> 247;
258 -> 226;
259 -> 247;
259 -> 226;
260 -> 247;
260 -> 226;
261 -> 247;
261 -> 226;
262 -> 247;
262 -> 226;
263 -> 247;
263 -> 226;
264 -> 247;
264 -> 226;
265 -> 247;
265 -> 226;
266 -> 247;
266 -> 226;
267 -> 247;
267 -> 226;
268 -> 247;
268 -> 226;
269 -> 247;
269 -> 226;
270 -> 247;
270 -> 226;
271 -> 247;
271 -> 226;
272 -> 247;
272 -> 226;
273 -> 247;
273 -> 226;
274 -> 247;
274 -> 226;
275 -> 226;
276 -> 275;
276 -> 247;
276 -> 226;
277 -> 247;
277 -> 226;
278 -> 277;
278 -> 248;
278 -> 249;
278 -> 250;
278 -> 251;
278 -> 252;
278 -> 253;
278 -> 254;
278 -> 255;
278 -> 256;
278 -> 257;
278 -> 258;
278 -> 259;
278 -> 260;
278 -> 261;
278 -> 262;
278 -> 263;
278 -> 264;
278 -> 265;
278 -> 266;
278 -> 267;
278 -> 268;
278 -> 269;
278 -> 270;
278 -> 271;
278 -> 272;
278 -> 273;
278 -> 274;
278 -> 276;
278 -> 275;
278 -> 226;
279 -> 278;
279 -> 247;
279 -> 226;
280 -> 228;
280 -> 247;
280 -> 226;
281 -> 247;
281 -> 226;
282 -> 226;
283 -> 226;
284 -> 281;
284 -> 283;
285 -> 282;
285 -> 283;
286 -> 285;
286 -> 283;
287 -> 285;
287 -> 283;
288 -> 285;
288 -> 283;
289 -> 284;
289 -> 285;
289 -> 283;
290 -> 282;
290 -> 247;
290 -> 226;
291 -> 247;
291 -> 278;
291 -> 226;
292 -> 291;
292 -> 278;
292 -> 279;
292 -> 280;
292 -> 290;
292 -> 289;
292 -> 287;
292 -> 288;
292 -> 226;
293 -> 292;
293 -> 247;
293 -> 226;
294 -> 247;
294 -> 292;
294 -> 226;
295 -> 294;
295 -> 292;
295 -> 293;
295 -> 226;
296 -> 295;
296 -> 247;
296 -> 226;
297 -> 247;
297 -> 295;
297 -> 226;
298 -> 297;
298 -> 295;
298 -> 296;
298 -> 226;
299 -> 298;
299 -> 247;
299 -> 226;
300 -> 247;
300 -> 298;
300 -> 226;
301 -> 300;
301 -> 298;
301 -> 299;
301 -> 226;
302 -> 301;
302 -> 247;
302 -> 226;
303 -> 247;
303 -> 226;
304 -> 303;
304 -> 301;
304 -> 302;
304 -> 226;
305 -> 304;
305 -> 247;
305 -> 226;
306 -> 236;
306 -> 304;
306 -> 226;
307 -> 226;
308 -> 306;
308 -> 307;
309 -> 307;
310 -> 308;
310 -> 307;
311 -> 310;
311 -> 304;
311 -> 305;
311 -> 307;
312 -> 0;
312 -> 307;
313 -> 312;
313 -> 309;
313 -> 307;
314 -> 313;
314 -> 226;
315 -> 314;
315 -> 247;
315 -> 226;
316 -> 233;
316 -> 226;
317 -> 316;
318 -> 230;
318 -> 317;
318 -> 316;
319 -> 231;
319 -> 317;
319 -> 316;
320 -> 318;
320 -> 319;
320 -> 316;
321 -> 232;
321 -> 317;
321 -> 316;
322 -> 320;
322 -> 321;
322 -> 316;
323 -> 235;
323 -> 226;
324 -> 247;
324 -> 304;
324 -> 305;
324 -> 315;
324 -> 323;
325 -> 323;
326 -> 247;
326 -> 325;
327 -> 326;
327 -> 324;
327 -> 325;
328 -> 234;
328 -> 323;
329 -> 324;
329 -> 327;
329 -> 328;
329 -> 323;
330 -> 329;
330 -> 247;
330 -> 323;
331 -> 236;
331 -> 247;
331 -> 226;
332 -> 247;
332 -> 329;
332 -> 226;
333 -> 226;
334 -> 247;
334 -> 329;
334 -> 333;
334 -> 226;
335 -> 157;
336 -> 160;
336 -> 335;
336 -> 157;
337 -> 160;
337 -> 336;
338 -> 336;
339 -> 337;
339 -> 338;
340 -> 178;
340 -> 338;
341 -> 338;
342 -> 339;
342 -> 341;
342 -> 338;
343 -> 339;
343 -> 338;
344 -> 343;
344 -> 329;
344 -> 330;
344 -> 331;
344 -> 338;
345 -> 338;
346 -> 340;
346 -> 344;
346 -> 338;
347 -> 345;
347 -> 338;
348 -> 346;
348 -> 344;
348 -> 338;
349 -> 347;
349 -> 348;
349 -> 345;
349 -> 344;
349 -> 338;
350 -> 338;
351 -> 338;
352 -> 339;
352 -> 338;
353 -> 352;
353 -> 349;
353 -> 338;
354 -> 353;
355 -> 353;
356 -> 353;
357 -> 340;
357 -> 356;
357 -> 353;
358 -> 353;
359 -> 345;
359 -> 358;
359 -> 356;
359 -> 353;
360 -> 350;
360 -> 353;
360 -> 359;
361 -> 351;
361 -> 353;
362 -> 345;
362 -> 359;
362 -> 338;
363 -> 340;
363 -> 362;
363 -> 338;
364 -> 339;
364 -> 338;
365 -> 338;
366 -> 364;
366 -> 365;
367 -> 346;
367 -> 365;
368 -> 367;
368 -> 362;
368 -> 365;
369 -> 367;
369 -> 362;
369 -> 365;
370 -> 367;
370 -> 362;
370 -> 365;
371 -> 367;
371 -> 362;
371 -> 365;
372 -> 367;
372 -> 362;
372 -> 365;
373 -> 366;
373 -> 365;
374 -> 367;
374 -> 362;
374 -> 373;
374 -> 365;
375 -> 365;
376 -> 372;
376 -> 375;
376 -> 365;
377 -> 374;
377 -> 376;
378 -> 376;
379 -> 377;
379 -> 378;
380 -> 367;
380 -> 378;
381 -> 379;
381 -> 378;
382 -> 380;
382 -> 374;
382 -> 378;
383 -> 378;
384 -> 378;
385 -> 381;
385 -> 384;
386 -> 382;
386 -> 384;
387 -> 382;
387 -> 384;
388 -> 382;
388 -> 384;
389 -> 382;
389 -> 384;
390 -> 383;
390 -> 384;
391 -> 383;
391 -> 384;
392 -> 384;
392 -> 385;
392 -> 386;
392 -> 387;
392 -> 388;
392 -> 389;
392 -> 374;
393 -> 383;
393 -> 376;
394 -> 393;
394 -> 338;
395 -> 340;
395 -> 392;
395 -> 338;
396 -> 360;
396 -> 338;
397 -> 394;
397 -> 338;
398 -> 338;
399 -> 395;
399 -> 398;
400 -> 396;
400 -> 398;
401 -> 397;
401 -> 398;
402 -> 340;
402 -> 398;
403 -> 402;
403 -> 392;
403 -> 398;
404 -> 398;
405 -> 402;
405 -> 404;
406 -> 405;
406 -> 392;
406 -> 404;
407 -> 406;
407 -> 404;
408 -> 407;
408 -> 398;
409 -> 402;
409 -> 392;
409 -> 384;
409 -> 390;
409 -> 398;
410 -> 398;
411 -> 409;
411 -> 410;
412 -> 411;
412 -> 409;
412 -> 410;
413 -> 398;
414 -> 412;
414 -> 413;
415 -> 399;
415 -> 398;
416 -> 400;
416 -> 398;
417 -> 401;
417 -> 398;
418 -> 398;
419 -> 398;
420 -> 403;
420 -> 419;
421 -> 403;
421 -> 419;
422 -> 403;
422 -> 419;
423 -> 408;
423 -> 419;
424 -> 412;
424 -> 419;
425 -> 414;
425 -> 419;
426 -> 414;
426 -> 419;
427 -> 415;
427 -> 419;
428 -> 416;
428 -> 419;
429 -> 417;
429 -> 419;
430 -> 414;
430 -> 419;
431 -> 418;
431 -> 419;
432 -> 418;
432 -> 419;
433 -> 423;
433 -> 419;
434 -> 424;
434 -> 419;
435 -> 425;
435 -> 419;
436 -> 429;
436 -> 414;
436 -> 419;
437 -> 431;
437 -> 419;
438 -> 419;
439 -> 433;
439 -> 438;
440 -> 434;
440 -> 438;
441 -> 435;
441 -> 438;
442 -> 437;
442 -> 438;
443 -> 432;
443 -> 438;
444 -> 442;
444 -> 438;
445 -> 438;
446 -> 445;
446 -> 438;
447 -> 445;
447 -> 438;
448 -> 445;
448 -> 438;
449 -> 445;
449 -> 438;
450 -> 445;
450 -> 438;
451 -> 445;
451 -> 438;
452 -> 445;
452 -> 438;
453 -> 445;
453 -> 438;
454 -> 445;
454 -> 438;
455 -> 445;
455 -> 438;
456 -> 445;
456 -> 438;
457 -> 445;
457 -> 438;
458 -> 445;
458 -> 438;
459 -> 445;
459 -> 438;
460 -> 445;
460 -> 438;
461 -> 445;
461 -> 438;
462 -> 445;
462 -> 438;
463 -> 445;
463 -> 438;
464 -> 445;
464 -> 438;
465 -> 445;
465 -> 438;
466 -> 445;
466 -> 438;
467 -> 445;
467 -> 438;
468 -> 445;
468 -> 438;
469 -> 445;
469 -> 438;
470 -> 445;
470 -> 438;
471 -> 445;
471 -> 438;
472 -> 438;
473 -> 472;
473 -> 445;
473 -> 438;
474 -> 445;
474 -> 438;
475 -> 445;
475 -> 438;
476 -> 438;
477 -> 438;
478 -> 475;
478 -> 477;
479 -> 476;
479 -> 477;
480 -> 479;
480 -> 477;
481 -> 479;
481 -> 477;
482 -> 479;
482 -> 477;
483 -> 478;
483 -> 479;
483 -> 477;
484 -> 476;
484 -> 445;
484 -> 438;
485 -> 445;
485 -> 438;
486 -> 438;
487 -> 436;
487 -> 486;
488 -> 486;
489 -> 487;
489 -> 486;
490 -> 489;
490 -> 436;
491 -> 489;
492 -> 490;
492 -> 491;
493 -> 426;
493 -> 438;
494 -> 493;
495 -> 439;
495 -> 494;
495 -> 493;
496 -> 440;
496 -> 494;
496 -> 493;
497 -> 495;
497 -> 496;
497 -> 493;
498 -> 441;
498 -> 494;
498 -> 493;
499 -> 497;
499 -> 498;
499 -> 493;
500 -> 427;
500 -> 428;
501 -> 445;
501 -> 428;
502 -> 427;
502 -> 501;
502 -> 436;
502 -> 492;
502 -> 428;
503 -> 427;
503 -> 445;
503 -> 428;
504 -> 445;
504 -> 502;
504 -> 438;
505 -> 438;
506 -> 445;
506 -> 502;
506 -> 505;
506 -> 438;
507 -> 418;
507 -> 338;
508 -> 507;
508 -> 336;
509 -> 508;
509 -> 502;
509 -> 157;
510 -> 508;
510 -> 157;
511 -> 134;
511 -> 510;
511 -> 502;
511 -> 503;
511 -> 429;
511 -> 70;
512 -> 511;
512 -> 70;
513 -> 70;
514 -> 512;
514 -> 513;
515 -> 513;
516 -> 514;
516 -> 515;
517 -> 515;
518 -> 516;
518 -> 511;
518 -> 517;
519 -> 517;
520 -> 518;
520 -> 511;
520 -> 519;
520 -> 517;
521 -> 518;
521 -> 511;
521 -> 520;
522 -> 520;
523 -> 521;
523 -> 522;
524 -> 521;
524 -> 522;
525 -> 521;
525 -> 522;
526 -> 521;
526 -> 522;
527 -> 521;
527 -> 522;
528 -> 522;
529 -> 522;
530 -> 522;
531 -> 522;
532 -> 522;
533 -> 0;
533 -> 522;
534 -> 523;
534 -> 522;
535 -> 528;
535 -> 534;
536 -> 534;
537 -> 524;
537 -> 534;
538 -> 525;
538 -> 534;
539 -> 526;
539 -> 534;
540 -> 527;
540 -> 534;
541 -> 529;
541 -> 534;
542 -> 530;
542 -> 534;
543 -> 531;
543 -> 534;
544 -> 532;
544 -> 534;
545 -> 533;
545 -> 534;
546 -> 534;
547 -> 535;
547 -> 546;
548 -> 536;
548 -> 546;
549 -> 537;
549 -> 546;
550 -> 538;
550 -> 546;
551 -> 539;
551 -> 546;
552 -> 540;
552 -> 546;
553 -> 541;
553 -> 546;
554 -> 542;
554 -> 546;
555 -> 543;
555 -> 546;
556 -> 544;
556 -> 546;
557 -> 545;
557 -> 546;
558 -> 548;
558 -> 511;
558 -> 546;
559 -> 558;
559 -> 0;
559 -> 546;
560 -> 548;
560 -> 546;
561 -> 549;
561 -> 546;
562 -> 552;
562 -> 546;
563 -> 556;
563 -> 546;
564 -> 557;
564 -> 546;
565 -> 546;
566 -> 560;
566 -> 565;
567 -> 561;
567 -> 565;
568 -> 562;
568 -> 565;
569 -> 563;
569 -> 565;
570 -> 564;
570 -> 565;
571 -> 566;
571 -> 567;
571 -> 568;
571 -> 565;
572 -> 566;
572 -> 565;
573 -> 571;
573 -> 565;
574 -> 569;
574 -> 572;
574 -> 573;
574 -> 532;
574 -> 571;
574 -> 565;
575 -> 571;
575 -> 565;
576 -> 570;
576 -> 575;
576 -> 0;
576 -> 574;
576 -> 565;
577 -> 546;
578 -> 548;
578 -> 546;
579 -> 547;
579 -> 578;
579 -> 528;
579 -> 576;
579 -> 546;
580 -> 548;
580 -> 546;
581 -> 553;
581 -> 529;
581 -> 546;
582 -> 553;
582 -> 580;
582 -> 581;
582 -> 529;
582 -> 579;
582 -> 546;
583 -> 528;
583 -> 582;
583 -> 522;
584 -> 529;
584 -> 582;
584 -> 522;
585 -> 530;
585 -> 522;
586 -> 531;
586 -> 522;
587 -> 576;
587 -> 522;
588 -> 522;
589 -> 522;
590 -> 583;
590 -> 589;
591 -> 584;
591 -> 589;
592 -> 585;
592 -> 589;
593 -> 586;
593 -> 589;
594 -> 584;
594 -> 589;
595 -> 587;
595 -> 589;
596 -> 588;
596 -> 589;
597 -> 596;
597 -> 589;
598 -> 596;
598 -> 589;
599 -> 596;
599 -> 589;
600 -> 596;
600 -> 589;
601 -> 596;
601 -> 589;
602 -> 590;
602 -> 589;
603 -> 590;
603 -> 583;
603 -> 589;
604 -> 590;
604 -> 589;
605 -> 594;
605 -> 602;
605 -> 589;
606 -> 0;
606 -> 589;
607 -> 590;
607 -> 596;
607 -> 589;
608 -> 591;
608 -> 596;
608 -> 589;
609 -> 592;
609 -> 596;
609 -> 589;
610 -> 593;
610 -> 596;
610 -> 589;
611 -> 594;
611 -> 596;
611 -> 589;
612 -> 595;
612 -> 596;
612 -> 589;
613 -> 588;
613 -> 520;
614 -> 520;
615 -> 521;
615 -> 613;
615 -> 614;
615 -> 608;
615 -> 609;
615 -> 610;
615 -> 611;
615 -> 612;
615 -> 607;
615 -> 605;
615 -> 583;
615 -> 585;
615 -> 586;
615 -> 520;
616 -> 518;
616 -> 615;
616 -> 517;
617 -> 616;
617 -> 515;
618 -> 617;
618 -> 513;
619 -> 618;
619 -> 615;
619 -> 513;
620 -> 513;
621 -> 618;
621 -> 620;
621 -> 615;
621 -> 513;
622 -> 0;
622 -> 513;
623 -> 621;
623 -> 622;
623 -> 513;
624 -> 77;
624 -> 623;
624 -> 70;
625 -> 511;
625 -> 70;
626 -> 625;
626 -> 1;
627 -> 1;
628 -> 1;
629 -> 626;
629 -> 628;
630 -> 627;
630 -> 628;
631 -> 628;
632 -> 628;
633 -> 631;
633 -> 632;
634 -> 629;
634 -> 632;
635 -> 0;
635 -> 632;
636 -> 632;
637 -> 633;
637 -> 632;
638 -> 632;
639 -> 635;
639 -> 638;
640 -> 636;
640 -> 638;
641 -> 637;
641 -> 638;
642 -> 634;
642 -> 638;
643 -> 638;
644 -> 639;
644 -> 638;
645 -> 640;
645 -> 638;
646 -> 643;
646 -> 638;
647 -> 641;
647 -> 638;
648 -> 638;
649 -> 644;
649 -> 648;
650 -> 645;
650 -> 648;
651 -> 646;
651 -> 648;
652 -> 647;
652 -> 648;
653 -> 642;
653 -> 648;
654 -> 648;
655 -> 649;
655 -> 0;
655 -> 648;
656 -> 655;
656 -> 650;
656 -> 648;
657 -> 656;
658 -> 653;
658 -> 657;
659 -> 657;
660 -> 658;
660 -> 623;
660 -> 659;
661 -> 659;
662 -> 660;
662 -> 656;
663 -> 656;
664 -> 653;
664 -> 663;
665 -> 664;
665 -> 623;
665 -> 663;
666 -> 665;
666 -> 656;
667 -> 666;
668 -> 662;
668 -> 623;
668 -> 666;
669 -> 652;
669 -> 666;
670 -> 667;
670 -> 668;
670 -> 669;
670 -> 631;
670 -> 666;
671 -> 670;
671 -> 667;
672 -> 670;
672 -> 667;
673 -> 670;
673 -> 667;
674 -> 670;
674 -> 667;
675 -> 667;
676 -> 675;
676 -> 667;
677 -> 667;
678 -> 672;
678 -> 677;
679 -> 678;
679 -> 667;
680 -> 673;
680 -> 667;
681 -> 675;
681 -> 667;
682 -> 679;
682 -> 670;
682 -> 680;
682 -> 681;
682 -> 676;
682 -> 667;
683 -> 656;
684 -> 662;
684 -> 656;
685 -> 652;
685 -> 631;
685 -> 682;
685 -> 684;
686 -> 684;
686 -> 623;
687 -> 649;
687 -> 0;
687 -> 648;
688 -> 687;
688 -> 650;
688 -> 648;
689 -> 654;
689 -> 688;
690 -> 689;
690 -> 653;
690 -> 654;
690 -> 623;
690 -> 688;
691 -> 688;
692 -> 690;
692 -> 691;
693 -> 692;
693 -> 690;
693 -> 691;
694 -> 688;
695 -> 653;
695 -> 694;
696 -> 695;
696 -> 693;
696 -> 694;
697 -> 696;
697 -> 688;
698 -> 688;
699 -> 653;
699 -> 698;
700 -> 699;
700 -> 697;
700 -> 698;
701 -> 700;
701 -> 688;
702 -> 652;
702 -> 685;
702 -> 688;
703 -> 688;
704 -> 653;
704 -> 703;
705 -> 704;
705 -> 697;
705 -> 703;
706 -> 704;
706 -> 705;
707 -> 705;
708 -> 706;
708 -> 707;
709 -> 707;
710 -> 708;
710 -> 709;
711 -> 709;
712 -> 710;
712 -> 706;
712 -> 711;
713 -> 712;
713 -> 709;
714 -> 713;
714 -> 707;
715 -> 706;
715 -> 707;
716 -> 715;
716 -> 714;
716 -> 707;
717 -> 706;
717 -> 707;
718 -> 707;
719 -> 704;
719 -> 716;
719 -> 705;
720 -> 704;
720 -> 716;
720 -> 703;
721 -> 720;
721 -> 688;
722 -> 652;
722 -> 702;
722 -> 688;
723 -> 652;
723 -> 688;
724 -> 688;
725 -> 688;
726 -> 724;
726 -> 725;
727 -> 724;
727 -> 725;
728 -> 724;
728 -> 725;
729 -> 723;
729 -> 725;
730 -> 653;
730 -> 725;
731 -> 725;
732 -> 730;
732 -> 731;
733 -> 732;
733 -> 721;
733 -> 731;
734 -> 731;
735 -> 733;
735 -> 734;
736 -> 735;
736 -> 734;
737 -> 736;
737 -> 733;
737 -> 734;
738 -> 734;
739 -> 737;
739 -> 738;
740 -> 739;
740 -> 737;
740 -> 738;
741 -> 740;
741 -> 738;
742 -> 741;
742 -> 725;
743 -> 729;
743 -> 725;
744 -> 742;
744 -> 743;
744 -> 741;
744 -> 722;
744 -> 725;
745 -> 725;
746 -> 725;
747 -> 726;
747 -> 746;
747 -> 725;
748 -> 725;
749 -> 730;
749 -> 748;
750 -> 748;
751 -> 749;
751 -> 750;
752 -> 750;
753 -> 751;
753 -> 752;
754 -> 753;
754 -> 744;
754 -> 752;
755 -> 753;
755 -> 744;
755 -> 752;
756 -> 755;
756 -> 750;
757 -> 751;
757 -> 744;
757 -> 750;
758 -> 751;
758 -> 757;
758 -> 750;
759 -> 758;
759 -> 748;
760 -> 759;
760 -> 725;
761 -> 745;
761 -> 725;
762 -> 729;
762 -> 725;
763 -> 761;
763 -> 762;
763 -> 760;
763 -> 722;
763 -> 757;
763 -> 725;
764 -> 725;
765 -> 763;
765 -> 764;
766 -> 764;
767 -> 765;
767 -> 766;
768 -> 766;
769 -> 768;
770 -> 767;
770 -> 764;
771 -> 765;
771 -> 764;
772 -> 764;
773 -> 772;
774 -> 773;
775 -> 764;
776 -> 775;
777 -> 763;
777 -> 776;
778 -> 777;
778 -> 770;
778 -> 776;
779 -> 777;
779 -> 770;
779 -> 776;
780 -> 779;
780 -> 775;
781 -> 763;
781 -> 764;
782 -> 781;
782 -> 770;
782 -> 764;
783 -> 764;
784 -> 781;
784 -> 770;
784 -> 783;
784 -> 764;
785 -> 784;
786 -> 781;
786 -> 770;
786 -> 784;
787 -> 785;
787 -> 784;
788 -> 784;
789 -> 781;
789 -> 787;
789 -> 764;
790 -> 763;
790 -> 764;
791 -> 763;
791 -> 764;
792 -> 791;
792 -> 789;
792 -> 764;
793 -> 763;
793 -> 764;
794 -> 763;
794 -> 764;
795 -> 764;
796 -> 794;
796 -> 795;
797 -> 796;
797 -> 789;
797 -> 795;
798 -> 796;
798 -> 789;
798 -> 795;
799 -> 798;
799 -> 764;
800 -> 764;
801 -> 800;
801 -> 799;
801 -> 789;
801 -> 764;
802 -> 800;
802 -> 801;
803 -> 799;
803 -> 802;
803 -> 800;
804 -> 793;
804 -> 803;
804 -> 802;
805 -> 763;
805 -> 764;
806 -> 805;
806 -> 804;
806 -> 764;
807 -> 777;
807 -> 806;
807 -> 776;
808 -> 777;
808 -> 806;
808 -> 776;
809 -> 808;
809 -> 775;
810 -> 763;
810 -> 764;
811 -> 763;
811 -> 764;
812 -> 810;
812 -> 0;
812 -> 764;
813 -> 764;
814 -> 810;
814 -> 764;
815 -> 811;
815 -> 814;
815 -> 806;
815 -> 764;
816 -> 815;
817 -> 816;
818 -> 817;
818 -> 816;
819 -> 816;
819 -> 815;
820 -> 810;
820 -> 815;
821 -> 819;
821 -> 810;
821 -> 764;
822 -> 819;
822 -> 764;
823 -> 763;
823 -> 764;
824 -> 763;
824 -> 764;
825 -> 823;
825 -> 764;
826 -> 825;
826 -> 822;
826 -> 764;
827 -> 823;
827 -> 826;
827 -> 764;
828 -> 764;
829 -> 824;
829 -> 828;
830 -> 828;
831 -> 829;
831 -> 830;
832 -> 830;
833 -> 832;
834 -> 831;
834 -> 833;
835 -> 834;
835 -> 826;
835 -> 833;
836 -> 834;
836 -> 826;
836 -> 833;
837 -> 836;
837 -> 832;
838 -> 831;
838 -> 826;
838 -> 832;
839 -> 838;
839 -> 828;
840 -> 828;
841 -> 839;
841 -> 764;
842 -> 764;
843 -> 824;
843 -> 842;
844 -> 843;
844 -> 839;
844 -> 842;
845 -> 844;
846 -> 845;
846 -> 844;
847 -> 844;
848 -> 846;
848 -> 847;
848 -> 844;
849 -> 848;
849 -> 844;
850 -> 849;
850 -> 843;
850 -> 844;
851 -> 843;
851 -> 848;
851 -> 850;
851 -> 842;
852 -> 851;
852 -> 764;
853 -> 852;
854 -> 823;
854 -> 853;
854 -> 764;
855 -> 834;
855 -> 853;
855 -> 833;
856 -> 834;
856 -> 853;
856 -> 833;
857 -> 856;
857 -> 832;
858 -> 853;
858 -> 764;
859 -> 791;
859 -> 853;
859 -> 764;
860 -> 781;
860 -> 853;
860 -> 764;
861 -> 726;
861 -> 725;
862 -> 861;
863 -> 862;
863 -> 730;
863 -> 861;
864 -> 861;
865 -> 864;
865 -> 730;
865 -> 861;
866 -> 730;
866 -> 853;
866 -> 863;
866 -> 865;
866 -> 725;
867 -> 725;
868 -> 728;
868 -> 867;
868 -> 725;
869 -> 726;
869 -> 725;
870 -> 727;
870 -> 725;
871 -> 729;
871 -> 725;
872 -> 725;
873 -> 869;
873 -> 872;
874 -> 870;
874 -> 872;
875 -> 871;
875 -> 872;
876 -> 730;
876 -> 872;
877 -> 872;
878 -> 873;
878 -> 877;
878 -> 872;
879 -> 876;
879 -> 866;
879 -> 872;
880 -> 879;
881 -> 876;
881 -> 879;
882 -> 880;
882 -> 879;
883 -> 875;
883 -> 879;
884 -> 879;
885 -> 879;
886 -> 881;
886 -> 885;
887 -> 882;
887 -> 885;
888 -> 883;
888 -> 885;
889 -> 884;
889 -> 885;
890 -> 884;
890 -> 885;
891 -> 885;
892 -> 886;
892 -> 885;
893 -> 889;
893 -> 885;
894 -> 890;
894 -> 885;
895 -> 891;
895 -> 885;
896 -> 888;
896 -> 885;
897 -> 885;
898 -> 885;
899 -> 892;
899 -> 898;
900 -> 893;
900 -> 898;
901 -> 894;
901 -> 898;
902 -> 895;
902 -> 898;
903 -> 896;
903 -> 898;
904 -> 897;
904 -> 898;
905 -> 898;
906 -> 905;
906 -> 898;
907 -> 905;
907 -> 898;
908 -> 905;
908 -> 898;
909 -> 905;
909 -> 898;
910 -> 905;
910 -> 898;
911 -> 905;
911 -> 898;
912 -> 899;
912 -> 905;
912 -> 898;
913 -> 900;
913 -> 905;
913 -> 898;
914 -> 901;
914 -> 905;
914 -> 898;
915 -> 902;
915 -> 905;
915 -> 898;
916 -> 903;
916 -> 905;
916 -> 898;
917 -> 0;
917 -> 898;
918 -> 917;
918 -> 905;
918 -> 898;
919 -> 898;
920 -> 905;
920 -> 919;
921 -> 919;
922 -> 920;
922 -> 905;
922 -> 907;
922 -> 913;
922 -> 921;
922 -> 919;
923 -> 919;
924 -> 920;
924 -> 905;
924 -> 906;
924 -> 912;
924 -> 923;
925 -> 922;
925 -> 924;
925 -> 905;
925 -> 866;
925 -> 919;
926 -> 925;
926 -> 898;
927 -> 926;
928 -> 927;
928 -> 905;
928 -> 926;
929 -> 885;
930 -> 886;
930 -> 929;
931 -> 929;
932 -> 930;
932 -> 931;
933 -> 932;
933 -> 929;
934 -> 930;
934 -> 885;
935 -> 934;
935 -> 897;
935 -> 930;
935 -> 905;
935 -> 906;
935 -> 912;
935 -> 907;
935 -> 913;
935 -> 908;
935 -> 914;
935 -> 909;
935 -> 915;
935 -> 910;
935 -> 918;
935 -> 911;
935 -> 928;
935 -> 916;
935 -> 884;
935 -> 891;
935 -> 722;
935 -> 917;
935 -> 927;
935 -> 885;
936 -> 885;
937 -> 935;
937 -> 936;
938 -> 935;
938 -> 936;
939 -> 938;
939 -> 935;
939 -> 936;
940 -> 937;
940 -> 936;
941 -> 937;
941 -> 936;
942 -> 936;
943 -> 941;
943 -> 942;
944 -> 938;
944 -> 942;
945 -> 943;
945 -> 939;
945 -> 0;
945 -> 942;
946 -> 942;
947 -> 943;
947 -> 939;
947 -> 0;
947 -> 942;
948 -> 943;
948 -> 939;
948 -> 0;
948 -> 947;
949 -> 943;
949 -> 939;
949 -> 0;
949 -> 942;
950 -> 943;
950 -> 939;
950 -> 0;
950 -> 942;
951 -> 943;
951 -> 939;
951 -> 0;
951 -> 942;
952 -> 943;
952 -> 939;
952 -> 0;
952 -> 942;
953 -> 943;
953 -> 939;
953 -> 0;
953 -> 942;
954 -> 942;
955 -> 943;
955 -> 942;
956 -> 954;
956 -> 942;
957 -> 944;
957 -> 939;
957 -> 955;
957 -> 956;
957 -> 942;
958 -> 942;
959 -> 943;
959 -> 942;
960 -> 958;
960 -> 942;
961 -> 942;
962 -> 959;
962 -> 961;
963 -> 960;
963 -> 961;
964 -> 944;
964 -> 961;
965 -> 961;
966 -> 962;
966 -> 957;
966 -> 961;
967 -> 961;
968 -> 967;
968 -> 942;
969 -> 968;
969 -> 942;
970 -> 943;
970 -> 966;
970 -> 0;
970 -> 969;
971 -> 0;
971 -> 970;
972 -> 943;
972 -> 966;
972 -> 0;
972 -> 942;
973 -> 972;
973 -> 942;
974 -> 971;
974 -> 973;
975 -> 974;
975 -> 0;
975 -> 936;
976 -> 974;
976 -> 936;
977 -> 936;
978 -> 976;
978 -> 977;
979 -> 978;
979 -> 977;
980 -> 979;
981 -> 936;
982 -> 981;
982 -> 937;
982 -> 974;
982 -> 936;
983 -> 937;
983 -> 974;
983 -> 981;
983 -> 982;
984 -> 982;
985 -> 983;
985 -> 982;
986 -> 984;
986 -> 982;
987 -> 982;
988 -> 985;
988 -> 987;
989 -> 986;
989 -> 987;
990 -> 938;
990 -> 987;
991 -> 987;
992 -> 987;
992 -> 982;
993 -> 982;
994 -> 993;
994 -> 982;
995 -> 991;
995 -> 994;
996 -> 982;
997 -> 995;
997 -> 996;
997 -> 982;
998 -> 997;
998 -> 992;
998 -> 982;
999 -> 992;
999 -> 982;
1000 -> 980;
1000 -> 999;
1001 -> 980;
1001 -> 936;
1002 -> 936;
1003 -> 937;
1003 -> 988;
1003 -> 1002;
1003 -> 936;
1004 -> 1003;
1004 -> 936;
1005 -> 936;
1006 -> 1004;
1006 -> 1005;
1007 -> 938;
1007 -> 1005;
1008 -> 1006;
1008 -> 1003;
1008 -> 0;
1008 -> 1005;
1009 -> 1005;
1010 -> 1006;
1010 -> 1003;
1010 -> 0;
1010 -> 1005;
1011 -> 1006;
1011 -> 1003;
1011 -> 0;
1011 -> 1010;
1012 -> 1006;
1012 -> 1003;
1012 -> 0;
1012 -> 1005;
1013 -> 1006;
1013 -> 1003;
1013 -> 0;
1013 -> 1005;
1014 -> 1006;
1014 -> 1003;
1014 -> 0;
1014 -> 1005;
1015 -> 1006;
1015 -> 1003;
1015 -> 0;
1015 -> 1005;
1016 -> 1006;
1016 -> 1003;
1016 -> 0;
1016 -> 1005;
1017 -> 1005;
1018 -> 1017;
1018 -> 1005;
1019 -> 1005;
1020 -> 1019;
1020 -> 1005;
1021 -> 1005;
1022 -> 1020;
1022 -> 1021;
1023 -> 1007;
1023 -> 1021;
1024 -> 1021;
1025 -> 1021;
1026 -> 1025;
1026 -> 1005;
1027 -> 1026;
1027 -> 1005;
1028 -> 1006;
1029 -> 1006;
1030 -> 1028;
1030 -> 1029;
1031 -> 1007;
1031 -> 1029;
1032 -> 1030;
1032 -> 1006;
1032 -> 0;
1032 -> 1029;
1033 -> 1030;
1033 -> 1006;
1033 -> 1029;
1034 -> 1029;
1035 -> 1033;
1035 -> 1034;
1035 -> 1029;
1036 -> 1033;
1036 -> 1029;
1037 -> 1029;
1038 -> 1036;
1038 -> 1037;
1039 -> 1031;
1039 -> 1037;
1040 -> 1038;
1040 -> 1006;
1040 -> 0;
1040 -> 1037;
1041 -> 1037;
1042 -> 1038;
1042 -> 1006;
1042 -> 0;
1042 -> 1037;
1043 -> 1038;
1043 -> 1006;
1043 -> 0;
1043 -> 1042;
1044 -> 1038;
1044 -> 1006;
1044 -> 0;
1044 -> 1037;
1045 -> 1038;
1045 -> 1006;
1045 -> 0;
1045 -> 1037;
1046 -> 1038;
1046 -> 1006;
1046 -> 0;
1046 -> 1037;
1047 -> 1038;
1047 -> 1006;
1047 -> 0;
1047 -> 1037;
1048 -> 1038;
1048 -> 1006;
1048 -> 0;
1048 -> 1037;
1049 -> 1039;
1049 -> 1006;
1049 -> 1038;
1049 -> 1037;
1050 -> 1049;
1051 -> 1006;
1052 -> 1050;
1052 -> 1051;
1053 -> 1052;
1053 -> 1051;
1054 -> 1053;
1055 -> 936;
1056 -> 1054;
1056 -> 1055;
1057 -> 937;
1057 -> 1049;
1057 -> 936;
1058 -> 936;
1059 -> 1057;
1059 -> 1058;
1060 -> 1057;
1060 -> 1058;
1061 -> 1060;
1061 -> 1057;
1061 -> 1058;
1062 -> 1059;
1062 -> 1058;
1063 -> 1058;
1064 -> 1062;
1064 -> 1063;
1065 -> 1060;
1065 -> 1063;
1066 -> 1064;
1066 -> 1061;
1066 -> 0;
1066 -> 1063;
1067 -> 1066;
1068 -> 1059;
1068 -> 1058;
1069 -> 1058;
1070 -> 1068;
1070 -> 1069;
1071 -> 1060;
1071 -> 1069;
1072 -> 1070;
1072 -> 1061;
1072 -> 0;
1072 -> 1069;
1073 -> 1069;
1074 -> 1070;
1074 -> 1061;
1074 -> 0;
1074 -> 1069;
1075 -> 1070;
1075 -> 1061;
1075 -> 1074;
1076 -> 1074;
1077 -> 1075;
1077 -> 1076;
1078 -> 1077;
1078 -> 1061;
1078 -> 0;
1078 -> 1076;
1079 -> 1076;
1080 -> 1077;
1080 -> 1061;
1080 -> 0;
1081 -> 1077;
1081 -> 1061;
1081 -> 0;
1081 -> 1076;
1082 -> 1077;
1082 -> 1061;
1082 -> 0;
1082 -> 1076;
1083 -> 1077;
1083 -> 1061;
1083 -> 0;
1083 -> 1076;
1084 -> 1077;
1084 -> 1061;
1084 -> 0;
1084 -> 1076;
1085 -> 1077;
1085 -> 1061;
1085 -> 0;
1085 -> 1076;
1086 -> 1077;
1087 -> 1058;
1088 -> 1086;
1088 -> 1087;
1089 -> 1088;
1089 -> 1087;
1090 -> 1089;
1091 -> 1058;
1092 -> 1060;
1092 -> 1091;
1093 -> 1091;
1094 -> 1092;
1094 -> 1077;
1094 -> 1093;
1094 -> 1091;
1095 -> 1091;
1096 -> 1092;
1096 -> 1077;
1096 -> 1095;
1097 -> 1094;
1097 -> 1058;
1098 -> 1059;
1098 -> 1097;
1099 -> 1097;
1100 -> 1098;
1100 -> 1099;
1101 -> 1060;
1101 -> 1099;
1102 -> 1100;
1102 -> 1077;
1102 -> 1099;
1103 -> 1102;
1104 -> 1101;
1104 -> 1102;
1105 -> 1097;
1106 -> 885;
1107 -> 897;
1107 -> 1106;
1108 -> 1107;
1108 -> 1104;
1108 -> 1106;
1109 -> 1106;
1110 -> 1108;
1110 -> 1109;
1110 -> 1106;
1111 -> 1106;
1112 -> 1108;
1112 -> 1111;
1112 -> 1104;
1112 -> 1106;
1113 -> 1112;
1114 -> 885;
1115 -> 891;
1115 -> 885;
1116 -> 1115;
1116 -> 1113;
1116 -> 885;
1117 -> 876;
1117 -> 1113;
1117 -> 879;
1118 -> 880;
1118 -> 879;
1119 -> 1117;
1119 -> 1118;
1119 -> 1113;
1119 -> 879;
1120 -> 876;
1120 -> 1119;
1120 -> 872;
1121 -> 876;
1121 -> 1119;
1121 -> 872;
1122 -> 866;
1122 -> 725;
1123 -> 1122;
1123 -> 1119;
1123 -> 725;
1124 -> 1121;
1124 -> 725;
1125 -> 688;
1126 -> 653;
1126 -> 1124;
1126 -> 1125;
1126 -> 688;
1127 -> 652;
1127 -> 1124;
1127 -> 648;
1128 -> 649;
1128 -> 0;
1128 -> 648;
1129 -> 1128;
1130 -> 1129;
1130 -> 1128;
1131 -> 652;
1131 -> 1128;
1132 -> 1128;
1133 -> 1130;
1133 -> 1132;
1134 -> 1131;
1134 -> 1132;
1135 -> 653;
1135 -> 1132;
1136 -> 1135;
1136 -> 1132;
1137 -> 1132;
1138 -> 1133;
1138 -> 1132;
1139 -> 1134;
1139 -> 1132;
1140 -> 1132;
1141 -> 1136;
1141 -> 1140;
1142 -> 1137;
1142 -> 1140;
1143 -> 1137;
1143 -> 1140;
1144 -> 1137;
1144 -> 1140;
1145 -> 1137;
1145 -> 1140;
1146 -> 1138;
1146 -> 1140;
1147 -> 1137;
1147 -> 1140;
1148 -> 1139;
1148 -> 1140;
1149 -> 1140;
1150 -> 1141;
1150 -> 1149;
1150 -> 1140;
1151 -> 1140;
1152 -> 1146;
1152 -> 1151;
1152 -> 1140;
1153 -> 1140;
1154 -> 1141;
1154 -> 1153;
1155 -> 1154;
1155 -> 1127;
1155 -> 1153;
1156 -> 1155;
1156 -> 1140;
1157 -> 1140;
1158 -> 1140;
1159 -> 1147;
1159 -> 1140;
1160 -> 1141;
1160 -> 1159;
1161 -> 1142;
1161 -> 1159;
1162 -> 1145;
1162 -> 1159;
1163 -> 1146;
1163 -> 1159;
1164 -> 1148;
1164 -> 1159;
1165 -> 1159;
1166 -> 1160;
1166 -> 1165;
1167 -> 1161;
1167 -> 1165;
1168 -> 1162;
1168 -> 1165;
1169 -> 1163;
1169 -> 1165;
1170 -> 1164;
1170 -> 1165;
1171 -> 1170;
1171 -> 1165;
1172 -> 1165;
1173 -> 1171;
1173 -> 1172;
1174 -> 1166;
1174 -> 1172;
1175 -> 1172;
1176 -> 1174;
1176 -> 1127;
1176 -> 1175;
1176 -> 1172;
1177 -> 1176;
1178 -> 1174;
1178 -> 1176;
1179 -> 1176;
1180 -> 1179;
1181 -> 1180;
1181 -> 1179;
1182 -> 1176;
1183 -> 1182;
1183 -> 1178;
1184 -> 1183;
1184 -> 1176;
1185 -> 1176;
1186 -> 1174;
1186 -> 1185;
1187 -> 1186;
1187 -> 1178;
1187 -> 1185;
1188 -> 1185;
1189 -> 1187;
1189 -> 1188;
1190 -> 1189;
1190 -> 1187;
1190 -> 1188;
1191 -> 1188;
1192 -> 1190;
1192 -> 1191;
1193 -> 1191;
1194 -> 1192;
1194 -> 1193;
1195 -> 1193;
1196 -> 1194;
1196 -> 1195;
1197 -> 1196;
1197 -> 1193;
1198 -> 1194;
1198 -> 1191;
1199 -> 1190;
1199 -> 1191;
1200 -> 1191;
1201 -> 1199;
1201 -> 1200;
1202 -> 1201;
1202 -> 1198;
1202 -> 1200;
1203 -> 1202;
1203 -> 1191;
1204 -> 1203;
1204 -> 1176;
1205 -> 1184;
1205 -> 1204;
1205 -> 1176;
1206 -> 1178;
1206 -> 1205;
1208 -> 0;
1210 -> 1207;
1210 -> 1209;
1211 -> 1208;
1211 -> 1209;
1212 -> 1209;
1213 -> 1212;
1213 -> 1209;
1214 -> 1210;
1214 -> 1212;
1214 -> 1209;
1215 -> 1211;
1215 -> 1212;
1215 -> 1209;
1216 -> 1209;
1217 -> 1216;
1217 -> 1206;
1218 -> 1174;
1218 -> 1203;
1218 -> 1176;
1219 -> 1217;
1219 -> 1176;
1220 -> 1176;
1221 -> 1218;
1221 -> 1219;
1221 -> 1220;
1221 -> 1214;
1221 -> 1215;
1221 -> 1203;
1221 -> 0;
1221 -> 1176;
1222 -> 1174;
1222 -> 1221;
1222 -> 1172;
1223 -> 1222;
1223 -> 1165;
1224 -> 1223;
1224 -> 1221;
1224 -> 1165;
1225 -> 1223;
1225 -> 1221;
1225 -> 1165;
1226 -> 1169;
1226 -> 1225;
1226 -> 1129;
1226 -> 1221;
1226 -> 1165;
1227 -> 1223;
1227 -> 1226;
1227 -> 1165;
1228 -> 1165;
1229 -> 1227;
1229 -> 1228;
1229 -> 1165;
1230 -> 1229;
1231 -> 1141;
1231 -> 1140;
1232 -> 1142;
1232 -> 1140;
1233 -> 1143;
1233 -> 1140;
1234 -> 1144;
1234 -> 1140;
1235 -> 1145;
1235 -> 1140;
1236 -> 1146;
1236 -> 1140;
1237 -> 1147;
1237 -> 1140;
1238 -> 1230;
1238 -> 1140;
1239 -> 1148;
1239 -> 1140;
1240 -> 1140;
1241 -> 1140;
1242 -> 1231;
1242 -> 1241;
1243 -> 1232;
1243 -> 1241;
1244 -> 1233;
1244 -> 1241;
1245 -> 1234;
1245 -> 1241;
1246 -> 1235;
1246 -> 1241;
1247 -> 1236;
1247 -> 1241;
1248 -> 1237;
1248 -> 1241;
1249 -> 1238;
1249 -> 1241;
1250 -> 1239;
1250 -> 1241;
1251 -> 1240;
1251 -> 1241;
1252 -> 1241;
1253 -> 1252;
1253 -> 1241;
1254 -> 1252;
1254 -> 1241;
1255 -> 1252;
1255 -> 1241;
1256 -> 1252;
1256 -> 1241;
1257 -> 1252;
1257 -> 1241;
1258 -> 1252;
1258 -> 1241;
1259 -> 1252;
1259 -> 1241;
1260 -> 1252;
1260 -> 1241;
1261 -> 1252;
1261 -> 1241;
1262 -> 1252;
1262 -> 1241;
1263 -> 1252;
1263 -> 1241;
1264 -> 1241;
1265 -> 1242;
1265 -> 1264;
1265 -> 1241;
1266 -> 1241;
1267 -> 1247;
1267 -> 1266;
1267 -> 1241;
1268 -> 1242;
1268 -> 1252;
1268 -> 1241;
1269 -> 1243;
1269 -> 1252;
1269 -> 1241;
1270 -> 1244;
1270 -> 1252;
1270 -> 1241;
1271 -> 1250;
1271 -> 1252;
1271 -> 1241;
1272 -> 1247;
1272 -> 1252;
1272 -> 1241;
1273 -> 1248;
1273 -> 1252;
1273 -> 1241;
1274 -> 1249;
1274 -> 1252;
1274 -> 1241;
1275 -> 1246;
1275 -> 1252;
1275 -> 1241;
1276 -> 1246;
1276 -> 1241;
1277 -> 1241;
1278 -> 1276;
1278 -> 1277;
1279 -> 1252;
1279 -> 1277;
1280 -> 1278;
1280 -> 1277;
1281 -> 1241;
1282 -> 1244;
1282 -> 1245;
1282 -> 1241;
1283 -> 1245;
1283 -> 1252;
1283 -> 1241;
1284 -> 1140;
1285 -> 1141;
1285 -> 1284;
1286 -> 1285;
1286 -> 1226;
1286 -> 1284;
1287 -> 1286;
1287 -> 1140;
1288 -> 1287;
1289 -> 1288;
1289 -> 1240;
1289 -> 1287;
1290 -> 1140;
1291 -> 1141;
1291 -> 1290;
1292 -> 1290;
1293 -> 1291;
1293 -> 1292;
1294 -> 1292;
1295 -> 1293;
1295 -> 1294;
1296 -> 1294;
1297 -> 1295;
1297 -> 1296;
1298 -> 1297;
1298 -> 1226;
1298 -> 1296;
1299 -> 1297;
1299 -> 1226;
1299 -> 1296;
1300 -> 1299;
1300 -> 1294;
1301 -> 1295;
1301 -> 1226;
1301 -> 1294;
1302 -> 1290;
1303 -> 1301;
1303 -> 1140;
1304 -> 1140;
1305 -> 1303;
1305 -> 1304;
1306 -> 1240;
1306 -> 1304;
1307 -> 1305;
1307 -> 1301;
1307 -> 1304;
1308 -> 1306;
1308 -> 1307;
1309 -> 1307;
1310 -> 1308;
1310 -> 1309;
1310 -> 1307;
1310 -> 1252;
1310 -> 1253;
1310 -> 1268;
1310 -> 1254;
1310 -> 1270;
1310 -> 1255;
1310 -> 1283;
1310 -> 1256;
1310 -> 1272;
1310 -> 1257;
1310 -> 1275;
1310 -> 1258;
1310 -> 1269;
1310 -> 1259;
1310 -> 1273;
1310 -> 1260;
1310 -> 1261;
1310 -> 1274;
1310 -> 1262;
1310 -> 1289;
1310 -> 1263;
1310 -> 1271;
1310 -> 1127;
1310 -> 1288;
1311 -> 1310;
1311 -> 1309;
1312 -> 1310;
1312 -> 1309;
1313 -> 1310;
1313 -> 1309;
1314 -> 1313;
1314 -> 1310;
1314 -> 1309;
1315 -> 1311;
1315 -> 1309;
1316 -> 1309;
1317 -> 1314;
1317 -> 1316;
1318 -> 1315;
1318 -> 1316;
1319 -> 1316;
1320 -> 1317;
1320 -> 1319;
1320 -> 1316;
1321 -> 1309;
1322 -> 1313;
1322 -> 1310;
1322 -> 1309;
1323 -> 1309;
1324 -> 1313;
1324 -> 1322;
1324 -> 1323;
1325 -> 1324;
1325 -> 1309;
1326 -> 1311;
1326 -> 1325;
1327 -> 1325;
1328 -> 1326;
1328 -> 1327;
1329 -> 1313;
1329 -> 1327;
1330 -> 1327;
1331 -> 1329;
1331 -> 1322;
1331 -> 1327;
1332 -> 1331;
1332 -> 1325;
1333 -> 1332;
1333 -> 1325;
1334 -> 1309;
1335 -> 1310;
1335 -> 1334;
1335 -> 1333;
1335 -> 1307;
1336 -> 1140;
1337 -> 1140;
1338 -> 1240;
1338 -> 1337;
1339 -> 1338;
1339 -> 1335;
1339 -> 1337;
1340 -> 1337;
1341 -> 1339;
1341 -> 1340;
1341 -> 1337;
1342 -> 1337;
1343 -> 1342;
1343 -> 1337;
1344 -> 1339;
1344 -> 1343;
1344 -> 1335;
1344 -> 1337;
1345 -> 1344;
1346 -> 1140;
1347 -> 1140;
1348 -> 1142;
1348 -> 1347;
1348 -> 1140;
1349 -> 1140;
1350 -> 1142;
1350 -> 1349;
1350 -> 1140;
1351 -> 1140;
1352 -> 1141;
1352 -> 1351;
1353 -> 1352;
1353 -> 1345;
1353 -> 1351;
1354 -> 1353;
1354 -> 1140;
1355 -> 1140;
1356 -> 1147;
1356 -> 1355;
1356 -> 1140;
1357 -> 1141;
1357 -> 1356;
1358 -> 1146;
1358 -> 1356;
1359 -> 1148;
1359 -> 1356;
1360 -> 1356;
1361 -> 1357;
1361 -> 1360;
1362 -> 1358;
1362 -> 1360;
1363 -> 1359;
1363 -> 1360;
1364 -> 1360;
1365 -> 1361;
1365 -> 1364;
1366 -> 1364;
1367 -> 1365;
1367 -> 1366;
1368 -> 1366;
1369 -> 1367;
1369 -> 1368;
1370 -> 1369;
1370 -> 1354;
1370 -> 1368;
1371 -> 1369;
1371 -> 1354;
1371 -> 1368;
1372 -> 1371;
1372 -> 1366;
1373 -> 1367;
1373 -> 1354;
1373 -> 1366;
1374 -> 1373;
1374 -> 1360;
1375 -> 1363;
1375 -> 1360;
1376 -> 1375;
1376 -> 1374;
1376 -> 1127;
1376 -> 1373;
1376 -> 1360;
1377 -> 1360;
1378 -> 1362;
1378 -> 1376;
1378 -> 1360;
1379 -> 1356;
1380 -> 1356;
1381 -> 1142;
1381 -> 1380;
1381 -> 1356;
1386 -> 1383;
1386 -> 1382;
1387 -> 1384;
1387 -> 1382;
1388 -> 1385;
1388 -> 1382;
1389 -> 1382;
1390 -> 1135;
1390 -> 1132;
1391 -> 1132;
1392 -> 1133;
1392 -> 1132;
1393 -> 1134;
1393 -> 1132;
1394 -> 1132;
1395 -> 1390;
1395 -> 1394;
1396 -> 1391;
1396 -> 1394;
1397 -> 1391;
1397 -> 1394;
1398 -> 1392;
1398 -> 1394;
1399 -> 1393;
1399 -> 1394;
1400 -> 1391;
1400 -> 1394;
1401 -> 1391;
1401 -> 1394;
1402 -> 1394;
1403 -> 1394;
1404 -> 1397;
1404 -> 1403;
1404 -> 1394;
1405 -> 1394;
1406 -> 1395;
1406 -> 1405;
1407 -> 1405;
1408 -> 1406;
1408 -> 1407;
1409 -> 1408;
1409 -> 1378;
1409 -> 1407;
1410 -> 1408;
1410 -> 1378;
1410 -> 1407;
1411 -> 1410;
1411 -> 1405;
1412 -> 1406;
1412 -> 1378;
1412 -> 1405;
1413 -> 1412;
1413 -> 1394;
1414 -> 1413;
1414 -> 1396;
1414 -> 1394;
1415 -> 1395;
1415 -> 1394;
1416 -> 1402;
1416 -> 1394;
1417 -> 1400;
1417 -> 1394;
1418 -> 1401;
1418 -> 1394;
1419 -> 1394;
1420 -> 1398;
1420 -> 1394;
1421 -> 1399;
1421 -> 1394;
1422 -> 1394;
1423 -> 1414;
1423 -> 1422;
1424 -> 1415;
1424 -> 1422;
1425 -> 1416;
1425 -> 1422;
1426 -> 1417;
1426 -> 1422;
1427 -> 1418;
1427 -> 1422;
1428 -> 1419;
1428 -> 1422;
1429 -> 1419;
1429 -> 1422;
1430 -> 1420;
1430 -> 1422;
1431 -> 1421;
1431 -> 1422;
1432 -> 1419;
1432 -> 1422;
1433 -> 1422;
1434 -> 1433;
1434 -> 1422;
1435 -> 1433;
1435 -> 1422;
1436 -> 1433;
1436 -> 1422;
1437 -> 1433;
1437 -> 1422;
1438 -> 1433;
1438 -> 1422;
1439 -> 1433;
1439 -> 1422;
1440 -> 1433;
1440 -> 1422;
1441 -> 1433;
1441 -> 1422;
1442 -> 1433;
1442 -> 1422;
1443 -> 1433;
1443 -> 1422;
1444 -> 1433;
1444 -> 1422;
1445 -> 1433;
1445 -> 1422;
1446 -> 1423;
1446 -> 1433;
1446 -> 1422;
1447 -> 1424;
1447 -> 1433;
1447 -> 1422;
1448 -> 1425;
1448 -> 1433;
1448 -> 1422;
1449 -> 1426;
1449 -> 1433;
1449 -> 1422;
1450 -> 1427;
1450 -> 1433;
1450 -> 1422;
1451 -> 1428;
1451 -> 1433;
1451 -> 1422;
1452 -> 1429;
1452 -> 1433;
1452 -> 1422;
1453 -> 1430;
1453 -> 1433;
1453 -> 1422;
1454 -> 1431;
1454 -> 1433;
1454 -> 1422;
1455 -> 1394;
1456 -> 1395;
1456 -> 1455;
1457 -> 1455;
1458 -> 1456;
1458 -> 1457;
1459 -> 1458;
1459 -> 1412;
1459 -> 1457;
1460 -> 1458;
1460 -> 1412;
1460 -> 1457;
1461 -> 1460;
1461 -> 1455;
1462 -> 1456;
1462 -> 1412;
1462 -> 1455;
1463 -> 1462;
1463 -> 1394;
1464 -> 1463;
1464 -> 1419;
1464 -> 1462;
1464 -> 1433;
1464 -> 1434;
1464 -> 1446;
1464 -> 1435;
1464 -> 1447;
1464 -> 1436;
1464 -> 1448;
1464 -> 1437;
1464 -> 1449;
1464 -> 1438;
1464 -> 1450;
1464 -> 1439;
1464 -> 1451;
1464 -> 1440;
1464 -> 1452;
1464 -> 1441;
1464 -> 1453;
1464 -> 1442;
1464 -> 1443;
1464 -> 1444;
1464 -> 1445;
1464 -> 1454;
1464 -> 1391;
1464 -> 1127;
1464 -> 1394;
1465 -> 1394;
1466 -> 1464;
1466 -> 1465;
1467 -> 1464;
1467 -> 1465;
1468 -> 1467;
1468 -> 1464;
1468 -> 1465;
1469 -> 1466;
1469 -> 1468;
1469 -> 1465;
1470 -> 1469;
1471 -> 1469;
1472 -> 1469;
1473 -> 1471;
1473 -> 1472;
1474 -> 1467;
1474 -> 1472;
1475 -> 1474;
1475 -> 1468;
1475 -> 1472;
1476 -> 1472;
1477 -> 1475;
1478 -> 1469;
1479 -> 1469;
1480 -> 1478;
1480 -> 1479;
1481 -> 1467;
1481 -> 1479;
1482 -> 1481;
1482 -> 1468;
1482 -> 1479;
1483 -> 1479;
1484 -> 1482;
1485 -> 1469;
1486 -> 1467;
1486 -> 1485;
1487 -> 1486;
1487 -> 1468;
1487 -> 1485;
1488 -> 1469;
1489 -> 1469;
1490 -> 1489;
1490 -> 1469;
1491 -> 1490;
1492 -> 1490;
1493 -> 1491;
1493 -> 1492;
1494 -> 1467;
1494 -> 1492;
1495 -> 1494;
1495 -> 1468;
1495 -> 1492;
1496 -> 1492;
1497 -> 1495;
1498 -> 1490;
1499 -> 1467;
1499 -> 1498;
1500 -> 1499;
1500 -> 1468;
1500 -> 1487;
1500 -> 1498;
1501 -> 1490;
1502 -> 1490;
1503 -> 1467;
1503 -> 1468;
1503 -> 1502;
1503 -> 1490;
1504 -> 1490;
1505 -> 1502;
1505 -> 1504;
1506 -> 1502;
1506 -> 1504;
1507 -> 1467;
1507 -> 1504;
1508 -> 1505;
1508 -> 1504;
1509 -> 1506;
1509 -> 1504;
1510 -> 1508;
1510 -> 1509;
1510 -> 1504;
1511 -> 1504;
1512 -> 1510;
1512 -> 1511;
1513 -> 1507;
1513 -> 1511;
1514 -> 1513;
1514 -> 1468;
1514 -> 1511;
1515 -> 1511;
1516 -> 1514;
1517 -> 1504;
1518 -> 1490;
1519 -> 1467;
1519 -> 1518;
1520 -> 1519;
1520 -> 1468;
1520 -> 1487;
1520 -> 1500;
1520 -> 1518;
1521 -> 1518;
1522 -> 1519;
1522 -> 1468;
1522 -> 1487;
1522 -> 1500;
1522 -> 1520;
1522 -> 1521;
1522 -> 1518;
1523 -> 1490;
1524 -> 1490;
1525 -> 1490;
1526 -> 1524;
1526 -> 1525;
1527 -> 1467;
1527 -> 1525;
1528 -> 1527;
1528 -> 1468;
1528 -> 1525;
1529 -> 1525;
1530 -> 1528;
1531 -> 1469;
1532 -> 1469;
1533 -> 1531;
1533 -> 1532;
1534 -> 1467;
1534 -> 1532;
1535 -> 1534;
1535 -> 1468;
1535 -> 1532;
1536 -> 1532;
1537 -> 1535;
1538 -> 1469;
1539 -> 1467;
1539 -> 1538;
1540 -> 1539;
1540 -> 1468;
1540 -> 1487;
1540 -> 1500;
1540 -> 1520;
1540 -> 1538;
1541 -> 1469;
1542 -> 1467;
1542 -> 1468;
1542 -> 1465;
1543 -> 1466;
1543 -> 1468;
1543 -> 1487;
1543 -> 1500;
1543 -> 1520;
1543 -> 1540;
1543 -> 1465;
1544 -> 1467;
1544 -> 1468;
1544 -> 1487;
1544 -> 1500;
1544 -> 1520;
1544 -> 1540;
1544 -> 1543;
1545 -> 1467;
1545 -> 1543;
1546 -> 1545;
1546 -> 1543;
1546 -> 1544;
1546 -> 1468;
1546 -> 1487;
1546 -> 1500;
1546 -> 1520;
1546 -> 1540;
1547 -> 1543;
1548 -> 1546;
1548 -> 1547;
1549 -> 1546;
1549 -> 1547;
1550 -> 1549;
1550 -> 1546;
1550 -> 1547;
1551 -> 1547;
1552 -> 1549;
1552 -> 1550;
1552 -> 1551;
1552 -> 1547;
1553 -> 1548;
1553 -> 1547;
1554 -> 1547;
1555 -> 1553;
1555 -> 1554;
1556 -> 1549;
1556 -> 1554;
1557 -> 1556;
1557 -> 1550;
1557 -> 1554;
1558 -> 1555;
1558 -> 1554;
1559 -> 1554;
1560 -> 1558;
1560 -> 1559;
1561 -> 1560;
1561 -> 1559;
1562 -> 1561;
1562 -> 1557;
1562 -> 1559;
1563 -> 1554;
1564 -> 1556;
1564 -> 1562;
1564 -> 1563;
1564 -> 1554;
1565 -> 1555;
1565 -> 1554;
1566 -> 1565;
1566 -> 1562;
1566 -> 1554;
1567 -> 1566;
1567 -> 1554;
1568 -> 1554;
1569 -> 1554;
1570 -> 1569;
1570 -> 1554;
1571 -> 1555;
1571 -> 1554;
1572 -> 1568;
1572 -> 1554;
1573 -> 1569;
1573 -> 1554;
1574 -> 1554;
1575 -> 1571;
1575 -> 1574;
1576 -> 1572;
1576 -> 1574;
1577 -> 1573;
1577 -> 1574;
1578 -> 1556;
1578 -> 1574;
1579 -> 0;
1579 -> 1574;
1580 -> 1574;
1581 -> 1574;
1582 -> 1575;
1582 -> 1566;
1582 -> 1574;
1583 -> 1582;
1583 -> 1566;
1584 -> 1583;
1584 -> 1579;
1584 -> 1582;
1585 -> 1584;
1585 -> 1582;
1586 -> 1582;
1587 -> 1578;
1587 -> 1586;
1587 -> 1582;
1588 -> 1587;
1588 -> 1582;
1589 -> 1574;
1590 -> 1581;
1590 -> 1589;
1590 -> 1574;
1591 -> 0;
1591 -> 1590;
1592 -> 1574;
1593 -> 1592;
1593 -> 1554;
1594 -> 1591;
1594 -> 0;
1594 -> 1554;
1595 -> 1585;
1595 -> 0;
1595 -> 1594;
1596 -> 1594;
1597 -> 1547;
1598 -> 1549;
1598 -> 1587;
1598 -> 1547;
1599 -> 1548;
1599 -> 1587;
1599 -> 1598;
1600 -> 1549;
1600 -> 1599;
1601 -> 1549;
1601 -> 1599;
1602 -> 1601;
1602 -> 1599;
1602 -> 1600;
1603 -> 1599;
1604 -> 1602;
1605 -> 1466;
1605 -> 1602;
1605 -> 1465;
1606 -> 1605;
1607 -> 1606;
1608 -> 1605;
1609 -> 1605;
1610 -> 1605;
1611 -> 1609;
1611 -> 1610;
1612 -> 1467;
1612 -> 1610;
1613 -> 1612;
1613 -> 1602;
1613 -> 1610;
1614 -> 1610;
1615 -> 1613;
1616 -> 1605;
1617 -> 1616;
1617 -> 1602;
1617 -> 1606;
1618 -> 1616;
1619 -> 1616;
1619 -> 1602;
1619 -> 1606;
1619 -> 1617;
1619 -> 1618;
1620 -> 1605;
1621 -> 1605;
1622 -> 1605;
1623 -> 1621;
1623 -> 1622;
1624 -> 1467;
1624 -> 1622;
1625 -> 1624;
1625 -> 1602;
1625 -> 1622;
1626 -> 1622;
1627 -> 1625;
1628 -> 1394;
1629 -> 1419;
1629 -> 1617;
1629 -> 1628;
1629 -> 1394;
1630 -> 1402;
1630 -> 1394;
1631 -> 1394;
1632 -> 1400;
1632 -> 1631;
1632 -> 1394;
1633 -> 1632;
1634 -> 1395;
1634 -> 1633;
1635 -> 1633;
1636 -> 1634;
1636 -> 1617;
1636 -> 1635;
1637 -> 1635;
1638 -> 1636;
1638 -> 1632;
1639 -> 1638;
1640 -> 1398;
1640 -> 1638;
1641 -> 1399;
1641 -> 1638;
1642 -> 1638;
1643 -> 1639;
1643 -> 1642;
1644 -> 1639;
1644 -> 1642;
1645 -> 1640;
1645 -> 1642;
1646 -> 1641;
1646 -> 1642;
1647 -> 1643;
1647 -> 1642;
1648 -> 1132;
1649 -> 1133;
1649 -> 1132;
1650 -> 1134;
1650 -> 1132;
1651 -> 1132;
1652 -> 1648;
1652 -> 1651;
1653 -> 1649;
1653 -> 1651;
1654 -> 1650;
1654 -> 1651;
1655 -> 1135;
1655 -> 1651;
1656 -> 1651;
1657 -> 1655;
1657 -> 1647;
1657 -> 1656;
1657 -> 1651;
1658 -> 1652;
1658 -> 1651;
1659 -> 1651;
1660 -> 1658;
1660 -> 1659;
1661 -> 1655;
1661 -> 1659;
1662 -> 1659;
1663 -> 1661;
1663 -> 1647;
1663 -> 1662;
1663 -> 1659;
1664 -> 1651;
1665 -> 1128;
1666 -> 1129;
1666 -> 1128;
1667 -> 654;
1667 -> 1666;
1667 -> 1647;
1667 -> 1128;
1668 -> 651;
1668 -> 648;
1669 -> 654;
1669 -> 648;
1670 -> 652;
1670 -> 648;
1671 -> 1668;
1671 -> 1669;
1671 -> 1670;
1671 -> 653;
1671 -> 643;
1671 -> 1667;
1671 -> 648;
1672 -> 648;
1673 -> 638;
1674 -> 643;
1674 -> 1671;
1674 -> 638;
1675 -> 1674;
1675 -> 628;
1676 -> 630;
1676 -> 628;
1677 -> 628;
1678 -> 1675;
1678 -> 1677;
1679 -> 1676;
1679 -> 1677;
1680 -> 1678;
1680 -> 1677;
1681 -> 1679;
1681 -> 1677;
1682 -> 1677;
1683 -> 1680;
1683 -> 1682;
1684 -> 1681;
1684 -> 1682;
1685 -> 1683;
1685 -> 1682;
1686 -> 1684;
1686 -> 1682;
1687 -> 1682;
1688 -> 1682;
1689 -> 1685;
1689 -> 1688;
1690 -> 1686;
1690 -> 1688;
1691 -> 1687;
1691 -> 1688;
1692 -> 1688;
1693 -> 1690;
1693 -> 1692;
1693 -> 1688;
1694 -> 1690;
1694 -> 1688;
1695 -> 1690;
1695 -> 1688;
1696 -> 1689;
1696 -> 1688;
1697 -> 1691;
1697 -> 1694;
1697 -> 1695;
1697 -> 1688;
1698 -> 1696;
1698 -> 1697;
1698 -> 1688;
1699 -> 1690;
1699 -> 1688;
1700 -> 1688;
1701 -> 1698;
1701 -> 1700;
1701 -> 1688;
1702 -> 1688;
1704 -> 1703;
1706 -> 1705;
1707 -> 1690;
1707 -> 1688;
1708 -> 1689;
1708 -> 1688;
1709 -> 1688;
1710 -> 1707;
1710 -> 1709;
1711 -> 1708;
1711 -> 1709;
1712 -> 1709;
1713 -> 1709;
1714 -> 1711;
1714 -> 1709;
1715 -> 1714;
1715 -> 1698;
1715 -> 1709;
1716 -> 1715;
1716 -> 1709;
1717 -> 1713;
1717 -> 1716;
1718 -> 1717;
1718 -> 1712;
1718 -> 1709;
1719 -> 1717;
1719 -> 1712;
1719 -> 1709;
1720 -> 1719;
1720 -> 1709;
1721 -> 1710;
1721 -> 1709;
1722 -> 1710;
1722 -> 1709;
1723 -> 1710;
1723 -> 1709;
1724 -> 1709;
1725 -> 1723;
1725 -> 1724;
1727 -> 1726;
1728 -> 1726;
1729 -> 1728;
1729 -> 1724;
1730 -> 1724;
1731 -> 1725;
1731 -> 1724;
1732 -> 1724;
1733 -> 1732;
1733 -> 1709;
1734 -> 1711;
1734 -> 1733;
1735 -> 1733;
1736 -> 1734;
1736 -> 1735;
1737 -> 1736;
1737 -> 1735;
1738 -> 1735;
1739 -> 1728;
1739 -> 1735;
1740 -> 1737;
1740 -> 1738;
1740 -> 1739;
1740 -> 1698;
1740 -> 1735;
1741 -> 1709;
1742 -> 1741;
1742 -> 1709;
1743 -> 1709;
1744 -> 1709;
1745 -> 1741;
1745 -> 1744;
1745 -> 1742;
1745 -> 1709;
1746 -> 1709;
1747 -> 1710;
1747 -> 1709;
1748 -> 1741;
1748 -> 1709;
1749 -> 1746;
1749 -> 1709;
1750 -> 1709;
1751 -> 1748;
1751 -> 1750;
1752 -> 1749;
1752 -> 1750;
1753 -> 1752;
1753 -> 1746;
1753 -> 1750;
1754 -> 1750;
1755 -> 1754;
1755 -> 1753;
1755 -> 1750;
1756 -> 1709;
1757 -> 1709;
1758 -> 1741;
1758 -> 1757;
1758 -> 1745;
1758 -> 1709;
1759 -> 1709;
1760 -> 1740;
1760 -> 1709;
1761 -> 1709;
1762 -> 1760;
1762 -> 1709;
1763 -> 1709;
1764 -> 1761;
1764 -> 1763;
1764 -> 1709;
1765 -> 1709;
1766 -> 1741;
1766 -> 1765;
1766 -> 1758;
1766 -> 1709;
1767 -> 1746;
1767 -> 1709;
1768 -> 1759;
1768 -> 1709;
1772 -> 1770;
1772 -> 1769;
1773 -> 1771;
1773 -> 1769;
1774 -> 1769;
1775 -> 0;
1775 -> 1709;
1776 -> 1709;
1777 -> 1709;
1778 -> 1767;
1778 -> 1777;
1779 -> 1768;
1779 -> 1777;
1780 -> 1775;
1780 -> 1777;
1781 -> 1776;
1781 -> 1777;
1782 -> 1776;
1782 -> 1777;
1783 -> 1777;
1784 -> 1781;
1784 -> 1783;
1784 -> 1777;
1785 -> 1784;
1785 -> 1777;
1786 -> 0;
1788 -> 1786;
1788 -> 1787;
1789 -> 1787;
1791 -> 1790;
1793 -> 1792;
1795 -> 1794;
1796 -> 1789;
1797 -> 1789;
1797 -> 1787;
1798 -> 1788;
1798 -> 1789;
1798 -> 1787;
1799 -> 1787;
1800 -> 1777;
1801 -> 1800;
1801 -> 1782;
1801 -> 1777;
1802 -> 1778;
1802 -> 1777;
1803 -> 1779;
1803 -> 1777;
1804 -> 1780;
1804 -> 1777;
1805 -> 1802;
1805 -> 1777;
1806 -> 1803;
1806 -> 1777;
1807 -> 1801;
1807 -> 1777;
1808 -> 1777;
1809 -> 1805;
1809 -> 1808;
1810 -> 1806;
1810 -> 1808;
1811 -> 1807;
1811 -> 1808;
1812 -> 1785;
1812 -> 1808;
1813 -> 1809;
1813 -> 1808;
1814 -> 1809;
1814 -> 1802;
1814 -> 1808;
1815 -> 1810;
1815 -> 1808;
1816 -> 1810;
1816 -> 1803;
1816 -> 1808;
1817 -> 1808;
1818 -> 1813;
1818 -> 1817;
1819 -> 1814;
1819 -> 1817;
1820 -> 1815;
1820 -> 1817;
1821 -> 1816;
1821 -> 1817;
1822 -> 1812;
1822 -> 1817;
1823 -> 1818;
1823 -> 1817;
1824 -> 1819;
1824 -> 1817;
1825 -> 1820;
1825 -> 1817;
1826 -> 1821;
1826 -> 1817;
1827 -> 1817;
1828 -> 1823;
1828 -> 1827;
1829 -> 1824;
1829 -> 1827;
1830 -> 1825;
1830 -> 1827;
1831 -> 1826;
1831 -> 1827;
1832 -> 1822;
1832 -> 1827;
1833 -> 1827;
1834 -> 1829;
1834 -> 1833;
1834 -> 1827;
1835 -> 1827;
1836 -> 1831;
1836 -> 1835;
1836 -> 1827;
1837 -> 1834;
1837 -> 1836;
1837 -> 1827;
1838 -> 1827;
1839 -> 1838;
1839 -> 1837;
1839 -> 1827;
1840 -> 1827;
1841 -> 1840;
1841 -> 1829;
1841 -> 1827;
1842 -> 1827;
1843 -> 1842;
1843 -> 1831;
1843 -> 1827;
1844 -> 1827;
1845 -> 1844;
1845 -> 1829;
1845 -> 1827;
1846 -> 1837;
1846 -> 1827;
1847 -> 1819;
1847 -> 1817;
1848 -> 1821;
1848 -> 1817;
1849 -> 1817;
1850 -> 1847;
1850 -> 1849;
1850 -> 1817;
1851 -> 1817;
1852 -> 1847;
1852 -> 1851;
1852 -> 1817;
1853 -> 1817;
1854 -> 1848;
1854 -> 1853;
1854 -> 1817;
1855 -> 1817;
1856 -> 1855;
1856 -> 1808;
1857 -> 1808;
1858 -> 1857;
1858 -> 1777;
1859 -> 1804;
1859 -> 1858;
1859 -> 1777;
1860 -> 1741;
1860 -> 1859;
1860 -> 1766;
1860 -> 1709;
1861 -> 1759;
1861 -> 1709;
1862 -> 1746;
1862 -> 1709;
1863 -> 1741;
1863 -> 1860;
1863 -> 1709;
1864 -> 1863;
1864 -> 1688;
1865 -> 1677;
1866 -> 628;
1867 -> 629;
1867 -> 628;
1868 -> 1674;
1868 -> 628;
1869 -> 628;
1870 -> 1867;
1870 -> 1869;
1871 -> 1868;
1871 -> 1869;
1872 -> 1871;
1872 -> 1869;
1873 -> 628;
1874 -> 629;
1874 -> 628;
1875 -> 1;
1876 -> 1875;
1876 -> 625;
1876 -> 1762;
1876 -> 1;
1877 -> 1876;
1877 -> 1;
1878 -> 1;
1879 -> 1877;
1879 -> 1878;
1880 -> 1877;
1880 -> 1878;
1881 -> 1877;
1881 -> 1878;
1882 -> 1877;
1882 -> 1878;
1883 -> 1877;
1883 -> 1878;
1884 -> 1877;
1884 -> 1878;
1885 -> 1877;
1885 -> 1878;
1886 -> 1879;
1886 -> 1878;
1887 -> 1880;
1887 -> 1878;
1888 -> 1881;
1888 -> 1878;
1889 -> 1882;
1889 -> 1878;
1890 -> 1883;
1890 -> 1878;
1891 -> 1884;
1891 -> 1878;
1892 -> 1885;
1892 -> 1878;
1893 -> 1878;
1894 -> 1886;
1894 -> 1893;
1895 -> 1887;
1895 -> 1893;
1896 -> 1888;
1896 -> 1893;
1897 -> 1889;
1897 -> 1893;
1898 -> 1890;
1898 -> 1893;
1899 -> 1891;
1899 -> 1893;
1900 -> 1892;
1900 -> 1893;
1901 -> 1894;
1901 -> 1893;
1902 -> 1894;
1902 -> 1893;
1903 -> 1893;
1904 -> 1895;
1904 -> 1893;
1905 -> 1896;
1905 -> 1893;
1906 -> 1897;
1906 -> 1893;
1907 -> 1898;
1907 -> 1893;
1908 -> 1899;
1908 -> 1893;
1909 -> 1900;
1909 -> 1893;
1910 -> 1893;
1911 -> 1902;
1911 -> 1910;
1912 -> 1903;
1912 -> 1910;
1913 -> 1904;
1913 -> 1910;
1914 -> 1905;
1914 -> 1910;
1915 -> 1906;
1915 -> 1910;
1916 -> 1907;
1916 -> 1910;
1917 -> 1908;
1917 -> 1910;
1918 -> 1902;
1918 -> 1910;
1919 -> 1909;
1919 -> 1910;
1920 -> 1903;
1920 -> 1910;
1921 -> 1903;
1921 -> 1910;
1922 -> 1903;
1922 -> 1910;
1923 -> 1922;
1923 -> 1910;
1924 -> 1922;
1924 -> 1910;
1925 -> 1922;
1925 -> 1910;
1926 -> 1922;
1926 -> 1910;
1927 -> 1922;
1927 -> 1910;
1928 -> 1922;
1928 -> 1910;
1929 -> 1922;
1929 -> 1910;
1930 -> 1922;
1930 -> 1910;
1931 -> 1922;
1931 -> 1910;
1932 -> 1922;
1932 -> 1910;
1933 -> 1922;
1933 -> 1910;
1934 -> 1922;
1934 -> 1910;
1935 -> 1922;
1935 -> 1910;
1936 -> 1922;
1936 -> 1910;
1937 -> 1922;
1937 -> 1910;
1938 -> 1911;
1938 -> 1922;
1938 -> 1910;
1939 -> 1912;
1939 -> 1922;
1939 -> 1910;
1940 -> 1913;
1940 -> 1922;
1940 -> 1910;
1941 -> 1914;
1941 -> 1922;
1941 -> 1910;
1942 -> 1915;
1942 -> 1922;
1942 -> 1910;
1943 -> 1916;
1943 -> 1922;
1943 -> 1910;
1944 -> 1917;
1944 -> 1922;
1944 -> 1910;
1945 -> 1918;
1945 -> 1910;
1946 -> 1945;
1946 -> 1922;
1946 -> 1910;
1947 -> 1919;
1947 -> 1922;
1947 -> 1910;
1948 -> 1920;
1948 -> 1922;
1948 -> 1910;
1949 -> 1921;
1949 -> 1922;
1949 -> 1910;
1950 -> 1903;
1950 -> 1878;
1951 -> 1950;
1951 -> 1;
1952 -> 1877;
1952 -> 1951;
1952 -> 1938;
1952 -> 1939;
1952 -> 1949;
1952 -> 1940;
1952 -> 1941;
1952 -> 1942;
1952 -> 1944;
1952 -> 1946;
1952 -> 1931;
1952 -> 1947;
1952 -> 1948;
1952 -> 1943;
1952 -> 1935;
1952 -> 1936;
1952 -> 1937;
1952 -> 1902;
1952 -> 1;
1953 -> 1;
1954 -> 0;
1954 -> 1;
1955 -> 1953;
1955 -> 1;
1956 -> 1;
1957 -> 1953;
1957 -> 1956;
1958 -> 1954;
1958 -> 1956;
1959 -> 1958;
1959 -> 1954;
1959 -> 1956;
1960 -> 1957;
1960 -> 1956;
1961 -> 1956;
1962 -> 1956;
1963 -> 1959;
1963 -> 1962;
1964 -> 1959;
1964 -> 1962;
1965 -> 1959;
1965 -> 1962;
1966 -> 1960;
1966 -> 1962;
1967 -> 1959;
1967 -> 1962;
1968 -> 1959;
1968 -> 1962;
1969 -> 1961;
1969 -> 1962;
1970 -> 1959;
1970 -> 1962;
1971 -> 1959;
1971 -> 1962;
1972 -> 1959;
1972 -> 1962;
1973 -> 1959;
1973 -> 1962;
1974 -> 1961;
1974 -> 1962;
1975 -> 1974;
1975 -> 1962;
1976 -> 1974;
1976 -> 1962;
1977 -> 1974;
1977 -> 1962;
1978 -> 1974;
1978 -> 1962;
1979 -> 1974;
1979 -> 1962;
1980 -> 1974;
1980 -> 1962;
1981 -> 1974;
1981 -> 1962;
1982 -> 1974;
1982 -> 1962;
1983 -> 1974;
1983 -> 1962;
1984 -> 1974;
1984 -> 1962;
1985 -> 1974;
1985 -> 1962;
1986 -> 1974;
1986 -> 1962;
1987 -> 1974;
1987 -> 1962;
1988 -> 1974;
1988 -> 1962;
1989 -> 1974;
1989 -> 1962;
1990 -> 1963;
1990 -> 1974;
1990 -> 1962;
1991 -> 1964;
1991 -> 1974;
1991 -> 1962;
1992 -> 1965;
1992 -> 1974;
1992 -> 1962;
1993 -> 1966;
1993 -> 1974;
1993 -> 1962;
1994 -> 1967;
1994 -> 1974;
1994 -> 1962;
1995 -> 1968;
1995 -> 1974;
1995 -> 1962;
1996 -> 1969;
1996 -> 1974;
1996 -> 1962;
1997 -> 1970;
1997 -> 1962;
1998 -> 1997;
1998 -> 1974;
1998 -> 1962;
1999 -> 1971;
1999 -> 1974;
1999 -> 1962;
2000 -> 1972;
2000 -> 1974;
2000 -> 1962;
2001 -> 1973;
2001 -> 1974;
2001 -> 1962;
2002 -> 1961;
2002 -> 1;
2003 -> 1;
2004 -> 1953;
2004 -> 2003;
2005 -> 1953;
2005 -> 2003;
2006 -> 2002;
2006 -> 2003;
2007 -> 2006;
2007 -> 1990;
2007 -> 2003;
2008 -> 2006;
2008 -> 1991;
2008 -> 2003;
2009 -> 2006;
2009 -> 1992;
2009 -> 2003;
2010 -> 2006;
2010 -> 1993;
2010 -> 2003;
2011 -> 2003;
2012 -> 2004;
2012 -> 2011;
2012 -> 2003;
2013 -> 2005;
2013 -> 2011;
2013 -> 2003;
2014 -> 2012;
2014 -> 2013;
2014 -> 2003;
2015 -> 2006;
2015 -> 1995;
2015 -> 2003;
2016 -> 2006;
2016 -> 1996;
2016 -> 2003;
2017 -> 2006;
2017 -> 1998;
2017 -> 2003;
2018 -> 2006;
2018 -> 1999;
2018 -> 2003;
2019 -> 2006;
2019 -> 2000;
2019 -> 2003;
2020 -> 2006;
2020 -> 2001;
2020 -> 2003;
2021 -> 2003;
2022 -> 2007;
2022 -> 2021;
2023 -> 2008;
2023 -> 2021;
2024 -> 2009;
2024 -> 2021;
2025 -> 2010;
2025 -> 2021;
2026 -> 2014;
2026 -> 2021;
2027 -> 2015;
2027 -> 2021;
2028 -> 2016;
2028 -> 2021;
2029 -> 2017;
2029 -> 2021;
2030 -> 2018;
2030 -> 2021;
2031 -> 2019;
2031 -> 2021;
2032 -> 2020;
2032 -> 2021;
2033 -> 2011;
2033 -> 2021;
2034 -> 2033;
2034 -> 2021;
2035 -> 2033;
2035 -> 2021;
2036 -> 2033;
2036 -> 2021;
2037 -> 2033;
2037 -> 2021;
2038 -> 2033;
2038 -> 2021;
2039 -> 2033;
2039 -> 2021;
2040 -> 2033;
2040 -> 2021;
2041 -> 2033;
2041 -> 2021;
2042 -> 2033;
2042 -> 2021;
2043 -> 2033;
2043 -> 2021;
2044 -> 2033;
2044 -> 2021;
2045 -> 2033;
2045 -> 2021;
2046 -> 2033;
2046 -> 2021;
2047 -> 2033;
2047 -> 2021;
2048 -> 2033;
2048 -> 2021;
2049 -> 2026;
2049 -> 2033;
2049 -> 2021;
2050 -> 2011;
2050 -> 1;
2051 -> 2050;
2051 -> 1953;
2051 -> 1;
2052 -> 1;
2053 -> 1952;
2053 -> 2052;
2054 -> 1953;
2054 -> 2052;
2055 -> 2054;
2055 -> 2052;
2056 -> 2052;
2057 -> 2055;
2057 -> 2056;
2058 -> 2057;
2058 -> 2056;
2059 -> 2056;
2060 -> 2056;
2061 -> 2058;
2061 -> 2060;
2062 -> 2059;
2062 -> 2060;
2063 -> 2060;
2064 -> 2061;
2064 -> 2063;
2064 -> 2060;
2065 -> 2061;
2065 -> 2060;
2066 -> 2065;
2066 -> 1953;
2066 -> 2051;
2066 -> 2022;
2066 -> 2023;
2066 -> 2032;
2066 -> 2024;
2066 -> 2025;
2066 -> 2049;
2066 -> 2028;
2066 -> 2029;
2066 -> 2042;
2066 -> 2030;
2066 -> 2031;
2066 -> 2027;
2066 -> 2046;
2066 -> 2047;
2066 -> 2048;
2066 -> 2014;
2066 -> 1954;
2066 -> 1955;
2066 -> 2060;
2067 -> 2060;
2068 -> 2065;
2068 -> 2067;
2068 -> 1953;
2068 -> 2051;
2068 -> 2022;
2068 -> 2023;
2068 -> 2032;
2068 -> 2024;
2068 -> 2025;
2068 -> 2049;
2068 -> 2028;
2068 -> 2029;
2068 -> 2042;
2068 -> 2030;
2068 -> 2031;
2068 -> 2027;
2068 -> 2046;
2068 -> 2047;
2068 -> 2048;
2068 -> 2014;
2068 -> 1954;
2068 -> 1955;
2068 -> 2060;
2069 -> 2068;
2069 -> 2067;
2070 -> 2069;
2070 -> 2068;
2070 -> 2067;
2071 -> 2061;
2071 -> 2060;
2072 -> 2071;
2072 -> 2070;
2072 -> 2060;
2073 -> 2060;
2074 -> 2071;
2074 -> 2073;
2074 -> 2070;
2074 -> 2060;
2075 -> 2074;
2075 -> 2073;
2076 -> 2075;
2076 -> 2074;
2076 -> 2073;
2077 -> 2062;
2077 -> 2070;
2077 -> 2076;
2077 -> 2060;
2078 -> 2053;
2078 -> 2077;
2078 -> 2060;
2079 -> 2060;
2080 -> 2078;
2080 -> 2079;
2081 -> 2078;
2081 -> 2079;
2082 -> 2078;
2082 -> 2079;
2083 -> 2078;
2083 -> 2079;
2084 -> 2078;
2084 -> 2079;
2085 -> 2084;
2085 -> 2079;
2086 -> 2084;
2086 -> 2079;
2087 -> 2084;
2087 -> 2079;
2088 -> 2084;
2088 -> 2079;
2089 -> 2084;
2089 -> 2079;
2090 -> 2084;
2090 -> 2079;
2091 -> 2084;
2091 -> 2079;
2092 -> 2084;
2092 -> 2079;
2093 -> 2084;
2093 -> 2079;
2094 -> 2084;
2094 -> 2079;
2095 -> 2084;
2095 -> 2079;
2096 -> 2080;
2096 -> 2078;
2096 -> 2084;
2096 -> 2079;
2097 -> 2080;
2097 -> 2078;
2097 -> 2084;
2097 -> 2079;
2098 -> 2080;
2098 -> 2078;
2098 -> 2084;
2098 -> 2079;
2099 -> 2080;
2099 -> 2078;
2099 -> 2084;
2099 -> 2079;
2100 -> 2082;
2100 -> 2079;
2101 -> 2100;
2102 -> 2101;
2102 -> 2084;
2102 -> 2079;
2103 -> 2083;
2103 -> 2079;
2104 -> 2103;
2105 -> 2104;
2105 -> 2084;
2105 -> 2079;
2106 -> 2079;
2107 -> 2079;
2108 -> 2080;
2108 -> 2078;
2108 -> 2107;
2108 -> 2079;
2109 -> 2080;
2109 -> 2078;
2109 -> 2079;
2110 -> 0;
2110 -> 2079;
2111 -> 2080;
2111 -> 2108;
2112 -> 2108;
2113 -> 2111;
2113 -> 2112;
2113 -> 2108;
2114 -> 2111;
2114 -> 2109;
2114 -> 2084;
2114 -> 2113;
2115 -> 2080;
2115 -> 2109;
2115 -> 2084;
2115 -> 2113;
2116 -> 2081;
2116 -> 2084;
2116 -> 2079;
2117 -> 2084;
2117 -> 2116;
2117 -> 2079;
2118 -> 2084;
2118 -> 2099;
2118 -> 2109;
2118 -> 2117;
2119 -> 2117;
2120 -> 2111;
2120 -> 2119;
2120 -> 2117;
2121 -> 2111;
2121 -> 2109;
2121 -> 2084;
2121 -> 2120;
2122 -> 2117;
2123 -> 2084;
2123 -> 2121;
2123 -> 2122;
2123 -> 2117;
2124 -> 2084;
2124 -> 2121;
2124 -> 2109;
2124 -> 2122;
2124 -> 2117;
2125 -> 2084;
2125 -> 2099;
2125 -> 2109;
2125 -> 2079;
2126 -> 2125;
2126 -> 2084;
2126 -> 2079;
2127 -> 2078;
2127 -> 2125;
2127 -> 2115;
2127 -> 2097;
2127 -> 2098;
2127 -> 2088;
2127 -> 2121;
2127 -> 2126;
2127 -> 2091;
2127 -> 2114;
2127 -> 2116;
2127 -> 2102;
2127 -> 2105;
2127 -> 2095;
2127 -> 2084;
2127 -> 2099;
2127 -> 2060;
2128 -> 2061;
2128 -> 2060;
2129 -> 2128;
2129 -> 2076;
2129 -> 2060;
2130 -> 2129;
2131 -> 2130;
2131 -> 2127;
2131 -> 2076;
2131 -> 2129;
2132 -> 2131;
2132 -> 2130;
2133 -> 2131;
2133 -> 2130;
2134 -> 2132;
2134 -> 2130;
2135 -> 2130;
2136 -> 2134;
2136 -> 2135;
2136 -> 2130;
2137 -> 2134;
2137 -> 2131;
2137 -> 2130;
2138 -> 2133;
2138 -> 2131;
2138 -> 2137;
2138 -> 2130;
2139 -> 2133;
2139 -> 2138;
2139 -> 2134;
2139 -> 2130;
2140 -> 2133;
2140 -> 2138;
2140 -> 2134;
2140 -> 2130;
2141 -> 2133;
2141 -> 2138;
2141 -> 2130;
2142 -> 2133;
2142 -> 2138;
2142 -> 2134;
2142 -> 2141;
2143 -> 2130;
2144 -> 2133;
2144 -> 2138;
2144 -> 2143;
2144 -> 2130;
2145 -> 2144;
2146 -> 2133;
2146 -> 2138;
2146 -> 2134;
2146 -> 2145;
2147 -> 2130;
2148 -> 2133;
2148 -> 2138;
2148 -> 2147;
2148 -> 2130;
2149 -> 2130;
2150 -> 2134;
2150 -> 2138;
2150 -> 2149;
2150 -> 2130;
2151 -> 2133;
2151 -> 2138;
2151 -> 2134;
2151 -> 2130;
2152 -> 2130;
2153 -> 2133;
2153 -> 2138;
2153 -> 2152;
2153 -> 2130;
2154 -> 2153;
2155 -> 2153;
2156 -> 2133;
2156 -> 2155;
2157 -> 2155;
2158 -> 2156;
2158 -> 2138;
2158 -> 2157;
2158 -> 2155;
2159 -> 2156;
2159 -> 2138;
2159 -> 2158;
2160 -> 2158;
2161 -> 2159;
2161 -> 2156;
2161 -> 2158;
2162 -> 2156;
2162 -> 2138;
2162 -> 2161;
2162 -> 2155;
2163 -> 2162;
2163 -> 2153;
2164 -> 2153;
2165 -> 2134;
2165 -> 2164;
2166 -> 2164;
2167 -> 2165;
2167 -> 2138;
2167 -> 2161;
2167 -> 2166;
2167 -> 2164;
2168 -> 2165;
2168 -> 2138;
2168 -> 2161;
2168 -> 2167;
2168 -> 2164;
2169 -> 2168;
2169 -> 2153;
2170 -> 2133;
2170 -> 2138;
2170 -> 2134;
2170 -> 2153;
2171 -> 2163;
2171 -> 2170;
2172 -> 2169;
2172 -> 2170;
2173 -> 2171;
2173 -> 2172;
2173 -> 2138;
2173 -> 2161;
2173 -> 2167;
2173 -> 2159;
2173 -> 2160;
2173 -> 2170;
2174 -> 2133;
2174 -> 2173;
2174 -> 2134;
2174 -> 2130;
2175 -> 2130;
2176 -> 2131;
2176 -> 2175;
2176 -> 2173;
2176 -> 2129;
2177 -> 2129;
2178 -> 2176;
2178 -> 2177;
2178 -> 2129;
2179 -> 2176;
2179 -> 2178;
2180 -> 2060;
2181 -> 2127;
2181 -> 2179;
2181 -> 2180;
2181 -> 2060;
2182 -> 2060;
2183 -> 2061;
2183 -> 2060;
2184 -> 2060;
2185 -> 2183;
2185 -> 2184;
2186 -> 2184;
2187 -> 2184;
2188 -> 2053;
2188 -> 2184;
2189 -> 2188;
2189 -> 2179;
2189 -> 2184;
2190 -> 2179;
2190 -> 2184;
2191 -> 2189;
2191 -> 2184;
2192 -> 2186;
2192 -> 2191;
2193 -> 2192;
2193 -> 2184;
2194 -> 2192;
2194 -> 2184;
2195 -> 2194;
2195 -> 2184;
2196 -> 2185;
2196 -> 2184;
2197 -> 2196;
2197 -> 2179;
2197 -> 2184;
2198 -> 2184;
2199 -> 2196;
2199 -> 2198;
2199 -> 2179;
2199 -> 2184;
2200 -> 2185;
2200 -> 2184;
2201 -> 2200;
2201 -> 2199;
2201 -> 2184;
2202 -> 2184;
2203 -> 2200;
2203 -> 2202;
2203 -> 2199;
2203 -> 2184;
2204 -> 2185;
2204 -> 2184;
2205 -> 2184;
2206 -> 2204;
2206 -> 2205;
2207 -> 1728;
2207 -> 2205;
2208 -> 2205;
2209 -> 2206;
2209 -> 2205;
2210 -> 2209;
2210 -> 2203;
2210 -> 2205;
2211 -> 2210;
2212 -> 2210;
2213 -> 2208;
2213 -> 2212;
2213 -> 2210;
2214 -> 2210;
2215 -> 2205;
2216 -> 2215;
2216 -> 2184;
2217 -> 2216;
2218 -> 2217;
2219 -> 1728;
2219 -> 2217;
2220 -> 2184;
2221 -> 2220;
2221 -> 2184;
2222 -> 2184;
2223 -> 2184;
2224 -> 2220;
2224 -> 2223;
2224 -> 2221;
2224 -> 2184;
2225 -> 2184;
2226 -> 2185;
2226 -> 2184;
2227 -> 2226;
2227 -> 2203;
2227 -> 2184;
2228 -> 2227;
2229 -> 2195;
2229 -> 2227;
2230 -> 2227;
2231 -> 2228;
2231 -> 2230;
2232 -> 2229;
2232 -> 2230;
2233 -> 2230;
2234 -> 2233;
2234 -> 2232;
2234 -> 2230;
2235 -> 2230;
2236 -> 2231;
2236 -> 2235;
2237 -> 2235;
2238 -> 2235;
2239 -> 2237;
2239 -> 2238;
2239 -> 2235;
2240 -> 2235;
2241 -> 2236;
2241 -> 2203;
2241 -> 2240;
2241 -> 2235;
2242 -> 2236;
2242 -> 2203;
2242 -> 2241;
2243 -> 2237;
2243 -> 2242;
2243 -> 2239;
2243 -> 2241;
2244 -> 2241;
2245 -> 2237;
2245 -> 2244;
2245 -> 2243;
2245 -> 2241;
2246 -> 2236;
2246 -> 2203;
2246 -> 2241;
2247 -> 2237;
2247 -> 2246;
2247 -> 2245;
2247 -> 2241;
2248 -> 2235;
2249 -> 2236;
2249 -> 2203;
2249 -> 2248;
2249 -> 2235;
2250 -> 2236;
2250 -> 2203;
2250 -> 2235;
2251 -> 2235;
2252 -> 2237;
2252 -> 2251;
2252 -> 2247;
2252 -> 2235;
2253 -> 2235;
2254 -> 2236;
2254 -> 2203;
2254 -> 2253;
2254 -> 2235;
2255 -> 2254;
2256 -> 2237;
2256 -> 2255;
2256 -> 2252;
2256 -> 2254;
2257 -> 2254;
2258 -> 2257;
2258 -> 2254;
2259 -> 2254;
2260 -> 2258;
2260 -> 2254;
2261 -> 2260;
2262 -> 2237;
2262 -> 2261;
2262 -> 2256;
2262 -> 2260;
2263 -> 2258;
2263 -> 2260;
2264 -> 2237;
2264 -> 2263;
2264 -> 2262;
2264 -> 2260;
2265 -> 2260;
2266 -> 2237;
2266 -> 2265;
2266 -> 2264;
2266 -> 2260;
2267 -> 2260;
2268 -> 2254;
2269 -> 2237;
2269 -> 2268;
2269 -> 2266;
2269 -> 2254;
2270 -> 2235;
2271 -> 2236;
2271 -> 2260;
2271 -> 2270;
2271 -> 2235;
2272 -> 2271;
2273 -> 2237;
2273 -> 2272;
2273 -> 2269;
2273 -> 2271;
2274 -> 2271;
2275 -> 2237;
2275 -> 2274;
2275 -> 2273;
2275 -> 2271;
2276 -> 2271;
2277 -> 2237;
2277 -> 2276;
2277 -> 2275;
2277 -> 2271;
2278 -> 2271;
2279 -> 2237;
2279 -> 2278;
2279 -> 2277;
2279 -> 2271;
2280 -> 2271;
2281 -> 2237;
2281 -> 2280;
2281 -> 2279;
2281 -> 2271;
2282 -> 2236;
2282 -> 2260;
2282 -> 2235;
2283 -> 2235;
2284 -> 2236;
2284 -> 2260;
2284 -> 2283;
2284 -> 2235;
2285 -> 2235;
2286 -> 2236;
2286 -> 2260;
2286 -> 2285;
2286 -> 2235;
2287 -> 2235;
2288 -> 2236;
2288 -> 2260;
2288 -> 2287;
2288 -> 2235;
2289 -> 2237;
2289 -> 2281;
2289 -> 2235;
2290 -> 2289;
2290 -> 2230;
2291 -> 2234;
2291 -> 2290;
2291 -> 2230;
2292 -> 2225;
2292 -> 2291;
2292 -> 2227;
2293 -> 2220;
2293 -> 2184;
2294 -> 2225;
2294 -> 2184;
2295 -> 2184;
2296 -> 2293;
2296 -> 2295;
2297 -> 2294;
2297 -> 2295;
2298 -> 2297;
2298 -> 2292;
2298 -> 2295;
2299 -> 2295;
2300 -> 2299;
2300 -> 2298;
2300 -> 2295;
2301 -> 2297;
2301 -> 2299;
2301 -> 2292;
2301 -> 2300;
2302 -> 2296;
2302 -> 2301;
2302 -> 2224;
2302 -> 2300;
2303 -> 2300;
2304 -> 2296;
2304 -> 2302;
2304 -> 2300;
2305 -> 2184;
2306 -> 2184;
2307 -> 2220;
2307 -> 2306;
2307 -> 2304;
2307 -> 2184;
2308 -> 2184;
2309 -> 2184;
2310 -> 2260;
2311 -> 2310;
2311 -> 2260;
2312 -> 2311;
2312 -> 2260;
2313 -> 2260;
2314 -> 2260;
2315 -> 2193;
2315 -> 2260;
2316 -> 2220;
2316 -> 2315;
2317 -> 2195;
2317 -> 2315;
2318 -> 2315;
2319 -> 2316;
2319 -> 2318;
2320 -> 2317;
2320 -> 2318;
2321 -> 2318;
2322 -> 2321;
2322 -> 2320;
2322 -> 2318;
2323 -> 2319;
2323 -> 2321;
2323 -> 2322;
2323 -> 2307;
2323 -> 2318;
2324 -> 2315;
2325 -> 2315;
2326 -> 2220;
2326 -> 2325;
2326 -> 2323;
2326 -> 2315;
2327 -> 2310;
2327 -> 2311;
2327 -> 2315;
2328 -> 2220;
2328 -> 2327;
2328 -> 2326;
2328 -> 2315;
2329 -> 2310;
2329 -> 2327;
2329 -> 2315;
2330 -> 2329;
2330 -> 2327;
2330 -> 2315;
2331 -> 2310;
2331 -> 2260;
2332 -> 2260;
2333 -> 2197;
2333 -> 2260;
2334 -> 2201;
2334 -> 2260;
2335 -> 2260;
2336 -> 2331;
2336 -> 2335;
2337 -> 2332;
2337 -> 2335;
2338 -> 2333;
2338 -> 2335;
2339 -> 2334;
2339 -> 2335;
2340 -> 2332;
2340 -> 2335;
2341 -> 2340;
2341 -> 2335;
2342 -> 2340;
2342 -> 2335;
2343 -> 2340;
2343 -> 2335;
2344 -> 2340;
2344 -> 2335;
2345 -> 2340;
2345 -> 2335;
2346 -> 2340;
2346 -> 2335;
2347 -> 2340;
2347 -> 2335;
2348 -> 2340;
2348 -> 2335;
2349 -> 2336;
2349 -> 2327;
2349 -> 2340;
2349 -> 2335;
2350 -> 2336;
2350 -> 2327;
2350 -> 2340;
2350 -> 2335;
2351 -> 2336;
2351 -> 2327;
2351 -> 2340;
2351 -> 2335;
2352 -> 2336;
2352 -> 2327;
2352 -> 2340;
2352 -> 2335;
2353 -> 2335;
2354 -> 2336;
2354 -> 2327;
2354 -> 2335;
2355 -> 2340;
2355 -> 2352;
2355 -> 2354;
2356 -> 2340;
2357 -> 2340;
2357 -> 2354;
2357 -> 2356;
2358 -> 2332;
2358 -> 2260;
2359 -> 2185;
2359 -> 2260;
2360 -> 2332;
2360 -> 2260;
2361 -> 2359;
2361 -> 2360;
2361 -> 2352;
2361 -> 2354;
2361 -> 2350;
2361 -> 2351;
2361 -> 2340;
2361 -> 2337;
2361 -> 2338;
2361 -> 2339;
2361 -> 2260;
2362 -> 2260;
2363 -> 2362;
2364 -> 2361;
2364 -> 2363;
2364 -> 2362;
2365 -> 2361;
2365 -> 2362;
2366 -> 2361;
2366 -> 2362;
2367 -> 2361;
2367 -> 2362;
2368 -> 2361;
2368 -> 2367;
2369 -> 2362;
2370 -> 2361;
2370 -> 2369;
2370 -> 2362;
2371 -> 2370;
2372 -> 2361;
2372 -> 2371;
2373 -> 2362;
2374 -> 2361;
2374 -> 2373;
2374 -> 2362;
2375 -> 2362;
2376 -> 2361;
2376 -> 2375;
2376 -> 2362;
2377 -> 2361;
2377 -> 2362;
2378 -> 2361;
2379 -> 2361;
2379 -> 2362;
2380 -> 2260;
2381 -> 2361;
2381 -> 2380;
2381 -> 2260;
2382 -> 2185;
2382 -> 2361;
2382 -> 2381;
2383 -> 2332;
2383 -> 2260;
2384 -> 2195;
2384 -> 2260;
2385 -> 2260;
2386 -> 2383;
2386 -> 2385;
2387 -> 2384;
2387 -> 2385;
2388 -> 2385;
2389 -> 2388;
2389 -> 2387;
2389 -> 2385;
2390 -> 2385;
2391 -> 2385;
2392 -> 2390;
2392 -> 2391;
2392 -> 2385;
2393 -> 2385;
2394 -> 2386;
2394 -> 2361;
2394 -> 2393;
2394 -> 2385;
2395 -> 2386;
2395 -> 2361;
2395 -> 2394;
2396 -> 2390;
2396 -> 2395;
2396 -> 2392;
2396 -> 2394;
2397 -> 2394;
2398 -> 2390;
2398 -> 2397;
2398 -> 2396;
2398 -> 2394;
2399 -> 2386;
2399 -> 2361;
2399 -> 2394;
2400 -> 2390;
2400 -> 2399;
2400 -> 2398;
2400 -> 2394;
2401 -> 2385;
2402 -> 2386;
2402 -> 2361;
2402 -> 2401;
2402 -> 2385;
2403 -> 2386;
2403 -> 2361;
2403 -> 2385;
2404 -> 2385;
2405 -> 2390;
2405 -> 2404;
2405 -> 2400;
2405 -> 2385;
2406 -> 2386;
2406 -> 2361;
2406 -> 2385;
2407 -> 2406;
2408 -> 2390;
2408 -> 2407;
2408 -> 2405;
2408 -> 2406;
2409 -> 2406;
2410 -> 2390;
2410 -> 2409;
2410 -> 2408;
2410 -> 2406;
2411 -> 2406;
2412 -> 2390;
2412 -> 2411;
2412 -> 2410;
2412 -> 2406;
2413 -> 2406;
2414 -> 2390;
2414 -> 2413;
2414 -> 2412;
2414 -> 2406;
2415 -> 2406;
2416 -> 2406;
2417 -> 2390;
2417 -> 2416;
2417 -> 2414;
2417 -> 2406;
2418 -> 2385;
2419 -> 2386;
2419 -> 2406;
2419 -> 2418;
2419 -> 2385;
2420 -> 2419;
2421 -> 2390;
2421 -> 2420;
2421 -> 2417;
2421 -> 2419;
2422 -> 2419;
2423 -> 2390;
2423 -> 2422;
2423 -> 2421;
2423 -> 2419;
2424 -> 2419;
2425 -> 2390;
2425 -> 2424;
2425 -> 2423;
2425 -> 2419;
2426 -> 2419;
2427 -> 2390;
2427 -> 2426;
2427 -> 2425;
2427 -> 2419;
2428 -> 2419;
2429 -> 2390;
2429 -> 2428;
2429 -> 2427;
2429 -> 2419;
2430 -> 2386;
2430 -> 2406;
2430 -> 2385;
2431 -> 2385;
2432 -> 2386;
2432 -> 2406;
2432 -> 2431;
2432 -> 2385;
2433 -> 2385;
2434 -> 2386;
2434 -> 2406;
2434 -> 2433;
2434 -> 2385;
2435 -> 2385;
2436 -> 2386;
2436 -> 2406;
2436 -> 2435;
2436 -> 2385;
2437 -> 2390;
2437 -> 2429;
2437 -> 2385;
2438 -> 2437;
2438 -> 2385;
2439 -> 2389;
2439 -> 2438;
2439 -> 2385;
2440 -> 2220;
2440 -> 2439;
2440 -> 2328;
2440 -> 2260;
2441 -> 2382;
2441 -> 2260;
2442 -> 2195;
2442 -> 2260;
2443 -> 2260;
2444 -> 2441;
2444 -> 2443;
2445 -> 2442;
2445 -> 2443;
2446 -> 2443;
2447 -> 2446;
2447 -> 2445;
2447 -> 2443;
2448 -> 2443;
2449 -> 2443;
2450 -> 2448;
2450 -> 2449;
2450 -> 2443;
2451 -> 2443;
2452 -> 2444;
2452 -> 2406;
2452 -> 2451;
2452 -> 2443;
2453 -> 2444;
2453 -> 2406;
2453 -> 2452;
2454 -> 2448;
2454 -> 2453;
2454 -> 2450;
2454 -> 2452;
2455 -> 2452;
2456 -> 2448;
2456 -> 2455;
2456 -> 2454;
2456 -> 2452;
2457 -> 2444;
2457 -> 2406;
2457 -> 2452;
2458 -> 2448;
2458 -> 2457;
2458 -> 2456;
2458 -> 2452;
2459 -> 2443;
2460 -> 2444;
2460 -> 2406;
2460 -> 2459;
2460 -> 2443;
2461 -> 2444;
2461 -> 2406;
2461 -> 2443;
2462 -> 2443;
2463 -> 2448;
2463 -> 2462;
2463 -> 2458;
2463 -> 2443;
2464 -> 2444;
2464 -> 2406;
2464 -> 2443;
2465 -> 2464;
2466 -> 2448;
2466 -> 2465;
2466 -> 2463;
2466 -> 2464;
2467 -> 2464;
2468 -> 2448;
2468 -> 2467;
2468 -> 2466;
2468 -> 2464;
2469 -> 2464;
2470 -> 2448;
2470 -> 2469;
2470 -> 2468;
2470 -> 2464;
2471 -> 2464;
2472 -> 2448;
2472 -> 2471;
2472 -> 2470;
2472 -> 2464;
2473 -> 2464;
2474 -> 2464;
2475 -> 2448;
2475 -> 2474;
2475 -> 2472;
2475 -> 2464;
2476 -> 2443;
2477 -> 2444;
2477 -> 2464;
2477 -> 2476;
2477 -> 2443;
2478 -> 2477;
2479 -> 2448;
2479 -> 2478;
2479 -> 2475;
2479 -> 2477;
2480 -> 2477;
2481 -> 2448;
2481 -> 2480;
2481 -> 2479;
2481 -> 2477;
2482 -> 2477;
2483 -> 2448;
2483 -> 2482;
2483 -> 2481;
2483 -> 2477;
2484 -> 2477;
2485 -> 2448;
2485 -> 2484;
2485 -> 2483;
2485 -> 2477;
2486 -> 2477;
2487 -> 2448;
2487 -> 2486;
2487 -> 2485;
2487 -> 2477;
2488 -> 2444;
2488 -> 2464;
2488 -> 2443;
2489 -> 2443;
2490 -> 2444;
2490 -> 2464;
2490 -> 2489;
2490 -> 2443;
2491 -> 2443;
2492 -> 2444;
2492 -> 2464;
2492 -> 2491;
2492 -> 2443;
2493 -> 2443;
2494 -> 2444;
2494 -> 2464;
2494 -> 2493;
2494 -> 2443;
2495 -> 2448;
2495 -> 2487;
2495 -> 2443;
2496 -> 2495;
2496 -> 2443;
2497 -> 2447;
2497 -> 2496;
2497 -> 2443;
2498 -> 2308;
2498 -> 2497;
2498 -> 2260;
2499 -> 2184;
2500 -> 2260;
2500 -> 2499;
2500 -> 2184;
2501 -> 2220;
2501 -> 2440;
2501 -> 2500;
2502 -> 2184;
2503 -> 2220;
2503 -> 2502;
2503 -> 2501;
2503 -> 2184;
2504 -> 2225;
2504 -> 2184;
2505 -> 2308;
2505 -> 2184;
2506 -> 0;
2506 -> 2184;
2507 -> 2184;
2508 -> 2184;
2509 -> 2504;
2509 -> 2508;
2510 -> 2505;
2510 -> 2508;
2511 -> 2506;
2511 -> 2508;
2512 -> 2507;
2512 -> 2508;
2513 -> 2507;
2513 -> 2508;
2514 -> 2508;
2515 -> 2512;
2515 -> 2514;
2515 -> 2508;
2516 -> 2515;
2516 -> 2508;
2517 -> 1785;
2517 -> 2516;
2518 -> 2508;
2519 -> 2518;
2519 -> 2513;
2519 -> 2508;
2520 -> 2509;
2520 -> 2508;
2521 -> 2510;
2521 -> 2508;
2522 -> 2511;
2522 -> 2508;
2523 -> 2520;
2523 -> 2508;
2524 -> 2521;
2524 -> 2508;
2525 -> 2519;
2525 -> 2508;
2526 -> 2508;
2527 -> 2523;
2527 -> 2526;
2528 -> 2524;
2528 -> 2526;
2529 -> 2525;
2529 -> 2526;
2530 -> 2517;
2530 -> 2526;
2531 -> 2527;
2531 -> 2526;
2532 -> 2527;
2532 -> 2520;
2532 -> 2526;
2533 -> 2528;
2533 -> 2526;
2534 -> 2528;
2534 -> 2521;
2534 -> 2526;
2535 -> 2526;
2536 -> 2531;
2536 -> 2535;
2537 -> 2532;
2537 -> 2535;
2538 -> 2533;
2538 -> 2535;
2539 -> 2534;
2539 -> 2535;
2540 -> 2530;
2540 -> 2535;
2541 -> 2536;
2541 -> 2535;
2542 -> 2537;
2542 -> 2535;
2543 -> 2538;
2543 -> 2535;
2544 -> 2539;
2544 -> 2535;
2545 -> 2535;
2546 -> 2541;
2546 -> 2545;
2547 -> 2542;
2547 -> 2545;
2548 -> 2543;
2548 -> 2545;
2549 -> 2544;
2549 -> 2545;
2550 -> 2540;
2550 -> 2545;
2551 -> 2545;
2552 -> 2547;
2552 -> 2551;
2552 -> 2545;
2553 -> 2545;
2554 -> 2549;
2554 -> 2553;
2554 -> 2545;
2555 -> 2552;
2555 -> 2554;
2555 -> 2545;
2556 -> 2545;
2557 -> 2556;
2557 -> 2555;
2557 -> 2545;
2558 -> 2545;
2559 -> 2558;
2559 -> 2547;
2559 -> 2545;
2560 -> 2559;
2561 -> 2555;
2561 -> 2557;
2561 -> 2560;
2561 -> 2559;
2562 -> 2561;
2562 -> 2558;
2562 -> 2560;
2562 -> 2555;
2562 -> 2559;
2563 -> 2545;
2564 -> 2563;
2564 -> 2549;
2564 -> 2545;
2565 -> 2564;
2566 -> 2555;
2566 -> 2557;
2566 -> 2562;
2566 -> 2565;
2566 -> 2564;
2567 -> 2566;
2567 -> 2565;
2567 -> 2563;
2567 -> 2555;
2567 -> 2564;
2568 -> 2545;
2569 -> 2568;
2569 -> 2547;
2569 -> 2545;
2570 -> 2569;
2571 -> 2570;
2571 -> 2549;
2571 -> 2569;
2572 -> 2571;
2573 -> 2555;
2573 -> 2557;
2573 -> 2562;
2573 -> 2567;
2573 -> 2572;
2573 -> 2571;
2574 -> 2546;
2574 -> 2571;
2575 -> 2548;
2575 -> 2571;
2576 -> 2571;
2577 -> 2574;
2577 -> 2576;
2578 -> 2572;
2578 -> 2576;
2579 -> 2575;
2579 -> 2576;
2580 -> 2572;
2580 -> 2576;
2581 -> 2550;
2581 -> 2576;
2582 -> 2577;
2582 -> 2520;
2582 -> 2578;
2582 -> 2576;
2583 -> 2579;
2583 -> 2521;
2583 -> 2580;
2583 -> 2576;
2584 -> 2581;
2584 -> 0;
2584 -> 2582;
2584 -> 2583;
2584 -> 2520;
2584 -> 2521;
2584 -> 2576;
2585 -> 2573;
2585 -> 2584;
2585 -> 2571;
2586 -> 2571;
2587 -> 2555;
2587 -> 2557;
2587 -> 2562;
2587 -> 2567;
2587 -> 2586;
2587 -> 2570;
2587 -> 2571;
2588 -> 2571;
2589 -> 2555;
2589 -> 2557;
2589 -> 2562;
2589 -> 2567;
2589 -> 2568;
2589 -> 2588;
2589 -> 2571;
2590 -> 2585;
2590 -> 2571;
2591 -> 2587;
2591 -> 2571;
2592 -> 2590;
2592 -> 2591;
2592 -> 2571;
2593 -> 2589;
2593 -> 2571;
2594 -> 2592;
2594 -> 2593;
2594 -> 2571;
2595 -> 2594;
2595 -> 2568;
2595 -> 2570;
2595 -> 2555;
2595 -> 2571;
2596 -> 2555;
2596 -> 2545;
2597 -> 2537;
2597 -> 2535;
2598 -> 2539;
2598 -> 2535;
2599 -> 2535;
2600 -> 2597;
2600 -> 2599;
2600 -> 2535;
2601 -> 2598;
2601 -> 2599;
2601 -> 2535;
2602 -> 2600;
2602 -> 2601;
2602 -> 2535;
2603 -> 2596;
2603 -> 2555;
2603 -> 2557;
2603 -> 2562;
2603 -> 2567;
2603 -> 2595;
2603 -> 2597;
2603 -> 2598;
2603 -> 2602;
2604 -> 2602;
2605 -> 2596;
2605 -> 2555;
2605 -> 2557;
2605 -> 2562;
2605 -> 2567;
2605 -> 2595;
2605 -> 2604;
2605 -> 2598;
2605 -> 2602;
2606 -> 2596;
2606 -> 2555;
2606 -> 2557;
2606 -> 2562;
2606 -> 2567;
2606 -> 2595;
2606 -> 2597;
2606 -> 2598;
2606 -> 2605;
2607 -> 2605;
2608 -> 2597;
2608 -> 2607;
2609 -> 2598;
2609 -> 2607;
2610 -> 2607;
2611 -> 0;
2611 -> 2607;
2612 -> 2608;
2612 -> 2607;
2613 -> 2609;
2613 -> 2607;
2614 -> 2607;
2615 -> 2611;
2615 -> 2614;
2616 -> 2612;
2616 -> 2614;
2617 -> 2613;
2617 -> 2614;
2618 -> 2610;
2618 -> 2614;
2619 -> 2615;
2619 -> 2618;
2619 -> 2614;
2620 -> 2616;
2620 -> 2618;
2620 -> 2614;
2621 -> 2617;
2621 -> 2618;
2621 -> 2614;
2622 -> 2535;
2623 -> 2608;
2623 -> 2622;
2623 -> 2535;
2624 -> 2535;
2625 -> 2609;
2625 -> 2624;
2625 -> 2535;
2626 -> 2610;
2626 -> 2619;
2626 -> 2620;
2626 -> 2621;
2626 -> 2526;
2627 -> 2626;
2628 -> 2627;
2629 -> 2528;
2629 -> 2521;
2629 -> 2584;
2629 -> 2626;
2629 -> 2627;
2630 -> 2529;
2630 -> 2629;
2630 -> 2518;
2630 -> 2627;
2631 -> 2522;
2631 -> 2628;
2631 -> 2508;
2632 -> 2220;
2632 -> 2631;
2632 -> 2503;
2632 -> 2184;
2633 -> 2308;
2633 -> 2498;
2633 -> 2184;
2634 -> 2225;
2634 -> 2301;
2634 -> 2184;
2635 -> 2220;
2635 -> 2632;
2635 -> 2184;
2636 -> 2052;
2637 -> 1876;
2637 -> 2464;
2637 -> 1;
}