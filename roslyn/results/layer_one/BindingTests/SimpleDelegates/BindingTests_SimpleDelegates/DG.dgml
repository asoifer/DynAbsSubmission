<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 718058" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 718059" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 718060" />
<Node Id="21002:[790..793).1" Label="'C' 718061" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 718062" />
<Node Id="21002:[845..848).1" Label="'M' 718063" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 718064" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 718065" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 718066" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 718067" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 718068" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 718069" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 718070" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 718071" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 718072" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 718073" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 718074" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 718075" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 718076" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 718077" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 718078" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 718079" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 718080" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 718081" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 718082" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 718083" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 718084" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 718085" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 718086" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 718087" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 718088" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 718089" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 718090" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 718091" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 718092" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 718093" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 718094" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 718095" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 718096" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 718097" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 718098" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 718099" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 718100" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 718101" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 718102" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 718103" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 718104" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 718105" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 718106" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 718107" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 718108" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 718109" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 718110" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 718111" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 718112" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 718113" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 718114" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 718115" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 718116" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 718117" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 718118" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 718119" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 718120" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 718121" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 718122" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 718123" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 718124" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 718125" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 718126" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 718127" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 718128" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 718129" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 718130" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 718131" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718132" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718133" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 718134" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 718135" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718136" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718137" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 718138" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 718139" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718140" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718141" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 718142" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 718143" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718144" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718145" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 718146" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 718147" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718148" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718149" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 718150" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 718151" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718152" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718153" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 718154" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 718155" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718156" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718157" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 718158" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 718159" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 718160" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 718161" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 718162" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 718163" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 718164" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 718165" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 718166" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 718167" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718168" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718169" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 718170" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 718171" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718172" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718173" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 718174" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 718175" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718176" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718177" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 718178" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 718179" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718180" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718181" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 718182" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 718183" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 718184" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 718185" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 718186" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 718187" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718188" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718189" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 718190" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 718191" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718192" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718193" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 718194" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 718195" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718196" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718197" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 718198" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 718199" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718200" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718201" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 718202" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 718203" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718204" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718205" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 718206" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 718207" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718208" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718209" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 718210" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 718211" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718212" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718213" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 718214" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 718215" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718216" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718217" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 718218" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 718219" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718220" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718221" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 718222" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 718223" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718224" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718225" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 718226" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 718227" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718228" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718229" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 718230" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 718231" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718232" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718233" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 718234" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 718235" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718236" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 718237" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 718238" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 718239" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 718240" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 718241" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 718242" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 718243" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 718244" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 718245" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 718246" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 718247" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 718248" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 718249" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 718250" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 718251" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 718252" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 718253" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 718254" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 718255" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 718256" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 718257" />
<Node Id="25004:[908..913).1" Label="_temp 718258" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 718259" />
<Node Id="28001:[21062..21405).1" Label="param SimpleDelegates(this) 718260" />
<Node Id="28001:[21132..21334).1" Label="var source =
@'static class S
{
    public static void F(System.Action a) { }
}
class C
{
    void M()
    {
        S.F(this.M);
        System.Action a = this.M;
        S.F(a);
    }
}'; 718261" />
<Node Id="28001:[21348..21394).1" Label="CreateCompilation(source).VerifyDiagnostics(); 718262" />
<Node Id="28001:[21366..21372).1" Label="source 718263" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 718264" />
<Node Id="21004:[2290..2296).1" Label="source 718265" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 718266" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 718267" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 718268" />
<Node Id="21004:[877..882).1" Label="Value 718269" />
<Node Id="28001:[21348..21394).2" Label="CreateCompilation(source).VerifyDiagnostics(); 718270" />
<Node Id="28001:[21348..21394).4" Label="CreateCompilation(source).VerifyDiagnostics(); 718271" />
<Node Id="28001:[21348..21373).1" Label="CreateCompilation(source) 718272" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 718273" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 718274" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 718275" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 718276" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 718277" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 718278" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 718279" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 718280" />
<Node Id="21003:[45156..45162).1" Label="source 718281" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 718282" />
<Node Id="21003:[45215..45225).1" Label="references 718283" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 718284" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 718285" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 718286" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 718287" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 718288" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 718289" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 718290" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 718291" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 718292" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 718293" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 718294" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 718295" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 718296" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 718297" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 718298" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 718299" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 718300" />
<Node Id="25005:[9812..9830).1" Label="return references; 718301" />
<Node Id="21003:[45228..45235).1" Label="options 718302" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 718303" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 718304" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 718305" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 718306" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 718307" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 718308" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 718309" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 718310" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 718311" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 718312" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 718313" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 718314" />
<Node Id="21003:[45728..45734).1" Label="source 718315" />
<Node Id="21003:[45736..45746).1" Label="references 718316" />
<Node Id="21003:[45748..45755).1" Label="options 718317" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 718318" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 718319" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 718320" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 718321" />
<Node Id="21003:[45842..45846).1" Label="null 718322" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 718323" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 718324" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 718325" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 718326" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 718327" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 718328" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 718329" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 718330" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 718331" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 718332" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 718333" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 718334" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 718335" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 718336" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 718337" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 718338" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 718339" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 718340" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 718341" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 718342" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 718343" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 718344" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 718345" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 718346" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 718347" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 718348" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 718349" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 718350" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 718351" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 718352" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 718353" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 718354" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 718355" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 718356" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 718357" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 718358" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 718359" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 718360" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 718361" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 718362" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 718363" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 718364" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 718365" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 718366" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 718367" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 718368" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 718369" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 718370" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 718371" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 718372" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 718373" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 718374" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 718375" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 718376" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 718377" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 718378" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 718379" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 718380" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 718381" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 718382" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 718383" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 718384" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 718385" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 718386" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 718387" />
<Node Id="21010:[2060..2067).1" Label="Regular 718388" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 718389" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 718390" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 718391" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 718392" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 718393" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 718394" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 718395" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 718396" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 718397" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 718398" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 718399" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 718400" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 718401" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 718402" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 718403" />
<Node Id="21010:[2295..2296).1" Label="1 718404" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 718405" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 718406" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 718407" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 718408" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 718409" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 718410" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 718411" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 718412" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 718413" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 718414" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 718415" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 718416" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 718417" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 718418" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 718419" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 718420" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 718421" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 718422" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 718423" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 718424" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 718425" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 718426" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 718427" />
<Node Id="21010:[3546..3552).1" Label="'true' 718428" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 718429" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 718430" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 718431" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 718432" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 718433" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 718434" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 718435" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 718436" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 718437" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 718438" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 718439" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718440" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 718441" />
<Node Id="21010:[10335..10345).1" Label="outputKind 718442" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 718443" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 718444" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 718445" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718446" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718447" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 718448" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 718449" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 718450" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 718451" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 718452" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718453" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 718454" />
<Node Id="21010:[10335..10345).2" Label="outputKind 718455" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 718456" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 718457" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 718458" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718459" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718460" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 718461" />
<Node Id="21010:[4353..4357).1" Label="true 718462" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 718463" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 718464" />
<Node Id="21010:[4466..4470).1" Label="true 718465" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 718466" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 718467" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 718468" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 718469" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 718470" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 718471" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718472" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 718473" />
<Node Id="21010:[10335..10345).3" Label="outputKind 718474" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 718475" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 718476" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 718477" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718478" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718479" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 718480" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 718481" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 718482" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 718483" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 718484" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718485" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 718486" />
<Node Id="21010:[10335..10345).4" Label="outputKind 718487" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 718488" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 718489" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 718490" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718491" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718492" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 718493" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 718494" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 718495" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 718496" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 718497" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718498" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 718499" />
<Node Id="21010:[10335..10345).5" Label="outputKind 718500" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 718501" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 718502" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 718503" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718504" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718505" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 718506" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 718507" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 718508" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 718509" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 718510" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718511" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 718512" />
<Node Id="21010:[10335..10345).6" Label="outputKind 718513" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 718514" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 718515" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 718516" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718517" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718518" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 718519" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 718520" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 718521" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 718522" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 718523" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718524" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 718525" />
<Node Id="21010:[10335..10345).7" Label="outputKind 718526" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 718527" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 718528" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 718529" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718530" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718531" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 718532" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 718533" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 718534" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 718535" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 718536" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 718537" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 718538" />
<Node Id="21010:[10335..10345).8" Label="outputKind 718539" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 718540" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 718541" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 718542" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718543" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 718544" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 718545" />
<Node Id="21010:[5456..5460).1" Label="true 718546" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 718547" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 718548" />
<Node Id="21010:[5566..5570).1" Label="true 718549" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 718550" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 718551" />
<Node Id="21010:[5674..5678).1" Label="true 718552" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 718553" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 718554" />
<Node Id="21010:[5780..5784).1" Label="true 718555" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 718556" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 718557" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 718558" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718559" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718560" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 718561" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718562" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718563" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 718564" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718565" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718566" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 718567" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718568" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 718569" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 718570" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 718571" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 718572" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 718573" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 718574" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 718575" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 718576" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 718577" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 718578" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 718579" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 718580" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 718581" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 718582" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 718583" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 718584" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 718585" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 718586" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 718587" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 718588" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 718589" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 718590" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 718591" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 718592" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 718593" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 718594" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 718595" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 718596" />
<Node Id="21003:[34832..34844).1" Label="return tree; 718597" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 718598" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 718599" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 718600" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 718601" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 718602" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 718603" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 718604" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 718605" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 718606" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 718607" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 718608" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 718609" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 718610" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 718611" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 718612" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 718613" />
<Node Id="25006:[11674..11681).1" Label="return; 718614" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 718615" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 718616" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 718617" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 718618" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 718619" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 718620" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 718621" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 718622" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 718623" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 718624" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 718625" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 718626" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 718627" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 718628" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 718629" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 718630" />
<Node Id="28001:[21348..21393).1" Label="CreateCompilation(source).VerifyDiagnostics() 718631" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 718632" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 718633" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 718634" />
<Node Id="10345:[956..960).1" Label="null 718635" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 718636" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 718637" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 718638" />
<Node Id="10345:[1181..1185).1" Label="null 718639" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 718640" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 718641" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 718642" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 718643" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 718644" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 718645" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 718646" />
<Node Id="10345:[1234..1246).1" Label="_compilation 718647" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 718648" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 718649" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 718650" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 718651" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 718652" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 718653" />
<Node Id="10345:[2208..2220).1" Label="_compilation 718654" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 718655" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 718656" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 718657" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 718658" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 718659" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 718660" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 718661" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 718662" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 718663" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 718664" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 718665" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 718666" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 718667" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 718668" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 718669" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 718670" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 718671" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 718672" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 718673" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 718674" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 718675" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 718676" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 718677" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 718678" />
<Node Id="10345:[25064..25074).1" Label="Validate() 718679" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 718680" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 718681" />
<Node Id="10345:[26365..26372).1" Label="return; 718682" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 718683" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 718684" />
<Node Id="10345:[25858..25865).1" Label="return; 718685" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 718686" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 718687" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 718688" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 718689" />
<Node Id="10292:[1720..1721).1" Label="0 718690" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 718691" />
<Node Id="10292:[1768..1769).1" Label="1 718692" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 718693" />
<Node Id="10292:[1992..1993).1" Label="2 718694" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 718695" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 718696" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 718697" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 718698" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 718699" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 718700" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 718701" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 718702" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 718703" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 718704" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 718705" />
<Node Id="10310:[84494..84496).1" Label="10 718706" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 718707" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 718708" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 718709" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 718710" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 718711" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 718712" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 718713" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 718714" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 718715" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 718716" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 718717" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 718718" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 718719" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 718720" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 718721" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 718722" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 718723" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 718724" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 718725" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 718726" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 718727" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 718728" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 718729" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 718730" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 718731" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 718732" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 718733" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 718734" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 718735" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 718736" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 718737" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 718738" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 718739" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 718740" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 718741" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 718742" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 718743" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 718744" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 718745" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 718746" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 718747" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 718748" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 718749" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 718750" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 718751" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 718752" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 718753" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 718754" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 718755" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 718756" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 718757" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 718758" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718759" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 718760" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 718761" />
<Node Id="10060:[4344..4356).1" Label="return true; 718762" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 718763" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 718764" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 718765" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 718766" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 718767" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718768" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 718769" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 718770" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718771" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 718772" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 718773" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 718774" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 718775" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 718776" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 718777" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 718778" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 718779" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 718780" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 718781" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718782" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 718783" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 718784" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 718785" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 718786" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 718787" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 718788" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718789" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 718790" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 718791" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 718792" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 718793" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 718794" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 718795" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 718796" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 718797" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 718798" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 718799" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 718800" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 718801" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718802" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 718803" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 718804" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 718805" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 718806" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 718807" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 718808" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 718809" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 718810" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 718811" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 718812" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 718813" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 718814" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 718815" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 718816" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 718817" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 718818" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 718819" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 718820" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 718821" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 718822" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 718823" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 718824" />
<Node Id="10076:[1773..1785).1" Label="_compilation 718825" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 718826" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 718827" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 718828" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 718829" />
<Node Id="10076:[2412..2424).1" Label="_compilation 718830" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 718831" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 718832" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 718833" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 718834" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 718835" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 718836" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 718837" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 718838" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 718839" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 718840" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 718841" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 718842" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 718843" />
<Node Id="10325:[696..707).1" Label="compilation 718844" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 718845" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 718846" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 718847" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 718848" />
<Node Id="10286:[815..820).1" Label="Flags 718849" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 718850" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 718851" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 718852" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 718853" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 718854" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 718855" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 718856" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 718857" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 718858" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 718859" />
<Node Id="25002:[4395..4432).19" Label="var diagnostics = c.GetDiagnostics(); 718860" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 718861" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 718862" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 718863" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 718864" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 718865" />
<Node Id="10076:[4821..4829).1" Label="InScript 718866" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 718867" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 718868" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 718869" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 718870" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 718871" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 718872" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 718873" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 718874" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 718875" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 718876" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 718877" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 718878" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 718879" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 718880" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 718881" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 718882" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 718883" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 718884" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 718885" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 718886" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 718887" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 718888" />
<Node Id="10076:[5470..5538).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 718889" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 718890" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 718891" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 718892" />
<Node Id="10077:[698..707).1" Label="_position 718893" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 718894" />
<Node Id="10077:[798..808).1" Label="_memberOpt 718895" />
<Node Id="10077:[854..862).1" Label="_factory 718896" />
<Node Id="10077:[964..972).1" Label="_factory 718897" />
<Node Id="10076:[5470..5538).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 718898" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 718899" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 718900" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 718901" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 718902" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 718903" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 718904" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 718905" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 718906" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 718907" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 718908" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 718909" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 718910" />
<Node Id="10077:[1230..1239).1" Label="_position 718911" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 718912" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 718913" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 718914" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 718915" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 718916" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 718917" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 718918" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 718919" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 718920" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 718921" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 718922" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 718923" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 718924" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 718925" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 718926" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 718927" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 718928" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 718929" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 718930" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 718931" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 718932" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 718933" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 718934" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 718935" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 718936" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 718937" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 718938" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 718939" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 718940" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 718941" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 718942" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 718943" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 718944" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 718945" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 718946" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 718947" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 718948" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 718949" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 718950" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 718951" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 718952" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 718953" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 718954" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 718955" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 718956" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 718957" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 718958" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 718959" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 718960" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 718961" />
<Node Id="10076:[1000..1010).1" Label="this.usage 718962" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 718963" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 718964" />
<Node Id="10077:[32670..32681).1" Label="binderCache 718965" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 718966" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 718967" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 718968" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 718969" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 718970" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 718971" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 718972" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 718973" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 718974" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 718975" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 718976" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 718977" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 718978" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 718979" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 718980" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 718981" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 718982" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 718983" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 718984" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 718985" />
<Node Id="10077:[44966..44971).1" Label="token 718986" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 718987" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 718988" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 718989" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 718990" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 718991" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 718992" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 718993" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 718994" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 718995" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 718996" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 718997" />
<Node Id="10077:[46328..46341).1" Label="return false; 718998" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 718999" />
<Node Id="10077:[39220..39228).1" Label="InScript 719000" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 719001" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 719002" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 719003" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 719004" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 719005" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 719006" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 719007" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 719008" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 719009" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 719010" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 719011" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 719012" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 719013" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 719014" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 719015" />
<Node Id="10077:[39626..39633).1" Label="inUsing 719016" />
<Node Id="10077:[39766..39774).1" Label="inScript 719017" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 719018" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 719019" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 719020" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 719021" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 719022" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 719023" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719024" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719025" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 719026" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 719027" />
<Node Id="10077:[39993..40004).1" Label="binderCache 719028" />
<Node Id="10077:[2066..2158).2" Label="get
                {
                    return _factory._binderCache;
                } 719029" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 719030" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 719031" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 719032" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 719033" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 719034" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 719035" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 719036" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 719037" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 719038" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 719039" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 719040" />
<Node Id="10077:[43302..43313).1" Label="compilation 719041" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 719042" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 719043" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 719044" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 719045" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 719046" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 719047" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 719048" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 719049" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 719050" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 719051" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 719052" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 719053" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 719054" />
<Node Id="10346:[1542..1546).1" Label="next 719055" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 719056" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 719057" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 719058" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 719059" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 719060" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 719061" />
<Node Id="10286:[1364..1368).1" Label="Next 719062" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 719063" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 719064" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 719065" />
<Node Id="10346:[858..868).1" Label="_container 719066" />
<Node Id="10346:[932..947).1" Label="_computeImports 719067" />
<Node Id="10346:[974..986).1" Label="_lazyImports 719068" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 719069" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 719070" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 719071" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 719072" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 719073" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 719074" />
<Node Id="10346:[1682..1692).1" Label="_container 719075" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 719076" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 719077" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 719078" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 719079" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 719080" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 719081" />
<Node Id="10077:[43503..43514).1" Label="compilation 719082" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 719083" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 719084" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 719085" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 719086" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 719087" />
<Node Id="10077:[43991..44002).1" Label="binderCache 719088" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 719089" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 719090" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 719091" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 719092" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 719093" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 719094" />
<Node Id="10077:[44062..44076).1" Label="return result; 719095" />
<Node Id="10077:[2926..2971).8" Label="return ((CSharpSyntaxNode)node).Accept(this); 719096" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 719097" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 719098" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 719099" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 719100" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 719101" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 719102" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 719103" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 719104" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 719105" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 719106" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 719107" />
<Node Id="10077:[33969..34032).2" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 719108" />
<Node Id="10077:[33969..34032).3" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 719109" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 719110" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 719111" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 719112" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 719113" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 719114" />
<Node Id="10346:[2661..2665).1" Label="next 719115" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 719116" />
<Node Id="10286:[1247..1258).2" Label="param Binder(Binder next) 719117" />
<Node Id="10286:[1231..1520).2" Label="param Binder(this) 719118" />
<Node Id="10286:[1260..1291).2" Label="param Binder(Conversions? conversions = null) 719119" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 719120" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 719121" />
<Node Id="10286:[1390..1400).2" Label="this.Flags 719122" />
<Node Id="10286:[1428..1444).2" Label="this.Compilation 719123" />
<Node Id="10286:[1478..1494).2" Label="_lazyConversions 719124" />
<Node Id="10346:[858..868).2" Label="_container 719125" />
<Node Id="10346:[932..947).2" Label="_computeImports 719126" />
<Node Id="10346:[974..986).2" Label="_lazyImports 719127" />
<Node Id="10346:[1017..1033).2" Label="_lazyImportChain 719128" />
<Node Id="10346:[1074..1100).2" Label="_lazyQuickAttributeChecker 719129" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 719130" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 719131" />
<Node Id="10346:[2766..2776).1" Label="_container 719132" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 719133" />
<Node Id="10346:[2803..2843).2" Label="_lazyImports = imports ?? Imports.Empty; 719134" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 719135" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 719136" />
<Node Id="10077:[34064..34272).2" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 719137" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 719138" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 719139" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 719140" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 719141" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 719142" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 719143" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 719144" />
<Node Id="10298:[471..492).6" Label="param Includes(this BinderFlags self) 719145" />
<Node Id="10298:[494..511).6" Label="param Includes(BinderFlags other) 719146" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 719147" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 719148" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 719149" />
<Node Id="10077:[34444..34455).1" Label="binderCache 719150" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 719151" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 719152" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 719153" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 719154" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 719155" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 719156" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 719157" />
<Node Id="10077:[2926..2971).12" Label="return ((CSharpSyntaxNode)node).Accept(this); 719158" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 719159" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 719160" />
<Node Id="10076:[5734..5748).1" Label="return result; 719161" />
<Node Id="25002:[4395..4432).22" Label="var diagnostics = c.GetDiagnostics(); 719162" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 719163" />
<Node Id="10076:[5277..5448).6" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 719164" />
<Node Id="10076:[5391..5433).1" Label="container.AssertMemberExposure(memberOpt); 719165" />
<Node Id="10076:[5391..5433).2" Label="container.AssertMemberExposure(memberOpt); 719166" />
<Node Id="10077:[4637..4671).1" Label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 719167" />
<Node Id="10077:[4591..7075).1" Label="param VisitMethodDeclaration(this) 719168" />
<Node Id="10077:[4705..4866).1" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 719169" />
<Node Id="10077:[4705..4866).2" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 719170" />
<Node Id="10077:[4705..4866).3" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 719171" />
<Node Id="10077:[4886..4902).1" Label="NodeUsage usage; 719172" />
<Node Id="10077:[4920..5555).1" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 719173" />
<Node Id="10077:[4920..5555).2" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 719174" />
<Node Id="10077:[5083..5555).1" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 719175" />
<Node Id="10077:[5083..5555).2" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 719176" />
<Node Id="10077:[5511..5536).1" Label="usage = NodeUsage.Normal; 719177" />
<Node Id="10077:[5575..5625).1" Label="var key = CreateBinderCacheKey(methodDecl, usage); 719178" />
<Node Id="10077:[5575..5625).2" Label="var key = CreateBinderCacheKey(methodDecl, usage); 719179" />
<Node Id="10077:[5585..5624).1" Label="CreateBinderCacheKey(methodDecl, usage) 719180" />
<Node Id="10077:[44159..44180).3" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 719181" />
<Node Id="10077:[44182..44197).3" Label="param CreateBinderCacheKey(NodeUsage usage) 719182" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719183" />
<Node Id="10077:[44231..44317).19" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719184" />
<Node Id="10077:[44335..44374).11" Label="return new BinderCacheKey(node, usage); 719185" />
<Node Id="10077:[44342..44373).3" Label="new BinderCacheKey(node, usage) 719186" />
<Node Id="10076:[853..1034).3" Label="param BinderCacheKey(this) 719187" />
<Node Id="10077:[5575..5625).3" Label="var key = CreateBinderCacheKey(methodDecl, usage); 719188" />
<Node Id="10077:[5645..5665).1" Label="Binder resultBinder; 719189" />
<Node Id="10077:[5688..5699).1" Label="binderCache 719190" />
<Node Id="10077:[2066..2158).5" Label="get
                {
                    return _factory._binderCache;
                } 719191" />
<Node Id="10077:[2110..2139).5" Label="return _factory._binderCache; 719192" />
<Node Id="10077:[5683..7020).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 719193" />
<Node Id="10077:[5683..7020).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 719194" />
<Node Id="10077:[5683..7020).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 719195" />
<Node Id="10077:[5683..7020).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 719196" />
<Node Id="10077:[5683..7020).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 719197" />
<Node Id="10077:[5776..5836).1" Label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 719198" />
<Node Id="10077:[5858..6188).1" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 719199" />
<Node Id="10077:[5858..6188).2" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 719200" />
<Node Id="10077:[5930..6023).1" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 719201" />
<Node Id="10077:[5930..6023).2" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 719202" />
<Node Id="10077:[5945..6022).1" Label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 719203" />
<Node Id="10077:[32474..32502).2" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 719204" />
<Node Id="10077:[32504..32523).2" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 719205" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719206" />
<Node Id="10077:[44231..44317).27" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719207" />
<Node Id="10077:[44954..44972).2" Label="SyntaxToken token; 719208" />
<Node Id="10077:[44966..44971).34" Label="token 719209" />
<Node Id="10077:[39421..39431).2" Label="syntaxTree 719210" />
<Node Id="10077:[1641..1732).2" Label="get
                {
                    return _factory._syntaxTree;
                } 719211" />
<Node Id="10077:[1685..1713).2" Label="return _factory._syntaxTree; 719212" />
<Node Id="10077:[39398..39590).7" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 719213" />
<Node Id="10077:[39398..39590).8" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 719214" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 719215" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 719216" />
<Node Id="10346:[858..868).3" Label="_container 719217" />
<Node Id="10346:[1572..1612).5" Label="Debug.Assert((object)container != null); 719218" />
<Node Id="10346:[1626..1666).5" Label="Debug.Assert(declarationSyntax != null); 719219" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 719220" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 719221" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 719222" />
<Node Id="10286:[1317..1350).13" Label="RoslynDebug.Assert(next != null); 719223" />
<Node Id="10286:[1317..1350).14" Label="RoslynDebug.Assert(next != null); 719224" />
<Node Id="10346:[858..868).4" Label="_container 719225" />
<Node Id="10346:[2691..2750).6" Label="Debug.Assert((object)container != null || imports != null); 719226" />
<Node Id="10346:[2691..2750).7" Label="Debug.Assert((object)container != null || imports != null); 719227" />
<Node Id="10077:[34064..34272).4" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 719228" />
<Node Id="10077:[34064..34272).5" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 719229" />
<Node Id="10077:[6212..6251).1" Label="SourceMemberMethodSymbol method = null; 719230" />
<Node Id="10077:[6275..6566).1" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 719231" />
<Node Id="10077:[6590..6839).1" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 719232" />
<Node Id="10077:[6863..6941).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 719233" />
<Node Id="10077:[6878..6940).1" Label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 719234" />
<Node Id="10307:[3496..3521).3" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 719235" />
<Node Id="10307:[3452..3756).3" Label="param WithUnsafeRegionIfNecessary(this) 719236" />
<Node Id="10077:[6963..6974).1" Label="binderCache 719237" />
<Node Id="10077:[2110..2139).10" Label="return _factory._binderCache; 719238" />
<Node Id="10077:[6963..7001).1" Label="binderCache.TryAdd(key, resultBinder); 719239" />
<Node Id="10077:[6963..7001).2" Label="binderCache.TryAdd(key, resultBinder); 719240" />
<Node Id="10077:[6963..7001).3" Label="binderCache.TryAdd(key, resultBinder); 719241" />
<Node Id="10077:[6963..7001).5" Label="binderCache.TryAdd(key, resultBinder); 719242" />
<Node Id="10077:[7040..7060).1" Label="return resultBinder; 719243" />
<Node Id="10077:[2926..2971).26" Label="return ((CSharpSyntaxNode)node).Accept(this); 719244" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 719245" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 719246" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 719247" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 719248" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 719249" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 719250" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 719251" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 719252" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 719253" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 719254" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 719255" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 719256" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 719257" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 719258" />
<Node Id="10307:[1161..1165).1" Label="next 719259" />
<Node Id="10307:[1167..1172).1" Label="flags 719260" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 719261" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 719262" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 719263" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 719264" />
<Node Id="10286:[726..773).7" Label="internal CSharpCompilation Compilation { get; } 719265" />
<Node Id="10286:[815..820).7" Label="Flags 719266" />
<Node Id="10286:[2975..3015).7" Label="protected internal Binder? Next { get; } 719267" />
<Node Id="10286:[17802..17818).7" Label="_lazyConversions 719268" />
<Node Id="10286:[18200..18223).7" Label="_lazyOverloadResolution 719269" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 719270" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 719271" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 719272" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 719273" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 719274" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 719275" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 719276" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 719277" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 719278" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 719279" />
<Node Id="10298:[471..492).10" Label="param Includes(this BinderFlags self) 719280" />
<Node Id="10298:[494..511).10" Label="param Includes(BinderFlags other) 719281" />
<Node Id="10286:[1977..1981).1" Label="Next 719282" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 719283" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 719284" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 719285" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 719286" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 719287" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 719288" />
<Node Id="25002:[4395..4432).31" Label="var diagnostics = c.GetDiagnostics(); 719289" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 719290" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 719291" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 719292" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 719293" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 719294" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719295" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719296" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719297" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719298" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 719299" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 719300" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 719301" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 719302" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 719303" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 719304" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 719305" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 719306" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 719307" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 719308" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 719309" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 719310" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 719311" />
<Node Id="10319:[15146..15291).6" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 719312" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 719313" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 719314" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 719315" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 719316" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 719317" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 719318" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 719319" />
<Node Id="10319:[21140..21179).1" Label="var node = (QualifiedNameSyntax)syntax; 719320" />
<Node Id="10319:[21205..21314).1" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719321" />
<Node Id="10319:[21205..21314).3" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719322" />
<Node Id="10319:[21205..21314).4" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719323" />
<Node Id="10319:[21205..21314).5" Label="return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719324" />
<Node Id="10319:[21212..21313).1" Label="BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 719325" />
<Node Id="10319:[71214..71239).1" Label="param BindQualifiedName(ExpressionSyntax leftName) 719326" />
<Node Id="10319:[71254..71280).1" Label="param BindQualifiedName(SimpleNameSyntax rightName) 719327" />
<Node Id="10319:[71295..71320).1" Label="param BindQualifiedName(DiagnosticBag diagnostics) 719328" />
<Node Id="10319:[71335..71374).1" Label="param BindQualifiedName(ConsList$TypeSymbol$ basesBeingResolved) 719329" />
<Node Id="10319:[71389..71420).1" Label="param BindQualifiedName(bool suppressUseSiteDiagnostics) 719330" />
<Node Id="10319:[71130..73408).1" Label="param BindQualifiedName(this) 719331" />
<Node Id="10319:[71446..71583).1" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 719332" />
<Node Id="10319:[71446..71583).2" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 719333" />
<Node Id="10319:[71446..71583).3" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 719334" />
<Node Id="10319:[71446..71583).4" Label="var left = BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol; 719335" />
<Node Id="10319:[71457..71560).1" Label="BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false) 719336" />
<Node Id="10319:[18431..18454).1" Label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 719337" />
<Node Id="10319:[18456..18481).1" Label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 719338" />
<Node Id="10319:[18483..18522).1" Label="param BindNamespaceOrTypeSymbol(ConsList$TypeSymbol$ basesBeingResolved) 719339" />
<Node Id="10319:[18524..18555).1" Label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 719340" />
<Node Id="10319:[18300..18837).1" Label="param BindNamespaceOrTypeSymbol(this) 719341" />
<Node Id="10319:[18581..18696).1" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719342" />
<Node Id="10319:[18581..18696).2" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719343" />
<Node Id="10319:[18581..18696).3" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719344" />
<Node Id="10319:[18581..18696).4" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 719345" />
<Node Id="10319:[18594..18695).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 719346" />
<Node Id="10319:[20002..20025).2" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 719347" />
<Node Id="10319:[20027..20052).2" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 719348" />
<Node Id="10319:[20054..20093).2" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 719349" />
<Node Id="10319:[20095..20126).2" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 719350" />
<Node Id="10319:[19916..30085).2" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 719351" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 719352" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 719353" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 719354" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 719355" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 719356" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 719357" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 719358" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 719359" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 719360" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 719361" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 719362" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 719363" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 719364" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 719365" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 719366" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 719367" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 719368" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 719369" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 719370" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 719371" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 719372" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 719373" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 719374" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 719375" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 719376" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 719377" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 719378" />
<Node Id="10319:[64461..64473).1" Label="return null; 719379" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 719380" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 719381" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 719382" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 719383" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 719384" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 719385" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 719386" />
<Node Id="10354:[11142..11154).1" Label="return pool; 719387" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 719388" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 719389" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 719390" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 719391" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 719392" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 719393" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 719394" />
<Node Id="10354:[3068..3073).1" Label="_kind 719395" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 719396" />
<Node Id="10354:[3319..3325).1" Label="_error 719397" />
<Node Id="10354:[3380..3385).1" Label="_pool 719398" />
<Node Id="10354:[3474..3479).1" Label="_pool 719399" />
<Node Id="10354:[3501..3506).1" Label="_kind 719400" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 719401" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 719402" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 719403" />
<Node Id="10354:[3601..3607).1" Label="_error 719404" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 719405" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 719406" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 719407" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719408" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719409" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719410" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 719411" />
<Node Id="10354:[11344..11360).1" Label="return instance; 719412" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 719413" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 719414" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 719415" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 719416" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 719417" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 719418" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 719419" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 719420" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 719421" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719422" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719423" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719424" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719425" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719426" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719427" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 719428" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 719429" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 719430" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 719431" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 719432" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 719433" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 719434" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 719435" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 719436" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719437" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 719438" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 719439" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 719440" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 719441" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 719442" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719443" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719444" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719445" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719446" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719447" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719448" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719449" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719450" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 719451" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 719452" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 719453" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 719454" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 719455" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 719456" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 719457" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 719458" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719459" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 719460" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 719461" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 719462" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719463" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719464" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719465" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719466" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719467" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719468" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719469" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 719470" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 719471" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 719472" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 719473" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 719474" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 719475" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 719476" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719477" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 719478" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 719479" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 719480" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719481" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719482" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719483" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 719484" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 719485" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 719486" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 719487" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 719488" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 719489" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 719490" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 719491" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 719492" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 719493" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 719494" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 719495" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 719496" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 719497" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 719498" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 719499" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 719500" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 719501" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 719502" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 719503" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 719504" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 719505" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 719506" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 719507" />
<Node Id="10354:[4962..4966).1" Label="Kind 719508" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 719509" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 719510" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 719511" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 719512" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 719513" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 719514" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 719515" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719516" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719517" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719518" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719519" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719520" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719521" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719522" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719523" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 719524" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 719525" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 719526" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 719527" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 719528" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 719529" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 719530" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 719531" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719532" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 719533" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719534" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 719535" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 719536" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719537" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719538" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719539" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 719540" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 719541" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 719542" />
<Node Id="10346:[10629..10648).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 719543" />
<Node Id="10346:[10650..10661).1" Label="param LookupSymbolsInSingleBinder(string name) 719544" />
<Node Id="10346:[10663..10672).1" Label="param LookupSymbolsInSingleBinder(int arity) 719545" />
<Node Id="10346:[10674..10713).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 719546" />
<Node Id="10346:[10715..10736).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 719547" />
<Node Id="10346:[10738..10759).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 719548" />
<Node Id="10346:[10761..10774).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 719549" />
<Node Id="10346:[10776..10822).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719550" />
<Node Id="10346:[10564..12467).1" Label="param LookupSymbolsInSingleBinder(this) 719551" />
<Node Id="10346:[10861..10875).1" Label="result.IsClear 719552" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 719553" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719554" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719555" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719556" />
<Node Id="10346:[10848..10877).1" Label="Debug.Assert(result.IsClear); 719557" />
<Node Id="10346:[10897..10914).1" Label="IsSubmissionClass 719558" />
<Node Id="10346:[7666..7775).1" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 719559" />
<Node Id="10346:[7672..7773).1" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 719560" />
<Node Id="10346:[10893..11127).1" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 719561" />
<Node Id="10346:[11143..11188).1" Label="var imports = GetImports(basesBeingResolved); 719562" />
<Node Id="10346:[11157..11187).1" Label="GetImports(basesBeingResolved) 719563" />
<Node Id="10346:[3460..3499).1" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 719564" />
<Node Id="10346:[3423..3863).1" Label="param GetImports(this) 719565" />
<Node Id="10346:[3525..3638).1" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 719566" />
<Node Id="10346:[3525..3638).2" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 719567" />
<Node Id="10346:[3654..3816).1" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 719568" />
<Node Id="10346:[3654..3816).2" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 719569" />
<Node Id="10346:[3832..3852).1" Label="return _lazyImports; 719570" />
<Node Id="10346:[11143..11188).2" Label="var imports = GetImports(basesBeingResolved); 719571" />
<Node Id="10346:[11258..12246).1" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 719572" />
<Node Id="10346:[11258..12246).2" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 719573" />
<Node Id="10346:[11258..12246).5" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 719574" />
<Node Id="10346:[11258..12246).6" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 719575" />
<Node Id="10346:[11369..11508).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719576" />
<Node Id="10346:[11369..11508).2" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719577" />
<Node Id="10346:[11369..11508).3" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719578" />
<Node Id="10346:[11369..11508).4" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719579" />
<Node Id="10346:[11369..11508).5" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719580" />
<Node Id="10346:[11369..11508).6" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719581" />
<Node Id="10346:[11369..11508).7" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719582" />
<Node Id="10346:[11369..11508).8" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719583" />
<Node Id="10346:[11369..11508).9" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719584" />
<Node Id="10346:[11369..11507).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 719585" />
<Node Id="10312:[7652..7671).1" Label="param LookupMembersInternal(LookupResult result) 719586" />
<Node Id="10312:[7673..7703).1" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 719587" />
<Node Id="10312:[7705..7716).1" Label="param LookupMembersInternal(string name) 719588" />
<Node Id="10312:[7718..7727).1" Label="param LookupMembersInternal(int arity) 719589" />
<Node Id="10312:[7729..7768).1" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 719590" />
<Node Id="10312:[7770..7791).1" Label="param LookupMembersInternal(LookupOptions options) 719591" />
<Node Id="10312:[7793..7814).1" Label="param LookupMembersInternal(Binder originalBinder) 719592" />
<Node Id="10312:[7816..7829).1" Label="param LookupMembersInternal(bool diagnose) 719593" />
<Node Id="10312:[7831..7877).1" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719594" />
<Node Id="10312:[7615..8420).1" Label="param LookupMembersInternal(this) 719595" />
<Node Id="10312:[7903..7936).1" Label="Debug.Assert(options.AreValid()); 719596" />
<Node Id="10312:[7916..7934).1" Label="options.AreValid() 719597" />
<Node Id="10353:[4698..4724).2" Label="param AreValid(this LookupOptions options) 719598" />
<Node Id="10353:[4750..4847).3" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 719599" />
<Node Id="10353:[4863..5000).5" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 719600" />
<Node Id="10353:[4863..5000).6" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 719601" />
<Node Id="10353:[5079..5183).3" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 719602" />
<Node Id="10353:[5197..5323).4" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 719603" />
<Node Id="10353:[5485..5759).7" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 719604" />
<Node Id="10353:[5485..5759).8" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 719605" />
<Node Id="10353:[5485..5759).9" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 719606" />
<Node Id="10353:[5775..5979).5" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 719607" />
<Node Id="10353:[5775..5979).7" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 719608" />
<Node Id="10353:[5995..6029).4" Label="return OnlyOneBitSet(onlyOptions); 719609" />
<Node Id="10353:[6002..6028).2" Label="OnlyOneBitSet(onlyOptions) 719610" />
<Node Id="10353:[6343..6358).2" Label="param OnlyOneBitSet(LookupOptions o) 719611" />
<Node Id="10353:[6384..6410).7" Label="return (o & (o - 1)) == 0; 719612" />
<Node Id="10353:[6384..6410).8" Label="return (o & (o - 1)) == 0; 719613" />
<Node Id="10312:[7952..7977).1" Label="Debug.Assert(arity $= 0); 719614" />
<Node Id="10312:[7952..7977).2" Label="Debug.Assert(arity $= 0); 719615" />
<Node Id="10312:[7991..8409).1" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 719616" />
<Node Id="10312:[8247..8394).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719617" />
<Node Id="10312:[8247..8394).2" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719618" />
<Node Id="10312:[8247..8394).3" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719619" />
<Node Id="10312:[8247..8394).4" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719620" />
<Node Id="10312:[8247..8394).5" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719621" />
<Node Id="10312:[8247..8394).6" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719622" />
<Node Id="10312:[8247..8394).7" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719623" />
<Node Id="10312:[8247..8394).8" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719624" />
<Node Id="10312:[8247..8394).9" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719625" />
<Node Id="10312:[8247..8393).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 719626" />
<Node Id="10312:[8543..8562).1" Label="param LookupMembersInType(LookupResult result) 719627" />
<Node Id="10312:[8564..8579).1" Label="param LookupMembersInType(TypeSymbol type) 719628" />
<Node Id="10312:[8581..8592).1" Label="param LookupMembersInType(string name) 719629" />
<Node Id="10312:[8594..8603).1" Label="param LookupMembersInType(int arity) 719630" />
<Node Id="10312:[8605..8644).1" Label="param LookupMembersInType(ConsList$TypeSymbol$ basesBeingResolved) 719631" />
<Node Id="10312:[8646..8667).1" Label="param LookupMembersInType(LookupOptions options) 719632" />
<Node Id="10312:[8669..8690).1" Label="param LookupMembersInType(Binder originalBinder) 719633" />
<Node Id="10312:[8692..8705).1" Label="param LookupMembersInType(bool diagnose) 719634" />
<Node Id="10312:[8707..8753).1" Label="param LookupMembersInType(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719635" />
<Node Id="10312:[8508..10685).1" Label="param LookupMembersInType(this) 719636" />
<Node Id="10312:[8779..10524).1" Label="switch (type.TypeKind)
            {
                case TypeKind.TypeParameter:
                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Interface:
                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Class:
                case TypeKind.Struct:
                case TypeKind.Enum:
                case TypeKind.Delegate:
                case TypeKind.Array:
                case TypeKind.Dynamic:
                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Submission:
                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Error:
                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Pointer:
                case TypeKind.FunctionPointer:
                    result.Clear();
                    break;

                case TypeKind.Unknown:
                default:
                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);
            } 719637" />
<Node Id="10312:[9577..9709).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719638" />
<Node Id="10312:[9577..9709).2" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719639" />
<Node Id="10312:[9577..9709).3" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719640" />
<Node Id="10312:[9577..9709).4" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719641" />
<Node Id="10312:[9577..9709).5" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719642" />
<Node Id="10312:[9577..9709).6" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719643" />
<Node Id="10312:[9577..9709).7" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719644" />
<Node Id="10312:[9577..9709).8" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719645" />
<Node Id="10312:[9577..9709).9" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719646" />
<Node Id="10312:[9577..9708).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 719647" />
<Node Id="10312:[34707..34726).1" Label="param LookupMembersInClass(LookupResult result) 719648" />
<Node Id="10312:[34741..34756).1" Label="param LookupMembersInClass(TypeSymbol type) 719649" />
<Node Id="10312:[34771..34782).1" Label="param LookupMembersInClass(string name) 719650" />
<Node Id="10312:[34797..34806).1" Label="param LookupMembersInClass(int arity) 719651" />
<Node Id="10312:[34821..34860).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 719652" />
<Node Id="10312:[34875..34896).1" Label="param LookupMembersInClass(LookupOptions options) 719653" />
<Node Id="10312:[34911..34932).1" Label="param LookupMembersInClass(Binder originalBinder) 719654" />
<Node Id="10312:[34947..34960).1" Label="param LookupMembersInClass(bool diagnose) 719655" />
<Node Id="10312:[34975..35021).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719656" />
<Node Id="10312:[34659..35191).1" Label="param LookupMembersInClass(this) 719657" />
<Node Id="10312:[35047..35180).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719658" />
<Node Id="10312:[35047..35180).2" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719659" />
<Node Id="10312:[35047..35180).3" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719660" />
<Node Id="10312:[35047..35180).4" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719661" />
<Node Id="10312:[35047..35180).5" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719662" />
<Node Id="10312:[35047..35180).6" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719663" />
<Node Id="10312:[35047..35180).7" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719664" />
<Node Id="10312:[35047..35180).9" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719665" />
<Node Id="10312:[35047..35180).10" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719666" />
<Node Id="10312:[35047..35179).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 719667" />
<Node Id="10312:[35313..35332).1" Label="param LookupMembersInClass(LookupResult result) 719668" />
<Node Id="10312:[35347..35362).1" Label="param LookupMembersInClass(TypeSymbol type) 719669" />
<Node Id="10312:[35377..35388).1" Label="param LookupMembersInClass(string name) 719670" />
<Node Id="10312:[35403..35412).1" Label="param LookupMembersInClass(int arity) 719671" />
<Node Id="10312:[35427..35466).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 719672" />
<Node Id="10312:[35481..35502).1" Label="param LookupMembersInClass(LookupOptions options) 719673" />
<Node Id="10312:[35517..35538).1" Label="param LookupMembersInClass(Binder originalBinder) 719674" />
<Node Id="10312:[35553..35581).1" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 719675" />
<Node Id="10312:[35596..35609).1" Label="param LookupMembersInClass(bool diagnose) 719676" />
<Node Id="10312:[35624..35670).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719677" />
<Node Id="10312:[35265..38808).1" Label="param LookupMembersInClass(this) 719678" />
<Node Id="10312:[35696..35731).1" Label="Debug.Assert((object)type != null); 719679" />
<Node Id="10312:[35696..35731).2" Label="Debug.Assert((object)type != null); 719680" />
<Node Id="10312:[35745..35826).1" Label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 719681" />
<Node Id="10312:[35842..35872).1" Label="TypeSymbol currentType = type; 719682" />
<Node Id="10312:[35898..35924).1" Label="LookupResult.GetInstance() 719683" />
<Node Id="10354:[3068..3073).2" Label="_kind 719684" />
<Node Id="10354:[3200..3211).2" Label="_symbolList 719685" />
<Node Id="10354:[3319..3325).2" Label="_error 719686" />
<Node Id="10354:[3380..3385).2" Label="_pool 719687" />
<Node Id="10354:[11312..11328).2" Label="instance.IsClear 719688" />
<Node Id="10354:[3684..3818).5" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 719689" />
<Node Id="10354:[3720..3803).33" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719690" />
<Node Id="10354:[3720..3803).34" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719691" />
<Node Id="10354:[3720..3803).35" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719692" />
<Node Id="10354:[11299..11330).4" Label="Debug.Assert(instance.IsClear); 719693" />
<Node Id="10312:[35888..35925).1" Label="var tmp = LookupResult.GetInstance(); 719694" />
<Node Id="10312:[35939..35985).1" Label="PooledHashSet$NamedTypeSymbol$ visited = null; 719695" />
<Node Id="10312:[35999..38740).1" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 719696" />
<Node Id="10312:[35999..38740).2" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 719697" />
<Node Id="10312:[36067..36078).1" Label="tmp.Clear() 719698" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 719699" />
<Node Id="10354:[3887..3892).1" Label="_kind 719700" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 719701" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 719702" />
<Node Id="10354:[3966..3972).1" Label="_error 719703" />
<Node Id="10312:[36067..36079).1" Label="tmp.Clear(); 719704" />
<Node Id="10312:[36097..36258).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719705" />
<Node Id="10312:[36097..36258).2" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719706" />
<Node Id="10312:[36097..36258).3" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719707" />
<Node Id="10312:[36097..36258).4" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719708" />
<Node Id="10312:[36097..36258).5" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719709" />
<Node Id="10312:[36097..36258).6" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719710" />
<Node Id="10312:[36097..36258).7" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719711" />
<Node Id="10312:[36097..36258).8" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719712" />
<Node Id="10312:[36097..36258).9" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719713" />
<Node Id="10312:[36097..36258).10" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719714" />
<Node Id="10312:[36097..36257).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 719715" />
<Node Id="10312:[33656..33675).1" Label="param LookupMembersWithoutInheritance(LookupResult result) 719716" />
<Node Id="10312:[33677..33692).1" Label="param LookupMembersWithoutInheritance(TypeSymbol type) 719717" />
<Node Id="10312:[33694..33705).1" Label="param LookupMembersWithoutInheritance(string name) 719718" />
<Node Id="10312:[33707..33716).1" Label="param LookupMembersWithoutInheritance(int arity) 719719" />
<Node Id="10312:[33731..33752).1" Label="param LookupMembersWithoutInheritance(LookupOptions options) 719720" />
<Node Id="10312:[33754..33775).1" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 719721" />
<Node Id="10312:[33777..33805).1" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 719722" />
<Node Id="10312:[33807..33820).1" Label="param LookupMembersWithoutInheritance(bool diagnose) 719723" />
<Node Id="10312:[33822..33868).1" Label="param LookupMembersWithoutInheritance(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719724" />
<Node Id="10312:[33870..33909).1" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 719725" />
<Node Id="10312:[33935..34006).1" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 719726" />
<Node Id="10312:[33935..34006).2" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 719727" />
<Node Id="10312:[33935..34006).3" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 719728" />
<Node Id="10312:[33935..34006).4" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 719729" />
<Node Id="10312:[33949..34005).1" Label="GetCandidateMembers(type, name, options, originalBinder) 719730" />
<Node Id="10312:[61540..61570).1" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 719731" />
<Node Id="10312:[61572..61583).1" Label="param GetCandidateMembers(string name) 719732" />
<Node Id="10312:[61585..61606).1" Label="param GetCandidateMembers(LookupOptions options) 719733" />
<Node Id="10312:[61608..61629).1" Label="param GetCandidateMembers(Binder originalBinder) 719734" />
<Node Id="10312:[61655..62327).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 719735" />
<Node Id="10312:[61655..62327).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 719736" />
<Node Id="10312:[61655..62327).4" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 719737" />
<Node Id="10312:[61771..61840).1" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 719738" />
<Node Id="10312:[61771..61840).2" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 719739" />
<Node Id="10312:[34022..34574).1" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 719740" />
<Node Id="10312:[36097..36258).11" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719741" />
<Node Id="10312:[36278..36360).1" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 719742" />
<Node Id="10312:[36278..36360).2" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 719743" />
<Node Id="10312:[36278..36360).3" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 719744" />
<Node Id="10312:[36278..36360).4" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 719745" />
<Node Id="10312:[36278..36360).5" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 719746" />
<Node Id="10312:[36278..36360).6" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 719747" />
<Node Id="10354:[9012..9030).1" Label="param MergePrioritized(LookupResult other) 719748" />
<Node Id="10354:[8981..9152).1" Label="param MergePrioritized(this) 719749" />
<Node Id="10354:[9060..9070).1" Label="other.Kind 719750" />
<Node Id="10354:[4058..4122).4" Label="get
            {
                return _kind;
            } 719751" />
<Node Id="10354:[9056..9141).1" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 719752" />
<Node Id="10354:[9073..9077).1" Label="Kind 719753" />
<Node Id="10354:[4058..4122).5" Label="get
            {
                return _kind;
            } 719754" />
<Node Id="10354:[9056..9141).2" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 719755" />
<Node Id="10354:[9056..9141).3" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 719756" />
<Node Id="10312:[36566..36625).1" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 719757" />
<Node Id="10312:[36643..36855).1" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 719758" />
<Node Id="10312:[36643..36855).2" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 719759" />
<Node Id="10312:[37061..37078).1" Label="tmp.IsMultiViable 719760" />
<Node Id="10354:[4919..5009).4" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 719761" />
<Node Id="10354:[4094..4107).6" Label="return _kind; 719762" />
<Node Id="10312:[37029..37117).1" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 719763" />
<Node Id="10312:[37258..37278).1" Label="result.IsMultiViable 719764" />
<Node Id="10354:[4919..5009).5" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 719765" />
<Node Id="10354:[4094..4107).7" Label="return _kind; 719766" />
<Node Id="10312:[37254..37416).1" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 719767" />
<Node Id="10312:[37436..37988).1" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 719768" />
<Node Id="10312:[37436..37988).2" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 719769" />
<Node Id="10312:[38290..38338).1" Label="originalBinder.InCrefButNotParameterOrReturnType 719770" />
<Node Id="10306:[3345..3430).1" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 719771" />
<Node Id="10306:[3358..3364).1" Label="InCref 719772" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 719773" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 719774" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 719775" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 719776" />
<Node Id="10298:[471..492).11" Label="param Includes(this BinderFlags self) 719777" />
<Node Id="10298:[494..511).11" Label="param Includes(BinderFlags other) 719778" />
<Node Id="10306:[3351..3428).1" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 719779" />
<Node Id="10312:[38286..38405).1" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 719780" />
<Node Id="10312:[38425..38538).1" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 719781" />
<Node Id="10312:[38425..38538).2" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 719782" />
<Node Id="10312:[38425..38538).3" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 719783" />
<Node Id="10312:[38425..38538).4" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 719784" />
<Node Id="10312:[38425..38538).5" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 719785" />
<Node Id="10312:[38556..38725).1" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 719786" />
<Node Id="10312:[38556..38725).2" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 719787" />
<Node Id="10312:[38629..38706).1" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 719788" />
<Node Id="10312:[38629..38706).2" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 719789" />
<Node Id="10312:[36067..36079).2" Label="tmp.Clear(); 719790" />
<Node Id="10312:[36097..36258).15" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719791" />
<Node Id="10312:[36097..36258).17" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719792" />
<Node Id="10312:[36097..36258).18" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719793" />
<Node Id="10312:[36097..36258).19" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 719794" />
<Node Id="10312:[33656..33675).2" Label="param LookupMembersWithoutInheritance(LookupResult result) 719795" />
<Node Id="10312:[33707..33716).2" Label="param LookupMembersWithoutInheritance(int arity) 719796" />
<Node Id="10312:[33754..33775).2" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 719797" />
<Node Id="10312:[33777..33805).2" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 719798" />
<Node Id="10312:[33807..33820).2" Label="param LookupMembersWithoutInheritance(bool diagnose) 719799" />
<Node Id="10312:[33870..33909).2" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 719800" />
<Node Id="10312:[61608..61629).2" Label="param GetCandidateMembers(Binder originalBinder) 719801" />
<Node Id="10312:[34022..34574).4" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 719802" />
<Node Id="10354:[9012..9030).2" Label="param MergePrioritized(LookupResult other) 719803" />
<Node Id="10354:[8981..9152).2" Label="param MergePrioritized(this) 719804" />
<Node Id="10354:[9060..9070).2" Label="other.Kind 719805" />
<Node Id="10354:[4058..4122).9" Label="get
            {
                return _kind;
            } 719806" />
<Node Id="10354:[9056..9141).5" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 719807" />
<Node Id="10354:[9073..9077).2" Label="Kind 719808" />
<Node Id="10354:[4058..4122).10" Label="get
            {
                return _kind;
            } 719809" />
<Node Id="10354:[9056..9141).6" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 719810" />
<Node Id="10354:[9056..9141).7" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 719811" />
<Node Id="10312:[36566..36625).2" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 719812" />
<Node Id="10312:[36643..36855).4" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 719813" />
<Node Id="10312:[36643..36855).5" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 719814" />
<Node Id="10312:[37061..37078).2" Label="tmp.IsMultiViable 719815" />
<Node Id="10354:[4094..4107).11" Label="return _kind; 719816" />
<Node Id="10312:[37029..37117).4" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 719817" />
<Node Id="10312:[37258..37278).2" Label="result.IsMultiViable 719818" />
<Node Id="10354:[4094..4107).12" Label="return _kind; 719819" />
<Node Id="10312:[37254..37416).4" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 719820" />
<Node Id="10312:[37436..37988).5" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 719821" />
<Node Id="10312:[38290..38338).2" Label="originalBinder.InCrefButNotParameterOrReturnType 719822" />
<Node Id="10306:[3345..3430).2" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 719823" />
<Node Id="10306:[3358..3364).2" Label="InCref 719824" />
<Node Id="10306:[3196..3249).2" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 719825" />
<Node Id="10306:[3202..3247).5" Label="return this.Flags.Includes(BinderFlags.Cref); 719826" />
<Node Id="10306:[3202..3247).6" Label="return this.Flags.Includes(BinderFlags.Cref); 719827" />
<Node Id="10306:[3209..3246).2" Label="this.Flags.Includes(BinderFlags.Cref) 719828" />
<Node Id="10298:[471..492).12" Label="param Includes(this BinderFlags self) 719829" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 719830" />
<Node Id="10306:[3351..3428).4" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 719831" />
<Node Id="10312:[38286..38405).3" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 719832" />
<Node Id="10312:[38556..38725).4" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 719833" />
<Node Id="10312:[38756..38772).1" Label="visited?.Free(); 719834" />
<Node Id="10312:[38786..38796).1" Label="tmp.Free() 719835" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 719836" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 719837" />
<Node Id="10354:[3841..3991).3" Label="param Clear(this) 719838" />
<Node Id="10354:[3887..3892).3" Label="_kind 719839" />
<Node Id="10354:[3932..3952).3" Label="_symbolList.Clear(); 719840" />
<Node Id="10354:[3966..3980).3" Label="_error = null; 719841" />
<Node Id="10354:[3966..3972).3" Label="_error 719842" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 719843" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 719844" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 719845" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 719846" />
<Node Id="10312:[38786..38797).1" Label="tmp.Free(); 719847" />
<Node Id="10312:[35047..35180).11" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 719848" />
<Node Id="10312:[9577..9709).10" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719849" />
<Node Id="10312:[8247..8394).10" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719850" />
<Node Id="10346:[11369..11508).10" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719851" />
<Node Id="10346:[11532..11552).1" Label="result.IsMultiViable 719852" />
<Node Id="10354:[4919..5009).9" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 719853" />
<Node Id="10354:[4094..4107).13" Label="return _kind; 719854" />
<Node Id="10346:[11528..12231).1" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 719855" />
<Node Id="10346:[12335..12456).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719856" />
<Node Id="10346:[12335..12456).2" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719857" />
<Node Id="10346:[12335..12456).3" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719858" />
<Node Id="10346:[12335..12456).4" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719859" />
<Node Id="10346:[12335..12456).5" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719860" />
<Node Id="10346:[12335..12456).6" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719861" />
<Node Id="10346:[12335..12456).7" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719862" />
<Node Id="10346:[12335..12456).8" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719863" />
<Node Id="10346:[12335..12455).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 719864" />
<Node Id="10345:[29004..29025).1" Label="param LookupSymbol(Binder originalBinder) 719865" />
<Node Id="10345:[29040..29059).1" Label="param LookupSymbol(LookupResult result) 719866" />
<Node Id="10345:[29074..29085).1" Label="param LookupSymbol(string name) 719867" />
<Node Id="10345:[29100..29109).1" Label="param LookupSymbol(int arity) 719868" />
<Node Id="10345:[29124..29163).1" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 719869" />
<Node Id="10345:[29178..29199).1" Label="param LookupSymbol(LookupOptions options) 719870" />
<Node Id="10345:[29214..29227).1" Label="param LookupSymbol(bool diagnose) 719871" />
<Node Id="10345:[29242..29288).1" Label="param LookupSymbol(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719872" />
<Node Id="10345:[28963..29726).1" Label="param LookupSymbol(this) 719873" />
<Node Id="10345:[29314..29436).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719874" />
<Node Id="10345:[29314..29436).2" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719875" />
<Node Id="10345:[29314..29436).3" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719876" />
<Node Id="10345:[29314..29436).4" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719877" />
<Node Id="10345:[29314..29436).5" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719878" />
<Node Id="10345:[29314..29436).6" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719879" />
<Node Id="10345:[29314..29436).7" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719880" />
<Node Id="10345:[29314..29436).8" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719881" />
<Node Id="10345:[29314..29435).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 719882" />
<Node Id="10345:[29788..29809).1" Label="param LookupSymbolInAliases(Binder originalBinder) 719883" />
<Node Id="10345:[29824..29843).1" Label="param LookupSymbolInAliases(LookupResult result) 719884" />
<Node Id="10345:[29858..29869).1" Label="param LookupSymbolInAliases(string name) 719885" />
<Node Id="10345:[29884..29893).1" Label="param LookupSymbolInAliases(int arity) 719886" />
<Node Id="10345:[29908..29947).1" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 719887" />
<Node Id="10345:[29962..29983).1" Label="param LookupSymbolInAliases(LookupOptions options) 719888" />
<Node Id="10345:[29998..30011).1" Label="param LookupSymbolInAliases(bool diagnose) 719889" />
<Node Id="10345:[30026..30072).1" Label="param LookupSymbolInAliases(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719890" />
<Node Id="10345:[29738..31666).1" Label="param LookupSymbolInAliases(this) 719891" />
<Node Id="10345:[30127..30163).1" Label="originalBinder.IsSemanticModelBinder 719892" />
<Node Id="10286:[2155..2260).1" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 719893" />
<Node Id="10286:[2191..2245).1" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 719894" />
<Node Id="10286:[2191..2245).2" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 719895" />
<Node Id="10286:[2198..2244).1" Label="this.Flags.Includes(BinderFlags.SemanticModel) 719896" />
<Node Id="10298:[471..492).13" Label="param Includes(this BinderFlags self) 719897" />
<Node Id="10298:[494..511).13" Label="param Includes(BinderFlags other) 719898" />
<Node Id="10345:[30098..30164).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 719899" />
<Node Id="10345:[30180..30209).1" Label="AliasAndUsingDirective alias; 719900" />
<Node Id="10345:[30203..30208).1" Label="alias 719901" />
<Node Id="10345:[30223..30867).1" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 719902" />
<Node Id="10345:[30223..30867).2" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 719903" />
<Node Id="10345:[30223..30867).3" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 719904" />
<Node Id="10345:[30883..31655).1" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 719905" />
<Node Id="10345:[29314..29436).9" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719906" />
<Node Id="10345:[29457..29477).1" Label="result.IsMultiViable 719907" />
<Node Id="10354:[4919..5009).10" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 719908" />
<Node Id="10354:[4094..4107).14" Label="return _kind; 719909" />
<Node Id="10345:[29452..29715).1" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 719910" />
<Node Id="10345:[29452..29715).2" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 719911" />
<Node Id="10345:[29452..29715).3" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 719912" />
<Node Id="10345:[29452..29715).5" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 719913" />
<Node Id="10345:[29566..29700).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719914" />
<Node Id="10345:[29566..29700).2" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719915" />
<Node Id="10345:[29566..29700).3" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719916" />
<Node Id="10345:[29566..29700).4" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719917" />
<Node Id="10345:[29566..29700).5" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719918" />
<Node Id="10345:[29566..29700).6" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719919" />
<Node Id="10345:[29566..29700).7" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719920" />
<Node Id="10345:[29566..29700).8" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719921" />
<Node Id="10345:[29566..29700).9" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719922" />
<Node Id="10345:[29566..29699).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 719923" />
<Node Id="10345:[31734..31789).1" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 719924" />
<Node Id="10345:[31804..31825).1" Label="param LookupSymbolInUsings(Binder originalBinder) 719925" />
<Node Id="10345:[31840..31859).1" Label="param LookupSymbolInUsings(LookupResult result) 719926" />
<Node Id="10345:[31874..31885).1" Label="param LookupSymbolInUsings(string name) 719927" />
<Node Id="10345:[31900..31909).1" Label="param LookupSymbolInUsings(int arity) 719928" />
<Node Id="10345:[31924..31963).1" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 719929" />
<Node Id="10345:[31978..31999).1" Label="param LookupSymbolInUsings(LookupOptions options) 719930" />
<Node Id="10345:[32014..32027).1" Label="param LookupSymbolInUsings(bool diagnose) 719931" />
<Node Id="10345:[32042..32088).1" Label="param LookupSymbolInUsings(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 719932" />
<Node Id="10345:[32114..32230).1" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 719933" />
<Node Id="10345:[32114..32230).2" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 719934" />
<Node Id="10345:[32118..32174).1" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 719935" />
<Node Id="10298:[471..492).14" Label="param Includes(this BinderFlags self) 719936" />
<Node Id="10298:[494..511).14" Label="param Includes(BinderFlags other) 719937" />
<Node Id="10345:[32275..32311).1" Label="originalBinder.IsSemanticModelBinder 719938" />
<Node Id="10286:[2155..2260).2" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 719939" />
<Node Id="10286:[2191..2245).5" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 719940" />
<Node Id="10286:[2191..2245).6" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 719941" />
<Node Id="10286:[2198..2244).2" Label="this.Flags.Includes(BinderFlags.SemanticModel) 719942" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 719943" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 719944" />
<Node Id="10345:[32246..32312).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 719945" />
<Node Id="10345:[32328..33465).1" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 719946" />
<Node Id="10345:[29566..29700).10" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719947" />
<Node Id="10346:[12335..12456).9" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 719948" />
<Node Id="10354:[3720..3803).41" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719949" />
<Node Id="10354:[3720..3803).43" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719950" />
<Node Id="10312:[4680..4787).3" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 719951" />
<Node Id="10312:[4534..4658).21" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719952" />
<Node Id="10312:[4534..4658).25" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 719953" />
<Node Id="10346:[10663..10672).2" Label="param LookupSymbolsInSingleBinder(int arity) 719954" />
<Node Id="10346:[10738..10759).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 719955" />
<Node Id="10346:[10761..10774).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 719956" />
<Node Id="10346:[10861..10875).2" Label="result.IsClear 719957" />
<Node Id="10354:[3684..3818).7" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 719958" />
<Node Id="10354:[3720..3803).49" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719959" />
<Node Id="10354:[3720..3803).50" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719960" />
<Node Id="10354:[3720..3803).51" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 719961" />
<Node Id="10346:[10848..10877).4" Label="Debug.Assert(result.IsClear); 719962" />
<Node Id="10346:[10897..10914).2" Label="IsSubmissionClass 719963" />
<Node Id="10346:[7666..7775).2" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 719964" />
<Node Id="10346:[7672..7773).4" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 719965" />
<Node Id="10346:[10893..11127).3" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 719966" />
<Node Id="10346:[3460..3499).2" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 719967" />
<Node Id="10346:[3525..3638).8" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 719968" />
<Node Id="10346:[3654..3816).4" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 719969" />
<Node Id="10346:[3712..3801).1" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 719970" />
<Node Id="10346:[3712..3801).2" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 719971" />
<Node Id="10346:[3712..3801).4" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 719972" />
<Node Id="10345:[2889..2923).1" Label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 719973" />
<Node Id="10345:[2938..2962).1" Label="param FromSyntax(InContainerBinder binder) 719974" />
<Node Id="10345:[2977..3016).1" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 719975" />
<Node Id="10345:[3031..3043).1" Label="param FromSyntax(bool inUsing) 719976" />
<Node Id="10345:[3069..3118).1" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 719977" />
<Node Id="10345:[3102..3117).1" Label="usingDirectives 719978" />
<Node Id="10345:[3132..3193).1" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 719979" />
<Node Id="10345:[3171..3192).1" Label="externAliasDirectives 719980" />
<Node Id="10345:[3207..4163).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
            {
                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings;
                externAliasDirectives = compilationUnit.Externs;
            }
            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
            {
                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : namespaceDecl.Usings;
                externAliasDirectives = namespaceDecl.Externs;
            }
            else
            {
                return Empty;
            } 719981" />
<Node Id="10345:[3299..3362).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 719982" />
<Node Id="10345:[3476..3483).1" Label="inUsing 719983" />
<Node Id="10345:[3530..3552).1" Label="compilationUnit.Usings 719984" />
<Node Id="10345:[3458..3553).1" Label="usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings; 719985" />
<Node Id="10345:[3571..3619).1" Label="externAliasDirectives = compilationUnit.Externs; 719986" />
<Node Id="10345:[4179..4307).1" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 719987" />
<Node Id="10345:[4179..4307).2" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 719988" />
<Node Id="10345:[4179..4307).4" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 719989" />
<Node Id="10345:[4179..4307).5" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 719990" />
<Node Id="10345:[4279..4292).1" Label="return Empty; 719991" />
<Node Id="10346:[11369..11508).14" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719992" />
<Node Id="10346:[11369..11508).17" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719993" />
<Node Id="10346:[11369..11508).18" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719994" />
<Node Id="10346:[11369..11508).19" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 719995" />
<Node Id="10312:[7718..7727).2" Label="param LookupMembersInternal(int arity) 719996" />
<Node Id="10312:[7793..7814).2" Label="param LookupMembersInternal(Binder originalBinder) 719997" />
<Node Id="10312:[7816..7829).2" Label="param LookupMembersInternal(bool diagnose) 719998" />
<Node Id="10312:[7903..7936).5" Label="Debug.Assert(options.AreValid()); 719999" />
<Node Id="10312:[7916..7934).2" Label="options.AreValid() 720000" />
<Node Id="10353:[4698..4724).3" Label="param AreValid(this LookupOptions options) 720001" />
<Node Id="10353:[4750..4847).5" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 720002" />
<Node Id="10353:[4863..5000).9" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 720003" />
<Node Id="10353:[4863..5000).10" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 720004" />
<Node Id="10353:[5079..5183).5" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 720005" />
<Node Id="10353:[5197..5323).7" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 720006" />
<Node Id="10353:[5485..5759).13" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 720007" />
<Node Id="10353:[5485..5759).14" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 720008" />
<Node Id="10353:[5485..5759).15" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 720009" />
<Node Id="10353:[5775..5979).9" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 720010" />
<Node Id="10353:[5775..5979).11" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 720011" />
<Node Id="10353:[5995..6029).7" Label="return OnlyOneBitSet(onlyOptions); 720012" />
<Node Id="10353:[6002..6028).3" Label="OnlyOneBitSet(onlyOptions) 720013" />
<Node Id="10353:[6343..6358).3" Label="param OnlyOneBitSet(LookupOptions o) 720014" />
<Node Id="10353:[6384..6410).13" Label="return (o & (o - 1)) == 0; 720015" />
<Node Id="10353:[6384..6410).14" Label="return (o & (o - 1)) == 0; 720016" />
<Node Id="10312:[7952..7977).5" Label="Debug.Assert(arity $= 0); 720017" />
<Node Id="10312:[7952..7977).6" Label="Debug.Assert(arity $= 0); 720018" />
<Node Id="10312:[8049..8181).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 720019" />
<Node Id="10312:[8049..8181).4" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 720020" />
<Node Id="10312:[8049..8181).6" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 720021" />
<Node Id="10312:[8049..8181).7" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 720022" />
<Node Id="10312:[8049..8181).8" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 720023" />
<Node Id="10312:[8049..8180).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 720024" />
<Node Id="10312:[18976..18995).1" Label="param LookupMembersInNamespace(LookupResult result) 720025" />
<Node Id="10312:[18997..19015).1" Label="param LookupMembersInNamespace(NamespaceSymbol ns) 720026" />
<Node Id="10312:[19017..19028).1" Label="param LookupMembersInNamespace(string name) 720027" />
<Node Id="10312:[19030..19039).1" Label="param LookupMembersInNamespace(int arity) 720028" />
<Node Id="10312:[19041..19062).1" Label="param LookupMembersInNamespace(LookupOptions options) 720029" />
<Node Id="10312:[19064..19085).1" Label="param LookupMembersInNamespace(Binder originalBinder) 720030" />
<Node Id="10312:[19087..19100).1" Label="param LookupMembersInNamespace(bool diagnose) 720031" />
<Node Id="10312:[19102..19148).1" Label="param LookupMembersInNamespace(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720032" />
<Node Id="10312:[19174..19243).1" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 720033" />
<Node Id="10312:[19174..19243).2" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 720034" />
<Node Id="10312:[19174..19243).3" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 720035" />
<Node Id="10312:[19174..19243).4" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 720036" />
<Node Id="10312:[19188..19242).1" Label="GetCandidateMembers(ns, name, options, originalBinder) 720037" />
<Node Id="10312:[61540..61570).3" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 720038" />
<Node Id="10312:[61572..61583).3" Label="param GetCandidateMembers(string name) 720039" />
<Node Id="10312:[61585..61606).3" Label="param GetCandidateMembers(LookupOptions options) 720040" />
<Node Id="10312:[61608..61629).3" Label="param GetCandidateMembers(Binder originalBinder) 720041" />
<Node Id="10312:[61655..62327).14" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 720042" />
<Node Id="10312:[61874..62327).1" Label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 720043" />
<Node Id="10312:[62098..62327).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 720044" />
<Node Id="10312:[62098..62327).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 720045" />
<Node Id="10312:[62279..62312).1" Label="return nsOrType.GetMembers(name); 720046" />
<Node Id="10312:[19259..19531).1" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 720047" />
<Node Id="10312:[19326..19460).1" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 720048" />
<Node Id="10312:[19326..19460).2" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 720049" />
<Node Id="10312:[19326..19460).3" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 720050" />
<Node Id="10312:[19326..19460).6" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 720051" />
<Node Id="10312:[19326..19460).7" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 720052" />
<Node Id="10312:[19366..19459).1" Label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 720053" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 720054" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 720055" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 720056" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 720057" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 720058" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720059" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 720060" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 720061" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 720062" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 720063" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 720064" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 720065" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720066" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720067" />
<Node Id="10312:[64121..69285).3" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720068" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720069" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720070" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720071" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720072" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720073" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 720074" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 720075" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 720076" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 720077" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 720078" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 720079" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 720080" />
<Node Id="10312:[83750..83991).1" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 720081" />
<Node Id="10312:[83750..83991).2" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 720082" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 720083" />
<Node Id="10312:[84080..84093).1" Label="return false; 720084" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720085" />
<Node Id="10312:[64537..64543).1" Label="InCref 720086" />
<Node Id="10306:[3196..3249).3" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 720087" />
<Node Id="10306:[3202..3247).9" Label="return this.Flags.Includes(BinderFlags.Cref); 720088" />
<Node Id="10306:[3202..3247).10" Label="return this.Flags.Includes(BinderFlags.Cref); 720089" />
<Node Id="10306:[3209..3246).3" Label="this.Flags.Includes(BinderFlags.Cref) 720090" />
<Node Id="10298:[471..492).16" Label="param Includes(this BinderFlags self) 720091" />
<Node Id="10298:[494..511).16" Label="param Includes(BinderFlags other) 720092" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720093" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720094" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720095" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720096" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720097" />
<Node Id="10312:[65730..65736).1" Label="InCref 720098" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720099" />
<Node Id="10312:[66182..66188).1" Label="InCref 720100" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720101" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720102" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720103" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720104" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 720105" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 720106" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 720107" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 720108" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 720109" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 720110" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 720111" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720112" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720113" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720114" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 720115" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 720116" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 720117" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 720118" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720119" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 720120" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 720121" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720122" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720123" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 720124" />
<Node Id="10298:[471..492).19" Label="param Includes(this BinderFlags self) 720125" />
<Node Id="10298:[494..511).19" Label="param Includes(BinderFlags other) 720126" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720127" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720128" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720129" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720130" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720131" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 720132" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 720133" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 720134" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 720135" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720136" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 720137" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 720138" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720139" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720140" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720141" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720142" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720143" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 720144" />
<Node Id="10346:[8019..8032).1" Label="param IsAccessibleHelper(Symbol symbol) 720145" />
<Node Id="10346:[8034..8062).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 720146" />
<Node Id="10346:[8064..8095).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 720147" />
<Node Id="10346:[8097..8143).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720148" />
<Node Id="10346:[8145..8184).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 720149" />
<Node Id="10346:[7977..8737).1" Label="param IsAccessibleHelper(this) 720150" />
<Node Id="10346:[8210..8251).1" Label="var type = _container as NamedTypeSymbol; 720151" />
<Node Id="10346:[8265..8726).1" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 720152" />
<Node Id="10346:[8265..8726).2" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 720153" />
<Node Id="10346:[8323..8450).1" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 720154" />
<Node Id="10346:[8323..8450).2" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 720155" />
<Node Id="10346:[8323..8450).3" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 720156" />
<Node Id="10346:[8323..8450).4" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 720157" />
<Node Id="10346:[8323..8450).5" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 720158" />
<Node Id="10346:[8323..8450).6" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 720159" />
<Node Id="10346:[8330..8449).1" Label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 720160" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 720161" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 720162" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 720163" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 720164" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 720165" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 720166" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 720167" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720168" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720169" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 720170" />
<Node Id="10298:[471..492).20" Label="param Includes(this BinderFlags self) 720171" />
<Node Id="10298:[494..511).20" Label="param Includes(BinderFlags other) 720172" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720173" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720174" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720175" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720176" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720177" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 720178" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 720179" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 720180" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 720181" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 720182" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 720183" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720184" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 720185" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720186" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720187" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720188" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720189" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720190" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720191" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 720192" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 720193" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 720194" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 720195" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 720196" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 720197" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 720198" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720199" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 720200" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 720201" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 720202" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 720203" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 720204" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 720205" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 720206" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 720207" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 720208" />
<Node Id="10060:[8992..9004).1" Label="return true; 720209" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720210" />
<Node Id="10312:[67587..67593).1" Label="InCref 720211" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720212" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720213" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720214" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720215" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720216" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720217" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720218" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720219" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720220" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720221" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 720222" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 720223" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 720224" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 720225" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 720226" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 720227" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 720228" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 720229" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 720230" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 720231" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 720232" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 720233" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 720234" />
<Node Id="10368:[1226..1236).1" Label="this.Error 720235" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 720236" />
<Node Id="10312:[19478..19516).1" Label="result.MergeEqual(resultOfThisMember); 720237" />
<Node Id="10312:[19478..19515).1" Label="result.MergeEqual(resultOfThisMember) 720238" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 720239" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 720240" />
<Node Id="10354:[10272..10276).1" Label="Kind 720241" />
<Node Id="10354:[4058..4122).16" Label="get
            {
                return _kind;
            } 720242" />
<Node Id="10354:[4094..4107).16" Label="return _kind; 720243" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 720244" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 720245" />
<Node Id="10354:[10404..10408).1" Label="Kind 720246" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 720247" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 720248" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 720249" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 720250" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 720251" />
<Node Id="10354:[8181..8186).1" Label="_kind 720252" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 720253" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 720254" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 720255" />
<Node Id="10354:[8292..8298).1" Label="_error 720256" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 720257" />
<Node Id="10312:[19478..19516).2" Label="result.MergeEqual(resultOfThisMember); 720258" />
<Node Id="10312:[19259..19531).4" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 720259" />
<Node Id="10346:[11532..11552).2" Label="result.IsMultiViable 720260" />
<Node Id="10354:[4094..4107).18" Label="return _kind; 720261" />
<Node Id="10346:[11528..12231).3" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 720262" />
<Node Id="10346:[11665..12181).1" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 720263" />
<Node Id="10346:[11665..12181).2" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 720264" />
<Node Id="10346:[11665..12181).3" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 720265" />
<Node Id="10346:[11710..11746).1" Label="originalBinder.IsSemanticModelBinder 720266" />
<Node Id="10286:[2155..2260).3" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 720267" />
<Node Id="10286:[2191..2245).9" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 720268" />
<Node Id="10286:[2191..2245).10" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 720269" />
<Node Id="10286:[2198..2244).3" Label="this.Flags.Includes(BinderFlags.SemanticModel) 720270" />
<Node Id="10298:[471..492).22" Label="param Includes(this BinderFlags self) 720271" />
<Node Id="10298:[494..511).22" Label="param Includes(BinderFlags other) 720272" />
<Node Id="10346:[11665..12181).4" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 720273" />
<Node Id="10346:[11683..11747).1" Label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 720274" />
<Node Id="10345:[28212..28223).1" Label="param IsUsingAlias(string name) 720275" />
<Node Id="10345:[28225..28251).1" Label="param IsUsingAlias(bool callerIsSemanticModel) 720276" />
<Node Id="10345:[28185..28951).1" Label="param IsUsingAlias(this) 720277" />
<Node Id="10345:[28277..28305).1" Label="AliasAndUsingDirective node; 720278" />
<Node Id="10345:[28300..28304).1" Label="node 720279" />
<Node Id="10345:[28319..28911).1" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 720280" />
<Node Id="10345:[28319..28911).2" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 720281" />
<Node Id="10345:[28319..28911).3" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 720282" />
<Node Id="10345:[28927..28940).1" Label="return false; 720283" />
<Node Id="10346:[11665..12181).6" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 720284" />
<Node Id="10346:[11665..12181).7" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 720285" />
<Node Id="10346:[12205..12212).1" Label="return; 720286" />
<Node Id="10312:[4685..4699).3" Label="result.IsClear 720287" />
<Node Id="10354:[3684..3818).8" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 720288" />
<Node Id="10354:[3720..3803).57" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 720289" />
<Node Id="10312:[4680..4787).5" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 720290" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 720291" />
<Node Id="10312:[4826..5058).11" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 720292" />
<Node Id="10312:[4826..5058).12" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 720293" />
<Node Id="10312:[5087..5101).1" Label="return binder; 720294" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 720295" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 720296" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 720297" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 720298" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 720299" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 720300" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 720301" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 720302" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 720303" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 720304" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 720305" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 720306" />
<Node Id="10354:[4919..5009).14" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 720307" />
<Node Id="10354:[4962..4966).14" Label="Kind 720308" />
<Node Id="10354:[4058..4122).20" Label="get
            {
                return _kind;
            } 720309" />
<Node Id="10354:[4094..4107).20" Label="return _kind; 720310" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 720311" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 720312" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 720313" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 720314" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 720315" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 720316" />
<Node Id="10319:[41696..41709).1" Label="return false; 720317" />
<Node Id="10319:[43799..44676).4" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 720318" />
<Node Id="10319:[43799..44676).5" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 720319" />
<Node Id="10319:[43907..44661).1" Label="if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                } 720320" />
<Node Id="10319:[43907..44661).2" Label="if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                } 720321" />
<Node Id="10319:[44578..44642).1" Label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 720322" />
<Node Id="10319:[44578..44642).2" Label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 720323" />
<Node Id="10319:[44594..44641).1" Label="BindNativeIntegerSymbolIfAny(node, diagnostics) 720324" />
<Node Id="10319:[45850..45875).1" Label="param BindNativeIntegerSymbolIfAny(IdentifierNameSyntax node) 720325" />
<Node Id="10319:[45877..45902).1" Label="param BindNativeIntegerSymbolIfAny(DiagnosticBag diagnostics) 720326" />
<Node Id="10319:[45797..47405).1" Label="param BindNativeIntegerSymbolIfAny(this) 720327" />
<Node Id="10319:[45928..45952).1" Label="SpecialType specialType; 720328" />
<Node Id="10319:[45966..46327).1" Label="switch (node.Identifier.Text)
            {
                case 'nint':
                    specialType = SpecialType.System_IntPtr;
                    break;
                case 'nuint':
                    specialType = SpecialType.System_UIntPtr;
                    break;
                default:
                    return null;
            } 720329" />
<Node Id="10319:[46300..46312).1" Label="return null; 720330" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 720331" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 720332" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720333" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720334" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720335" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720336" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720337" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720338" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720339" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720340" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720341" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 720342" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 720343" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 720344" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 720345" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 720346" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 720347" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 720348" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 720349" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 720350" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 720351" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 720352" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720353" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720354" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720355" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720356" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720357" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720358" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720359" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720360" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720361" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 720362" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720363" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720364" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720365" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720366" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720367" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720368" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720369" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720370" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720371" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 720372" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 720373" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 720374" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 720375" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 720376" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 720377" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 720378" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 720379" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 720380" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 720381" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 720382" />
<Node Id="10354:[4919..5009).15" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 720383" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 720384" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 720385" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 720386" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 720387" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 720388" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 720389" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 720390" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 720391" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 720392" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 720393" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 720394" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 720395" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 720396" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 720397" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 720398" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 720399" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 720400" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 720401" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 720402" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 720403" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 720404" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 720405" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 720406" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 720407" />
<Node Id="10354:[11383..11549).2" Label="param Free(this) 720408" />
<Node Id="10354:[11428..11440).2" Label="this.Clear() 720409" />
<Node Id="10354:[3841..3991).4" Label="param Clear(this) 720410" />
<Node Id="10354:[3887..3892).4" Label="_kind 720411" />
<Node Id="10354:[3932..3952).4" Label="_symbolList.Clear(); 720412" />
<Node Id="10354:[3966..3980).4" Label="_error = null; 720413" />
<Node Id="10354:[3966..3972).4" Label="_error 720414" />
<Node Id="10354:[11428..11441).2" Label="this.Clear(); 720415" />
<Node Id="10354:[11455..11538).4" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 720416" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 720417" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 720418" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 720419" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 720420" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 720421" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 720422" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 720423" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 720424" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 720425" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 720426" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 720427" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 720428" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 720429" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 720430" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 720431" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 720432" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 720433" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 720434" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 720435" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 720436" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 720437" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 720438" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 720439" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 720440" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 720441" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 720442" />
<Node Id="10286:[11085..11098).1" Label="return false; 720443" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 720444" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 720445" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 720446" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 720447" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 720448" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 720449" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 720450" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 720451" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 720452" />
<Node Id="10287:[2546..2558).1" Label="type is null 720453" />
<Node Id="10287:[2539..2781).3" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 720454" />
<Node Id="10287:[2582..2656).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 720455" />
<Node Id="10287:[1144..1157).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 720456" />
<Node Id="10287:[1159..1181).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 720457" />
<Node Id="10287:[1092..1409).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 720458" />
<Node Id="10287:[1215..1253).1" Label="Debug.Assert(!(symbol is TypeSymbol)); 720459" />
<Node Id="10287:[1271..1302).1" Label="_typeWithAnnotations = default; 720460" />
<Node Id="10287:[1271..1291).1" Label="_typeWithAnnotations 720461" />
<Node Id="10287:[1320..1327).1" Label="_symbol 720462" />
<Node Id="10287:[1355..1373).1" Label="_isNullableEnabled 720463" />
<Node Id="10319:[18724..18740).1" Label="result.IsDefault 720464" />
<Node Id="10287:[1857..1908).1" Label="=$ !_typeWithAnnotations.HasType && _symbol is null 720465" />
<Node Id="10287:[1893..1908).1" Label="_symbol is null 720466" />
<Node Id="10287:[1860..1908).1" Label="!_typeWithAnnotations.HasType && _symbol is null 720467" />
<Node Id="10319:[18710..18742).1" Label="Debug.Assert(!result.IsDefault); 720468" />
<Node Id="10319:[18758..18826).1" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 720469" />
<Node Id="10319:[18758..18826).2" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 720470" />
<Node Id="10319:[18758..18826).3" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 720471" />
<Node Id="10319:[18758..18826).4" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 720472" />
<Node Id="10319:[18765..18825).1" Label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 720473" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 720474" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 720475" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 720476" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 720477" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 720478" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 720479" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 720480" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 720481" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 720482" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 720483" />
<Node Id="10319:[71457..71582).1" Label="BindNamespaceOrTypeSymbol(leftName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics: false).NamespaceOrTypeSymbol 720484" />
<Node Id="10287:[1784..1818).1" Label="=$ Symbol as NamespaceOrTypeSymbol 720485" />
<Node Id="10287:[1787..1793).1" Label="Symbol 720486" />
<Node Id="10287:[1535..1573).1" Label="=$ _symbol ?? TypeWithAnnotations.Type 720487" />
<Node Id="10287:[1538..1573).1" Label="_symbol ?? TypeWithAnnotations.Type 720488" />
<Node Id="10287:[1787..1818).1" Label="Symbol as NamespaceOrTypeSymbol 720489" />
<Node Id="10319:[71597..71678).1" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 720490" />
<Node Id="10319:[71597..71678).2" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 720491" />
<Node Id="10319:[71597..71678).3" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 720492" />
<Node Id="10319:[71597..71678).4" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false); 720493" />
<Node Id="10319:[71597..71677).1" Label="ReportDiagnosticsIfObsolete(diagnostics, left, leftName, hasBaseReceiver: false) 720494" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 720495" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 720496" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 720497" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 720498" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 720499" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720500" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720501" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720502" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720503" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 720504" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 720505" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 720506" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 720507" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 720508" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 720509" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 720510" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720511" />
<Node Id="10319:[71694..71825).1" Label="bool isLeftUnboundGenericType = left.Kind == SymbolKind.NamedType &&
                ((NamedTypeSymbol)left).IsUnboundGenericType; 720512" />
<Node Id="10319:[71841..72158).1" Label="if (isLeftUnboundGenericType)
            {
                // If left name bound to an unbound generic type,
                // we want to perform right name lookup within
                // left's original named type definition.
                left = ((NamedTypeSymbol)left).OriginalDefinition;
            } 720513" />
<Node Id="10319:[72286..72420).1" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 720514" />
<Node Id="10319:[72286..72420).2" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 720515" />
<Node Id="10319:[72286..72420).3" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 720516" />
<Node Id="10319:[72286..72420).4" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 720517" />
<Node Id="10319:[72286..72420).5" Label="var right = this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left); 720518" />
<Node Id="10319:[72298..72419).1" Label="this.BindSimpleNamespaceOrTypeOrAliasSymbol(rightName, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, left) 720519" />
<Node Id="10319:[39524..39547).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(SimpleNameSyntax syntax) 720520" />
<Node Id="10319:[39562..39587).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 720521" />
<Node Id="10319:[39602..39641).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 720522" />
<Node Id="10319:[39656..39687).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 720523" />
<Node Id="10319:[39702..39743).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 720524" />
<Node Id="10319:[39419..41043).1" Label="param BindSimpleNamespaceOrTypeOrAliasSymbol(this) 720525" />
<Node Id="10319:[40338..41032).1" Label="switch (syntax.Kind())
            {
                default:
                    return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(qualifierOpt ?? this.Compilation.Assembly.GlobalNamespace, string.Empty, arity: 0, errorInfo: null));

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt);
            } 720526" />
<Node Id="10319:[40659..40820).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt); 720527" />
<Node Id="10319:[40659..40820).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt); 720528" />
<Node Id="10319:[40659..40820).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt); 720529" />
<Node Id="10319:[40659..40820).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt); 720530" />
<Node Id="10319:[40659..40820).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt); 720531" />
<Node Id="10319:[40666..40819).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt) 720532" />
<Node Id="10319:[41849..41874).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 720533" />
<Node Id="10319:[41889..41914).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 720534" />
<Node Id="10319:[41929..41968).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 720535" />
<Node Id="10319:[41983..42014).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 720536" />
<Node Id="10319:[42029..42063).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 720537" />
<Node Id="10319:[41732..45579).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 720538" />
<Node Id="10319:[42478..42805).4" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 720539" />
<Node Id="10319:[42821..42938).9" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 720540" />
<Node Id="10319:[42821..42938).10" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 720541" />
<Node Id="10319:[42821..42938).11" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 720542" />
<Node Id="10319:[42821..42938).12" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 720543" />
<Node Id="10319:[42821..42938).14" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 720544" />
<Node Id="10319:[42839..42937).2" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 720545" />
<Node Id="10319:[63849..63870).2" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 720546" />
<Node Id="10319:[63885..63919).2" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 720547" />
<Node Id="10319:[63934..63945).2" Label="param CreateErrorIfLookupOnTypeParameter(string name) 720548" />
<Node Id="10319:[63960..63969).2" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 720549" />
<Node Id="10319:[63984..64009).2" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 720550" />
<Node Id="10319:[63768..64484).2" Label="param CreateErrorIfLookupOnTypeParameter(this) 720551" />
<Node Id="10319:[64035..64445).5" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 720552" />
<Node Id="10319:[64035..64445).6" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 720553" />
<Node Id="10319:[64035..64445).7" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 720554" />
<Node Id="10319:[64461..64473).3" Label="return null; 720555" />
<Node Id="10319:[42821..42938).15" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 720556" />
<Node Id="10319:[42952..43079).4" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 720557" />
<Node Id="10319:[42952..43079).5" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 720558" />
<Node Id="10354:[11312..11328).3" Label="instance.IsClear 720559" />
<Node Id="10354:[3684..3818).9" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 720560" />
<Node Id="10354:[3720..3803).61" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 720561" />
<Node Id="10354:[3720..3803).62" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 720562" />
<Node Id="10354:[3720..3803).63" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 720563" />
<Node Id="10354:[11299..11330).7" Label="Debug.Assert(instance.IsClear); 720564" />
<Node Id="10319:[50330..50355).2" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 720565" />
<Node Id="10312:[1108..1117).2" Label="param LookupSymbolsSimpleName(int arity) 720566" />
<Node Id="10312:[1222..1235).2" Label="param LookupSymbolsSimpleName(bool diagnose) 720567" />
<Node Id="10312:[1585..1724).13" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 720568" />
<Node Id="10312:[1585..1724).16" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 720569" />
<Node Id="10312:[5830..5839).2" Label="param LookupSymbolsOrMembersInternal(int arity) 720570" />
<Node Id="10312:[5944..5957).2" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 720571" />
<Node Id="10312:[5663..6444).2" Label="param LookupSymbolsOrMembersInternal(this) 720572" />
<Node Id="10312:[6287..6418).1" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 720573" />
<Node Id="10312:[6287..6418).2" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 720574" />
<Node Id="10312:[6287..6418).4" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 720575" />
<Node Id="10312:[6287..6418).5" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 720576" />
<Node Id="10312:[6287..6418).7" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 720577" />
<Node Id="10312:[6287..6418).8" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 720578" />
<Node Id="10312:[6287..6417).1" Label="this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 720579" />
<Node Id="10312:[7652..7671).3" Label="param LookupMembersInternal(LookupResult result) 720580" />
<Node Id="10312:[7673..7703).3" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 720581" />
<Node Id="10312:[7705..7716).3" Label="param LookupMembersInternal(string name) 720582" />
<Node Id="10312:[7718..7727).3" Label="param LookupMembersInternal(int arity) 720583" />
<Node Id="10312:[7729..7768).3" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 720584" />
<Node Id="10312:[7770..7791).3" Label="param LookupMembersInternal(LookupOptions options) 720585" />
<Node Id="10312:[7793..7814).3" Label="param LookupMembersInternal(Binder originalBinder) 720586" />
<Node Id="10312:[7816..7829).3" Label="param LookupMembersInternal(bool diagnose) 720587" />
<Node Id="10312:[7831..7877).3" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720588" />
<Node Id="10312:[7615..8420).3" Label="param LookupMembersInternal(this) 720589" />
<Node Id="10312:[7903..7936).9" Label="Debug.Assert(options.AreValid()); 720590" />
<Node Id="10312:[7916..7934).3" Label="options.AreValid() 720591" />
<Node Id="10353:[4698..4724).4" Label="param AreValid(this LookupOptions options) 720592" />
<Node Id="10353:[4750..4847).7" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 720593" />
<Node Id="10353:[4863..5000).13" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 720594" />
<Node Id="10353:[4863..5000).14" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 720595" />
<Node Id="10353:[5079..5183).7" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 720596" />
<Node Id="10353:[5197..5323).10" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 720597" />
<Node Id="10353:[5485..5759).19" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 720598" />
<Node Id="10353:[5485..5759).20" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 720599" />
<Node Id="10353:[5485..5759).21" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 720600" />
<Node Id="10353:[5775..5979).13" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 720601" />
<Node Id="10353:[5775..5979).15" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 720602" />
<Node Id="10353:[5995..6029).10" Label="return OnlyOneBitSet(onlyOptions); 720603" />
<Node Id="10353:[6002..6028).4" Label="OnlyOneBitSet(onlyOptions) 720604" />
<Node Id="10353:[6343..6358).4" Label="param OnlyOneBitSet(LookupOptions o) 720605" />
<Node Id="10353:[6384..6410).19" Label="return (o & (o - 1)) == 0; 720606" />
<Node Id="10353:[6384..6410).20" Label="return (o & (o - 1)) == 0; 720607" />
<Node Id="10312:[7952..7977).9" Label="Debug.Assert(arity $= 0); 720608" />
<Node Id="10312:[7952..7977).10" Label="Debug.Assert(arity $= 0); 720609" />
<Node Id="10312:[19030..19039).2" Label="param LookupMembersInNamespace(int arity) 720610" />
<Node Id="10312:[19087..19100).2" Label="param LookupMembersInNamespace(bool diagnose) 720611" />
<Node Id="10312:[61608..61629).4" Label="param GetCandidateMembers(Binder originalBinder) 720612" />
<Node Id="10312:[63439..63448).2" Label="param CheckViability(int arity) 720613" />
<Node Id="10312:[63473..63501).2" Label="param CheckViability(TypeSymbol accessThroughType) 720614" />
<Node Id="10312:[63503..63516).2" Label="param CheckViability(bool diagnose) 720615" />
<Node Id="10312:[63566..63612).2" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 720616" />
<Node Id="10312:[63638..63668).2" Label="bool inaccessibleViaQualifier; 720617" />
<Node Id="10312:[63682..63706).2" Label="DiagnosticInfo diagInfo; 720618" />
<Node Id="10312:[64353..69285).9" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720619" />
<Node Id="10312:[64353..69285).10" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720620" />
<Node Id="10312:[64353..69285).12" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720621" />
<Node Id="10312:[80978..80991).2" Label="param WrongArity(Symbol symbol) 720622" />
<Node Id="10312:[80993..81002).2" Label="param WrongArity(int arity) 720623" />
<Node Id="10312:[81004..81017).2" Label="param WrongArity(bool diagnose) 720624" />
<Node Id="10312:[81019..81040).2" Label="param WrongArity(LookupOptions options) 720625" />
<Node Id="10312:[81042..81069).2" Label="param WrongArity(out DiagnosticInfo diagInfo) 720626" />
<Node Id="10312:[81095..84034).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 720627" />
<Node Id="10312:[81196..82523).1" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 720628" />
<Node Id="10312:[81196..82523).2" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 720629" />
<Node Id="10312:[81196..82523).3" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 720630" />
<Node Id="10312:[81196..82523).6" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 720631" />
<Node Id="10312:[81319..81371).1" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 720632" />
<Node Id="10312:[81495..81570).1" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 720633" />
<Node Id="10312:[81495..81570).2" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 720634" />
<Node Id="10312:[81596..82500).1" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 720635" />
<Node Id="10312:[81731..82431).1" Label="if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            } 720636" />
<Node Id="10312:[82275..82283).1" Label="diagnose 720637" />
<Node Id="10312:[82264..82400).1" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 720638" />
<Node Id="10312:[82264..82400).2" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 720639" />
<Node Id="10312:[82286..82392).1" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 720640" />
<Node Id="10312:[82286..82392).2" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 720641" />
<Node Id="10312:[82286..82392).3" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 720642" />
<Node Id="10312:[82461..82473).1" Label="return true; 720643" />
<Node Id="10312:[64449..64498).1" Label="return LookupResult.WrongArity(symbol, diagInfo); 720644" />
<Node Id="10312:[64449..64498).2" Label="return LookupResult.WrongArity(symbol, diagInfo); 720645" />
<Node Id="10312:[64456..64497).1" Label="LookupResult.WrongArity(symbol, diagInfo) 720646" />
<Node Id="10354:[5577..5590).1" Label="param WrongArity(Symbol symbol) 720647" />
<Node Id="10354:[5592..5612).1" Label="param WrongArity(DiagnosticInfo error) 720648" />
<Node Id="10354:[5638..5712).1" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 720649" />
<Node Id="10354:[5638..5712).2" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 720650" />
<Node Id="10354:[5638..5712).3" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 720651" />
<Node Id="10354:[5638..5712).4" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 720652" />
<Node Id="10354:[5645..5711).1" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 720653" />
<Node Id="10368:[1076..1097).2" Label="param SingleLookupResult(LookupResultKind kind) 720654" />
<Node Id="10368:[1099..1112).2" Label="param SingleLookupResult(Symbol symbol) 720655" />
<Node Id="10368:[1114..1134).2" Label="param SingleLookupResult(DiagnosticInfo error) 720656" />
<Node Id="10368:[1048..1256).2" Label="param SingleLookupResult(this) 720657" />
<Node Id="10312:[64449..64498).3" Label="return LookupResult.WrongArity(symbol, diagInfo); 720658" />
<Node Id="10354:[10268..10665).5" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 720659" />
<Node Id="10354:[8248..8278).3" Label="_symbolList.Add(other.Symbol); 720660" />
<Node Id="10312:[19259..19531).9" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 720661" />
<Node Id="10312:[63473..63501).3" Label="param CheckViability(TypeSymbol accessThroughType) 720662" />
<Node Id="10312:[63566..63612).3" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 720663" />
<Node Id="10312:[63638..63668).3" Label="bool inaccessibleViaQualifier; 720664" />
<Node Id="10312:[63682..63706).3" Label="DiagnosticInfo diagInfo; 720665" />
<Node Id="10312:[81042..81069).3" Label="param WrongArity(out DiagnosticInfo diagInfo) 720666" />
<Node Id="10312:[81495..81570).6" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 720667" />
<Node Id="10312:[81628..81659).1" Label="options.IsAttributeTypeLookup() 720668" />
<Node Id="10312:[84050..84066).3" Label="diagInfo = null; 720669" />
<Node Id="10312:[66177..69285).16" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720670" />
<Node Id="10312:[66291..66342).2" Label="RefineAccessThroughType(options, accessThroughType) 720671" />
<Node Id="10312:[75301..75322).2" Label="param RefineAccessThroughType(LookupOptions options) 720672" />
<Node Id="10312:[75324..75352).2" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 720673" />
<Node Id="10312:[75735..75866).6" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 720674" />
<Node Id="10312:[75735..75866).7" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 720675" />
<Node Id="10312:[75742..75804).2" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 720676" />
<Node Id="10312:[75735..75866).9" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 720677" />
<Node Id="10312:[66177..69285).19" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720678" />
<Node Id="10312:[66177..69285).21" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 720679" />
<Node Id="10312:[77543..77571).2" Label="param IsAccessible(TypeSymbol accessThroughType) 720680" />
<Node Id="10312:[77573..77604).2" Label="param IsAccessible(out bool failedThroughTypeCheck) 720681" />
<Node Id="10312:[77654..77700).2" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 720682" />
<Node Id="10312:[77726..77892).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720683" />
<Node Id="10312:[77726..77892).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720684" />
<Node Id="10312:[77730..77782).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 720685" />
<Node Id="10298:[471..492).26" Label="param Includes(this BinderFlags self) 720686" />
<Node Id="10298:[494..511).26" Label="param Includes(BinderFlags other) 720687" />
<Node Id="10312:[78402..78430).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 720688" />
<Node Id="10312:[78432..78463).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 720689" />
<Node Id="10312:[78513..78552).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 720690" />
<Node Id="10346:[8034..8062).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 720691" />
<Node Id="10346:[8064..8095).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 720692" />
<Node Id="10346:[8145..8184).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 720693" />
<Node Id="10286:[30098..30120).2" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 720694" />
<Node Id="10286:[30135..30160).2" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 720695" />
<Node Id="10286:[30175..30206).2" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 720696" />
<Node Id="10286:[30283..30330).2" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 720697" />
<Node Id="10286:[30012..30691).2" Label="param IsSymbolAccessibleConditional(this) 720698" />
<Node Id="10286:[30356..30522).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720699" />
<Node Id="10286:[30356..30522).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 720700" />
<Node Id="10286:[30360..30412).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 720701" />
<Node Id="10298:[471..492).27" Label="param Includes(this BinderFlags self) 720702" />
<Node Id="10298:[494..511).27" Label="param Includes(BinderFlags other) 720703" />
<Node Id="10060:[2136..2158).2" Label="param IsSymbolAccessible(NamedTypeSymbol within) 720704" />
<Node Id="10060:[2173..2198).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 720705" />
<Node Id="10060:[2213..2244).2" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 720706" />
<Node Id="10060:[2320..2366).2" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 720707" />
<Node Id="10060:[5621..5634).2" Label="param IsSymbolAccessibleCore(Symbol within) 720708" />
<Node Id="10060:[5691..5716).2" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 720709" />
<Node Id="10060:[5731..5762).2" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 720710" />
<Node Id="10060:[5777..5806).2" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 720711" />
<Node Id="10060:[5882..5928).2" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 720712" />
<Node Id="10060:[5954..5991).5" Label="Debug.Assert((object)symbol != null); 720713" />
<Node Id="10060:[6005..6042).5" Label="Debug.Assert((object)within != null); 720714" />
<Node Id="10060:[6005..6042).6" Label="Debug.Assert((object)within != null); 720715" />
<Node Id="10060:[6056..6090).3" Label="Debug.Assert(within.IsDefinition); 720716" />
<Node Id="10060:[6104..6172).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 720717" />
<Node Id="10060:[6188..6219).3" Label="failedThroughTypeCheck = false; 720718" />
<Node Id="10060:[6814..6920).1" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 720719" />
<Node Id="10060:[6814..6920).2" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 720720" />
<Node Id="10060:[6814..6920).3" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 720721" />
<Node Id="10060:[6814..6920).4" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 720722" />
<Node Id="10060:[6821..6919).1" Label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 720723" />
<Node Id="10060:[10180..10200).1" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 720724" />
<Node Id="10060:[10202..10215).1" Label="param IsNamedTypeAccessible(Symbol within) 720725" />
<Node Id="10060:[10217..10263).1" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 720726" />
<Node Id="10060:[10265..10311).1" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 720727" />
<Node Id="10060:[10337..10405).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 720728" />
<Node Id="10060:[10419..10454).1" Label="Debug.Assert((object)type != null); 720729" />
<Node Id="10060:[10419..10454).2" Label="Debug.Assert((object)type != null); 720730" />
<Node Id="10060:[10470..10516).1" Label="var compilation = within.DeclaringCompilation; 720731" />
<Node Id="10060:[10532..10544).1" Label="bool unused; 720732" />
<Node Id="10060:[10558..11295).1" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 720733" />
<Node Id="10060:[11311..11352).1" Label="var containingType = type.ContainingType; 720734" />
<Node Id="10060:[11366..11675).1" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 720735" />
<Node Id="10060:[11366..11675).2" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 720736" />
<Node Id="10060:[11373..11403).1" Label="(object)containingType == null 720737" />
<Node Id="10060:[11366..11675).5" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 720738" />
<Node Id="10060:[11423..11509).1" Label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 720739" />
<Node Id="10060:[11990..12013).1" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 720740" />
<Node Id="10060:[12028..12063).1" Label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 720741" />
<Node Id="10060:[12078..12091).1" Label="param IsNonNestedTypeAccessible(Symbol within) 720742" />
<Node Id="10060:[12117..12185).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 720743" />
<Node Id="10060:[12199..12238).1" Label="Debug.Assert((object)assembly != null); 720744" />
<Node Id="10060:[12199..12238).2" Label="Debug.Assert((object)assembly != null); 720745" />
<Node Id="10060:[12254..13527).1" Label="switch (declaredAccessibility)
            {
                case Accessibility.NotApplicable:
                case Accessibility.Public:
                    // Public symbols are always accessible from any context
                    return true;

                case Accessibility.Private:
                case Accessibility.Protected:
                case Accessibility.ProtectedAndInternal:
                    // Shouldn't happen except in error cases.
                    return false;

                case Accessibility.Internal:
                case Accessibility.ProtectedOrInternal:

                    // within is typically a type
                    var withinType = within as NamedTypeSymbol;
                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;

                    // An internal type is accessible if we're in the same assembly or we have
                    // friend access to the assembly it was defined in.
                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);

                default:
                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);
            } 720746" />
<Node Id="10060:[12494..12506).1" Label="return true; 720747" />
<Node Id="10312:[19326..19460).40" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 720748" />
<Node Id="10312:[63473..63501).4" Label="param CheckViability(TypeSymbol accessThroughType) 720749" />
<Node Id="10312:[63566..63612).4" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 720750" />
<Node Id="10312:[63638..63668).4" Label="bool inaccessibleViaQualifier; 720751" />
<Node Id="10312:[81042..81069).4" Label="param WrongArity(out DiagnosticInfo diagInfo) 720752" />
<Node Id="10312:[81495..81570).11" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 720753" />
<Node Id="10319:[43504..43546).8" Label="diagnostics.Add(node, useSiteDiagnostics); 720754" />
<Node Id="10319:[43562..43590).3" Label="Symbol bindingResult = null; 720755" />
<Node Id="10319:[44751..44765).2" Label="bool wasError; 720756" />
<Node Id="10319:[44785..44930).14" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720757" />
<Node Id="10319:[44785..44930).18" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720758" />
<Node Id="10319:[44785..44930).19" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720759" />
<Node Id="10319:[44785..44930).21" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 720760" />
<Node Id="10319:[84201..84218).2" Label="param ResultSymbol(string simpleName) 720761" />
<Node Id="10319:[84233..84242).2" Label="param ResultSymbol(int arity) 720762" />
<Node Id="10319:[84257..84273).2" Label="param ResultSymbol(SyntaxNode where) 720763" />
<Node Id="10319:[84288..84313).2" Label="param ResultSymbol(DiagnosticBag diagnostics) 720764" />
<Node Id="10319:[84374..84391).2" Label="param ResultSymbol(out bool wasError) 720765" />
<Node Id="10319:[84406..84447).2" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 720766" />
<Node Id="10319:[84462..84508).2" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 720767" />
<Node Id="10319:[84124..109887).2" Label="param ResultSymbol(this) 720768" />
<Node Id="10319:[85320..85348).5" Label="Debug.Assert(where != null); 720769" />
<Node Id="10319:[85320..85348).6" Label="Debug.Assert(where != null); 720770" />
<Node Id="10319:[85366..85400).5" Label="Debug.Assert(diagnostics != null); 720771" />
<Node Id="10319:[85366..85400).6" Label="Debug.Assert(diagnostics != null); 720772" />
<Node Id="10354:[4561..4580).3" Label="return _symbolList; 720773" />
<Node Id="10319:[85467..85484).3" Label="wasError = false; 720774" />
<Node Id="10354:[4094..4107).41" Label="return _kind; 720775" />
<Node Id="10319:[104874..105336).4" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 720776" />
<Node Id="10319:[104874..105336).5" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 720777" />
<Node Id="10319:[105368..106708).2" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 720778" />
<Node Id="10319:[105465..105535).7" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 720779" />
<Node Id="10319:[105465..105535).8" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 720780" />
<Node Id="10319:[76360..76385).2" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 720781" />
<Node Id="10319:[76387..76402).2" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 720782" />
<Node Id="10060:[2841..2854).12" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 720783" />
<Node Id="10060:[2856..2875).12" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 720784" />
<Node Id="10060:[2901..2932).23" Label="Debug.Assert(symbol is object); 720785" />
<Node Id="10060:[2948..3467).12" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 720786" />
<Node Id="10060:[3553..4223).14" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 720787" />
<Node Id="10060:[4243..4274).14" Label="symbol = symbol.ContainingType; 720788" />
<Node Id="10060:[3518..4328).14" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 720789" />
<Node Id="10319:[76494..76582).5" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 720790" />
<Node Id="10319:[84691..84861).3" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 720791" />
<Node Id="10319:[84764..84846).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 720792" />
<Node Id="10319:[84764..84846).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 720793" />
<Node Id="10319:[84764..84846).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 720794" />
<Node Id="10319:[84764..84846).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 720795" />
<Node Id="10319:[84764..84845).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 720796" />
<Node Id="10306:[358886..358901).1" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 720797" />
<Node Id="10306:[358903..358930).1" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 720798" />
<Node Id="10306:[358932..358945).1" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 720799" />
<Node Id="10306:[358947..358972).1" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 720800" />
<Node Id="10306:[358838..360009).1" Label="param CheckRuntimeSupportForSymbolAccess(this) 720801" />
<Node Id="10306:[358998..359998).1" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 720802" />
<Node Id="10306:[358998..359998).2" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 720803" />
<Node Id="10319:[44948..45377).3" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 720804" />
<Node Id="10354:[11428..11441).3" Label="this.Clear(); 720805" />
<Node Id="10319:[45408..45422).2" Label="result.Free(); 720806" />
<Node Id="10325:[4462..4594).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 720807" />
<Node Id="10325:[4556..4582).2" Label="GetGlobalAnnotationState() 720808" />
<Node Id="10286:[10675..11259).2" Label="param GetGlobalAnnotationState(this) 720809" />
<Node Id="10286:[10741..11248).2" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 720810" />
<Node Id="10286:[11085..11098).3" Label="return false; 720811" />
<Node Id="10325:[4549..4583).3" Label="return GetGlobalAnnotationState(); 720812" />
<Node Id="10286:[10600..10652).7" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 720813" />
<Node Id="10319:[45443..45567).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 720814" />
<Node Id="10287:[2306..2328).2" Label="param CreateUnannotated(bool isNullableEnabled) 720815" />
<Node Id="10287:[2377..2471).3" Label="if (symbol is null)
                {
                    return default;
                } 720816" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 720817" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 720818" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 720819" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 720820" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 720821" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 720822" />
<Node Id="10287:[912..919).1" Label="_symbol 720823" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 720824" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 720825" />
<Node Id="10319:[72620..72734).1" Label="if (isLeftUnboundGenericType)
            {
                return convertToUnboundGenericType();
            } 720826" />
<Node Id="10319:[72750..72763).1" Label="return right; 720827" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 720828" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 720829" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 720830" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 720831" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 720832" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 720833" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 720834" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 720835" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 720836" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 720837" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 720838" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 720839" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 720840" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 720841" />
<Node Id="10286:[21504..21529).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 720842" />
<Node Id="10286:[21531..21544).2" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 720843" />
<Node Id="10286:[21546..21561).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 720844" />
<Node Id="10286:[21563..21583).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 720845" />
<Node Id="10286:[21462..21711).2" Label="param ReportDiagnosticsIfObsolete(this) 720846" />
<Node Id="10286:[21609..21700).6" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720847" />
<Node Id="10286:[21609..21700).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720848" />
<Node Id="10286:[21609..21700).8" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720849" />
<Node Id="10286:[21609..21700).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720850" />
<Node Id="10286:[21609..21699).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 720851" />
<Node Id="10286:[22044..22069).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 720852" />
<Node Id="10286:[22071..22084).2" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 720853" />
<Node Id="10286:[22086..22108).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 720854" />
<Node Id="10286:[22110..22130).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 720855" />
<Node Id="10286:[22002..22611).2" Label="param ReportDiagnosticsIfObsolete(this) 720856" />
<Node Id="10286:[22156..22600).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 720857" />
<Node Id="10286:[22421..22557).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720858" />
<Node Id="10286:[22421..22557).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720859" />
<Node Id="10286:[22421..22557).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720860" />
<Node Id="10286:[22421..22557).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720861" />
<Node Id="10286:[22493..22522).1" Label="this.ContainingMemberOrLambda 720862" />
<Node Id="10307:[1439..1480).1" Label="get { return _containingMemberOrLambda; } 720863" />
<Node Id="10307:[1445..1478).1" Label="return _containingMemberOrLambda; 720864" />
<Node Id="10286:[22421..22557).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720865" />
<Node Id="10286:[22524..22543).1" Label="this.ContainingType 720866" />
<Node Id="10286:[15519..15926).1" Label="get
            {
                var member = this.ContainingMemberOrLambda;
                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);
                return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                };
            } 720867" />
<Node Id="10286:[15568..15597).1" Label="this.ContainingMemberOrLambda 720868" />
<Node Id="10307:[1439..1480).2" Label="get { return _containingMemberOrLambda; } 720869" />
<Node Id="10307:[1445..1478).2" Label="return _containingMemberOrLambda; 720870" />
<Node Id="10286:[15555..15598).1" Label="var member = this.ContainingMemberOrLambda; 720871" />
<Node Id="10286:[15616..15690).1" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 720872" />
<Node Id="10286:[15616..15690).2" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 720873" />
<Node Id="10286:[15715..15910).1" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 720874" />
<Node Id="10286:[15708..15911).1" Label="return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                }; 720875" />
<Node Id="10286:[22421..22557).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720876" />
<Node Id="10286:[22421..22557).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720877" />
<Node Id="10286:[22421..22556).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 720878" />
<Node Id="10286:[23056..23081).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 720879" />
<Node Id="10286:[23096..23109).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 720880" />
<Node Id="10286:[23124..23146).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 720881" />
<Node Id="10286:[23161..23181).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 720882" />
<Node Id="10286:[23196..23220).1" Label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 720883" />
<Node Id="10286:[23235..23266).1" Label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 720884" />
<Node Id="10286:[23281..23301).1" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 720885" />
<Node Id="10286:[23327..23364).1" Label="RoslynDebug.Assert(symbol is object); 720886" />
<Node Id="10286:[23380..23684).1" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 720887" />
<Node Id="10286:[23893..24026).1" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 720888" />
<Node Id="10286:[24450..24529).1" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 720889" />
<Node Id="10286:[24450..24529).2" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 720890" />
<Node Id="10286:[24450..24529).3" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 720891" />
<Node Id="10286:[24545..24641).1" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 720892" />
<Node Id="10286:[24655..25349).1" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 720893" />
<Node Id="10286:[25365..25492).1" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 720894" />
<Node Id="10286:[25365..25492).2" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 720895" />
<Node Id="10286:[25365..25492).3" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 720896" />
<Node Id="10286:[25365..25492).4" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 720897" />
<Node Id="10286:[25365..25492).5" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 720898" />
<Node Id="10286:[25386..25491).1" Label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 720899" />
<Node Id="10286:[26910..26935).1" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 720900" />
<Node Id="10286:[26937..26950).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 720901" />
<Node Id="10286:[26952..26974).1" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 720902" />
<Node Id="10286:[26976..27000).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 720903" />
<Node Id="10286:[27002..27022).1" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 720904" />
<Node Id="10286:[27048..27088).1" Label="RoslynDebug.Assert(diagnostics != null); 720905" />
<Node Id="10286:[27048..27088).2" Label="RoslynDebug.Assert(diagnostics != null); 720906" />
<Node Id="10286:[27104..27192).1" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 720907" />
<Node Id="10286:[27104..27192).2" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 720908" />
<Node Id="10286:[27104..27192).3" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 720909" />
<Node Id="10286:[27104..27192).5" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 720910" />
<Node Id="10286:[27208..27236).1" Label="DiagnosticInfo? info = null; 720911" />
<Node Id="10286:[27250..27722).1" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 720912" />
<Node Id="10286:[27738..27845).1" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 720913" />
<Node Id="10286:[27738..27845).2" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 720914" />
<Node Id="10286:[27861..27873).1" Label="return kind; 720915" />
<Node Id="10286:[26281..26812).1" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 720916" />
<Node Id="10286:[26450..26769).1" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 720917" />
<Node Id="10286:[22421..22557).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 720918" />
<Node Id="10286:[21609..21700).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 720919" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 720920" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 720921" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 720922" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 720923" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 720924" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 720925" />
<Node Id="10319:[51762..51815).2" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 720926" />
<Node Id="10319:[51817..51842).2" Label="param UnwrapAlias(DiagnosticBag diagnostics) 720927" />
<Node Id="10319:[51844..51861).2" Label="param UnwrapAlias(SyntaxNode syntax) 720928" />
<Node Id="10319:[51863..51909).2" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 720929" />
<Node Id="10319:[51698..52285).2" Label="param UnwrapAlias(this) 720930" />
<Node Id="10319:[51939..51953).2" Label="symbol.IsAlias 720931" />
<Node Id="10287:[1680..1716).2" Label="=$ _symbol?.Kind == SymbolKind.Alias 720932" />
<Node Id="10287:[1683..1690).1" Label="_symbol 720933" />
<Node Id="10287:[1683..1716).3" Label="_symbol?.Kind == SymbolKind.Alias 720934" />
<Node Id="10319:[51935..52244).3" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 720935" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 720936" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 720937" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 720938" />
<Node Id="25002:[4395..4432).34" Label="var diagnostics = c.GetDiagnostics(); 720939" />
<Node Id="10313:[1230..1280).1" Label="param ValidateParameterNameConflicts(ImmutableArray$TypeParameterSymbol$ typeParameters) 720940" />
<Node Id="10313:[1295..1337).1" Label="param ValidateParameterNameConflicts(ImmutableArray$ParameterSymbol$ parameters) 720941" />
<Node Id="10313:[1352..1376).1" Label="param ValidateParameterNameConflicts(bool allowShadowingNames) 720942" />
<Node Id="10313:[1391..1416).1" Label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 720943" />
<Node Id="10313:[1171..3563).1" Label="param ValidateParameterNameConflicts(this) 720944" />
<Node Id="10313:[1442..1480).1" Label="PooledHashSet$string$? tpNames = null; 720945" />
<Node Id="10313:[1494..2257).1" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 720946" />
<Node Id="10313:[2273..2310).1" Label="PooledHashSet$string$? pNames = null; 720947" />
<Node Id="10313:[2324..3491).1" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 720948" />
<Node Id="10313:[2390..2435).1" Label="pNames = PooledHashSet$string$.GetInstance(); 720949" />
<Node Id="10313:[2453..3476).1" Label="foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                } 720950" />
<Node Id="10313:[2523..2541).1" Label="var name = p.Name; 720951" />
<Node Id="10313:[2563..2675).1" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 720952" />
<Node Id="10313:[2699..3019).1" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 720953" />
<Node Id="10313:[2699..3019).2" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 720954" />
<Node Id="10313:[3043..3457).1" Label="if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 720955" />
<Node Id="10313:[3043..3457).2" Label="if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 720956" />
<Node Id="10313:[3304..3457).1" Label="if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 720957" />
<Node Id="10313:[3378..3434).1" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 720958" />
<Node Id="10313:[3378..3434).2" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 720959" />
<Node Id="10313:[3378..3433).1" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 720960" />
<Node Id="10313:[720..733).1" Label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 720961" />
<Node Id="10313:[735..760).1" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 720962" />
<Node Id="10313:[666..931).1" Label="param ValidateDeclarationNameConflictsInScope(this) 720963" />
<Node Id="10313:[786..826).1" Label="Location location = GetLocation(symbol); 720964" />
<Node Id="10313:[806..825).1" Label="GetLocation(symbol) 720965" />
<Node Id="10313:[979..992).1" Label="param GetLocation(Symbol symbol) 720966" />
<Node Id="10313:[1018..1051).1" Label="var locations = symbol.Locations; 720967" />
<Node Id="10313:[1065..1148).1" Label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 720968" />
<Node Id="10313:[1065..1148).2" Label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 720969" />
<Node Id="10313:[1072..1093).1" Label="locations.Length != 0 720970" />
<Node Id="10313:[840..920).1" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 720971" />
<Node Id="10313:[840..920).2" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 720972" />
<Node Id="10313:[840..920).3" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 720973" />
<Node Id="10313:[840..920).4" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 720974" />
<Node Id="10313:[847..919).1" Label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 720975" />
<Node Id="10313:[3733..3747).1" Label="param ValidateNameConflictsInScope(Symbol? symbol) 720976" />
<Node Id="10313:[3749..3766).1" Label="param ValidateNameConflictsInScope(Location location) 720977" />
<Node Id="10313:[3768..3779).1" Label="param ValidateNameConflictsInScope(string name) 720978" />
<Node Id="10313:[3781..3806).1" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 720979" />
<Node Id="10313:[3691..5083).1" Label="param ValidateNameConflictsInScope(this) 720980" />
<Node Id="10313:[3832..3924).1" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 720981" />
<Node Id="10313:[3940..4044).1" Label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 720982" />
<Node Id="10313:[3940..4044).2" Label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 720983" />
<Node Id="10313:[4060..5043).1" Label="for (Binder? binder = this; binder != null; binder = binder.Next)
            {
                // no local scopes enclose members
                if (binder is InContainerBinder)
                {
                    return false;
                }

                var scope = binder as LocalScopeBinder;
                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                }

                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.
                if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                }

                if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                }
            } 720984" />
<Node Id="10313:[4060..5043).2" Label="for (Binder? binder = this; binder != null; binder = binder.Next)
            {
                // no local scopes enclose members
                if (binder is InContainerBinder)
                {
                    return false;
                }

                var scope = binder as LocalScopeBinder;
                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                }

                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.
                if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                }

                if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                }
            } 720985" />
<Node Id="10313:[4210..4315).1" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 720986" />
<Node Id="10313:[4335..4374).1" Label="var scope = binder as LocalScopeBinder; 720987" />
<Node Id="10313:[4392..4543).1" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 720988" />
<Node Id="10313:[4392..4543).2" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 720989" />
<Node Id="10313:[4698..4727).1" Label="binder.IsNestedFunctionBinder 720990" />
<Node Id="10286:[8381..8389).1" Label="=$ false 720991" />
<Node Id="10286:[8384..8389).1" Label="false 720992" />
<Node Id="10313:[4676..4801).1" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 720993" />
<Node Id="10313:[4676..4801).2" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 720994" />
<Node Id="10313:[4825..4858).1" Label="binder.IsLastBinderWithinMember() 720995" />
<Node Id="10313:[5095..5688).1" Label="param IsLastBinderWithinMember(this) 720996" />
<Node Id="10313:[5190..5219).1" Label="this.ContainingMemberOrLambda 720997" />
<Node Id="10307:[1439..1480).3" Label="get { return _containingMemberOrLambda; } 720998" />
<Node Id="10307:[1445..1478).3" Label="return _containingMemberOrLambda; 720999" />
<Node Id="10313:[5159..5220).1" Label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 721000" />
<Node Id="10313:[5236..5677).1" Label="switch (containingMemberOrLambda?.Kind)
            {
                case null:
                case SymbolKind.NamedType:
                case SymbolKind.Namespace:
                    return true;
                default:
                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;
            } 721001" />
<Node Id="10313:[5488..5662).1" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 721002" />
<Node Id="10313:[5608..5633).1" Label=".ContainingMemberOrLambda 721003" />
<Node Id="10346:[7562..7572).1" Label="_container 721004" />
<Node Id="10313:[5488..5662).2" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 721005" />
<Node Id="10313:[4821..5028).1" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 721006" />
<Node Id="10313:[4996..5009).1" Label="return false; 721007" />
<Node Id="10313:[840..920).5" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 721008" />
<Node Id="10313:[3507..3523).1" Label="tpNames?.Free(); 721009" />
<Node Id="10313:[3537..3552).1" Label="pNames?.Free(); 721010" />
<Node Id="10319:[20392..20435).1" Label="return bindPredefined(syntax, diagnostics); 721011" />
<Node Id="10319:[20392..20435).2" Label="return bindPredefined(syntax, diagnostics); 721012" />
<Node Id="10319:[20399..20434).1" Label="bindPredefined(syntax, diagnostics) 721013" />
<Node Id="10319:[27647..28051).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 721014" />
<Node Id="10319:[27647..28051).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 721015" />
<Node Id="10319:[27647..28051).3" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 721016" />
<Node Id="10319:[27790..27840).1" Label="var predefinedType = (PredefinedTypeSyntax)syntax; 721017" />
<Node Id="10319:[27858..27923).1" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 721018" />
<Node Id="10319:[27858..27923).2" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 721019" />
<Node Id="10319:[27869..27922).1" Label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 721020" />
<Node Id="10319:[39111..39136).1" Label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 721021" />
<Node Id="10319:[39138..39163).1" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 721022" />
<Node Id="10319:[39062..39279).1" Label="param BindPredefinedTypeSymbol(this) 721023" />
<Node Id="10319:[39189..39268).1" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 721024" />
<Node Id="10319:[39189..39268).6" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 721025" />
<Node Id="10319:[39189..39268).7" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 721026" />
<Node Id="10319:[39196..39267).1" Label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 721027" />
<Node Id="10319:[73460..73478).1" Label="param GetSpecialType(SpecialType typeId) 721028" />
<Node Id="10319:[73480..73505).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 721029" />
<Node Id="10319:[73507..73522).1" Label="param GetSpecialType(SyntaxNode node) 721030" />
<Node Id="10319:[73420..73626).1" Label="param GetSpecialType(this) 721031" />
<Node Id="10319:[73548..73615).1" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 721032" />
<Node Id="10319:[73548..73615).2" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 721033" />
<Node Id="10319:[73548..73615).3" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 721034" />
<Node Id="10319:[73548..73615).4" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 721035" />
<Node Id="10319:[73555..73614).1" Label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 721036" />
<Node Id="10319:[73685..73714).1" Label="param GetSpecialType(CSharpCompilation compilation) 721037" />
<Node Id="10319:[73716..73734).1" Label="param GetSpecialType(SpecialType typeId) 721038" />
<Node Id="10319:[73736..73751).1" Label="param GetSpecialType(SyntaxNode node) 721039" />
<Node Id="10319:[73753..73778).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 721040" />
<Node Id="10319:[73804..73868).1" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 721041" />
<Node Id="10319:[73804..73868).2" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 721042" />
<Node Id="10319:[73882..73975).1" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 721043" />
<Node Id="10319:[73882..73975).2" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 721044" />
<Node Id="10319:[73989..74045).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 721045" />
<Node Id="10319:[73989..74045).2" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 721046" />
<Node Id="10319:[73989..74045).3" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 721047" />
<Node Id="10319:[73989..74044).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 721048" />
<Node Id="10319:[76345..76358).3" Label="param ReportUseSiteDiagnostics(Symbol symbol) 721049" />
<Node Id="10319:[76360..76385).3" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 721050" />
<Node Id="10319:[76387..76402).3" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 721051" />
<Node Id="10319:[76494..76582).9" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 721052" />
<Node Id="10319:[76494..76582).10" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 721053" />
<Node Id="10319:[74059..74077).1" Label="return typeSymbol; 721054" />
<Node Id="10319:[27941..28036).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 721055" />
<Node Id="10319:[27975..28028).1" Label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 721056" />
<Node Id="10286:[10010..10027).3" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 721057" />
<Node Id="10286:[9966..10197).3" Label="param AreNullableAnnotationsEnabled(this) 721058" />
<Node Id="10319:[27941..28036).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 721059" />
<Node Id="10319:[28030..28034).1" Label="type 721060" />
<Node Id="10287:[2888..2927).1" Label="param operator(TypeWithAnnotations typeWithAnnotations) 721061" />
<Node Id="10287:[2961..3037).1" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 721062" />
<Node Id="10287:[2961..3037).2" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 721063" />
<Node Id="10287:[2968..3036).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 721064" />
<Node Id="10287:[718..757).2" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 721065" />
<Node Id="10287:[666..1076).2" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 721066" />
<Node Id="10287:[791..833).3" Label="Debug.Assert(typeWithAnnotations.HasType); 721067" />
<Node Id="10287:[912..927).2" Label="_symbol = null; 721068" />
<Node Id="10287:[912..919).2" Label="_symbol 721069" />
<Node Id="10287:[945..972).2" Label="_isNullableEnabled = false; 721070" />
<Node Id="10287:[945..963).2" Label="_isNullableEnabled 721071" />
<Node Id="10319:[27941..28036).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 721072" />
<Node Id="10319:[27941..28036).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 721073" />
<Node Id="10319:[27941..28036).9" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 721074" />
<Node Id="10286:[21504..21529).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 721075" />
<Node Id="10286:[21546..21561).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 721076" />
<Node Id="10286:[21563..21583).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 721077" />
<Node Id="10286:[22044..22069).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 721078" />
<Node Id="10286:[22086..22108).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 721079" />
<Node Id="10286:[22110..22130).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 721080" />
<Node Id="10286:[22421..22557).13" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 721081" />
<Node Id="10286:[22421..22557).14" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 721082" />
<Node Id="10286:[15616..15690).6" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 721083" />
<Node Id="10286:[15616..15690).7" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 721084" />
<Node Id="10286:[15715..15910).2" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 721085" />
<Node Id="10286:[23056..23081).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 721086" />
<Node Id="10286:[23124..23146).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 721087" />
<Node Id="10286:[23161..23181).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 721088" />
<Node Id="10286:[23281..23301).2" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 721089" />
<Node Id="10286:[23380..23684).8" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 721090" />
<Node Id="10286:[23893..24026).3" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 721091" />
<Node Id="10286:[24545..24641).3" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 721092" />
<Node Id="10286:[24655..25349).2" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 721093" />
<Node Id="10286:[26910..26935).2" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 721094" />
<Node Id="10286:[26952..26974).2" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 721095" />
<Node Id="10286:[27002..27022).2" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 721096" />
<Node Id="10286:[27048..27088).5" Label="RoslynDebug.Assert(diagnostics != null); 721097" />
<Node Id="10286:[27048..27088).6" Label="RoslynDebug.Assert(diagnostics != null); 721098" />
<Node Id="10286:[27208..27236).3" Label="DiagnosticInfo? info = null; 721099" />
<Node Id="10286:[27250..27722).2" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 721100" />
<Node Id="10286:[27738..27845).4" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 721101" />
<Node Id="10286:[27738..27845).5" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 721102" />
<Node Id="10286:[27861..27873).2" Label="return kind; 721103" />
<Node Id="10286:[26281..26812).2" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 721104" />
<Node Id="10286:[26450..26769).2" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 721105" />
<Node Id="10287:[1680..1716).3" Label="=$ _symbol?.Kind == SymbolKind.Alias 721106" />
<Node Id="10287:[1683..1690).2" Label="_symbol 721107" />
<Node Id="10287:[1683..1716).5" Label="_symbol?.Kind == SymbolKind.Alias 721108" />
<Node Id="10319:[51935..52244).5" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 721109" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 721110" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 721111" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 721112" />
<Node Id="10845:[602..612).1" Label="corLibrary 721113" />
<Node Id="10845:[637..638).1" Label="0 721114" />
<Node Id="10845:[660..678).1" Label="includeNullability 721115" />
<Node Id="10845:[701..705).1" Label="null 721116" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 721117" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 721118" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 721119" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 721120" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 721121" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 721122" />
<Node Id="10845:[900..910).1" Label="corLibrary 721123" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 721124" />
<Node Id="10845:[935..953).1" Label="includeNullability 721125" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 721126" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 721127" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 721128" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 721129" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 721130" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 721131" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 721132" />
<Node Id="10843:[734..744).1" Label="corLibrary 721133" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 721134" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 721135" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 721136" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 721137" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 721138" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 721139" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 721140" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 721141" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 721142" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 721143" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 721144" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 721145" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 721146" />
<Node Id="25002:[4395..4432).41" Label="var diagnostics = c.GetDiagnostics(); 721147" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 721148" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 721149" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 721150" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 721151" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 721152" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 721153" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 721154" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 721155" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 721156" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 721157" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 721158" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 721159" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 721160" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 721161" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 721162" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 721163" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 721164" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 721165" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 721166" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 721167" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 721168" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 721169" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 721170" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 721171" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 721172" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 721173" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 721174" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 721175" />
<Node Id="25003:[747..750).1" Label="{ } 721176" />
<Node Id="25003:[740..750).1" Label="None = { } 721177" />
<Node Id="25003:[814..818).1" Label="null 721178" />
<Node Id="25003:[808..818).1" Label="Any = null 721179" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 721180" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 721181" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 721182" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 721183" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 721184" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 721185" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 721186" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 721187" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 721188" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 721189" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 721190" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 721191" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 721192" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 721193" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 721194" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 721195" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 721196" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 721197" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 721198" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 721199" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 721200" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 721201" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 721202" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 721203" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 721204" />
<Node Id="25003:[22201..22213).1" Label="return true; 721205" />
<Node Id="25003:[18197..18490).2" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 721206" />
<Node Id="25003:[18453..18475).1" Label="actual = Sort(actual); 721207" />
<Node Id="25003:[18462..18474).1" Label="Sort(actual) 721208" />
<Node Id="25003:[21372..21407).1" Label="param Sort(IEnumerable$Diagnostic$ diagnostics) 721209" />
<Node Id="25003:[21433..21546).1" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 721210" />
<Node Id="25003:[21433..21546).2" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 721211" />
<Node Id="25003:[21433..21546).4" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 721212" />
<Node Id="25003:[21433..21546).5" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 721213" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 721214" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 721215" />
<Node Id="25003:[18658..18664).1" Label="int i; 721216" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 721217" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 721218" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 721219" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 721220" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 721221" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 721222" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 721223" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 721224" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 721225" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 721226" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 721227" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 721228" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 721229" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 721230" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 721231" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 721232" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 721233" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 721234" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 721235" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 721236" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 721237" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 721238" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 721239" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 721240" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 721241" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 721242" />
<Node Id="25012:[3129..3133).1" Label="'\r' 721243" />
<Node Id="25012:[3135..3139).1" Label="'\n' 721244" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 721245" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 721246" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 721247" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 721248" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 721249" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 721250" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 721251" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 721252" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 721253" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 721254" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 721255" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 721256" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 721257" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 721258" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 721259" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 721260" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 721261" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 721262" />
<Node Id="25012:[4230..4231).1" Label="1 721263" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 721264" />
<Node Id="25012:[4277..4278).1" Label="1 721265" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 721266" />
<Node Id="25012:[4324..4325).1" Label="2 721267" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 721268" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 721269" />
<Node Id="25012:[1157..1166).1" Label="_comparer 721270" />
<Node Id="25012:[1257..1266).1" Label="_comparer 721271" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 721272" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 721273" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 721274" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 721275" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 721276" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 721277" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 721278" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 721279" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 721280" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 721281" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 721282" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 721283" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 721284" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 721285" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 721286" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 721287" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 721288" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 721289" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 721290" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 721291" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 721292" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 721293" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 721294" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 721295" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 721296" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 721297" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 721298" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 721299" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 721300" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 721301" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 721302" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 721303" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 721304" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 721305" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 721306" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 721307" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 721308" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 721309" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 721310" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 721311" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 721312" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 721313" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 721314" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 721315" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 721316" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 721317" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 721318" />
<Node Id="25012:[10612..10621).1" Label="return d; 721319" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 721320" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 721321" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 721322" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 721323" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 721324" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 721325" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 721326" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 721327" />
<Node Id="25012:[5357..6686).2" Label="param GetEdits(this) 721328" />
<Node Id="25012:[1672..2400).5" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 721329" />
<Node Id="25012:[1533..2415).2" Label="param CalculateDiff(this) 721330" />
<Node Id="25012:[2963..3048).5" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 721331" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 721332" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 721333" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 721334" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 721335" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 721336" />
<Node Id="25002:[4102..4181).5" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 721337" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 721338" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 721339" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 721340" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 721341" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 721342" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 721343" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 721344" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 721345" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 721346" />
<Node Id="25002:[4539..4548).1" Label="return c; 721347" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[21062..21405).1" Target="25014:[387..448).1" />
<Link Source="28001:[21132..21334).1" Target="25014:[387..448).1" />
<Link Source="28001:[21348..21394).1" Target="28001:[21132..21334).1" />
<Link Source="28001:[21348..21394).1" Target="25014:[387..448).1" />
<Link Source="28001:[21366..21372).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[21348..21394).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[21366..21372).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[21366..21372).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[21366..21372).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[21348..21394).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[21348..21394).2" Target="25014:[387..448).1" />
<Link Source="28001:[21348..21394).4" Target="25014:[387..448).1" />
<Link Source="28001:[21348..21373).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[21348..21394).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[21348..21394).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[21348..21373).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[21348..21373).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[21348..21393).1" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="21003:[47944..47963).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[21348..21393).1" />
<Link Source="25002:[4284..4323).1" Target="28001:[21348..21394).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[21348..21393).1" />
<Link Source="25002:[4395..4432).1" Target="28001:[21348..21393).1" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[21348..21393).1" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[21348..21393).1" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[21348..21393).1" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10060:[3483..3502).7" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).1" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).1" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).1" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).1" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).1" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).1" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).1" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).19" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).19" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).19" Target="28001:[21348..21393).1" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).1" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).19" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="25002:[4395..4432).19" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).3" Target="10076:[4989..5047).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).2" Target="10076:[5470..5538).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[5470..5538).3" />
<Link Source="10076:[5470..5538).4" Target="10076:[5470..5538).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[879..998).2" />
<Link Source="10076:[5470..5538).4" Target="10077:[698..707).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[747..768).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[798..808).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[854..862).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[964..972).1" />
<Link Source="10076:[5470..5538).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).4" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34685..34715).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="EXTERNAL" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[32567..32606).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[31490..32331).6" />
<Link Source="10077:[2110..2139).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[953..968).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[31490..32331).6" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).5" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33241..33265).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[39020..39048).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[38976..39245).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44888..44934).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44990..45616).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[46328..46341).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[46272..46291).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).2" />
<Link Source="10077:[2287..2312).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).1" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[2287..2312).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[46272..46291).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39887..39935).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39956..39970).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39993..40004).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[2066..2158).2" />
<Link Source="10077:[2110..2139).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[39988..44042).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[40084..40108).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10077:[39988..44042).4" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[2110..2139).3" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[43991..44023).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1231..1520).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).5" Target="10077:[39988..44042).4" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[2877..2892).2" />
<Link Source="10077:[2926..2971).8" Target="10077:[44062..44076).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[43991..44023).4" />
<Link Source="10077:[2926..2971).8" Target="10077:[33241..33265).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[33290..34322).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).2" Target="10077:[2926..2971).8" />
<Link Source="10077:[33969..34032).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[33509..34299).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).1" Target="10077:[33969..34032).2" />
<Link Source="10346:[2604..2615).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2617..2639).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2544..2854).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).2" Target="10077:[33984..34031).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1231..1520).2" Target="10346:[2544..2854).1" />
<Link Source="10286:[1231..1520).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1260..1291).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).5" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1247..1258).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10346:[2544..2854).2" />
<Link Source="10286:[1390..1400).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1390..1400).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1390..1400).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1428..1444).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1428..1444).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1428..1444).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1260..1291).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1478..1494).2" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[932..947).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[974..986).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[974..986).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[1017..1033).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[1017..1033).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[1074..1100).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[1074..1100).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[922..1186).1" />
<Link Source="10346:[2803..2843).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).2" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33373..33481).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[34064..34272).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34361..34419).1" Target="10076:[1307..1365).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[33969..34032).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).2" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).6" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).6" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).6" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).6" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).6" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).4" />
<Link Source="10077:[34444..34482).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[953..968).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1478..1494).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1231..1520).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2766..2776).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[932..947).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2803..2815).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[1017..1033).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[1074..1100).2" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).12" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).12" Target="10077:[2749..2764).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[5470..5538).4" />
<Link Source="10076:[5678..5718).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[5071..5759).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).12" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).12" />
<Link Source="10076:[5734..5748).1" Target="10076:[4989..5047).1" />
<Link Source="25002:[4395..4432).22" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).22" Target="10076:[5734..5748).1" />
<Link Source="25002:[4395..4432).22" Target="10076:[5678..5718).2" />
<Link Source="25002:[4395..4432).22" Target="28001:[21348..21393).1" />
<Link Source="10076:[5223..5250).6" Target="25002:[4395..4432).22" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).6" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).6" Target="25002:[4395..4432).22" />
<Link Source="10076:[5277..5448).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5277..5448).6" />
<Link Source="10076:[5391..5433).2" Target="10076:[5277..5448).6" />
<Link Source="10077:[4637..4671).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4637..4671).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4591..7075).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4591..7075).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4705..4866).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4705..4866).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).2" />
<Link Source="10077:[4705..4866).3" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[4886..4902).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4920..5555).1" Target="10077:[4705..4866).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4920..5555).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5083..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[5083..5555).1" Target="10077:[4920..5555).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4920..5555).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[5083..5555).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5575..5625).2" Target="10077:[5511..5536).1" />
<Link Source="10077:[5575..5625).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5585..5624).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[44159..44180).3" Target="10077:[5575..5625).1" />
<Link Source="10077:[44159..44180).3" Target="10077:[5585..5624).1" />
<Link Source="10077:[44182..44197).3" Target="10077:[5575..5625).2" />
<Link Source="10077:[44182..44197).3" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).17" Target="10077:[44182..44197).3" />
<Link Source="10077:[44231..44317).17" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).19" Target="10077:[5585..5624).1" />
<Link Source="10077:[44335..44374).11" Target="10077:[5585..5624).1" />
<Link Source="10077:[44342..44373).3" Target="10077:[5585..5624).1" />
<Link Source="10076:[853..1034).3" Target="10077:[44335..44374).11" />
<Link Source="10076:[853..1034).3" Target="10077:[44342..44373).3" />
<Link Source="10077:[5575..5625).3" Target="10077:[44335..44374).11" />
<Link Source="10077:[5575..5625).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5645..5665).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5688..5699).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2066..2158).5" Target="10077:[4591..7075).1" />
<Link Source="10077:[2066..2158).5" Target="10077:[5688..5699).1" />
<Link Source="10077:[2110..2139).5" Target="10077:[2066..2158).5" />
<Link Source="10077:[2110..2139).5" Target="10077:[5083..5555).1" />
<Link Source="10077:[2110..2139).5" Target="10077:[5688..5699).1" />
<Link Source="10077:[5683..7020).1" Target="10077:[2110..2139).5" />
<Link Source="10077:[5683..7020).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).3" Target="10077:[5645..5665).1" />
<Link Source="10077:[5683..7020).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).2" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[44159..44180).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[44182..44197).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5083..5555).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).5" Target="10077:[2926..2971).3" />
<Link Source="10077:[5776..5836).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5776..5836).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).2" Target="10077:[5776..5836).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5858..6188).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[5930..6023).1" Target="10077:[5776..5836).1" />
<Link Source="10077:[5930..6023).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[5930..6023).2" Target="EXTERNAL" />
<Link Source="10077:[5930..6023).2" Target="10077:[5858..6188).2" />
<Link Source="10077:[5945..6022).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[32474..32502).2" Target="10077:[5930..6023).1" />
<Link Source="10077:[32474..32502).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[32504..32523).2" Target="10077:[5930..6023).2" />
<Link Source="10077:[32504..32523).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).25" Target="10077:[32504..32523).2" />
<Link Source="10077:[44231..44317).25" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).27" Target="10077:[5945..6022).1" />
<Link Source="10077:[44954..44972).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[44966..44971).34" Target="10077:[44954..44972).2" />
<Link Source="10077:[44966..44971).34" Target="10077:[32474..32502).2" />
<Link Source="10077:[39421..39431).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[1641..1732).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[1641..1732).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[1641..1732).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[32474..32502).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[1685..1713).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[32474..32502).2" />
<Link Source="10077:[39398..39590).8" Target="10077:[32474..32502).2" />
<Link Source="10077:[44231..44317).33" Target="10077:[32474..32502).2" />
<Link Source="10286:[1317..1350).9" Target="10077:[32474..32502).2" />
<Link Source="10346:[858..868).3" Target="10077:[32474..32502).2" />
<Link Source="10346:[1572..1612).5" Target="10077:[32474..32502).2" />
<Link Source="10346:[1626..1666).5" Target="10077:[32474..32502).2" />
<Link Source="10076:[1089..1109).1" Target="10077:[32474..32502).2" />
<Link Source="10076:[1050..1225).1" Target="10077:[32474..32502).2" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[32474..32502).2" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10286:[1317..1350).13" Target="10077:[32504..32523).2" />
<Link Source="10286:[1317..1350).14" Target="10076:[1143..1210).1" />
<Link Source="10286:[1317..1350).14" Target="10286:[1317..1350).13" />
<Link Source="10286:[1317..1350).14" Target="10077:[32504..32523).2" />
<Link Source="10346:[858..868).4" Target="10077:[32504..32523).2" />
<Link Source="10346:[2691..2750).6" Target="10077:[32504..32523).2" />
<Link Source="10346:[2691..2750).7" Target="10076:[1143..1210).1" />
<Link Source="10346:[2691..2750).7" Target="10346:[2691..2750).6" />
<Link Source="10346:[2691..2750).7" Target="10077:[32504..32523).2" />
<Link Source="10077:[34064..34272).4" Target="10077:[32504..32523).2" />
<Link Source="10077:[34064..34272).5" Target="10077:[32474..32502).2" />
<Link Source="10077:[34064..34272).5" Target="10076:[1143..1210).1" />
<Link Source="10077:[34064..34272).5" Target="10077:[34064..34272).4" />
<Link Source="10077:[34064..34272).5" Target="10077:[32504..32523).2" />
<Link Source="10077:[6212..6251).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6275..6566).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6275..6566).1" Target="10077:[32474..32502).2" />
<Link Source="10077:[6275..6566).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6590..6839).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6590..6839).1" Target="EXTERNAL" />
<Link Source="10077:[6590..6839).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6863..6941).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[6863..6941).1" Target="10076:[1143..1210).1" />
<Link Source="10077:[6863..6941).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6878..6940).1" Target="10077:[5683..7020).4" />
<Link Source="10307:[3496..3521).3" Target="10077:[6863..6941).1" />
<Link Source="10307:[3496..3521).3" Target="10077:[6878..6940).1" />
<Link Source="10307:[3452..3756).3" Target="10076:[1143..1210).1" />
<Link Source="10307:[3452..3756).3" Target="10077:[6878..6940).1" />
<Link Source="10077:[6963..6974).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[2110..2139).10" Target="10077:[6963..6974).1" />
<Link Source="10077:[2110..2139).10" Target="10307:[3496..3521).3" />
<Link Source="10077:[6963..7001).1" Target="10077:[2110..2139).10" />
<Link Source="10077:[6963..7001).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[6963..7001).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).3" Target="10307:[3496..3521).3" />
<Link Source="10077:[6963..7001).3" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).5" Target="10077:[5683..7020).4" />
<Link Source="10077:[7040..7060).1" Target="10307:[3496..3521).3" />
<Link Source="10077:[7040..7060).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2926..2971).26" Target="10076:[5391..5433).1" />
<Link Source="10077:[2926..2971).26" Target="10077:[7040..7060).1" />
<Link Source="10077:[2926..2971).26" Target="10077:[6963..7001).1" />
<Link Source="10077:[2926..2971).26" Target="10077:[2749..2764).1" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="10077:[2926..2971).26" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).1" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[726..773).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[815..820).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[2975..3015).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[17802..17818).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).7" Target="10286:[1532..2083).1" />
<Link Source="10286:[18200..18223).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).9" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).9" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).9" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).9" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).10" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).10" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).10" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).10" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="10077:[2926..2971).26" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).31" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).31" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).31" Target="10077:[2926..2971).26" />
<Link Source="25002:[4395..4432).31" Target="10286:[2036..2052).1" />
<Link Source="25002:[4395..4432).31" Target="10286:[2003..2013).1" />
<Link Source="25002:[4395..4432).31" Target="10286:[1977..1981).1" />
<Link Source="25002:[4395..4432).31" Target="10286:[17802..17818).7" />
<Link Source="25002:[4395..4432).31" Target="10286:[18200..18223).7" />
<Link Source="25002:[4395..4432).31" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).31" Target="28001:[21348..21393).1" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).6" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[15146..15291).6" />
<Link Source="10319:[20095..20126).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="25002:[4395..4432).31" />
<Link Source="10319:[20152..24647).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[21140..21179).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[21140..21179).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[21205..21314).1" Target="10319:[21140..21179).1" />
<Link Source="10319:[21205..21314).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[21205..21314).3" Target="10319:[20027..20052).1" />
<Link Source="10319:[21205..21314).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[21205..21314).4" Target="10319:[20054..20093).1" />
<Link Source="10319:[21205..21314).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[21205..21314).5" Target="10319:[20095..20126).1" />
<Link Source="10319:[21205..21314).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[21212..21313).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[71214..71239).1" Target="10319:[21205..21314).1" />
<Link Source="10319:[71214..71239).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71254..71280).1" Target="10319:[21205..21314).1" />
<Link Source="10319:[71254..71280).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71295..71320).1" Target="10319:[21205..21314).3" />
<Link Source="10319:[71295..71320).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71335..71374).1" Target="10319:[21205..21314).4" />
<Link Source="10319:[71335..71374).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71389..71420).1" Target="10319:[21205..21314).5" />
<Link Source="10319:[71389..71420).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71130..73408).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[71130..73408).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).1" Target="10319:[71214..71239).1" />
<Link Source="10319:[71446..71583).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).2" Target="10319:[71295..71320).1" />
<Link Source="10319:[71446..71583).2" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).3" Target="10319:[71335..71374).1" />
<Link Source="10319:[71446..71583).3" Target="10319:[21212..21313).1" />
<Link Source="10319:[71446..71583).4" Target="10319:[21212..21313).1" />
<Link Source="10319:[71457..71560).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[71446..71583).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18456..18481).1" Target="10319:[71446..71583).2" />
<Link Source="10319:[18456..18481).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18483..18522).1" Target="10319:[71446..71583).3" />
<Link Source="10319:[18483..18522).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18524..18555).1" Target="10319:[71446..71583).4" />
<Link Source="10319:[18524..18555).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[71130..73408).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[18431..18454).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[18483..18522).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[71457..71560).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[18524..18555).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[71457..71560).1" />
<Link Source="10319:[18594..18695).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[20002..20025).2" Target="10319:[18581..18696).1" />
<Link Source="10319:[20002..20025).2" Target="10319:[18594..18695).1" />
<Link Source="10319:[20027..20052).2" Target="10319:[18581..18696).2" />
<Link Source="10319:[20027..20052).2" Target="10319:[18594..18695).1" />
<Link Source="10319:[20054..20093).2" Target="10319:[18581..18696).3" />
<Link Source="10319:[20054..20093).2" Target="10319:[18594..18695).1" />
<Link Source="10319:[20095..20126).2" Target="10319:[18581..18696).4" />
<Link Source="10319:[20095..20126).2" Target="10319:[18594..18695).1" />
<Link Source="10319:[19916..30085).2" Target="10319:[18300..18837).1" />
<Link Source="10319:[19916..30085).2" Target="10319:[18594..18695).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).2" />
<Link Source="10319:[20508..20675).2" Target="10319:[20002..20025).2" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).2" />
<Link Source="10319:[20508..20675).3" Target="10319:[20002..20025).2" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).2" />
<Link Source="10319:[20508..20675).4" Target="10319:[20002..20025).2" />
<Link Source="10319:[20515..20674).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).2" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20002..20025).2" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4658).1" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4658).2" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4658).3" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4658).4" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4658).5" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4658).6" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4658).7" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10776..10822).1" Target="10312:[5335..5381).1" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10564..12467).1" Target="10312:[4019..5073).5" />
<Link Source="10346:[10564..12467).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10861..10875).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10629..10648).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).26" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10346:[10861..10875).1" />
<Link Source="10346:[10848..10877).1" Target="10354:[3720..3803).25" />
<Link Source="10346:[10848..10877).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10897..10914).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[7666..7775).1" />
<Link Source="10346:[7672..7773).1" Target="10319:[50381..51340).1" />
<Link Source="10346:[7672..7773).1" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[10893..11127).1" Target="10346:[7672..7773).1" />
<Link Source="10346:[10893..11127).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11143..11188).1" Target="10346:[10674..10713).1" />
<Link Source="10346:[11143..11188).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11157..11187).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[3460..3499).1" Target="10346:[11143..11188).1" />
<Link Source="10346:[3460..3499).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3525..3638).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3525..3638).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3654..3816).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3654..3816).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3832..3852).1" Target="10319:[50381..51340).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[11143..11188).2" Target="10346:[3832..3852).1" />
<Link Source="10346:[11143..11188).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).1" Target="10346:[10715..10736).1" />
<Link Source="10346:[11258..12246).1" Target="EXTERNAL" />
<Link Source="10346:[11258..12246).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[10564..12467).1" />
<Link Source="10346:[11258..12246).5" Target="10319:[50381..51340).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[11258..12246).2" />
<Link Source="10346:[11258..12246).5" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).5" />
<Link Source="10346:[11258..12246).6" Target="10312:[4534..4657).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[10629..10648).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[11369..11508).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11369..11508).3" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[11369..11508).4" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[11369..11508).5" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[11369..11508).6" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).7" Target="10346:[10738..10759).1" />
<Link Source="10346:[11369..11508).7" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).8" Target="10346:[10761..10774).1" />
<Link Source="10346:[11369..11508).8" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).9" Target="10346:[10776..10822).1" />
<Link Source="10346:[11369..11508).9" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11507).1" Target="10346:[11258..12246).6" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11508).1" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11508).2" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11508).3" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11508).4" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11508).5" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11508).6" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11508).7" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11508).8" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11508).9" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[10564..12467).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7903..7936).1" Target="10312:[7770..7791).1" />
<Link Source="10312:[7903..7936).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7916..7934).1" Target="10346:[11369..11507).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7903..7936).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[4750..4847).3" Target="10353:[4698..4724).2" />
<Link Source="10353:[4750..4847).3" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).5" Target="10353:[4698..4724).2" />
<Link Source="10353:[4863..5000).5" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).6" Target="10312:[7916..7934).1" />
<Link Source="10353:[5079..5183).3" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[5197..5323).4" Target="10353:[4698..4724).2" />
<Link Source="10353:[5197..5323).4" Target="10353:[5079..5183).3" />
<Link Source="10353:[5197..5323).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).7" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).8" Target="10353:[4698..4724).2" />
<Link Source="10353:[5485..5759).8" Target="10353:[5485..5759).7" />
<Link Source="10353:[5485..5759).8" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).9" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).5" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).7" Target="10353:[4698..4724).2" />
<Link Source="10353:[5775..5979).7" Target="10353:[5775..5979).5" />
<Link Source="10353:[5775..5979).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5995..6029).4" Target="10353:[5775..5979).7" />
<Link Source="10353:[5995..6029).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[6002..6028).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[6343..6358).2" Target="10353:[5995..6029).4" />
<Link Source="10353:[6343..6358).2" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).7" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6343..6358).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6384..6410).7" />
<Link Source="10353:[6384..6410).8" Target="10353:[6002..6028).2" />
<Link Source="10312:[7952..7977).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7718..7727).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7952..7977).1" />
<Link Source="10312:[7952..7977).2" Target="10346:[11369..11507).1" />
<Link Source="10312:[7991..8409).1" Target="10312:[7673..7703).1" />
<Link Source="10312:[7991..8409).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[7991..8409).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[8247..8394).1" Target="10312:[7652..7671).1" />
<Link Source="10312:[8247..8394).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).2" Target="10312:[7673..7703).1" />
<Link Source="10312:[8247..8394).2" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).3" Target="10312:[7705..7716).1" />
<Link Source="10312:[8247..8394).3" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).4" Target="10312:[7718..7727).1" />
<Link Source="10312:[8247..8394).4" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).5" Target="10312:[7729..7768).1" />
<Link Source="10312:[8247..8394).5" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).6" Target="10312:[7770..7791).1" />
<Link Source="10312:[8247..8394).6" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).7" Target="10312:[7793..7814).1" />
<Link Source="10312:[8247..8394).7" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).8" Target="10312:[7816..7829).1" />
<Link Source="10312:[8247..8394).8" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8394).9" Target="10312:[7831..7877).1" />
<Link Source="10312:[8247..8394).9" Target="10312:[7991..8409).1" />
<Link Source="10312:[8247..8393).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8394).2" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8394).3" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8394).4" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8394).5" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8394).6" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8394).7" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8394).8" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8394).9" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[7615..8420).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8564..8579).1" />
<Link Source="10312:[8779..10524).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8543..8562).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8564..8579).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8581..8592).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8594..8603).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8605..8644).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8646..8667).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8669..8690).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8692..8705).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8707..8753).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9708).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9709).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9709).2" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9709).3" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9709).4" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9709).5" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9709).6" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9709).7" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9709).8" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9709).9" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[8508..10685).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[34707..34726).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[34741..34756).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[34771..34782).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[34797..34806).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[34821..34860).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[34875..34896).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[34911..34932).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[34947..34960).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[34975..35021).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35179).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35180).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35180).3" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35180).4" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35180).5" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35180).6" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35180).7" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35180).9" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35180).10" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[34659..35191).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35347..35362).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35696..35731).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35898..35924).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[3068..3073).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3200..3211).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3319..3325).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3380..3385).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[11312..11328).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).5" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).5" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).33" Target="10354:[3684..3818).5" />
<Link Source="10354:[3720..3803).33" Target="10312:[35898..35924).1" />
<Link Source="10354:[3720..3803).33" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).33" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).34" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).35" Target="10354:[3684..3818).5" />
<Link Source="10354:[3720..3803).35" Target="10312:[35898..35924).1" />
<Link Source="10354:[3720..3803).35" Target="10354:[3720..3803).34" />
<Link Source="10354:[3720..3803).35" Target="10354:[11312..11328).2" />
<Link Source="10354:[11299..11330).4" Target="10354:[3720..3803).33" />
<Link Source="10354:[11299..11330).4" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35939..35985).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35999..38740).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[36067..36078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[3841..3991).1" Target="10312:[35888..35925).1" />
<Link Source="10354:[3841..3991).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10312:[35898..35924).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3966..3980).1" Target="10312:[36067..36078).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10312:[36067..36078).1" />
<Link Source="10312:[36067..36079).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).1" Target="10312:[35888..35925).1" />
<Link Source="10312:[36097..36258).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[36097..36258).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).3" Target="10312:[35377..35388).1" />
<Link Source="10312:[36097..36258).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).4" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).5" Target="10312:[35481..35502).1" />
<Link Source="10312:[36097..36258).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).6" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).6" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).7" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).7" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).8" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).8" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).9" Target="10312:[35624..35670).1" />
<Link Source="10312:[36097..36258).9" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).10" Target="10312:[35427..35466).1" />
<Link Source="10312:[36097..36258).10" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36257).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36258).1" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36258).2" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36258).3" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36258).4" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36258).5" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36258).6" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36258).7" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36258).8" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36258).9" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36258).10" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[33677..33692).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[33694..33705).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[33731..33752).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[33754..33775).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[36097..36257).1" />
<Link Source="10312:[33949..34005).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[33935..34006).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61572..61583).1" Target="10312:[33935..34006).2" />
<Link Source="10312:[61572..61583).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61585..61606).1" Target="10312:[33935..34006).3" />
<Link Source="10312:[61585..61606).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61608..61629).1" Target="10312:[33935..34006).4" />
<Link Source="10312:[61608..61629).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[61655..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61655..62327).1" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61655..62327).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61540..61570).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[33949..34005).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61572..61583).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61655..62327).4" />
<Link Source="10312:[61771..61840).2" Target="10312:[61540..61570).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[61771..61840).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[35745..35826).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[61655..62327).4" />
<Link Source="10312:[34022..34574).1" Target="10312:[61771..61840).2" />
<Link Source="10312:[34022..34574).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[36097..36258).11" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).1" Target="10312:[35313..35332).1" />
<Link Source="10312:[36278..36360).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).2" Target="10312:[35888..35925).1" />
<Link Source="10312:[36278..36360).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).3" Target="10312:[35427..35466).1" />
<Link Source="10312:[36278..36360).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).4" Target="10312:[33822..33868).1" />
<Link Source="10312:[36278..36360).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).3" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).4" />
<Link Source="10312:[36278..36360).5" Target="10354:[3932..3952).1" />
<Link Source="10312:[36278..36360).5" Target="10354:[3966..3972).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[61771..61840).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).6" Target="10312:[35999..38740).2" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9060..9070).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).4" Target="10354:[9012..9030).1" />
<Link Source="10354:[4058..4122).4" Target="10354:[9060..9070).1" />
<Link Source="10354:[9056..9141).1" Target="10354:[4058..4122).4" />
<Link Source="10354:[9056..9141).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9073..9077).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).5" Target="10354:[8981..9152).1" />
<Link Source="10354:[4058..4122).5" Target="10354:[9073..9077).1" />
<Link Source="10354:[9056..9141).2" Target="10354:[4058..4122).5" />
<Link Source="10354:[9056..9141).2" Target="10312:[36278..36360).6" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).1" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).2" />
<Link Source="10354:[9056..9141).3" Target="10312:[36278..36360).6" />
<Link Source="10312:[36566..36625).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[36566..36625).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).2" Target="10312:[36566..36625).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[36643..36855).2" Target="10312:[36643..36855).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[37061..37078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).4" Target="10312:[35888..35925).1" />
<Link Source="10354:[4919..5009).4" Target="10312:[37061..37078).1" />
<Link Source="10354:[4094..4107).6" Target="10354:[4919..5009).4" />
<Link Source="10354:[4094..4107).6" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).6" Target="10312:[37061..37078).1" />
<Link Source="10312:[37029..37117).1" Target="10354:[4094..4107).6" />
<Link Source="10312:[37029..37117).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37258..37278).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).5" Target="10312:[35313..35332).1" />
<Link Source="10354:[4919..5009).5" Target="10312:[37258..37278).1" />
<Link Source="10354:[4094..4107).7" Target="10354:[4919..5009).5" />
<Link Source="10354:[4094..4107).7" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).7" Target="10312:[37258..37278).1" />
<Link Source="10312:[37254..37416).1" Target="10354:[4094..4107).7" />
<Link Source="10312:[37254..37416).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[37436..37988).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38290..38338).1" Target="10312:[35999..38740).2" />
<Link Source="10306:[3345..3430).1" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3358..3364).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3196..3249).1" Target="10306:[3345..3430).1" />
<Link Source="10306:[3196..3249).1" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[36278..36360).5" />
<Link Source="10306:[3202..3247).1" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10306:[3358..3364).1" />
<Link Source="10306:[3209..3246).1" Target="10306:[3358..3364).1" />
<Link Source="10298:[471..492).11" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).11" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).11" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).11" Target="10306:[3209..3246).1" />
<Link Source="10306:[3351..3428).1" Target="10298:[471..492).11" />
<Link Source="10306:[3351..3428).1" Target="10312:[38290..38338).1" />
<Link Source="10312:[38286..38405).1" Target="10306:[3351..3428).1" />
<Link Source="10312:[38286..38405).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[38425..38538).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[38425..38538).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).3" Target="10312:[35265..38808).1" />
<Link Source="10312:[38425..38538).3" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).4" Target="10312:[35939..35985).1" />
<Link Source="10312:[38425..38538).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).1" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).3" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).4" />
<Link Source="10312:[38425..38538).5" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).2" Target="10312:[38556..38725).1" />
<Link Source="10312:[38556..38725).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38629..38706).1" Target="10312:[38425..38538).5" />
<Link Source="10312:[38629..38706).1" Target="10312:[38556..38725).2" />
<Link Source="10312:[38629..38706).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[38629..38706).2" Target="10312:[38556..38725).2" />
<Link Source="10312:[36067..36079).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).15" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).15" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).17" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).17" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).18" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).18" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).19" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).19" Target="10312:[38425..38538).5" />
<Link Source="10312:[33656..33675).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33707..33716).2" Target="10312:[36097..36258).15" />
<Link Source="10312:[33707..33716).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33754..33775).2" Target="10312:[36097..36258).17" />
<Link Source="10312:[33754..33775).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33777..33805).2" Target="10312:[36097..36258).18" />
<Link Source="10312:[33777..33805).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33807..33820).2" Target="10312:[36097..36258).19" />
<Link Source="10312:[33807..33820).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33870..33909).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[61608..61629).2" Target="10312:[33754..33775).2" />
<Link Source="10312:[61608..61629).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[34022..34574).4" Target="10312:[38629..38706).1" />
<Link Source="10312:[34022..34574).4" Target="10312:[38425..38538).5" />
<Link Source="10354:[9012..9030).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[9012..9030).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[8981..9152).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[8981..9152).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[9060..9070).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).9" Target="10354:[9012..9030).2" />
<Link Source="10354:[4058..4122).9" Target="10354:[9060..9070).2" />
<Link Source="10354:[9056..9141).5" Target="10354:[4058..4122).9" />
<Link Source="10354:[9056..9141).5" Target="10312:[38425..38538).5" />
<Link Source="10354:[9073..9077).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).10" Target="10354:[8981..9152).2" />
<Link Source="10354:[4058..4122).10" Target="10354:[9073..9077).2" />
<Link Source="10354:[9056..9141).6" Target="10354:[4058..4122).10" />
<Link Source="10354:[9056..9141).6" Target="10312:[38425..38538).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).6" />
<Link Source="10354:[9056..9141).7" Target="10312:[38425..38538).5" />
<Link Source="10312:[36566..36625).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).5" Target="10312:[36566..36625).2" />
<Link Source="10312:[36643..36855).5" Target="10312:[38629..38706).1" />
<Link Source="10312:[36643..36855).5" Target="10312:[36643..36855).4" />
<Link Source="10312:[36643..36855).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[37061..37078).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).11" Target="10312:[37061..37078).2" />
<Link Source="10354:[4094..4107).11" Target="10312:[38629..38706).1" />
<Link Source="10312:[37029..37117).4" Target="10354:[4094..4107).11" />
<Link Source="10312:[37029..37117).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37258..37278).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).12" Target="10312:[37258..37278).2" />
<Link Source="10354:[4094..4107).12" Target="10312:[38629..38706).1" />
<Link Source="10312:[37254..37416).4" Target="10354:[4094..4107).12" />
<Link Source="10312:[37254..37416).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37436..37988).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[38290..38338).2" Target="10312:[38425..38538).5" />
<Link Source="10306:[3345..3430).2" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3358..3364).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3196..3249).2" Target="10306:[3345..3430).2" />
<Link Source="10306:[3196..3249).2" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).5" Target="10306:[3196..3249).2" />
<Link Source="10306:[3202..3247).5" Target="10312:[38629..38706).1" />
<Link Source="10306:[3202..3247).5" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).6" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).6" Target="10306:[3358..3364).2" />
<Link Source="10306:[3209..3246).2" Target="10306:[3358..3364).2" />
<Link Source="10298:[471..492).12" Target="10306:[3202..3247).5" />
<Link Source="10298:[471..492).12" Target="10306:[3209..3246).2" />
<Link Source="10298:[494..511).12" Target="10306:[3202..3247).6" />
<Link Source="10298:[494..511).12" Target="10306:[3209..3246).2" />
<Link Source="10306:[3351..3428).4" Target="10298:[471..492).12" />
<Link Source="10306:[3351..3428).4" Target="10312:[38290..38338).2" />
<Link Source="10312:[38286..38405).3" Target="10306:[3351..3428).4" />
<Link Source="10312:[38286..38405).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[38756..38772).1" Target="10312:[38629..38706).1" />
<Link Source="10312:[38756..38772).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[38786..38796).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11383..11549).1" Target="10312:[35888..35925).1" />
<Link Source="10354:[11383..11549).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[11428..11440).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[3841..3991).3" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).3" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).3" Target="10354:[3841..3991).3" />
<Link Source="10354:[3887..3892).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).3" Target="10354:[3841..3991).3" />
<Link Source="10354:[3932..3952).3" Target="10312:[38629..38706).1" />
<Link Source="10354:[3932..3952).3" Target="10354:[3887..3892).3" />
<Link Source="10354:[3932..3952).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).3" Target="10354:[3966..3980).3" />
<Link Source="10354:[3966..3972).3" Target="10354:[3841..3991).3" />
<Link Source="10354:[3966..3972).3" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[11455..11538).1" Target="10312:[38786..38796).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).3" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10312:[38786..38796).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10312:[38786..38797).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35047..35180).11" Target="10312:[9577..9708).1" />
<Link Source="10312:[9577..9709).10" Target="10312:[8779..10524).1" />
<Link Source="10312:[8247..8394).10" Target="10312:[7991..8409).1" />
<Link Source="10346:[11369..11508).10" Target="10346:[11258..12246).6" />
<Link Source="10346:[11532..11552).1" Target="10346:[11258..12246).6" />
<Link Source="10354:[4919..5009).9" Target="10346:[10629..10648).1" />
<Link Source="10354:[4919..5009).9" Target="10346:[11532..11552).1" />
<Link Source="10354:[4094..4107).13" Target="10354:[4919..5009).9" />
<Link Source="10354:[4094..4107).13" Target="10354:[11506..11523).1" />
<Link Source="10354:[4094..4107).13" Target="10346:[11532..11552).1" />
<Link Source="10346:[11528..12231).1" Target="10354:[4094..4107).13" />
<Link Source="10346:[11528..12231).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[12335..12456).1" Target="10346:[10738..10759).1" />
<Link Source="10346:[12335..12456).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).2" Target="10346:[10629..10648).1" />
<Link Source="10346:[12335..12456).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[12335..12456).3" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[12335..12456).4" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[12335..12456).5" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[12335..12456).6" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).7" Target="10346:[10761..10774).1" />
<Link Source="10346:[12335..12456).7" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12456).8" Target="10312:[38629..38706).1" />
<Link Source="10346:[12335..12456).8" Target="10312:[4534..4657).1" />
<Link Source="10346:[12335..12455).1" Target="10312:[4534..4657).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12456).2" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12456).3" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12456).4" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12456).5" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12456).6" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12456).7" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12456).8" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[28963..29726).1" Target="10346:[11143..11188).2" />
<Link Source="10345:[28963..29726).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).1" Target="10345:[29004..29025).1" />
<Link Source="10345:[29314..29436).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).2" Target="10345:[29040..29059).1" />
<Link Source="10345:[29314..29436).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).3" Target="10345:[29074..29085).1" />
<Link Source="10345:[29314..29436).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).4" Target="10345:[29100..29109).1" />
<Link Source="10345:[29314..29436).4" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).5" Target="10345:[29124..29163).1" />
<Link Source="10345:[29314..29436).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).6" Target="10345:[29178..29199).1" />
<Link Source="10345:[29314..29436).6" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).7" Target="10345:[29214..29227).1" />
<Link Source="10345:[29314..29436).7" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).8" Target="10345:[29242..29288).1" />
<Link Source="10345:[29314..29436).8" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29435).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29436).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29436).2" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29436).3" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29436).4" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29436).5" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29436).6" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29436).7" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29436).8" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30127..30163).1" Target="10345:[29314..29435).1" />
<Link Source="10286:[2155..2260).1" Target="10345:[29788..29809).1" />
<Link Source="10286:[2155..2260).1" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2155..2260).1" />
<Link Source="10286:[2191..2245).1" Target="10354:[11506..11523).1" />
<Link Source="10286:[2191..2245).1" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).2" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).2" Target="10345:[30127..30163).1" />
<Link Source="10286:[2198..2244).1" Target="10345:[30127..30163).1" />
<Link Source="10298:[471..492).13" Target="10286:[2191..2245).1" />
<Link Source="10298:[471..492).13" Target="10286:[2198..2244).1" />
<Link Source="10298:[494..511).13" Target="10286:[2191..2245).2" />
<Link Source="10298:[494..511).13" Target="10286:[2198..2244).1" />
<Link Source="10345:[30098..30164).1" Target="10298:[471..492).13" />
<Link Source="10345:[30098..30164).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30180..30209).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[30180..30209).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29858..29869).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[30180..30209).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29738..31666).1" />
<Link Source="10345:[30223..30867).3" Target="10354:[11506..11523).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).2" />
<Link Source="10345:[30223..30867).3" Target="10345:[30203..30208).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29314..29435).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[29738..31666).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[30883..31655).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29314..29436).9" Target="10346:[12335..12455).1" />
<Link Source="10345:[29457..29477).1" Target="10346:[12335..12455).1" />
<Link Source="10354:[4919..5009).10" Target="10345:[29040..29059).1" />
<Link Source="10354:[4919..5009).10" Target="10345:[29457..29477).1" />
<Link Source="10354:[4094..4107).14" Target="10354:[4919..5009).10" />
<Link Source="10354:[4094..4107).14" Target="10345:[30223..30867).3" />
<Link Source="10354:[4094..4107).14" Target="10345:[29457..29477).1" />
<Link Source="10345:[29452..29715).1" Target="10354:[4094..4107).14" />
<Link Source="10345:[29452..29715).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).2" Target="10345:[29178..29199).1" />
<Link Source="10345:[29452..29715).2" Target="EXTERNAL" />
<Link Source="10345:[29452..29715).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).2" />
<Link Source="10345:[29452..29715).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[29566..29700).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).2" Target="10345:[29004..29025).1" />
<Link Source="10345:[29566..29700).2" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).3" Target="10345:[29040..29059).1" />
<Link Source="10345:[29566..29700).3" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).4" Target="10345:[29074..29085).1" />
<Link Source="10345:[29566..29700).4" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).5" Target="10345:[29100..29109).1" />
<Link Source="10345:[29566..29700).5" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).6" Target="10345:[29124..29163).1" />
<Link Source="10345:[29566..29700).6" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).7" Target="10345:[29178..29199).1" />
<Link Source="10345:[29566..29700).7" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).8" Target="10345:[29214..29227).1" />
<Link Source="10345:[29566..29700).8" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).9" Target="10345:[30026..30072).1" />
<Link Source="10345:[29566..29700).9" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29699).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29700).1" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29700).2" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29700).3" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29700).4" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29700).5" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29700).6" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29700).7" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29700).8" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29700).9" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[31804..31825).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[32114..32230).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).2" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).2" Target="10345:[29566..29699).1" />
<Link Source="10345:[32118..32174).1" Target="10345:[29566..29699).1" />
<Link Source="10298:[471..492).14" Target="10345:[32114..32230).1" />
<Link Source="10298:[471..492).14" Target="10345:[32118..32174).1" />
<Link Source="10298:[494..511).14" Target="10345:[32114..32230).2" />
<Link Source="10298:[494..511).14" Target="10345:[32118..32174).1" />
<Link Source="10345:[32275..32311).1" Target="10345:[29566..29699).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[31804..31825).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).5" Target="10286:[2155..2260).2" />
<Link Source="10286:[2191..2245).5" Target="10345:[30223..30867).3" />
<Link Source="10286:[2191..2245).5" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).6" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).6" Target="10345:[32275..32311).1" />
<Link Source="10286:[2198..2244).2" Target="10345:[32275..32311).1" />
<Link Source="10298:[471..492).15" Target="10286:[2191..2245).5" />
<Link Source="10298:[471..492).15" Target="10286:[2198..2244).2" />
<Link Source="10298:[494..511).15" Target="10286:[2191..2245).6" />
<Link Source="10298:[494..511).15" Target="10286:[2198..2244).2" />
<Link Source="10345:[32246..32312).1" Target="10298:[471..492).15" />
<Link Source="10345:[32246..32312).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[31734..31789).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[29566..29700).10" Target="10345:[29452..29715).5" />
<Link Source="10346:[12335..12456).9" Target="10312:[4534..4657).1" />
<Link Source="10354:[3720..3803).41" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).41" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).41" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).41" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).43" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).43" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).43" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).43" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).3" Target="10354:[3720..3803).41" />
<Link Source="10312:[4680..4787).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).21" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).21" Target="10345:[30223..30867).3" />
<Link Source="10312:[4534..4658).25" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).25" Target="10345:[30223..30867).3" />
<Link Source="10346:[10663..10672).2" Target="10312:[4534..4658).21" />
<Link Source="10346:[10663..10672).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[10738..10759).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[10761..10774).2" Target="10312:[4534..4658).25" />
<Link Source="10346:[10761..10774).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[10861..10875).2" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).7" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).7" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).49" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).49" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).49" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).49" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).50" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).51" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).51" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).51" Target="10354:[3720..3803).50" />
<Link Source="10354:[3720..3803).51" Target="10346:[10861..10875).2" />
<Link Source="10346:[10848..10877).4" Target="10354:[3720..3803).49" />
<Link Source="10346:[10848..10877).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[10897..10914).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).2" Target="10346:[10897..10914).2" />
<Link Source="10346:[7672..7773).4" Target="10346:[7666..7775).2" />
<Link Source="10346:[7672..7773).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[7672..7773).4" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).4" Target="10346:[10897..10914).2" />
<Link Source="10346:[10893..11127).3" Target="10346:[7672..7773).4" />
<Link Source="10346:[10893..11127).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[3460..3499).2" Target="10345:[30223..30867).3" />
<Link Source="10346:[3525..3638).8" Target="10345:[30223..30867).3" />
<Link Source="10346:[3654..3816).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[3712..3801).1" Target="10345:[30223..30867).3" />
<Link Source="10346:[3712..3801).1" Target="10346:[3654..3816).4" />
<Link Source="10346:[3712..3801).2" Target="10346:[3460..3499).2" />
<Link Source="10346:[3712..3801).2" Target="10346:[3654..3816).4" />
<Link Source="10346:[3712..3801).4" Target="10346:[3654..3816).4" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3069..3118).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3102..3117).1" Target="10345:[3069..3118).1" />
<Link Source="10345:[3102..3117).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3132..3193).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3171..3192).1" Target="10345:[3132..3193).1" />
<Link Source="10345:[3171..3192).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3207..4163).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3299..3362).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3299..3362).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3031..3043).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3476..3483).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).4" Target="10345:[3571..3619).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).4" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).2" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).4" />
<Link Source="10345:[4179..4307).5" Target="10346:[3712..3801).4" />
<Link Source="10345:[4279..4292).1" Target="10345:[922..1186).1" />
<Link Source="10345:[4279..4292).1" Target="10345:[4179..4307).5" />
<Link Source="10346:[11369..11508).14" Target="10346:[10663..10672).2" />
<Link Source="10346:[11369..11508).14" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).17" Target="10346:[10738..10759).2" />
<Link Source="10346:[11369..11508).17" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).18" Target="10346:[10761..10774).2" />
<Link Source="10346:[11369..11508).18" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).19" Target="10345:[32042..32088).1" />
<Link Source="10346:[11369..11508).19" Target="10345:[4279..4292).1" />
<Link Source="10312:[7718..7727).2" Target="10346:[11369..11508).14" />
<Link Source="10312:[7718..7727).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[7793..7814).2" Target="10346:[11369..11508).17" />
<Link Source="10312:[7793..7814).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[7816..7829).2" Target="10346:[11369..11508).18" />
<Link Source="10312:[7816..7829).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[7903..7936).5" Target="10345:[4279..4292).1" />
<Link Source="10312:[7916..7934).2" Target="10345:[4279..4292).1" />
<Link Source="10353:[4698..4724).3" Target="10312:[7903..7936).5" />
<Link Source="10353:[4698..4724).3" Target="10312:[7916..7934).2" />
<Link Source="10353:[4750..4847).5" Target="10353:[4698..4724).3" />
<Link Source="10353:[4750..4847).5" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).5" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).9" Target="10353:[4698..4724).3" />
<Link Source="10353:[4863..5000).9" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).9" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[5079..5183).5" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).5" Target="10312:[7916..7934).2" />
<Link Source="10353:[5197..5323).7" Target="10353:[4698..4724).3" />
<Link Source="10353:[5197..5323).7" Target="10353:[5079..5183).5" />
<Link Source="10353:[5197..5323).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).13" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).14" Target="10353:[4698..4724).3" />
<Link Source="10353:[5485..5759).14" Target="10353:[5485..5759).13" />
<Link Source="10353:[5485..5759).14" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).15" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).9" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).9" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).11" Target="10353:[4698..4724).3" />
<Link Source="10353:[5775..5979).11" Target="10353:[5775..5979).9" />
<Link Source="10353:[5775..5979).11" Target="10312:[7916..7934).2" />
<Link Source="10353:[5995..6029).7" Target="10353:[5775..5979).11" />
<Link Source="10353:[5995..6029).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[6002..6028).3" Target="10312:[7916..7934).2" />
<Link Source="10353:[6343..6358).3" Target="10353:[5995..6029).7" />
<Link Source="10353:[6343..6358).3" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).13" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6343..6358).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6384..6410).13" />
<Link Source="10353:[6384..6410).14" Target="10353:[6002..6028).3" />
<Link Source="10312:[7952..7977).5" Target="10345:[4279..4292).1" />
<Link Source="10312:[7952..7977).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7952..7977).5" />
<Link Source="10312:[7952..7977).6" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7718..7727).2" />
<Link Source="10312:[8049..8181).4" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7793..7814).2" />
<Link Source="10312:[8049..8181).6" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7816..7829).2" />
<Link Source="10312:[8049..8181).7" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8181).8" Target="10346:[11369..11508).19" />
<Link Source="10312:[8049..8181).8" Target="10345:[4279..4292).1" />
<Link Source="10312:[8049..8180).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8181).4" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8181).6" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8181).7" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8181).8" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[18997..19015).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[19017..19028).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[19064..19085).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[19188..19242).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[61540..61570).3" Target="10312:[19174..19243).1" />
<Link Source="10312:[61540..61570).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61572..61583).3" Target="10312:[19174..19243).2" />
<Link Source="10312:[61572..61583).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61585..61606).3" Target="10312:[19174..19243).3" />
<Link Source="10312:[61585..61606).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61608..61629).3" Target="10312:[19174..19243).4" />
<Link Source="10312:[61608..61629).3" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).14" Target="10312:[61585..61606).3" />
<Link Source="10312:[61655..62327).14" Target="10312:[61540..61570).3" />
<Link Source="10312:[61655..62327).14" Target="10312:[19188..19242).1" />
<Link Source="10312:[61874..62327).1" Target="10312:[61540..61570).3" />
<Link Source="10312:[61874..62327).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[61874..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61874..62327).1" Target="10312:[61655..62327).14" />
<Link Source="10312:[62098..62327).1" Target="10312:[61585..61606).3" />
<Link Source="10312:[62098..62327).1" Target="EXTERNAL" />
<Link Source="10312:[62098..62327).1" Target="10312:[61874..62327).1" />
<Link Source="10312:[62098..62327).2" Target="10312:[61874..62327).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[61572..61583).3" />
<Link Source="10312:[62279..62312).1" Target="10312:[62098..62327).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19326..19460).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19030..19039).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19087..19100).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19102..19148).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19259..19531).1" />
<Link Source="10312:[19366..19459).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63439..63448).1" Target="10312:[19326..19460).2" />
<Link Source="10312:[63439..63448).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63450..63471).1" Target="10312:[19326..19460).3" />
<Link Source="10312:[63450..63471).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63503..63516).1" Target="10312:[19326..19460).6" />
<Link Source="10312:[63503..63516).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63518..63564).1" Target="10312:[19326..19460).7" />
<Link Source="10312:[63518..63564).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19064..19085).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63638..63668).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63682..63706).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[19366..19459).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[83750..83991).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[83750..83991).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).3" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).3" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).9" Target="10306:[3196..3249).3" />
<Link Source="10306:[3202..3247).9" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).9" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).10" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).10" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).3" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).16" Target="10306:[3202..3247).9" />
<Link Source="10298:[471..492).16" Target="10306:[3209..3246).3" />
<Link Source="10298:[494..511).16" Target="10306:[3202..3247).10" />
<Link Source="10298:[494..511).16" Target="10306:[3209..3246).3" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).16" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).19" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).19" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).19" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).19" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78642..78772).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8034..8062).1" Target="10312:[78642..78772).2" />
<Link Source="10346:[8034..8062).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8064..8095).1" Target="10312:[78642..78772).3" />
<Link Source="10346:[8064..8095).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8097..8143).1" Target="10312:[78642..78772).4" />
<Link Source="10346:[8097..8143).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8145..8184).1" Target="10312:[78642..78772).5" />
<Link Source="10346:[8145..8184).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[78346..78783).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[64121..69285).2" />
<Link Source="10346:[7977..8737).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8210..8251).1" Target="10346:[7977..8737).1" />
<Link Source="10346:[8210..8251).1" Target="10312:[64121..69285).2" />
<Link Source="10346:[8210..8251).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8265..8726).1" />
<Link Source="10346:[8265..8726).2" Target="10312:[78649..78771).1" />
<Link Source="10346:[8323..8450).1" Target="10346:[8019..8032).1" />
<Link Source="10346:[8323..8450).1" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8323..8450).2" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).3" Target="10346:[8034..8062).1" />
<Link Source="10346:[8323..8450).3" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).4" Target="10346:[8064..8095).1" />
<Link Source="10346:[8323..8450).4" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).5" Target="10346:[8097..8143).1" />
<Link Source="10346:[8323..8450).5" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).6" Target="10346:[8265..8726).2" />
<Link Source="10346:[8330..8449).1" Target="10346:[8265..8726).2" />
<Link Source="10286:[30070..30083).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30070..30083).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30098..30120).1" Target="10346:[8323..8450).2" />
<Link Source="10286:[30098..30120).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30135..30160).1" Target="10346:[8323..8450).3" />
<Link Source="10286:[30135..30160).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30175..30206).1" Target="10346:[8323..8450).4" />
<Link Source="10286:[30175..30206).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30221..30268).1" Target="10346:[8323..8450).5" />
<Link Source="10286:[30221..30268).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30283..30330).1" Target="10346:[8323..8450).6" />
<Link Source="10286:[30283..30330).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30012..30691).1" Target="10346:[7977..8737).1" />
<Link Source="10286:[30012..30691).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).2" />
<Link Source="10286:[30356..30522).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30360..30412).1" Target="10346:[8330..8449).1" />
<Link Source="10298:[471..492).20" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).20" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).20" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).20" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10346:[8330..8449).1" />
<Link Source="10286:[30545..30679).1" Target="10346:[8330..8449).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).2" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[8992..9004).1" Target="10060:[6235..9907).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[8992..9004).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10312:[19478..19516).1" Target="10312:[69237..69270).2" />
<Link Source="10312:[19478..19516).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19478..19515).1" Target="10312:[19259..19531).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19516).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[18976..18995).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10272..10276).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[4058..4122).16" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).16" Target="10354:[10272..10276).1" />
<Link Source="10354:[4094..4107).16" Target="10354:[4058..4122).16" />
<Link Source="10354:[4094..4107).16" Target="10312:[67582..69285).2" />
<Link Source="10354:[4094..4107).16" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4094..4107).16" />
<Link Source="10354:[10268..10665).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10312:[19478..19515).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10312:[67582..69285).2" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10312:[19478..19516).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10354:[8248..8278).2" />
<Link Source="10312:[19259..19531).4" Target="10354:[8292..8298).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[8049..8180).1" />
<Link Source="10346:[11532..11552).2" Target="10345:[4279..4292).1" />
<Link Source="10354:[4094..4107).18" Target="10346:[11532..11552).2" />
<Link Source="10354:[4094..4107).18" Target="10354:[8248..8278).2" />
<Link Source="10346:[11528..12231).3" Target="10354:[4094..4107).18" />
<Link Source="10346:[11528..12231).3" Target="10345:[4279..4292).1" />
<Link Source="10346:[11665..12181).1" Target="10346:[11528..12231).3" />
<Link Source="10346:[11665..12181).2" Target="10346:[10663..10672).2" />
<Link Source="10346:[11665..12181).2" Target="10346:[11665..12181).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11528..12231).3" />
<Link Source="10346:[11665..12181).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[11665..12181).3" Target="10346:[11528..12231).3" />
<Link Source="10346:[11710..11746).1" Target="10346:[11528..12231).3" />
<Link Source="10286:[2155..2260).3" Target="10346:[10738..10759).2" />
<Link Source="10286:[2155..2260).3" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).9" Target="10286:[2155..2260).3" />
<Link Source="10286:[2191..2245).9" Target="10354:[8248..8278).2" />
<Link Source="10286:[2191..2245).9" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).10" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).10" Target="10346:[11710..11746).1" />
<Link Source="10286:[2198..2244).3" Target="10346:[11710..11746).1" />
<Link Source="10298:[471..492).22" Target="10286:[2191..2245).9" />
<Link Source="10298:[471..492).22" Target="10286:[2198..2244).3" />
<Link Source="10298:[494..511).22" Target="10286:[2191..2245).10" />
<Link Source="10298:[494..511).22" Target="10286:[2198..2244).3" />
<Link Source="10346:[11665..12181).4" Target="10298:[471..492).22" />
<Link Source="10346:[11665..12181).4" Target="10346:[11528..12231).3" />
<Link Source="10346:[11683..11747).1" Target="10346:[11528..12231).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11665..12181).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28225..28251).1" Target="10346:[11665..12181).4" />
<Link Source="10345:[28225..28251).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28185..28951).1" Target="10345:[4279..4292).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28277..28305).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28300..28304).1" Target="10345:[28277..28305).1" />
<Link Source="10345:[28300..28304).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).1" Target="10345:[28212..28223).1" />
<Link Source="10345:[28319..28911).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).2" Target="10345:[28277..28305).1" />
<Link Source="10345:[28319..28911).2" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28185..28951).1" />
<Link Source="10345:[28319..28911).3" Target="10354:[8248..8278).2" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).2" />
<Link Source="10345:[28319..28911).3" Target="10354:[8292..8298).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28300..28304).1" />
<Link Source="10345:[28319..28911).3" Target="10346:[11683..11747).1" />
<Link Source="10345:[28927..28940).1" Target="10346:[11683..11747).1" />
<Link Source="10346:[11665..12181).6" Target="10345:[28927..28940).1" />
<Link Source="10346:[11665..12181).6" Target="10346:[11528..12231).3" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).2" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).6" />
<Link Source="10346:[11665..12181).7" Target="10346:[11528..12231).3" />
<Link Source="10346:[12205..12212).1" Target="10346:[11528..12231).3" />
<Link Source="10312:[4685..4699).3" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).8" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).8" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).57" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).57" Target="10345:[28319..28911).3" />
<Link Source="10354:[3720..3803).57" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).57" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).5" Target="10354:[3720..3803).57" />
<Link Source="10312:[4680..4787).5" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).1" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).5" />
<Link Source="10312:[4826..5058).11" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).11" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).11" Target="10345:[30223..30867).3" />
<Link Source="10312:[4826..5058).12" Target="10345:[30223..30867).3" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[5821..5867).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10345:[28319..28911).3" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).14" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).14" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).14" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).20" Target="10354:[4919..5009).14" />
<Link Source="10354:[4058..4122).20" Target="10354:[4962..4966).14" />
<Link Source="10354:[4094..4107).20" Target="10354:[4058..4122).20" />
<Link Source="10354:[4094..4107).20" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).20" Target="10354:[4962..4966).14" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).20" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41696..41709).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[43799..44676).4" Target="10319:[41696..41709).1" />
<Link Source="10319:[43799..44676).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).5" Target="10319:[43799..44676).2" />
<Link Source="10319:[43799..44676).5" Target="10319:[43799..44676).4" />
<Link Source="10319:[43799..44676).5" Target="10319:[20515..20674).1" />
<Link Source="10319:[43907..44661).1" Target="10319:[43799..44676).5" />
<Link Source="10319:[43907..44661).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43907..44661).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[43907..44661).2" Target="10319:[43907..44661).1" />
<Link Source="10319:[43907..44661).2" Target="10319:[43799..44676).5" />
<Link Source="10319:[44578..44642).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[44578..44642).1" Target="10319:[43907..44661).2" />
<Link Source="10319:[44578..44642).2" Target="10319:[41889..41914).1" />
<Link Source="10319:[44578..44642).2" Target="10319:[43907..44661).2" />
<Link Source="10319:[44594..44641).1" Target="10319:[43907..44661).2" />
<Link Source="10319:[45850..45875).1" Target="10319:[44578..44642).1" />
<Link Source="10319:[45850..45875).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45877..45902).1" Target="10319:[44578..44642).2" />
<Link Source="10319:[45877..45902).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45797..47405).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[45797..47405).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45928..45952).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45966..46327).1" Target="10319:[45850..45875).1" />
<Link Source="10319:[45966..46327).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[45966..46327).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[46300..46312).1" Target="10319:[45966..46327).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[46300..46312).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).15" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).15" Target="10319:[85508..85528).1" />
<Link Source="10319:[85504..106825).1" Target="10354:[4919..5009).15" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).3" Target="10319:[84907..109876).4" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).1" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).2" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).4" Target="10354:[11383..11549).2" />
<Link Source="10354:[3841..3991).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3887..3892).4" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).4" Target="10354:[3841..3991).4" />
<Link Source="10354:[3887..3892).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3932..3952).4" Target="10354:[3841..3991).4" />
<Link Source="10354:[3932..3952).4" Target="10319:[76428..76480).1" />
<Link Source="10354:[3932..3952).4" Target="10354:[3887..3892).4" />
<Link Source="10354:[3932..3952).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3966..3980).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[3966..3972).4" Target="10354:[3966..3980).4" />
<Link Source="10354:[3966..3972).4" Target="10354:[3841..3991).4" />
<Link Source="10354:[3966..3972).4" Target="10354:[11428..11440).2" />
<Link Source="10354:[11428..11441).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).4" Target="10319:[45408..45421).1" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[3932..3952).4" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10354:[3932..3952).4" />
<Link Source="10286:[10053..10100).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10354:[3932..3952).4" />
<Link Source="10286:[10114..10186).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10121..10185).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10600..10652).1" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).3" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).3" Target="10287:[2546..2558).1" />
<Link Source="10287:[2582..2656).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1144..1157).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1144..1157).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1159..1181).1" Target="10287:[2539..2781).3" />
<Link Source="10287:[1159..1181).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1092..1409).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1092..1409).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1302).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1159..1181).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[2582..2656).1" />
<Link Source="10319:[18724..18740).1" Target="10319:[71457..71560).1" />
<Link Source="10287:[1857..1908).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1857..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1893..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1893..1908).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1893..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1271..1291).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1893..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10319:[18710..18742).1" Target="10287:[1860..1908).1" />
<Link Source="10319:[18710..18742).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[18758..18826).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[18431..18454).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[71457..71560).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[18483..18522).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[71457..71560).1" />
<Link Source="10319:[18765..18825).1" Target="10319:[71457..71560).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[18758..18826).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[18758..18826).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[18758..18826).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[18758..18826).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[18300..18837).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[18765..18825).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1683..1716).1" Target="10286:[10465..10663).2" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[71457..71582).1" Target="10319:[21212..21313).1" />
<Link Source="10287:[1784..1818).1" Target="10319:[52260..52274).1" />
<Link Source="10287:[1784..1818).1" Target="10319:[71457..71582).1" />
<Link Source="10287:[1787..1793).1" Target="10319:[71457..71582).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1784..1818).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1535..1573).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1787..1818).1" Target="10287:[1538..1573).1" />
<Link Source="10287:[1787..1818).1" Target="10319:[71457..71582).1" />
<Link Source="10319:[71597..71678).1" Target="10319:[71295..71320).1" />
<Link Source="10319:[71597..71678).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71678).2" Target="10287:[1787..1818).1" />
<Link Source="10319:[71597..71678).2" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71678).3" Target="10319:[71214..71239).1" />
<Link Source="10319:[71597..71678).3" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71678).4" Target="10319:[21212..21313).1" />
<Link Source="10319:[71597..71677).1" Target="10319:[21212..21313).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[71597..71678).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[21531..21544).1" Target="10319:[71597..71678).2" />
<Link Source="10286:[21531..21544).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[21546..21561).1" Target="10319:[71597..71678).3" />
<Link Source="10286:[21546..21561).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[21563..21583).1" Target="10319:[71597..71678).4" />
<Link Source="10286:[21563..21583).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[71130..73408).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[71597..71677).1" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[71597..71677).1" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[71597..71677).1" />
<Link Source="10286:[21609..21699).1" Target="10319:[71597..71677).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[71597..71677).1" />
<Link Source="10319:[71694..71825).1" Target="10287:[1787..1818).1" />
<Link Source="10319:[71694..71825).1" Target="10286:[10465..10663).2" />
<Link Source="10319:[71694..71825).1" Target="EXTERNAL" />
<Link Source="10319:[71694..71825).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[71841..72158).1" Target="10319:[71694..71825).1" />
<Link Source="10319:[71841..72158).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).1" Target="10319:[71254..71280).1" />
<Link Source="10319:[72286..72420).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).2" Target="10319:[71295..71320).1" />
<Link Source="10319:[72286..72420).2" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).3" Target="10319:[71335..71374).1" />
<Link Source="10319:[72286..72420).3" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).4" Target="10319:[71389..71420).1" />
<Link Source="10319:[72286..72420).4" Target="10319:[21212..21313).1" />
<Link Source="10319:[72286..72420).5" Target="10287:[1787..1818).1" />
<Link Source="10319:[72286..72420).5" Target="10319:[21212..21313).1" />
<Link Source="10319:[72298..72419).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[39524..39547).1" Target="10319:[72286..72420).1" />
<Link Source="10319:[39524..39547).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39562..39587).1" Target="10319:[72286..72420).2" />
<Link Source="10319:[39562..39587).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39602..39641).1" Target="10319:[72286..72420).3" />
<Link Source="10319:[39602..39641).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39656..39687).1" Target="10319:[72286..72420).4" />
<Link Source="10319:[39656..39687).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39702..39743).1" Target="10319:[72286..72420).5" />
<Link Source="10319:[39702..39743).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[39419..41043).1" Target="10319:[71130..73408).1" />
<Link Source="10319:[39419..41043).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[40338..41032).1" Target="10319:[39524..39547).1" />
<Link Source="10319:[40338..41032).1" Target="10286:[10465..10663).2" />
<Link Source="10319:[40338..41032).1" Target="10319:[72298..72419).1" />
<Link Source="10319:[40659..40820).1" Target="10319:[39524..39547).1" />
<Link Source="10319:[40659..40820).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[40659..40820).2" Target="10319:[39562..39587).1" />
<Link Source="10319:[40659..40820).2" Target="10319:[40338..41032).1" />
<Link Source="10319:[40659..40820).3" Target="10319:[39602..39641).1" />
<Link Source="10319:[40659..40820).3" Target="10319:[40338..41032).1" />
<Link Source="10319:[40659..40820).4" Target="10319:[39656..39687).1" />
<Link Source="10319:[40659..40820).4" Target="10319:[40338..41032).1" />
<Link Source="10319:[40659..40820).5" Target="10319:[39702..39743).1" />
<Link Source="10319:[40659..40820).5" Target="10319:[40338..41032).1" />
<Link Source="10319:[40666..40819).1" Target="10319:[40338..41032).1" />
<Link Source="10319:[41849..41874).2" Target="10319:[40659..40820).1" />
<Link Source="10319:[41849..41874).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[41889..41914).2" Target="10319:[40659..40820).2" />
<Link Source="10319:[41889..41914).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[41929..41968).2" Target="10319:[40659..40820).3" />
<Link Source="10319:[41929..41968).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[41983..42014).2" Target="10319:[40659..40820).4" />
<Link Source="10319:[41983..42014).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[42029..42063).2" Target="10319:[40659..40820).5" />
<Link Source="10319:[42029..42063).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[41732..45579).2" Target="10319:[39419..41043).1" />
<Link Source="10319:[41732..45579).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[42478..42805).4" Target="10319:[41849..41874).2" />
<Link Source="10319:[42478..42805).4" Target="10319:[40666..40819).1" />
<Link Source="10319:[42821..42938).9" Target="10319:[41849..41874).2" />
<Link Source="10319:[42821..42938).9" Target="10319:[40338..41032).1" />
<Link Source="10319:[42821..42938).9" Target="10319:[40666..40819).1" />
<Link Source="10319:[42821..42938).10" Target="10319:[42029..42063).2" />
<Link Source="10319:[42821..42938).10" Target="10319:[40666..40819).1" />
<Link Source="10319:[42821..42938).11" Target="10319:[41849..41874).2" />
<Link Source="10319:[42821..42938).11" Target="10319:[40666..40819).1" />
<Link Source="10319:[42821..42938).12" Target="10319:[40666..40819).1" />
<Link Source="10319:[42821..42938).14" Target="10319:[41889..41914).2" />
<Link Source="10319:[42821..42938).14" Target="10319:[40666..40819).1" />
<Link Source="10319:[42839..42937).2" Target="10319:[40666..40819).1" />
<Link Source="10319:[63849..63870).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63849..63870).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63885..63919).2" Target="10319:[42821..42938).10" />
<Link Source="10319:[63885..63919).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63934..63945).2" Target="10319:[42821..42938).11" />
<Link Source="10319:[63934..63945).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63960..63969).2" Target="10319:[42821..42938).12" />
<Link Source="10319:[63960..63969).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63984..64009).2" Target="10319:[42821..42938).14" />
<Link Source="10319:[63984..64009).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63768..64484).2" Target="10319:[41732..45579).2" />
<Link Source="10319:[63768..64484).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).5" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[64035..64445).5" />
<Link Source="10319:[64035..64445).6" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).7" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).7" Target="10319:[40338..41032).1" />
<Link Source="10319:[64035..64445).7" Target="EXTERNAL" />
<Link Source="10319:[64035..64445).7" Target="10319:[42839..42937).2" />
<Link Source="10319:[64461..64473).3" Target="10319:[42839..42937).2" />
<Link Source="10319:[42821..42938).15" Target="10319:[64461..64473).3" />
<Link Source="10319:[42821..42938).15" Target="10319:[40666..40819).1" />
<Link Source="10319:[42952..43079).4" Target="10319:[40666..40819).1" />
<Link Source="10319:[42952..43079).5" Target="10319:[42821..42938).15" />
<Link Source="10319:[42952..43079).5" Target="10319:[42952..43079).4" />
<Link Source="10319:[42952..43079).5" Target="10319:[40666..40819).1" />
<Link Source="10354:[11312..11328).3" Target="10319:[40666..40819).1" />
<Link Source="10354:[3684..3818).9" Target="10319:[40666..40819).1" />
<Link Source="10354:[3684..3818).9" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).61" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).61" Target="10319:[40666..40819).1" />
<Link Source="10354:[3720..3803).61" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).61" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).62" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).63" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).63" Target="10319:[40666..40819).1" />
<Link Source="10354:[3720..3803).63" Target="10354:[3720..3803).62" />
<Link Source="10354:[3720..3803).63" Target="10354:[11312..11328).3" />
<Link Source="10354:[11299..11330).7" Target="10354:[3720..3803).61" />
<Link Source="10354:[11299..11330).7" Target="10319:[40666..40819).1" />
<Link Source="10319:[50330..50355).2" Target="10319:[41849..41874).2" />
<Link Source="10319:[50330..50355).2" Target="10319:[40666..40819).1" />
<Link Source="10312:[1108..1117).2" Target="10319:[40666..40819).1" />
<Link Source="10312:[1222..1235).2" Target="10319:[40666..40819).1" />
<Link Source="10312:[1585..1724).13" Target="10312:[1108..1117).2" />
<Link Source="10312:[1585..1724).13" Target="10319:[41849..41874).2" />
<Link Source="10312:[1585..1724).16" Target="10312:[1222..1235).2" />
<Link Source="10312:[1585..1724).16" Target="10319:[41849..41874).2" />
<Link Source="10312:[5830..5839).2" Target="10312:[1585..1724).13" />
<Link Source="10312:[5830..5839).2" Target="10319:[41849..41874).2" />
<Link Source="10312:[5944..5957).2" Target="10312:[1585..1724).16" />
<Link Source="10312:[5944..5957).2" Target="10319:[41849..41874).2" />
<Link Source="10312:[5663..6444).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5663..6444).2" Target="10319:[41849..41874).2" />
<Link Source="10312:[6287..6418).1" Target="10319:[41849..41874).2" />
<Link Source="10312:[6287..6418).1" Target="10319:[42029..42063).2" />
<Link Source="10312:[6287..6418).2" Target="10319:[42029..42063).2" />
<Link Source="10312:[6287..6418).4" Target="10312:[5830..5839).2" />
<Link Source="10312:[6287..6418).4" Target="10319:[42029..42063).2" />
<Link Source="10312:[6287..6418).5" Target="10319:[41929..41968).2" />
<Link Source="10312:[6287..6418).5" Target="10319:[42029..42063).2" />
<Link Source="10312:[6287..6418).7" Target="10312:[5663..6444).2" />
<Link Source="10312:[6287..6418).7" Target="10319:[42029..42063).2" />
<Link Source="10312:[6287..6418).8" Target="10312:[5944..5957).2" />
<Link Source="10312:[6287..6418).8" Target="10319:[42029..42063).2" />
<Link Source="10312:[6287..6417).1" Target="10319:[42029..42063).2" />
<Link Source="10312:[7652..7671).3" Target="10312:[6287..6418).1" />
<Link Source="10312:[7652..7671).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7673..7703).3" Target="10312:[6287..6418).2" />
<Link Source="10312:[7673..7703).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7705..7716).3" Target="10312:[6287..6418).1" />
<Link Source="10312:[7705..7716).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7718..7727).3" Target="10312:[6287..6418).4" />
<Link Source="10312:[7718..7727).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7729..7768).3" Target="10312:[6287..6418).5" />
<Link Source="10312:[7729..7768).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7770..7791).3" Target="10312:[6287..6418).1" />
<Link Source="10312:[7770..7791).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7793..7814).3" Target="10312:[6287..6418).7" />
<Link Source="10312:[7793..7814).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7816..7829).3" Target="10312:[6287..6418).8" />
<Link Source="10312:[7816..7829).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7831..7877).3" Target="10312:[6287..6418).1" />
<Link Source="10312:[7831..7877).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7615..8420).3" Target="10312:[5663..6444).2" />
<Link Source="10312:[7615..8420).3" Target="10312:[6287..6417).1" />
<Link Source="10312:[7903..7936).9" Target="10312:[7770..7791).3" />
<Link Source="10312:[7903..7936).9" Target="10312:[6287..6417).1" />
<Link Source="10312:[7916..7934).3" Target="10312:[6287..6417).1" />
<Link Source="10353:[4698..4724).4" Target="10312:[7903..7936).9" />
<Link Source="10353:[4698..4724).4" Target="10312:[7916..7934).3" />
<Link Source="10353:[4750..4847).7" Target="10353:[4698..4724).4" />
<Link Source="10353:[4750..4847).7" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).7" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).13" Target="10353:[4698..4724).4" />
<Link Source="10353:[4863..5000).13" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).14" Target="10312:[7916..7934).3" />
<Link Source="10353:[5079..5183).7" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).7" Target="10312:[7916..7934).3" />
<Link Source="10353:[5197..5323).10" Target="10353:[4698..4724).4" />
<Link Source="10353:[5197..5323).10" Target="10353:[5079..5183).7" />
<Link Source="10353:[5197..5323).10" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).19" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).19" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).20" Target="10353:[4698..4724).4" />
<Link Source="10353:[5485..5759).20" Target="10353:[5485..5759).19" />
<Link Source="10353:[5485..5759).20" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).21" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).13" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).15" Target="10353:[4698..4724).4" />
<Link Source="10353:[5775..5979).15" Target="10353:[5775..5979).13" />
<Link Source="10353:[5775..5979).15" Target="10312:[7916..7934).3" />
<Link Source="10353:[5995..6029).10" Target="10353:[5775..5979).15" />
<Link Source="10353:[5995..6029).10" Target="10312:[7916..7934).3" />
<Link Source="10353:[6002..6028).4" Target="10312:[7916..7934).3" />
<Link Source="10353:[6343..6358).4" Target="10353:[5995..6029).10" />
<Link Source="10353:[6343..6358).4" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).19" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6343..6358).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6384..6410).19" />
<Link Source="10353:[6384..6410).20" Target="10353:[6002..6028).4" />
<Link Source="10312:[7952..7977).9" Target="10312:[6287..6417).1" />
<Link Source="10312:[7952..7977).10" Target="10312:[7718..7727).3" />
<Link Source="10312:[7952..7977).10" Target="10312:[7952..7977).9" />
<Link Source="10312:[7952..7977).10" Target="10312:[6287..6417).1" />
<Link Source="10312:[19030..19039).2" Target="10312:[7718..7727).3" />
<Link Source="10312:[19030..19039).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[19087..19100).2" Target="10312:[7816..7829).3" />
<Link Source="10312:[19087..19100).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[61608..61629).4" Target="10312:[7793..7814).3" />
<Link Source="10312:[61608..61629).4" Target="10312:[7673..7703).3" />
<Link Source="10312:[63439..63448).2" Target="10312:[19030..19039).2" />
<Link Source="10312:[63439..63448).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[63473..63501).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[63503..63516).2" Target="10312:[19087..19100).2" />
<Link Source="10312:[63503..63516).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[63566..63612).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[63638..63668).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[63682..63706).2" Target="10312:[7673..7703).3" />
<Link Source="10312:[64353..69285).9" Target="10312:[63439..63448).2" />
<Link Source="10312:[64353..69285).9" Target="10312:[7793..7814).3" />
<Link Source="10312:[64353..69285).10" Target="10312:[63503..63516).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[7793..7814).3" />
<Link Source="10312:[64353..69285).12" Target="10312:[63682..63706).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[7793..7814).3" />
<Link Source="10312:[80978..80991).2" Target="10312:[7793..7814).3" />
<Link Source="10312:[80993..81002).2" Target="10312:[64353..69285).9" />
<Link Source="10312:[80993..81002).2" Target="10312:[7793..7814).3" />
<Link Source="10312:[81004..81017).2" Target="10312:[64353..69285).10" />
<Link Source="10312:[81004..81017).2" Target="10312:[7793..7814).3" />
<Link Source="10312:[81019..81040).2" Target="10312:[7793..7814).3" />
<Link Source="10312:[81042..81069).2" Target="10312:[64353..69285).12" />
<Link Source="10312:[81042..81069).2" Target="10312:[7793..7814).3" />
<Link Source="10312:[81095..84034).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[7793..7814).3" />
<Link Source="10312:[81196..82523).1" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).2" Target="10312:[80993..81002).2" />
<Link Source="10312:[81196..82523).2" Target="10312:[81196..82523).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).3" Target="10312:[81019..81040).2" />
<Link Source="10312:[81196..82523).3" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).3" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[81095..84034).2" />
<Link Source="10312:[81319..81371).1" Target="10312:[80978..80991).2" />
<Link Source="10312:[81319..81371).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[7793..7814).3" />
<Link Source="10312:[81495..81570).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).2" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[7793..7814).3" />
<Link Source="10312:[81596..82500).1" Target="10312:[80993..81002).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81731..82431).1" Target="10312:[81596..82500).1" />
<Link Source="10312:[82275..82283).1" Target="10312:[81004..81017).2" />
<Link Source="10312:[82275..82283).1" Target="10312:[81731..82431).1" />
<Link Source="10312:[82264..82400).1" Target="EXTERNAL" />
<Link Source="10312:[82264..82400).1" Target="10312:[82275..82283).1" />
<Link Source="10312:[82264..82400).2" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[82286..82392).1" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).1" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).2" Target="10312:[82264..82400).1" />
<Link Source="10312:[82286..82392).2" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).2" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).3" Target="10312:[81319..81371).1" />
<Link Source="10312:[82286..82392).3" Target="10312:[7793..7814).3" />
<Link Source="10312:[82286..82392).3" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).3" Target="10312:[82275..82283).1" />
<Link Source="10312:[82461..82473).1" Target="10312:[81596..82500).1" />
<Link Source="10312:[64449..64498).1" Target="10312:[7673..7703).3" />
<Link Source="10312:[64449..64498).1" Target="10312:[82461..82473).1" />
<Link Source="10312:[64449..64498).2" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).2" Target="10312:[82461..82473).1" />
<Link Source="10312:[64456..64497).1" Target="10312:[82461..82473).1" />
<Link Source="10354:[5577..5590).1" Target="10312:[64449..64498).1" />
<Link Source="10354:[5577..5590).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5592..5612).1" Target="10312:[64449..64498).2" />
<Link Source="10354:[5592..5612).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).1" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).2" Target="10354:[5577..5590).1" />
<Link Source="10354:[5638..5712).2" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).3" Target="10354:[5592..5612).1" />
<Link Source="10354:[5638..5712).3" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).4" Target="10312:[64456..64497).1" />
<Link Source="10354:[5645..5711).1" Target="10312:[64456..64497).1" />
<Link Source="10368:[1076..1097).2" Target="10354:[5638..5712).1" />
<Link Source="10368:[1076..1097).2" Target="10354:[5645..5711).1" />
<Link Source="10368:[1099..1112).2" Target="10354:[5638..5712).2" />
<Link Source="10368:[1099..1112).2" Target="10354:[5645..5711).1" />
<Link Source="10368:[1114..1134).2" Target="10354:[5638..5712).3" />
<Link Source="10368:[1114..1134).2" Target="10354:[5645..5711).1" />
<Link Source="10368:[1048..1256).2" Target="10354:[5638..5712).4" />
<Link Source="10368:[1048..1256).2" Target="10354:[5645..5711).1" />
<Link Source="10312:[64449..64498).3" Target="10354:[5638..5712).4" />
<Link Source="10312:[64449..64498).3" Target="10312:[82461..82473).1" />
<Link Source="10354:[10268..10665).5" Target="10312:[82286..82392).1" />
<Link Source="10354:[10268..10665).5" Target="10312:[64449..64498).3" />
<Link Source="10354:[10268..10665).5" Target="10368:[1076..1097).2" />
<Link Source="10354:[10268..10665).5" Target="10312:[7673..7703).3" />
<Link Source="10354:[8248..8278).3" Target="10354:[10268..10665).5" />
<Link Source="10354:[8248..8278).3" Target="10368:[1099..1112).2" />
<Link Source="10312:[19259..19531).9" Target="10312:[7673..7703).3" />
<Link Source="10312:[19259..19531).9" Target="10354:[8248..8278).3" />
<Link Source="10312:[19259..19531).9" Target="10368:[1114..1134).2" />
<Link Source="10312:[63473..63501).3" Target="10312:[19259..19531).9" />
<Link Source="10312:[63566..63612).3" Target="10312:[19259..19531).9" />
<Link Source="10312:[63638..63668).3" Target="10312:[19259..19531).9" />
<Link Source="10312:[63682..63706).3" Target="10312:[19259..19531).9" />
<Link Source="10312:[81042..81069).3" Target="10312:[63682..63706).3" />
<Link Source="10312:[81042..81069).3" Target="10312:[19259..19531).9" />
<Link Source="10312:[81495..81570).6" Target="10312:[19259..19531).9" />
<Link Source="10312:[81628..81659).1" Target="10312:[19259..19531).9" />
<Link Source="10312:[84050..84066).3" Target="10312:[19259..19531).9" />
<Link Source="10312:[66177..69285).16" Target="10312:[63473..63501).3" />
<Link Source="10312:[66177..69285).16" Target="10312:[63682..63706).3" />
<Link Source="10312:[66291..66342).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[75301..75322).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[75301..75322).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75324..75352).2" Target="10312:[66177..69285).16" />
<Link Source="10312:[75324..75352).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).6" Target="10312:[75301..75322).2" />
<Link Source="10312:[75735..75866).6" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).6" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).7" Target="10312:[66291..66342).2" />
<Link Source="10312:[75742..75804).2" Target="10312:[75735..75866).6" />
<Link Source="10312:[75742..75804).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75324..75352).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75742..75804).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63638..63668).3" />
<Link Source="10312:[66177..69285).19" Target="10312:[63682..63706).3" />
<Link Source="10312:[66177..69285).21" Target="10312:[63566..63612).3" />
<Link Source="10312:[66177..69285).21" Target="10312:[63682..63706).3" />
<Link Source="10312:[77543..77571).2" Target="10312:[75735..75866).9" />
<Link Source="10312:[77543..77571).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[77573..77604).2" Target="10312:[66177..69285).19" />
<Link Source="10312:[77573..77604).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[77654..77700).2" Target="10312:[66177..69285).21" />
<Link Source="10312:[77654..77700).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[77726..77892).5" Target="10312:[63682..63706).3" />
<Link Source="10312:[77726..77892).5" Target="10312:[19259..19531).9" />
<Link Source="10312:[77726..77892).6" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).6" Target="10312:[63682..63706).3" />
<Link Source="10312:[77730..77782).2" Target="10312:[63682..63706).3" />
<Link Source="10298:[471..492).26" Target="10312:[77726..77892).5" />
<Link Source="10298:[471..492).26" Target="10312:[77730..77782).2" />
<Link Source="10298:[494..511).26" Target="10312:[77726..77892).6" />
<Link Source="10298:[494..511).26" Target="10312:[77730..77782).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[77543..77571).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[78432..78463).2" Target="10312:[77573..77604).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[63682..63706).3" />
<Link Source="10312:[78513..78552).2" Target="10312:[77654..77700).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[63682..63706).3" />
<Link Source="10346:[8034..8062).2" Target="10312:[78402..78430).2" />
<Link Source="10346:[8034..8062).2" Target="10312:[63682..63706).3" />
<Link Source="10346:[8064..8095).2" Target="10312:[78432..78463).2" />
<Link Source="10346:[8064..8095).2" Target="10312:[63682..63706).3" />
<Link Source="10346:[8145..8184).2" Target="10312:[78513..78552).2" />
<Link Source="10346:[8145..8184).2" Target="10312:[63682..63706).3" />
<Link Source="10286:[30098..30120).2" Target="10312:[63682..63706).3" />
<Link Source="10286:[30135..30160).2" Target="10346:[8034..8062).2" />
<Link Source="10286:[30135..30160).2" Target="10312:[63682..63706).3" />
<Link Source="10286:[30175..30206).2" Target="10346:[8064..8095).2" />
<Link Source="10286:[30175..30206).2" Target="10312:[63682..63706).3" />
<Link Source="10286:[30283..30330).2" Target="10312:[63682..63706).3" />
<Link Source="10286:[30012..30691).2" Target="10312:[63682..63706).3" />
<Link Source="10286:[30356..30522).5" Target="10286:[30012..30691).2" />
<Link Source="10286:[30356..30522).5" Target="10312:[19259..19531).9" />
<Link Source="10286:[30356..30522).5" Target="10312:[63682..63706).3" />
<Link Source="10286:[30356..30522).6" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).6" Target="10312:[63682..63706).3" />
<Link Source="10286:[30360..30412).2" Target="10312:[63682..63706).3" />
<Link Source="10298:[471..492).27" Target="10286:[30356..30522).5" />
<Link Source="10298:[471..492).27" Target="10286:[30360..30412).2" />
<Link Source="10298:[494..511).27" Target="10286:[30356..30522).6" />
<Link Source="10298:[494..511).27" Target="10286:[30360..30412).2" />
<Link Source="10060:[2136..2158).2" Target="10286:[30098..30120).2" />
<Link Source="10060:[2136..2158).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[2173..2198).2" Target="10286:[30135..30160).2" />
<Link Source="10060:[2173..2198).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[2213..2244).2" Target="10286:[30175..30206).2" />
<Link Source="10060:[2213..2244).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[2320..2366).2" Target="10286:[30283..30330).2" />
<Link Source="10060:[2320..2366).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[5621..5634).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5621..5634).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[5691..5716).2" Target="10060:[2173..2198).2" />
<Link Source="10060:[5691..5716).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[5731..5762).2" Target="10060:[2213..2244).2" />
<Link Source="10060:[5731..5762).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[5777..5806).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5777..5806).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[5882..5928).2" Target="10060:[2320..2366).2" />
<Link Source="10060:[5882..5928).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[5954..5991).5" Target="10312:[63682..63706).3" />
<Link Source="10060:[6005..6042).5" Target="10312:[63682..63706).3" />
<Link Source="10060:[6005..6042).6" Target="10060:[5621..5634).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[6005..6042).5" />
<Link Source="10060:[6005..6042).6" Target="10312:[63682..63706).3" />
<Link Source="10060:[6056..6090).3" Target="10060:[5621..5634).2" />
<Link Source="10060:[6056..6090).3" Target="10312:[19259..19531).9" />
<Link Source="10060:[6056..6090).3" Target="10312:[63682..63706).3" />
<Link Source="10060:[6104..6172).4" Target="10060:[5621..5634).2" />
<Link Source="10060:[6104..6172).4" Target="10312:[63682..63706).3" />
<Link Source="10060:[6188..6219).3" Target="10312:[63682..63706).3" />
<Link Source="10060:[6814..6920).1" Target="10312:[63682..63706).3" />
<Link Source="10060:[6814..6920).2" Target="10060:[5621..5634).2" />
<Link Source="10060:[6814..6920).2" Target="10312:[63682..63706).3" />
<Link Source="10060:[6814..6920).3" Target="10060:[2136..2158).2" />
<Link Source="10060:[6814..6920).3" Target="10312:[63682..63706).3" />
<Link Source="10060:[6814..6920).4" Target="10060:[5882..5928).2" />
<Link Source="10060:[6814..6920).4" Target="10312:[63682..63706).3" />
<Link Source="10060:[6821..6919).1" Target="10312:[63682..63706).3" />
<Link Source="10060:[10180..10200).1" Target="10060:[6814..6920).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10202..10215).1" Target="10060:[6814..6920).2" />
<Link Source="10060:[10202..10215).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10217..10263).1" Target="10060:[6814..6920).3" />
<Link Source="10060:[10217..10263).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10265..10311).1" Target="10060:[6814..6920).4" />
<Link Source="10060:[10265..10311).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10180..10200).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10419..10454).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[10470..10516).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10470..10516).1" Target="10312:[19259..19531).9" />
<Link Source="10060:[10470..10516).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10532..10544).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[10558..11295).1" Target="10312:[19259..19531).9" />
<Link Source="10060:[10558..11295).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[11311..11352).1" Target="10312:[19259..19531).9" />
<Link Source="10060:[11311..11352).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11311..11352).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11366..11675).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[11373..11403).1" Target="10060:[11366..11675).2" />
<Link Source="10060:[11373..11403).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[10202..10215).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[11373..11403).1" />
<Link Source="10060:[11423..11509).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12078..12091).1" Target="10060:[11366..11675).5" />
<Link Source="10060:[12078..12091).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11990..12013).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[12199..12238).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11423..11509).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[12028..12063).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12494..12506).1" Target="10060:[12254..13527).1" />
<Link Source="10312:[19326..19460).40" Target="10060:[10217..10263).1" />
<Link Source="10312:[19326..19460).40" Target="10060:[12494..12506).1" />
<Link Source="10312:[63473..63501).4" Target="10060:[12494..12506).1" />
<Link Source="10312:[63566..63612).4" Target="10060:[12494..12506).1" />
<Link Source="10312:[63638..63668).4" Target="10060:[12494..12506).1" />
<Link Source="10312:[81042..81069).4" Target="10060:[12494..12506).1" />
<Link Source="10312:[81495..81570).11" Target="10060:[12494..12506).1" />
<Link Source="10319:[43504..43546).8" Target="10319:[41889..41914).2" />
<Link Source="10319:[43504..43546).8" Target="10319:[41849..41874).2" />
<Link Source="10319:[43504..43546).8" Target="10312:[19326..19460).40" />
<Link Source="10319:[43504..43546).8" Target="10060:[12494..12506).1" />
<Link Source="10319:[43504..43546).8" Target="10319:[40666..40819).1" />
<Link Source="10319:[43562..43590).3" Target="10319:[40666..40819).1" />
<Link Source="10319:[44751..44765).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[44785..44930).14" Target="10319:[41849..41874).2" />
<Link Source="10319:[44785..44930).14" Target="10319:[43562..43590).3" />
<Link Source="10319:[44785..44930).18" Target="10319:[41889..41914).2" />
<Link Source="10319:[44785..44930).18" Target="10319:[43562..43590).3" />
<Link Source="10319:[44785..44930).19" Target="10319:[41983..42014).2" />
<Link Source="10319:[44785..44930).19" Target="10319:[43562..43590).3" />
<Link Source="10319:[44785..44930).21" Target="10319:[42029..42063).2" />
<Link Source="10319:[44785..44930).21" Target="10319:[43562..43590).3" />
<Link Source="10319:[84201..84218).2" Target="10319:[44785..44930).14" />
<Link Source="10319:[84201..84218).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84233..84242).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84257..84273).2" Target="10319:[44785..44930).14" />
<Link Source="10319:[84257..84273).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84288..84313).2" Target="10319:[44785..44930).18" />
<Link Source="10319:[84288..84313).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84374..84391).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84374..84391).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84406..84447).2" Target="10319:[44785..44930).21" />
<Link Source="10319:[84406..84447).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84462..84508).2" Target="10319:[44785..44930).14" />
<Link Source="10319:[84462..84508).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84124..109887).2" Target="10319:[41732..45579).2" />
<Link Source="10319:[84124..109887).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[85320..85348).5" Target="10319:[43562..43590).3" />
<Link Source="10319:[85320..85348).6" Target="10319:[84257..84273).2" />
<Link Source="10319:[85320..85348).6" Target="10319:[85320..85348).5" />
<Link Source="10319:[85320..85348).6" Target="10319:[43562..43590).3" />
<Link Source="10319:[85366..85400).5" Target="10319:[43562..43590).3" />
<Link Source="10319:[85366..85400).6" Target="10319:[84288..84313).2" />
<Link Source="10319:[85366..85400).6" Target="10319:[85366..85400).5" />
<Link Source="10319:[85366..85400).6" Target="10319:[43562..43590).3" />
<Link Source="10354:[4561..4580).3" Target="10319:[43562..43590).3" />
<Link Source="10354:[4561..4580).3" Target="10319:[43504..43546).8" />
<Link Source="10319:[85467..85484).3" Target="10319:[43562..43590).3" />
<Link Source="10354:[4094..4107).41" Target="10319:[43562..43590).3" />
<Link Source="10354:[4094..4107).41" Target="10319:[43504..43546).8" />
<Link Source="10319:[104874..105336).4" Target="10354:[4561..4580).3" />
<Link Source="10319:[104874..105336).4" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).5" Target="10319:[104874..105336).4" />
<Link Source="10319:[104874..105336).5" Target="10319:[84124..109887).2" />
<Link Source="10319:[104874..105336).5" Target="10354:[4561..4580).3" />
<Link Source="10319:[105368..106708).2" Target="10319:[44785..44930).19" />
<Link Source="10319:[105368..106708).2" Target="10354:[4561..4580).3" />
<Link Source="10319:[105465..105535).7" Target="10319:[84288..84313).2" />
<Link Source="10319:[105465..105535).7" Target="10319:[105368..106708).2" />
<Link Source="10319:[105465..105535).8" Target="10319:[84257..84273).2" />
<Link Source="10319:[105465..105535).8" Target="10319:[105368..106708).2" />
<Link Source="10319:[76360..76385).2" Target="10319:[105465..105535).7" />
<Link Source="10319:[76360..76385).2" Target="10319:[105368..106708).2" />
<Link Source="10319:[76387..76402).2" Target="10319:[105465..105535).8" />
<Link Source="10319:[76387..76402).2" Target="10319:[105368..106708).2" />
<Link Source="10060:[2841..2854).12" Target="10319:[105368..106708).2" />
<Link Source="10060:[2856..2875).12" Target="10319:[105368..106708).2" />
<Link Source="10060:[2901..2932).23" Target="10060:[2841..2854).12" />
<Link Source="10060:[2901..2932).23" Target="10319:[105368..106708).2" />
<Link Source="10060:[2948..3467).12" Target="10060:[2841..2854).12" />
<Link Source="10060:[2948..3467).12" Target="10319:[105368..106708).2" />
<Link Source="10060:[3553..4223).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[3553..4223).14" Target="10319:[105368..106708).2" />
<Link Source="10060:[4243..4274).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[4243..4274).14" Target="10319:[105368..106708).2" />
<Link Source="10060:[3518..4328).14" Target="10060:[4243..4274).14" />
<Link Source="10060:[3518..4328).14" Target="10319:[105368..106708).2" />
<Link Source="10319:[76494..76582).5" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="10354:[4561..4580).3" />
<Link Source="10319:[84691..84861).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).3" Target="10319:[43562..43590).3" />
<Link Source="10319:[84764..84846).1" Target="10319:[84257..84273).2" />
<Link Source="10319:[84764..84846).1" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).2" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).4" Target="10354:[4561..4580).3" />
<Link Source="10319:[84764..84846).4" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).5" Target="10319:[84288..84313).2" />
<Link Source="10319:[84764..84846).5" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84845).1" Target="10319:[84691..84861).3" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84846).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84846).2" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84846).4" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84846).5" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84124..109887).2" />
<Link Source="10306:[358838..360009).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).1" Target="10306:[358932..358945).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[105368..106708).2" />
<Link Source="10306:[358998..359998).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).2" Target="10319:[84764..84845).1" />
<Link Source="10319:[44948..45377).3" Target="10354:[4561..4580).3" />
<Link Source="10319:[44948..45377).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[44948..45377).3" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).3" Target="10319:[43562..43590).3" />
<Link Source="10354:[11428..11441).3" Target="10319:[40666..40819).1" />
<Link Source="10319:[45408..45422).2" Target="10319:[40666..40819).1" />
<Link Source="10325:[4462..4594).2" Target="10319:[105368..106708).2" />
<Link Source="10325:[4556..4582).2" Target="10319:[105368..106708).2" />
<Link Source="10286:[10675..11259).2" Target="10325:[4462..4594).2" />
<Link Source="10286:[10675..11259).2" Target="10325:[4556..4582).2" />
<Link Source="10286:[10741..11248).2" Target="10286:[10675..11259).2" />
<Link Source="10286:[10741..11248).2" Target="10319:[105368..106708).2" />
<Link Source="10286:[10741..11248).2" Target="10325:[4556..4582).2" />
<Link Source="10286:[11085..11098).3" Target="10286:[10741..11248).2" />
<Link Source="10325:[4549..4583).3" Target="10286:[11085..11098).3" />
<Link Source="10325:[4549..4583).3" Target="10319:[105368..106708).2" />
<Link Source="10286:[10600..10652).7" Target="10325:[4549..4583).3" />
<Link Source="10286:[10600..10652).7" Target="10319:[105368..106708).2" />
<Link Source="10319:[45443..45567).2" Target="10319:[40666..40819).1" />
<Link Source="10287:[2306..2328).2" Target="10286:[10600..10652).7" />
<Link Source="10287:[2306..2328).2" Target="10319:[45443..45567).2" />
<Link Source="10287:[2377..2471).3" Target="10354:[4561..4580).3" />
<Link Source="10287:[2377..2471).3" Target="10319:[45443..45567).2" />
<Link Source="10287:[2680..2780).1" Target="10354:[4561..4580).3" />
<Link Source="10287:[718..757).1" Target="10287:[2306..2328).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10354:[4561..4580).3" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2306..2328).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[72620..72734).1" Target="10319:[71694..71825).1" />
<Link Source="10319:[72620..72734).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[72750..72763).1" Target="10354:[4561..4580).3" />
<Link Source="10319:[72750..72763).1" Target="10319:[21212..21313).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[72750..72763).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[851..871).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[2306..2328).2" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[72750..72763).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[21504..21529).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[21531..21544).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[21462..21711).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[21609..21700).6" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).7" Target="10286:[21531..21544).2" />
<Link Source="10286:[21609..21700).7" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).8" Target="10286:[21546..21561).2" />
<Link Source="10286:[21609..21700).8" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).9" Target="10286:[21563..21583).2" />
<Link Source="10286:[21609..21700).9" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).2" Target="10286:[21609..21700).6" />
<Link Source="10286:[22044..22069).2" Target="10286:[21609..21699).2" />
<Link Source="10286:[22071..22084).2" Target="10286:[21609..21700).7" />
<Link Source="10286:[22071..22084).2" Target="10286:[21609..21699).2" />
<Link Source="10286:[22086..22108).2" Target="10286:[21609..21700).8" />
<Link Source="10286:[22086..22108).2" Target="10286:[21609..21699).2" />
<Link Source="10286:[22110..22130).2" Target="10286:[21609..21700).9" />
<Link Source="10286:[22110..22130).2" Target="10286:[21609..21699).2" />
<Link Source="10286:[22002..22611).2" Target="10286:[21462..21711).2" />
<Link Source="10286:[22002..22611).2" Target="10286:[21609..21699).2" />
<Link Source="10286:[22156..22600).2" Target="10286:[22071..22084).2" />
<Link Source="10286:[22156..22600).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[22156..22600).2" Target="10286:[21609..21699).2" />
<Link Source="10286:[22421..22557).1" Target="10286:[22044..22069).2" />
<Link Source="10286:[22421..22557).1" Target="10286:[22156..22600).2" />
<Link Source="10286:[22421..22557).2" Target="10286:[22071..22084).2" />
<Link Source="10286:[22421..22557).2" Target="10286:[22156..22600).2" />
<Link Source="10286:[22421..22557).3" Target="10286:[22086..22108).2" />
<Link Source="10286:[22421..22557).3" Target="10286:[22156..22600).2" />
<Link Source="10286:[22421..22557).4" Target="10286:[22110..22130).2" />
<Link Source="10286:[22421..22557).4" Target="10286:[22156..22600).2" />
<Link Source="10286:[22493..22522).1" Target="10286:[22156..22600).2" />
<Link Source="10307:[1439..1480).1" Target="10286:[22002..22611).2" />
<Link Source="10307:[1439..1480).1" Target="10286:[22493..22522).1" />
<Link Source="10307:[1445..1478).1" Target="10307:[1439..1480).1" />
<Link Source="10307:[1445..1478).1" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).1" Target="10286:[22493..22522).1" />
<Link Source="10286:[22421..22557).5" Target="10307:[1445..1478).1" />
<Link Source="10286:[22421..22557).5" Target="10286:[22156..22600).2" />
<Link Source="10286:[22524..22543).1" Target="10286:[22156..22600).2" />
<Link Source="10286:[15519..15926).1" Target="10286:[22002..22611).2" />
<Link Source="10286:[15519..15926).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15568..15597).1" Target="10286:[22524..22543).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15519..15926).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15568..15597).1" />
<Link Source="10307:[1445..1478).2" Target="10307:[1439..1480).2" />
<Link Source="10307:[1445..1478).2" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).2" Target="10286:[15568..15597).1" />
<Link Source="10286:[15555..15598).1" Target="10307:[1445..1478).2" />
<Link Source="10286:[15555..15598).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).2" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[15616..15690).2" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).2" Target="10286:[22524..22543).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15708..15911).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[15708..15911).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[22156..22600).2" />
<Link Source="10286:[22421..22557).9" Target="10286:[22002..22611).2" />
<Link Source="10286:[22421..22557).9" Target="10319:[15783..15865).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22156..22600).2" />
<Link Source="10286:[22421..22556).1" Target="10286:[22156..22600).2" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22557).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22557).2" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22557).3" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22557).4" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22557).5" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22557).7" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22557).9" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23380..23684).1" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23893..24026).1" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[23235..23266).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).2" />
<Link Source="10286:[24450..24529).3" Target="10286:[23327..23364).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[23161..23181).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[23056..23081).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).2" Target="10286:[24450..24529).3" />
<Link Source="10286:[25365..25492).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[23124..23146).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[23196..23220).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[23281..23301).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[22421..22556).1" />
<Link Source="10286:[25386..25491).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25365..25492).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26937..26950).1" Target="10286:[25365..25492).2" />
<Link Source="10286:[26937..26950).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26952..26974).1" Target="10286:[25365..25492).3" />
<Link Source="10286:[26952..26974).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26976..27000).1" Target="10286:[25365..25492).4" />
<Link Source="10286:[26976..27000).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27002..27022).1" Target="10286:[25365..25492).5" />
<Link Source="10286:[27002..27022).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[26910..26935).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[27048..27088).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[26937..26950).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[26976..27000).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).3" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).2" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[24450..24529).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[25386..25491).1" />
<Link Source="10286:[27208..27236).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27250..27722).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27250..27722).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27208..27236).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27738..27845).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27861..27873).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27861..27873).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[27861..27873).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[26281..26812).1" />
<Link Source="10286:[22421..22557).10" Target="10286:[22156..22600).2" />
<Link Source="10286:[21609..21700).10" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10319:[72750..72763).1" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).2" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).2" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).2" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).2" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).2" Target="10319:[51762..51815).2" />
<Link Source="10287:[1680..1716).2" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).2" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).3" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).3" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).3" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).3" Target="10287:[1683..1716).3" />
<Link Source="10319:[51935..52244).3" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[51762..51815).2" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).34" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).34" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).34" Target="10286:[27104..27192).5" />
<Link Source="25002:[4395..4432).34" Target="10287:[2306..2328).2" />
<Link Source="25002:[4395..4432).34" Target="28001:[21348..21393).1" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1442..1480).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1494..2257).1" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).34" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2273..2310).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).34" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2390..2435).1" Target="10313:[2324..3491).1" />
<Link Source="10313:[2453..3476).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2453..3476).1" Target="10313:[2324..3491).1" />
<Link Source="10313:[2523..2541).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2523..2541).1" Target="25002:[4395..4432).34" />
<Link Source="10313:[2563..2675).1" Target="10313:[2523..2541).1" />
<Link Source="10313:[2563..2675).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2699..3019).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[2699..3019).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[2453..3476).1" />
<Link Source="10313:[3043..3457).1" Target="10313:[2523..2541).1" />
<Link Source="10313:[3043..3457).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[2390..2435).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[3043..3457).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[2453..3476).1" />
<Link Source="10313:[3304..3457).1" Target="10313:[1352..1376).1" />
<Link Source="10313:[3304..3457).1" Target="10313:[3043..3457).2" />
<Link Source="10313:[3378..3434).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[3378..3434).1" Target="10313:[3304..3457).1" />
<Link Source="10313:[3378..3434).2" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).2" Target="10313:[3304..3457).1" />
<Link Source="10313:[3378..3433).1" Target="10313:[3304..3457).1" />
<Link Source="10313:[720..733).1" Target="10313:[3378..3434).1" />
<Link Source="10313:[720..733).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[735..760).1" Target="10313:[3378..3434).2" />
<Link Source="10313:[735..760).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[666..931).1" Target="10313:[1171..3563).1" />
<Link Source="10313:[666..931).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[786..826).1" Target="10313:[720..733).1" />
<Link Source="10313:[786..826).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[806..825).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[979..992).1" Target="10313:[786..826).1" />
<Link Source="10313:[979..992).1" Target="10313:[806..825).1" />
<Link Source="10313:[1018..1051).1" Target="10313:[979..992).1" />
<Link Source="10313:[1018..1051).1" Target="25002:[4395..4432).34" />
<Link Source="10313:[1018..1051).1" Target="10313:[806..825).1" />
<Link Source="10313:[1065..1148).1" Target="10313:[806..825).1" />
<Link Source="10313:[1065..1148).2" Target="10313:[1018..1051).1" />
<Link Source="10313:[1065..1148).2" Target="25002:[4395..4432).34" />
<Link Source="10313:[1065..1148).2" Target="10313:[1065..1148).1" />
<Link Source="10313:[1065..1148).2" Target="10313:[806..825).1" />
<Link Source="10313:[1072..1093).1" Target="10313:[1065..1148).2" />
<Link Source="10313:[1072..1093).1" Target="10313:[806..825).1" />
<Link Source="10313:[840..920).1" Target="10313:[720..733).1" />
<Link Source="10313:[840..920).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).2" Target="10313:[1072..1093).1" />
<Link Source="10313:[840..920).2" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).3" Target="10313:[720..733).1" />
<Link Source="10313:[840..920).3" Target="25002:[4395..4432).34" />
<Link Source="10313:[840..920).3" Target="10313:[1072..1093).1" />
<Link Source="10313:[840..920).3" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).4" Target="10313:[735..760).1" />
<Link Source="10313:[840..920).4" Target="10313:[3378..3433).1" />
<Link Source="10313:[847..919).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[3733..3747).1" Target="10313:[840..920).1" />
<Link Source="10313:[3733..3747).1" Target="10313:[847..919).1" />
<Link Source="10313:[3749..3766).1" Target="10313:[840..920).2" />
<Link Source="10313:[3749..3766).1" Target="10313:[847..919).1" />
<Link Source="10313:[3768..3779).1" Target="10313:[840..920).3" />
<Link Source="10313:[3768..3779).1" Target="10313:[847..919).1" />
<Link Source="10313:[3781..3806).1" Target="10313:[840..920).4" />
<Link Source="10313:[3781..3806).1" Target="10313:[847..919).1" />
<Link Source="10313:[3691..5083).1" Target="10313:[666..931).1" />
<Link Source="10313:[3691..5083).1" Target="10313:[847..919).1" />
<Link Source="10313:[3832..3924).1" Target="10313:[3768..3779).1" />
<Link Source="10313:[3832..3924).1" Target="10313:[847..919).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[3691..5083).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[1072..1093).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[847..919).1" />
<Link Source="10313:[3940..4044).2" Target="EXTERNAL" />
<Link Source="10313:[3940..4044).2" Target="10313:[847..919).1" />
<Link Source="10313:[4060..5043).1" Target="10313:[3691..5083).1" />
<Link Source="10313:[4060..5043).1" Target="10313:[847..919).1" />
<Link Source="10313:[4060..5043).2" Target="10313:[847..919).1" />
<Link Source="10313:[4210..4315).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4335..4374).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4392..4543).1" Target="10313:[4335..4374).1" />
<Link Source="10313:[4392..4543).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4392..4543).2" Target="10313:[4060..5043).1" />
<Link Source="10313:[4698..4727).1" Target="10313:[4060..5043).1" />
<Link Source="10286:[8381..8389).1" Target="10313:[4060..5043).1" />
<Link Source="10286:[8381..8389).1" Target="10313:[4698..4727).1" />
<Link Source="10286:[8384..8389).1" Target="10313:[4698..4727).1" />
<Link Source="10313:[4676..4801).1" Target="10286:[8384..8389).1" />
<Link Source="10313:[4676..4801).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[3940..4044).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[4676..4801).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[4060..5043).1" />
<Link Source="10313:[4825..4858).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[5095..5688).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[5095..5688).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5190..5219).1" Target="10313:[4825..4858).1" />
<Link Source="10307:[1439..1480).3" Target="10313:[5095..5688).1" />
<Link Source="10307:[1439..1480).3" Target="10313:[5190..5219).1" />
<Link Source="10307:[1445..1478).3" Target="10307:[1439..1480).3" />
<Link Source="10307:[1445..1478).3" Target="10313:[3940..4044).1" />
<Link Source="10307:[1445..1478).3" Target="10313:[5190..5219).1" />
<Link Source="10313:[5159..5220).1" Target="10307:[1445..1478).3" />
<Link Source="10313:[5159..5220).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[5159..5220).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5488..5662).1" Target="10313:[5159..5220).1" />
<Link Source="10313:[5488..5662).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5488..5662).1" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).1" Target="10313:[5236..5677).1" />
<Link Source="10313:[5608..5633).1" Target="10313:[5236..5677).1" />
<Link Source="10346:[7562..7572).1" Target="10313:[5608..5633).1" />
<Link Source="10346:[7562..7572).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5488..5662).2" Target="10346:[7562..7572).1" />
<Link Source="10313:[5488..5662).2" Target="10313:[5236..5677).1" />
<Link Source="10313:[4821..5028).1" Target="10313:[5488..5662).2" />
<Link Source="10313:[4821..5028).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4996..5009).1" Target="10313:[4821..5028).1" />
<Link Source="10313:[840..920).5" Target="10313:[4996..5009).1" />
<Link Source="10313:[840..920).5" Target="10313:[3378..3433).1" />
<Link Source="10313:[3507..3523).1" Target="10313:[1442..1480).1" />
<Link Source="10313:[3507..3523).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[2390..2435).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[3043..3457).2" />
<Link Source="10313:[3537..3552).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[20392..20435).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20392..20435).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[20392..20435).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20392..20435).2" Target="10346:[7562..7572).1" />
<Link Source="10319:[20399..20434).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20392..20435).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).2" Target="10319:[20392..20435).2" />
<Link Source="10319:[27647..28051).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[19916..30085).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[20399..20434).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[27647..28051).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).2" Target="10319:[27647..28051).2" />
<Link Source="10319:[27858..27923).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27869..27922).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27858..27923).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39138..39163).1" Target="10319:[27858..27923).2" />
<Link Source="10319:[39138..39163).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39062..39279).1" Target="10319:[27647..28051).3" />
<Link Source="10319:[39062..39279).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[39138..39163).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[27869..27922).1" />
<Link Source="10319:[39196..39267).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73480..73505).1" Target="10319:[39189..39268).6" />
<Link Source="10319:[73480..73505).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73507..73522).1" Target="10319:[39189..39268).7" />
<Link Source="10319:[73507..73522).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39062..39279).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[73420..73626).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[73460..73478).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[73507..73522).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[73480..73505).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[39196..39267).1" />
<Link Source="10319:[73555..73614).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73548..73615).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73716..73734).1" Target="10319:[73548..73615).2" />
<Link Source="10319:[73716..73734).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73736..73751).1" Target="10319:[73548..73615).3" />
<Link Source="10319:[73736..73751).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73753..73778).1" Target="10319:[73548..73615).4" />
<Link Source="10319:[73753..73778).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73716..73734).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73685..73714).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73804..73868).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[39189..39268).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73804..73868).2" />
<Link Source="10319:[73882..73975).2" Target="10319:[73882..73975).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[73989..74045).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73753..73778).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73736..73751).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74044).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[76345..76358).3" Target="10319:[73989..74045).1" />
<Link Source="10319:[76345..76358).3" Target="10319:[73989..74044).1" />
<Link Source="10319:[76360..76385).3" Target="10319:[73989..74045).2" />
<Link Source="10319:[76360..76385).3" Target="10319:[73989..74044).1" />
<Link Source="10319:[76387..76402).3" Target="10319:[73989..74045).3" />
<Link Source="10319:[76387..76402).3" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).9" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).10" Target="10319:[76345..76358).3" />
<Link Source="10319:[76494..76582).10" Target="10319:[76494..76582).9" />
<Link Source="10319:[76494..76582).10" Target="10319:[73989..74044).1" />
<Link Source="10319:[74059..74077).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[74059..74077).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[76345..76358).3" />
<Link Source="10319:[27941..28036).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27975..28028).1" Target="10319:[20399..20434).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[27941..28036).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[27975..28028).1" />
<Link Source="10286:[9966..10197).3" Target="10319:[27647..28051).3" />
<Link Source="10286:[9966..10197).3" Target="10319:[27975..28028).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[74059..74077).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[20399..20434).1" />
<Link Source="10319:[28030..28034).1" Target="10319:[20399..20434).1" />
<Link Source="10287:[2888..2927).1" Target="10319:[27941..28036).4" />
<Link Source="10287:[2888..2927).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).1" Target="10287:[2888..2927).1" />
<Link Source="10287:[2961..3037).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).2" Target="10319:[28030..28034).1" />
<Link Source="10287:[2968..3036).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[718..757).2" Target="10287:[2961..3037).1" />
<Link Source="10287:[718..757).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[666..1076).2" Target="10287:[2961..3037).2" />
<Link Source="10287:[666..1076).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[791..833).3" Target="10287:[718..757).2" />
<Link Source="10287:[791..833).3" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..927).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..919).2" Target="10287:[912..927).2" />
<Link Source="10287:[912..919).2" Target="10287:[666..1076).2" />
<Link Source="10287:[912..919).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..972).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..963).2" Target="10287:[945..972).2" />
<Link Source="10287:[945..963).2" Target="10287:[666..1076).2" />
<Link Source="10287:[945..963).2" Target="10287:[2968..3036).1" />
<Link Source="10319:[27941..28036).5" Target="10287:[2961..3037).2" />
<Link Source="10319:[27941..28036).5" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).7" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).9" Target="10286:[10010..10027).3" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).7" />
<Link Source="10319:[27941..28036).9" Target="10287:[718..757).2" />
<Link Source="10319:[27941..28036).9" Target="10287:[912..919).2" />
<Link Source="10319:[27941..28036).9" Target="10287:[945..963).2" />
<Link Source="10319:[27941..28036).9" Target="10319:[20399..20434).1" />
<Link Source="10286:[21504..21529).3" Target="10319:[27941..28036).9" />
<Link Source="10286:[21546..21561).3" Target="10319:[27941..28036).9" />
<Link Source="10286:[21563..21583).3" Target="10319:[27941..28036).9" />
<Link Source="10286:[22044..22069).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[22044..22069).3" Target="10319:[27941..28036).9" />
<Link Source="10286:[22086..22108).3" Target="10286:[21546..21561).3" />
<Link Source="10286:[22086..22108).3" Target="10319:[27941..28036).9" />
<Link Source="10286:[22110..22130).3" Target="10286:[21563..21583).3" />
<Link Source="10286:[22110..22130).3" Target="10319:[27941..28036).9" />
<Link Source="10286:[22421..22557).13" Target="10286:[22086..22108).3" />
<Link Source="10286:[22421..22557).13" Target="10286:[21504..21529).3" />
<Link Source="10286:[22421..22557).14" Target="10286:[22110..22130).3" />
<Link Source="10286:[22421..22557).14" Target="10286:[21504..21529).3" />
<Link Source="10286:[15616..15690).6" Target="10286:[21504..21529).3" />
<Link Source="10286:[15616..15690).7" Target="10286:[21504..21529).3" />
<Link Source="10286:[15616..15690).7" Target="10319:[27941..28036).9" />
<Link Source="10286:[15616..15690).7" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23056..23081).2" Target="10286:[22044..22069).3" />
<Link Source="10286:[23056..23081).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23124..23146).2" Target="10286:[22421..22557).13" />
<Link Source="10286:[23124..23146).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23161..23181).2" Target="10286:[22421..22557).14" />
<Link Source="10286:[23161..23181).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23281..23301).2" Target="10286:[22044..22069).3" />
<Link Source="10286:[23281..23301).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[23380..23684).8" Target="10286:[21504..21529).3" />
<Link Source="10286:[23380..23684).8" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[23893..24026).3" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).3" Target="10286:[23161..23181).2" />
<Link Source="10286:[24545..24641).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26910..26935).2" Target="10286:[23056..23081).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26952..26974).2" Target="10286:[23124..23146).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[27002..27022).2" Target="10286:[23281..23301).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[27048..27088).5" Target="10286:[21504..21529).3" />
<Link Source="10286:[27048..27088).6" Target="10286:[26910..26935).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[27048..27088).5" />
<Link Source="10286:[27048..27088).6" Target="10286:[21504..21529).3" />
<Link Source="10286:[27208..27236).3" Target="10286:[21504..21529).3" />
<Link Source="10286:[27250..27722).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[27738..27845).4" Target="10286:[21504..21529).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27208..27236).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27738..27845).4" />
<Link Source="10286:[27738..27845).5" Target="10286:[21504..21529).3" />
<Link Source="10286:[27861..27873).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26281..26812).2" Target="10286:[27861..27873).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[21504..21529).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[26281..26812).2" />
<Link Source="10287:[1680..1716).3" Target="10319:[27941..28036).9" />
<Link Source="10287:[1680..1716).3" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).2" Target="10287:[1680..1716).3" />
<Link Source="10287:[1683..1690).2" Target="10319:[27941..28036).9" />
<Link Source="10287:[1683..1690).2" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).5" Target="10287:[1683..1690).2" />
<Link Source="10287:[1683..1716).5" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).5" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).5" Target="10287:[1683..1716).5" />
<Link Source="10319:[51935..52244).5" Target="10319:[13969..14029).1" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="25002:[4395..4432).41" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).41" Target="10286:[21504..21529).3" />
<Link Source="25002:[4395..4432).41" Target="10843:[1616..1631).1" />
<Link Source="25002:[4395..4432).41" Target="10843:[1659..1685).1" />
<Link Source="25002:[4395..4432).41" Target="10843:[1724..1742).1" />
<Link Source="25002:[4395..4432).41" Target="10843:[1778..1799).1" />
<Link Source="25002:[4395..4432).41" Target="28001:[21348..21393).1" />
<Link Source="25002:[4446..4475).1" Target="25002:[4395..4432).41" />
<Link Source="25002:[4446..4475).1" Target="28001:[21348..21393).1" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[21348..21393).1" />
<Link Source="25002:[4446..4474).1" Target="28001:[21348..21393).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).4" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25003:[17702..17728).1" />
<Link Source="25003:[17742..17827).4" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).4" />
<Link Source="25003:[17841..17904).1" Target="25003:[17667..17688).1" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).4" />
<Link Source="25003:[17918..17965).1" Target="25003:[17667..17688).1" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22201..22213).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[18197..18490).2" Target="25003:[22201..22213).1" />
<Link Source="25003:[18197..18490).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[18462..18474).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[21372..21407).1" Target="25003:[18453..18475).1" />
<Link Source="25003:[21372..21407).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[21372..21407).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).2" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[23085..23122).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).2" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).4" />
<Link Source="25003:[21433..21546).5" Target="25002:[2991..3166).4" />
<Link Source="25003:[21433..21546).5" Target="25003:[18462..18474).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[19106..19139).3" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[5615..5631).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).5" Target="25012:[5357..6686).2" />
<Link Source="25012:[1672..2400).5" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[2963..3048).5" Target="25012:[1533..2415).2" />
<Link Source="25012:[2963..3048).5" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).5" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[4102..4181).5" Target="25003:[21276..21305).1" />
<Link Source="25002:[4102..4181).5" Target="25002:[1656..1702).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[21348..21393).1" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[21348..21393).1" />
<Link Source="25002:[4489..4523).2" Target="25002:[4395..4432).41" />
<Link Source="25002:[4489..4523).2" Target="28001:[21348..21393).1" />
<Link Source="25002:[4489..4522).1" Target="28001:[21348..21393).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4489..4523).3" Target="28001:[21348..21393).1" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[21348..21393).1" />
</Links>
</DirectedGraph>
