digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 697355"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 697356"];
3 [label="param BindingTests(this) 697357"];
4 [label="'C' 697358"];
5 [label="DefaultTypeName = 'C' 697359"];
6 [label="'M' 697360"];
7 [label="DefaultMethodName = 'M' 697361"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 697362"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 697363"];
10 [label="param CompilingTestBase(this) 697364"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 697365"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 697366"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 697367"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 697368"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 697369"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 697370"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 697371"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 697372"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 697373"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 697374"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 697375"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 697376"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 697377"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 697378"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 697379"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 697380"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 697381"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 697382"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 697383"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 697384"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 697385"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 697386"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 697387"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 697388"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 697389"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 697390"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 697391"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 697392"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 697393"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 697394"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 697395"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 697396"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 697397"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 697398"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 697399"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 697400"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 697401"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 697402"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 697403"];
50 [label="LazyThreadSafetyMode.PublicationOnly 697404"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 697405"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 697406"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 697407"];
54 [label="LazyThreadSafetyMode.PublicationOnly 697408"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 697409"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 697410"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 697411"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 697412"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 697413"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 697414"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 697415"];
62 [label="LazyThreadSafetyMode.PublicationOnly 697416"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 697417"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 697418"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 697419"];
66 [label="LazyThreadSafetyMode.PublicationOnly 697420"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 697421"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 697422"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 697423"];
70 [label="LazyThreadSafetyMode.PublicationOnly 697424"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 697425"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 697426"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 697427"];
74 [label="LazyThreadSafetyMode.PublicationOnly 697428"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697429"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697430"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 697431"];
78 [label="LazyThreadSafetyMode.PublicationOnly 697432"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697433"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697434"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 697435"];
82 [label="LazyThreadSafetyMode.PublicationOnly 697436"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697437"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697438"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 697439"];
86 [label="LazyThreadSafetyMode.PublicationOnly 697440"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697441"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697442"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 697443"];
90 [label="LazyThreadSafetyMode.PublicationOnly 697444"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697445"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697446"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 697447"];
94 [label="LazyThreadSafetyMode.PublicationOnly 697448"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697449"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697450"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 697451"];
98 [label="LazyThreadSafetyMode.PublicationOnly 697452"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697453"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697454"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 697455"];
102 [label="LazyThreadSafetyMode.PublicationOnly 697456"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 697457"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 697458"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 697459"];
106 [label="LazyThreadSafetyMode.PublicationOnly 697460"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 697461"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 697462"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 697463"];
110 [label="LazyThreadSafetyMode.PublicationOnly 697464"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697465"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697466"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 697467"];
114 [label="LazyThreadSafetyMode.PublicationOnly 697468"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697469"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697470"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 697471"];
118 [label="LazyThreadSafetyMode.PublicationOnly 697472"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697473"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697474"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 697475"];
122 [label="LazyThreadSafetyMode.PublicationOnly 697476"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697477"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697478"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 697479"];
126 [label="LazyThreadSafetyMode.PublicationOnly 697480"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 697481"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 697482"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 697483"];
130 [label="LazyThreadSafetyMode.PublicationOnly 697484"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697485"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697486"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 697487"];
134 [label="LazyThreadSafetyMode.PublicationOnly 697488"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697489"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697490"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 697491"];
138 [label="LazyThreadSafetyMode.PublicationOnly 697492"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697493"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697494"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 697495"];
142 [label="LazyThreadSafetyMode.PublicationOnly 697496"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697497"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697498"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 697499"];
146 [label="LazyThreadSafetyMode.PublicationOnly 697500"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697501"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697502"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 697503"];
150 [label="LazyThreadSafetyMode.PublicationOnly 697504"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697505"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697506"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 697507"];
154 [label="LazyThreadSafetyMode.PublicationOnly 697508"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697509"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697510"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 697511"];
158 [label="LazyThreadSafetyMode.PublicationOnly 697512"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697513"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697514"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 697515"];
162 [label="LazyThreadSafetyMode.PublicationOnly 697516"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697517"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697518"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 697519"];
166 [label="LazyThreadSafetyMode.PublicationOnly 697520"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697521"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697522"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 697523"];
170 [label="LazyThreadSafetyMode.PublicationOnly 697524"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697525"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697526"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 697527"];
174 [label="LazyThreadSafetyMode.PublicationOnly 697528"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697529"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697530"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 697531"];
178 [label="LazyThreadSafetyMode.PublicationOnly 697532"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697533"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 697534"];
181 [label="@'R:\\Invalid.dll' 697535"];
182 [label="fullPath: @'R:\\Invalid.dll' 697536"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 697537"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 697538"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 697539"];
186 [label="MscorlibRef_v4_0_30316_17626 697540"];
187 [label="Net451.mscorlib 697541"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 697542"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 697543"];
190 [label="'/*<bind>*/' 697544"];
191 [label="StartString = '/*<bind>*/' 697545"];
192 [label="'/*</bind>*/' 697546"];
193 [label="EndString = '/*</bind>*/' 697547"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 697548"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 697549"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 697550"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 697551"];
198 [label="param CSharpTestBase(this) 697552"];
199 [label="param CommonTestBase(this) 697553"];
200 [label="param TestBase(this) 697554"];
201 [label="_temp 697555"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 697556"];
203 [label="param NamespaceQualifiedGenericTypeNameWrongArity(this) 697557"];
204 [label="var source =\n@'namespace N\n{\n    public class A<T>\n    {\n        public static T F;\n    }\n\n    public class B \n    { \n        public static int F;\n    }\n    public class B<T1, T2> \n    { \n        public static System.Tuple<T1, T2> F;\n    }\n}\nclass C\n{\n    static int TooMany = N.A<int, int>.F;\n    static int TooFew = N.A.F;\n    static int TooIndecisive = N.B<int>;\n}'; 697558"];
205 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 697559"];
206 [label="source 697560"];
207 [label="param operator(string source) 697561"];
208 [label="source 697562"];
209 [label="new CSharpTestSource(source) 697563"];
210 [label="param CSharpTestSource(object value) 697564"];
211 [label="param CSharpTestSource(this) 697565"];
212 [label="Value 697566"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 697567"];
214 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 697568"];
215 [label="CreateCompilation(source) 697569"];
216 [label="param CreateCompilation(CSharpTestSource source) 697570"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 697571"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 697572"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 697573"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 697574"];
221 [label="param CreateCompilation(string assemblyName = '') 697575"];
222 [label="param CreateCompilation(string sourceFileName = '') 697576"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 697577"];
224 [label="source 697578"];
225 [label="targetFramework 697579"];
226 [label="references 697580"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 697581"];
228 [label="param GetReferences(TargetFramework tf) 697582"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 697583"];
230 [label="var references = GetReferences(tf); 697584"];
231 [label="GetReferences(tf) 697585"];
232 [label="param GetReferences(TargetFramework targetFramework) 697586"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 697587"];
234 [label="StandardReferences 697588"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 697589"];
236 [label="Mscorlib46ExtendedReferences 697590"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 697591"];
238 [label="TestBase.ValueTupleRef 697592"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 697593"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 697594"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 697595"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 697596"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 697597"];
244 [label="return references; 697598"];
245 [label="options 697599"];
246 [label="parseOptions 697600"];
247 [label="assemblyName 697601"];
248 [label="sourceFileName 697602"];
249 [label="skipUsesIsNullable 697603"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 697604"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 697605"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 697606"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 697607"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 697608"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 697609"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 697610"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 697611"];
258 [label="source 697612"];
259 [label="references 697613"];
260 [label="options 697614"];
261 [label="parseOptions 697615"];
262 [label="assemblyName 697616"];
263 [label="sourceFileName 697617"];
264 [label="skipUsesIsNullable 697618"];
265 [label="null 697619"];
266 [label="experimentalFeature: null 697620"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 697621"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 697622"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 697623"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 697624"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 697625"];
272 [label="param CreateCompilationCore(string assemblyName) 697626"];
273 [label="param CreateCompilationCore(string sourceFileName) 697627"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 697628"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 697629"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 697630"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 697631"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 697632"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 697633"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 697634"];
281 [label="param GetSyntaxTrees(this) 697635"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 697636"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 697637"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 697638"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 697639"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 697640"];
287 [label="param Parse(string text) 697641"];
288 [label="param Parse(string filename = '') 697642"];
289 [label="param Parse(CSharpParseOptions options = null) 697643"];
290 [label="param Parse(Encoding encoding = null) 697644"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 697645"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 697646"];
293 [label="kind: SourceCodeKind.Regular 697647"];
294 [label="documentationMode: DocumentationMode.Parse 697648"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 697649"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 697650"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 697651"];
298 [label="SourceCodeKind.Script 697652"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 697653"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 697654"];
301 [label="LanguageVersion.CSharp6 697655"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 697656"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 697657"];
304 [label="LanguageVersion.CSharp7 697658"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 697659"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 697660"];
307 [label="LanguageVersion.CSharp7_1 697661"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 697662"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 697663"];
310 [label="LanguageVersion.CSharp7_2 697664"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 697665"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 697666"];
313 [label="LanguageVersion.CSharp7_3 697667"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 697668"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 697669"];
316 [label="LanguageVersion.Default 697670"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 697671"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 697672"];
319 [label="LanguageVersion.Preview 697673"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 697674"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 697675"];
322 [label="LanguageVersion.CSharp8 697676"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697677"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697678"];
325 [label="LanguageVersion.CSharp9 697679"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 697680"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 697681"];
328 [label="DocumentationMode.Diagnose 697682"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 697683"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 697684"];
331 [label="Regular 697685"];
332 [label="'UseLegacyStrongNameProvider' 697686"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 697687"];
334 [label="param WithFeature(this CSharpParseOptions options) 697688"];
335 [label="param WithFeature(string feature) 697689"];
336 [label="param WithFeature(string value = 'true') 697690"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 697691"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 697692"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 697693"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 697694"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 697695"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 697696"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 697697"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 697698"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 697699"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 697700"];
347 [label="1 697701"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 697702"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 697703"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 697704"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 697705"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 697706"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 697707"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 697708"];
355 [label="LanguageVersion.CSharp8 697709"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697710"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697711"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 697712"];
359 [label="new SmallDictionary<string, string> { } 697713"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 697714"];
361 [label="kind: SourceCodeKind.Regular 697715"];
362 [label="documentationMode: DocumentationMode.None 697716"];
363 [label="languageVersion: LanguageVersion.Preview 697717"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 697718"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 697719"];
366 [label="s_experimentalFeatures 697720"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 697721"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 697722"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 697723"];
370 [label="'testV7SwitchBinder' 697724"];
371 [label="'true' 697725"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 697726"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 697727"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 697728"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 697729"];
376 [label="RegularWithRecursivePatterns = Regular8 697730"];
377 [label="RegularWithoutPatternCombinators = Regular8 697731"];
378 [label="RegularWithPatternCombinators = RegularPreview 697732"];
379 [label="OutputKind.DynamicallyLinkedLibrary 697733"];
380 [label="OptimizationLevel.Release 697734"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 697735"];
382 [label="param CreateTestOptions(OutputKind outputKind) 697736"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697737"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 697738"];
385 [label="outputKind 697739"];
386 [label="optimizationLevel: optimizationLevel 697740"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 697741"];
388 [label="allowUnsafe: allowUnsafe 697742"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697743"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697744"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 697745"];
392 [label="OutputKind.ConsoleApplication 697746"];
393 [label="OptimizationLevel.Release 697747"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 697748"];
395 [label="param CreateTestOptions(OutputKind outputKind) 697749"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697750"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 697751"];
398 [label="outputKind 697752"];
399 [label="optimizationLevel: optimizationLevel 697753"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 697754"];
401 [label="allowUnsafe: allowUnsafe 697755"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697756"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697757"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 697758"];
405 [label="true 697759"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 697760"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 697761"];
408 [label="true 697762"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 697763"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 697764"];
411 [label="OutputKind.DynamicallyLinkedLibrary 697765"];
412 [label="OptimizationLevel.Debug 697766"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 697767"];
414 [label="param CreateTestOptions(OutputKind outputKind) 697768"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697769"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 697770"];
417 [label="outputKind 697771"];
418 [label="optimizationLevel: optimizationLevel 697772"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 697773"];
420 [label="allowUnsafe: allowUnsafe 697774"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697775"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697776"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 697777"];
424 [label="OutputKind.ConsoleApplication 697778"];
425 [label="OptimizationLevel.Debug 697779"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 697780"];
427 [label="param CreateTestOptions(OutputKind outputKind) 697781"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697782"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 697783"];
430 [label="outputKind 697784"];
431 [label="optimizationLevel: optimizationLevel 697785"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 697786"];
433 [label="allowUnsafe: allowUnsafe 697787"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697788"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697789"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 697790"];
437 [label="OutputKind.WindowsRuntimeMetadata 697791"];
438 [label="OptimizationLevel.Release 697792"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 697793"];
440 [label="param CreateTestOptions(OutputKind outputKind) 697794"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697795"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 697796"];
443 [label="outputKind 697797"];
444 [label="optimizationLevel: optimizationLevel 697798"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 697799"];
446 [label="allowUnsafe: allowUnsafe 697800"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697801"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697802"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 697803"];
450 [label="OutputKind.WindowsRuntimeMetadata 697804"];
451 [label="OptimizationLevel.Debug 697805"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 697806"];
453 [label="param CreateTestOptions(OutputKind outputKind) 697807"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697808"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 697809"];
456 [label="outputKind 697810"];
457 [label="optimizationLevel: optimizationLevel 697811"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 697812"];
459 [label="allowUnsafe: allowUnsafe 697813"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697814"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697815"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 697816"];
463 [label="OutputKind.NetModule 697817"];
464 [label="OptimizationLevel.Release 697818"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 697819"];
466 [label="param CreateTestOptions(OutputKind outputKind) 697820"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697821"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 697822"];
469 [label="outputKind 697823"];
470 [label="optimizationLevel: optimizationLevel 697824"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 697825"];
472 [label="allowUnsafe: allowUnsafe 697826"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697827"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697828"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 697829"];
476 [label="OutputKind.NetModule 697830"];
477 [label="OptimizationLevel.Debug 697831"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 697832"];
479 [label="param CreateTestOptions(OutputKind outputKind) 697833"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697834"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 697835"];
482 [label="outputKind 697836"];
483 [label="optimizationLevel: optimizationLevel 697837"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 697838"];
485 [label="allowUnsafe: allowUnsafe 697839"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697840"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697841"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 697842"];
489 [label="true 697843"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 697844"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 697845"];
492 [label="true 697846"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 697847"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 697848"];
495 [label="true 697849"];
496 [label="DebugDll.WithAllowUnsafe(true) 697850"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 697851"];
498 [label="true 697852"];
499 [label="DebugExe.WithAllowUnsafe(true) 697853"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 697854"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697855"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697856"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697857"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697858"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697859"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697860"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697861"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697862"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697863"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697864"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697865"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697866"];
513 [label="DebugInformationFormat.Pdb 697867"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 697868"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 697869"];
516 [label="options = TestOptions.Regular; 697870"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697871"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697872"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697873"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697874"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697875"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697876"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697877"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697878"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697879"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697880"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 697881"];
528 [label="param CheckSerializable(SyntaxTree tree) 697882"];
529 [label="var stream = new MemoryStream(); 697883"];
530 [label="var root = tree.GetRoot(); 697884"];
531 [label="var root = tree.GetRoot(); 697885"];
532 [label="root.SerializeTo(stream); 697886"];
533 [label="root.SerializeTo(stream); 697887"];
534 [label="root.SerializeTo(stream); 697888"];
535 [label="stream.Position = 0; 697889"];
536 [label="stream.Position 697890"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 697891"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 697892"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 697893"];
540 [label="return tree; 697894"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 697895"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 697896"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 697897"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 697898"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 697899"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 697900"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 697901"];
548 [label="hasTopLevelStatements 697902"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 697903"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 697904"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 697905"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 697906"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 697907"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 697908"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 697909"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 697910"];
557 [label="return; 697911"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 697912"];
559 [label="var compilation = createCompilationLambda(); 697913"];
560 [label="var compilation = createCompilationLambda(); 697914"];
561 [label="return Guid.NewGuid().ToString('D'); 697915"];
562 [label="var compilation = createCompilationLambda(); 697916"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 697917"];
564 [label="IsNullableEnabled(compilation) 697918"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 697919"];
566 [label="var trees = compilation.SyntaxTrees; 697920"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 697921"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 697922"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 697923"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 697924"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 697925"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 697926"];
573 [label="return compilation; 697927"];
574 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 697928"];
575 [label="Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>') 697929"];
576 [label="param Diagnostic(object code) 697930"];
577 [label="param Diagnostic(string squiggledText = null) 697931"];
578 [label="param Diagnostic(object[] arguments = null) 697932"];
579 [label="param Diagnostic(LinePosition? startLocation = null) 697933"];
580 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 697934"];
581 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 697935"];
582 [label="param Diagnostic(bool isSuppressed = false) 697936"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697937"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697938"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697939"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697940"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697941"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697942"];
589 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 697943"];
590 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 697944"];
591 [label="param Diagnostic(object code) 697945"];
592 [label="param Diagnostic(string squiggledText = null) 697946"];
593 [label="param Diagnostic(object[] arguments = null) 697947"];
594 [label="param Diagnostic(LinePosition? startLocation = null) 697948"];
595 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 697949"];
596 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 697950"];
597 [label="param Diagnostic(bool isSuppressed = false) 697951"];
598 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 697952"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697953"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697954"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697955"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697956"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697957"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697958"];
605 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697959"];
606 [label="{ } 697960"];
607 [label="None = { } 697961"];
608 [label="null 697962"];
609 [label="Any = null 697963"];
610 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 697964"];
611 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 697965"];
612 [label="param DiagnosticDescription(object code) 697966"];
613 [label="param DiagnosticDescription(bool isWarningAsError) 697967"];
614 [label="param DiagnosticDescription(string squiggledText) 697968"];
615 [label="param DiagnosticDescription(object[] arguments) 697969"];
616 [label="param DiagnosticDescription(LinePosition? startLocation) 697970"];
617 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 697971"];
618 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 697972"];
619 [label="param DiagnosticDescription(Type errorCodeType = null) 697973"];
620 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 697974"];
621 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 697975"];
622 [label="param DiagnosticDescription(bool isSuppressed = false) 697976"];
623 [label="param DiagnosticDescription(this) 697977"];
624 [label="_code 697978"];
625 [label="_isWarningAsError 697979"];
626 [label="_isSuppressed 697980"];
627 [label="_squiggledText 697981"];
628 [label="_arguments 697982"];
629 [label="_startPosition 697983"];
630 [label="_argumentOrderDoesNotMatter 697984"];
631 [label="_errorCodeType 697985"];
632 [label="_ignoreArgumentsWhenComparing 697986"];
633 [label="_defaultSeverityOpt 697987"];
634 [label="_effectiveSeverityOpt 697988"];
635 [label="_syntaxPredicate 697989"];
636 [label="_showPredicate 697990"];
637 [label="_location 697991"];
638 [label="_argumentsAsStrings 697992"];
639 [label="_code 697993"];
640 [label="_isWarningAsError 697994"];
641 [label="_squiggledText 697995"];
642 [label="_arguments 697996"];
643 [label="_startPosition 697997"];
644 [label="_syntaxPredicate 697998"];
645 [label="_argumentOrderDoesNotMatter 697999"];
646 [label="_errorCodeType = errorCodeType ?? code.GetType(); 698000"];
647 [label="_errorCodeType 698001"];
648 [label="_defaultSeverityOpt 698002"];
649 [label="_effectiveSeverityOpt 698003"];
650 [label="_isSuppressed 698004"];
651 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698005"];
652 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 698006"];
653 [label="Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1') 698007"];
654 [label="Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1') 698008"];
655 [label="param WithArguments(params object[] arguments) 698009"];
656 [label="param WithArguments(this) 698010"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698011"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698012"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698013"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698014"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698015"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698016"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698017"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698018"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698019"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698020"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698021"];
668 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 698022"];
669 [label="param DiagnosticDescription(object code) 698023"];
670 [label="param DiagnosticDescription(bool isWarningAsError) 698024"];
671 [label="param DiagnosticDescription(string squiggledText) 698025"];
672 [label="param DiagnosticDescription(object[] arguments) 698026"];
673 [label="param DiagnosticDescription(LinePosition? startLocation) 698027"];
674 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 698028"];
675 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698029"];
676 [label="param DiagnosticDescription(Type errorCodeType = null) 698030"];
677 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698031"];
678 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698032"];
679 [label="param DiagnosticDescription(bool isSuppressed = false) 698033"];
680 [label="param DiagnosticDescription(this) 698034"];
681 [label="_code 698035"];
682 [label="_isWarningAsError 698036"];
683 [label="_isSuppressed 698037"];
684 [label="_squiggledText 698038"];
685 [label="_arguments 698039"];
686 [label="_startPosition 698040"];
687 [label="_argumentOrderDoesNotMatter 698041"];
688 [label="_errorCodeType 698042"];
689 [label="_ignoreArgumentsWhenComparing 698043"];
690 [label="_defaultSeverityOpt 698044"];
691 [label="_effectiveSeverityOpt 698045"];
692 [label="_syntaxPredicate 698046"];
693 [label="_showPredicate 698047"];
694 [label="_location 698048"];
695 [label="_argumentsAsStrings 698049"];
696 [label="_arguments 698050"];
697 [label="_argumentOrderDoesNotMatter 698051"];
698 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 698052"];
699 [label="Diagnostic(ErrorCode.ERR_BadArity, 'A') 698053"];
700 [label="param Diagnostic(object code) 698054"];
701 [label="param Diagnostic(string squiggledText = null) 698055"];
702 [label="param Diagnostic(object[] arguments = null) 698056"];
703 [label="param Diagnostic(LinePosition? startLocation = null) 698057"];
704 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 698058"];
705 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698059"];
706 [label="param Diagnostic(bool isSuppressed = false) 698060"];
707 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698061"];
708 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698062"];
709 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698063"];
710 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698064"];
711 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698065"];
712 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698066"];
713 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698067"];
714 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 698068"];
715 [label="param Diagnostic(object code) 698069"];
716 [label="param Diagnostic(string squiggledText = null) 698070"];
717 [label="param Diagnostic(object[] arguments = null) 698071"];
718 [label="param Diagnostic(LinePosition? startLocation = null) 698072"];
719 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 698073"];
720 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698074"];
721 [label="param Diagnostic(bool isSuppressed = false) 698075"];
722 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 698076"];
723 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698077"];
724 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698078"];
725 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698079"];
726 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698080"];
727 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698081"];
728 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698082"];
729 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698083"];
730 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698084"];
731 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 698085"];
732 [label="param DiagnosticDescription(object code) 698086"];
733 [label="param DiagnosticDescription(bool isWarningAsError) 698087"];
734 [label="param DiagnosticDescription(string squiggledText) 698088"];
735 [label="param DiagnosticDescription(object[] arguments) 698089"];
736 [label="param DiagnosticDescription(LinePosition? startLocation) 698090"];
737 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 698091"];
738 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698092"];
739 [label="param DiagnosticDescription(Type errorCodeType = null) 698093"];
740 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698094"];
741 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698095"];
742 [label="param DiagnosticDescription(bool isSuppressed = false) 698096"];
743 [label="param DiagnosticDescription(this) 698097"];
744 [label="_code 698098"];
745 [label="_isWarningAsError 698099"];
746 [label="_isSuppressed 698100"];
747 [label="_squiggledText 698101"];
748 [label="_arguments 698102"];
749 [label="_startPosition 698103"];
750 [label="_argumentOrderDoesNotMatter 698104"];
751 [label="_errorCodeType 698105"];
752 [label="_ignoreArgumentsWhenComparing 698106"];
753 [label="_defaultSeverityOpt 698107"];
754 [label="_effectiveSeverityOpt 698108"];
755 [label="_syntaxPredicate 698109"];
756 [label="_showPredicate 698110"];
757 [label="_location 698111"];
758 [label="_argumentsAsStrings 698112"];
759 [label="_code 698113"];
760 [label="_isWarningAsError 698114"];
761 [label="_squiggledText 698115"];
762 [label="_arguments 698116"];
763 [label="_startPosition 698117"];
764 [label="_syntaxPredicate 698118"];
765 [label="_argumentOrderDoesNotMatter 698119"];
766 [label="_errorCodeType = errorCodeType ?? code.GetType(); 698120"];
767 [label="_errorCodeType 698121"];
768 [label="_defaultSeverityOpt 698122"];
769 [label="_effectiveSeverityOpt 698123"];
770 [label="_isSuppressed 698124"];
771 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698125"];
772 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 698126"];
773 [label="Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1') 698127"];
774 [label="Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1') 698128"];
775 [label="param WithArguments(params object[] arguments) 698129"];
776 [label="param WithArguments(this) 698130"];
777 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698131"];
778 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698132"];
779 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698133"];
780 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698134"];
781 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698135"];
782 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698136"];
783 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698137"];
784 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698138"];
785 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698139"];
786 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698140"];
787 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698141"];
788 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 698142"];
789 [label="param DiagnosticDescription(object code) 698143"];
790 [label="param DiagnosticDescription(bool isWarningAsError) 698144"];
791 [label="param DiagnosticDescription(string squiggledText) 698145"];
792 [label="param DiagnosticDescription(object[] arguments) 698146"];
793 [label="param DiagnosticDescription(LinePosition? startLocation) 698147"];
794 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 698148"];
795 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698149"];
796 [label="param DiagnosticDescription(Type errorCodeType = null) 698150"];
797 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698151"];
798 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698152"];
799 [label="param DiagnosticDescription(bool isSuppressed = false) 698153"];
800 [label="param DiagnosticDescription(this) 698154"];
801 [label="_code 698155"];
802 [label="_isWarningAsError 698156"];
803 [label="_isSuppressed 698157"];
804 [label="_squiggledText 698158"];
805 [label="_arguments 698159"];
806 [label="_startPosition 698160"];
807 [label="_argumentOrderDoesNotMatter 698161"];
808 [label="_errorCodeType 698162"];
809 [label="_ignoreArgumentsWhenComparing 698163"];
810 [label="_defaultSeverityOpt 698164"];
811 [label="_effectiveSeverityOpt 698165"];
812 [label="_syntaxPredicate 698166"];
813 [label="_showPredicate 698167"];
814 [label="_location 698168"];
815 [label="_argumentsAsStrings 698169"];
816 [label="_arguments 698170"];
817 [label="_argumentOrderDoesNotMatter 698171"];
818 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 698172"];
819 [label="Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>') 698173"];
820 [label="param Diagnostic(object code) 698174"];
821 [label="param Diagnostic(string squiggledText = null) 698175"];
822 [label="param Diagnostic(object[] arguments = null) 698176"];
823 [label="param Diagnostic(LinePosition? startLocation = null) 698177"];
824 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 698178"];
825 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698179"];
826 [label="param Diagnostic(bool isSuppressed = false) 698180"];
827 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698181"];
828 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698182"];
829 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698183"];
830 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698184"];
831 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698185"];
832 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698186"];
833 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698187"];
834 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 698188"];
835 [label="param Diagnostic(object code) 698189"];
836 [label="param Diagnostic(string squiggledText = null) 698190"];
837 [label="param Diagnostic(object[] arguments = null) 698191"];
838 [label="param Diagnostic(LinePosition? startLocation = null) 698192"];
839 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 698193"];
840 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698194"];
841 [label="param Diagnostic(bool isSuppressed = false) 698195"];
842 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 698196"];
843 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698197"];
844 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698198"];
845 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698199"];
846 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698200"];
847 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698201"];
848 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698202"];
849 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698203"];
850 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 698204"];
851 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 698205"];
852 [label="param DiagnosticDescription(object code) 698206"];
853 [label="param DiagnosticDescription(bool isWarningAsError) 698207"];
854 [label="param DiagnosticDescription(string squiggledText) 698208"];
855 [label="param DiagnosticDescription(object[] arguments) 698209"];
856 [label="param DiagnosticDescription(LinePosition? startLocation) 698210"];
857 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 698211"];
858 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698212"];
859 [label="param DiagnosticDescription(Type errorCodeType = null) 698213"];
860 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698214"];
861 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698215"];
862 [label="param DiagnosticDescription(bool isSuppressed = false) 698216"];
863 [label="param DiagnosticDescription(this) 698217"];
864 [label="_code 698218"];
865 [label="_isWarningAsError 698219"];
866 [label="_isSuppressed 698220"];
867 [label="_squiggledText 698221"];
868 [label="_arguments 698222"];
869 [label="_startPosition 698223"];
870 [label="_argumentOrderDoesNotMatter 698224"];
871 [label="_errorCodeType 698225"];
872 [label="_ignoreArgumentsWhenComparing 698226"];
873 [label="_defaultSeverityOpt 698227"];
874 [label="_effectiveSeverityOpt 698228"];
875 [label="_syntaxPredicate 698229"];
876 [label="_showPredicate 698230"];
877 [label="_location 698231"];
878 [label="_argumentsAsStrings 698232"];
879 [label="_code 698233"];
880 [label="_isWarningAsError 698234"];
881 [label="_squiggledText 698235"];
882 [label="_arguments 698236"];
883 [label="_startPosition 698237"];
884 [label="_syntaxPredicate 698238"];
885 [label="_argumentOrderDoesNotMatter 698239"];
886 [label="_errorCodeType = errorCodeType ?? code.GetType(); 698240"];
887 [label="_errorCodeType 698241"];
888 [label="_defaultSeverityOpt 698242"];
889 [label="_effectiveSeverityOpt 698243"];
890 [label="_isSuppressed 698244"];
891 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 698245"];
892 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 698246"];
893 [label="Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type') 698247"];
894 [label="Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type') 698248"];
895 [label="param WithArguments(params object[] arguments) 698249"];
896 [label="param WithArguments(this) 698250"];
897 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698251"];
898 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698252"];
899 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698253"];
900 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698254"];
901 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698255"];
902 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698256"];
903 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698257"];
904 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698258"];
905 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698259"];
906 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698260"];
907 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698261"];
908 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 698262"];
909 [label="param DiagnosticDescription(object code) 698263"];
910 [label="param DiagnosticDescription(bool isWarningAsError) 698264"];
911 [label="param DiagnosticDescription(string squiggledText) 698265"];
912 [label="param DiagnosticDescription(object[] arguments) 698266"];
913 [label="param DiagnosticDescription(LinePosition? startLocation) 698267"];
914 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 698268"];
915 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698269"];
916 [label="param DiagnosticDescription(Type errorCodeType = null) 698270"];
917 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698271"];
918 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698272"];
919 [label="param DiagnosticDescription(bool isSuppressed = false) 698273"];
920 [label="param DiagnosticDescription(this) 698274"];
921 [label="_code 698275"];
922 [label="_isWarningAsError 698276"];
923 [label="_isSuppressed 698277"];
924 [label="_squiggledText 698278"];
925 [label="_arguments 698279"];
926 [label="_startPosition 698280"];
927 [label="_argumentOrderDoesNotMatter 698281"];
928 [label="_errorCodeType 698282"];
929 [label="_ignoreArgumentsWhenComparing 698283"];
930 [label="_defaultSeverityOpt 698284"];
931 [label="_effectiveSeverityOpt 698285"];
932 [label="_syntaxPredicate 698286"];
933 [label="_showPredicate 698287"];
934 [label="_location 698288"];
935 [label="_argumentsAsStrings 698289"];
936 [label="_arguments 698290"];
937 [label="_argumentOrderDoesNotMatter 698291"];
938 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ); 698292"];
939 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ) 698293"];
940 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ) 698294"];
941 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ) 698295"];
942 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (19,28): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A<int, int>').WithArguments('N.A<T>', 'type', '1'),\n                // (20,27): error CS0305: Using the generic type 'N.A<T>' requires '1' type arguments\n                // \n                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A<T>', 'type', '1'),\n                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments\n                // \n                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B<int>').WithArguments('N.B', 'type')\n                ) 698296"];
943 [label="param VerifyDiagnostics(this TCompilation c) 698297"];
944 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 698298"];
945 [label="var diagnostics = c.GetDiagnostics(); 698299"];
946 [label="null 698300"];
947 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 698301"];
948 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 698302"];
949 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 698303"];
950 [label="null 698304"];
951 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 698305"];
952 [label="param Imports(CSharpCompilation compilation) 698306"];
953 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 698307"];
954 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 698308"];
955 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 698309"];
956 [label="param Imports(DiagnosticBag diagnostics) 698310"];
957 [label="param Imports(this) 698311"];
958 [label="_compilation 698312"];
959 [label="_diagnostics 698313"];
960 [label="UsingAliases 698314"];
961 [label="Debug.Assert(usingAliases != null); 698315"];
962 [label="Debug.Assert(usingAliases != null); 698316"];
963 [label="Debug.Assert(!usings.IsDefault); 698317"];
964 [label="Debug.Assert(!externs.IsDefault); 698318"];
965 [label="_compilation 698319"];
966 [label="this.UsingAliases 698320"];
967 [label="this.Usings 698321"];
968 [label="_diagnostics 698322"];
969 [label="this.ExternAliases 698323"];
970 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 698324"];
971 [label="var diagnostics = c.GetDiagnostics(); 698325"];
972 [label="param FromGlobalUsings(CSharpCompilation compilation) 698326"];
973 [label="var usings = compilation.Options.Usings; 698327"];
974 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 698328"];
975 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 698329"];
976 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 698330"];
977 [label="return Empty; 698331"];
978 [label="var diagnostics = c.GetDiagnostics(); 698332"];
979 [label="param Complete(CancellationToken cancellationToken) 698333"];
980 [label="param Complete(this) 698334"];
981 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 698335"];
982 [label="cancellationToken.ThrowIfCancellationRequested(); 698336"];
983 [label="var incompletePart = _state.NextIncompletePart; 698337"];
984 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 698338"];
985 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 698339"];
986 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 698340"];
987 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 698341"];
988 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 698342"];
989 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 698343"];
990 [label="Validate() 698344"];
991 [label="param Validate(this) 698345"];
992 [label="if (this == Empty)\n            {\n                return;\n            } 698346"];
993 [label="return; 698347"];
994 [label="Validate(); 698348"];
995 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 698349"];
996 [label="return; 698350"];
997 [label="param Includes(this BinderFlags self) 698351"];
998 [label="param Includes(BinderFlags other) 698352"];
999 [label="return (self & other) == other; 698353"];
1000 [label="var diagnostics = c.GetDiagnostics(); 698354"];
1001 [label="0 698355"];
1002 [label="ExternalScope = 0 698356"];
1003 [label="1 698357"];
1004 [label="TopLevelScope = 1 698358"];
1005 [label="2 698359"];
1006 [label="ValueKindInsignificantBits = 2 698360"];
1007 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 698361"];
1008 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 698362"];
1009 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 698363"];
1010 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 698364"];
1011 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 698365"];
1012 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 698366"];
1013 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 698367"];
1014 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 698368"];
1015 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 698369"];
1016 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 698370"];
1017 [label="10 698371"];
1018 [label="MaxParameterListsForErrorRecovery = 10 698372"];
1019 [label="'<>h__TransparentIdentifier' 698373"];
1020 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 698374"];
1021 [label="s => (MethodSymbol)s 698375"];
1022 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 698376"];
1023 [label="s => (PropertySymbol)s 698377"];
1024 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 698378"];
1025 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 698379"];
1026 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 698380"];
1027 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 698381"];
1028 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 698382"];
1029 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 698383"];
1030 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698384"];
1031 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698385"];
1032 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698386"];
1033 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698387"];
1034 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 698388"];
1035 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698389"];
1036 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698390"];
1037 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698391"];
1038 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698392"];
1039 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698393"];
1040 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698394"];
1041 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 698395"];
1042 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 698396"];
1043 [label="param GetWellKnownTypeMember(WellKnownMember member) 698397"];
1044 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 698398"];
1045 [label="param GetWellKnownTypeMember(Location location = null) 698399"];
1046 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 698400"];
1047 [label="param GetWellKnownTypeMember(bool isOptional = false) 698401"];
1048 [label="Debug.Assert((syntax != null) ^ (location != null)); 698402"];
1049 [label="Debug.Assert((syntax != null) ^ (location != null)); 698403"];
1050 [label="Debug.Assert((syntax != null) ^ (location != null)); 698404"];
1051 [label="Debug.Assert((syntax != null) ^ (location != null)); 698405"];
1052 [label="DiagnosticInfo useSiteDiagnostic; 698406"];
1053 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698407"];
1054 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698408"];
1055 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698409"];
1056 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698410"];
1057 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 698411"];
1058 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 698412"];
1059 [label="param GetWellKnownTypeMember(WellKnownMember member) 698413"];
1060 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 698414"];
1061 [label="param GetWellKnownTypeMember(bool isOptional = false) 698415"];
1062 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698416"];
1063 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698417"];
1064 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698418"];
1065 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698419"];
1066 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698420"];
1067 [label="Debug.Assert(symbol is object); 698421"];
1068 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 698422"];
1069 [label="isInternal = false; 698423"];
1070 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698424"];
1071 [label="symbol = symbol.ContainingType; 698425"];
1072 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 698426"];
1073 [label="return true; 698427"];
1074 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698428"];
1075 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698429"];
1076 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698430"];
1077 [label="Debug.Assert(symbol is object); 698431"];
1078 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 698432"];
1079 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698433"];
1080 [label="symbol = symbol.ContainingType; 698434"];
1081 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 698435"];
1082 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698436"];
1083 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698437"];
1084 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 698438"];
1085 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 698439"];
1086 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 698440"];
1087 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 698441"];
1088 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698442"];
1089 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698443"];
1090 [label="Debug.Assert(symbol is object); 698444"];
1091 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 698445"];
1092 [label="isInternal = false; 698446"];
1093 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698447"];
1094 [label="symbol = symbol.ContainingType; 698448"];
1095 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 698449"];
1096 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698450"];
1097 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698451"];
1098 [label="Debug.Assert(symbol is object); 698452"];
1099 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 698453"];
1100 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698454"];
1101 [label="symbol = symbol.ContainingType; 698455"];
1102 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 698456"];
1103 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 698457"];
1104 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 698458"];
1105 [label="return memberSymbol; 698459"];
1106 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 698460"];
1107 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 698461"];
1108 [label="return memberSymbol; 698462"];
1109 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698463"];
1110 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698464"];
1111 [label="Debug.Assert(symbol is object); 698465"];
1112 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 698466"];
1113 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698467"];
1114 [label="symbol = symbol.ContainingType; 698468"];
1115 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 698469"];
1116 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698470"];
1117 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698471"];
1118 [label="Debug.Assert(symbol is object); 698472"];
1119 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 698473"];
1120 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 698474"];
1121 [label="symbol = symbol.ContainingType; 698475"];
1122 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 698476"];
1123 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 698477"];
1124 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 698478"];
1125 [label="return memberSymbol; 698479"];
1126 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 698480"];
1127 [label="return memberSymbol; 698481"];
1128 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 698482"];
1129 [label="return memberSymbol; 698483"];
1130 [label="return memberSymbol; 698484"];
1131 [label="param GetBinder(SyntaxNode node) 698485"];
1132 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 698486"];
1133 [label="param GetBinder(Symbol memberOpt = null) 698487"];
1134 [label="param GetBinder(this) 698488"];
1135 [label="int position = node.SpanStart; 698489"];
1136 [label="InScript 698490"];
1137 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 698491"];
1138 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 698492"];
1139 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 698493"];
1140 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 698494"];
1141 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 698495"];
1142 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 698496"];
1143 [label="node = node.Parent; 698497"];
1144 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698498"];
1145 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698499"];
1146 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698500"];
1147 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698501"];
1148 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 698502"];
1149 [label="param GetBinder(SyntaxNode node) 698503"];
1150 [label="param GetBinder(int position) 698504"];
1151 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 698505"];
1152 [label="param GetBinder(Symbol memberOpt = null) 698506"];
1153 [label="param GetBinder(this) 698507"];
1154 [label="Debug.Assert(node != null); 698508"];
1155 [label="Debug.Assert(node != null); 698509"];
1156 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 698510"];
1157 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 698511"];
1158 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 698512"];
1159 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 698513"];
1160 [label="param BinderFactoryVisitor(BinderFactory factory) 698514"];
1161 [label="param BinderFactoryVisitor(this) 698515"];
1162 [label="param BinderFactoryVisitor(this) 698516"];
1163 [label="_position 698517"];
1164 [label="_memberDeclarationOpt 698518"];
1165 [label="_memberOpt 698519"];
1166 [label="_factory 698520"];
1167 [label="_factory 698521"];
1168 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 698522"];
1169 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698523"];
1170 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698524"];
1171 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698525"];
1172 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 698526"];
1173 [label="param Initialize(int position) 698527"];
1174 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 698528"];
1175 [label="param Initialize(Symbol memberOpt) 698529"];
1176 [label="param Initialize(this) 698530"];
1177 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698531"];
1178 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698532"];
1179 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698533"];
1180 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698534"];
1181 [label="_position 698535"];
1182 [label="_memberDeclarationOpt 698536"];
1183 [label="_memberOpt 698537"];
1184 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698538"];
1185 [label="Binder result = visitor.Visit(node); 698539"];
1186 [label="visitor.Visit(node) 698540"];
1187 [label="param Visit(SyntaxNode node) 698541"];
1188 [label="param Visit(this) 698542"];
1189 [label="return VisitCore(node); 698543"];
1190 [label="VisitCore(node) 698544"];
1191 [label="param VisitCore(SyntaxNode node) 698545"];
1192 [label="param VisitCore(this) 698546"];
1193 [label="return ((CSharpSyntaxNode)node).Accept(this); 698547"];
1194 [label="return ((CSharpSyntaxNode)node).Accept(this); 698548"];
1195 [label="return ((CSharpSyntaxNode)node).Accept(this); 698549"];
1196 [label="param DefaultVisit(SyntaxNode parent) 698550"];
1197 [label="param DefaultVisit(this) 698551"];
1198 [label="return VisitCore(parent.Parent); 698552"];
1199 [label="VisitCore(parent.Parent) 698553"];
1200 [label="param VisitCore(SyntaxNode node) 698554"];
1201 [label="param VisitCore(this) 698555"];
1202 [label="return ((CSharpSyntaxNode)node).Accept(this); 698556"];
1203 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 698557"];
1204 [label="param VisitClassDeclaration(this) 698558"];
1205 [label="return VisitTypeDeclarationCore(node); 698559"];
1206 [label="VisitTypeDeclarationCore(node) 698560"];
1207 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 698561"];
1208 [label="param VisitTypeDeclarationCore(this) 698562"];
1209 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 698563"];
1210 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 698564"];
1211 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 698565"];
1212 [label="NodeUsage extraInfo = NodeUsage.Normal; 698566"];
1213 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 698567"];
1214 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 698568"];
1215 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 698569"];
1216 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 698570"];
1217 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 698571"];
1218 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 698572"];
1219 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 698573"];
1220 [label="return VisitTypeDeclarationCore(parent, extraInfo); 698574"];
1221 [label="return VisitTypeDeclarationCore(parent, extraInfo); 698575"];
1222 [label="VisitTypeDeclarationCore(parent, extraInfo) 698576"];
1223 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 698577"];
1224 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 698578"];
1225 [label="param VisitTypeDeclarationCore(this) 698579"];
1226 [label="var key = CreateBinderCacheKey(parent, extraInfo); 698580"];
1227 [label="var key = CreateBinderCacheKey(parent, extraInfo); 698581"];
1228 [label="CreateBinderCacheKey(parent, extraInfo) 698582"];
1229 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 698583"];
1230 [label="param CreateBinderCacheKey(NodeUsage usage) 698584"];
1231 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 698585"];
1232 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 698586"];
1233 [label="return new BinderCacheKey(node, usage); 698587"];
1234 [label="return new BinderCacheKey(node, usage); 698588"];
1235 [label="return new BinderCacheKey(node, usage); 698589"];
1236 [label="new BinderCacheKey(node, usage) 698590"];
1237 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 698591"];
1238 [label="param BinderCacheKey(NodeUsage usage) 698592"];
1239 [label="param BinderCacheKey(this) 698593"];
1240 [label="this.syntaxNode 698594"];
1241 [label="this.usage 698595"];
1242 [label="var key = CreateBinderCacheKey(parent, extraInfo); 698596"];
1243 [label="Binder resultBinder; 698597"];
1244 [label="binderCache 698598"];
1245 [label="get\n                {\n                    return _factory._binderCache;\n                } 698599"];
1246 [label="return _factory._binderCache; 698600"];
1247 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 698601"];
1248 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 698602"];
1249 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 698603"];
1250 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 698604"];
1251 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 698605"];
1252 [label="param GetHashCode(this) 698606"];
1253 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 698607"];
1254 [label="resultBinder = VisitCore(parent.Parent); 698608"];
1255 [label="VisitCore(parent.Parent) 698609"];
1256 [label="param VisitCore(SyntaxNode node) 698610"];
1257 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 698611"];
1258 [label="param VisitNamespaceDeclaration(this) 698612"];
1259 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 698613"];
1260 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 698614"];
1261 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 698615"];
1262 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 698616"];
1263 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 698617"];
1264 [label="bool inUsing = IsInUsing(parent); 698618"];
1265 [label="IsInUsing(parent) 698619"];
1266 [label="param IsInUsing(CSharpSyntaxNode containingNode) 698620"];
1267 [label="param IsInUsing(this) 698621"];
1268 [label="TextSpan containingSpan = containingNode.Span; 698622"];
1269 [label="SyntaxToken token; 698623"];
1270 [label="token 698624"];
1271 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 698625"];
1272 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 698626"];
1273 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 698627"];
1274 [label="token = containingNode.FindToken(_position); 698628"];
1275 [label="token = containingNode.FindToken(_position); 698629"];
1276 [label="var node = token.Parent; 698630"];
1277 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 698631"];
1278 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 698632"];
1279 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 698633"];
1280 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 698634"];
1281 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 698635"];
1282 [label="node = node.Parent; 698636"];
1283 [label="return false; 698637"];
1284 [label="bool inUsing = IsInUsing(parent); 698638"];
1285 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698639"];
1286 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698640"];
1287 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698641"];
1288 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698642"];
1289 [label="VisitNamespaceDeclaration(parent, _position, inBody, inUsing) 698643"];
1290 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 698644"];
1291 [label="param VisitNamespaceDeclaration(int position) 698645"];
1292 [label="param VisitNamespaceDeclaration(bool inBody) 698646"];
1293 [label="param VisitNamespaceDeclaration(bool inUsing) 698647"];
1294 [label="param VisitNamespaceDeclaration(this) 698648"];
1295 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 698649"];
1296 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 698650"];
1297 [label="inUsing 698651"];
1298 [label="inBody 698652"];
1299 [label="var extraInfo = inUsing ? NodeUsage.NamespaceUsings : (inBody ? NodeUsage.NamespaceBody : NodeUsage.Normal); 698653"];
1300 [label="var key = CreateBinderCacheKey(parent, extraInfo); 698654"];
1301 [label="var key = CreateBinderCacheKey(parent, extraInfo); 698655"];
1302 [label="CreateBinderCacheKey(parent, extraInfo) 698656"];
1303 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 698657"];
1304 [label="param CreateBinderCacheKey(NodeUsage usage) 698658"];
1305 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 698659"];
1306 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 698660"];
1307 [label="var key = CreateBinderCacheKey(parent, extraInfo); 698661"];
1308 [label="Binder result; 698662"];
1309 [label="binderCache 698663"];
1310 [label="get\n                {\n                    return _factory._binderCache;\n                } 698664"];
1311 [label="return _factory._binderCache; 698665"];
1312 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698666"];
1313 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698667"];
1314 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698668"];
1315 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698669"];
1316 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698670"];
1317 [label="Binder outer; 698671"];
1318 [label="var container = parent.Parent; 698672"];
1319 [label="InScript 698673"];
1320 [label="get\n                {\n                    return _factory.InScript;\n                } 698674"];
1321 [label="_factory.InScript 698675"];
1322 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 698676"];
1323 [label="return _factory.InScript; 698677"];
1324 [label="if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    } 698678"];
1325 [label="outer = _factory.GetBinder(parent.Parent, position); 698679"];
1326 [label="outer = _factory.GetBinder(parent.Parent, position); 698680"];
1327 [label="outer = _factory.GetBinder(parent.Parent, position); 698681"];
1328 [label="_factory.GetBinder(parent.Parent, position) 698682"];
1329 [label="param GetBinder(SyntaxNode node) 698683"];
1330 [label="param GetBinder(int position) 698684"];
1331 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 698685"];
1332 [label="param GetBinder(Symbol memberOpt = null) 698686"];
1333 [label="Debug.Assert(node != null); 698687"];
1334 [label="Debug.Assert(node != null); 698688"];
1335 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 698689"];
1336 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698690"];
1337 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698691"];
1338 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698692"];
1339 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 698693"];
1340 [label="param VisitCompilationUnit(this) 698694"];
1341 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 698695"];
1342 [label="IsInUsing(parent) 698696"];
1343 [label="param IsInUsing(CSharpSyntaxNode containingNode) 698697"];
1344 [label="param IsInUsing(this) 698698"];
1345 [label="SyntaxToken token; 698699"];
1346 [label="token 698700"];
1347 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 698701"];
1348 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 698702"];
1349 [label="InScript 698703"];
1350 [label="get\n                {\n                    return _factory.InScript;\n                } 698704"];
1351 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 698705"];
1352 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 698706"];
1353 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 698707"];
1354 [label="param VisitCompilationUnit(bool inUsing) 698708"];
1355 [label="param VisitCompilationUnit(bool inScript) 698709"];
1356 [label="param VisitCompilationUnit(this) 698710"];
1357 [label="syntaxTree 698711"];
1358 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 698712"];
1359 [label="return _factory._syntaxTree; 698713"];
1360 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 698714"];
1361 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 698715"];
1362 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 698716"];
1363 [label="inUsing 698717"];
1364 [label="inScript 698718"];
1365 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 698719"];
1366 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 698720"];
1367 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 698721"];
1368 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 698722"];
1369 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 698723"];
1370 [label="param CreateBinderCacheKey(NodeUsage usage) 698724"];
1371 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 698725"];
1372 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 698726"];
1373 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 698727"];
1374 [label="Binder result; 698728"];
1375 [label="binderCache 698729"];
1376 [label="get\n                {\n                    return _factory._binderCache;\n                } 698730"];
1377 [label="return _factory._binderCache; 698731"];
1378 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698732"];
1379 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698733"];
1380 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698734"];
1381 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698735"];
1382 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 698736"];
1383 [label="this.buckStopsHereBinder 698737"];
1384 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 698738"];
1385 [label="return _factory._buckStopsHereBinder; 698739"];
1386 [label="result = this.buckStopsHereBinder; 698740"];
1387 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 698741"];
1388 [label="compilation 698742"];
1389 [label="get\n                {\n                    return _factory._compilation;\n                } 698743"];
1390 [label="return _factory._compilation; 698744"];
1391 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698745"];
1392 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698746"];
1393 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698747"];
1394 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698748"];
1395 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698749"];
1396 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 698750"];
1397 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 698751"];
1398 [label="param InContainerBinder(Binder next) 698752"];
1399 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 698753"];
1400 [label="param InContainerBinder(bool inUsing) 698754"];
1401 [label="param InContainerBinder(this) 698755"];
1402 [label="next 698756"];
1403 [label="param InContainerBinder(this) 698757"];
1404 [label="param Binder(Binder next) 698758"];
1405 [label="param Binder(this) 698759"];
1406 [label="param Binder(Conversions? conversions = null) 698760"];
1407 [label="internal CSharpCompilation Compilation { get; } 698761"];
1408 [label="Flags 698762"];
1409 [label="protected internal Binder? Next { get; } 698763"];
1410 [label="_lazyConversions 698764"];
1411 [label="_lazyOverloadResolution 698765"];
1412 [label="RoslynDebug.Assert(next != null); 698766"];
1413 [label="RoslynDebug.Assert(next != null); 698767"];
1414 [label="Next 698768"];
1415 [label="this.Flags 698769"];
1416 [label="this.Compilation 698770"];
1417 [label="_lazyConversions 698771"];
1418 [label="_container 698772"];
1419 [label="_computeImports 698773"];
1420 [label="_lazyImports 698774"];
1421 [label="_lazyImportChain 698775"];
1422 [label="_lazyQuickAttributeChecker 698776"];
1423 [label="Debug.Assert((object)container != null); 698777"];
1424 [label="Debug.Assert((object)container != null); 698778"];
1425 [label="Debug.Assert(declarationSyntax != null); 698779"];
1426 [label="Debug.Assert(declarationSyntax != null); 698780"];
1427 [label="_container 698781"];
1428 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 698782"];
1429 [label="_computeImports 698783"];
1430 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 698784"];
1431 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 698785"];
1432 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 698786"];
1433 [label="_usingsSyntax 698787"];
1434 [label="compilation 698788"];
1435 [label="get\n                {\n                    return _factory._compilation;\n                } 698789"];
1436 [label="return _factory._compilation; 698790"];
1437 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 698791"];
1438 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 698792"];
1439 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 698793"];
1440 [label="binderCache 698794"];
1441 [label="return _factory._binderCache; 698795"];
1442 [label="binderCache.TryAdd(key, result); 698796"];
1443 [label="binderCache.TryAdd(key, result); 698797"];
1444 [label="binderCache.TryAdd(key, result); 698798"];
1445 [label="binderCache.TryAdd(key, result); 698799"];
1446 [label="binderCache.TryAdd(key, result); 698800"];
1447 [label="return result; 698801"];
1448 [label="return ((CSharpSyntaxNode)node).Accept(this); 698802"];
1449 [label="_binderFactoryVisitorPool.Free(visitor); 698803"];
1450 [label="_binderFactoryVisitorPool.Free(visitor); 698804"];
1451 [label="return result; 698805"];
1452 [label="if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    } 698806"];
1453 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698807"];
1454 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698808"];
1455 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698809"];
1456 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698810"];
1457 [label="MakeNamespaceBinder(parent, parent.Name, outer, inUsing) 698811"];
1458 [label="param MakeNamespaceBinder(CSharpSyntaxNode node) 698812"];
1459 [label="param MakeNamespaceBinder(NameSyntax name) 698813"];
1460 [label="param MakeNamespaceBinder(Binder outer) 698814"];
1461 [label="param MakeNamespaceBinder(bool inUsing) 698815"];
1462 [label="param MakeNamespaceBinder(this) 698816"];
1463 [label="QualifiedNameSyntax dotted; 698817"];
1464 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 698818"];
1465 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 698819"];
1466 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 698820"];
1467 [label="NamespaceOrTypeSymbol container; 698821"];
1468 [label="if (outer is InContainerBinder inContainerBinder)\n                {\n                    container = inContainerBinder.Container;\n                }\n                else\n                {\n                    Debug.Assert(outer is SimpleProgramUnitBinder);\n                    container = outer.Compilation.GlobalNamespace;\n                } 698822"];
1469 [label="inContainerBinder.Container 698823"];
1470 [label="get\n            {\n                return _container;\n            } 698824"];
1471 [label="return _container; 698825"];
1472 [label="container = inContainerBinder.Container; 698826"];
1473 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 698827"];
1474 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 698828"];
1475 [label="if ((object)ns == null) return outer; 698829"];
1476 [label="if ((object)ns == null) return outer; 698830"];
1477 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698831"];
1478 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698832"];
1479 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698833"];
1480 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698834"];
1481 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698835"];
1482 [label="new InContainerBinder(ns, outer, node, inUsing: inUsing) 698836"];
1483 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 698837"];
1484 [label="param InContainerBinder(Binder next) 698838"];
1485 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 698839"];
1486 [label="param InContainerBinder(bool inUsing) 698840"];
1487 [label="param InContainerBinder(this) 698841"];
1488 [label="param InContainerBinder(this) 698842"];
1489 [label="param Binder(this) 698843"];
1490 [label="param Binder(Conversions? conversions = null) 698844"];
1491 [label="internal CSharpCompilation Compilation { get; } 698845"];
1492 [label="Flags 698846"];
1493 [label="protected internal Binder? Next { get; } 698847"];
1494 [label="_lazyConversions 698848"];
1495 [label="_lazyOverloadResolution 698849"];
1496 [label="RoslynDebug.Assert(next != null); 698850"];
1497 [label="RoslynDebug.Assert(next != null); 698851"];
1498 [label="this.Flags 698852"];
1499 [label="this.Compilation 698853"];
1500 [label="_lazyConversions 698854"];
1501 [label="_container 698855"];
1502 [label="_computeImports 698856"];
1503 [label="_lazyImports 698857"];
1504 [label="_lazyImportChain 698858"];
1505 [label="_lazyQuickAttributeChecker 698859"];
1506 [label="Debug.Assert((object)container != null); 698860"];
1507 [label="Debug.Assert((object)container != null); 698861"];
1508 [label="Debug.Assert(declarationSyntax != null); 698862"];
1509 [label="Debug.Assert(declarationSyntax != null); 698863"];
1510 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 698864"];
1511 [label="_computeImports 698865"];
1512 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 698866"];
1513 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 698867"];
1514 [label="if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 698868"];
1515 [label="var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax; 698869"];
1516 [label="_usingsSyntax 698870"];
1517 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698871"];
1518 [label="binderCache 698872"];
1519 [label="return _factory._binderCache; 698873"];
1520 [label="binderCache.TryAdd(key, result); 698874"];
1521 [label="binderCache.TryAdd(key, result); 698875"];
1522 [label="binderCache.TryAdd(key, result); 698876"];
1523 [label="binderCache.TryAdd(key, result); 698877"];
1524 [label="binderCache.TryAdd(key, result); 698878"];
1525 [label="param Equals(BinderCacheKey other) 698879"];
1526 [label="param Equals(this) 698880"];
1527 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 698881"];
1528 [label="return result; 698882"];
1529 [label="return ((CSharpSyntaxNode)node).Accept(this); 698883"];
1530 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 698884"];
1531 [label="resultBinder.ContainingMemberOrLambda 698885"];
1532 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 698886"];
1533 [label="var merged = _container as MergedNamespaceSymbol; 698887"];
1534 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 698888"];
1535 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 698889"];
1536 [label="((object)merged != null) 698890"];
1537 [label="_container 698891"];
1538 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 698892"];
1539 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 698893"];
1540 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 698894"];
1541 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 698895"];
1542 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 698896"];
1543 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 698897"];
1544 [label="new InContainerBinder(typeSymbol, resultBinder) 698898"];
1545 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 698899"];
1546 [label="param InContainerBinder(Binder next) 698900"];
1547 [label="param InContainerBinder(Imports imports = null) 698901"];
1548 [label="param InContainerBinder(this) 698902"];
1549 [label="next 698903"];
1550 [label="param InContainerBinder(this) 698904"];
1551 [label="param Binder(Binder next) 698905"];
1552 [label="param Binder(this) 698906"];
1553 [label="param Binder(Conversions? conversions = null) 698907"];
1554 [label="internal CSharpCompilation Compilation { get; } 698908"];
1555 [label="Flags 698909"];
1556 [label="protected internal Binder? Next { get; } 698910"];
1557 [label="_lazyConversions 698911"];
1558 [label="_lazyOverloadResolution 698912"];
1559 [label="RoslynDebug.Assert(next != null); 698913"];
1560 [label="RoslynDebug.Assert(next != null); 698914"];
1561 [label="this.Flags 698915"];
1562 [label="this.Compilation 698916"];
1563 [label="_lazyConversions 698917"];
1564 [label="_container 698918"];
1565 [label="_computeImports 698919"];
1566 [label="_lazyImports 698920"];
1567 [label="_lazyImportChain 698921"];
1568 [label="_lazyQuickAttributeChecker 698922"];
1569 [label="Debug.Assert((object)container != null || imports != null); 698923"];
1570 [label="Debug.Assert((object)container != null || imports != null); 698924"];
1571 [label="_container 698925"];
1572 [label="_lazyImports = imports ?? Imports.Empty; 698926"];
1573 [label="_lazyImports = imports ?? Imports.Empty; 698927"];
1574 [label="_lazyImports 698928"];
1575 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 698929"];
1576 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 698930"];
1577 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 698931"];
1578 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 698932"];
1579 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 698933"];
1580 [label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 698934"];
1581 [label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 698935"];
1582 [label="param WithClassTypeParametersBinder(Binder next) 698936"];
1583 [label="param WithClassTypeParametersBinder(this) 698937"];
1584 [label="next 698938"];
1585 [label="param WithClassTypeParametersBinder(this) 698939"];
1586 [label="param WithTypeParametersBinder(Binder next) 698940"];
1587 [label="param WithTypeParametersBinder(this) 698941"];
1588 [label="next 698942"];
1589 [label="param WithTypeParametersBinder(this) 698943"];
1590 [label="param Binder(Binder next) 698944"];
1591 [label="internal CSharpCompilation Compilation { get; } 698945"];
1592 [label="Flags 698946"];
1593 [label="protected internal Binder? Next { get; } 698947"];
1594 [label="_lazyConversions 698948"];
1595 [label="RoslynDebug.Assert(next != null); 698949"];
1596 [label="RoslynDebug.Assert(next != null); 698950"];
1597 [label="this.Flags 698951"];
1598 [label="this.Compilation 698952"];
1599 [label="_namedType 698953"];
1600 [label="_lazyTypeParameterMap 698954"];
1601 [label="Debug.Assert((object)container != null); 698955"];
1602 [label="Debug.Assert((object)container != null); 698956"];
1603 [label="_namedType 698957"];
1604 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 698958"];
1605 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 698959"];
1606 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 698960"];
1607 [label="param WithUnsafeRegionIfNecessary(this) 698961"];
1608 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698962"];
1609 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698963"];
1610 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 698964"];
1611 [label="param Includes(this BinderFlags self) 698965"];
1612 [label="param Includes(BinderFlags other) 698966"];
1613 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698967"];
1614 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698968"];
1615 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 698969"];
1616 [label="binderCache 698970"];
1617 [label="return _factory._binderCache; 698971"];
1618 [label="binderCache.TryAdd(key, resultBinder); 698972"];
1619 [label="binderCache.TryAdd(key, resultBinder); 698973"];
1620 [label="binderCache.TryAdd(key, resultBinder); 698974"];
1621 [label="binderCache.TryAdd(key, resultBinder); 698975"];
1622 [label="binderCache.TryAdd(key, resultBinder); 698976"];
1623 [label="return resultBinder; 698977"];
1624 [label="return ((CSharpSyntaxNode)node).Accept(this); 698978"];
1625 [label="_binderFactoryVisitorPool.Free(visitor); 698979"];
1626 [label="param GetDefaultTypeParameterConstraintClauses(TypeParameterListSyntax typeParameterList) 698980"];
1627 [label="param GetDefaultTypeParameterConstraintClauses(this) 698981"];
1628 [label="var builder = ArrayBuilder<TypeParameterConstraintClause>.GetInstance(typeParameterList.Parameters.Count); 698982"];
1629 [label="foreach (TypeParameterSyntax typeParameterSyntax in typeParameterList.Parameters)\n            {\n                builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax));\n            } 698983"];
1630 [label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 698984"];
1631 [label="GetDefaultTypeParameterConstraintClause(typeParameterSyntax) 698985"];
1632 [label="param GetDefaultTypeParameterConstraintClause(TypeParameterSyntax typeParameterSyntax) 698986"];
1633 [label="param GetDefaultTypeParameterConstraintClause(bool isForOverride = false) 698987"];
1634 [label="param GetDefaultTypeParameterConstraintClause(this) 698988"];
1635 [label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 698989"];
1636 [label="AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 698990"];
1637 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 698991"];
1638 [label="param AreNullableAnnotationsEnabled(this) 698992"];
1639 [label="RoslynDebug.Assert(token.SyntaxTree is object); 698993"];
1640 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 698994"];
1641 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 698995"];
1642 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 698996"];
1643 [label="param AreNullableAnnotationsEnabled(int position) 698997"];
1644 [label="param AreNullableAnnotationsEnabled(this) 698998"];
1645 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 698999"];
1646 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 699000"];
1647 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 699001"];
1648 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 699002"];
1649 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 699003"];
1650 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 699004"];
1651 [label="AreNullableAnnotationsGloballyEnabled() 699005"];
1652 [label="param AreNullableAnnotationsGloballyEnabled(this) 699006"];
1653 [label="RoslynDebug.Assert(Next is object); 699007"];
1654 [label="Next.AreNullableAnnotationsGloballyEnabled() 699008"];
1655 [label="param AreNullableAnnotationsGloballyEnabled(this) 699009"];
1656 [label="param AreNullableAnnotationsGloballyEnabled(this) 699010"];
1657 [label="GetGlobalAnnotationState() 699011"];
1658 [label="param GetGlobalAnnotationState(this) 699012"];
1659 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 699013"];
1660 [label="return false; 699014"];
1661 [label="return GetGlobalAnnotationState(); 699015"];
1662 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 699016"];
1663 [label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 699017"];
1664 [label="isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 699018"];
1665 [label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 699019"];
1666 [label="return builder.ToImmutableAndFree(); 699020"];
1667 [label="Debug.Assert(node != null); 699021"];
1668 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 699022"];
1669 [label="NodeUsage extraInfo = NodeUsage.Normal; 699023"];
1670 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 699024"];
1671 [label="param BinderFactory(CSharpCompilation compilation) 699025"];
1672 [label="param BinderFactory(SyntaxTree syntaxTree) 699026"];
1673 [label="param BinderFactory(bool ignoreAccessibility) 699027"];
1674 [label="param BinderFactory(this) 699028"];
1675 [label="_binderCache 699029"];
1676 [label="_compilation 699030"];
1677 [label="_syntaxTree 699031"];
1678 [label="_buckStopsHereBinder 699032"];
1679 [label="_ignoreAccessibility 699033"];
1680 [label="_binderFactoryVisitorPool 699034"];
1681 [label="_compilation 699035"];
1682 [label="_syntaxTree 699036"];
1683 [label="_ignoreAccessibility 699037"];
1684 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 699038"];
1685 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 699039"];
1686 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 699040"];
1687 [label="_binderFactoryVisitorPool 699041"];
1688 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 699042"];
1689 [label="_binderCache 699043"];
1690 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 699044"];
1691 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 699045"];
1692 [label="new BuckStopsHereBinder(compilation) 699046"];
1693 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 699047"];
1694 [label="param BuckStopsHereBinder(this) 699048"];
1695 [label="compilation 699049"];
1696 [label="param BuckStopsHereBinder(this) 699050"];
1697 [label="param Binder(CSharpCompilation compilation) 699051"];
1698 [label="param Binder(this) 699052"];
1699 [label="internal CSharpCompilation Compilation { get; } 699053"];
1700 [label="Flags 699054"];
1701 [label="protected internal Binder? Next { get; } 699055"];
1702 [label="_lazyConversions 699056"];
1703 [label="_lazyOverloadResolution 699057"];
1704 [label="RoslynDebug.Assert(compilation != null); 699058"];
1705 [label="RoslynDebug.Assert(compilation != null); 699059"];
1706 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 699060"];
1707 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 699061"];
1708 [label="this.Flags 699062"];
1709 [label="this.Compilation 699063"];
1710 [label="_buckStopsHereBinder 699064"];
1711 [label="var diagnostics = c.GetDiagnostics(); 699065"];
1712 [label="Debug.Assert(node != null); 699066"];
1713 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 699067"];
1714 [label="VisitTypeDeclarationCore(node) 699068"];
1715 [label="NodeUsage extraInfo = NodeUsage.Normal; 699069"];
1716 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 699070"];
1717 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 699071"];
1718 [label="VisitTypeDeclarationCore(parent, extraInfo) 699072"];
1719 [label="CreateBinderCacheKey(parent, extraInfo) 699073"];
1720 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 699074"];
1721 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 699075"];
1722 [label="return new BinderCacheKey(node, usage); 699076"];
1723 [label="new BinderCacheKey(node, usage) 699077"];
1724 [label="param BinderCacheKey(this) 699078"];
1725 [label="var key = CreateBinderCacheKey(parent, extraInfo); 699079"];
1726 [label="Binder resultBinder; 699080"];
1727 [label="binderCache 699081"];
1728 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 699082"];
1729 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 699083"];
1730 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 699084"];
1731 [label="SyntaxToken token; 699085"];
1732 [label="token 699086"];
1733 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 699087"];
1734 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 699088"];
1735 [label="Binder outer; 699089"];
1736 [label="var container = parent.Parent; 699090"];
1737 [label="Debug.Assert(node != null); 699091"];
1738 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 699092"];
1739 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 699093"];
1740 [label="syntaxTree 699094"];
1741 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 699095"];
1742 [label="return _factory._syntaxTree; 699096"];
1743 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 699097"];
1744 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 699098"];
1745 [label="RoslynDebug.Assert(next != null); 699099"];
1746 [label="_container 699100"];
1747 [label="Debug.Assert((object)container != null); 699101"];
1748 [label="Debug.Assert(declarationSyntax != null); 699102"];
1749 [label="param MakeNamespaceBinder(this) 699103"];
1750 [label="QualifiedNameSyntax dotted; 699104"];
1751 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 699105"];
1752 [label="NamespaceOrTypeSymbol container; 699106"];
1753 [label="if ((object)ns == null) return outer; 699107"];
1754 [label="Debug.Assert((object)container != null || imports != null); 699108"];
1755 [label="_namedType 699109"];
1756 [label="Debug.Assert((object)container != null); 699110"];
1757 [label="param TypeConversions(AssemblySymbol corLibrary) 699111"];
1758 [label="param TypeConversions(bool includeNullability = false) 699112"];
1759 [label="param TypeConversions(this) 699113"];
1760 [label="corLibrary 699114"];
1761 [label="0 699115"];
1762 [label="includeNullability 699116"];
1763 [label="null 699117"];
1764 [label="param TypeConversions(this) 699118"];
1765 [label="param TypeConversions(AssemblySymbol corLibrary) 699119"];
1766 [label="param TypeConversions(int currentRecursionDepth) 699120"];
1767 [label="param TypeConversions(bool includeNullability) 699121"];
1768 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 699122"];
1769 [label="param TypeConversions(this) 699123"];
1770 [label="corLibrary 699124"];
1771 [label="currentRecursionDepth 699125"];
1772 [label="includeNullability 699126"];
1773 [label="otherNullabilityOpt 699127"];
1774 [label="param TypeConversions(this) 699128"];
1775 [label="param ConversionsBase(AssemblySymbol corLibrary) 699129"];
1776 [label="param ConversionsBase(int currentRecursionDepth) 699130"];
1777 [label="param ConversionsBase(bool includeNullability) 699131"];
1778 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 699132"];
1779 [label="param ConversionsBase(this) 699133"];
1780 [label="corLibrary 699134"];
1781 [label="currentRecursionDepth 699135"];
1782 [label="IncludeNullability 699136"];
1783 [label="_lazyOtherNullability 699137"];
1784 [label="Debug.Assert((object)corLibrary != null); 699138"];
1785 [label="Debug.Assert((object)corLibrary != null); 699139"];
1786 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 699140"];
1787 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 699141"];
1788 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 699142"];
1789 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 699143"];
1790 [label="this.corLibrary 699144"];
1791 [label="this.currentRecursionDepth 699145"];
1792 [label="IncludeNullability 699146"];
1793 [label="_lazyOtherNullability 699147"];
1794 [label="var diagnostics = c.GetDiagnostics(); 699148"];
1795 [label="Debug.Assert(node != null); 699149"];
1796 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 699150"];
1797 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 699151"];
1798 [label="param VisitFieldDeclaration(this) 699152"];
1799 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 699153"];
1800 [label="VisitCore(parent.Parent) 699154"];
1801 [label="param VisitCore(SyntaxNode node) 699155"];
1802 [label="param VisitCore(this) 699156"];
1803 [label="return ((CSharpSyntaxNode)node).Accept(this); 699157"];
1804 [label="VisitTypeDeclarationCore(node) 699158"];
1805 [label="NodeUsage extraInfo = NodeUsage.Normal; 699159"];
1806 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 699160"];
1807 [label="VisitTypeDeclarationCore(parent, extraInfo) 699161"];
1808 [label="CreateBinderCacheKey(parent, extraInfo) 699162"];
1809 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 699163"];
1810 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 699164"];
1811 [label="return new BinderCacheKey(node, usage); 699165"];
1812 [label="new BinderCacheKey(node, usage) 699166"];
1813 [label="param BinderCacheKey(this) 699167"];
1814 [label="var key = CreateBinderCacheKey(parent, extraInfo); 699168"];
1815 [label="Binder resultBinder; 699169"];
1816 [label="binderCache 699170"];
1817 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 699171"];
1818 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 699172"];
1819 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 699173"];
1820 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 699174"];
1821 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 699175"];
1822 [label="param WithUnsafeRegionIfNecessary(this) 699176"];
1823 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 699177"];
1824 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 699178"];
1825 [label="param Includes(BinderFlags other) 699179"];
1826 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 699180"];
1827 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 699181"];
1828 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 699182"];
1829 [label="Debug.Assert((object)containing != null); 699183"];
1830 [label="Debug.Assert((object)containing != null); 699184"];
1831 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699185"];
1832 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699186"];
1833 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699187"];
1834 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699188"];
1835 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 699189"];
1836 [label="param BinderWithContainingMemberOrLambda(Binder next) 699190"];
1837 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 699191"];
1838 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 699192"];
1839 [label="param BinderWithContainingMemberOrLambda(this) 699193"];
1840 [label="next 699194"];
1841 [label="flags 699195"];
1842 [label="param BinderWithContainingMemberOrLambda(this) 699196"];
1843 [label="param Binder(Binder next) 699197"];
1844 [label="param Binder(BinderFlags flags) 699198"];
1845 [label="param Binder(this) 699199"];
1846 [label="internal CSharpCompilation Compilation { get; } 699200"];
1847 [label="Flags 699201"];
1848 [label="protected internal Binder? Next { get; } 699202"];
1849 [label="_lazyConversions 699203"];
1850 [label="_lazyOverloadResolution 699204"];
1851 [label="RoslynDebug.Assert(next != null); 699205"];
1852 [label="RoslynDebug.Assert(next != null); 699206"];
1853 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 699207"];
1854 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 699208"];
1855 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 699209"];
1856 [label="param Includes(this BinderFlags self) 699210"];
1857 [label="param Includes(BinderFlags other) 699211"];
1858 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 699212"];
1859 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 699213"];
1860 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 699214"];
1861 [label="param Includes(this BinderFlags self) 699215"];
1862 [label="param Includes(BinderFlags other) 699216"];
1863 [label="Next 699217"];
1864 [label="this.Flags 699218"];
1865 [label="this.Compilation 699219"];
1866 [label="_containingMemberOrLambda 699220"];
1867 [label="Debug.Assert(containingMemberOrLambda != null); 699221"];
1868 [label="Debug.Assert(containingMemberOrLambda != null); 699222"];
1869 [label="_containingMemberOrLambda 699223"];
1870 [label="var diagnostics = c.GetDiagnostics(); 699224"];
1871 [label="param BindType(ExpressionSyntax syntax) 699225"];
1872 [label="param BindType(DiagnosticBag diagnostics) 699226"];
1873 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 699227"];
1874 [label="param BindType(bool suppressUseSiteDiagnostics = false) 699228"];
1875 [label="param BindType(this) 699229"];
1876 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699230"];
1877 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699231"];
1878 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699232"];
1879 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699233"];
1880 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 699234"];
1881 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 699235"];
1882 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 699236"];
1883 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 699237"];
1884 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 699238"];
1885 [label="param BindTypeOrAlias(this) 699239"];
1886 [label="Debug.Assert(diagnostics != null); 699240"];
1887 [label="Debug.Assert(diagnostics != null); 699241"];
1888 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699242"];
1889 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699243"];
1890 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699244"];
1891 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699245"];
1892 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699246"];
1893 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699247"];
1894 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 699248"];
1895 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 699249"];
1896 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 699250"];
1897 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 699251"];
1898 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 699252"];
1899 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 699253"];
1900 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 699254"];
1901 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699255"];
1902 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699256"];
1903 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699257"];
1904 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699258"];
1905 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699259"];
1906 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 699260"];
1907 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 699261"];
1908 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 699262"];
1909 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 699263"];
1910 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 699264"];
1911 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 699265"];
1912 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 699266"];
1913 [label="var identifierValueText = node.Identifier.ValueText; 699267"];
1914 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 699268"];
1915 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699269"];
1916 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699270"];
1917 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699271"];
1918 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699272"];
1919 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699273"];
1920 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 699274"];
1921 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 699275"];
1922 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 699276"];
1923 [label="param CreateErrorIfLookupOnTypeParameter(string name) 699277"];
1924 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 699278"];
1925 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 699279"];
1926 [label="param CreateErrorIfLookupOnTypeParameter(this) 699280"];
1927 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 699281"];
1928 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 699282"];
1929 [label="return null; 699283"];
1930 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699284"];
1931 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 699285"];
1932 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 699286"];
1933 [label="CreatePool() 699287"];
1934 [label="ObjectPool<LookupResult> pool = null; 699288"];
1935 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 699289"];
1936 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 699290"];
1937 [label="return pool; 699291"];
1938 [label="s_poolInstance = CreatePool() 699292"];
1939 [label="LookupResult.GetInstance() 699293"];
1940 [label="var instance = s_poolInstance.Allocate(); 699294"];
1941 [label="var instance = s_poolInstance.Allocate(); 699295"];
1942 [label="var instance = s_poolInstance.Allocate(); 699296"];
1943 [label="param LookupResult(ObjectPool<LookupResult> pool) 699297"];
1944 [label="param LookupResult(this) 699298"];
1945 [label="_kind 699299"];
1946 [label="_symbolList 699300"];
1947 [label="_error 699301"];
1948 [label="_pool 699302"];
1949 [label="_pool 699303"];
1950 [label="_kind 699304"];
1951 [label="_symbolList = new ArrayBuilder<Symbol>(); 699305"];
1952 [label="_symbolList 699306"];
1953 [label="_error = null; 699307"];
1954 [label="_error 699308"];
1955 [label="var instance = s_poolInstance.Allocate(); 699309"];
1956 [label="instance.IsClear 699310"];
1957 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 699311"];
1958 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699312"];
1959 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699313"];
1960 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699314"];
1961 [label="Debug.Assert(instance.IsClear); 699315"];
1962 [label="return instance; 699316"];
1963 [label="var result = LookupResult.GetInstance(); 699317"];
1964 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 699318"];
1965 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 699319"];
1966 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 699320"];
1967 [label="param GetSimpleNameLookupOptions(NameSyntax node) 699321"];
1968 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 699322"];
1969 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 699323"];
1970 [label="return LookupOptions.NamespacesOrTypesOnly; 699324"];
1971 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 699325"];
1972 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699326"];
1973 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699327"];
1974 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699328"];
1975 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699329"];
1976 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699330"];
1977 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699331"];
1978 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699332"];
1979 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 699333"];
1980 [label="param LookupSymbolsSimpleName(LookupResult result) 699334"];
1981 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 699335"];
1982 [label="param LookupSymbolsSimpleName(string plainName) 699336"];
1983 [label="param LookupSymbolsSimpleName(int arity) 699337"];
1984 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 699338"];
1985 [label="param LookupSymbolsSimpleName(LookupOptions options) 699339"];
1986 [label="param LookupSymbolsSimpleName(bool diagnose) 699340"];
1987 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699341"];
1988 [label="param LookupSymbolsSimpleName(this) 699342"];
1989 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 699343"];
1990 [label="options.IsAttributeTypeLookup() 699344"];
1991 [label="param IsAttributeTypeLookup(this LookupOptions options) 699345"];
1992 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 699346"];
1993 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699347"];
1994 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699348"];
1995 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699349"];
1996 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699350"];
1997 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699351"];
1998 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699352"];
1999 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699353"];
2000 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699354"];
2001 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 699355"];
2002 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 699356"];
2003 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 699357"];
2004 [label="param LookupSymbolsOrMembersInternal(string name) 699358"];
2005 [label="param LookupSymbolsOrMembersInternal(int arity) 699359"];
2006 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 699360"];
2007 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 699361"];
2008 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 699362"];
2009 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699363"];
2010 [label="param LookupSymbolsOrMembersInternal(this) 699364"];
2011 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 699365"];
2012 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 699366"];
2013 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699367"];
2014 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699368"];
2015 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699369"];
2016 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699370"];
2017 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699371"];
2018 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699372"];
2019 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699373"];
2020 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 699374"];
2021 [label="param LookupSymbolsInternal(LookupResult result) 699375"];
2022 [label="param LookupSymbolsInternal(string name) 699376"];
2023 [label="param LookupSymbolsInternal(int arity) 699377"];
2024 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 699378"];
2025 [label="param LookupSymbolsInternal(LookupOptions options) 699379"];
2026 [label="param LookupSymbolsInternal(bool diagnose) 699380"];
2027 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699381"];
2028 [label="param LookupSymbolsInternal(this) 699382"];
2029 [label="result.IsClear 699383"];
2030 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 699384"];
2031 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699385"];
2032 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699386"];
2033 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699387"];
2034 [label="Debug.Assert(result.IsClear); 699388"];
2035 [label="Debug.Assert(options.AreValid()); 699389"];
2036 [label="options.AreValid() 699390"];
2037 [label="param AreValid(this LookupOptions options) 699391"];
2038 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 699392"];
2039 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 699393"];
2040 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 699394"];
2041 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 699395"];
2042 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 699396"];
2043 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 699397"];
2044 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 699398"];
2045 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 699399"];
2046 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 699400"];
2047 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 699401"];
2048 [label="return OnlyOneBitSet(onlyOptions); 699402"];
2049 [label="OnlyOneBitSet(onlyOptions) 699403"];
2050 [label="param OnlyOneBitSet(LookupOptions o) 699404"];
2051 [label="return (o & (o - 1)) == 0; 699405"];
2052 [label="return (o & (o - 1)) == 0; 699406"];
2053 [label="Binder binder = null; 699407"];
2054 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 699408"];
2055 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 699409"];
2056 [label="result.IsMultiViable 699410"];
2057 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 699411"];
2058 [label="Kind 699412"];
2059 [label="get\n            {\n                return _kind;\n            } 699413"];
2060 [label="return _kind; 699414"];
2061 [label="return Kind == LookupResultKind.Viable; 699415"];
2062 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 699416"];
2063 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 699417"];
2064 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 699418"];
2065 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 699419"];
2066 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699420"];
2067 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699421"];
2068 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699422"];
2069 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699423"];
2070 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699424"];
2071 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699425"];
2072 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699426"];
2073 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699427"];
2074 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 699428"];
2075 [label="param LookupSymbolsInSingleBinder(LookupResult result) 699429"];
2076 [label="param LookupSymbolsInSingleBinder(string name) 699430"];
2077 [label="param LookupSymbolsInSingleBinder(int arity) 699431"];
2078 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 699432"];
2079 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 699433"];
2080 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 699434"];
2081 [label="param LookupSymbolsInSingleBinder(bool diagnose) 699435"];
2082 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699436"];
2083 [label="param LookupSymbolsInSingleBinder(this) 699437"];
2084 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699438"];
2085 [label="result.IsClear 699439"];
2086 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 699440"];
2087 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699441"];
2088 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699442"];
2089 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699443"];
2090 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 699444"];
2091 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 699445"];
2092 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 699446"];
2093 [label="param LookupSymbolsInSingleBinder(LookupResult result) 699447"];
2094 [label="param LookupSymbolsInSingleBinder(string name) 699448"];
2095 [label="param LookupSymbolsInSingleBinder(int arity) 699449"];
2096 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 699450"];
2097 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 699451"];
2098 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 699452"];
2099 [label="param LookupSymbolsInSingleBinder(bool diagnose) 699453"];
2100 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699454"];
2101 [label="param LookupSymbolsInSingleBinder(this) 699455"];
2102 [label="result.IsClear 699456"];
2103 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 699457"];
2104 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699458"];
2105 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699459"];
2106 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699460"];
2107 [label="Debug.Assert(result.IsClear); 699461"];
2108 [label="LookupMask 699462"];
2109 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 699463"];
2110 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 699464"];
2111 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 699465"];
2112 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 699466"];
2113 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 699467"];
2114 [label="TypeParameterMap 699468"];
2115 [label="get\n            {\n                if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                }\n                return _lazyTypeParameterMap;\n            } 699469"];
2116 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 699470"];
2117 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 699471"];
2118 [label="var result = new MultiDictionary<string, TypeParameterSymbol>(); 699472"];
2119 [label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    } 699473"];
2120 [label="result.Add(tps.Name, tps); 699474"];
2121 [label="result.Add(tps.Name, tps); 699475"];
2122 [label="result.Add(tps.Name, tps); 699476"];
2123 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 699477"];
2124 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 699478"];
2125 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 699479"];
2126 [label="return _lazyTypeParameterMap; 699480"];
2127 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 699481"];
2128 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 699482"];
2129 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699483"];
2130 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699484"];
2131 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699485"];
2132 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699486"];
2133 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699487"];
2134 [label="originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics) 699488"];
2135 [label="param CheckViability(Symbol symbol) 699489"];
2136 [label="param CheckViability(int arity) 699490"];
2137 [label="param CheckViability(LookupOptions options) 699491"];
2138 [label="param CheckViability(TypeSymbol accessThroughType) 699492"];
2139 [label="param CheckViability(bool diagnose) 699493"];
2140 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699494"];
2141 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 699495"];
2142 [label="param CheckViability(this) 699496"];
2143 [label="bool inaccessibleViaQualifier; 699497"];
2144 [label="DiagnosticInfo diagInfo; 699498"];
2145 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 699499"];
2146 [label="symbol.Kind == SymbolKind.Alias 699500"];
2147 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699501"];
2148 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699502"];
2149 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699503"];
2150 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699504"];
2151 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699505"];
2152 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699506"];
2153 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699507"];
2154 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 699508"];
2155 [label="param WrongArity(Symbol symbol) 699509"];
2156 [label="param WrongArity(int arity) 699510"];
2157 [label="param WrongArity(bool diagnose) 699511"];
2158 [label="param WrongArity(LookupOptions options) 699512"];
2159 [label="param WrongArity(out DiagnosticInfo diagInfo) 699513"];
2160 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 699514"];
2161 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 699515"];
2162 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 699516"];
2163 [label="diagInfo = null; 699517"];
2164 [label="return false; 699518"];
2165 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699519"];
2166 [label="InCref 699520"];
2167 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 699521"];
2168 [label="return this.Flags.Includes(BinderFlags.Cref); 699522"];
2169 [label="return this.Flags.Includes(BinderFlags.Cref); 699523"];
2170 [label="this.Flags.Includes(BinderFlags.Cref) 699524"];
2171 [label="param Includes(this BinderFlags self) 699525"];
2172 [label="param Includes(BinderFlags other) 699526"];
2173 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699527"];
2174 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699528"];
2175 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699529"];
2176 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699530"];
2177 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699531"];
2178 [label="InCref 699532"];
2179 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699533"];
2180 [label="InCref 699534"];
2181 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699535"];
2182 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699536"];
2183 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699537"];
2184 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699538"];
2185 [label="RefineAccessThroughType(options, accessThroughType) 699539"];
2186 [label="param RefineAccessThroughType(LookupOptions options) 699540"];
2187 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 699541"];
2188 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 699542"];
2189 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 699543"];
2190 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 699544"];
2191 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 699545"];
2192 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699546"];
2193 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699547"];
2194 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699548"];
2195 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 699549"];
2196 [label="param IsAccessible(Symbol symbol) 699550"];
2197 [label="param IsAccessible(TypeSymbol accessThroughType) 699551"];
2198 [label="param IsAccessible(out bool failedThroughTypeCheck) 699552"];
2199 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699553"];
2200 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 699554"];
2201 [label="param IsAccessible(this) 699555"];
2202 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 699556"];
2203 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 699557"];
2204 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 699558"];
2205 [label="param Includes(this BinderFlags self) 699559"];
2206 [label="param Includes(BinderFlags other) 699560"];
2207 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699561"];
2208 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699562"];
2209 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699563"];
2210 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699564"];
2211 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699565"];
2212 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699566"];
2213 [label="param IsAccessibleHelper(Symbol symbol) 699567"];
2214 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 699568"];
2215 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 699569"];
2216 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699570"];
2217 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 699571"];
2218 [label="param IsAccessibleHelper(this) 699572"];
2219 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699573"];
2220 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699574"];
2221 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699575"];
2222 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699576"];
2223 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699577"];
2224 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699578"];
2225 [label="param IsAccessibleHelper(Symbol symbol) 699579"];
2226 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 699580"];
2227 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 699581"];
2228 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699582"];
2229 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 699583"];
2230 [label="param IsAccessibleHelper(this) 699584"];
2231 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699585"];
2232 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699586"];
2233 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699587"];
2234 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699588"];
2235 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699589"];
2236 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699590"];
2237 [label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699591"];
2238 [label="param IsSymbolAccessibleConditional(Symbol symbol) 699592"];
2239 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 699593"];
2240 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 699594"];
2241 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 699595"];
2242 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 699596"];
2243 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 699597"];
2244 [label="param IsSymbolAccessibleConditional(this) 699598"];
2245 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 699599"];
2246 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 699600"];
2247 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 699601"];
2248 [label="param Includes(this BinderFlags self) 699602"];
2249 [label="param Includes(BinderFlags other) 699603"];
2250 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699604"];
2251 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699605"];
2252 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699606"];
2253 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699607"];
2254 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699608"];
2255 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699609"];
2256 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699610"];
2257 [label="param IsSymbolAccessible(Symbol symbol) 699611"];
2258 [label="param IsSymbolAccessible(NamedTypeSymbol within) 699612"];
2259 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 699613"];
2260 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 699614"];
2261 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699615"];
2262 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 699616"];
2263 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699617"];
2264 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699618"];
2265 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699619"];
2266 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699620"];
2267 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699621"];
2268 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699622"];
2269 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699623"];
2270 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 699624"];
2271 [label="param IsSymbolAccessibleCore(Symbol symbol) 699625"];
2272 [label="param IsSymbolAccessibleCore(Symbol within) 699626"];
2273 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 699627"];
2274 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 699628"];
2275 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 699629"];
2276 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 699630"];
2277 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 699631"];
2278 [label="Debug.Assert((object)symbol != null); 699632"];
2279 [label="Debug.Assert((object)symbol != null); 699633"];
2280 [label="Debug.Assert((object)within != null); 699634"];
2281 [label="Debug.Assert((object)within != null); 699635"];
2282 [label="Debug.Assert(within.IsDefinition); 699636"];
2283 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 699637"];
2284 [label="failedThroughTypeCheck = false; 699638"];
2285 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 699639"];
2286 [label="return true; 699640"];
2287 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699641"];
2288 [label="InCref 699642"];
2289 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699643"];
2290 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699644"];
2291 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699645"];
2292 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699646"];
2293 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699647"];
2294 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699648"];
2295 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699649"];
2296 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699650"];
2297 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699651"];
2298 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 699652"];
2299 [label="return LookupResult.Good(symbol); 699653"];
2300 [label="LookupResult.Good(symbol) 699654"];
2301 [label="param Good(Symbol symbol) 699655"];
2302 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 699656"];
2303 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 699657"];
2304 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 699658"];
2305 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 699659"];
2306 [label="param SingleLookupResult(LookupResultKind kind) 699660"];
2307 [label="param SingleLookupResult(Symbol symbol) 699661"];
2308 [label="param SingleLookupResult(DiagnosticInfo error) 699662"];
2309 [label="param SingleLookupResult(this) 699663"];
2310 [label="this.Kind 699664"];
2311 [label="this.Symbol 699665"];
2312 [label="this.Error 699666"];
2313 [label="return LookupResult.Good(symbol); 699667"];
2314 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)) 699668"];
2315 [label="param MergeEqual(SingleLookupResult result) 699669"];
2316 [label="param MergeEqual(this) 699670"];
2317 [label="Kind 699671"];
2318 [label="get\n            {\n                return _kind;\n            } 699672"];
2319 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 699673"];
2320 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 699674"];
2321 [label="Kind 699675"];
2322 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 699676"];
2323 [label="this.SetFrom(result); 699677"];
2324 [label="this.SetFrom(result) 699678"];
2325 [label="param SetFrom(SingleLookupResult other) 699679"];
2326 [label="param SetFrom(this) 699680"];
2327 [label="_kind 699681"];
2328 [label="_symbolList.Clear(); 699682"];
2329 [label="_symbolList.Add(other.Symbol); 699683"];
2330 [label="_symbolList.Add(other.Symbol); 699684"];
2331 [label="_error 699685"];
2332 [label="this.SetFrom(result); 699686"];
2333 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 699687"];
2334 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699688"];
2335 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 699689"];
2336 [label="binder = scope; 699690"];
2337 [label="return binder; 699691"];
2338 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699692"];
2339 [label="diagnostics.Add(node, useSiteDiagnostics); 699693"];
2340 [label="diagnostics.Add(node, useSiteDiagnostics); 699694"];
2341 [label="diagnostics.Add(node, useSiteDiagnostics); 699695"];
2342 [label="diagnostics.Add(node, useSiteDiagnostics); 699696"];
2343 [label="Symbol bindingResult = null; 699697"];
2344 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 699698"];
2345 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 699699"];
2346 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 699700"];
2347 [label="IsViableType(result) 699701"];
2348 [label="param IsViableType(LookupResult result) 699702"];
2349 [label="result.IsMultiViable 699703"];
2350 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 699704"];
2351 [label="Kind 699705"];
2352 [label="get\n            {\n                return _kind;\n            } 699706"];
2353 [label="return _kind; 699707"];
2354 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 699708"];
2355 [label="result.Symbols 699709"];
2356 [label="get\n            {\n                return _symbolList;\n            } 699710"];
2357 [label="return _symbolList; 699711"];
2358 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 699712"];
2359 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 699713"];
2360 [label="return true; 699714"];
2361 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 699715"];
2362 [label="bool wasError; 699716"];
2363 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699717"];
2364 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699718"];
2365 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699719"];
2366 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699720"];
2367 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699721"];
2368 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699722"];
2369 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699723"];
2370 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699724"];
2371 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699725"];
2372 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 699726"];
2373 [label="param ResultSymbol(LookupResult result) 699727"];
2374 [label="param ResultSymbol(string simpleName) 699728"];
2375 [label="param ResultSymbol(int arity) 699729"];
2376 [label="param ResultSymbol(SyntaxNode where) 699730"];
2377 [label="param ResultSymbol(DiagnosticBag diagnostics) 699731"];
2378 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 699732"];
2379 [label="param ResultSymbol(out bool wasError) 699733"];
2380 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 699734"];
2381 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 699735"];
2382 [label="param ResultSymbol(this) 699736"];
2383 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699737"];
2384 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699738"];
2385 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699739"];
2386 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699740"];
2387 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699741"];
2388 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699742"];
2389 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699743"];
2390 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699744"];
2391 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699745"];
2392 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 699746"];
2393 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699747"];
2394 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699748"];
2395 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699749"];
2396 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699750"];
2397 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699751"];
2398 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699752"];
2399 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699753"];
2400 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699754"];
2401 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699755"];
2402 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 699756"];
2403 [label="Debug.Assert(where != null); 699757"];
2404 [label="Debug.Assert(where != null); 699758"];
2405 [label="Debug.Assert(diagnostics != null); 699759"];
2406 [label="Debug.Assert(diagnostics != null); 699760"];
2407 [label="result.Symbols 699761"];
2408 [label="get\n            {\n                return _symbolList;\n            } 699762"];
2409 [label="return _symbolList; 699763"];
2410 [label="var symbols = result.Symbols; 699764"];
2411 [label="wasError = false; 699765"];
2412 [label="result.IsMultiViable 699766"];
2413 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 699767"];
2414 [label="Kind 699768"];
2415 [label="get\n            {\n                return _kind;\n            } 699769"];
2416 [label="return _kind; 699770"];
2417 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 699771"];
2418 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 699772"];
2419 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 699773"];
2420 [label="var singleResult = symbols[0]; 699774"];
2421 [label="var singleType = singleResult as TypeSymbol; 699775"];
2422 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 699776"];
2423 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 699777"];
2424 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 699778"];
2425 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 699779"];
2426 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 699780"];
2427 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 699781"];
2428 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 699782"];
2429 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 699783"];
2430 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 699784"];
2431 [label="param ReportUseSiteDiagnostics(Symbol symbol) 699785"];
2432 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 699786"];
2433 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 699787"];
2434 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 699788"];
2435 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 699789"];
2436 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 699790"];
2437 [label="return singleResult; 699791"];
2438 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 699792"];
2439 [label="return symbol; 699793"];
2440 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 699794"];
2441 [label="result.Free() 699795"];
2442 [label="param Free(this) 699796"];
2443 [label="this.Clear() 699797"];
2444 [label="param Clear(this) 699798"];
2445 [label="_kind 699799"];
2446 [label="_symbolList.Clear(); 699800"];
2447 [label="_error = null; 699801"];
2448 [label="_error 699802"];
2449 [label="this.Clear(); 699803"];
2450 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 699804"];
2451 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 699805"];
2452 [label="_pool.Free(this); 699806"];
2453 [label="_pool.Free(this); 699807"];
2454 [label="result.Free(); 699808"];
2455 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 699809"];
2456 [label="AreNullableAnnotationsEnabled(node.Identifier) 699810"];
2457 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 699811"];
2458 [label="param AreNullableAnnotationsEnabled(this) 699812"];
2459 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 699813"];
2460 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 699814"];
2461 [label="param CreateUnannotated(bool isNullableEnabled) 699815"];
2462 [label="param CreateUnannotated(Symbol symbol) 699816"];
2463 [label="if (symbol is null)\n                {\n                    return default;\n                } 699817"];
2464 [label="var type = symbol as TypeSymbol; 699818"];
2465 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 699819"];
2466 [label="type is null 699820"];
2467 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 699821"];
2468 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 699822"];
2469 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 699823"];
2470 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 699824"];
2471 [label="Debug.Assert(typeWithAnnotations.HasType); 699825"];
2472 [label="_typeWithAnnotations 699826"];
2473 [label="_symbol = null; 699827"];
2474 [label="_symbol 699828"];
2475 [label="_isNullableEnabled = false; 699829"];
2476 [label="_isNullableEnabled 699830"];
2477 [label="symbol.IsType 699831"];
2478 [label="=> !_typeWithAnnotations.IsDefault 699832"];
2479 [label="!_typeWithAnnotations.IsDefault 699833"];
2480 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 699834"];
2481 [label="symbol.IsType 699835"];
2482 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 699836"];
2483 [label="symbol.TypeWithAnnotations 699837"];
2484 [label="=> _typeWithAnnotations 699838"];
2485 [label="_typeWithAnnotations 699839"];
2486 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699840"];
2487 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699841"];
2488 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699842"];
2489 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699843"];
2490 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699844"];
2491 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 699845"];
2492 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 699846"];
2493 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 699847"];
2494 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 699848"];
2495 [label="param ReportDiagnosticsIfObsolete(this) 699849"];
2496 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699850"];
2497 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699851"];
2498 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699852"];
2499 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699853"];
2500 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 699854"];
2501 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 699855"];
2502 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 699856"];
2503 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 699857"];
2504 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 699858"];
2505 [label="param ReportDiagnosticsIfObsolete(this) 699859"];
2506 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 699860"];
2507 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699861"];
2508 [label="return symbol; 699862"];
2509 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699863"];
2510 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699864"];
2511 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699865"];
2512 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699866"];
2513 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 699867"];
2514 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 699868"];
2515 [label="param UnwrapAlias(DiagnosticBag diagnostics) 699869"];
2516 [label="param UnwrapAlias(SyntaxNode syntax) 699870"];
2517 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 699871"];
2518 [label="param UnwrapAlias(this) 699872"];
2519 [label="symbol.IsAlias 699873"];
2520 [label="=> _symbol?.Kind == SymbolKind.Alias 699874"];
2521 [label="_symbol 699875"];
2522 [label="_symbol?.Kind == SymbolKind.Alias 699876"];
2523 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 699877"];
2524 [label="return symbol; 699878"];
2525 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 699879"];
2526 [label="=> _typeWithAnnotations 699880"];
2527 [label="_typeWithAnnotations 699881"];
2528 [label="var diagnostics = c.GetDiagnostics(); 699882"];
2529 [label="get { return (object)_fieldOpt == null; } 699883"];
2530 [label="return (object)_fieldOpt == null; 699884"];
2531 [label="return (object)_fieldOpt == null; 699885"];
2532 [label="diagnostics.Verify(expected); 699886"];
2533 [label="diagnostics.Verify(expected); 699887"];
2534 [label="diagnostics.Verify(expected) 699888"];
2535 [label="param Verify(this ImmutableArray<Diagnostic> actual) 699889"];
2536 [label="param Verify(params DiagnosticDescription[] expected) 699890"];
2537 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 699891"];
2538 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 699892"];
2539 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 699893"];
2540 [label="param Verify(this IEnumerable<Diagnostic> actual) 699894"];
2541 [label="param Verify(params DiagnosticDescription[] expected) 699895"];
2542 [label="Verify(actual, expected, errorCodeOnly: false); 699896"];
2543 [label="Verify(actual, expected, errorCodeOnly: false); 699897"];
2544 [label="Verify(actual, expected, errorCodeOnly: false); 699898"];
2545 [label="Verify(actual, expected, errorCodeOnly: false) 699899"];
2546 [label="param Verify(IEnumerable<Diagnostic> actual) 699900"];
2547 [label="param Verify(DiagnosticDescription[] expected) 699901"];
2548 [label="param Verify(bool errorCodeOnly) 699902"];
2549 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 699903"];
2550 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 699904"];
2551 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 699905"];
2552 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 699906"];
2553 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 699907"];
2554 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 699908"];
2555 [label="=> _defaultSeverityOpt 699909"];
2556 [label="_defaultSeverityOpt 699910"];
2557 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 699911"];
2558 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 699912"];
2559 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 699913"];
2560 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 699914"];
2561 [label="=> _effectiveSeverityOpt 699915"];
2562 [label="_effectiveSeverityOpt 699916"];
2563 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 699917"];
2564 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 699918"];
2565 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 699919"];
2566 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 699920"];
2567 [label="param DiagnosticDescription(Diagnostic d) 699921"];
2568 [label="param DiagnosticDescription(bool errorCodeOnly) 699922"];
2569 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 699923"];
2570 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 699924"];
2571 [label="param DiagnosticDescription(this) 699925"];
2572 [label="_code 699926"];
2573 [label="_isWarningAsError 699927"];
2574 [label="_isSuppressed 699928"];
2575 [label="_squiggledText 699929"];
2576 [label="_arguments 699930"];
2577 [label="_startPosition 699931"];
2578 [label="_argumentOrderDoesNotMatter 699932"];
2579 [label="_errorCodeType 699933"];
2580 [label="_defaultSeverityOpt 699934"];
2581 [label="_effectiveSeverityOpt 699935"];
2582 [label="_syntaxPredicate 699936"];
2583 [label="_code 699937"];
2584 [label="_isWarningAsError 699938"];
2585 [label="_isSuppressed 699939"];
2586 [label="_location 699940"];
2587 [label="includeDefaultSeverity 699941"];
2588 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 699942"];
2589 [label="_defaultSeverityOpt 699943"];
2590 [label="includeEffectiveSeverity 699944"];
2591 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 699945"];
2592 [label="_effectiveSeverityOpt 699946"];
2593 [label="DiagnosticWithInfo dinfo = null; 699947"];
2594 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 699948"];
2595 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 699949"];
2596 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 699950"];
2597 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 699951"];
2598 [label="dinfo = d as DiagnosticWithInfo; 699952"];
2599 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 699953"];
2600 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 699954"];
2601 [label="_errorCodeType 699955"];
2602 [label="_code 699956"];
2603 [label="_ignoreArgumentsWhenComparing 699957"];
2604 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 699958"];
2605 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 699959"];
2606 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 699960"];
2607 [label="_squiggledText 699961"];
2608 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 699962"];
2609 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 699963"];
2610 [label="_arguments 699964"];
2611 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 699965"];
2612 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 699966"];
2613 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 699967"];
2614 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 699968"];
2615 [label="_startPosition 699969"];
2616 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 699970"];
2617 [label="_code 699971"];
2618 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 699972"];
2619 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 699973"];
2620 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 699974"];
2621 [label="int index = unmatched.IndexOf(d); 699975"];
2622 [label="int index = unmatched.IndexOf(d); 699976"];
2623 [label="param Equals(object obj) 699977"];
2624 [label="param Equals(this) 699978"];
2625 [label="var d = obj as DiagnosticDescription; 699979"];
2626 [label="if (d == null)\n                return false; 699980"];
2627 [label="if (d == null)\n                return false; 699981"];
2628 [label="if (!_code.Equals(d._code))\n                return false; 699982"];
2629 [label="if (!_code.Equals(d._code))\n                return false; 699983"];
2630 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 699984"];
2631 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 699985"];
2632 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 699986"];
2633 [label="if (_squiggledText != d._squiggledText)\n                    return false; 699987"];
2634 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 699988"];
2635 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 699989"];
2636 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 699990"];
2637 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 699991"];
2638 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 699992"];
2639 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 699993"];
2640 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 699994"];
2641 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 699995"];
2642 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 699996"];
2643 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 699997"];
2644 [label="if (d._arguments == null)\n                    return false; 699998"];
2645 [label="GetArgumentsAsStrings() 699999"];
2646 [label="param GetArgumentsAsStrings(this) 700000"];
2647 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 700001"];
2648 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 700002"];
2649 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 700003"];
2650 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 700004"];
2651 [label="_argumentsAsStrings 700005"];
2652 [label="return _argumentsAsStrings; 700006"];
2653 [label="var args1 = GetArgumentsAsStrings(); 700007"];
2654 [label="d.GetArgumentsAsStrings() 700008"];
2655 [label="param GetArgumentsAsStrings(this) 700009"];
2656 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 700010"];
2657 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 700011"];
2658 [label="return _argumentsAsStrings; 700012"];
2659 [label="var args2 = d.GetArgumentsAsStrings(); 700013"];
2660 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 700014"];
2661 [label="if (!args1.SequenceEqual(args2))\n                        return false; 700015"];
2662 [label="if (!args1.SequenceEqual(args2))\n                        return false; 700016"];
2663 [label="if (!args1.SequenceEqual(args2))\n                        return false; 700017"];
2664 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 700018"];
2665 [label="return true; 700019"];
2666 [label="int index = unmatched.IndexOf(d); 700020"];
2667 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 700021"];
2668 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 700022"];
2669 [label="unmatched.RemoveAt(index); 700023"];
2670 [label="if (d == null)\n                return false; 700024"];
2671 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 700025"];
2672 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 700026"];
2673 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 700027"];
2674 [label="if (_squiggledText != d._squiggledText)\n                    return false; 700028"];
2675 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 700029"];
2676 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 700030"];
2677 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 700031"];
2678 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 700032"];
2679 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 700033"];
2680 [label="if (d._arguments == null)\n                    return false; 700034"];
2681 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 700035"];
2682 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 700036"];
2683 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 700037"];
2684 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 700038"];
2685 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 700039"];
2686 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 700040"];
2687 [label="DiagnosticDescription.GetAssertText(expected, actual) 700041"];
2688 [label="param GetAssertText(DiagnosticDescription[] expected) 700042"];
2689 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 700043"];
2690 [label="const int CSharp = 1; 700044"];
2691 [label="const int VisualBasic = 2; 700045"];
2692 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700046"];
2693 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700047"];
2694 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700048"];
2695 [label="actual.Any() && actual.First() is CSDiagnostic 700049"];
2696 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700050"];
2697 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 700051"];
2698 [label="int indentDepth = (language == CSharp) ? 4 : 1; 700052"];
2699 [label="(language == CSharp) 700053"];
2700 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 700054"];
2701 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 700055"];
2702 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 700056"];
2703 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 700057"];
2704 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 700058"];
2705 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 700059"];
2706 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 700060"];
2707 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 700061"];
2708 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 700062"];
2709 [label="IsSortedOrEmpty(expected) 700063"];
2710 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 700064"];
2711 [label="new LinePositionComparer() 700065"];
2712 [label="param LinePositionComparer(this) 700066"];
2713 [label="Instance = new LinePositionComparer() 700067"];
2714 [label="var comparer = LinePositionComparer.Instance; 700068"];
2715 [label="DiagnosticDescription last = null; 700069"];
2716 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 700070"];
2717 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 700071"];
2718 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 700072"];
2719 [label="return false; 700073"];
2720 [label="var assertText = new StringBuilder(); 700074"];
2721 [label="assertText.AppendLine(); 700075"];
2722 [label="int i; 700076"];
2723 [label="assertText.AppendLine('Expected:'); 700077"];
2724 [label="assertText.AppendLine('Expected:'); 700078"];
2725 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 700079"];
2726 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 700080"];
2727 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 700081"];
2728 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700082"];
2729 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700083"];
2730 [label="GetDiagnosticDescription(d, indentDepth) 700084"];
2731 [label="param GetDiagnosticDescription(DiagnosticDescription d) 700085"];
2732 [label="param GetDiagnosticDescription(int indentDepth) 700086"];
2733 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700087"];
2734 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700088"];
2735 [label="d.ToString() 700089"];
2736 [label="param ToString(this) 700090"];
2737 [label="var sb = new StringBuilder(); 700091"];
2738 [label="sb.Append('Diagnostic('); 700092"];
2739 [label="sb.Append('Diagnostic('); 700093"];
2740 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700094"];
2741 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700095"];
2742 [label="sb.Append(_errorCodeType.Name); 700096"];
2743 [label="sb.Append(_errorCodeType.Name); 700097"];
2744 [label="sb.Append('.'); 700098"];
2745 [label="sb.Append('.'); 700099"];
2746 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700100"];
2747 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700101"];
2748 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700102"];
2749 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700103"];
2750 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 700104"];
2751 [label="sb.Append(', \\''); 700105"];
2752 [label="sb.Append(', \\''); 700106"];
2753 [label="sb.Append(_squiggledText); 700107"];
2754 [label="sb.Append(_squiggledText); 700108"];
2755 [label="sb.Append('''); 700109"];
2756 [label="sb.Append('''); 700110"];
2757 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 700111"];
2758 [label="sb.Append(')'); 700112"];
2759 [label="sb.Append(')'); 700113"];
2760 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 700114"];
2761 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 700115"];
2762 [label="sb.Append('.WithArguments('); 700116"];
2763 [label="sb.Append('.WithArguments('); 700117"];
2764 [label="GetArgumentsAsStrings() 700118"];
2765 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 700119"];
2766 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 700120"];
2767 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 700121"];
2768 [label="sb.Append('\\''); 700122"];
2769 [label="sb.Append('\\''); 700123"];
2770 [label="sb.Append(argumentStrings.Current); 700124"];
2771 [label="sb.Append(argumentStrings.Current); 700125"];
2772 [label="sb.Append('\\''); 700126"];
2773 [label="sb.Append('\\''); 700127"];
2774 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 700128"];
2775 [label="sb.Append(', '); 700129"];
2776 [label="sb.Append(', '); 700130"];
2777 [label="sb.Append(')'); 700131"];
2778 [label="sb.Append(')'); 700132"];
2779 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700133"];
2780 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700134"];
2781 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 700135"];
2782 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700136"];
2783 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700137"];
2784 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700138"];
2785 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700139"];
2786 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700140"];
2787 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700141"];
2788 [label="return sb.ToString(); 700142"];
2789 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700143"];
2790 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700144"];
2791 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700145"];
2792 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700146"];
2793 [label="param GetDiagnosticDescription(int indentDepth) 700147"];
2794 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700148"];
2795 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700149"];
2796 [label="var sb = new StringBuilder(); 700150"];
2797 [label="sb.Append('Diagnostic('); 700151"];
2798 [label="sb.Append('Diagnostic('); 700152"];
2799 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700153"];
2800 [label="sb.Append(_errorCodeType.Name); 700154"];
2801 [label="sb.Append(_errorCodeType.Name); 700155"];
2802 [label="sb.Append('.'); 700156"];
2803 [label="sb.Append('.'); 700157"];
2804 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700158"];
2805 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700159"];
2806 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700160"];
2807 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 700161"];
2808 [label="sb.Append(', \\''); 700162"];
2809 [label="sb.Append(', \\''); 700163"];
2810 [label="sb.Append(_squiggledText); 700164"];
2811 [label="sb.Append(_squiggledText); 700165"];
2812 [label="sb.Append('''); 700166"];
2813 [label="sb.Append('''); 700167"];
2814 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 700168"];
2815 [label="sb.Append(')'); 700169"];
2816 [label="sb.Append(')'); 700170"];
2817 [label="sb.Append('.WithArguments('); 700171"];
2818 [label="sb.Append('.WithArguments('); 700172"];
2819 [label="sb.Append('\\''); 700173"];
2820 [label="sb.Append(argumentStrings.Current); 700174"];
2821 [label="sb.Append(argumentStrings.Current); 700175"];
2822 [label="sb.Append('\\''); 700176"];
2823 [label="sb.Append(', '); 700177"];
2824 [label="sb.Append(')'); 700178"];
2825 [label="sb.Append(')'); 700179"];
2826 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700180"];
2827 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 700181"];
2828 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700182"];
2829 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700183"];
2830 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700184"];
2831 [label="return sb.ToString(); 700185"];
2832 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700186"];
2833 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700187"];
2834 [label="GetCommaSeparatedLines(assertText, expectedText); 700188"];
2835 [label="GetCommaSeparatedLines(assertText, expectedText); 700189"];
2836 [label="GetCommaSeparatedLines(assertText, expectedText) 700190"];
2837 [label="param GetCommaSeparatedLines(StringBuilder sb) 700191"];
2838 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 700192"];
2839 [label="int n = lines.Count; 700193"];
2840 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 700194"];
2841 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 700195"];
2842 [label="sb.Append(lines[i]); 700196"];
2843 [label="sb.Append(lines[i]); 700197"];
2844 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 700198"];
2845 [label="sb.Append(','); 700199"];
2846 [label="sb.Append(','); 700200"];
2847 [label="sb.AppendLine(); 700201"];
2848 [label="GetCommaSeparatedLines(assertText, expectedText); 700202"];
2849 [label="assertText.AppendLine('Actual:'); 700203"];
2850 [label="assertText.AppendLine('Actual:'); 700204"];
2851 [label="var actualText = ArrayBuilder<string>.GetInstance(); 700205"];
2852 [label="var e = actual.GetEnumerator(); 700206"];
2853 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 700207"];
2854 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 700208"];
2855 [label="Diagnostic d = e.Current; 700209"];
2856 [label="string message = d.ToString(); 700210"];
2857 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 700211"];
2858 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 700212"];
2859 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 700213"];
2860 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 700214"];
2861 [label="Indent(assertText, indentDepth); 700215"];
2862 [label="Indent(assertText, indentDepth); 700216"];
2863 [label="Indent(assertText, indentDepth) 700217"];
2864 [label="param Indent(StringBuilder sb) 700218"];
2865 [label="param Indent(int count) 700219"];
2866 [label="sb.Append(' ', 4 * count); 700220"];
2867 [label="sb.Append(' ', 4 * count); 700221"];
2868 [label="sb.Append(' ', 4 * count); 700222"];
2869 [label="Indent(assertText, indentDepth); 700223"];
2870 [label="assertText.Append('// '); 700224"];
2871 [label="assertText.Append('// '); 700225"];
2872 [label="assertText.AppendLine(d.ToString()); 700226"];
2873 [label="assertText.AppendLine(d.ToString()); 700227"];
2874 [label="var l = d.Location; 700228"];
2875 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 700229"];
2876 [label="Indent(assertText, indentDepth); 700230"];
2877 [label="Indent(assertText, indentDepth); 700231"];
2878 [label="Indent(assertText, indentDepth) 700232"];
2879 [label="param Indent(StringBuilder sb) 700233"];
2880 [label="param Indent(int count) 700234"];
2881 [label="sb.Append(' ', 4 * count); 700235"];
2882 [label="sb.Append(' ', 4 * count); 700236"];
2883 [label="sb.Append(' ', 4 * count); 700237"];
2884 [label="Indent(assertText, indentDepth); 700238"];
2885 [label="assertText.Append('// '); 700239"];
2886 [label="assertText.Append('// '); 700240"];
2887 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 700241"];
2888 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 700242"];
2889 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700243"];
2890 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700244"];
2891 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700245"];
2892 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700246"];
2893 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 700247"];
2894 [label="param DiagnosticDescription(Diagnostic d) 700248"];
2895 [label="param DiagnosticDescription(bool errorCodeOnly) 700249"];
2896 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 700250"];
2897 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 700251"];
2898 [label="param DiagnosticDescription(this) 700252"];
2899 [label="_code 700253"];
2900 [label="_isWarningAsError 700254"];
2901 [label="_isSuppressed 700255"];
2902 [label="_squiggledText 700256"];
2903 [label="_arguments 700257"];
2904 [label="_startPosition 700258"];
2905 [label="_errorCodeType 700259"];
2906 [label="_defaultSeverityOpt 700260"];
2907 [label="_effectiveSeverityOpt 700261"];
2908 [label="_code 700262"];
2909 [label="_isWarningAsError 700263"];
2910 [label="_isSuppressed 700264"];
2911 [label="_location 700265"];
2912 [label="DiagnosticWithInfo dinfo = null; 700266"];
2913 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 700267"];
2914 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 700268"];
2915 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 700269"];
2916 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 700270"];
2917 [label="var diffDescription = description; 700271"];
2918 [label="var idx = Array.IndexOf(expected, description); 700272"];
2919 [label="var idx = Array.IndexOf(expected, description); 700273"];
2920 [label="var idx = Array.IndexOf(expected, description); 700274"];
2921 [label="var idx = Array.IndexOf(expected, description); 700275"];
2922 [label="if (d == null)\n                return false; 700276"];
2923 [label="if (d == null)\n                return false; 700277"];
2924 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 700278"];
2925 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 700279"];
2926 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 700280"];
2927 [label="if (_squiggledText != d._squiggledText)\n                    return false; 700281"];
2928 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 700282"];
2929 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 700283"];
2930 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 700284"];
2931 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 700285"];
2932 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 700286"];
2933 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 700287"];
2934 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 700288"];
2935 [label="if (d._arguments == null)\n                    return false; 700289"];
2936 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 700290"];
2937 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 700291"];
2938 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 700292"];
2939 [label="diffDescription = expected[idx]; 700293"];
2940 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700294"];
2941 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700295"];
2942 [label="GetDiagnosticDescription(description, indentDepth) 700296"];
2943 [label="param GetDiagnosticDescription(DiagnosticDescription d) 700297"];
2944 [label="param GetDiagnosticDescription(int indentDepth) 700298"];
2945 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700299"];
2946 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700300"];
2947 [label="var sb = new StringBuilder(); 700301"];
2948 [label="sb.Append('Diagnostic('); 700302"];
2949 [label="sb.Append('Diagnostic('); 700303"];
2950 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700304"];
2951 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700305"];
2952 [label="sb.Append(_errorCodeType.Name); 700306"];
2953 [label="sb.Append(_errorCodeType.Name); 700307"];
2954 [label="sb.Append('.'); 700308"];
2955 [label="sb.Append('.'); 700309"];
2956 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700310"];
2957 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700311"];
2958 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700312"];
2959 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700313"];
2960 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 700314"];
2961 [label="sb.Append(', \\''); 700315"];
2962 [label="sb.Append(', \\''); 700316"];
2963 [label="sb.Append(_squiggledText); 700317"];
2964 [label="sb.Append(_squiggledText); 700318"];
2965 [label="sb.Append('''); 700319"];
2966 [label="sb.Append('''); 700320"];
2967 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 700321"];
2968 [label="sb.Append(')'); 700322"];
2969 [label="sb.Append(')'); 700323"];
2970 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 700324"];
2971 [label="sb.Append('.WithArguments('); 700325"];
2972 [label="sb.Append('.WithArguments('); 700326"];
2973 [label="sb.Append('\\''); 700327"];
2974 [label="sb.Append('\\''); 700328"];
2975 [label="sb.Append(argumentStrings.Current); 700329"];
2976 [label="sb.Append(argumentStrings.Current); 700330"];
2977 [label="sb.Append('\\''); 700331"];
2978 [label="sb.Append('\\''); 700332"];
2979 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 700333"];
2980 [label="sb.Append(', '); 700334"];
2981 [label="sb.Append(', '); 700335"];
2982 [label="sb.Append(')'); 700336"];
2983 [label="sb.Append(')'); 700337"];
2984 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700338"];
2985 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700339"];
2986 [label="sb.Append('.WithLocation('); 700340"];
2987 [label="sb.Append('.WithLocation('); 700341"];
2988 [label="sb.Append(_startPosition.Value.Line + 1); 700342"];
2989 [label="sb.Append(_startPosition.Value.Line + 1); 700343"];
2990 [label="sb.Append(', '); 700344"];
2991 [label="sb.Append(', '); 700345"];
2992 [label="sb.Append(_startPosition.Value.Character + 1); 700346"];
2993 [label="sb.Append(_startPosition.Value.Character + 1); 700347"];
2994 [label="sb.Append(')'); 700348"];
2995 [label="sb.Append(')'); 700349"];
2996 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 700350"];
2997 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700351"];
2998 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700352"];
2999 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700353"];
3000 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700354"];
3001 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700355"];
3002 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700356"];
3003 [label="return sb.ToString(); 700357"];
3004 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700358"];
3005 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700359"];
3006 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700360"];
3007 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700361"];
3008 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700362"];
3009 [label="GetDiagnosticDescription(diffDescription, indentDepth) 700363"];
3010 [label="param GetDiagnosticDescription(DiagnosticDescription d) 700364"];
3011 [label="param GetDiagnosticDescription(int indentDepth) 700365"];
3012 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700366"];
3013 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700367"];
3014 [label="var sb = new StringBuilder(); 700368"];
3015 [label="sb.Append('Diagnostic('); 700369"];
3016 [label="sb.Append('Diagnostic('); 700370"];
3017 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700371"];
3018 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700372"];
3019 [label="sb.Append(_errorCodeType.Name); 700373"];
3020 [label="sb.Append(_errorCodeType.Name); 700374"];
3021 [label="sb.Append('.'); 700375"];
3022 [label="sb.Append('.'); 700376"];
3023 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700377"];
3024 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700378"];
3025 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700379"];
3026 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700380"];
3027 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 700381"];
3028 [label="sb.Append(', \\''); 700382"];
3029 [label="sb.Append(', \\''); 700383"];
3030 [label="sb.Append(_squiggledText); 700384"];
3031 [label="sb.Append(_squiggledText); 700385"];
3032 [label="sb.Append('''); 700386"];
3033 [label="sb.Append('''); 700387"];
3034 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 700388"];
3035 [label="sb.Append(')'); 700389"];
3036 [label="sb.Append(')'); 700390"];
3037 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 700391"];
3038 [label="sb.Append('.WithArguments('); 700392"];
3039 [label="sb.Append('.WithArguments('); 700393"];
3040 [label="sb.Append('\\''); 700394"];
3041 [label="sb.Append('\\''); 700395"];
3042 [label="sb.Append(argumentStrings.Current); 700396"];
3043 [label="sb.Append(argumentStrings.Current); 700397"];
3044 [label="sb.Append('\\''); 700398"];
3045 [label="sb.Append('\\''); 700399"];
3046 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 700400"];
3047 [label="sb.Append(', '); 700401"];
3048 [label="sb.Append(', '); 700402"];
3049 [label="sb.Append(')'); 700403"];
3050 [label="sb.Append(')'); 700404"];
3051 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700405"];
3052 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700406"];
3053 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 700407"];
3054 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700408"];
3055 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700409"];
3056 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700410"];
3057 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700411"];
3058 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700412"];
3059 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700413"];
3060 [label="return sb.ToString(); 700414"];
3061 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700415"];
3062 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700416"];
3063 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700417"];
3064 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 700418"];
3065 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 700419"];
3066 [label="assertText.AppendLine(','); 700420"];
3067 [label="assertText.AppendLine(','); 700421"];
3068 [label="Indent(assertText, indentDepth); 700422"];
3069 [label="Indent(assertText, indentDepth); 700423"];
3070 [label="Indent(assertText, indentDepth) 700424"];
3071 [label="param Indent(StringBuilder sb) 700425"];
3072 [label="param Indent(int count) 700426"];
3073 [label="sb.Append(' ', 4 * count); 700427"];
3074 [label="sb.Append(' ', 4 * count); 700428"];
3075 [label="Indent(assertText, indentDepth); 700429"];
3076 [label="assertText.Append('// '); 700430"];
3077 [label="Indent(assertText, indentDepth); 700431"];
3078 [label="Indent(assertText, indentDepth); 700432"];
3079 [label="Indent(assertText, indentDepth) 700433"];
3080 [label="param Indent(StringBuilder sb) 700434"];
3081 [label="param Indent(int count) 700435"];
3082 [label="sb.Append(' ', 4 * count); 700436"];
3083 [label="sb.Append(' ', 4 * count); 700437"];
3084 [label="Indent(assertText, indentDepth); 700438"];
3085 [label="assertText.Append('// '); 700439"];
3086 [label="_code 700440"];
3087 [label="_isWarningAsError 700441"];
3088 [label="_isSuppressed 700442"];
3089 [label="_squiggledText 700443"];
3090 [label="_arguments 700444"];
3091 [label="_startPosition 700445"];
3092 [label="_errorCodeType 700446"];
3093 [label="_defaultSeverityOpt 700447"];
3094 [label="_effectiveSeverityOpt 700448"];
3095 [label="_code 700449"];
3096 [label="DiagnosticWithInfo dinfo = null; 700450"];
3097 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 700451"];
3098 [label="var diffDescription = description; 700452"];
3099 [label="if (d == null)\n                return false; 700453"];
3100 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 700454"];
3101 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 700455"];
3102 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 700456"];
3103 [label="if (_squiggledText != d._squiggledText)\n                    return false; 700457"];
3104 [label="return false; 700458"];
3105 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 700459"];
3106 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 700460"];
3107 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 700461"];
3108 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 700462"];
3109 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 700463"];
3110 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 700464"];
3111 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 700465"];
3112 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 700466"];
3113 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 700467"];
3114 [label="if (d._arguments == null)\n                    return false; 700468"];
3115 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 700469"];
3116 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700470"];
3117 [label="param GetDiagnosticDescription(int indentDepth) 700471"];
3118 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700472"];
3119 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700473"];
3120 [label="var sb = new StringBuilder(); 700474"];
3121 [label="sb.Append('Diagnostic('); 700475"];
3122 [label="sb.Append('Diagnostic('); 700476"];
3123 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700477"];
3124 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700478"];
3125 [label="sb.Append(_errorCodeType.Name); 700479"];
3126 [label="sb.Append(_errorCodeType.Name); 700480"];
3127 [label="sb.Append('.'); 700481"];
3128 [label="sb.Append('.'); 700482"];
3129 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700483"];
3130 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700484"];
3131 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700485"];
3132 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700486"];
3133 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 700487"];
3134 [label="sb.Append(', \\''); 700488"];
3135 [label="sb.Append(', \\''); 700489"];
3136 [label="sb.Append(_squiggledText); 700490"];
3137 [label="sb.Append(_squiggledText); 700491"];
3138 [label="sb.Append('''); 700492"];
3139 [label="sb.Append('''); 700493"];
3140 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 700494"];
3141 [label="sb.Append(')'); 700495"];
3142 [label="sb.Append(')'); 700496"];
3143 [label="sb.Append('.WithArguments('); 700497"];
3144 [label="sb.Append('.WithArguments('); 700498"];
3145 [label="sb.Append('\\''); 700499"];
3146 [label="sb.Append('\\''); 700500"];
3147 [label="sb.Append(argumentStrings.Current); 700501"];
3148 [label="sb.Append(argumentStrings.Current); 700502"];
3149 [label="sb.Append('\\''); 700503"];
3150 [label="sb.Append('\\''); 700504"];
3151 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 700505"];
3152 [label="sb.Append(', '); 700506"];
3153 [label="sb.Append(', '); 700507"];
3154 [label="sb.Append(')'); 700508"];
3155 [label="sb.Append(')'); 700509"];
3156 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700510"];
3157 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700511"];
3158 [label="sb.Append('.WithLocation('); 700512"];
3159 [label="sb.Append('.WithLocation('); 700513"];
3160 [label="sb.Append(_startPosition.Value.Line + 1); 700514"];
3161 [label="sb.Append(_startPosition.Value.Line + 1); 700515"];
3162 [label="sb.Append(', '); 700516"];
3163 [label="sb.Append(', '); 700517"];
3164 [label="sb.Append(_startPosition.Value.Character + 1); 700518"];
3165 [label="sb.Append(_startPosition.Value.Character + 1); 700519"];
3166 [label="sb.Append(')'); 700520"];
3167 [label="sb.Append(')'); 700521"];
3168 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 700522"];
3169 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700523"];
3170 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700524"];
3171 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700525"];
3172 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700526"];
3173 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700527"];
3174 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700528"];
3175 [label="return sb.ToString(); 700529"];
3176 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700530"];
3177 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700531"];
3178 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700532"];
3179 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700533"];
3180 [label="param GetDiagnosticDescription(int indentDepth) 700534"];
3181 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700535"];
3182 [label="sb.Append(_errorCodeType.Name); 700536"];
3183 [label="sb.Append(_errorCodeType.Name); 700537"];
3184 [label="sb.Append('.'); 700538"];
3185 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700539"];
3186 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700540"];
3187 [label="sb.Append(', \\''); 700541"];
3188 [label="sb.Append(_squiggledText); 700542"];
3189 [label="sb.Append(_squiggledText); 700543"];
3190 [label="sb.Append('''); 700544"];
3191 [label="sb.Append(')'); 700545"];
3192 [label="sb.Append('.WithArguments('); 700546"];
3193 [label="sb.Append('\\''); 700547"];
3194 [label="sb.Append(argumentStrings.Current); 700548"];
3195 [label="sb.Append('\\''); 700549"];
3196 [label="sb.Append(', '); 700550"];
3197 [label="sb.Append(')'); 700551"];
3198 [label="return sb.ToString(); 700552"];
3199 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700553"];
3200 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700554"];
3201 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700555"];
3202 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 700556"];
3203 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 700557"];
3204 [label="assertText.AppendLine(','); 700558"];
3205 [label="Indent(assertText, indentDepth); 700559"];
3206 [label="Indent(assertText, indentDepth); 700560"];
3207 [label="Indent(assertText, indentDepth) 700561"];
3208 [label="param Indent(StringBuilder sb) 700562"];
3209 [label="param Indent(int count) 700563"];
3210 [label="sb.Append(' ', 4 * count); 700564"];
3211 [label="sb.Append(' ', 4 * count); 700565"];
3212 [label="Indent(assertText, indentDepth); 700566"];
3213 [label="assertText.Append('// '); 700567"];
3214 [label="Indent(assertText, indentDepth); 700568"];
3215 [label="Indent(assertText, indentDepth); 700569"];
3216 [label="Indent(assertText, indentDepth) 700570"];
3217 [label="param Indent(StringBuilder sb) 700571"];
3218 [label="param Indent(int count) 700572"];
3219 [label="sb.Append(' ', 4 * count); 700573"];
3220 [label="sb.Append(' ', 4 * count); 700574"];
3221 [label="Indent(assertText, indentDepth); 700575"];
3222 [label="assertText.Append('// '); 700576"];
3223 [label="_code 700577"];
3224 [label="_isWarningAsError 700578"];
3225 [label="_isSuppressed 700579"];
3226 [label="_squiggledText 700580"];
3227 [label="_arguments 700581"];
3228 [label="_startPosition 700582"];
3229 [label="_errorCodeType 700583"];
3230 [label="_defaultSeverityOpt 700584"];
3231 [label="_effectiveSeverityOpt 700585"];
3232 [label="_code 700586"];
3233 [label="DiagnosticWithInfo dinfo = null; 700587"];
3234 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 700588"];
3235 [label="var diffDescription = description; 700589"];
3236 [label="if (d == null)\n                return false; 700590"];
3237 [label="return false; 700591"];
3238 [label="if (d == null)\n                return false; 700592"];
3239 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 700593"];
3240 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 700594"];
3241 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 700595"];
3242 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 700596"];
3243 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 700597"];
3244 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 700598"];
3245 [label="if (d._arguments == null)\n                    return false; 700599"];
3246 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 700600"];
3247 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700601"];
3248 [label="param GetDiagnosticDescription(int indentDepth) 700602"];
3249 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700603"];
3250 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700604"];
3251 [label="var sb = new StringBuilder(); 700605"];
3252 [label="sb.Append('Diagnostic('); 700606"];
3253 [label="sb.Append('Diagnostic('); 700607"];
3254 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700608"];
3255 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 700609"];
3256 [label="sb.Append(_errorCodeType.Name); 700610"];
3257 [label="sb.Append(_errorCodeType.Name); 700611"];
3258 [label="sb.Append('.'); 700612"];
3259 [label="sb.Append('.'); 700613"];
3260 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700614"];
3261 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700615"];
3262 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700616"];
3263 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 700617"];
3264 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 700618"];
3265 [label="sb.Append(', \\''); 700619"];
3266 [label="sb.Append(', \\''); 700620"];
3267 [label="sb.Append(_squiggledText); 700621"];
3268 [label="sb.Append(_squiggledText); 700622"];
3269 [label="sb.Append('''); 700623"];
3270 [label="sb.Append('''); 700624"];
3271 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 700625"];
3272 [label="sb.Append(')'); 700626"];
3273 [label="sb.Append(')'); 700627"];
3274 [label="sb.Append('.WithArguments('); 700628"];
3275 [label="sb.Append('.WithArguments('); 700629"];
3276 [label="sb.Append('\\''); 700630"];
3277 [label="sb.Append('\\''); 700631"];
3278 [label="sb.Append(argumentStrings.Current); 700632"];
3279 [label="sb.Append(argumentStrings.Current); 700633"];
3280 [label="sb.Append('\\''); 700634"];
3281 [label="sb.Append('\\''); 700635"];
3282 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 700636"];
3283 [label="sb.Append(', '); 700637"];
3284 [label="sb.Append(', '); 700638"];
3285 [label="sb.Append(')'); 700639"];
3286 [label="sb.Append(')'); 700640"];
3287 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700641"];
3288 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 700642"];
3289 [label="sb.Append('.WithLocation('); 700643"];
3290 [label="sb.Append('.WithLocation('); 700644"];
3291 [label="sb.Append(_startPosition.Value.Line + 1); 700645"];
3292 [label="sb.Append(_startPosition.Value.Line + 1); 700646"];
3293 [label="sb.Append(', '); 700647"];
3294 [label="sb.Append(', '); 700648"];
3295 [label="sb.Append(_startPosition.Value.Character + 1); 700649"];
3296 [label="sb.Append(_startPosition.Value.Character + 1); 700650"];
3297 [label="sb.Append(')'); 700651"];
3298 [label="sb.Append(')'); 700652"];
3299 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 700653"];
3300 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700654"];
3301 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 700655"];
3302 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700656"];
3303 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 700657"];
3304 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700658"];
3305 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 700659"];
3306 [label="return sb.ToString(); 700660"];
3307 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700661"];
3308 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700662"];
3309 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700663"];
3310 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700664"];
3311 [label="param GetDiagnosticDescription(int indentDepth) 700665"];
3312 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700666"];
3313 [label="sb.Append(_errorCodeType.Name); 700667"];
3314 [label="sb.Append(_errorCodeType.Name); 700668"];
3315 [label="sb.Append('.'); 700669"];
3316 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700670"];
3317 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700671"];
3318 [label="sb.Append(', \\''); 700672"];
3319 [label="sb.Append(_squiggledText); 700673"];
3320 [label="sb.Append(_squiggledText); 700674"];
3321 [label="sb.Append('''); 700675"];
3322 [label="sb.Append(')'); 700676"];
3323 [label="sb.Append('.WithArguments('); 700677"];
3324 [label="sb.Append('\\''); 700678"];
3325 [label="sb.Append(argumentStrings.Current); 700679"];
3326 [label="sb.Append('\\''); 700680"];
3327 [label="sb.Append(', '); 700681"];
3328 [label="sb.Append(')'); 700682"];
3329 [label="return sb.ToString(); 700683"];
3330 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700684"];
3331 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 700685"];
3332 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700686"];
3333 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 700687"];
3334 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 700688"];
3335 [label="assertText.AppendLine(); 700689"];
3336 [label="assertText.AppendLine('Diff:'); 700690"];
3337 [label="assertText.AppendLine('Diff:'); 700691"];
3338 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700692"];
3339 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700693"];
3340 [label="new[] { '\\r', '\\n' } 700694"];
3341 [label="'\\r' 700695"];
3342 [label="'\\n' 700696"];
3343 [label="new[] { '\\r', '\\n' } 700697"];
3344 [label="new[] { '\\r', '\\n' } 700698"];
3345 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 700699"];
3346 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700700"];
3347 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700701"];
3348 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 700702"];
3349 [label="param DiffReport(IEnumerable<T> expected) 700703"];
3350 [label="param DiffReport(IEnumerable<T> actual) 700704"];
3351 [label="param DiffReport(string separator) 700705"];
3352 [label="param DiffReport(IEqualityComparer<T> comparer = null) 700706"];
3353 [label="param DiffReport(Func<T, string> toString = null) 700707"];
3354 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 700708"];
3355 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 700709"];
3356 [label="(comparer != null) 700710"];
3357 [label="EqualityComparer<T>.Default 700711"];
3358 [label="new LCS<T>(EqualityComparer<T>.Default) 700712"];
3359 [label="param LCS(IEqualityComparer<T> comparer) 700713"];
3360 [label="param LCS(this) 700714"];
3361 [label="1 700715"];
3362 [label="DeleteCost = 1 700716"];
3363 [label="1 700717"];
3364 [label="InsertCost = 1 700718"];
3365 [label="2 700719"];
3366 [label="UpdateCost = 2 700720"];
3367 [label="param LongestCommonSubsequence(this) 700721"];
3368 [label="_comparer 700722"];
3369 [label="_comparer 700723"];
3370 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 700724"];
3371 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 700725"];
3372 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 700726"];
3373 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 700727"];
3374 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 700728"];
3375 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700729"];
3376 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700730"];
3377 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700731"];
3378 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700732"];
3379 [label="lcs.CalculateDiff(expectedList, actualList, toString) 700733"];
3380 [label="param CalculateDiff(IList<T> sequenceA) 700734"];
3381 [label="param CalculateDiff(IList<T> sequenceB) 700735"];
3382 [label="param CalculateDiff(Func<T, string> toString) 700736"];
3383 [label="param CalculateDiff(this) 700737"];
3384 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 700738"];
3385 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 700739"];
3386 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 700740"];
3387 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 700741"];
3388 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 700742"];
3389 [label="param GetEdits(TSequence sequenceA) 700743"];
3390 [label="param GetEdits(int lengthA) 700744"];
3391 [label="param GetEdits(TSequence sequenceB) 700745"];
3392 [label="param GetEdits(int lengthB) 700746"];
3393 [label="param GetEdits(this) 700747"];
3394 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700748"];
3395 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700749"];
3396 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700750"];
3397 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700751"];
3398 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 700752"];
3399 [label="param ComputeCostMatrix(TSequence sequenceA) 700753"];
3400 [label="param ComputeCostMatrix(int lengthA) 700754"];
3401 [label="param ComputeCostMatrix(TSequence sequenceB) 700755"];
3402 [label="param ComputeCostMatrix(int lengthB) 700756"];
3403 [label="param ComputeCostMatrix(this) 700757"];
3404 [label="var la = lengthA + 1; 700758"];
3405 [label="var la = lengthA + 1; 700759"];
3406 [label="var lb = lengthB + 1; 700760"];
3407 [label="var lb = lengthB + 1; 700761"];
3408 [label="var d = new int[la, lb]; 700762"];
3409 [label="d[0, 0] = 0; 700763"];
3410 [label="d[0, 0] 700764"];
3411 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 700765"];
3412 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 700766"];
3413 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 700767"];
3414 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 700768"];
3415 [label="d[i, 0] 700769"];
3416 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 700770"];
3417 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 700771"];
3418 [label="d[0, j] = d[0, j - 1] + InsertCost; 700772"];
3419 [label="d[0, j] = d[0, j - 1] + InsertCost; 700773"];
3420 [label="d[0, j] 700774"];
3421 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 700775"];
3422 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 700776"];
3423 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 700777"];
3424 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 700778"];
3425 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700779"];
3426 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700780"];
3427 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700781"];
3428 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700782"];
3429 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 700783"];
3430 [label="param ItemsEqual(IList<T> sequenceA) 700784"];
3431 [label="param ItemsEqual(int indexA) 700785"];
3432 [label="param ItemsEqual(IList<T> sequenceB) 700786"];
3433 [label="param ItemsEqual(int indexB) 700787"];
3434 [label="param ItemsEqual(this) 700788"];
3435 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 700789"];
3436 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 700790"];
3437 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 700791"];
3438 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700792"];
3439 [label="int m2 = d[i - 1, j] + DeleteCost; 700793"];
3440 [label="int m2 = d[i - 1, j] + DeleteCost; 700794"];
3441 [label="int m3 = d[i, j - 1] + InsertCost; 700795"];
3442 [label="int m3 = d[i, j - 1] + InsertCost; 700796"];
3443 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700797"];
3444 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700798"];
3445 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700799"];
3446 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700800"];
3447 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700801"];
3448 [label="d[i, j] 700802"];
3449 [label="return d; 700803"];
3450 [label="int i = lengthA; 700804"];
3451 [label="int j = lengthB; 700805"];
3452 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 700806"];
3453 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 700807"];
3454 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 700808"];
3455 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 700809"];
3456 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 700810"];
3457 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 700811"];
3458 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 700812"];
3459 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 700813"];
3460 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 700814"];
3461 [label="i--; 700815"];
3462 [label="j--; 700816"];
3463 [label="yield return new Edit(EditKind.Update, i, j); 700817"];
3464 [label="yield return new Edit(EditKind.Update, i, j); 700818"];
3465 [label="yield return new Edit(EditKind.Update, i, j); 700819"];
3466 [label="yield return new Edit(EditKind.Update, i, j); 700820"];
3467 [label="new Edit(EditKind.Update, i, j) 700821"];
3468 [label="param Edit(EditKind kind) 700822"];
3469 [label="param Edit(int indexA) 700823"];
3470 [label="param Edit(int indexB) 700824"];
3471 [label="param Edit(this) 700825"];
3472 [label="this.Kind 700826"];
3473 [label="this.IndexA 700827"];
3474 [label="this.IndexB 700828"];
3475 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 700829"];
3476 [label="yield return new Edit(EditKind.Update, i, j); 700830"];
3477 [label="yield return new Edit(EditKind.Update, i, j); 700831"];
3478 [label="new Edit(EditKind.Update, i, j) 700832"];
3479 [label="param Edit(EditKind kind) 700833"];
3480 [label="param Edit(int indexA) 700834"];
3481 [label="param Edit(int indexB) 700835"];
3482 [label="param Edit(this) 700836"];
3483 [label="this.Kind 700837"];
3484 [label="this.IndexA 700838"];
3485 [label="this.IndexB 700839"];
3486 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 700840"];
3487 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 700841"];
3488 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 700842"];
3489 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 700843"];
3490 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 700844"];
3491 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 700845"];
3492 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 700846"];
3493 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 700847"];
3494 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 700848"];
3495 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700849"];
3496 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700850"];
3497 [label="actualText.Free(); 700851"];
3498 [label="expectedText.Free(); 700852"];
3499 [label="return assertText.ToString(); 700853"];
3500 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 700854"];
3501 [label="diagnostics.Verify(expected); 700855"];
3502 [label="VerifyAssemblyIds(c, diagnostics); 700856"];
3503 [label="VerifyAssemblyIds(c, diagnostics); 700857"];
3504 [label="VerifyAssemblyIds(c, diagnostics) 700858"];
3505 [label="param VerifyAssemblyIds(TCompilation c) 700859"];
3506 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 700860"];
3507 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 700861"];
3508 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 700862"];
3509 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 700863"];
3510 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 700864"];
3511 [label="CustomAssert.True(assemblyIds.IsEmpty); 700865"];
3512 [label="CustomAssert.True(assemblyIds.IsEmpty); 700866"];
3513 [label="VerifyAssemblyIds(c, diagnostics); 700867"];
3514 [label="return c; 700868"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 0;
574 -> 1;
575 -> 1;
576 -> 574;
576 -> 575;
577 -> 214;
577 -> 575;
578 -> 214;
578 -> 575;
579 -> 214;
579 -> 575;
580 -> 214;
580 -> 575;
581 -> 214;
581 -> 575;
582 -> 214;
582 -> 575;
583 -> 576;
583 -> 575;
584 -> 577;
584 -> 575;
585 -> 578;
585 -> 575;
586 -> 579;
586 -> 575;
587 -> 580;
587 -> 575;
588 -> 581;
588 -> 575;
589 -> 582;
589 -> 575;
590 -> 575;
591 -> 583;
591 -> 590;
592 -> 584;
592 -> 590;
593 -> 585;
593 -> 590;
594 -> 586;
594 -> 590;
595 -> 587;
595 -> 590;
596 -> 588;
596 -> 590;
597 -> 589;
597 -> 590;
598 -> 591;
598 -> 590;
599 -> 591;
599 -> 590;
600 -> 590;
601 -> 592;
601 -> 590;
602 -> 593;
602 -> 590;
603 -> 594;
603 -> 590;
604 -> 595;
604 -> 590;
605 -> 596;
605 -> 590;
607 -> 606;
609 -> 608;
610 -> 597;
610 -> 590;
611 -> 590;
612 -> 599;
612 -> 611;
613 -> 600;
613 -> 611;
614 -> 601;
614 -> 611;
615 -> 602;
615 -> 611;
616 -> 603;
616 -> 611;
617 -> 604;
617 -> 611;
618 -> 605;
618 -> 611;
619 -> 599;
619 -> 611;
620 -> 610;
620 -> 611;
621 -> 600;
621 -> 611;
622 -> 600;
622 -> 611;
623 -> 600;
623 -> 611;
624 -> 623;
624 -> 611;
625 -> 623;
625 -> 611;
626 -> 623;
626 -> 611;
627 -> 623;
627 -> 611;
628 -> 623;
628 -> 611;
629 -> 623;
629 -> 611;
630 -> 623;
630 -> 611;
631 -> 623;
631 -> 611;
632 -> 623;
632 -> 611;
633 -> 623;
633 -> 611;
634 -> 623;
634 -> 611;
635 -> 623;
635 -> 611;
636 -> 623;
636 -> 611;
637 -> 623;
637 -> 611;
638 -> 623;
638 -> 611;
639 -> 612;
639 -> 623;
639 -> 611;
640 -> 613;
640 -> 623;
640 -> 611;
641 -> 614;
641 -> 623;
641 -> 611;
642 -> 615;
642 -> 623;
642 -> 611;
643 -> 616;
643 -> 623;
643 -> 611;
644 -> 617;
644 -> 623;
644 -> 611;
645 -> 618;
645 -> 623;
645 -> 611;
646 -> 619;
646 -> 611;
647 -> 646;
647 -> 623;
647 -> 611;
648 -> 620;
648 -> 623;
648 -> 611;
649 -> 621;
649 -> 623;
649 -> 611;
650 -> 622;
650 -> 623;
650 -> 611;
651 -> 600;
651 -> 575;
652 -> 651;
652 -> 1;
653 -> 214;
653 -> 1;
654 -> 1;
655 -> 214;
655 -> 654;
656 -> 652;
656 -> 654;
657 -> 656;
657 -> 639;
657 -> 654;
658 -> 656;
658 -> 640;
658 -> 654;
659 -> 656;
659 -> 641;
659 -> 654;
660 -> 655;
660 -> 654;
661 -> 656;
661 -> 643;
661 -> 654;
662 -> 656;
662 -> 644;
662 -> 654;
663 -> 654;
664 -> 656;
664 -> 647;
664 -> 654;
665 -> 656;
665 -> 648;
665 -> 654;
666 -> 656;
666 -> 649;
666 -> 654;
667 -> 656;
667 -> 650;
667 -> 654;
668 -> 654;
669 -> 657;
669 -> 668;
670 -> 658;
670 -> 668;
671 -> 659;
671 -> 668;
672 -> 660;
672 -> 668;
673 -> 661;
673 -> 668;
674 -> 662;
674 -> 668;
675 -> 663;
675 -> 668;
676 -> 664;
676 -> 668;
677 -> 665;
677 -> 668;
678 -> 666;
678 -> 668;
679 -> 667;
679 -> 668;
680 -> 663;
680 -> 668;
681 -> 680;
681 -> 668;
682 -> 680;
682 -> 668;
683 -> 680;
683 -> 668;
684 -> 680;
684 -> 668;
685 -> 680;
685 -> 668;
686 -> 680;
686 -> 668;
687 -> 680;
687 -> 668;
688 -> 680;
688 -> 668;
689 -> 680;
689 -> 668;
690 -> 680;
690 -> 668;
691 -> 680;
691 -> 668;
692 -> 680;
692 -> 668;
693 -> 680;
693 -> 668;
694 -> 680;
694 -> 668;
695 -> 680;
695 -> 668;
696 -> 672;
696 -> 680;
696 -> 668;
697 -> 675;
697 -> 680;
697 -> 668;
698 -> 663;
698 -> 1;
699 -> 1;
700 -> 574;
700 -> 699;
701 -> 214;
701 -> 699;
702 -> 214;
702 -> 699;
703 -> 214;
703 -> 699;
704 -> 214;
704 -> 699;
705 -> 214;
705 -> 699;
706 -> 214;
706 -> 699;
707 -> 700;
707 -> 699;
708 -> 701;
708 -> 699;
709 -> 702;
709 -> 699;
710 -> 703;
710 -> 699;
711 -> 704;
711 -> 699;
712 -> 705;
712 -> 699;
713 -> 706;
713 -> 699;
714 -> 699;
715 -> 707;
715 -> 714;
716 -> 708;
716 -> 714;
717 -> 709;
717 -> 714;
718 -> 710;
718 -> 714;
719 -> 711;
719 -> 714;
720 -> 712;
720 -> 714;
721 -> 713;
721 -> 714;
722 -> 715;
722 -> 714;
723 -> 715;
723 -> 714;
724 -> 714;
725 -> 716;
725 -> 714;
726 -> 717;
726 -> 714;
727 -> 718;
727 -> 714;
728 -> 719;
728 -> 714;
729 -> 720;
729 -> 714;
730 -> 721;
730 -> 714;
731 -> 714;
732 -> 723;
732 -> 731;
733 -> 724;
733 -> 731;
734 -> 725;
734 -> 731;
735 -> 726;
735 -> 731;
736 -> 727;
736 -> 731;
737 -> 728;
737 -> 731;
738 -> 729;
738 -> 731;
739 -> 723;
739 -> 731;
740 -> 730;
740 -> 731;
741 -> 724;
741 -> 731;
742 -> 724;
742 -> 731;
743 -> 724;
743 -> 731;
744 -> 743;
744 -> 731;
745 -> 743;
745 -> 731;
746 -> 743;
746 -> 731;
747 -> 743;
747 -> 731;
748 -> 743;
748 -> 731;
749 -> 743;
749 -> 731;
750 -> 743;
750 -> 731;
751 -> 743;
751 -> 731;
752 -> 743;
752 -> 731;
753 -> 743;
753 -> 731;
754 -> 743;
754 -> 731;
755 -> 743;
755 -> 731;
756 -> 743;
756 -> 731;
757 -> 743;
757 -> 731;
758 -> 743;
758 -> 731;
759 -> 732;
759 -> 743;
759 -> 731;
760 -> 733;
760 -> 743;
760 -> 731;
761 -> 734;
761 -> 743;
761 -> 731;
762 -> 735;
762 -> 743;
762 -> 731;
763 -> 736;
763 -> 743;
763 -> 731;
764 -> 737;
764 -> 743;
764 -> 731;
765 -> 738;
765 -> 743;
765 -> 731;
766 -> 739;
766 -> 731;
767 -> 766;
767 -> 743;
767 -> 731;
768 -> 740;
768 -> 743;
768 -> 731;
769 -> 741;
769 -> 743;
769 -> 731;
770 -> 742;
770 -> 743;
770 -> 731;
771 -> 724;
771 -> 699;
772 -> 771;
772 -> 1;
773 -> 214;
773 -> 1;
774 -> 1;
775 -> 214;
775 -> 774;
776 -> 772;
776 -> 774;
777 -> 776;
777 -> 759;
777 -> 774;
778 -> 776;
778 -> 760;
778 -> 774;
779 -> 776;
779 -> 761;
779 -> 774;
780 -> 775;
780 -> 774;
781 -> 776;
781 -> 763;
781 -> 774;
782 -> 776;
782 -> 764;
782 -> 774;
783 -> 774;
784 -> 776;
784 -> 767;
784 -> 774;
785 -> 776;
785 -> 768;
785 -> 774;
786 -> 776;
786 -> 769;
786 -> 774;
787 -> 776;
787 -> 770;
787 -> 774;
788 -> 774;
789 -> 777;
789 -> 788;
790 -> 778;
790 -> 788;
791 -> 779;
791 -> 788;
792 -> 780;
792 -> 788;
793 -> 781;
793 -> 788;
794 -> 782;
794 -> 788;
795 -> 783;
795 -> 788;
796 -> 784;
796 -> 788;
797 -> 785;
797 -> 788;
798 -> 786;
798 -> 788;
799 -> 787;
799 -> 788;
800 -> 783;
800 -> 788;
801 -> 800;
801 -> 788;
802 -> 800;
802 -> 788;
803 -> 800;
803 -> 788;
804 -> 800;
804 -> 788;
805 -> 800;
805 -> 788;
806 -> 800;
806 -> 788;
807 -> 800;
807 -> 788;
808 -> 800;
808 -> 788;
809 -> 800;
809 -> 788;
810 -> 800;
810 -> 788;
811 -> 800;
811 -> 788;
812 -> 800;
812 -> 788;
813 -> 800;
813 -> 788;
814 -> 800;
814 -> 788;
815 -> 800;
815 -> 788;
816 -> 792;
816 -> 800;
816 -> 788;
817 -> 795;
817 -> 800;
817 -> 788;
818 -> 783;
818 -> 1;
819 -> 1;
820 -> 574;
820 -> 819;
821 -> 214;
821 -> 819;
822 -> 214;
822 -> 819;
823 -> 214;
823 -> 819;
824 -> 214;
824 -> 819;
825 -> 214;
825 -> 819;
826 -> 214;
826 -> 819;
827 -> 820;
827 -> 819;
828 -> 821;
828 -> 819;
829 -> 822;
829 -> 819;
830 -> 823;
830 -> 819;
831 -> 824;
831 -> 819;
832 -> 825;
832 -> 819;
833 -> 826;
833 -> 819;
834 -> 819;
835 -> 827;
835 -> 834;
836 -> 828;
836 -> 834;
837 -> 829;
837 -> 834;
838 -> 830;
838 -> 834;
839 -> 831;
839 -> 834;
840 -> 832;
840 -> 834;
841 -> 833;
841 -> 834;
842 -> 835;
842 -> 834;
843 -> 835;
843 -> 834;
844 -> 834;
845 -> 836;
845 -> 834;
846 -> 837;
846 -> 834;
847 -> 838;
847 -> 834;
848 -> 839;
848 -> 834;
849 -> 840;
849 -> 834;
850 -> 841;
850 -> 834;
851 -> 834;
852 -> 843;
852 -> 851;
853 -> 844;
853 -> 851;
854 -> 845;
854 -> 851;
855 -> 846;
855 -> 851;
856 -> 847;
856 -> 851;
857 -> 848;
857 -> 851;
858 -> 849;
858 -> 851;
859 -> 843;
859 -> 851;
860 -> 850;
860 -> 851;
861 -> 844;
861 -> 851;
862 -> 844;
862 -> 851;
863 -> 844;
863 -> 851;
864 -> 863;
864 -> 851;
865 -> 863;
865 -> 851;
866 -> 863;
866 -> 851;
867 -> 863;
867 -> 851;
868 -> 863;
868 -> 851;
869 -> 863;
869 -> 851;
870 -> 863;
870 -> 851;
871 -> 863;
871 -> 851;
872 -> 863;
872 -> 851;
873 -> 863;
873 -> 851;
874 -> 863;
874 -> 851;
875 -> 863;
875 -> 851;
876 -> 863;
876 -> 851;
877 -> 863;
877 -> 851;
878 -> 863;
878 -> 851;
879 -> 852;
879 -> 863;
879 -> 851;
880 -> 853;
880 -> 863;
880 -> 851;
881 -> 854;
881 -> 863;
881 -> 851;
882 -> 855;
882 -> 863;
882 -> 851;
883 -> 856;
883 -> 863;
883 -> 851;
884 -> 857;
884 -> 863;
884 -> 851;
885 -> 858;
885 -> 863;
885 -> 851;
886 -> 859;
886 -> 851;
887 -> 886;
887 -> 863;
887 -> 851;
888 -> 860;
888 -> 863;
888 -> 851;
889 -> 861;
889 -> 863;
889 -> 851;
890 -> 862;
890 -> 863;
890 -> 851;
891 -> 844;
891 -> 819;
892 -> 891;
892 -> 1;
893 -> 214;
893 -> 1;
894 -> 1;
895 -> 214;
895 -> 894;
896 -> 892;
896 -> 894;
897 -> 896;
897 -> 879;
897 -> 894;
898 -> 896;
898 -> 880;
898 -> 894;
899 -> 896;
899 -> 881;
899 -> 894;
900 -> 895;
900 -> 894;
901 -> 896;
901 -> 883;
901 -> 894;
902 -> 896;
902 -> 884;
902 -> 894;
903 -> 894;
904 -> 896;
904 -> 887;
904 -> 894;
905 -> 896;
905 -> 888;
905 -> 894;
906 -> 896;
906 -> 889;
906 -> 894;
907 -> 896;
907 -> 890;
907 -> 894;
908 -> 894;
909 -> 897;
909 -> 908;
910 -> 898;
910 -> 908;
911 -> 899;
911 -> 908;
912 -> 900;
912 -> 908;
913 -> 901;
913 -> 908;
914 -> 902;
914 -> 908;
915 -> 903;
915 -> 908;
916 -> 904;
916 -> 908;
917 -> 905;
917 -> 908;
918 -> 906;
918 -> 908;
919 -> 907;
919 -> 908;
920 -> 903;
920 -> 908;
921 -> 920;
921 -> 908;
922 -> 920;
922 -> 908;
923 -> 920;
923 -> 908;
924 -> 920;
924 -> 908;
925 -> 920;
925 -> 908;
926 -> 920;
926 -> 908;
927 -> 920;
927 -> 908;
928 -> 920;
928 -> 908;
929 -> 920;
929 -> 908;
930 -> 920;
930 -> 908;
931 -> 920;
931 -> 908;
932 -> 920;
932 -> 908;
933 -> 920;
933 -> 908;
934 -> 920;
934 -> 908;
935 -> 920;
935 -> 908;
936 -> 912;
936 -> 920;
936 -> 908;
937 -> 915;
937 -> 920;
937 -> 908;
938 -> 903;
938 -> 1;
939 -> 698;
939 -> 214;
939 -> 1;
940 -> 818;
940 -> 214;
940 -> 1;
941 -> 938;
941 -> 214;
941 -> 1;
942 -> 1;
943 -> 573;
943 -> 942;
944 -> 214;
944 -> 942;
945 -> 942;
947 -> 0;
948 -> 0;
949 -> 0;
952 -> 946;
952 -> 951;
953 -> 947;
953 -> 951;
954 -> 948;
954 -> 951;
955 -> 949;
955 -> 951;
956 -> 950;
956 -> 951;
957 -> 951;
958 -> 957;
958 -> 951;
959 -> 957;
959 -> 951;
960 -> 957;
960 -> 951;
961 -> 951;
962 -> 953;
962 -> 961;
962 -> 951;
963 -> 954;
963 -> 0;
963 -> 951;
964 -> 955;
964 -> 0;
964 -> 951;
965 -> 952;
965 -> 957;
965 -> 951;
966 -> 953;
966 -> 957;
966 -> 951;
967 -> 954;
967 -> 957;
967 -> 951;
968 -> 956;
968 -> 957;
968 -> 951;
969 -> 955;
969 -> 957;
969 -> 951;
970 -> 951;
971 -> 945;
971 -> 943;
971 -> 571;
971 -> 942;
972 -> 971;
972 -> 945;
973 -> 972;
973 -> 971;
973 -> 945;
974 -> 945;
975 -> 973;
975 -> 971;
975 -> 974;
975 -> 945;
976 -> 972;
976 -> 971;
976 -> 974;
976 -> 945;
977 -> 970;
977 -> 975;
978 -> 971;
978 -> 977;
978 -> 965;
978 -> 968;
978 -> 966;
978 -> 967;
978 -> 969;
978 -> 0;
978 -> 942;
979 -> 971;
979 -> 945;
980 -> 971;
980 -> 945;
981 -> 945;
982 -> 979;
982 -> 978;
982 -> 981;
983 -> 980;
983 -> 982;
983 -> 981;
984 -> 983;
984 -> 981;
985 -> 0;
985 -> 984;
986 -> 983;
986 -> 981;
987 -> 979;
987 -> 981;
988 -> 980;
988 -> 985;
988 -> 986;
988 -> 987;
988 -> 981;
989 -> 0;
989 -> 988;
990 -> 989;
991 -> 980;
991 -> 990;
992 -> 991;
992 -> 970;
992 -> 990;
993 -> 992;
994 -> 989;
995 -> 0;
995 -> 989;
996 -> 995;
997 -> 971;
997 -> 945;
998 -> 971;
998 -> 945;
999 -> 997;
999 -> 998;
999 -> 945;
1000 -> 971;
1000 -> 999;
1000 -> 995;
1000 -> 942;
1002 -> 1001;
1004 -> 1003;
1006 -> 1005;
1009 -> 1008;
1010 -> 0;
1011 -> 0;
1012 -> 0;
1013 -> 1012;
1015 -> 1010;
1015 -> 1011;
1015 -> 1013;
1015 -> 1014;
1016 -> 1015;
1018 -> 1017;
1020 -> 1019;
1022 -> 1021;
1024 -> 1023;
1025 -> 971;
1025 -> 945;
1026 -> 971;
1026 -> 945;
1027 -> 971;
1027 -> 945;
1028 -> 971;
1028 -> 945;
1029 -> 971;
1029 -> 945;
1030 -> 945;
1031 -> 1028;
1031 -> 1030;
1031 -> 945;
1032 -> 1029;
1032 -> 1030;
1032 -> 945;
1033 -> 1031;
1033 -> 1032;
1033 -> 945;
1034 -> 1026;
1034 -> 945;
1035 -> 1025;
1035 -> 945;
1036 -> 1026;
1036 -> 945;
1037 -> 1027;
1037 -> 945;
1038 -> 1028;
1038 -> 945;
1039 -> 1029;
1039 -> 945;
1040 -> 1034;
1040 -> 945;
1041 -> 945;
1042 -> 1035;
1042 -> 1041;
1043 -> 1036;
1043 -> 1041;
1044 -> 1037;
1044 -> 1041;
1045 -> 1038;
1045 -> 1041;
1046 -> 1039;
1046 -> 1041;
1047 -> 1040;
1047 -> 1041;
1048 -> 1041;
1049 -> 1046;
1049 -> 1048;
1049 -> 1041;
1050 -> 1045;
1050 -> 1048;
1050 -> 1041;
1051 -> 1049;
1051 -> 1050;
1051 -> 1041;
1052 -> 1041;
1053 -> 1042;
1053 -> 1041;
1054 -> 1043;
1054 -> 1041;
1055 -> 1052;
1055 -> 1041;
1056 -> 1047;
1056 -> 1041;
1057 -> 1041;
1058 -> 1053;
1058 -> 1057;
1059 -> 1054;
1059 -> 1057;
1060 -> 1055;
1060 -> 1057;
1061 -> 1056;
1061 -> 1057;
1062 -> 1059;
1062 -> 1057;
1063 -> 1062;
1063 -> 1058;
1063 -> 1000;
1063 -> 1057;
1064 -> 1057;
1065 -> 1063;
1065 -> 1064;
1066 -> 1063;
1066 -> 1064;
1067 -> 1065;
1067 -> 1064;
1068 -> 1065;
1068 -> 1063;
1068 -> 1064;
1069 -> 1064;
1070 -> 1065;
1070 -> 1063;
1070 -> 1064;
1071 -> 1065;
1071 -> 1063;
1071 -> 1064;
1072 -> 1071;
1072 -> 1064;
1073 -> 1064;
1074 -> 1069;
1074 -> 1073;
1074 -> 1057;
1075 -> 1069;
1075 -> 1064;
1076 -> 1069;
1076 -> 1064;
1077 -> 1075;
1077 -> 1064;
1078 -> 1075;
1078 -> 1064;
1079 -> 1075;
1079 -> 1064;
1080 -> 1075;
1080 -> 1064;
1081 -> 1080;
1081 -> 1064;
1082 -> 1080;
1082 -> 1081;
1083 -> 1058;
1083 -> 1062;
1083 -> 1063;
1083 -> 1073;
1083 -> 1057;
1084 -> 1057;
1085 -> 1083;
1085 -> 1084;
1085 -> 1057;
1086 -> 1083;
1086 -> 1085;
1087 -> 1085;
1088 -> 1086;
1088 -> 1087;
1089 -> 1086;
1089 -> 1087;
1090 -> 1088;
1090 -> 1087;
1091 -> 1088;
1091 -> 1086;
1091 -> 1087;
1092 -> 1087;
1093 -> 1088;
1093 -> 1086;
1093 -> 1087;
1094 -> 1088;
1094 -> 1086;
1094 -> 1087;
1095 -> 1094;
1095 -> 1087;
1096 -> 1092;
1096 -> 1087;
1097 -> 1092;
1097 -> 1087;
1098 -> 1096;
1098 -> 1087;
1099 -> 1096;
1099 -> 1087;
1100 -> 1096;
1100 -> 1087;
1101 -> 1096;
1101 -> 1087;
1102 -> 1101;
1102 -> 1087;
1103 -> 1085;
1104 -> 1087;
1104 -> 1103;
1104 -> 1085;
1105 -> 1083;
1105 -> 1057;
1106 -> 1041;
1107 -> 1087;
1107 -> 1106;
1107 -> 1041;
1108 -> 1105;
1108 -> 1041;
1109 -> 1087;
1109 -> 1064;
1110 -> 1087;
1110 -> 1064;
1111 -> 1109;
1111 -> 1064;
1112 -> 1109;
1112 -> 1087;
1112 -> 1064;
1113 -> 1109;
1113 -> 1087;
1113 -> 1064;
1114 -> 1109;
1114 -> 1087;
1114 -> 1064;
1115 -> 1114;
1115 -> 1064;
1116 -> 1092;
1117 -> 1092;
1118 -> 1116;
1118 -> 1092;
1119 -> 1116;
1119 -> 1092;
1120 -> 1116;
1120 -> 1092;
1121 -> 1116;
1121 -> 1092;
1122 -> 1121;
1122 -> 1092;
1123 -> 1087;
1124 -> 1092;
1124 -> 1123;
1124 -> 1087;
1125 -> 1087;
1125 -> 1057;
1126 -> 1092;
1126 -> 1106;
1126 -> 1041;
1127 -> 1125;
1127 -> 1041;
1128 -> 1092;
1129 -> 1092;
1129 -> 1057;
1130 -> 1129;
1130 -> 1041;
1131 -> 971;
1131 -> 945;
1132 -> 971;
1132 -> 945;
1133 -> 971;
1133 -> 945;
1134 -> 971;
1134 -> 945;
1135 -> 1131;
1135 -> 1092;
1135 -> 945;
1136 -> 945;
1137 -> 1134;
1137 -> 1136;
1138 -> 1137;
1138 -> 1092;
1138 -> 0;
1138 -> 1136;
1139 -> 1138;
1139 -> 945;
1140 -> 945;
1141 -> 1131;
1141 -> 1092;
1141 -> 1140;
1141 -> 945;
1142 -> 1139;
1142 -> 1141;
1142 -> 945;
1143 -> 1131;
1143 -> 1092;
1143 -> 1142;
1144 -> 1143;
1144 -> 945;
1145 -> 1135;
1145 -> 945;
1146 -> 1132;
1146 -> 945;
1147 -> 1133;
1147 -> 945;
1148 -> 945;
1149 -> 1144;
1149 -> 1148;
1150 -> 1145;
1150 -> 1148;
1151 -> 1146;
1151 -> 1148;
1152 -> 1147;
1152 -> 1148;
1153 -> 1134;
1153 -> 1148;
1154 -> 1148;
1155 -> 1149;
1155 -> 1154;
1155 -> 1148;
1156 -> 1152;
1156 -> 1148;
1157 -> 1152;
1157 -> 1092;
1157 -> 1148;
1158 -> 1153;
1158 -> 1092;
1158 -> 1148;
1159 -> 1148;
1160 -> 1158;
1160 -> 1159;
1161 -> 1158;
1161 -> 1159;
1162 -> 1159;
1163 -> 1162;
1163 -> 1159;
1164 -> 1162;
1164 -> 1159;
1165 -> 1162;
1165 -> 1159;
1166 -> 1162;
1166 -> 1159;
1167 -> 1160;
1167 -> 1162;
1167 -> 1159;
1168 -> 1158;
1168 -> 1162;
1168 -> 1163;
1168 -> 1164;
1168 -> 1165;
1168 -> 1166;
1168 -> 1167;
1168 -> 1148;
1169 -> 1150;
1169 -> 1148;
1170 -> 1151;
1170 -> 1148;
1171 -> 1152;
1171 -> 1148;
1172 -> 1148;
1173 -> 1169;
1173 -> 1172;
1174 -> 1170;
1174 -> 1172;
1175 -> 1171;
1175 -> 1172;
1176 -> 1168;
1176 -> 1172;
1177 -> 1172;
1178 -> 1174;
1178 -> 1177;
1178 -> 1172;
1179 -> 1175;
1179 -> 1177;
1179 -> 1172;
1180 -> 1178;
1180 -> 1179;
1180 -> 1172;
1181 -> 1173;
1181 -> 1176;
1181 -> 1172;
1182 -> 1174;
1182 -> 1176;
1182 -> 1172;
1183 -> 1175;
1183 -> 1176;
1183 -> 1172;
1184 -> 1148;
1185 -> 1149;
1185 -> 1148;
1186 -> 1148;
1187 -> 1185;
1187 -> 1186;
1188 -> 1168;
1188 -> 1186;
1189 -> 1187;
1189 -> 1186;
1190 -> 1186;
1191 -> 1189;
1191 -> 1190;
1192 -> 1188;
1192 -> 1190;
1193 -> 1192;
1193 -> 1190;
1194 -> 1193;
1194 -> 1191;
1194 -> 1168;
1194 -> 1181;
1194 -> 1182;
1194 -> 1183;
1194 -> 1190;
1195 -> 1190;
1196 -> 1194;
1196 -> 1195;
1197 -> 1194;
1197 -> 1195;
1198 -> 1196;
1198 -> 1194;
1198 -> 1195;
1199 -> 1195;
1200 -> 1198;
1200 -> 1199;
1201 -> 1197;
1201 -> 1199;
1202 -> 1201;
1202 -> 1200;
1202 -> 1194;
1202 -> 1199;
1203 -> 1202;
1203 -> 1199;
1204 -> 1202;
1204 -> 1199;
1205 -> 1203;
1205 -> 1199;
1206 -> 1199;
1207 -> 1205;
1207 -> 1206;
1208 -> 1204;
1208 -> 1206;
1209 -> 1208;
1209 -> 1202;
1209 -> 1206;
1210 -> 1207;
1210 -> 1206;
1211 -> 1209;
1211 -> 1210;
1211 -> 1202;
1211 -> 1206;
1212 -> 0;
1212 -> 1206;
1213 -> 1206;
1214 -> 1207;
1214 -> 1211;
1214 -> 1213;
1214 -> 1206;
1215 -> 1208;
1215 -> 1211;
1215 -> 1206;
1216 -> 1207;
1216 -> 1211;
1216 -> 1206;
1217 -> 1208;
1217 -> 1215;
1217 -> 1214;
1218 -> 1207;
1218 -> 1214;
1219 -> 0;
1219 -> 1217;
1220 -> 1207;
1220 -> 1206;
1221 -> 1219;
1221 -> 1206;
1222 -> 1206;
1223 -> 1220;
1223 -> 1222;
1224 -> 1221;
1224 -> 1222;
1225 -> 1208;
1225 -> 1222;
1226 -> 1223;
1226 -> 1222;
1227 -> 1224;
1227 -> 1222;
1228 -> 1222;
1229 -> 1226;
1229 -> 1228;
1230 -> 1227;
1230 -> 1228;
1231 -> 1230;
1231 -> 1228;
1232 -> 1228;
1233 -> 1229;
1233 -> 1228;
1234 -> 1230;
1234 -> 1228;
1235 -> 1228;
1236 -> 1228;
1237 -> 1233;
1237 -> 1236;
1238 -> 1234;
1238 -> 1236;
1239 -> 1235;
1239 -> 1236;
1240 -> 1237;
1240 -> 1239;
1240 -> 1236;
1241 -> 1238;
1241 -> 1239;
1241 -> 1236;
1242 -> 1235;
1242 -> 1222;
1243 -> 1222;
1244 -> 1222;
1245 -> 1225;
1245 -> 1244;
1246 -> 1245;
1246 -> 1217;
1246 -> 1244;
1247 -> 1246;
1247 -> 1222;
1248 -> 1242;
1248 -> 1222;
1249 -> 1243;
1249 -> 1222;
1250 -> 1248;
1250 -> 1249;
1250 -> 1247;
1250 -> 1240;
1250 -> 1241;
1250 -> 1217;
1250 -> 1222;
1251 -> 1222;
1252 -> 1250;
1252 -> 1251;
1253 -> 1252;
1253 -> 1250;
1253 -> 1251;
1254 -> 1223;
1254 -> 1253;
1255 -> 1253;
1256 -> 1254;
1256 -> 1255;
1257 -> 1256;
1257 -> 1255;
1258 -> 1256;
1258 -> 1255;
1259 -> 1258;
1259 -> 1256;
1259 -> 1255;
1260 -> 1257;
1260 -> 1255;
1261 -> 1259;
1261 -> 1260;
1261 -> 1256;
1261 -> 1255;
1262 -> 1258;
1262 -> 1261;
1262 -> 1255;
1263 -> 1257;
1263 -> 1261;
1263 -> 1255;
1264 -> 1257;
1264 -> 1255;
1265 -> 1255;
1266 -> 1264;
1266 -> 1265;
1267 -> 1258;
1267 -> 1265;
1268 -> 1266;
1268 -> 1262;
1268 -> 1265;
1269 -> 1265;
1270 -> 1269;
1270 -> 1265;
1271 -> 1266;
1271 -> 1262;
1271 -> 1265;
1272 -> 1267;
1272 -> 1271;
1272 -> 1268;
1272 -> 1262;
1272 -> 1265;
1273 -> 1267;
1273 -> 1271;
1273 -> 1268;
1273 -> 1262;
1273 -> 1272;
1274 -> 1267;
1274 -> 1271;
1274 -> 1273;
1275 -> 1273;
1276 -> 1274;
1276 -> 1265;
1277 -> 1265;
1278 -> 1276;
1278 -> 1277;
1278 -> 1265;
1279 -> 1276;
1279 -> 1266;
1279 -> 1265;
1280 -> 1276;
1280 -> 1278;
1281 -> 0;
1281 -> 1278;
1282 -> 1276;
1282 -> 1280;
1282 -> 1278;
1283 -> 1265;
1284 -> 1283;
1284 -> 1255;
1285 -> 1257;
1285 -> 1255;
1286 -> 1258;
1286 -> 1282;
1286 -> 1255;
1287 -> 1262;
1287 -> 1255;
1288 -> 1284;
1288 -> 1255;
1289 -> 1255;
1290 -> 1285;
1290 -> 1289;
1291 -> 1286;
1291 -> 1289;
1292 -> 1287;
1292 -> 1289;
1293 -> 1288;
1293 -> 1289;
1294 -> 1258;
1294 -> 1289;
1295 -> 1293;
1295 -> 1289;
1296 -> 1289;
1297 -> 1293;
1297 -> 1289;
1298 -> 1292;
1298 -> 1297;
1299 -> 0;
1299 -> 1298;
1300 -> 1290;
1300 -> 1289;
1301 -> 1299;
1301 -> 1289;
1302 -> 1289;
1303 -> 1300;
1303 -> 1302;
1304 -> 1301;
1304 -> 1302;
1305 -> 1304;
1305 -> 1302;
1306 -> 1302;
1307 -> 1302;
1307 -> 1289;
1308 -> 1289;
1309 -> 1289;
1310 -> 1294;
1310 -> 1309;
1311 -> 1310;
1311 -> 1282;
1311 -> 1309;
1312 -> 1311;
1312 -> 1289;
1313 -> 1307;
1313 -> 1289;
1314 -> 1308;
1314 -> 1289;
1315 -> 1313;
1315 -> 1314;
1315 -> 1312;
1315 -> 1303;
1315 -> 1304;
1315 -> 1282;
1315 -> 1289;
1316 -> 1289;
1317 -> 1315;
1318 -> 1290;
1318 -> 1315;
1319 -> 1315;
1320 -> 1294;
1320 -> 1319;
1321 -> 1319;
1322 -> 1320;
1322 -> 1315;
1322 -> 1321;
1323 -> 1322;
1323 -> 1319;
1324 -> 1323;
1324 -> 1315;
1325 -> 1290;
1325 -> 1315;
1325 -> 1324;
1326 -> 1291;
1326 -> 1324;
1327 -> 1324;
1328 -> 1324;
1329 -> 1325;
1329 -> 1328;
1330 -> 1326;
1330 -> 1328;
1331 -> 1327;
1331 -> 1328;
1332 -> 1327;
1332 -> 1328;
1333 -> 1328;
1334 -> 1329;
1334 -> 1333;
1334 -> 1328;
1335 -> 1332;
1335 -> 1328;
1336 -> 1328;
1337 -> 1331;
1337 -> 1336;
1337 -> 1328;
1338 -> 1332;
1338 -> 1336;
1338 -> 1328;
1339 -> 1330;
1339 -> 1328;
1340 -> 1330;
1340 -> 1328;
1341 -> 1339;
1341 -> 1328;
1342 -> 1328;
1343 -> 1341;
1343 -> 1342;
1344 -> 1340;
1344 -> 1342;
1345 -> 1342;
1346 -> 1345;
1346 -> 1342;
1347 -> 1344;
1347 -> 1343;
1347 -> 1330;
1348 -> 1342;
1348 -> 1328;
1349 -> 1328;
1350 -> 1340;
1350 -> 1349;
1351 -> 1350;
1351 -> 1347;
1351 -> 1349;
1352 -> 1328;
1353 -> 1341;
1353 -> 1352;
1354 -> 1348;
1354 -> 1352;
1355 -> 1351;
1355 -> 1352;
1356 -> 1340;
1356 -> 1352;
1357 -> 1352;
1358 -> 1356;
1358 -> 1357;
1359 -> 1358;
1359 -> 1347;
1359 -> 1357;
1360 -> 1359;
1360 -> 1352;
1361 -> 1352;
1362 -> 1353;
1362 -> 1360;
1362 -> 1352;
1363 -> 1354;
1363 -> 1352;
1364 -> 1355;
1364 -> 1363;
1365 -> 0;
1365 -> 1364;
1366 -> 1353;
1366 -> 1352;
1367 -> 1365;
1367 -> 1352;
1368 -> 1352;
1369 -> 1366;
1369 -> 1368;
1370 -> 1367;
1370 -> 1368;
1371 -> 1370;
1371 -> 1368;
1372 -> 1368;
1373 -> 1368;
1373 -> 1352;
1374 -> 1352;
1375 -> 1352;
1376 -> 1356;
1376 -> 1375;
1377 -> 1376;
1377 -> 1347;
1377 -> 1375;
1378 -> 1377;
1378 -> 1352;
1379 -> 1373;
1379 -> 1352;
1380 -> 1374;
1380 -> 1352;
1381 -> 1379;
1381 -> 1380;
1381 -> 1378;
1381 -> 1369;
1381 -> 1370;
1381 -> 1347;
1381 -> 1352;
1382 -> 1352;
1383 -> 1381;
1384 -> 1356;
1384 -> 1383;
1385 -> 1384;
1385 -> 1381;
1385 -> 1383;
1386 -> 1385;
1386 -> 1381;
1387 -> 1355;
1387 -> 1381;
1388 -> 1387;
1389 -> 1356;
1389 -> 1388;
1390 -> 1389;
1390 -> 1381;
1390 -> 1388;
1391 -> 1390;
1391 -> 1387;
1392 -> 1386;
1392 -> 1387;
1393 -> 1353;
1393 -> 1387;
1394 -> 1354;
1394 -> 1387;
1395 -> 1387;
1396 -> 1387;
1397 -> 1391;
1397 -> 1396;
1398 -> 1392;
1398 -> 1396;
1399 -> 1393;
1399 -> 1396;
1400 -> 1394;
1400 -> 1396;
1401 -> 1395;
1401 -> 1396;
1402 -> 1398;
1402 -> 1396;
1403 -> 1396;
1404 -> 1402;
1404 -> 1403;
1405 -> 1401;
1405 -> 1403;
1406 -> 1403;
1407 -> 1405;
1407 -> 1403;
1408 -> 1405;
1408 -> 1403;
1409 -> 1405;
1409 -> 1403;
1410 -> 1405;
1410 -> 1403;
1411 -> 1405;
1411 -> 1403;
1412 -> 1403;
1413 -> 1404;
1413 -> 1412;
1413 -> 1403;
1414 -> 1404;
1414 -> 1405;
1414 -> 1403;
1415 -> 1404;
1415 -> 1381;
1415 -> 1405;
1415 -> 1403;
1416 -> 1404;
1416 -> 1381;
1416 -> 1405;
1416 -> 1403;
1417 -> 1406;
1417 -> 1405;
1417 -> 1403;
1418 -> 1401;
1418 -> 1396;
1419 -> 1401;
1419 -> 1396;
1420 -> 1401;
1420 -> 1396;
1421 -> 1401;
1421 -> 1396;
1422 -> 1401;
1422 -> 1396;
1423 -> 1396;
1424 -> 1397;
1424 -> 1423;
1424 -> 1396;
1425 -> 1396;
1426 -> 1399;
1426 -> 1425;
1426 -> 1396;
1427 -> 1397;
1427 -> 1401;
1427 -> 1396;
1428 -> 1399;
1428 -> 1401;
1428 -> 1400;
1428 -> 1396;
1429 -> 1428;
1429 -> 1401;
1429 -> 1396;
1430 -> 1400;
1430 -> 1396;
1431 -> 1399;
1431 -> 1381;
1431 -> 1430;
1432 -> 1399;
1432 -> 1431;
1433 -> 1432;
1433 -> 1431;
1433 -> 1401;
1434 -> 1387;
1435 -> 1356;
1435 -> 1434;
1436 -> 1435;
1436 -> 1431;
1436 -> 1434;
1437 -> 1436;
1437 -> 1387;
1438 -> 1353;
1438 -> 1387;
1439 -> 1387;
1440 -> 1381;
1441 -> 1440;
1441 -> 1437;
1442 -> 1441;
1442 -> 1381;
1443 -> 1373;
1443 -> 1381;
1444 -> 1395;
1444 -> 1381;
1445 -> 1443;
1445 -> 1444;
1445 -> 1442;
1445 -> 1369;
1445 -> 1370;
1445 -> 1416;
1445 -> 1415;
1445 -> 1414;
1445 -> 1417;
1445 -> 1411;
1445 -> 1427;
1445 -> 1429;
1445 -> 1420;
1445 -> 1421;
1445 -> 1422;
1445 -> 1433;
1445 -> 1437;
1445 -> 1428;
1445 -> 1431;
1445 -> 1381;
1446 -> 1381;
1447 -> 1395;
1447 -> 1352;
1448 -> 1330;
1448 -> 1447;
1448 -> 1445;
1448 -> 1328;
1449 -> 1328;
1450 -> 1328;
1450 -> 1448;
1450 -> 1449;
1451 -> 1448;
1451 -> 1328;
1452 -> 1292;
1452 -> 1315;
1453 -> 1290;
1453 -> 1452;
1454 -> 1290;
1454 -> 1450;
1454 -> 1452;
1455 -> 1451;
1455 -> 1452;
1456 -> 1293;
1456 -> 1452;
1457 -> 1452;
1458 -> 1453;
1458 -> 1457;
1459 -> 1454;
1459 -> 1457;
1460 -> 1455;
1460 -> 1457;
1461 -> 1456;
1461 -> 1457;
1462 -> 1294;
1462 -> 1457;
1463 -> 1457;
1464 -> 1459;
1464 -> 1457;
1465 -> 1457;
1466 -> 1459;
1466 -> 1465;
1466 -> 1457;
1467 -> 1457;
1468 -> 1460;
1468 -> 1457;
1469 -> 1468;
1470 -> 1468;
1470 -> 1469;
1471 -> 1470;
1471 -> 1450;
1471 -> 1469;
1472 -> 1471;
1472 -> 1468;
1473 -> 1459;
1473 -> 1457;
1474 -> 1472;
1474 -> 1473;
1474 -> 1450;
1474 -> 1457;
1475 -> 1457;
1476 -> 1474;
1476 -> 1475;
1476 -> 1457;
1477 -> 1474;
1477 -> 1457;
1478 -> 1460;
1478 -> 1457;
1479 -> 1458;
1479 -> 1457;
1480 -> 1461;
1480 -> 1457;
1481 -> 1457;
1482 -> 1457;
1483 -> 1477;
1483 -> 1482;
1484 -> 1478;
1484 -> 1482;
1485 -> 1479;
1485 -> 1482;
1486 -> 1480;
1486 -> 1482;
1487 -> 1481;
1487 -> 1482;
1488 -> 1482;
1489 -> 1487;
1489 -> 1488;
1490 -> 1488;
1491 -> 1489;
1491 -> 1488;
1492 -> 1489;
1492 -> 1488;
1493 -> 1489;
1493 -> 1488;
1494 -> 1489;
1494 -> 1488;
1495 -> 1489;
1495 -> 1488;
1496 -> 1488;
1497 -> 1484;
1497 -> 1496;
1497 -> 1488;
1498 -> 1484;
1498 -> 1474;
1498 -> 1489;
1498 -> 1488;
1499 -> 1484;
1499 -> 1474;
1499 -> 1489;
1499 -> 1488;
1500 -> 1490;
1500 -> 1489;
1500 -> 1488;
1501 -> 1487;
1501 -> 1482;
1502 -> 1487;
1502 -> 1482;
1503 -> 1487;
1503 -> 1482;
1504 -> 1487;
1504 -> 1482;
1505 -> 1487;
1505 -> 1482;
1506 -> 1482;
1507 -> 1483;
1507 -> 1506;
1507 -> 1482;
1508 -> 1482;
1509 -> 1485;
1509 -> 1508;
1509 -> 1482;
1510 -> 1485;
1510 -> 1487;
1510 -> 1486;
1510 -> 1482;
1511 -> 1510;
1511 -> 1487;
1511 -> 1482;
1512 -> 1486;
1512 -> 1482;
1513 -> 1485;
1513 -> 1474;
1513 -> 1512;
1514 -> 1485;
1514 -> 1513;
1515 -> 1485;
1515 -> 1514;
1516 -> 1515;
1516 -> 1514;
1516 -> 1487;
1517 -> 1481;
1517 -> 1452;
1518 -> 1315;
1519 -> 1518;
1519 -> 1514;
1520 -> 1519;
1520 -> 1315;
1521 -> 1307;
1521 -> 1315;
1522 -> 1517;
1522 -> 1315;
1523 -> 1521;
1523 -> 1522;
1523 -> 1520;
1523 -> 1303;
1523 -> 1304;
1523 -> 1499;
1523 -> 1498;
1523 -> 1484;
1523 -> 1500;
1523 -> 1495;
1523 -> 1483;
1523 -> 1511;
1523 -> 1503;
1523 -> 1504;
1523 -> 1505;
1523 -> 1516;
1523 -> 1514;
1523 -> 1510;
1523 -> 1315;
1524 -> 1315;
1525 -> 1523;
1525 -> 1524;
1526 -> 1523;
1526 -> 1524;
1527 -> 1526;
1527 -> 1523;
1527 -> 1525;
1527 -> 1524;
1528 -> 1517;
1528 -> 1289;
1529 -> 1256;
1529 -> 1528;
1529 -> 1527;
1529 -> 1255;
1530 -> 1224;
1530 -> 1365;
1530 -> 1253;
1531 -> 1530;
1532 -> 1529;
1532 -> 1531;
1533 -> 1532;
1533 -> 1529;
1533 -> 1531;
1534 -> 1531;
1535 -> 1533;
1535 -> 1534;
1535 -> 1531;
1536 -> 1535;
1536 -> 1531;
1537 -> 1532;
1537 -> 1529;
1537 -> 1536;
1538 -> 1537;
1538 -> 1530;
1539 -> 1223;
1539 -> 1530;
1540 -> 1224;
1540 -> 0;
1540 -> 1530;
1541 -> 1538;
1541 -> 1540;
1542 -> 1529;
1542 -> 1540;
1543 -> 1540;
1544 -> 1540;
1545 -> 1541;
1545 -> 1544;
1546 -> 1542;
1546 -> 1544;
1547 -> 1543;
1547 -> 1544;
1548 -> 1543;
1548 -> 1544;
1549 -> 1546;
1549 -> 1544;
1550 -> 1544;
1551 -> 1549;
1551 -> 1550;
1552 -> 1548;
1552 -> 1550;
1553 -> 1550;
1554 -> 1552;
1554 -> 1550;
1555 -> 1552;
1555 -> 1550;
1556 -> 1552;
1556 -> 1550;
1557 -> 1552;
1557 -> 1550;
1558 -> 1552;
1558 -> 1550;
1559 -> 1550;
1560 -> 1551;
1560 -> 1559;
1560 -> 1550;
1561 -> 1551;
1561 -> 1538;
1561 -> 1552;
1561 -> 1550;
1562 -> 1551;
1562 -> 1538;
1562 -> 1552;
1562 -> 1550;
1563 -> 1553;
1563 -> 1552;
1563 -> 1550;
1564 -> 1548;
1564 -> 1544;
1565 -> 1548;
1565 -> 1544;
1566 -> 1548;
1566 -> 1544;
1567 -> 1548;
1567 -> 1544;
1568 -> 1548;
1568 -> 1544;
1569 -> 1544;
1570 -> 1545;
1570 -> 1569;
1570 -> 1544;
1571 -> 1545;
1571 -> 1548;
1571 -> 1544;
1572 -> 970;
1572 -> 1544;
1573 -> 1572;
1573 -> 1547;
1573 -> 1544;
1574 -> 1573;
1574 -> 1548;
1574 -> 1544;
1575 -> 1540;
1576 -> 1223;
1576 -> 1538;
1576 -> 1575;
1576 -> 1540;
1577 -> 1538;
1577 -> 1576;
1578 -> 1543;
1578 -> 1576;
1579 -> 1576;
1580 -> 1576;
1581 -> 1577;
1581 -> 1580;
1582 -> 1578;
1582 -> 1580;
1583 -> 1579;
1583 -> 1580;
1584 -> 1582;
1584 -> 1580;
1585 -> 1580;
1586 -> 1584;
1586 -> 1585;
1587 -> 1583;
1587 -> 1585;
1588 -> 1586;
1588 -> 1585;
1589 -> 1585;
1590 -> 1588;
1590 -> 1589;
1591 -> 1587;
1591 -> 1589;
1592 -> 1587;
1592 -> 1589;
1593 -> 1587;
1593 -> 1589;
1594 -> 1587;
1594 -> 1589;
1595 -> 1589;
1596 -> 1590;
1596 -> 1595;
1596 -> 1589;
1597 -> 1590;
1597 -> 1561;
1597 -> 1587;
1597 -> 1589;
1598 -> 1590;
1598 -> 1562;
1598 -> 1587;
1598 -> 1589;
1599 -> 1583;
1599 -> 1580;
1600 -> 1583;
1600 -> 1580;
1601 -> 1580;
1602 -> 1581;
1602 -> 1601;
1602 -> 1580;
1603 -> 1581;
1603 -> 1583;
1603 -> 1580;
1604 -> 1223;
1604 -> 1538;
1604 -> 1253;
1605 -> 1253;
1606 -> 1604;
1606 -> 1605;
1607 -> 1579;
1607 -> 1605;
1608 -> 1607;
1608 -> 1597;
1608 -> 1605;
1609 -> 0;
1609 -> 1605;
1610 -> 1605;
1611 -> 1608;
1611 -> 1610;
1612 -> 1609;
1612 -> 1610;
1613 -> 1606;
1613 -> 1605;
1614 -> 1611;
1614 -> 1613;
1614 -> 1605;
1615 -> 1614;
1615 -> 1605;
1616 -> 1253;
1617 -> 1616;
1617 -> 1613;
1618 -> 1617;
1618 -> 1253;
1619 -> 1242;
1619 -> 1253;
1620 -> 1615;
1620 -> 1253;
1621 -> 1619;
1621 -> 1620;
1621 -> 1618;
1621 -> 1240;
1621 -> 1241;
1621 -> 1598;
1621 -> 1597;
1621 -> 1590;
1621 -> 1587;
1621 -> 1603;
1621 -> 1600;
1621 -> 1613;
1621 -> 1562;
1621 -> 1561;
1621 -> 1551;
1621 -> 1563;
1621 -> 1558;
1621 -> 1571;
1621 -> 1565;
1621 -> 1574;
1621 -> 1567;
1621 -> 1568;
1621 -> 1253;
1622 -> 1253;
1623 -> 1615;
1623 -> 1222;
1624 -> 1202;
1624 -> 1623;
1624 -> 1621;
1624 -> 1199;
1625 -> 1168;
1625 -> 1148;
1626 -> 971;
1626 -> 945;
1627 -> 971;
1627 -> 945;
1628 -> 1626;
1628 -> 1624;
1628 -> 945;
1629 -> 1626;
1629 -> 1624;
1629 -> 945;
1630 -> 1629;
1631 -> 1629;
1632 -> 1630;
1632 -> 1631;
1633 -> 1630;
1633 -> 1631;
1634 -> 1627;
1634 -> 1631;
1635 -> 1632;
1635 -> 1624;
1635 -> 1631;
1636 -> 1631;
1637 -> 1635;
1637 -> 1636;
1638 -> 1634;
1638 -> 1636;
1639 -> 1637;
1639 -> 1624;
1639 -> 1636;
1640 -> 1637;
1640 -> 1624;
1640 -> 1636;
1641 -> 1636;
1642 -> 1640;
1642 -> 1641;
1643 -> 1640;
1643 -> 1641;
1644 -> 1638;
1644 -> 1641;
1645 -> 1642;
1645 -> 1641;
1646 -> 1643;
1646 -> 1641;
1647 -> 1645;
1647 -> 1646;
1647 -> 1639;
1647 -> 1641;
1648 -> 1647;
1648 -> 1641;
1649 -> 1644;
1649 -> 1647;
1649 -> 1648;
1650 -> 0;
1650 -> 1648;
1651 -> 1648;
1652 -> 1644;
1652 -> 1651;
1653 -> 1652;
1653 -> 1649;
1653 -> 1651;
1654 -> 1651;
1655 -> 1652;
1655 -> 1653;
1655 -> 1654;
1656 -> 1655;
1656 -> 1654;
1657 -> 1654;
1658 -> 1656;
1658 -> 1657;
1659 -> 1658;
1659 -> 1655;
1659 -> 1657;
1660 -> 1659;
1661 -> 1660;
1661 -> 1654;
1662 -> 1661;
1662 -> 1654;
1663 -> 1633;
1663 -> 1662;
1663 -> 1631;
1664 -> 1663;
1664 -> 1631;
1665 -> 1628;
1665 -> 1664;
1665 -> 0;
1665 -> 1629;
1666 -> 1628;
1666 -> 1665;
1666 -> 945;
1667 -> 1666;
1667 -> 1154;
1667 -> 1148;
1668 -> 1152;
1668 -> 1666;
1668 -> 1148;
1669 -> 1365;
1669 -> 1206;
1670 -> 1666;
1670 -> 1228;
1671 -> 971;
1671 -> 945;
1672 -> 971;
1672 -> 945;
1673 -> 971;
1673 -> 945;
1674 -> 971;
1674 -> 945;
1675 -> 1674;
1675 -> 945;
1676 -> 1674;
1676 -> 945;
1677 -> 1674;
1677 -> 945;
1678 -> 1674;
1678 -> 945;
1679 -> 1674;
1679 -> 945;
1680 -> 1674;
1680 -> 945;
1681 -> 1671;
1681 -> 1674;
1681 -> 945;
1682 -> 1672;
1682 -> 1674;
1682 -> 945;
1683 -> 1673;
1683 -> 1674;
1683 -> 945;
1684 -> 1674;
1684 -> 945;
1685 -> 945;
1686 -> 1684;
1686 -> 1685;
1686 -> 1675;
1686 -> 1681;
1686 -> 1682;
1686 -> 1678;
1686 -> 1683;
1686 -> 1680;
1686 -> 1666;
1686 -> 945;
1687 -> 1686;
1687 -> 1674;
1687 -> 945;
1688 -> 945;
1689 -> 1688;
1689 -> 1674;
1689 -> 945;
1690 -> 1671;
1690 -> 945;
1691 -> 945;
1692 -> 945;
1693 -> 1690;
1693 -> 1692;
1694 -> 1691;
1694 -> 1692;
1695 -> 1693;
1695 -> 1692;
1696 -> 1692;
1697 -> 1695;
1697 -> 1696;
1698 -> 1694;
1698 -> 1696;
1699 -> 1698;
1699 -> 1696;
1700 -> 1698;
1700 -> 1696;
1701 -> 1698;
1701 -> 1696;
1702 -> 1698;
1702 -> 1696;
1703 -> 1698;
1703 -> 1696;
1704 -> 1696;
1705 -> 1697;
1705 -> 1704;
1705 -> 1696;
1706 -> 1698;
1706 -> 1696;
1707 -> 1706;
1707 -> 1699;
1707 -> 1700;
1707 -> 1701;
1707 -> 1702;
1707 -> 1703;
1707 -> 1696;
1708 -> 1697;
1708 -> 1686;
1708 -> 1687;
1708 -> 1689;
1708 -> 1698;
1708 -> 1696;
1709 -> 1697;
1709 -> 1698;
1709 -> 1696;
1710 -> 1691;
1710 -> 1674;
1710 -> 945;
1711 -> 971;
1711 -> 1686;
1711 -> 1687;
1711 -> 1689;
1711 -> 1710;
1711 -> 1688;
1711 -> 1707;
1711 -> 1708;
1711 -> 1709;
1711 -> 942;
1712 -> 1711;
1712 -> 1154;
1712 -> 1148;
1713 -> 1152;
1713 -> 1711;
1713 -> 1148;
1714 -> 1195;
1715 -> 1365;
1715 -> 1714;
1716 -> 1714;
1717 -> 0;
1717 -> 1711;
1718 -> 1714;
1719 -> 1718;
1720 -> 1717;
1720 -> 1719;
1721 -> 1719;
1722 -> 1719;
1723 -> 1719;
1724 -> 1722;
1724 -> 1723;
1725 -> 1722;
1725 -> 1718;
1726 -> 1718;
1727 -> 1718;
1728 -> 1725;
1728 -> 1718;
1729 -> 1726;
1729 -> 1718;
1730 -> 1718;
1731 -> 1717;
1732 -> 1731;
1732 -> 1717;
1733 -> 1717;
1734 -> 1717;
1735 -> 1717;
1736 -> 1717;
1737 -> 1717;
1738 -> 1717;
1739 -> 1717;
1740 -> 1717;
1741 -> 1717;
1741 -> 1740;
1742 -> 1741;
1742 -> 1717;
1742 -> 1740;
1743 -> 1742;
1743 -> 1717;
1744 -> 1717;
1745 -> 1717;
1746 -> 1717;
1747 -> 1717;
1748 -> 1717;
1749 -> 1717;
1750 -> 1717;
1751 -> 1717;
1752 -> 1717;
1753 -> 1717;
1754 -> 1717;
1755 -> 1717;
1756 -> 1717;
1757 -> 971;
1757 -> 945;
1758 -> 971;
1758 -> 945;
1759 -> 971;
1759 -> 945;
1760 -> 1757;
1760 -> 945;
1761 -> 945;
1762 -> 1758;
1762 -> 945;
1763 -> 945;
1764 -> 945;
1765 -> 1760;
1765 -> 1764;
1766 -> 1761;
1766 -> 1764;
1767 -> 1762;
1767 -> 1764;
1768 -> 1763;
1768 -> 1764;
1769 -> 1759;
1769 -> 1764;
1770 -> 1765;
1770 -> 1764;
1771 -> 1766;
1771 -> 1764;
1772 -> 1767;
1772 -> 1764;
1773 -> 1768;
1773 -> 1764;
1774 -> 1764;
1775 -> 1770;
1775 -> 1774;
1776 -> 1771;
1776 -> 1774;
1777 -> 1772;
1777 -> 1774;
1778 -> 1773;
1778 -> 1774;
1779 -> 1769;
1779 -> 1774;
1780 -> 1779;
1780 -> 1774;
1781 -> 1779;
1781 -> 1774;
1782 -> 1779;
1782 -> 1774;
1783 -> 1779;
1783 -> 1774;
1784 -> 1774;
1785 -> 1775;
1785 -> 1784;
1785 -> 1774;
1786 -> 1774;
1787 -> 1778;
1787 -> 1786;
1787 -> 1774;
1788 -> 1774;
1789 -> 1778;
1789 -> 1788;
1789 -> 1774;
1790 -> 1775;
1790 -> 1779;
1790 -> 1774;
1791 -> 1776;
1791 -> 1779;
1791 -> 1774;
1792 -> 1777;
1792 -> 1779;
1792 -> 1774;
1793 -> 1778;
1793 -> 1779;
1793 -> 1774;
1794 -> 971;
1794 -> 1717;
1794 -> 1790;
1794 -> 1791;
1794 -> 1792;
1794 -> 1793;
1794 -> 942;
1795 -> 1794;
1795 -> 1154;
1795 -> 1148;
1796 -> 1152;
1796 -> 1794;
1796 -> 1148;
1797 -> 1794;
1797 -> 1199;
1798 -> 1794;
1798 -> 1199;
1799 -> 1797;
1799 -> 1794;
1799 -> 1199;
1800 -> 1199;
1801 -> 1799;
1801 -> 1800;
1802 -> 1798;
1802 -> 1800;
1803 -> 1802;
1803 -> 1801;
1803 -> 1794;
1803 -> 1800;
1804 -> 1800;
1805 -> 1717;
1805 -> 1804;
1806 -> 1804;
1807 -> 1804;
1808 -> 1807;
1809 -> 1803;
1809 -> 1808;
1810 -> 1808;
1811 -> 1808;
1812 -> 1808;
1813 -> 1811;
1813 -> 1812;
1814 -> 1811;
1814 -> 1807;
1815 -> 1807;
1816 -> 1807;
1817 -> 1814;
1817 -> 1807;
1818 -> 1815;
1818 -> 1807;
1819 -> 1807;
1820 -> 1199;
1821 -> 1803;
1821 -> 1820;
1822 -> 1803;
1822 -> 1820;
1823 -> 0;
1823 -> 1820;
1824 -> 1820;
1825 -> 1823;
1825 -> 1824;
1826 -> 971;
1826 -> 945;
1827 -> 971;
1827 -> 945;
1828 -> 971;
1828 -> 945;
1829 -> 945;
1830 -> 1827;
1830 -> 1829;
1830 -> 945;
1831 -> 1828;
1831 -> 945;
1832 -> 1828;
1832 -> 1822;
1832 -> 1826;
1832 -> 945;
1833 -> 1827;
1833 -> 945;
1834 -> 945;
1835 -> 945;
1836 -> 1831;
1836 -> 1835;
1837 -> 1832;
1837 -> 1835;
1838 -> 1833;
1838 -> 1835;
1839 -> 1834;
1839 -> 1835;
1840 -> 1836;
1840 -> 1835;
1841 -> 1837;
1841 -> 1835;
1842 -> 1835;
1843 -> 1840;
1843 -> 1842;
1844 -> 1841;
1844 -> 1842;
1845 -> 1839;
1845 -> 1842;
1846 -> 1845;
1846 -> 1842;
1847 -> 1845;
1847 -> 1842;
1848 -> 1845;
1848 -> 1842;
1849 -> 1845;
1849 -> 1842;
1850 -> 1845;
1850 -> 1842;
1851 -> 1842;
1852 -> 1843;
1852 -> 1851;
1852 -> 1842;
1853 -> 1844;
1853 -> 1842;
1854 -> 0;
1854 -> 1842;
1855 -> 1842;
1856 -> 1853;
1856 -> 1855;
1857 -> 1854;
1857 -> 1855;
1858 -> 1844;
1858 -> 1842;
1859 -> 0;
1859 -> 1842;
1860 -> 1842;
1861 -> 1858;
1861 -> 1860;
1862 -> 1859;
1862 -> 1860;
1863 -> 1843;
1863 -> 1845;
1863 -> 1842;
1864 -> 1844;
1864 -> 1845;
1864 -> 1842;
1865 -> 1843;
1865 -> 1822;
1865 -> 1845;
1865 -> 1842;
1866 -> 1839;
1866 -> 1835;
1867 -> 1835;
1868 -> 1838;
1868 -> 1867;
1868 -> 1835;
1869 -> 1838;
1869 -> 1839;
1869 -> 1835;
1870 -> 971;
1870 -> 1834;
1870 -> 1822;
1870 -> 1865;
1870 -> 1864;
1870 -> 1863;
1870 -> 1849;
1870 -> 1850;
1870 -> 1869;
1870 -> 942;
1871 -> 971;
1871 -> 945;
1872 -> 971;
1872 -> 945;
1873 -> 971;
1873 -> 945;
1874 -> 971;
1874 -> 945;
1875 -> 971;
1875 -> 945;
1876 -> 1871;
1876 -> 945;
1877 -> 1872;
1877 -> 945;
1878 -> 1873;
1878 -> 945;
1879 -> 1874;
1879 -> 945;
1880 -> 945;
1881 -> 1876;
1881 -> 1880;
1882 -> 1877;
1882 -> 1880;
1883 -> 1878;
1883 -> 1880;
1884 -> 1879;
1884 -> 1880;
1885 -> 1875;
1885 -> 1880;
1886 -> 1880;
1887 -> 1882;
1887 -> 1886;
1887 -> 1880;
1888 -> 1881;
1888 -> 1880;
1889 -> 1882;
1889 -> 1880;
1890 -> 1883;
1890 -> 1880;
1891 -> 1880;
1892 -> 1883;
1892 -> 1891;
1892 -> 1880;
1893 -> 1892;
1893 -> 1884;
1893 -> 1880;
1894 -> 1880;
1895 -> 1888;
1895 -> 1894;
1896 -> 1889;
1896 -> 1894;
1897 -> 1890;
1897 -> 1894;
1898 -> 1893;
1898 -> 1894;
1899 -> 1885;
1899 -> 1894;
1900 -> 1895;
1900 -> 1870;
1900 -> 1894;
1901 -> 1895;
1901 -> 1900;
1902 -> 1896;
1902 -> 1900;
1903 -> 1897;
1903 -> 1900;
1904 -> 1898;
1904 -> 1900;
1905 -> 1900;
1906 -> 1900;
1907 -> 1901;
1907 -> 1906;
1908 -> 1902;
1908 -> 1906;
1909 -> 1903;
1909 -> 1906;
1910 -> 1904;
1910 -> 1906;
1911 -> 1905;
1911 -> 1906;
1912 -> 1899;
1912 -> 1906;
1913 -> 1907;
1913 -> 1900;
1913 -> 1906;
1914 -> 1913;
1914 -> 1906;
1915 -> 1907;
1915 -> 1900;
1915 -> 1906;
1916 -> 1911;
1916 -> 1906;
1917 -> 1913;
1917 -> 1906;
1918 -> 1906;
1919 -> 1908;
1919 -> 1906;
1920 -> 1906;
1921 -> 1915;
1921 -> 1920;
1922 -> 1916;
1922 -> 1920;
1923 -> 1917;
1923 -> 1920;
1924 -> 1918;
1924 -> 1920;
1925 -> 1919;
1925 -> 1920;
1926 -> 1912;
1926 -> 1920;
1927 -> 1920;
1928 -> 1922;
1928 -> 1927;
1928 -> 1920;
1929 -> 1920;
1930 -> 1929;
1930 -> 1906;
1931 -> 1906;
1932 -> 1930;
1932 -> 1931;
1932 -> 1906;
1934 -> 1933;
1935 -> 1934;
1935 -> 1933;
1936 -> 1933;
1937 -> 1935;
1937 -> 1933;
1938 -> 1937;
1939 -> 1906;
1940 -> 1938;
1940 -> 1939;
1941 -> 1938;
1941 -> 1935;
1941 -> 1939;
1942 -> 1939;
1943 -> 1941;
1943 -> 1942;
1944 -> 1940;
1944 -> 1942;
1945 -> 1944;
1945 -> 1942;
1946 -> 1944;
1946 -> 1942;
1947 -> 1944;
1947 -> 1942;
1948 -> 1944;
1948 -> 1942;
1949 -> 1943;
1949 -> 1944;
1949 -> 1942;
1950 -> 0;
1950 -> 1944;
1950 -> 1942;
1951 -> 1942;
1952 -> 1951;
1952 -> 1944;
1952 -> 1942;
1953 -> 1942;
1954 -> 1953;
1954 -> 1944;
1954 -> 1942;
1955 -> 1941;
1955 -> 1940;
1955 -> 1950;
1955 -> 1952;
1955 -> 1954;
1955 -> 1949;
1955 -> 1951;
1955 -> 1939;
1956 -> 1939;
1957 -> 1955;
1957 -> 1956;
1958 -> 1957;
1958 -> 1955;
1958 -> 0;
1958 -> 1956;
1959 -> 1956;
1960 -> 1957;
1960 -> 1955;
1960 -> 1959;
1960 -> 1956;
1961 -> 1958;
1961 -> 1939;
1962 -> 1955;
1962 -> 1939;
1963 -> 1962;
1963 -> 1906;
1964 -> 1907;
1964 -> 1906;
1965 -> 1907;
1965 -> 1900;
1965 -> 1906;
1966 -> 1906;
1967 -> 1964;
1967 -> 1966;
1968 -> 1965;
1968 -> 1966;
1969 -> 1967;
1969 -> 1966;
1970 -> 0;
1970 -> 1969;
1971 -> 1906;
1972 -> 1963;
1972 -> 1906;
1973 -> 1911;
1973 -> 1906;
1974 -> 1913;
1974 -> 1906;
1975 -> 1906;
1976 -> 1909;
1976 -> 1906;
1977 -> 1970;
1977 -> 1906;
1978 -> 1971;
1978 -> 1906;
1979 -> 1906;
1980 -> 1972;
1980 -> 1979;
1981 -> 1973;
1981 -> 1979;
1982 -> 1974;
1982 -> 1979;
1983 -> 1975;
1983 -> 1979;
1984 -> 1976;
1984 -> 1979;
1985 -> 1977;
1985 -> 1979;
1986 -> 1975;
1986 -> 1979;
1987 -> 1978;
1987 -> 1979;
1988 -> 1912;
1988 -> 1979;
1989 -> 1985;
1989 -> 1979;
1990 -> 1979;
1991 -> 1989;
1991 -> 1990;
1992 -> 1991;
1992 -> 0;
1992 -> 1990;
1993 -> 1980;
1993 -> 1992;
1994 -> 1981;
1994 -> 1992;
1995 -> 1982;
1995 -> 1992;
1996 -> 1983;
1996 -> 1992;
1997 -> 1984;
1997 -> 1992;
1998 -> 1985;
1998 -> 1992;
1999 -> 1986;
1999 -> 1992;
2000 -> 1987;
2000 -> 1992;
2001 -> 1992;
2002 -> 1993;
2002 -> 2001;
2003 -> 1994;
2003 -> 2001;
2004 -> 1995;
2004 -> 2001;
2005 -> 1996;
2005 -> 2001;
2006 -> 1997;
2006 -> 2001;
2007 -> 1998;
2007 -> 2001;
2008 -> 1999;
2008 -> 2001;
2009 -> 2000;
2009 -> 2001;
2010 -> 1988;
2010 -> 2001;
2011 -> 2001;
2012 -> 2003;
2012 -> 2011;
2012 -> 2001;
2013 -> 2002;
2013 -> 2012;
2014 -> 2004;
2014 -> 2012;
2015 -> 2005;
2015 -> 2012;
2016 -> 2006;
2016 -> 2012;
2017 -> 2007;
2017 -> 2012;
2018 -> 2008;
2018 -> 2012;
2019 -> 2009;
2019 -> 2012;
2020 -> 2012;
2021 -> 2013;
2021 -> 2020;
2022 -> 2014;
2022 -> 2020;
2023 -> 2015;
2023 -> 2020;
2024 -> 2016;
2024 -> 2020;
2025 -> 2017;
2025 -> 2020;
2026 -> 2018;
2026 -> 2020;
2027 -> 2019;
2027 -> 2020;
2028 -> 2010;
2028 -> 2020;
2029 -> 2020;
2030 -> 2021;
2030 -> 2029;
2031 -> 2030;
2031 -> 1955;
2031 -> 0;
2031 -> 2029;
2032 -> 2029;
2033 -> 2030;
2033 -> 1955;
2033 -> 2032;
2033 -> 2029;
2034 -> 2031;
2034 -> 2020;
2035 -> 2025;
2035 -> 2020;
2036 -> 2020;
2037 -> 2035;
2037 -> 2036;
2038 -> 2037;
2038 -> 0;
2038 -> 2036;
2039 -> 2037;
2039 -> 0;
2039 -> 2036;
2040 -> 2036;
2041 -> 0;
2041 -> 2036;
2042 -> 2037;
2042 -> 2041;
2042 -> 2036;
2043 -> 0;
2043 -> 2036;
2044 -> 2037;
2044 -> 2043;
2044 -> 2036;
2045 -> 2036;
2046 -> 0;
2046 -> 2036;
2047 -> 2037;
2047 -> 2046;
2047 -> 2036;
2048 -> 2047;
2048 -> 2036;
2049 -> 2036;
2050 -> 2048;
2050 -> 2049;
2051 -> 2049;
2052 -> 2050;
2052 -> 2051;
2052 -> 2049;
2053 -> 2020;
2054 -> 2028;
2054 -> 2020;
2055 -> 2020;
2056 -> 2020;
2057 -> 2021;
2057 -> 2056;
2058 -> 2056;
2059 -> 2057;
2059 -> 2058;
2060 -> 2059;
2060 -> 1955;
2060 -> 2058;
2061 -> 2060;
2061 -> 2056;
2062 -> 2061;
2062 -> 2020;
2063 -> 2054;
2063 -> 2062;
2063 -> 2020;
2064 -> 2063;
2065 -> 2053;
2065 -> 2064;
2065 -> 2063;
2066 -> 2021;
2066 -> 2065;
2067 -> 2022;
2067 -> 2065;
2068 -> 2023;
2068 -> 2065;
2069 -> 2024;
2069 -> 2065;
2070 -> 2025;
2070 -> 2065;
2071 -> 2028;
2071 -> 2065;
2072 -> 2026;
2072 -> 2065;
2073 -> 2027;
2073 -> 2065;
2074 -> 2065;
2075 -> 2066;
2075 -> 2074;
2076 -> 2067;
2076 -> 2074;
2077 -> 2068;
2077 -> 2074;
2078 -> 2069;
2078 -> 2074;
2079 -> 2070;
2079 -> 2074;
2080 -> 2071;
2080 -> 2074;
2081 -> 2072;
2081 -> 2074;
2082 -> 2073;
2082 -> 2074;
2083 -> 2054;
2083 -> 2074;
2084 -> 2065;
2085 -> 2065;
2086 -> 2021;
2086 -> 2085;
2087 -> 2086;
2087 -> 1955;
2087 -> 0;
2087 -> 2085;
2088 -> 2085;
2089 -> 2086;
2089 -> 1955;
2089 -> 2088;
2089 -> 2085;
2090 -> 2087;
2090 -> 2065;
2091 -> 2025;
2091 -> 0;
2091 -> 2063;
2092 -> 2063;
2093 -> 2066;
2093 -> 2074;
2094 -> 2067;
2094 -> 2074;
2095 -> 2068;
2095 -> 2074;
2096 -> 2069;
2096 -> 2074;
2097 -> 2070;
2097 -> 2074;
2098 -> 2071;
2098 -> 2074;
2099 -> 2072;
2099 -> 2074;
2100 -> 2082;
2100 -> 2074;
2101 -> 2063;
2101 -> 2074;
2102 -> 2074;
2103 -> 2093;
2103 -> 2102;
2104 -> 2103;
2104 -> 1955;
2104 -> 0;
2104 -> 2102;
2105 -> 2102;
2106 -> 2103;
2106 -> 1955;
2106 -> 2105;
2106 -> 2102;
2107 -> 2104;
2107 -> 2074;
2108 -> 2074;
2109 -> 2101;
2109 -> 2108;
2110 -> 0;
2110 -> 2108;
2111 -> 2110;
2111 -> 2074;
2112 -> 2097;
2112 -> 2111;
2112 -> 2074;
2113 -> 2074;
2114 -> 2074;
2115 -> 2101;
2115 -> 2114;
2116 -> 2114;
2117 -> 2115;
2117 -> 1969;
2117 -> 2116;
2117 -> 2114;
2118 -> 2117;
2119 -> 2115;
2119 -> 1969;
2119 -> 2117;
2120 -> 2119;
2120 -> 1969;
2121 -> 2119;
2122 -> 2118;
2122 -> 2120;
2122 -> 2121;
2122 -> 1969;
2122 -> 2119;
2123 -> 2115;
2123 -> 2122;
2123 -> 2117;
2124 -> 2118;
2124 -> 2117;
2125 -> 2117;
2126 -> 2115;
2126 -> 2123;
2126 -> 2114;
2127 -> 2126;
2127 -> 2074;
2128 -> 2127;
2128 -> 2094;
2128 -> 2123;
2128 -> 2074;
2129 -> 2128;
2130 -> 2095;
2130 -> 2128;
2131 -> 2097;
2131 -> 2128;
2132 -> 2099;
2132 -> 2128;
2133 -> 2100;
2133 -> 2128;
2134 -> 2128;
2135 -> 2129;
2135 -> 2134;
2136 -> 2130;
2136 -> 2134;
2137 -> 2131;
2137 -> 2134;
2138 -> 2129;
2138 -> 2134;
2139 -> 2132;
2139 -> 2134;
2140 -> 2133;
2140 -> 2134;
2141 -> 2129;
2141 -> 2134;
2142 -> 2098;
2142 -> 2134;
2143 -> 2134;
2144 -> 2134;
2145 -> 2135;
2145 -> 2128;
2145 -> 0;
2145 -> 2134;
2146 -> 2145;
2146 -> 2134;
2147 -> 2146;
2147 -> 2128;
2147 -> 2134;
2148 -> 2142;
2148 -> 2128;
2148 -> 2147;
2148 -> 2134;
2149 -> 2146;
2149 -> 2148;
2150 -> 2136;
2150 -> 2148;
2151 -> 2139;
2151 -> 2148;
2152 -> 2137;
2152 -> 2148;
2153 -> 2144;
2153 -> 2148;
2154 -> 2148;
2155 -> 2149;
2155 -> 2154;
2156 -> 2150;
2156 -> 2154;
2157 -> 2151;
2157 -> 2154;
2158 -> 2152;
2158 -> 2154;
2159 -> 2153;
2159 -> 2154;
2160 -> 2155;
2160 -> 2148;
2160 -> 2154;
2161 -> 2160;
2162 -> 2156;
2162 -> 2161;
2162 -> 2160;
2163 -> 2154;
2164 -> 2154;
2165 -> 2164;
2165 -> 2148;
2166 -> 2165;
2167 -> 2142;
2167 -> 2166;
2168 -> 2167;
2168 -> 2148;
2168 -> 2166;
2169 -> 0;
2169 -> 2166;
2170 -> 2166;
2171 -> 2168;
2171 -> 2170;
2172 -> 2169;
2172 -> 2170;
2173 -> 2171;
2173 -> 2165;
2174 -> 2137;
2174 -> 0;
2174 -> 2173;
2175 -> 2173;
2176 -> 2137;
2176 -> 0;
2176 -> 2174;
2177 -> 2174;
2178 -> 2176;
2179 -> 2178;
2179 -> 2176;
2180 -> 2179;
2181 -> 2180;
2181 -> 2179;
2182 -> 2146;
2182 -> 2179;
2183 -> 2137;
2183 -> 2179;
2184 -> 2138;
2184 -> 2179;
2185 -> 2179;
2186 -> 2183;
2186 -> 2185;
2187 -> 2184;
2187 -> 2185;
2188 -> 2186;
2188 -> 0;
2188 -> 2185;
2189 -> 2185;
2190 -> 2188;
2190 -> 2185;
2191 -> 2187;
2191 -> 2190;
2192 -> 2143;
2192 -> 2179;
2193 -> 2140;
2193 -> 2179;
2194 -> 2141;
2194 -> 2179;
2195 -> 2179;
2196 -> 2182;
2196 -> 2195;
2197 -> 2191;
2197 -> 2195;
2198 -> 2192;
2198 -> 2195;
2199 -> 2193;
2199 -> 2195;
2200 -> 2194;
2200 -> 2195;
2201 -> 2142;
2201 -> 2195;
2202 -> 2201;
2202 -> 2148;
2202 -> 2195;
2203 -> 0;
2203 -> 2195;
2204 -> 2195;
2205 -> 2202;
2205 -> 2204;
2206 -> 2203;
2206 -> 2204;
2207 -> 2196;
2207 -> 2195;
2208 -> 2197;
2208 -> 2195;
2209 -> 2198;
2209 -> 2195;
2210 -> 2199;
2210 -> 2195;
2211 -> 2200;
2211 -> 2195;
2212 -> 2195;
2213 -> 2207;
2213 -> 2212;
2214 -> 2208;
2214 -> 2212;
2215 -> 2209;
2215 -> 2212;
2216 -> 2210;
2216 -> 2212;
2217 -> 2211;
2217 -> 2212;
2218 -> 2201;
2218 -> 2212;
2219 -> 2213;
2219 -> 2212;
2220 -> 2214;
2220 -> 2212;
2221 -> 2215;
2221 -> 2212;
2222 -> 2216;
2222 -> 2212;
2223 -> 2217;
2223 -> 2212;
2224 -> 2212;
2225 -> 2219;
2225 -> 2224;
2226 -> 2220;
2226 -> 2224;
2227 -> 2221;
2227 -> 2224;
2228 -> 2222;
2228 -> 2224;
2229 -> 2223;
2229 -> 2224;
2230 -> 2218;
2230 -> 2148;
2230 -> 2224;
2231 -> 2225;
2231 -> 2224;
2232 -> 2230;
2232 -> 2148;
2232 -> 2224;
2233 -> 2226;
2233 -> 2224;
2234 -> 2227;
2234 -> 2224;
2235 -> 2228;
2235 -> 2224;
2236 -> 2229;
2236 -> 2224;
2237 -> 2224;
2238 -> 2231;
2238 -> 2237;
2239 -> 2232;
2239 -> 2237;
2240 -> 2233;
2240 -> 2237;
2241 -> 2234;
2241 -> 2237;
2242 -> 2235;
2242 -> 2237;
2243 -> 2236;
2243 -> 2237;
2244 -> 2230;
2244 -> 2237;
2245 -> 2244;
2245 -> 2148;
2245 -> 2237;
2246 -> 0;
2246 -> 2237;
2247 -> 2237;
2248 -> 2245;
2248 -> 2247;
2249 -> 2246;
2249 -> 2247;
2250 -> 2238;
2250 -> 2237;
2251 -> 2239;
2251 -> 2237;
2252 -> 2240;
2252 -> 2237;
2253 -> 2241;
2253 -> 2237;
2254 -> 2242;
2254 -> 2237;
2255 -> 2243;
2255 -> 2237;
2256 -> 2237;
2257 -> 2250;
2257 -> 2256;
2258 -> 2251;
2258 -> 2256;
2259 -> 2252;
2259 -> 2256;
2260 -> 2253;
2260 -> 2256;
2261 -> 2254;
2261 -> 2256;
2262 -> 2255;
2262 -> 2256;
2263 -> 2257;
2263 -> 2256;
2264 -> 2258;
2264 -> 2256;
2265 -> 2259;
2265 -> 2256;
2266 -> 2260;
2266 -> 2256;
2267 -> 2258;
2267 -> 2148;
2267 -> 2256;
2268 -> 2261;
2268 -> 2256;
2269 -> 2262;
2269 -> 2256;
2270 -> 2256;
2271 -> 2263;
2271 -> 2270;
2272 -> 2264;
2272 -> 2270;
2273 -> 2265;
2273 -> 2270;
2274 -> 2266;
2274 -> 2270;
2275 -> 2267;
2275 -> 2270;
2276 -> 2268;
2276 -> 2270;
2277 -> 2269;
2277 -> 2270;
2278 -> 2270;
2279 -> 2271;
2279 -> 2278;
2279 -> 2270;
2280 -> 2270;
2281 -> 2272;
2281 -> 2280;
2281 -> 2270;
2282 -> 2272;
2282 -> 2148;
2282 -> 2270;
2283 -> 2272;
2283 -> 2270;
2284 -> 2270;
2285 -> 2271;
2285 -> 2148;
2285 -> 2270;
2286 -> 2285;
2287 -> 2181;
2287 -> 2286;
2287 -> 2179;
2288 -> 2287;
2289 -> 2288;
2289 -> 2287;
2290 -> 2146;
2290 -> 2287;
2291 -> 2137;
2291 -> 0;
2291 -> 2289;
2292 -> 2289;
2293 -> 2137;
2293 -> 0;
2293 -> 2291;
2294 -> 2291;
2295 -> 2137;
2295 -> 0;
2295 -> 2293;
2296 -> 2293;
2297 -> 2137;
2297 -> 0;
2297 -> 2295;
2298 -> 2295;
2299 -> 2146;
2299 -> 2297;
2300 -> 2297;
2301 -> 2299;
2301 -> 2300;
2302 -> 0;
2302 -> 2300;
2303 -> 2301;
2303 -> 2300;
2304 -> 2300;
2305 -> 2300;
2306 -> 2302;
2306 -> 2305;
2307 -> 2303;
2307 -> 2305;
2308 -> 2304;
2308 -> 2305;
2309 -> 2304;
2309 -> 2305;
2310 -> 2306;
2310 -> 2309;
2310 -> 2305;
2311 -> 2307;
2311 -> 2309;
2311 -> 2305;
2312 -> 2308;
2312 -> 2309;
2312 -> 2305;
2313 -> 2304;
2313 -> 2297;
2314 -> 2128;
2315 -> 2313;
2315 -> 2314;
2316 -> 2093;
2316 -> 2314;
2317 -> 2314;
2318 -> 2316;
2318 -> 2317;
2319 -> 2318;
2319 -> 2314;
2320 -> 2319;
2320 -> 2315;
2320 -> 2310;
2320 -> 2314;
2321 -> 2320;
2322 -> 2321;
2322 -> 2320;
2323 -> 2315;
2323 -> 2322;
2324 -> 2322;
2325 -> 2323;
2325 -> 2324;
2326 -> 2316;
2326 -> 2324;
2327 -> 2325;
2327 -> 2310;
2327 -> 2326;
2327 -> 2324;
2328 -> 2326;
2328 -> 1955;
2328 -> 2327;
2328 -> 2324;
2329 -> 2325;
2329 -> 2311;
2329 -> 2324;
2330 -> 2326;
2330 -> 2328;
2330 -> 2329;
2330 -> 2290;
2330 -> 2324;
2331 -> 2325;
2331 -> 2312;
2331 -> 2326;
2331 -> 2324;
2332 -> 2322;
2333 -> 2128;
2333 -> 2330;
2333 -> 2331;
2333 -> 2074;
2334 -> 2086;
2334 -> 2330;
2334 -> 0;
2334 -> 2085;
2335 -> 2334;
2335 -> 2065;
2336 -> 2063;
2336 -> 2335;
2337 -> 2336;
2337 -> 2020;
2338 -> 1992;
2339 -> 1908;
2339 -> 1906;
2340 -> 1907;
2340 -> 1906;
2341 -> 2276;
2341 -> 1906;
2342 -> 2339;
2342 -> 2340;
2342 -> 2341;
2342 -> 2330;
2342 -> 2331;
2342 -> 1906;
2343 -> 1906;
2344 -> 1906;
2345 -> 1911;
2345 -> 2344;
2345 -> 1906;
2346 -> 1963;
2346 -> 1906;
2347 -> 1906;
2348 -> 2346;
2348 -> 2347;
2349 -> 2347;
2350 -> 2348;
2350 -> 2349;
2351 -> 2349;
2352 -> 2350;
2352 -> 2351;
2353 -> 2352;
2353 -> 2342;
2353 -> 2351;
2354 -> 2353;
2354 -> 2347;
2355 -> 2347;
2356 -> 2348;
2356 -> 2355;
2357 -> 2356;
2357 -> 2342;
2357 -> 2355;
2358 -> 2357;
2358 -> 2347;
2359 -> 2358;
2359 -> 2342;
2360 -> 2359;
2361 -> 2343;
2361 -> 1906;
2362 -> 2361;
2363 -> 1963;
2363 -> 2361;
2364 -> 1913;
2364 -> 2361;
2365 -> 2361;
2366 -> 1907;
2366 -> 2361;
2367 -> 1908;
2367 -> 2361;
2368 -> 1910;
2368 -> 2361;
2369 -> 2362;
2369 -> 2361;
2370 -> 1911;
2370 -> 2361;
2371 -> 1970;
2371 -> 2361;
2372 -> 2361;
2373 -> 2363;
2373 -> 2372;
2374 -> 2364;
2374 -> 2372;
2375 -> 2365;
2375 -> 2372;
2376 -> 2366;
2376 -> 2372;
2377 -> 2367;
2377 -> 2372;
2378 -> 2368;
2378 -> 2372;
2379 -> 2369;
2379 -> 2372;
2380 -> 2370;
2380 -> 2372;
2381 -> 2371;
2381 -> 2372;
2382 -> 1912;
2382 -> 2372;
2383 -> 2373;
2383 -> 2372;
2384 -> 2374;
2384 -> 2372;
2385 -> 2375;
2385 -> 2372;
2386 -> 2376;
2386 -> 2372;
2387 -> 2377;
2387 -> 2372;
2388 -> 2378;
2388 -> 2372;
2389 -> 2379;
2389 -> 2372;
2390 -> 2380;
2390 -> 2372;
2391 -> 2381;
2391 -> 2372;
2392 -> 2372;
2393 -> 2383;
2393 -> 2392;
2394 -> 2384;
2394 -> 2392;
2395 -> 2385;
2395 -> 2392;
2396 -> 2386;
2396 -> 2392;
2397 -> 2387;
2397 -> 2392;
2398 -> 2388;
2398 -> 2392;
2399 -> 2389;
2399 -> 2392;
2400 -> 2390;
2400 -> 2392;
2401 -> 2391;
2401 -> 2392;
2402 -> 2382;
2402 -> 2392;
2403 -> 2392;
2404 -> 2396;
2404 -> 2403;
2404 -> 2392;
2405 -> 2392;
2406 -> 2397;
2406 -> 2405;
2406 -> 2392;
2407 -> 2392;
2408 -> 2393;
2408 -> 2407;
2409 -> 2408;
2409 -> 2342;
2409 -> 2407;
2410 -> 2409;
2410 -> 2392;
2411 -> 2392;
2412 -> 2392;
2413 -> 2393;
2413 -> 2412;
2414 -> 2412;
2415 -> 2413;
2415 -> 2414;
2416 -> 2415;
2416 -> 2342;
2416 -> 2414;
2417 -> 2416;
2417 -> 2392;
2418 -> 2417;
2419 -> 2410;
2419 -> 2342;
2419 -> 2418;
2419 -> 2417;
2420 -> 2419;
2421 -> 2420;
2421 -> 2419;
2422 -> 2419;
2423 -> 2421;
2423 -> 2422;
2423 -> 2419;
2424 -> 2421;
2424 -> 2420;
2424 -> 0;
2424 -> 2419;
2425 -> 2420;
2425 -> 0;
2425 -> 2423;
2426 -> 2398;
2426 -> 2423;
2427 -> 2420;
2427 -> 2426;
2428 -> 2397;
2428 -> 2426;
2429 -> 2396;
2429 -> 2426;
2430 -> 2426;
2431 -> 2427;
2431 -> 2430;
2432 -> 2428;
2432 -> 2430;
2433 -> 2429;
2433 -> 2430;
2434 -> 2431;
2434 -> 2420;
2434 -> 2430;
2435 -> 2430;
2436 -> 2434;
2436 -> 2435;
2436 -> 2430;
2437 -> 2420;
2437 -> 2419;
2438 -> 2437;
2438 -> 2434;
2438 -> 0;
2438 -> 2372;
2439 -> 2437;
2439 -> 2372;
2440 -> 2439;
2440 -> 2434;
2440 -> 0;
2440 -> 2361;
2441 -> 1906;
2442 -> 1963;
2442 -> 2441;
2443 -> 2441;
2444 -> 2442;
2444 -> 2443;
2445 -> 0;
2445 -> 2444;
2445 -> 2443;
2446 -> 2444;
2446 -> 2434;
2446 -> 2445;
2446 -> 2443;
2447 -> 2443;
2448 -> 2447;
2448 -> 2444;
2448 -> 2443;
2449 -> 2441;
2450 -> 2441;
2451 -> 2442;
2451 -> 2446;
2451 -> 2450;
2451 -> 2441;
2452 -> 2442;
2452 -> 2451;
2453 -> 2442;
2453 -> 2446;
2453 -> 2452;
2453 -> 2448;
2453 -> 2451;
2454 -> 1906;
2455 -> 1907;
2455 -> 2453;
2455 -> 1906;
2456 -> 1906;
2457 -> 2455;
2457 -> 2456;
2458 -> 1912;
2458 -> 2456;
2459 -> 2439;
2459 -> 1906;
2460 -> 1906;
2461 -> 2457;
2461 -> 2460;
2462 -> 2459;
2462 -> 2460;
2463 -> 2462;
2463 -> 2460;
2464 -> 2462;
2464 -> 2460;
2465 -> 2464;
2465 -> 2460;
2466 -> 2465;
2466 -> 2460;
2467 -> 2461;
2467 -> 2466;
2468 -> 2466;
2469 -> 2467;
2469 -> 2468;
2470 -> 2466;
2470 -> 2468;
2471 -> 2469;
2471 -> 2467;
2471 -> 2468;
2472 -> 2469;
2472 -> 2470;
2472 -> 2468;
2473 -> 2468;
2474 -> 2473;
2474 -> 2470;
2474 -> 2468;
2475 -> 2468;
2476 -> 2475;
2476 -> 2470;
2476 -> 2468;
2477 -> 1880;
2478 -> 2466;
2478 -> 2477;
2479 -> 2478;
2479 -> 2472;
2479 -> 2467;
2479 -> 2477;
2480 -> 2479;
2480 -> 1880;
2481 -> 2480;
2482 -> 2481;
2482 -> 2480;
2483 -> 2482;
2484 -> 2466;
2484 -> 2483;
2485 -> 2484;
2485 -> 2472;
2485 -> 2483;
2486 -> 2485;
2486 -> 2482;
2487 -> 1885;
2487 -> 2482;
2488 -> 1881;
2488 -> 2482;
2489 -> 1882;
2489 -> 2482;
2490 -> 2482;
2491 -> 2486;
2491 -> 2490;
2492 -> 2486;
2492 -> 2490;
2493 -> 2486;
2493 -> 2490;
2494 -> 2486;
2494 -> 2490;
2495 -> 2486;
2495 -> 2490;
2496 -> 2491;
2496 -> 2490;
2497 -> 2492;
2497 -> 2490;
2498 -> 2493;
2498 -> 2490;
2499 -> 2494;
2499 -> 2490;
2500 -> 2490;
2501 -> 2496;
2501 -> 2500;
2502 -> 2497;
2502 -> 2500;
2503 -> 2498;
2503 -> 2500;
2504 -> 2499;
2504 -> 2500;
2505 -> 2495;
2505 -> 2500;
2506 -> 2502;
2506 -> 2486;
2506 -> 2500;
2507 -> 2490;
2508 -> 2466;
2508 -> 2480;
2509 -> 2508;
2509 -> 945;
2510 -> 1872;
2510 -> 945;
2511 -> 1871;
2511 -> 945;
2512 -> 1873;
2512 -> 945;
2513 -> 945;
2514 -> 2509;
2514 -> 2513;
2515 -> 2510;
2515 -> 2513;
2516 -> 2511;
2516 -> 2513;
2517 -> 2512;
2517 -> 2513;
2518 -> 1875;
2518 -> 2513;
2519 -> 2513;
2520 -> 2514;
2520 -> 2519;
2521 -> 2520;
2521 -> 2474;
2521 -> 2519;
2522 -> 2521;
2522 -> 0;
2522 -> 2519;
2523 -> 2522;
2523 -> 2513;
2524 -> 2514;
2524 -> 2513;
2525 -> 945;
2526 -> 2524;
2526 -> 2525;
2527 -> 2526;
2527 -> 2472;
2527 -> 2525;
2528 -> 971;
2528 -> 2527;
2528 -> 2486;
2528 -> 2467;
2528 -> 942;
2529 -> 971;
2529 -> 945;
2530 -> 945;
2531 -> 2529;
2531 -> 2528;
2531 -> 2530;
2531 -> 945;
2532 -> 2531;
2532 -> 942;
2533 -> 944;
2533 -> 942;
2534 -> 942;
2535 -> 2532;
2535 -> 2534;
2536 -> 2533;
2536 -> 2534;
2537 -> 2535;
2537 -> 2534;
2538 -> 2536;
2538 -> 2534;
2539 -> 2534;
2540 -> 2537;
2540 -> 2539;
2541 -> 2538;
2541 -> 2539;
2542 -> 2540;
2542 -> 2539;
2543 -> 2541;
2543 -> 2539;
2544 -> 2539;
2545 -> 2539;
2546 -> 2542;
2546 -> 2545;
2547 -> 2543;
2547 -> 2545;
2548 -> 2544;
2548 -> 2545;
2549 -> 2545;
2550 -> 2547;
2550 -> 2549;
2550 -> 2545;
2551 -> 2547;
2551 -> 2545;
2552 -> 2551;
2552 -> 214;
2552 -> 939;
2552 -> 940;
2552 -> 941;
2552 -> 669;
2552 -> 670;
2552 -> 679;
2552 -> 671;
2552 -> 696;
2552 -> 673;
2552 -> 697;
2552 -> 676;
2552 -> 689;
2552 -> 677;
2552 -> 678;
2552 -> 674;
2552 -> 693;
2552 -> 694;
2552 -> 695;
2552 -> 789;
2552 -> 790;
2552 -> 799;
2552 -> 791;
2552 -> 816;
2552 -> 793;
2552 -> 817;
2552 -> 796;
2552 -> 809;
2552 -> 797;
2552 -> 798;
2552 -> 794;
2552 -> 813;
2552 -> 814;
2552 -> 815;
2552 -> 909;
2552 -> 910;
2552 -> 919;
2552 -> 911;
2552 -> 936;
2552 -> 913;
2552 -> 937;
2552 -> 916;
2552 -> 929;
2552 -> 917;
2552 -> 918;
2552 -> 914;
2552 -> 933;
2552 -> 934;
2552 -> 935;
2552 -> 893;
2552 -> 653;
2552 -> 599;
2552 -> 773;
2552 -> 723;
2552 -> 843;
2552 -> 2545;
2553 -> 2545;
2554 -> 2551;
2554 -> 2553;
2554 -> 214;
2554 -> 939;
2554 -> 940;
2554 -> 941;
2554 -> 669;
2554 -> 670;
2554 -> 679;
2554 -> 671;
2554 -> 696;
2554 -> 673;
2554 -> 697;
2554 -> 676;
2554 -> 689;
2554 -> 677;
2554 -> 678;
2554 -> 674;
2554 -> 693;
2554 -> 694;
2554 -> 695;
2554 -> 789;
2554 -> 790;
2554 -> 799;
2554 -> 791;
2554 -> 816;
2554 -> 793;
2554 -> 817;
2554 -> 796;
2554 -> 809;
2554 -> 797;
2554 -> 798;
2554 -> 794;
2554 -> 813;
2554 -> 814;
2554 -> 815;
2554 -> 909;
2554 -> 910;
2554 -> 919;
2554 -> 911;
2554 -> 936;
2554 -> 913;
2554 -> 937;
2554 -> 916;
2554 -> 929;
2554 -> 917;
2554 -> 918;
2554 -> 914;
2554 -> 933;
2554 -> 934;
2554 -> 935;
2554 -> 893;
2554 -> 653;
2554 -> 599;
2554 -> 773;
2554 -> 723;
2554 -> 843;
2554 -> 2545;
2555 -> 2554;
2555 -> 2553;
2556 -> 2555;
2556 -> 2554;
2556 -> 2553;
2557 -> 2547;
2557 -> 2545;
2558 -> 2557;
2558 -> 2556;
2558 -> 2545;
2559 -> 2545;
2560 -> 2557;
2560 -> 2559;
2560 -> 2556;
2560 -> 2545;
2561 -> 2560;
2561 -> 2559;
2562 -> 2561;
2562 -> 2560;
2562 -> 2559;
2563 -> 2546;
2563 -> 2545;
2564 -> 2548;
2564 -> 2556;
2564 -> 2562;
2564 -> 2545;
2565 -> 2563;
2565 -> 2564;
2565 -> 2545;
2566 -> 2545;
2567 -> 2565;
2567 -> 2566;
2568 -> 2565;
2568 -> 2566;
2569 -> 2565;
2569 -> 2566;
2570 -> 2565;
2570 -> 2566;
2571 -> 2565;
2571 -> 2566;
2572 -> 2571;
2572 -> 2566;
2573 -> 2571;
2573 -> 2566;
2574 -> 2571;
2574 -> 2566;
2575 -> 2571;
2575 -> 2566;
2576 -> 2571;
2576 -> 2566;
2577 -> 2571;
2577 -> 2566;
2578 -> 2571;
2578 -> 2566;
2579 -> 2571;
2579 -> 2566;
2580 -> 2571;
2580 -> 2566;
2581 -> 2571;
2581 -> 2566;
2582 -> 2571;
2582 -> 2566;
2583 -> 2567;
2583 -> 2565;
2583 -> 2571;
2583 -> 2566;
2584 -> 2567;
2584 -> 2565;
2584 -> 2571;
2584 -> 2566;
2585 -> 2567;
2585 -> 2565;
2585 -> 2571;
2585 -> 2566;
2586 -> 2567;
2586 -> 2565;
2586 -> 2571;
2586 -> 2566;
2587 -> 2569;
2587 -> 2566;
2588 -> 2587;
2589 -> 2588;
2589 -> 2571;
2589 -> 2566;
2590 -> 2570;
2590 -> 2566;
2591 -> 2590;
2592 -> 2591;
2592 -> 2571;
2592 -> 2566;
2593 -> 2566;
2594 -> 2566;
2595 -> 2567;
2595 -> 2565;
2595 -> 2594;
2595 -> 2566;
2596 -> 2567;
2596 -> 2565;
2596 -> 2566;
2597 -> 0;
2597 -> 2566;
2598 -> 2567;
2598 -> 2595;
2599 -> 2595;
2600 -> 2598;
2600 -> 2599;
2600 -> 2595;
2601 -> 2598;
2601 -> 2596;
2601 -> 2571;
2601 -> 2600;
2602 -> 2567;
2602 -> 2596;
2602 -> 2571;
2602 -> 2600;
2603 -> 2568;
2603 -> 2571;
2603 -> 2566;
2604 -> 2571;
2604 -> 2603;
2604 -> 2566;
2605 -> 2571;
2605 -> 2586;
2605 -> 2596;
2605 -> 2604;
2606 -> 2605;
2607 -> 2606;
2607 -> 2571;
2607 -> 2605;
2608 -> 2604;
2609 -> 2598;
2609 -> 2608;
2609 -> 2604;
2610 -> 2598;
2610 -> 2606;
2610 -> 2571;
2610 -> 2609;
2611 -> 2604;
2612 -> 2571;
2612 -> 2610;
2612 -> 2611;
2612 -> 2604;
2613 -> 2571;
2613 -> 2610;
2613 -> 2606;
2613 -> 2611;
2613 -> 2604;
2614 -> 2571;
2614 -> 2586;
2614 -> 2606;
2614 -> 2566;
2615 -> 2614;
2615 -> 2571;
2615 -> 2566;
2616 -> 2565;
2616 -> 2614;
2616 -> 2602;
2616 -> 2584;
2616 -> 2585;
2616 -> 2607;
2616 -> 2610;
2616 -> 2615;
2616 -> 2578;
2616 -> 2601;
2616 -> 2603;
2616 -> 2589;
2616 -> 2592;
2616 -> 2582;
2616 -> 2571;
2616 -> 2586;
2616 -> 2545;
2617 -> 2567;
2617 -> 2616;
2617 -> 2571;
2617 -> 2566;
2618 -> 2571;
2618 -> 2616;
2618 -> 2611;
2618 -> 2604;
2619 -> 2547;
2619 -> 2545;
2620 -> 2619;
2620 -> 2562;
2620 -> 2545;
2621 -> 2620;
2622 -> 2621;
2622 -> 2616;
2622 -> 2562;
2622 -> 2620;
2623 -> 2622;
2623 -> 2621;
2624 -> 2622;
2624 -> 2621;
2625 -> 2623;
2625 -> 2621;
2626 -> 2621;
2627 -> 2625;
2627 -> 2626;
2627 -> 2621;
2628 -> 2625;
2628 -> 2622;
2628 -> 2621;
2629 -> 2624;
2629 -> 2622;
2629 -> 2628;
2629 -> 2621;
2630 -> 2624;
2630 -> 2629;
2630 -> 2625;
2630 -> 2621;
2631 -> 2624;
2631 -> 2629;
2631 -> 2625;
2631 -> 2621;
2632 -> 2624;
2632 -> 2629;
2632 -> 2621;
2633 -> 2624;
2633 -> 2629;
2633 -> 2625;
2633 -> 2632;
2634 -> 2621;
2635 -> 2624;
2635 -> 2629;
2635 -> 2634;
2635 -> 2621;
2636 -> 2635;
2637 -> 2621;
2638 -> 2624;
2638 -> 2629;
2638 -> 2637;
2638 -> 2621;
2639 -> 2621;
2640 -> 2625;
2640 -> 2629;
2640 -> 2639;
2640 -> 2621;
2641 -> 2624;
2641 -> 2629;
2641 -> 2625;
2641 -> 2621;
2642 -> 2621;
2643 -> 2624;
2643 -> 2629;
2643 -> 2642;
2643 -> 2621;
2644 -> 2643;
2645 -> 2643;
2646 -> 2624;
2646 -> 2645;
2647 -> 2645;
2648 -> 2646;
2648 -> 2629;
2648 -> 2647;
2648 -> 2645;
2649 -> 2646;
2649 -> 2629;
2649 -> 2648;
2650 -> 2648;
2651 -> 2649;
2651 -> 2646;
2651 -> 2648;
2652 -> 2646;
2652 -> 2629;
2652 -> 2651;
2652 -> 2645;
2653 -> 2652;
2653 -> 2643;
2654 -> 2643;
2655 -> 2625;
2655 -> 2654;
2656 -> 2654;
2657 -> 2655;
2657 -> 2629;
2657 -> 2651;
2657 -> 2656;
2657 -> 2654;
2658 -> 2655;
2658 -> 2629;
2658 -> 2651;
2658 -> 2657;
2658 -> 2654;
2659 -> 2658;
2659 -> 2643;
2660 -> 2624;
2660 -> 2629;
2660 -> 2625;
2660 -> 2643;
2661 -> 2653;
2661 -> 2660;
2662 -> 2659;
2662 -> 2660;
2663 -> 2661;
2663 -> 2662;
2663 -> 2629;
2663 -> 2651;
2663 -> 2657;
2663 -> 2649;
2663 -> 2650;
2663 -> 2660;
2664 -> 2624;
2664 -> 2663;
2664 -> 2625;
2664 -> 2621;
2665 -> 2621;
2666 -> 2622;
2666 -> 2665;
2666 -> 2663;
2666 -> 2620;
2667 -> 2620;
2668 -> 2666;
2668 -> 2667;
2668 -> 2620;
2669 -> 2666;
2669 -> 2668;
2670 -> 2669;
2671 -> 2669;
2672 -> 2669;
2673 -> 2669;
2674 -> 2669;
2674 -> 2673;
2675 -> 2669;
2676 -> 2675;
2677 -> 2669;
2678 -> 2669;
2679 -> 2669;
2680 -> 2669;
2681 -> 2669;
2682 -> 2545;
2683 -> 2616;
2683 -> 2669;
2683 -> 2682;
2683 -> 2545;
2684 -> 2545;
2685 -> 2547;
2685 -> 2545;
2686 -> 2546;
2686 -> 2545;
2687 -> 2545;
2688 -> 2685;
2688 -> 2687;
2689 -> 2686;
2689 -> 2687;
2690 -> 2687;
2691 -> 2687;
2692 -> 2689;
2692 -> 2687;
2693 -> 2692;
2693 -> 2669;
2693 -> 2687;
2694 -> 2669;
2694 -> 2687;
2695 -> 2693;
2695 -> 2687;
2696 -> 2690;
2696 -> 2695;
2697 -> 2696;
2697 -> 2687;
2698 -> 2696;
2698 -> 2687;
2699 -> 2698;
2699 -> 2687;
2700 -> 2688;
2700 -> 2687;
2701 -> 2700;
2701 -> 2669;
2701 -> 2687;
2702 -> 2687;
2703 -> 2700;
2703 -> 2702;
2703 -> 2669;
2703 -> 2687;
2704 -> 2688;
2704 -> 2687;
2705 -> 2704;
2705 -> 2703;
2705 -> 2687;
2706 -> 2687;
2707 -> 2704;
2707 -> 2706;
2707 -> 2703;
2707 -> 2687;
2708 -> 2688;
2708 -> 2687;
2709 -> 2687;
2710 -> 2708;
2710 -> 2709;
2712 -> 2711;
2713 -> 2711;
2714 -> 2713;
2714 -> 2709;
2715 -> 2709;
2716 -> 2710;
2716 -> 2709;
2717 -> 2716;
2717 -> 2707;
2717 -> 2709;
2718 -> 2717;
2719 -> 2718;
2720 -> 2687;
2721 -> 2720;
2721 -> 2687;
2722 -> 2687;
2723 -> 2687;
2724 -> 2720;
2724 -> 2723;
2724 -> 2721;
2724 -> 2687;
2725 -> 2687;
2726 -> 2688;
2726 -> 2687;
2727 -> 2726;
2727 -> 2707;
2727 -> 2687;
2728 -> 2727;
2729 -> 2699;
2729 -> 2727;
2730 -> 2727;
2731 -> 2728;
2731 -> 2730;
2732 -> 2729;
2732 -> 2730;
2733 -> 2730;
2734 -> 2733;
2734 -> 2732;
2734 -> 2730;
2735 -> 2730;
2736 -> 2731;
2736 -> 2735;
2737 -> 2735;
2738 -> 2735;
2739 -> 2737;
2739 -> 2738;
2739 -> 2735;
2740 -> 2735;
2741 -> 2736;
2741 -> 2707;
2741 -> 2740;
2741 -> 2735;
2742 -> 2736;
2742 -> 2707;
2742 -> 2741;
2743 -> 2737;
2743 -> 2742;
2743 -> 2739;
2743 -> 2741;
2744 -> 2741;
2745 -> 2737;
2745 -> 2744;
2745 -> 2743;
2745 -> 2741;
2746 -> 2736;
2746 -> 2707;
2746 -> 2741;
2747 -> 2737;
2747 -> 2746;
2747 -> 2745;
2747 -> 2741;
2748 -> 2735;
2749 -> 2736;
2749 -> 2707;
2749 -> 2748;
2749 -> 2735;
2750 -> 2749;
2751 -> 2750;
2752 -> 2737;
2752 -> 2751;
2752 -> 2747;
2752 -> 2750;
2753 -> 2736;
2753 -> 2707;
2753 -> 2750;
2754 -> 2737;
2754 -> 2753;
2754 -> 2752;
2754 -> 2750;
2755 -> 2749;
2756 -> 2737;
2756 -> 2755;
2756 -> 2754;
2756 -> 2749;
2757 -> 2736;
2757 -> 2707;
2757 -> 2735;
2758 -> 2735;
2759 -> 2737;
2759 -> 2758;
2759 -> 2756;
2759 -> 2735;
2760 -> 2735;
2761 -> 2736;
2761 -> 2707;
2761 -> 2760;
2761 -> 2735;
2762 -> 2761;
2763 -> 2737;
2763 -> 2762;
2763 -> 2759;
2763 -> 2761;
2764 -> 2761;
2765 -> 2764;
2765 -> 2761;
2766 -> 2761;
2767 -> 2765;
2767 -> 2761;
2768 -> 2767;
2769 -> 2737;
2769 -> 2768;
2769 -> 2763;
2769 -> 2767;
2770 -> 2765;
2770 -> 2767;
2771 -> 2737;
2771 -> 2770;
2771 -> 2769;
2771 -> 2767;
2772 -> 2767;
2773 -> 2737;
2773 -> 2772;
2773 -> 2771;
2773 -> 2767;
2774 -> 2767;
2775 -> 2774;
2776 -> 2737;
2776 -> 2775;
2776 -> 2773;
2776 -> 2774;
2777 -> 2761;
2778 -> 2737;
2778 -> 2777;
2778 -> 2776;
2778 -> 2761;
2779 -> 2735;
2780 -> 2736;
2780 -> 2767;
2780 -> 2779;
2780 -> 2735;
2781 -> 2736;
2781 -> 2767;
2781 -> 2735;
2782 -> 2735;
2783 -> 2736;
2783 -> 2767;
2783 -> 2782;
2783 -> 2735;
2784 -> 2735;
2785 -> 2736;
2785 -> 2767;
2785 -> 2784;
2785 -> 2735;
2786 -> 2735;
2787 -> 2736;
2787 -> 2767;
2787 -> 2786;
2787 -> 2735;
2788 -> 2737;
2788 -> 2778;
2788 -> 2735;
2789 -> 2788;
2789 -> 2730;
2790 -> 2734;
2790 -> 2789;
2790 -> 2730;
2791 -> 2725;
2791 -> 2790;
2791 -> 2727;
2792 -> 2699;
2792 -> 2767;
2793 -> 2792;
2793 -> 2767;
2794 -> 2767;
2795 -> 2794;
2795 -> 2793;
2795 -> 2767;
2796 -> 2767;
2797 -> 2767;
2798 -> 2796;
2798 -> 2797;
2798 -> 2767;
2799 -> 2767;
2800 -> 2767;
2800 -> 2799;
2801 -> 2796;
2801 -> 2800;
2801 -> 2798;
2801 -> 2799;
2802 -> 2799;
2803 -> 2796;
2803 -> 2802;
2803 -> 2801;
2803 -> 2799;
2804 -> 2767;
2804 -> 2799;
2805 -> 2796;
2805 -> 2804;
2805 -> 2803;
2805 -> 2799;
2806 -> 2767;
2807 -> 2806;
2808 -> 2807;
2809 -> 2796;
2809 -> 2808;
2809 -> 2805;
2809 -> 2807;
2810 -> 2767;
2810 -> 2807;
2811 -> 2796;
2811 -> 2810;
2811 -> 2809;
2811 -> 2807;
2812 -> 2806;
2813 -> 2796;
2813 -> 2812;
2813 -> 2811;
2813 -> 2806;
2814 -> 2767;
2815 -> 2767;
2816 -> 2796;
2816 -> 2815;
2816 -> 2813;
2816 -> 2767;
2817 -> 2767;
2818 -> 2796;
2818 -> 2817;
2818 -> 2816;
2818 -> 2767;
2819 -> 2796;
2819 -> 2768;
2819 -> 2818;
2819 -> 2767;
2820 -> 2767;
2821 -> 2796;
2821 -> 2820;
2821 -> 2819;
2821 -> 2767;
2822 -> 2796;
2822 -> 2772;
2822 -> 2821;
2822 -> 2767;
2823 -> 2796;
2823 -> 2775;
2823 -> 2822;
2823 -> 2774;
2824 -> 2767;
2825 -> 2796;
2825 -> 2824;
2825 -> 2823;
2825 -> 2767;
2826 -> 2767;
2827 -> 2767;
2828 -> 2767;
2829 -> 2767;
2830 -> 2767;
2831 -> 2796;
2831 -> 2825;
2831 -> 2767;
2832 -> 2831;
2832 -> 2767;
2833 -> 2795;
2833 -> 2832;
2833 -> 2767;
2834 -> 2720;
2834 -> 2687;
2835 -> 2725;
2835 -> 2687;
2836 -> 2687;
2837 -> 2834;
2837 -> 2836;
2838 -> 2835;
2838 -> 2836;
2839 -> 2838;
2839 -> 2791;
2839 -> 2836;
2840 -> 2836;
2841 -> 2840;
2841 -> 2839;
2841 -> 2836;
2842 -> 2838;
2842 -> 2840;
2842 -> 2791;
2842 -> 2841;
2843 -> 2837;
2843 -> 2842;
2843 -> 2724;
2843 -> 2841;
2844 -> 2841;
2845 -> 2844;
2846 -> 2837;
2846 -> 2845;
2846 -> 2843;
2846 -> 2844;
2847 -> 2837;
2847 -> 2846;
2847 -> 2841;
2848 -> 2687;
2849 -> 2687;
2850 -> 2720;
2850 -> 2849;
2850 -> 2847;
2850 -> 2687;
2851 -> 2687;
2852 -> 2689;
2852 -> 2767;
2852 -> 2687;
2853 -> 2687;
2854 -> 2852;
2854 -> 2687;
2855 -> 2852;
2855 -> 2854;
2856 -> 2855;
2856 -> 2854;
2857 -> 2856;
2857 -> 2854;
2858 -> 2854;
2859 -> 2854;
2860 -> 2697;
2860 -> 2854;
2861 -> 2720;
2861 -> 2860;
2862 -> 2699;
2862 -> 2860;
2863 -> 2860;
2864 -> 2861;
2864 -> 2863;
2865 -> 2862;
2865 -> 2863;
2866 -> 2863;
2867 -> 2866;
2867 -> 2865;
2867 -> 2863;
2868 -> 2864;
2868 -> 2866;
2868 -> 2867;
2868 -> 2850;
2868 -> 2863;
2869 -> 2860;
2870 -> 2860;
2871 -> 2720;
2871 -> 2870;
2871 -> 2868;
2871 -> 2860;
2872 -> 2855;
2872 -> 2856;
2872 -> 2860;
2873 -> 2720;
2873 -> 2872;
2873 -> 2871;
2873 -> 2860;
2874 -> 2855;
2874 -> 2872;
2874 -> 2860;
2875 -> 2874;
2875 -> 2872;
2875 -> 2860;
2876 -> 2720;
2876 -> 2875;
2877 -> 2699;
2877 -> 2875;
2878 -> 2875;
2879 -> 2876;
2879 -> 2878;
2880 -> 2877;
2880 -> 2878;
2881 -> 2878;
2882 -> 2881;
2882 -> 2880;
2882 -> 2878;
2883 -> 2879;
2883 -> 2881;
2883 -> 2882;
2883 -> 2873;
2883 -> 2878;
2884 -> 2875;
2885 -> 2875;
2886 -> 2720;
2886 -> 2885;
2886 -> 2883;
2886 -> 2875;
2887 -> 2875;
2888 -> 2720;
2888 -> 2887;
2888 -> 2886;
2888 -> 2875;
2889 -> 2855;
2889 -> 2854;
2890 -> 2854;
2891 -> 2701;
2891 -> 2854;
2892 -> 2705;
2892 -> 2854;
2893 -> 2854;
2894 -> 2889;
2894 -> 2893;
2895 -> 2890;
2895 -> 2893;
2896 -> 2891;
2896 -> 2893;
2897 -> 2892;
2897 -> 2893;
2898 -> 2890;
2898 -> 2893;
2899 -> 2898;
2899 -> 2893;
2900 -> 2898;
2900 -> 2893;
2901 -> 2898;
2901 -> 2893;
2902 -> 2898;
2902 -> 2893;
2903 -> 2898;
2903 -> 2893;
2904 -> 2898;
2904 -> 2893;
2905 -> 2898;
2905 -> 2893;
2906 -> 2898;
2906 -> 2893;
2907 -> 2898;
2907 -> 2893;
2908 -> 2894;
2908 -> 2887;
2908 -> 2898;
2908 -> 2893;
2909 -> 2894;
2909 -> 2887;
2909 -> 2898;
2909 -> 2893;
2910 -> 2894;
2910 -> 2887;
2910 -> 2898;
2910 -> 2893;
2911 -> 2894;
2911 -> 2887;
2911 -> 2898;
2911 -> 2893;
2912 -> 2893;
2913 -> 2894;
2913 -> 2887;
2913 -> 2893;
2914 -> 2898;
2915 -> 2898;
2915 -> 2913;
2915 -> 2914;
2916 -> 2898;
2916 -> 2913;
2916 -> 2911;
2916 -> 2914;
2917 -> 2890;
2917 -> 2854;
2918 -> 2688;
2918 -> 2854;
2919 -> 2890;
2919 -> 2854;
2920 -> 2918;
2920 -> 2919;
2920 -> 2911;
2920 -> 2913;
2920 -> 2909;
2920 -> 2910;
2920 -> 2898;
2920 -> 2895;
2920 -> 2896;
2920 -> 2897;
2920 -> 2854;
2921 -> 2854;
2922 -> 2921;
2923 -> 2920;
2923 -> 2922;
2923 -> 2921;
2924 -> 2920;
2924 -> 2921;
2925 -> 2920;
2925 -> 2921;
2926 -> 2920;
2926 -> 2921;
2927 -> 2920;
2927 -> 2926;
2928 -> 2921;
2929 -> 2920;
2929 -> 2928;
2929 -> 2921;
2930 -> 2921;
2931 -> 2920;
2931 -> 2930;
2931 -> 2921;
2932 -> 2921;
2933 -> 2920;
2933 -> 2932;
2933 -> 2921;
2934 -> 2920;
2934 -> 2921;
2935 -> 2920;
2936 -> 2920;
2936 -> 2921;
2937 -> 2854;
2938 -> 2920;
2938 -> 2937;
2938 -> 2854;
2939 -> 2688;
2939 -> 2920;
2939 -> 2938;
2940 -> 2890;
2940 -> 2854;
2941 -> 2699;
2941 -> 2854;
2942 -> 2854;
2943 -> 2940;
2943 -> 2942;
2944 -> 2941;
2944 -> 2942;
2945 -> 2942;
2946 -> 2945;
2946 -> 2944;
2946 -> 2942;
2947 -> 2942;
2948 -> 2942;
2949 -> 2947;
2949 -> 2948;
2949 -> 2942;
2950 -> 2942;
2951 -> 2943;
2951 -> 2920;
2951 -> 2950;
2951 -> 2942;
2952 -> 2943;
2952 -> 2920;
2952 -> 2951;
2953 -> 2947;
2953 -> 2952;
2953 -> 2949;
2953 -> 2951;
2954 -> 2951;
2955 -> 2947;
2955 -> 2954;
2955 -> 2953;
2955 -> 2951;
2956 -> 2943;
2956 -> 2920;
2956 -> 2951;
2957 -> 2947;
2957 -> 2956;
2957 -> 2955;
2957 -> 2951;
2958 -> 2942;
2959 -> 2943;
2959 -> 2920;
2959 -> 2958;
2959 -> 2942;
2960 -> 2959;
2961 -> 2960;
2962 -> 2947;
2962 -> 2961;
2962 -> 2957;
2962 -> 2960;
2963 -> 2943;
2963 -> 2920;
2963 -> 2960;
2964 -> 2947;
2964 -> 2963;
2964 -> 2962;
2964 -> 2960;
2965 -> 2959;
2966 -> 2947;
2966 -> 2965;
2966 -> 2964;
2966 -> 2959;
2967 -> 2943;
2967 -> 2920;
2967 -> 2942;
2968 -> 2942;
2969 -> 2947;
2969 -> 2968;
2969 -> 2966;
2969 -> 2942;
2970 -> 2943;
2970 -> 2920;
2970 -> 2942;
2971 -> 2970;
2972 -> 2947;
2972 -> 2971;
2972 -> 2969;
2972 -> 2970;
2973 -> 2970;
2974 -> 2947;
2974 -> 2973;
2974 -> 2972;
2974 -> 2970;
2975 -> 2970;
2976 -> 2947;
2976 -> 2975;
2976 -> 2974;
2976 -> 2970;
2977 -> 2970;
2978 -> 2947;
2978 -> 2977;
2978 -> 2976;
2978 -> 2970;
2979 -> 2970;
2980 -> 2979;
2981 -> 2947;
2981 -> 2980;
2981 -> 2978;
2981 -> 2979;
2982 -> 2970;
2983 -> 2947;
2983 -> 2982;
2983 -> 2981;
2983 -> 2970;
2984 -> 2942;
2985 -> 2943;
2985 -> 2970;
2985 -> 2984;
2985 -> 2942;
2986 -> 2985;
2987 -> 2947;
2987 -> 2986;
2987 -> 2983;
2987 -> 2985;
2988 -> 2985;
2989 -> 2947;
2989 -> 2988;
2989 -> 2987;
2989 -> 2985;
2990 -> 2985;
2991 -> 2947;
2991 -> 2990;
2991 -> 2989;
2991 -> 2985;
2992 -> 2985;
2993 -> 2947;
2993 -> 2992;
2993 -> 2991;
2993 -> 2985;
2994 -> 2985;
2995 -> 2947;
2995 -> 2994;
2995 -> 2993;
2995 -> 2985;
2996 -> 2943;
2996 -> 2970;
2996 -> 2942;
2997 -> 2942;
2998 -> 2943;
2998 -> 2970;
2998 -> 2997;
2998 -> 2942;
2999 -> 2942;
3000 -> 2943;
3000 -> 2970;
3000 -> 2999;
3000 -> 2942;
3001 -> 2942;
3002 -> 2943;
3002 -> 2970;
3002 -> 3001;
3002 -> 2942;
3003 -> 2947;
3003 -> 2995;
3003 -> 2942;
3004 -> 3003;
3004 -> 2942;
3005 -> 2946;
3005 -> 3004;
3005 -> 2942;
3006 -> 2720;
3006 -> 3005;
3006 -> 2888;
3006 -> 2854;
3007 -> 2939;
3007 -> 2854;
3008 -> 2699;
3008 -> 2854;
3009 -> 2854;
3010 -> 3007;
3010 -> 3009;
3011 -> 3008;
3011 -> 3009;
3012 -> 3009;
3013 -> 3012;
3013 -> 3011;
3013 -> 3009;
3014 -> 3009;
3015 -> 3009;
3016 -> 3014;
3016 -> 3015;
3016 -> 3009;
3017 -> 3009;
3018 -> 3010;
3018 -> 2970;
3018 -> 3017;
3018 -> 3009;
3019 -> 3010;
3019 -> 2970;
3019 -> 3018;
3020 -> 3014;
3020 -> 3019;
3020 -> 3016;
3020 -> 3018;
3021 -> 3018;
3022 -> 3014;
3022 -> 3021;
3022 -> 3020;
3022 -> 3018;
3023 -> 3010;
3023 -> 2970;
3023 -> 3018;
3024 -> 3014;
3024 -> 3023;
3024 -> 3022;
3024 -> 3018;
3025 -> 3009;
3026 -> 3010;
3026 -> 2970;
3026 -> 3025;
3026 -> 3009;
3027 -> 3026;
3028 -> 3027;
3029 -> 3014;
3029 -> 3028;
3029 -> 3024;
3029 -> 3027;
3030 -> 3010;
3030 -> 2970;
3030 -> 3027;
3031 -> 3014;
3031 -> 3030;
3031 -> 3029;
3031 -> 3027;
3032 -> 3026;
3033 -> 3014;
3033 -> 3032;
3033 -> 3031;
3033 -> 3026;
3034 -> 3010;
3034 -> 2970;
3034 -> 3009;
3035 -> 3009;
3036 -> 3014;
3036 -> 3035;
3036 -> 3033;
3036 -> 3009;
3037 -> 3010;
3037 -> 2970;
3037 -> 3009;
3038 -> 3037;
3039 -> 3014;
3039 -> 3038;
3039 -> 3036;
3039 -> 3037;
3040 -> 3037;
3041 -> 3014;
3041 -> 3040;
3041 -> 3039;
3041 -> 3037;
3042 -> 3037;
3043 -> 3014;
3043 -> 3042;
3043 -> 3041;
3043 -> 3037;
3044 -> 3037;
3045 -> 3014;
3045 -> 3044;
3045 -> 3043;
3045 -> 3037;
3046 -> 3037;
3047 -> 3046;
3048 -> 3014;
3048 -> 3047;
3048 -> 3045;
3048 -> 3046;
3049 -> 3037;
3050 -> 3014;
3050 -> 3049;
3050 -> 3048;
3050 -> 3037;
3051 -> 3009;
3052 -> 3010;
3052 -> 3037;
3052 -> 3051;
3052 -> 3009;
3053 -> 3010;
3053 -> 3037;
3053 -> 3009;
3054 -> 3009;
3055 -> 3010;
3055 -> 3037;
3055 -> 3054;
3055 -> 3009;
3056 -> 3009;
3057 -> 3010;
3057 -> 3037;
3057 -> 3056;
3057 -> 3009;
3058 -> 3009;
3059 -> 3010;
3059 -> 3037;
3059 -> 3058;
3059 -> 3009;
3060 -> 3014;
3060 -> 3050;
3060 -> 3009;
3061 -> 3060;
3061 -> 3009;
3062 -> 3013;
3062 -> 3061;
3062 -> 3009;
3063 -> 2851;
3063 -> 3062;
3063 -> 2854;
3064 -> 3037;
3065 -> 3037;
3066 -> 3065;
3067 -> 2720;
3067 -> 3066;
3067 -> 3006;
3067 -> 3065;
3068 -> 2720;
3068 -> 3037;
3069 -> 2699;
3069 -> 3037;
3070 -> 3037;
3071 -> 3068;
3071 -> 3070;
3072 -> 3069;
3072 -> 3070;
3073 -> 3070;
3074 -> 3073;
3074 -> 3072;
3074 -> 3070;
3075 -> 3037;
3076 -> 3037;
3077 -> 2720;
3077 -> 3037;
3078 -> 2699;
3078 -> 3037;
3079 -> 3037;
3080 -> 3077;
3080 -> 3079;
3081 -> 3078;
3081 -> 3079;
3082 -> 3079;
3083 -> 3082;
3083 -> 3081;
3083 -> 3079;
3084 -> 3037;
3085 -> 3037;
3086 -> 3037;
3087 -> 3037;
3088 -> 3037;
3089 -> 3037;
3090 -> 3037;
3091 -> 3037;
3092 -> 3037;
3093 -> 3037;
3094 -> 3037;
3095 -> 3037;
3096 -> 3037;
3097 -> 3037;
3098 -> 3037;
3099 -> 3037;
3100 -> 3037;
3101 -> 3037;
3102 -> 3037;
3103 -> 3037;
3103 -> 3102;
3104 -> 3103;
3105 -> 3037;
3105 -> 3104;
3106 -> 3037;
3106 -> 3104;
3107 -> 3037;
3108 -> 3037;
3108 -> 3104;
3108 -> 3107;
3109 -> 3037;
3110 -> 3037;
3110 -> 3104;
3110 -> 3109;
3111 -> 3037;
3112 -> 3037;
3112 -> 3104;
3112 -> 3111;
3113 -> 3037;
3113 -> 3104;
3114 -> 3104;
3115 -> 3037;
3115 -> 3104;
3116 -> 2699;
3116 -> 3037;
3117 -> 3116;
3117 -> 3037;
3118 -> 3037;
3119 -> 3118;
3119 -> 3117;
3119 -> 3037;
3120 -> 3037;
3121 -> 3037;
3122 -> 3120;
3122 -> 3121;
3122 -> 3037;
3123 -> 3037;
3124 -> 3037;
3124 -> 3104;
3124 -> 3123;
3125 -> 3037;
3125 -> 3104;
3125 -> 3124;
3126 -> 3120;
3126 -> 3125;
3126 -> 3122;
3126 -> 3124;
3127 -> 3124;
3128 -> 3120;
3128 -> 3127;
3128 -> 3126;
3128 -> 3124;
3129 -> 3037;
3129 -> 3104;
3129 -> 3124;
3130 -> 3120;
3130 -> 3129;
3130 -> 3128;
3130 -> 3124;
3131 -> 3037;
3132 -> 3037;
3132 -> 3104;
3132 -> 3131;
3133 -> 3132;
3134 -> 3133;
3135 -> 3120;
3135 -> 3134;
3135 -> 3130;
3135 -> 3133;
3136 -> 3037;
3136 -> 3104;
3136 -> 3133;
3137 -> 3120;
3137 -> 3136;
3137 -> 3135;
3137 -> 3133;
3138 -> 3132;
3139 -> 3120;
3139 -> 3138;
3139 -> 3137;
3139 -> 3132;
3140 -> 3037;
3140 -> 3104;
3141 -> 3037;
3142 -> 3120;
3142 -> 3141;
3142 -> 3139;
3142 -> 3037;
3143 -> 3104;
3144 -> 3120;
3144 -> 3143;
3144 -> 3142;
3144 -> 3104;
3145 -> 3104;
3146 -> 3120;
3146 -> 3145;
3146 -> 3144;
3146 -> 3104;
3147 -> 3104;
3148 -> 3120;
3148 -> 3147;
3148 -> 3146;
3148 -> 3104;
3149 -> 3104;
3150 -> 3120;
3150 -> 3149;
3150 -> 3148;
3150 -> 3104;
3151 -> 3104;
3152 -> 3151;
3153 -> 3120;
3153 -> 3152;
3153 -> 3150;
3153 -> 3151;
3154 -> 3104;
3155 -> 3120;
3155 -> 3154;
3155 -> 3153;
3155 -> 3104;
3156 -> 3037;
3157 -> 3037;
3157 -> 3104;
3157 -> 3156;
3158 -> 3157;
3159 -> 3120;
3159 -> 3158;
3159 -> 3155;
3159 -> 3157;
3160 -> 3157;
3161 -> 3120;
3161 -> 3160;
3161 -> 3159;
3161 -> 3157;
3162 -> 3157;
3163 -> 3120;
3163 -> 3162;
3163 -> 3161;
3163 -> 3157;
3164 -> 3157;
3165 -> 3120;
3165 -> 3164;
3165 -> 3163;
3165 -> 3157;
3166 -> 3157;
3167 -> 3120;
3167 -> 3166;
3167 -> 3165;
3167 -> 3157;
3168 -> 3037;
3168 -> 3104;
3169 -> 3037;
3170 -> 3037;
3170 -> 3104;
3170 -> 3169;
3171 -> 3037;
3172 -> 3037;
3172 -> 3104;
3172 -> 3171;
3173 -> 3037;
3174 -> 3037;
3174 -> 3104;
3174 -> 3173;
3175 -> 3120;
3175 -> 3167;
3175 -> 3037;
3176 -> 3175;
3176 -> 3037;
3177 -> 3119;
3177 -> 3176;
3177 -> 3037;
3178 -> 2720;
3178 -> 3177;
3178 -> 3067;
3178 -> 3037;
3179 -> 2699;
3179 -> 3037;
3180 -> 3179;
3180 -> 3037;
3181 -> 3118;
3181 -> 3180;
3181 -> 3037;
3182 -> 3104;
3182 -> 3124;
3183 -> 3120;
3183 -> 3182;
3183 -> 3122;
3183 -> 3124;
3184 -> 3120;
3184 -> 3127;
3184 -> 3183;
3184 -> 3124;
3185 -> 3104;
3185 -> 3124;
3186 -> 3120;
3186 -> 3185;
3186 -> 3184;
3186 -> 3124;
3187 -> 3120;
3187 -> 3134;
3187 -> 3186;
3187 -> 3133;
3188 -> 3104;
3188 -> 3133;
3189 -> 3120;
3189 -> 3188;
3189 -> 3187;
3189 -> 3133;
3190 -> 3120;
3190 -> 3138;
3190 -> 3189;
3190 -> 3132;
3191 -> 3120;
3191 -> 3141;
3191 -> 3190;
3191 -> 3037;
3192 -> 3120;
3192 -> 3143;
3192 -> 3191;
3192 -> 3104;
3193 -> 3120;
3193 -> 3145;
3193 -> 3192;
3193 -> 3104;
3194 -> 3120;
3194 -> 3147;
3194 -> 3193;
3194 -> 3104;
3195 -> 3120;
3195 -> 3149;
3195 -> 3194;
3195 -> 3104;
3196 -> 3120;
3196 -> 3152;
3196 -> 3195;
3196 -> 3151;
3197 -> 3120;
3197 -> 3154;
3197 -> 3196;
3197 -> 3104;
3198 -> 3120;
3198 -> 3197;
3198 -> 3037;
3199 -> 3198;
3199 -> 3037;
3200 -> 3181;
3200 -> 3199;
3200 -> 3037;
3201 -> 2851;
3201 -> 3200;
3201 -> 3063;
3201 -> 3037;
3202 -> 3104;
3203 -> 3104;
3204 -> 3203;
3205 -> 2720;
3205 -> 3104;
3206 -> 2699;
3206 -> 3104;
3207 -> 3104;
3208 -> 3205;
3208 -> 3207;
3209 -> 3206;
3209 -> 3207;
3210 -> 3207;
3211 -> 3210;
3211 -> 3209;
3211 -> 3207;
3212 -> 3104;
3213 -> 3104;
3214 -> 2720;
3214 -> 3104;
3215 -> 2699;
3215 -> 3104;
3216 -> 3104;
3217 -> 3214;
3217 -> 3216;
3218 -> 3215;
3218 -> 3216;
3219 -> 3216;
3220 -> 3219;
3220 -> 3218;
3220 -> 3216;
3221 -> 3104;
3222 -> 3104;
3223 -> 3104;
3224 -> 3104;
3225 -> 3104;
3226 -> 3104;
3227 -> 3104;
3228 -> 3104;
3229 -> 3104;
3230 -> 3104;
3231 -> 3104;
3232 -> 3104;
3233 -> 3104;
3234 -> 3104;
3235 -> 3104;
3236 -> 3104;
3237 -> 3104;
3238 -> 3237;
3239 -> 3237;
3240 -> 3237;
3241 -> 3237;
3242 -> 3237;
3243 -> 3237;
3244 -> 3237;
3245 -> 3237;
3246 -> 3237;
3247 -> 2699;
3247 -> 3104;
3248 -> 3247;
3248 -> 3104;
3249 -> 3104;
3250 -> 3249;
3250 -> 3248;
3250 -> 3104;
3251 -> 3104;
3252 -> 3104;
3253 -> 3251;
3253 -> 3252;
3253 -> 3104;
3254 -> 3104;
3255 -> 3104;
3255 -> 3237;
3255 -> 3254;
3256 -> 3104;
3256 -> 3237;
3256 -> 3255;
3257 -> 3251;
3257 -> 3256;
3257 -> 3253;
3257 -> 3255;
3258 -> 3255;
3259 -> 3251;
3259 -> 3258;
3259 -> 3257;
3259 -> 3255;
3260 -> 3104;
3260 -> 3237;
3260 -> 3255;
3261 -> 3251;
3261 -> 3260;
3261 -> 3259;
3261 -> 3255;
3262 -> 3104;
3263 -> 3104;
3263 -> 3237;
3263 -> 3262;
3264 -> 3263;
3265 -> 3264;
3266 -> 3251;
3266 -> 3265;
3266 -> 3261;
3266 -> 3264;
3267 -> 3104;
3267 -> 3237;
3267 -> 3264;
3268 -> 3251;
3268 -> 3267;
3268 -> 3266;
3268 -> 3264;
3269 -> 3263;
3270 -> 3251;
3270 -> 3269;
3270 -> 3268;
3270 -> 3263;
3271 -> 3104;
3271 -> 3237;
3272 -> 3104;
3273 -> 3251;
3273 -> 3272;
3273 -> 3270;
3273 -> 3104;
3274 -> 3237;
3275 -> 3251;
3275 -> 3274;
3275 -> 3273;
3275 -> 3237;
3276 -> 3237;
3277 -> 3251;
3277 -> 3276;
3277 -> 3275;
3277 -> 3237;
3278 -> 3237;
3279 -> 3251;
3279 -> 3278;
3279 -> 3277;
3279 -> 3237;
3280 -> 3237;
3281 -> 3251;
3281 -> 3280;
3281 -> 3279;
3281 -> 3237;
3282 -> 3237;
3283 -> 3282;
3284 -> 3251;
3284 -> 3283;
3284 -> 3281;
3284 -> 3282;
3285 -> 3237;
3286 -> 3251;
3286 -> 3285;
3286 -> 3284;
3286 -> 3237;
3287 -> 3104;
3288 -> 3104;
3288 -> 3237;
3288 -> 3287;
3289 -> 3288;
3290 -> 3251;
3290 -> 3289;
3290 -> 3286;
3290 -> 3288;
3291 -> 3288;
3292 -> 3251;
3292 -> 3291;
3292 -> 3290;
3292 -> 3288;
3293 -> 3288;
3294 -> 3251;
3294 -> 3293;
3294 -> 3292;
3294 -> 3288;
3295 -> 3288;
3296 -> 3251;
3296 -> 3295;
3296 -> 3294;
3296 -> 3288;
3297 -> 3288;
3298 -> 3251;
3298 -> 3297;
3298 -> 3296;
3298 -> 3288;
3299 -> 3104;
3299 -> 3237;
3300 -> 3104;
3301 -> 3104;
3301 -> 3237;
3301 -> 3300;
3302 -> 3104;
3303 -> 3104;
3303 -> 3237;
3303 -> 3302;
3304 -> 3104;
3305 -> 3104;
3305 -> 3237;
3305 -> 3304;
3306 -> 3251;
3306 -> 3298;
3306 -> 3104;
3307 -> 3306;
3307 -> 3104;
3308 -> 3250;
3308 -> 3307;
3308 -> 3104;
3309 -> 2720;
3309 -> 3308;
3309 -> 3178;
3309 -> 3104;
3310 -> 2699;
3310 -> 3104;
3311 -> 3310;
3311 -> 3104;
3312 -> 3249;
3312 -> 3311;
3312 -> 3104;
3313 -> 3237;
3313 -> 3255;
3314 -> 3251;
3314 -> 3313;
3314 -> 3253;
3314 -> 3255;
3315 -> 3251;
3315 -> 3258;
3315 -> 3314;
3315 -> 3255;
3316 -> 3237;
3316 -> 3255;
3317 -> 3251;
3317 -> 3316;
3317 -> 3315;
3317 -> 3255;
3318 -> 3251;
3318 -> 3265;
3318 -> 3317;
3318 -> 3264;
3319 -> 3237;
3319 -> 3264;
3320 -> 3251;
3320 -> 3319;
3320 -> 3318;
3320 -> 3264;
3321 -> 3251;
3321 -> 3269;
3321 -> 3320;
3321 -> 3263;
3322 -> 3251;
3322 -> 3272;
3322 -> 3321;
3322 -> 3104;
3323 -> 3251;
3323 -> 3274;
3323 -> 3322;
3323 -> 3237;
3324 -> 3251;
3324 -> 3276;
3324 -> 3323;
3324 -> 3237;
3325 -> 3251;
3325 -> 3278;
3325 -> 3324;
3325 -> 3237;
3326 -> 3251;
3326 -> 3280;
3326 -> 3325;
3326 -> 3237;
3327 -> 3251;
3327 -> 3283;
3327 -> 3326;
3327 -> 3282;
3328 -> 3251;
3328 -> 3285;
3328 -> 3327;
3328 -> 3237;
3329 -> 3251;
3329 -> 3328;
3329 -> 3104;
3330 -> 3329;
3330 -> 3104;
3331 -> 3312;
3331 -> 3330;
3331 -> 3104;
3332 -> 2851;
3332 -> 3331;
3332 -> 3201;
3332 -> 3104;
3333 -> 2687;
3334 -> 3104;
3334 -> 3333;
3334 -> 2687;
3335 -> 2720;
3335 -> 3309;
3335 -> 3334;
3336 -> 2687;
3337 -> 2720;
3337 -> 3336;
3337 -> 3335;
3337 -> 2687;
3338 -> 2725;
3338 -> 2687;
3339 -> 2851;
3339 -> 2687;
3343 -> 3341;
3343 -> 3340;
3344 -> 3342;
3344 -> 3340;
3345 -> 3340;
3346 -> 0;
3346 -> 2687;
3347 -> 2687;
3348 -> 2687;
3349 -> 3338;
3349 -> 3348;
3350 -> 3339;
3350 -> 3348;
3351 -> 3346;
3351 -> 3348;
3352 -> 3347;
3352 -> 3348;
3353 -> 3347;
3353 -> 3348;
3354 -> 3348;
3355 -> 3352;
3355 -> 3354;
3355 -> 3348;
3356 -> 3355;
3356 -> 3348;
3357 -> 0;
3359 -> 3357;
3359 -> 3358;
3360 -> 3358;
3362 -> 3361;
3364 -> 3363;
3366 -> 3365;
3367 -> 3360;
3368 -> 3360;
3368 -> 3358;
3369 -> 3359;
3369 -> 3360;
3369 -> 3358;
3370 -> 3358;
3371 -> 3348;
3372 -> 3371;
3372 -> 3353;
3372 -> 3348;
3373 -> 3349;
3373 -> 3348;
3374 -> 3350;
3374 -> 3348;
3375 -> 3351;
3375 -> 3348;
3376 -> 3373;
3376 -> 3348;
3377 -> 3374;
3377 -> 3348;
3378 -> 3372;
3378 -> 3348;
3379 -> 3348;
3380 -> 3376;
3380 -> 3379;
3381 -> 3377;
3381 -> 3379;
3382 -> 3378;
3382 -> 3379;
3383 -> 3356;
3383 -> 3379;
3384 -> 3380;
3384 -> 3379;
3385 -> 3380;
3385 -> 3373;
3385 -> 3379;
3386 -> 3381;
3386 -> 3379;
3387 -> 3381;
3387 -> 3374;
3387 -> 3379;
3388 -> 3379;
3389 -> 3384;
3389 -> 3388;
3390 -> 3385;
3390 -> 3388;
3391 -> 3386;
3391 -> 3388;
3392 -> 3387;
3392 -> 3388;
3393 -> 3383;
3393 -> 3388;
3394 -> 3389;
3394 -> 3388;
3395 -> 3390;
3395 -> 3388;
3396 -> 3391;
3396 -> 3388;
3397 -> 3392;
3397 -> 3388;
3398 -> 3388;
3399 -> 3394;
3399 -> 3398;
3400 -> 3395;
3400 -> 3398;
3401 -> 3396;
3401 -> 3398;
3402 -> 3397;
3402 -> 3398;
3403 -> 3393;
3403 -> 3398;
3404 -> 3398;
3405 -> 3400;
3405 -> 3404;
3405 -> 3398;
3406 -> 3398;
3407 -> 3402;
3407 -> 3406;
3407 -> 3398;
3408 -> 3405;
3408 -> 3407;
3408 -> 3398;
3409 -> 3398;
3410 -> 3409;
3410 -> 3408;
3410 -> 3398;
3411 -> 3398;
3412 -> 3411;
3412 -> 3400;
3412 -> 3398;
3413 -> 3412;
3414 -> 3408;
3414 -> 3410;
3414 -> 3413;
3414 -> 3412;
3415 -> 3414;
3415 -> 3411;
3415 -> 3413;
3415 -> 3408;
3415 -> 3412;
3416 -> 3398;
3417 -> 3416;
3417 -> 3402;
3417 -> 3398;
3418 -> 3417;
3419 -> 3408;
3419 -> 3410;
3419 -> 3415;
3419 -> 3418;
3419 -> 3417;
3420 -> 3419;
3420 -> 3418;
3420 -> 3416;
3420 -> 3408;
3420 -> 3417;
3421 -> 3398;
3422 -> 3421;
3422 -> 3400;
3422 -> 3398;
3423 -> 3422;
3424 -> 3423;
3424 -> 3402;
3424 -> 3422;
3425 -> 3424;
3426 -> 3408;
3426 -> 3410;
3426 -> 3415;
3426 -> 3420;
3426 -> 3425;
3426 -> 3424;
3427 -> 3399;
3427 -> 3424;
3428 -> 3401;
3428 -> 3424;
3429 -> 3424;
3430 -> 3427;
3430 -> 3429;
3431 -> 3425;
3431 -> 3429;
3432 -> 3428;
3432 -> 3429;
3433 -> 3425;
3433 -> 3429;
3434 -> 3403;
3434 -> 3429;
3435 -> 3430;
3435 -> 3373;
3435 -> 3431;
3435 -> 3429;
3436 -> 3432;
3436 -> 3374;
3436 -> 3433;
3436 -> 3429;
3437 -> 3434;
3437 -> 0;
3437 -> 3435;
3437 -> 3436;
3437 -> 3373;
3437 -> 3374;
3437 -> 3429;
3438 -> 3426;
3438 -> 3437;
3438 -> 3424;
3439 -> 3424;
3440 -> 3408;
3440 -> 3410;
3440 -> 3415;
3440 -> 3420;
3440 -> 3439;
3440 -> 3423;
3440 -> 3424;
3441 -> 3424;
3442 -> 3408;
3442 -> 3410;
3442 -> 3415;
3442 -> 3420;
3442 -> 3421;
3442 -> 3441;
3442 -> 3424;
3443 -> 3438;
3443 -> 3424;
3444 -> 3440;
3444 -> 3424;
3445 -> 3443;
3445 -> 3444;
3445 -> 3424;
3446 -> 3442;
3446 -> 3424;
3447 -> 3445;
3447 -> 3446;
3447 -> 3424;
3448 -> 3447;
3448 -> 3421;
3448 -> 3423;
3448 -> 3408;
3448 -> 3424;
3449 -> 3408;
3449 -> 3398;
3450 -> 3390;
3450 -> 3388;
3451 -> 3392;
3451 -> 3388;
3452 -> 3388;
3453 -> 3450;
3453 -> 3452;
3453 -> 3388;
3454 -> 3451;
3454 -> 3452;
3454 -> 3388;
3455 -> 3453;
3455 -> 3454;
3455 -> 3388;
3456 -> 3449;
3456 -> 3408;
3456 -> 3410;
3456 -> 3415;
3456 -> 3420;
3456 -> 3448;
3456 -> 3450;
3456 -> 3451;
3456 -> 3455;
3457 -> 3455;
3458 -> 3449;
3458 -> 3408;
3458 -> 3410;
3458 -> 3415;
3458 -> 3420;
3458 -> 3448;
3458 -> 3457;
3458 -> 3451;
3458 -> 3455;
3459 -> 3449;
3459 -> 3408;
3459 -> 3410;
3459 -> 3415;
3459 -> 3420;
3459 -> 3448;
3459 -> 3450;
3459 -> 3451;
3459 -> 3458;
3460 -> 3458;
3461 -> 3450;
3461 -> 3460;
3462 -> 3451;
3462 -> 3460;
3463 -> 3460;
3464 -> 0;
3464 -> 3460;
3465 -> 3461;
3465 -> 3460;
3466 -> 3462;
3466 -> 3460;
3467 -> 3460;
3468 -> 3464;
3468 -> 3467;
3469 -> 3465;
3469 -> 3467;
3470 -> 3466;
3470 -> 3467;
3471 -> 3463;
3471 -> 3467;
3472 -> 3468;
3472 -> 3471;
3472 -> 3467;
3473 -> 3469;
3473 -> 3471;
3473 -> 3467;
3474 -> 3470;
3474 -> 3471;
3474 -> 3467;
3475 -> 3461;
3475 -> 3462;
3475 -> 3388;
3476 -> 0;
3476 -> 3475;
3477 -> 3475;
3478 -> 3475;
3479 -> 3476;
3479 -> 3478;
3480 -> 3477;
3480 -> 3478;
3481 -> 3477;
3481 -> 3478;
3482 -> 3477;
3482 -> 3478;
3483 -> 3479;
3483 -> 3482;
3483 -> 3478;
3484 -> 3480;
3484 -> 3482;
3484 -> 3478;
3485 -> 3481;
3485 -> 3482;
3485 -> 3478;
3486 -> 3388;
3487 -> 3475;
3487 -> 3486;
3487 -> 3388;
3488 -> 3388;
3489 -> 3475;
3489 -> 3488;
3489 -> 3388;
3490 -> 3463;
3490 -> 3477;
3490 -> 3472;
3490 -> 3473;
3490 -> 3474;
3490 -> 3483;
3490 -> 3484;
3490 -> 3485;
3490 -> 3379;
3491 -> 3490;
3492 -> 3491;
3493 -> 3381;
3493 -> 3374;
3493 -> 3437;
3493 -> 3490;
3493 -> 3491;
3494 -> 3382;
3494 -> 3493;
3494 -> 3371;
3494 -> 3491;
3495 -> 3375;
3495 -> 3492;
3495 -> 3348;
3496 -> 2720;
3496 -> 3495;
3496 -> 3337;
3496 -> 2687;
3497 -> 2851;
3497 -> 3332;
3497 -> 2687;
3498 -> 2725;
3498 -> 2842;
3498 -> 2687;
3499 -> 2720;
3499 -> 3496;
3499 -> 2687;
3500 -> 2534;
3501 -> 942;
3502 -> 943;
3502 -> 942;
3503 -> 2531;
3503 -> 942;
3504 -> 942;
3505 -> 3502;
3505 -> 3504;
3506 -> 3503;
3506 -> 3504;
3507 -> 3506;
3507 -> 3504;
3508 -> 3507;
3508 -> 2531;
3508 -> 3237;
3509 -> 3505;
3509 -> 3508;
3509 -> 3237;
3509 -> 3507;
3510 -> 3507;
3510 -> 3509;
3511 -> 3510;
3511 -> 3509;
3512 -> 3510;
3513 -> 942;
3514 -> 943;
3514 -> 942;
}