digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 700869"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 700870"];
3 [label="param BindingTests(this) 700871"];
4 [label="'C' 700872"];
5 [label="DefaultTypeName = 'C' 700873"];
6 [label="'M' 700874"];
7 [label="DefaultMethodName = 'M' 700875"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 700876"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 700877"];
10 [label="param CompilingTestBase(this) 700878"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 700879"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 700880"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 700881"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 700882"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 700883"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 700884"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 700885"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 700886"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 700887"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 700888"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 700889"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 700890"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 700891"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 700892"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 700893"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 700894"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 700895"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 700896"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 700897"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 700898"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 700899"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 700900"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 700901"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 700902"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 700903"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 700904"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 700905"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 700906"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 700907"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 700908"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 700909"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 700910"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 700911"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 700912"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 700913"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 700914"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 700915"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 700916"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 700917"];
50 [label="LazyThreadSafetyMode.PublicationOnly 700918"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 700919"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 700920"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 700921"];
54 [label="LazyThreadSafetyMode.PublicationOnly 700922"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 700923"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 700924"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 700925"];
58 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 700926"];
59 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 700927"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 700928"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 700929"];
62 [label="LazyThreadSafetyMode.PublicationOnly 700930"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 700931"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 700932"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 700933"];
66 [label="LazyThreadSafetyMode.PublicationOnly 700934"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 700935"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 700936"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 700937"];
70 [label="LazyThreadSafetyMode.PublicationOnly 700938"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 700939"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 700940"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 700941"];
74 [label="LazyThreadSafetyMode.PublicationOnly 700942"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700943"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700944"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 700945"];
78 [label="LazyThreadSafetyMode.PublicationOnly 700946"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700947"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700948"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 700949"];
82 [label="LazyThreadSafetyMode.PublicationOnly 700950"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700951"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700952"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 700953"];
86 [label="LazyThreadSafetyMode.PublicationOnly 700954"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700955"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700956"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 700957"];
90 [label="LazyThreadSafetyMode.PublicationOnly 700958"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700959"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700960"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 700961"];
94 [label="LazyThreadSafetyMode.PublicationOnly 700962"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700963"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700964"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 700965"];
98 [label="LazyThreadSafetyMode.PublicationOnly 700966"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700967"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700968"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 700969"];
102 [label="LazyThreadSafetyMode.PublicationOnly 700970"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 700971"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 700972"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 700973"];
106 [label="LazyThreadSafetyMode.PublicationOnly 700974"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 700975"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 700976"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 700977"];
110 [label="LazyThreadSafetyMode.PublicationOnly 700978"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700979"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700980"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 700981"];
114 [label="LazyThreadSafetyMode.PublicationOnly 700982"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700983"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700984"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 700985"];
118 [label="LazyThreadSafetyMode.PublicationOnly 700986"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700987"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700988"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 700989"];
122 [label="LazyThreadSafetyMode.PublicationOnly 700990"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700991"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700992"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 700993"];
126 [label="LazyThreadSafetyMode.PublicationOnly 700994"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 700995"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 700996"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 700997"];
130 [label="LazyThreadSafetyMode.PublicationOnly 700998"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 700999"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701000"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 701001"];
134 [label="LazyThreadSafetyMode.PublicationOnly 701002"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701003"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701004"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 701005"];
138 [label="LazyThreadSafetyMode.PublicationOnly 701006"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701007"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701008"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 701009"];
142 [label="LazyThreadSafetyMode.PublicationOnly 701010"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701011"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701012"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 701013"];
146 [label="LazyThreadSafetyMode.PublicationOnly 701014"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701015"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701016"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 701017"];
150 [label="LazyThreadSafetyMode.PublicationOnly 701018"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701019"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701020"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 701021"];
154 [label="LazyThreadSafetyMode.PublicationOnly 701022"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701023"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701024"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 701025"];
158 [label="LazyThreadSafetyMode.PublicationOnly 701026"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701027"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701028"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 701029"];
162 [label="LazyThreadSafetyMode.PublicationOnly 701030"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701031"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701032"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 701033"];
166 [label="LazyThreadSafetyMode.PublicationOnly 701034"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701035"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701036"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 701037"];
170 [label="LazyThreadSafetyMode.PublicationOnly 701038"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701039"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701040"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 701041"];
174 [label="LazyThreadSafetyMode.PublicationOnly 701042"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701043"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701044"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 701045"];
178 [label="LazyThreadSafetyMode.PublicationOnly 701046"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701047"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 701048"];
181 [label="@'R:\\Invalid.dll' 701049"];
182 [label="fullPath: @'R:\\Invalid.dll' 701050"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 701051"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 701052"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 701053"];
186 [label="MscorlibRef_v4_0_30316_17626 701054"];
187 [label="Net451.mscorlib 701055"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 701056"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 701057"];
190 [label="'/*<bind>*/' 701058"];
191 [label="StartString = '/*<bind>*/' 701059"];
192 [label="'/*</bind>*/' 701060"];
193 [label="EndString = '/*</bind>*/' 701061"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 701062"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 701063"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 701064"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 701065"];
198 [label="param CSharpTestBase(this) 701066"];
199 [label="param CommonTestBase(this) 701067"];
200 [label="param TestBase(this) 701068"];
201 [label="_temp 701069"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 701070"];
203 [label="param NonMethodsWithArgs(this) 701071"];
204 [label="var source =\n@'namespace N\n{\n    class C<T>\n    {\n        object F;\n        object P { get; set; }\n        void M()\n        {\n            N(a);\n            C<string>(b);\n            N.C<int>(c);\n            N.D(d);\n            T(e);\n            (typeof(C<int>))(f);\n            P(g) = F(h);\n            this.F(i) = (this).P(j);\n            null.M(k);\n        }\n    }\n}'; 701072"];
205 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701073"];
206 [label="source 701074"];
207 [label="param operator(string source) 701075"];
208 [label="source 701076"];
209 [label="new CSharpTestSource(source) 701077"];
210 [label="param CSharpTestSource(object value) 701078"];
211 [label="param CSharpTestSource(this) 701079"];
212 [label="Value 701080"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701081"];
214 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701082"];
215 [label="CreateCompilation(source) 701083"];
216 [label="param CreateCompilation(CSharpTestSource source) 701084"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 701085"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 701086"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 701087"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 701088"];
221 [label="param CreateCompilation(string assemblyName = '') 701089"];
222 [label="param CreateCompilation(string sourceFileName = '') 701090"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 701091"];
224 [label="source 701092"];
225 [label="targetFramework 701093"];
226 [label="references 701094"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 701095"];
228 [label="param GetReferences(TargetFramework tf) 701096"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 701097"];
230 [label="var references = GetReferences(tf); 701098"];
231 [label="GetReferences(tf) 701099"];
232 [label="param GetReferences(TargetFramework targetFramework) 701100"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 701101"];
234 [label="StandardReferences 701102"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 701103"];
236 [label="NetStandard20References 701104"];
237 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 701105"];
238 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 701106"];
239 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 701107"];
240 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 701108"];
241 [label="return references; 701109"];
242 [label="options 701110"];
243 [label="parseOptions 701111"];
244 [label="assemblyName 701112"];
245 [label="sourceFileName 701113"];
246 [label="skipUsesIsNullable 701114"];
247 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 701115"];
248 [label="param CreateEmptyCompilation(CSharpTestSource source) 701116"];
249 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 701117"];
250 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 701118"];
251 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 701119"];
252 [label="param CreateEmptyCompilation(string assemblyName = '') 701120"];
253 [label="param CreateEmptyCompilation(string sourceFileName = '') 701121"];
254 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 701122"];
255 [label="source 701123"];
256 [label="references 701124"];
257 [label="options 701125"];
258 [label="parseOptions 701126"];
259 [label="assemblyName 701127"];
260 [label="sourceFileName 701128"];
261 [label="skipUsesIsNullable 701129"];
262 [label="null 701130"];
263 [label="experimentalFeature: null 701131"];
264 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 701132"];
265 [label="param CreateCompilationCore(CSharpTestSource source) 701133"];
266 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 701134"];
267 [label="param CreateCompilationCore(CSharpCompilationOptions options) 701135"];
268 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 701136"];
269 [label="param CreateCompilationCore(string assemblyName) 701137"];
270 [label="param CreateCompilationCore(string sourceFileName) 701138"];
271 [label="param CreateCompilationCore(bool skipUsesIsNullable) 701139"];
272 [label="param CreateCompilationCore(MessageID? experimentalFeature) 701140"];
273 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 701141"];
274 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 701142"];
275 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 701143"];
276 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 701144"];
277 [label="param GetSyntaxTrees(string sourceFileName = '') 701145"];
278 [label="param GetSyntaxTrees(this) 701146"];
279 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 701147"];
280 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 701148"];
281 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 701149"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 701150"];
283 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 701151"];
284 [label="param Parse(string text) 701152"];
285 [label="param Parse(string filename = '') 701153"];
286 [label="param Parse(CSharpParseOptions options = null) 701154"];
287 [label="param Parse(Encoding encoding = null) 701155"];
288 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 701156"];
289 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 701157"];
290 [label="kind: SourceCodeKind.Regular 701158"];
291 [label="documentationMode: DocumentationMode.Parse 701159"];
292 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 701160"];
293 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 701161"];
294 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 701162"];
295 [label="SourceCodeKind.Script 701163"];
296 [label="Regular.WithKind(SourceCodeKind.Script) 701164"];
297 [label="Script = Regular.WithKind(SourceCodeKind.Script) 701165"];
298 [label="LanguageVersion.CSharp6 701166"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 701167"];
300 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 701168"];
301 [label="LanguageVersion.CSharp7 701169"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 701170"];
303 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 701171"];
304 [label="LanguageVersion.CSharp7_1 701172"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 701173"];
306 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 701174"];
307 [label="LanguageVersion.CSharp7_2 701175"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 701176"];
309 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 701177"];
310 [label="LanguageVersion.CSharp7_3 701178"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 701179"];
312 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 701180"];
313 [label="LanguageVersion.Default 701181"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 701182"];
315 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 701183"];
316 [label="LanguageVersion.Preview 701184"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 701185"];
318 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 701186"];
319 [label="LanguageVersion.CSharp8 701187"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 701188"];
321 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 701189"];
322 [label="LanguageVersion.CSharp9 701190"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 701191"];
324 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 701192"];
325 [label="DocumentationMode.Diagnose 701193"];
326 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 701194"];
327 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 701195"];
328 [label="Regular 701196"];
329 [label="'UseLegacyStrongNameProvider' 701197"];
330 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 701198"];
331 [label="param WithFeature(this CSharpParseOptions options) 701199"];
332 [label="param WithFeature(string feature) 701200"];
333 [label="param WithFeature(string value = 'true') 701201"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 701202"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 701203"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 701204"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 701205"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 701206"];
339 [label="new[] { new KeyValuePair<string, string>(feature, value) } 701207"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 701208"];
341 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 701209"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 701210"];
343 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 701211"];
344 [label="1 701212"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 701213"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 701214"];
347 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 701215"];
348 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 701216"];
349 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 701217"];
350 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 701218"];
351 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 701219"];
352 [label="LanguageVersion.CSharp8 701220"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 701221"];
354 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 701222"];
355 [label="RegularWithExtendedPartialMethods = RegularPreview 701223"];
356 [label="new SmallDictionary<string, string> { } 701224"];
357 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 701225"];
358 [label="kind: SourceCodeKind.Regular 701226"];
359 [label="documentationMode: DocumentationMode.None 701227"];
360 [label="languageVersion: LanguageVersion.Preview 701228"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 701229"];
362 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 701230"];
363 [label="s_experimentalFeatures 701231"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 701232"];
365 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 701233"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 701234"];
367 [label="'testV7SwitchBinder' 701235"];
368 [label="'true' 701236"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 701237"];
370 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 701238"];
371 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 701239"];
372 [label="RegularWithoutRecursivePatterns = Regular7_3 701240"];
373 [label="RegularWithRecursivePatterns = Regular8 701241"];
374 [label="RegularWithoutPatternCombinators = Regular8 701242"];
375 [label="RegularWithPatternCombinators = RegularPreview 701243"];
376 [label="OutputKind.DynamicallyLinkedLibrary 701244"];
377 [label="OptimizationLevel.Release 701245"];
378 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 701246"];
379 [label="param CreateTestOptions(OutputKind outputKind) 701247"];
380 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701248"];
381 [label="param CreateTestOptions(bool allowUnsafe = false) 701249"];
382 [label="outputKind 701250"];
383 [label="optimizationLevel: optimizationLevel 701251"];
384 [label="warningLevel: Diagnostic.MaxWarningLevel 701252"];
385 [label="allowUnsafe: allowUnsafe 701253"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701254"];
387 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701255"];
388 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 701256"];
389 [label="OutputKind.ConsoleApplication 701257"];
390 [label="OptimizationLevel.Release 701258"];
391 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 701259"];
392 [label="param CreateTestOptions(OutputKind outputKind) 701260"];
393 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701261"];
394 [label="param CreateTestOptions(bool allowUnsafe = false) 701262"];
395 [label="outputKind 701263"];
396 [label="optimizationLevel: optimizationLevel 701264"];
397 [label="warningLevel: Diagnostic.MaxWarningLevel 701265"];
398 [label="allowUnsafe: allowUnsafe 701266"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701267"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701268"];
401 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 701269"];
402 [label="true 701270"];
403 [label="ReleaseDll.WithDebugPlusMode(true) 701271"];
404 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 701272"];
405 [label="true 701273"];
406 [label="ReleaseExe.WithDebugPlusMode(true) 701274"];
407 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 701275"];
408 [label="OutputKind.DynamicallyLinkedLibrary 701276"];
409 [label="OptimizationLevel.Debug 701277"];
410 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 701278"];
411 [label="param CreateTestOptions(OutputKind outputKind) 701279"];
412 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701280"];
413 [label="param CreateTestOptions(bool allowUnsafe = false) 701281"];
414 [label="outputKind 701282"];
415 [label="optimizationLevel: optimizationLevel 701283"];
416 [label="warningLevel: Diagnostic.MaxWarningLevel 701284"];
417 [label="allowUnsafe: allowUnsafe 701285"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701286"];
419 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701287"];
420 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 701288"];
421 [label="OutputKind.ConsoleApplication 701289"];
422 [label="OptimizationLevel.Debug 701290"];
423 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 701291"];
424 [label="param CreateTestOptions(OutputKind outputKind) 701292"];
425 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701293"];
426 [label="param CreateTestOptions(bool allowUnsafe = false) 701294"];
427 [label="outputKind 701295"];
428 [label="optimizationLevel: optimizationLevel 701296"];
429 [label="warningLevel: Diagnostic.MaxWarningLevel 701297"];
430 [label="allowUnsafe: allowUnsafe 701298"];
431 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701299"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701300"];
433 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 701301"];
434 [label="OutputKind.WindowsRuntimeMetadata 701302"];
435 [label="OptimizationLevel.Release 701303"];
436 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 701304"];
437 [label="param CreateTestOptions(OutputKind outputKind) 701305"];
438 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701306"];
439 [label="param CreateTestOptions(bool allowUnsafe = false) 701307"];
440 [label="outputKind 701308"];
441 [label="optimizationLevel: optimizationLevel 701309"];
442 [label="warningLevel: Diagnostic.MaxWarningLevel 701310"];
443 [label="allowUnsafe: allowUnsafe 701311"];
444 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701312"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701313"];
446 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 701314"];
447 [label="OutputKind.WindowsRuntimeMetadata 701315"];
448 [label="OptimizationLevel.Debug 701316"];
449 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 701317"];
450 [label="param CreateTestOptions(OutputKind outputKind) 701318"];
451 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701319"];
452 [label="param CreateTestOptions(bool allowUnsafe = false) 701320"];
453 [label="outputKind 701321"];
454 [label="optimizationLevel: optimizationLevel 701322"];
455 [label="warningLevel: Diagnostic.MaxWarningLevel 701323"];
456 [label="allowUnsafe: allowUnsafe 701324"];
457 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701325"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701326"];
459 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 701327"];
460 [label="OutputKind.NetModule 701328"];
461 [label="OptimizationLevel.Release 701329"];
462 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 701330"];
463 [label="param CreateTestOptions(OutputKind outputKind) 701331"];
464 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701332"];
465 [label="param CreateTestOptions(bool allowUnsafe = false) 701333"];
466 [label="outputKind 701334"];
467 [label="optimizationLevel: optimizationLevel 701335"];
468 [label="warningLevel: Diagnostic.MaxWarningLevel 701336"];
469 [label="allowUnsafe: allowUnsafe 701337"];
470 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701338"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701339"];
472 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 701340"];
473 [label="OutputKind.NetModule 701341"];
474 [label="OptimizationLevel.Debug 701342"];
475 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 701343"];
476 [label="param CreateTestOptions(OutputKind outputKind) 701344"];
477 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 701345"];
478 [label="param CreateTestOptions(bool allowUnsafe = false) 701346"];
479 [label="outputKind 701347"];
480 [label="optimizationLevel: optimizationLevel 701348"];
481 [label="warningLevel: Diagnostic.MaxWarningLevel 701349"];
482 [label="allowUnsafe: allowUnsafe 701350"];
483 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701351"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 701352"];
485 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 701353"];
486 [label="true 701354"];
487 [label="ReleaseDll.WithAllowUnsafe(true) 701355"];
488 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 701356"];
489 [label="true 701357"];
490 [label="ReleaseExe.WithAllowUnsafe(true) 701358"];
491 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 701359"];
492 [label="true 701360"];
493 [label="DebugDll.WithAllowUnsafe(true) 701361"];
494 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 701362"];
495 [label="true 701363"];
496 [label="DebugExe.WithAllowUnsafe(true) 701364"];
497 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 701365"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 701366"];
499 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701367"];
500 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701368"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 701369"];
502 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701370"];
503 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701371"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 701372"];
505 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701373"];
506 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701374"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 701375"];
508 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701376"];
509 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 701377"];
510 [label="DebugInformationFormat.Pdb 701378"];
511 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 701379"];
512 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 701380"];
513 [label="options = TestOptions.Regular; 701381"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 701382"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 701383"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 701384"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 701385"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 701386"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 701387"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 701388"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 701389"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 701390"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 701391"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 701392"];
525 [label="param CheckSerializable(SyntaxTree tree) 701393"];
526 [label="var stream = new MemoryStream(); 701394"];
527 [label="var root = tree.GetRoot(); 701395"];
528 [label="var root = tree.GetRoot(); 701396"];
529 [label="root.SerializeTo(stream); 701397"];
530 [label="root.SerializeTo(stream); 701398"];
531 [label="root.SerializeTo(stream); 701399"];
532 [label="stream.Position = 0; 701400"];
533 [label="stream.Position 701401"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 701402"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 701403"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 701404"];
537 [label="return tree; 701405"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 701406"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 701407"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 701408"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 701409"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 701410"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 701411"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 701412"];
545 [label="hasTopLevelStatements 701413"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 701414"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 701415"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 701416"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 701417"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 701418"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 701419"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 701420"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 701421"];
554 [label="return; 701422"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 701423"];
556 [label="var compilation = createCompilationLambda(); 701424"];
557 [label="var compilation = createCompilationLambda(); 701425"];
558 [label="return Guid.NewGuid().ToString('D'); 701426"];
559 [label="var compilation = createCompilationLambda(); 701427"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 701428"];
561 [label="IsNullableEnabled(compilation) 701429"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 701430"];
563 [label="var trees = compilation.SyntaxTrees; 701431"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 701432"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 701433"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 701434"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 701435"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 701436"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 701437"];
570 [label="return compilation; 701438"];
571 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701439"];
572 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'a') 701440"];
573 [label="param Diagnostic(object code) 701441"];
574 [label="param Diagnostic(string squiggledText = null) 701442"];
575 [label="param Diagnostic(object[] arguments = null) 701443"];
576 [label="param Diagnostic(LinePosition? startLocation = null) 701444"];
577 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701445"];
578 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701446"];
579 [label="param Diagnostic(bool isSuppressed = false) 701447"];
580 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701448"];
581 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701449"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701450"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701451"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701452"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701453"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701454"];
587 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 701455"];
588 [label="param Diagnostic(object code) 701456"];
589 [label="param Diagnostic(string squiggledText = null) 701457"];
590 [label="param Diagnostic(object[] arguments = null) 701458"];
591 [label="param Diagnostic(LinePosition? startLocation = null) 701459"];
592 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701460"];
593 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701461"];
594 [label="param Diagnostic(bool isSuppressed = false) 701462"];
595 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 701463"];
596 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701464"];
597 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701465"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701466"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701467"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701468"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701469"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701470"];
603 [label="{ } 701471"];
604 [label="None = { } 701472"];
605 [label="null 701473"];
606 [label="Any = null 701474"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701475"];
608 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 701476"];
609 [label="param DiagnosticDescription(object code) 701477"];
610 [label="param DiagnosticDescription(bool isWarningAsError) 701478"];
611 [label="param DiagnosticDescription(string squiggledText) 701479"];
612 [label="param DiagnosticDescription(object[] arguments) 701480"];
613 [label="param DiagnosticDescription(LinePosition? startLocation) 701481"];
614 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701482"];
615 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701483"];
616 [label="param DiagnosticDescription(Type errorCodeType = null) 701484"];
617 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701485"];
618 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701486"];
619 [label="param DiagnosticDescription(bool isSuppressed = false) 701487"];
620 [label="param DiagnosticDescription(this) 701488"];
621 [label="_code 701489"];
622 [label="_isWarningAsError 701490"];
623 [label="_isSuppressed 701491"];
624 [label="_squiggledText 701492"];
625 [label="_arguments 701493"];
626 [label="_startPosition 701494"];
627 [label="_argumentOrderDoesNotMatter 701495"];
628 [label="_errorCodeType 701496"];
629 [label="_ignoreArgumentsWhenComparing 701497"];
630 [label="_defaultSeverityOpt 701498"];
631 [label="_effectiveSeverityOpt 701499"];
632 [label="_syntaxPredicate 701500"];
633 [label="_showPredicate 701501"];
634 [label="_location 701502"];
635 [label="_argumentsAsStrings 701503"];
636 [label="_code 701504"];
637 [label="_isWarningAsError 701505"];
638 [label="_squiggledText 701506"];
639 [label="_arguments 701507"];
640 [label="_startPosition 701508"];
641 [label="_syntaxPredicate 701509"];
642 [label="_argumentOrderDoesNotMatter 701510"];
643 [label="_errorCodeType = errorCodeType ?? code.GetType(); 701511"];
644 [label="_errorCodeType 701512"];
645 [label="_defaultSeverityOpt 701513"];
646 [label="_effectiveSeverityOpt 701514"];
647 [label="_isSuppressed 701515"];
648 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701516"];
649 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701517"];
650 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a') 701518"];
651 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a') 701519"];
652 [label="param WithArguments(params object[] arguments) 701520"];
653 [label="param WithArguments(this) 701521"];
654 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701522"];
655 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701523"];
656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701524"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701525"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701526"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701527"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701528"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701529"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701530"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701531"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701532"];
665 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 701533"];
666 [label="param DiagnosticDescription(object code) 701534"];
667 [label="param DiagnosticDescription(bool isWarningAsError) 701535"];
668 [label="param DiagnosticDescription(string squiggledText) 701536"];
669 [label="param DiagnosticDescription(object[] arguments) 701537"];
670 [label="param DiagnosticDescription(LinePosition? startLocation) 701538"];
671 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701539"];
672 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701540"];
673 [label="param DiagnosticDescription(Type errorCodeType = null) 701541"];
674 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701542"];
675 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701543"];
676 [label="param DiagnosticDescription(bool isSuppressed = false) 701544"];
677 [label="param DiagnosticDescription(this) 701545"];
678 [label="_code 701546"];
679 [label="_isWarningAsError 701547"];
680 [label="_isSuppressed 701548"];
681 [label="_squiggledText 701549"];
682 [label="_arguments 701550"];
683 [label="_startPosition 701551"];
684 [label="_argumentOrderDoesNotMatter 701552"];
685 [label="_errorCodeType 701553"];
686 [label="_ignoreArgumentsWhenComparing 701554"];
687 [label="_defaultSeverityOpt 701555"];
688 [label="_effectiveSeverityOpt 701556"];
689 [label="_syntaxPredicate 701557"];
690 [label="_showPredicate 701558"];
691 [label="_location 701559"];
692 [label="_argumentsAsStrings 701560"];
693 [label="_arguments 701561"];
694 [label="_argumentOrderDoesNotMatter 701562"];
695 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701563"];
696 [label="Diagnostic(ErrorCode.ERR_BadSKknown, 'N') 701564"];
697 [label="param Diagnostic(object code) 701565"];
698 [label="param Diagnostic(string squiggledText = null) 701566"];
699 [label="param Diagnostic(object[] arguments = null) 701567"];
700 [label="param Diagnostic(LinePosition? startLocation = null) 701568"];
701 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701569"];
702 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701570"];
703 [label="param Diagnostic(bool isSuppressed = false) 701571"];
704 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701572"];
705 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701573"];
706 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701574"];
707 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701575"];
708 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701576"];
709 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701577"];
710 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701578"];
711 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 701579"];
712 [label="param Diagnostic(object code) 701580"];
713 [label="param Diagnostic(string squiggledText = null) 701581"];
714 [label="param Diagnostic(object[] arguments = null) 701582"];
715 [label="param Diagnostic(LinePosition? startLocation = null) 701583"];
716 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701584"];
717 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701585"];
718 [label="param Diagnostic(bool isSuppressed = false) 701586"];
719 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 701587"];
720 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701588"];
721 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701589"];
722 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701590"];
723 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701591"];
724 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701592"];
725 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701593"];
726 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701594"];
727 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701595"];
728 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 701596"];
729 [label="param DiagnosticDescription(object code) 701597"];
730 [label="param DiagnosticDescription(bool isWarningAsError) 701598"];
731 [label="param DiagnosticDescription(string squiggledText) 701599"];
732 [label="param DiagnosticDescription(object[] arguments) 701600"];
733 [label="param DiagnosticDescription(LinePosition? startLocation) 701601"];
734 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701602"];
735 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701603"];
736 [label="param DiagnosticDescription(Type errorCodeType = null) 701604"];
737 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701605"];
738 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701606"];
739 [label="param DiagnosticDescription(bool isSuppressed = false) 701607"];
740 [label="param DiagnosticDescription(this) 701608"];
741 [label="_code 701609"];
742 [label="_isWarningAsError 701610"];
743 [label="_isSuppressed 701611"];
744 [label="_squiggledText 701612"];
745 [label="_arguments 701613"];
746 [label="_startPosition 701614"];
747 [label="_argumentOrderDoesNotMatter 701615"];
748 [label="_errorCodeType 701616"];
749 [label="_ignoreArgumentsWhenComparing 701617"];
750 [label="_defaultSeverityOpt 701618"];
751 [label="_effectiveSeverityOpt 701619"];
752 [label="_syntaxPredicate 701620"];
753 [label="_showPredicate 701621"];
754 [label="_location 701622"];
755 [label="_argumentsAsStrings 701623"];
756 [label="_code 701624"];
757 [label="_isWarningAsError 701625"];
758 [label="_squiggledText 701626"];
759 [label="_arguments 701627"];
760 [label="_startPosition 701628"];
761 [label="_syntaxPredicate 701629"];
762 [label="_argumentOrderDoesNotMatter 701630"];
763 [label="_errorCodeType = errorCodeType ?? code.GetType(); 701631"];
764 [label="_errorCodeType 701632"];
765 [label="_defaultSeverityOpt 701633"];
766 [label="_effectiveSeverityOpt 701634"];
767 [label="_isSuppressed 701635"];
768 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701636"];
769 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701637"];
770 [label="Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable') 701638"];
771 [label="Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable') 701639"];
772 [label="param WithArguments(params object[] arguments) 701640"];
773 [label="param WithArguments(this) 701641"];
774 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701642"];
775 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701643"];
776 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701644"];
777 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701645"];
778 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701646"];
779 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701647"];
780 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701648"];
781 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701649"];
782 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701650"];
783 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701651"];
784 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701652"];
785 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 701653"];
786 [label="param DiagnosticDescription(object code) 701654"];
787 [label="param DiagnosticDescription(bool isWarningAsError) 701655"];
788 [label="param DiagnosticDescription(string squiggledText) 701656"];
789 [label="param DiagnosticDescription(object[] arguments) 701657"];
790 [label="param DiagnosticDescription(LinePosition? startLocation) 701658"];
791 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701659"];
792 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701660"];
793 [label="param DiagnosticDescription(Type errorCodeType = null) 701661"];
794 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701662"];
795 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701663"];
796 [label="param DiagnosticDescription(bool isSuppressed = false) 701664"];
797 [label="param DiagnosticDescription(this) 701665"];
798 [label="_code 701666"];
799 [label="_isWarningAsError 701667"];
800 [label="_isSuppressed 701668"];
801 [label="_squiggledText 701669"];
802 [label="_arguments 701670"];
803 [label="_startPosition 701671"];
804 [label="_argumentOrderDoesNotMatter 701672"];
805 [label="_errorCodeType 701673"];
806 [label="_ignoreArgumentsWhenComparing 701674"];
807 [label="_defaultSeverityOpt 701675"];
808 [label="_effectiveSeverityOpt 701676"];
809 [label="_syntaxPredicate 701677"];
810 [label="_showPredicate 701678"];
811 [label="_location 701679"];
812 [label="_argumentsAsStrings 701680"];
813 [label="_arguments 701681"];
814 [label="_argumentOrderDoesNotMatter 701682"];
815 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701683"];
816 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'b') 701684"];
817 [label="param Diagnostic(object code) 701685"];
818 [label="param Diagnostic(string squiggledText = null) 701686"];
819 [label="param Diagnostic(object[] arguments = null) 701687"];
820 [label="param Diagnostic(LinePosition? startLocation = null) 701688"];
821 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701689"];
822 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701690"];
823 [label="param Diagnostic(bool isSuppressed = false) 701691"];
824 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701692"];
825 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701693"];
826 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701694"];
827 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701695"];
828 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701696"];
829 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701697"];
830 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701698"];
831 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 701699"];
832 [label="param Diagnostic(object code) 701700"];
833 [label="param Diagnostic(string squiggledText = null) 701701"];
834 [label="param Diagnostic(object[] arguments = null) 701702"];
835 [label="param Diagnostic(LinePosition? startLocation = null) 701703"];
836 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701704"];
837 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701705"];
838 [label="param Diagnostic(bool isSuppressed = false) 701706"];
839 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 701707"];
840 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701708"];
841 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701709"];
842 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701710"];
843 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701711"];
844 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701712"];
845 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701713"];
846 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701714"];
847 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701715"];
848 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 701716"];
849 [label="param DiagnosticDescription(object code) 701717"];
850 [label="param DiagnosticDescription(bool isWarningAsError) 701718"];
851 [label="param DiagnosticDescription(string squiggledText) 701719"];
852 [label="param DiagnosticDescription(object[] arguments) 701720"];
853 [label="param DiagnosticDescription(LinePosition? startLocation) 701721"];
854 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701722"];
855 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701723"];
856 [label="param DiagnosticDescription(Type errorCodeType = null) 701724"];
857 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701725"];
858 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701726"];
859 [label="param DiagnosticDescription(bool isSuppressed = false) 701727"];
860 [label="param DiagnosticDescription(this) 701728"];
861 [label="_code 701729"];
862 [label="_isWarningAsError 701730"];
863 [label="_isSuppressed 701731"];
864 [label="_squiggledText 701732"];
865 [label="_arguments 701733"];
866 [label="_startPosition 701734"];
867 [label="_argumentOrderDoesNotMatter 701735"];
868 [label="_errorCodeType 701736"];
869 [label="_ignoreArgumentsWhenComparing 701737"];
870 [label="_defaultSeverityOpt 701738"];
871 [label="_effectiveSeverityOpt 701739"];
872 [label="_syntaxPredicate 701740"];
873 [label="_showPredicate 701741"];
874 [label="_location 701742"];
875 [label="_argumentsAsStrings 701743"];
876 [label="_code 701744"];
877 [label="_isWarningAsError 701745"];
878 [label="_squiggledText 701746"];
879 [label="_arguments 701747"];
880 [label="_startPosition 701748"];
881 [label="_syntaxPredicate 701749"];
882 [label="_argumentOrderDoesNotMatter 701750"];
883 [label="_errorCodeType = errorCodeType ?? code.GetType(); 701751"];
884 [label="_errorCodeType 701752"];
885 [label="_defaultSeverityOpt 701753"];
886 [label="_effectiveSeverityOpt 701754"];
887 [label="_isSuppressed 701755"];
888 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701756"];
889 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701757"];
890 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b') 701758"];
891 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b') 701759"];
892 [label="param WithArguments(params object[] arguments) 701760"];
893 [label="param WithArguments(this) 701761"];
894 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701762"];
895 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701763"];
896 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701764"];
897 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701765"];
898 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701766"];
899 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701767"];
900 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701768"];
901 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701769"];
902 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701770"];
903 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701771"];
904 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701772"];
905 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 701773"];
906 [label="param DiagnosticDescription(object code) 701774"];
907 [label="param DiagnosticDescription(bool isWarningAsError) 701775"];
908 [label="param DiagnosticDescription(string squiggledText) 701776"];
909 [label="param DiagnosticDescription(object[] arguments) 701777"];
910 [label="param DiagnosticDescription(LinePosition? startLocation) 701778"];
911 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701779"];
912 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701780"];
913 [label="param DiagnosticDescription(Type errorCodeType = null) 701781"];
914 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701782"];
915 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701783"];
916 [label="param DiagnosticDescription(bool isSuppressed = false) 701784"];
917 [label="param DiagnosticDescription(this) 701785"];
918 [label="_code 701786"];
919 [label="_isWarningAsError 701787"];
920 [label="_isSuppressed 701788"];
921 [label="_squiggledText 701789"];
922 [label="_arguments 701790"];
923 [label="_startPosition 701791"];
924 [label="_argumentOrderDoesNotMatter 701792"];
925 [label="_errorCodeType 701793"];
926 [label="_ignoreArgumentsWhenComparing 701794"];
927 [label="_defaultSeverityOpt 701795"];
928 [label="_effectiveSeverityOpt 701796"];
929 [label="_syntaxPredicate 701797"];
930 [label="_showPredicate 701798"];
931 [label="_location 701799"];
932 [label="_argumentsAsStrings 701800"];
933 [label="_arguments 701801"];
934 [label="_argumentOrderDoesNotMatter 701802"];
935 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701803"];
936 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>') 701804"];
937 [label="param Diagnostic(object code) 701805"];
938 [label="param Diagnostic(string squiggledText = null) 701806"];
939 [label="param Diagnostic(object[] arguments = null) 701807"];
940 [label="param Diagnostic(LinePosition? startLocation = null) 701808"];
941 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701809"];
942 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701810"];
943 [label="param Diagnostic(bool isSuppressed = false) 701811"];
944 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701812"];
945 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701813"];
946 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701814"];
947 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701815"];
948 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701816"];
949 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701817"];
950 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701818"];
951 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 701819"];
952 [label="param Diagnostic(object code) 701820"];
953 [label="param Diagnostic(string squiggledText = null) 701821"];
954 [label="param Diagnostic(object[] arguments = null) 701822"];
955 [label="param Diagnostic(LinePosition? startLocation = null) 701823"];
956 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701824"];
957 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701825"];
958 [label="param Diagnostic(bool isSuppressed = false) 701826"];
959 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 701827"];
960 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701828"];
961 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701829"];
962 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701830"];
963 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701831"];
964 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701832"];
965 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701833"];
966 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701834"];
967 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701835"];
968 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 701836"];
969 [label="param DiagnosticDescription(object code) 701837"];
970 [label="param DiagnosticDescription(bool isWarningAsError) 701838"];
971 [label="param DiagnosticDescription(string squiggledText) 701839"];
972 [label="param DiagnosticDescription(object[] arguments) 701840"];
973 [label="param DiagnosticDescription(LinePosition? startLocation) 701841"];
974 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701842"];
975 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701843"];
976 [label="param DiagnosticDescription(Type errorCodeType = null) 701844"];
977 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701845"];
978 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701846"];
979 [label="param DiagnosticDescription(bool isSuppressed = false) 701847"];
980 [label="param DiagnosticDescription(this) 701848"];
981 [label="_code 701849"];
982 [label="_isWarningAsError 701850"];
983 [label="_isSuppressed 701851"];
984 [label="_squiggledText 701852"];
985 [label="_arguments 701853"];
986 [label="_startPosition 701854"];
987 [label="_argumentOrderDoesNotMatter 701855"];
988 [label="_errorCodeType 701856"];
989 [label="_ignoreArgumentsWhenComparing 701857"];
990 [label="_defaultSeverityOpt 701858"];
991 [label="_effectiveSeverityOpt 701859"];
992 [label="_syntaxPredicate 701860"];
993 [label="_showPredicate 701861"];
994 [label="_location 701862"];
995 [label="_argumentsAsStrings 701863"];
996 [label="_code 701864"];
997 [label="_isWarningAsError 701865"];
998 [label="_squiggledText 701866"];
999 [label="_arguments 701867"];
1000 [label="_startPosition 701868"];
1001 [label="_syntaxPredicate 701869"];
1002 [label="_argumentOrderDoesNotMatter 701870"];
1003 [label="_errorCodeType = errorCodeType ?? code.GetType(); 701871"];
1004 [label="_errorCodeType 701872"];
1005 [label="_defaultSeverityOpt 701873"];
1006 [label="_effectiveSeverityOpt 701874"];
1007 [label="_isSuppressed 701875"];
1008 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701876"];
1009 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701877"];
1010 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>') 701878"];
1011 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>') 701879"];
1012 [label="param WithArguments(params object[] arguments) 701880"];
1013 [label="param WithArguments(this) 701881"];
1014 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701882"];
1015 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701883"];
1016 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701884"];
1017 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701885"];
1018 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701886"];
1019 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701887"];
1020 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701888"];
1021 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701889"];
1022 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701890"];
1023 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701891"];
1024 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 701892"];
1025 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 701893"];
1026 [label="param DiagnosticDescription(object code) 701894"];
1027 [label="param DiagnosticDescription(bool isWarningAsError) 701895"];
1028 [label="param DiagnosticDescription(string squiggledText) 701896"];
1029 [label="param DiagnosticDescription(object[] arguments) 701897"];
1030 [label="param DiagnosticDescription(LinePosition? startLocation) 701898"];
1031 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701899"];
1032 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701900"];
1033 [label="param DiagnosticDescription(Type errorCodeType = null) 701901"];
1034 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701902"];
1035 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701903"];
1036 [label="param DiagnosticDescription(bool isSuppressed = false) 701904"];
1037 [label="param DiagnosticDescription(this) 701905"];
1038 [label="_code 701906"];
1039 [label="_isWarningAsError 701907"];
1040 [label="_isSuppressed 701908"];
1041 [label="_squiggledText 701909"];
1042 [label="_arguments 701910"];
1043 [label="_startPosition 701911"];
1044 [label="_argumentOrderDoesNotMatter 701912"];
1045 [label="_errorCodeType 701913"];
1046 [label="_ignoreArgumentsWhenComparing 701914"];
1047 [label="_defaultSeverityOpt 701915"];
1048 [label="_effectiveSeverityOpt 701916"];
1049 [label="_syntaxPredicate 701917"];
1050 [label="_showPredicate 701918"];
1051 [label="_location 701919"];
1052 [label="_argumentsAsStrings 701920"];
1053 [label="_arguments 701921"];
1054 [label="_argumentOrderDoesNotMatter 701922"];
1055 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701923"];
1056 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'c') 701924"];
1057 [label="param Diagnostic(object code) 701925"];
1058 [label="param Diagnostic(string squiggledText = null) 701926"];
1059 [label="param Diagnostic(object[] arguments = null) 701927"];
1060 [label="param Diagnostic(LinePosition? startLocation = null) 701928"];
1061 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701929"];
1062 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701930"];
1063 [label="param Diagnostic(bool isSuppressed = false) 701931"];
1064 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701932"];
1065 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701933"];
1066 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701934"];
1067 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701935"];
1068 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701936"];
1069 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701937"];
1070 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701938"];
1071 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 701939"];
1072 [label="param Diagnostic(object code) 701940"];
1073 [label="param Diagnostic(string squiggledText = null) 701941"];
1074 [label="param Diagnostic(object[] arguments = null) 701942"];
1075 [label="param Diagnostic(LinePosition? startLocation = null) 701943"];
1076 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 701944"];
1077 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 701945"];
1078 [label="param Diagnostic(bool isSuppressed = false) 701946"];
1079 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 701947"];
1080 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701948"];
1081 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701949"];
1082 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701950"];
1083 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701951"];
1084 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701952"];
1085 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701953"];
1086 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701954"];
1087 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 701955"];
1088 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 701956"];
1089 [label="param DiagnosticDescription(object code) 701957"];
1090 [label="param DiagnosticDescription(bool isWarningAsError) 701958"];
1091 [label="param DiagnosticDescription(string squiggledText) 701959"];
1092 [label="param DiagnosticDescription(object[] arguments) 701960"];
1093 [label="param DiagnosticDescription(LinePosition? startLocation) 701961"];
1094 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 701962"];
1095 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 701963"];
1096 [label="param DiagnosticDescription(Type errorCodeType = null) 701964"];
1097 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 701965"];
1098 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 701966"];
1099 [label="param DiagnosticDescription(bool isSuppressed = false) 701967"];
1100 [label="param DiagnosticDescription(this) 701968"];
1101 [label="_code 701969"];
1102 [label="_isWarningAsError 701970"];
1103 [label="_isSuppressed 701971"];
1104 [label="_squiggledText 701972"];
1105 [label="_arguments 701973"];
1106 [label="_startPosition 701974"];
1107 [label="_argumentOrderDoesNotMatter 701975"];
1108 [label="_errorCodeType 701976"];
1109 [label="_ignoreArgumentsWhenComparing 701977"];
1110 [label="_defaultSeverityOpt 701978"];
1111 [label="_effectiveSeverityOpt 701979"];
1112 [label="_syntaxPredicate 701980"];
1113 [label="_showPredicate 701981"];
1114 [label="_location 701982"];
1115 [label="_argumentsAsStrings 701983"];
1116 [label="_code 701984"];
1117 [label="_isWarningAsError 701985"];
1118 [label="_squiggledText 701986"];
1119 [label="_arguments 701987"];
1120 [label="_startPosition 701988"];
1121 [label="_syntaxPredicate 701989"];
1122 [label="_argumentOrderDoesNotMatter 701990"];
1123 [label="_errorCodeType = errorCodeType ?? code.GetType(); 701991"];
1124 [label="_errorCodeType 701992"];
1125 [label="_defaultSeverityOpt 701993"];
1126 [label="_effectiveSeverityOpt 701994"];
1127 [label="_isSuppressed 701995"];
1128 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 701996"];
1129 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 701997"];
1130 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c') 701998"];
1131 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c') 701999"];
1132 [label="param WithArguments(params object[] arguments) 702000"];
1133 [label="param WithArguments(this) 702001"];
1134 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702002"];
1135 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702003"];
1136 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702004"];
1137 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702005"];
1138 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702006"];
1139 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702007"];
1140 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702008"];
1141 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702009"];
1142 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702010"];
1143 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702011"];
1144 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702012"];
1145 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702013"];
1146 [label="param DiagnosticDescription(object code) 702014"];
1147 [label="param DiagnosticDescription(bool isWarningAsError) 702015"];
1148 [label="param DiagnosticDescription(string squiggledText) 702016"];
1149 [label="param DiagnosticDescription(object[] arguments) 702017"];
1150 [label="param DiagnosticDescription(LinePosition? startLocation) 702018"];
1151 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702019"];
1152 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702020"];
1153 [label="param DiagnosticDescription(Type errorCodeType = null) 702021"];
1154 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702022"];
1155 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702023"];
1156 [label="param DiagnosticDescription(bool isSuppressed = false) 702024"];
1157 [label="param DiagnosticDescription(this) 702025"];
1158 [label="_code 702026"];
1159 [label="_isWarningAsError 702027"];
1160 [label="_isSuppressed 702028"];
1161 [label="_squiggledText 702029"];
1162 [label="_arguments 702030"];
1163 [label="_startPosition 702031"];
1164 [label="_argumentOrderDoesNotMatter 702032"];
1165 [label="_errorCodeType 702033"];
1166 [label="_ignoreArgumentsWhenComparing 702034"];
1167 [label="_defaultSeverityOpt 702035"];
1168 [label="_effectiveSeverityOpt 702036"];
1169 [label="_syntaxPredicate 702037"];
1170 [label="_showPredicate 702038"];
1171 [label="_location 702039"];
1172 [label="_argumentsAsStrings 702040"];
1173 [label="_arguments 702041"];
1174 [label="_argumentOrderDoesNotMatter 702042"];
1175 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702043"];
1176 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>') 702044"];
1177 [label="param Diagnostic(object code) 702045"];
1178 [label="param Diagnostic(string squiggledText = null) 702046"];
1179 [label="param Diagnostic(object[] arguments = null) 702047"];
1180 [label="param Diagnostic(LinePosition? startLocation = null) 702048"];
1181 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702049"];
1182 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702050"];
1183 [label="param Diagnostic(bool isSuppressed = false) 702051"];
1184 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702052"];
1185 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702053"];
1186 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702054"];
1187 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702055"];
1188 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702056"];
1189 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702057"];
1190 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702058"];
1191 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702059"];
1192 [label="param Diagnostic(object code) 702060"];
1193 [label="param Diagnostic(string squiggledText = null) 702061"];
1194 [label="param Diagnostic(object[] arguments = null) 702062"];
1195 [label="param Diagnostic(LinePosition? startLocation = null) 702063"];
1196 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702064"];
1197 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702065"];
1198 [label="param Diagnostic(bool isSuppressed = false) 702066"];
1199 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702067"];
1200 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702068"];
1201 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702069"];
1202 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702070"];
1203 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702071"];
1204 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702072"];
1205 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702073"];
1206 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702074"];
1207 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702075"];
1208 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702076"];
1209 [label="param DiagnosticDescription(object code) 702077"];
1210 [label="param DiagnosticDescription(bool isWarningAsError) 702078"];
1211 [label="param DiagnosticDescription(string squiggledText) 702079"];
1212 [label="param DiagnosticDescription(object[] arguments) 702080"];
1213 [label="param DiagnosticDescription(LinePosition? startLocation) 702081"];
1214 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702082"];
1215 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702083"];
1216 [label="param DiagnosticDescription(Type errorCodeType = null) 702084"];
1217 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702085"];
1218 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702086"];
1219 [label="param DiagnosticDescription(bool isSuppressed = false) 702087"];
1220 [label="param DiagnosticDescription(this) 702088"];
1221 [label="_code 702089"];
1222 [label="_isWarningAsError 702090"];
1223 [label="_isSuppressed 702091"];
1224 [label="_squiggledText 702092"];
1225 [label="_arguments 702093"];
1226 [label="_startPosition 702094"];
1227 [label="_argumentOrderDoesNotMatter 702095"];
1228 [label="_errorCodeType 702096"];
1229 [label="_ignoreArgumentsWhenComparing 702097"];
1230 [label="_defaultSeverityOpt 702098"];
1231 [label="_effectiveSeverityOpt 702099"];
1232 [label="_syntaxPredicate 702100"];
1233 [label="_showPredicate 702101"];
1234 [label="_location 702102"];
1235 [label="_argumentsAsStrings 702103"];
1236 [label="_code 702104"];
1237 [label="_isWarningAsError 702105"];
1238 [label="_squiggledText 702106"];
1239 [label="_arguments 702107"];
1240 [label="_startPosition 702108"];
1241 [label="_syntaxPredicate 702109"];
1242 [label="_argumentOrderDoesNotMatter 702110"];
1243 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702111"];
1244 [label="_errorCodeType 702112"];
1245 [label="_defaultSeverityOpt 702113"];
1246 [label="_effectiveSeverityOpt 702114"];
1247 [label="_isSuppressed 702115"];
1248 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702116"];
1249 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702117"];
1250 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>') 702118"];
1251 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>') 702119"];
1252 [label="param WithArguments(params object[] arguments) 702120"];
1253 [label="param WithArguments(this) 702121"];
1254 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702122"];
1255 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702123"];
1256 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702124"];
1257 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702125"];
1258 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702126"];
1259 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702127"];
1260 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702128"];
1261 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702129"];
1262 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702130"];
1263 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702131"];
1264 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702132"];
1265 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702133"];
1266 [label="param DiagnosticDescription(object code) 702134"];
1267 [label="param DiagnosticDescription(bool isWarningAsError) 702135"];
1268 [label="param DiagnosticDescription(string squiggledText) 702136"];
1269 [label="param DiagnosticDescription(object[] arguments) 702137"];
1270 [label="param DiagnosticDescription(LinePosition? startLocation) 702138"];
1271 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702139"];
1272 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702140"];
1273 [label="param DiagnosticDescription(Type errorCodeType = null) 702141"];
1274 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702142"];
1275 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702143"];
1276 [label="param DiagnosticDescription(bool isSuppressed = false) 702144"];
1277 [label="param DiagnosticDescription(this) 702145"];
1278 [label="_code 702146"];
1279 [label="_isWarningAsError 702147"];
1280 [label="_isSuppressed 702148"];
1281 [label="_squiggledText 702149"];
1282 [label="_arguments 702150"];
1283 [label="_startPosition 702151"];
1284 [label="_argumentOrderDoesNotMatter 702152"];
1285 [label="_errorCodeType 702153"];
1286 [label="_ignoreArgumentsWhenComparing 702154"];
1287 [label="_defaultSeverityOpt 702155"];
1288 [label="_effectiveSeverityOpt 702156"];
1289 [label="_syntaxPredicate 702157"];
1290 [label="_showPredicate 702158"];
1291 [label="_location 702159"];
1292 [label="_argumentsAsStrings 702160"];
1293 [label="_arguments 702161"];
1294 [label="_argumentOrderDoesNotMatter 702162"];
1295 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702163"];
1296 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'd') 702164"];
1297 [label="param Diagnostic(object code) 702165"];
1298 [label="param Diagnostic(string squiggledText = null) 702166"];
1299 [label="param Diagnostic(object[] arguments = null) 702167"];
1300 [label="param Diagnostic(LinePosition? startLocation = null) 702168"];
1301 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702169"];
1302 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702170"];
1303 [label="param Diagnostic(bool isSuppressed = false) 702171"];
1304 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702172"];
1305 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702173"];
1306 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702174"];
1307 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702175"];
1308 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702176"];
1309 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702177"];
1310 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702178"];
1311 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702179"];
1312 [label="param Diagnostic(object code) 702180"];
1313 [label="param Diagnostic(string squiggledText = null) 702181"];
1314 [label="param Diagnostic(object[] arguments = null) 702182"];
1315 [label="param Diagnostic(LinePosition? startLocation = null) 702183"];
1316 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702184"];
1317 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702185"];
1318 [label="param Diagnostic(bool isSuppressed = false) 702186"];
1319 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702187"];
1320 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702188"];
1321 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702189"];
1322 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702190"];
1323 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702191"];
1324 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702192"];
1325 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702193"];
1326 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702194"];
1327 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702195"];
1328 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702196"];
1329 [label="param DiagnosticDescription(object code) 702197"];
1330 [label="param DiagnosticDescription(bool isWarningAsError) 702198"];
1331 [label="param DiagnosticDescription(string squiggledText) 702199"];
1332 [label="param DiagnosticDescription(object[] arguments) 702200"];
1333 [label="param DiagnosticDescription(LinePosition? startLocation) 702201"];
1334 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702202"];
1335 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702203"];
1336 [label="param DiagnosticDescription(Type errorCodeType = null) 702204"];
1337 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702205"];
1338 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702206"];
1339 [label="param DiagnosticDescription(bool isSuppressed = false) 702207"];
1340 [label="param DiagnosticDescription(this) 702208"];
1341 [label="_code 702209"];
1342 [label="_isWarningAsError 702210"];
1343 [label="_isSuppressed 702211"];
1344 [label="_squiggledText 702212"];
1345 [label="_arguments 702213"];
1346 [label="_startPosition 702214"];
1347 [label="_argumentOrderDoesNotMatter 702215"];
1348 [label="_errorCodeType 702216"];
1349 [label="_ignoreArgumentsWhenComparing 702217"];
1350 [label="_defaultSeverityOpt 702218"];
1351 [label="_effectiveSeverityOpt 702219"];
1352 [label="_syntaxPredicate 702220"];
1353 [label="_showPredicate 702221"];
1354 [label="_location 702222"];
1355 [label="_argumentsAsStrings 702223"];
1356 [label="_code 702224"];
1357 [label="_isWarningAsError 702225"];
1358 [label="_squiggledText 702226"];
1359 [label="_arguments 702227"];
1360 [label="_startPosition 702228"];
1361 [label="_syntaxPredicate 702229"];
1362 [label="_argumentOrderDoesNotMatter 702230"];
1363 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702231"];
1364 [label="_errorCodeType 702232"];
1365 [label="_defaultSeverityOpt 702233"];
1366 [label="_effectiveSeverityOpt 702234"];
1367 [label="_isSuppressed 702235"];
1368 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702236"];
1369 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702237"];
1370 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d') 702238"];
1371 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d') 702239"];
1372 [label="param WithArguments(params object[] arguments) 702240"];
1373 [label="param WithArguments(this) 702241"];
1374 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702242"];
1375 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702243"];
1376 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702244"];
1377 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702245"];
1378 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702246"];
1379 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702247"];
1380 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702248"];
1381 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702249"];
1382 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702250"];
1383 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702251"];
1384 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702252"];
1385 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702253"];
1386 [label="param DiagnosticDescription(object code) 702254"];
1387 [label="param DiagnosticDescription(bool isWarningAsError) 702255"];
1388 [label="param DiagnosticDescription(string squiggledText) 702256"];
1389 [label="param DiagnosticDescription(object[] arguments) 702257"];
1390 [label="param DiagnosticDescription(LinePosition? startLocation) 702258"];
1391 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702259"];
1392 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702260"];
1393 [label="param DiagnosticDescription(Type errorCodeType = null) 702261"];
1394 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702262"];
1395 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702263"];
1396 [label="param DiagnosticDescription(bool isSuppressed = false) 702264"];
1397 [label="param DiagnosticDescription(this) 702265"];
1398 [label="_code 702266"];
1399 [label="_isWarningAsError 702267"];
1400 [label="_isSuppressed 702268"];
1401 [label="_squiggledText 702269"];
1402 [label="_arguments 702270"];
1403 [label="_startPosition 702271"];
1404 [label="_argumentOrderDoesNotMatter 702272"];
1405 [label="_errorCodeType 702273"];
1406 [label="_ignoreArgumentsWhenComparing 702274"];
1407 [label="_defaultSeverityOpt 702275"];
1408 [label="_effectiveSeverityOpt 702276"];
1409 [label="_syntaxPredicate 702277"];
1410 [label="_showPredicate 702278"];
1411 [label="_location 702279"];
1412 [label="_argumentsAsStrings 702280"];
1413 [label="_arguments 702281"];
1414 [label="_argumentOrderDoesNotMatter 702282"];
1415 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702283"];
1416 [label="Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D') 702284"];
1417 [label="param Diagnostic(object code) 702285"];
1418 [label="param Diagnostic(string squiggledText = null) 702286"];
1419 [label="param Diagnostic(object[] arguments = null) 702287"];
1420 [label="param Diagnostic(LinePosition? startLocation = null) 702288"];
1421 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702289"];
1422 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702290"];
1423 [label="param Diagnostic(bool isSuppressed = false) 702291"];
1424 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702292"];
1425 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702293"];
1426 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702294"];
1427 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702295"];
1428 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702296"];
1429 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702297"];
1430 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702298"];
1431 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702299"];
1432 [label="param Diagnostic(object code) 702300"];
1433 [label="param Diagnostic(string squiggledText = null) 702301"];
1434 [label="param Diagnostic(object[] arguments = null) 702302"];
1435 [label="param Diagnostic(LinePosition? startLocation = null) 702303"];
1436 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702304"];
1437 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702305"];
1438 [label="param Diagnostic(bool isSuppressed = false) 702306"];
1439 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702307"];
1440 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702308"];
1441 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702309"];
1442 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702310"];
1443 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702311"];
1444 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702312"];
1445 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702313"];
1446 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702314"];
1447 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702315"];
1448 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702316"];
1449 [label="param DiagnosticDescription(object code) 702317"];
1450 [label="param DiagnosticDescription(bool isWarningAsError) 702318"];
1451 [label="param DiagnosticDescription(string squiggledText) 702319"];
1452 [label="param DiagnosticDescription(object[] arguments) 702320"];
1453 [label="param DiagnosticDescription(LinePosition? startLocation) 702321"];
1454 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702322"];
1455 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702323"];
1456 [label="param DiagnosticDescription(Type errorCodeType = null) 702324"];
1457 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702325"];
1458 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702326"];
1459 [label="param DiagnosticDescription(bool isSuppressed = false) 702327"];
1460 [label="param DiagnosticDescription(this) 702328"];
1461 [label="_code 702329"];
1462 [label="_isWarningAsError 702330"];
1463 [label="_isSuppressed 702331"];
1464 [label="_squiggledText 702332"];
1465 [label="_arguments 702333"];
1466 [label="_startPosition 702334"];
1467 [label="_argumentOrderDoesNotMatter 702335"];
1468 [label="_errorCodeType 702336"];
1469 [label="_ignoreArgumentsWhenComparing 702337"];
1470 [label="_defaultSeverityOpt 702338"];
1471 [label="_effectiveSeverityOpt 702339"];
1472 [label="_syntaxPredicate 702340"];
1473 [label="_showPredicate 702341"];
1474 [label="_location 702342"];
1475 [label="_argumentsAsStrings 702343"];
1476 [label="_code 702344"];
1477 [label="_isWarningAsError 702345"];
1478 [label="_squiggledText 702346"];
1479 [label="_arguments 702347"];
1480 [label="_startPosition 702348"];
1481 [label="_syntaxPredicate 702349"];
1482 [label="_argumentOrderDoesNotMatter 702350"];
1483 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702351"];
1484 [label="_errorCodeType 702352"];
1485 [label="_defaultSeverityOpt 702353"];
1486 [label="_effectiveSeverityOpt 702354"];
1487 [label="_isSuppressed 702355"];
1488 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702356"];
1489 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702357"];
1490 [label="Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N') 702358"];
1491 [label="Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N') 702359"];
1492 [label="param WithArguments(params object[] arguments) 702360"];
1493 [label="param WithArguments(this) 702361"];
1494 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702362"];
1495 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702363"];
1496 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702364"];
1497 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702365"];
1498 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702366"];
1499 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702367"];
1500 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702368"];
1501 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702369"];
1502 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702370"];
1503 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702371"];
1504 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702372"];
1505 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702373"];
1506 [label="param DiagnosticDescription(object code) 702374"];
1507 [label="param DiagnosticDescription(bool isWarningAsError) 702375"];
1508 [label="param DiagnosticDescription(string squiggledText) 702376"];
1509 [label="param DiagnosticDescription(object[] arguments) 702377"];
1510 [label="param DiagnosticDescription(LinePosition? startLocation) 702378"];
1511 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702379"];
1512 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702380"];
1513 [label="param DiagnosticDescription(Type errorCodeType = null) 702381"];
1514 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702382"];
1515 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702383"];
1516 [label="param DiagnosticDescription(bool isSuppressed = false) 702384"];
1517 [label="param DiagnosticDescription(this) 702385"];
1518 [label="_code 702386"];
1519 [label="_isWarningAsError 702387"];
1520 [label="_isSuppressed 702388"];
1521 [label="_squiggledText 702389"];
1522 [label="_arguments 702390"];
1523 [label="_startPosition 702391"];
1524 [label="_argumentOrderDoesNotMatter 702392"];
1525 [label="_errorCodeType 702393"];
1526 [label="_ignoreArgumentsWhenComparing 702394"];
1527 [label="_defaultSeverityOpt 702395"];
1528 [label="_effectiveSeverityOpt 702396"];
1529 [label="_syntaxPredicate 702397"];
1530 [label="_showPredicate 702398"];
1531 [label="_location 702399"];
1532 [label="_argumentsAsStrings 702400"];
1533 [label="_arguments 702401"];
1534 [label="_argumentOrderDoesNotMatter 702402"];
1535 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702403"];
1536 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'e') 702404"];
1537 [label="param Diagnostic(object code) 702405"];
1538 [label="param Diagnostic(string squiggledText = null) 702406"];
1539 [label="param Diagnostic(object[] arguments = null) 702407"];
1540 [label="param Diagnostic(LinePosition? startLocation = null) 702408"];
1541 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702409"];
1542 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702410"];
1543 [label="param Diagnostic(bool isSuppressed = false) 702411"];
1544 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702412"];
1545 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702413"];
1546 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702414"];
1547 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702415"];
1548 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702416"];
1549 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702417"];
1550 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702418"];
1551 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702419"];
1552 [label="param Diagnostic(object code) 702420"];
1553 [label="param Diagnostic(string squiggledText = null) 702421"];
1554 [label="param Diagnostic(object[] arguments = null) 702422"];
1555 [label="param Diagnostic(LinePosition? startLocation = null) 702423"];
1556 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702424"];
1557 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702425"];
1558 [label="param Diagnostic(bool isSuppressed = false) 702426"];
1559 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702427"];
1560 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702428"];
1561 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702429"];
1562 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702430"];
1563 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702431"];
1564 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702432"];
1565 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702433"];
1566 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702434"];
1567 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702435"];
1568 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702436"];
1569 [label="param DiagnosticDescription(object code) 702437"];
1570 [label="param DiagnosticDescription(bool isWarningAsError) 702438"];
1571 [label="param DiagnosticDescription(string squiggledText) 702439"];
1572 [label="param DiagnosticDescription(object[] arguments) 702440"];
1573 [label="param DiagnosticDescription(LinePosition? startLocation) 702441"];
1574 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702442"];
1575 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702443"];
1576 [label="param DiagnosticDescription(Type errorCodeType = null) 702444"];
1577 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702445"];
1578 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702446"];
1579 [label="param DiagnosticDescription(bool isSuppressed = false) 702447"];
1580 [label="param DiagnosticDescription(this) 702448"];
1581 [label="_code 702449"];
1582 [label="_isWarningAsError 702450"];
1583 [label="_isSuppressed 702451"];
1584 [label="_squiggledText 702452"];
1585 [label="_arguments 702453"];
1586 [label="_startPosition 702454"];
1587 [label="_argumentOrderDoesNotMatter 702455"];
1588 [label="_errorCodeType 702456"];
1589 [label="_ignoreArgumentsWhenComparing 702457"];
1590 [label="_defaultSeverityOpt 702458"];
1591 [label="_effectiveSeverityOpt 702459"];
1592 [label="_syntaxPredicate 702460"];
1593 [label="_showPredicate 702461"];
1594 [label="_location 702462"];
1595 [label="_argumentsAsStrings 702463"];
1596 [label="_code 702464"];
1597 [label="_isWarningAsError 702465"];
1598 [label="_squiggledText 702466"];
1599 [label="_arguments 702467"];
1600 [label="_startPosition 702468"];
1601 [label="_syntaxPredicate 702469"];
1602 [label="_argumentOrderDoesNotMatter 702470"];
1603 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702471"];
1604 [label="_errorCodeType 702472"];
1605 [label="_defaultSeverityOpt 702473"];
1606 [label="_effectiveSeverityOpt 702474"];
1607 [label="_isSuppressed 702475"];
1608 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702476"];
1609 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702477"];
1610 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e') 702478"];
1611 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e') 702479"];
1612 [label="param WithArguments(params object[] arguments) 702480"];
1613 [label="param WithArguments(this) 702481"];
1614 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702482"];
1615 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702483"];
1616 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702484"];
1617 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702485"];
1618 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702486"];
1619 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702487"];
1620 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702488"];
1621 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702489"];
1622 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702490"];
1623 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702491"];
1624 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702492"];
1625 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702493"];
1626 [label="param DiagnosticDescription(object code) 702494"];
1627 [label="param DiagnosticDescription(bool isWarningAsError) 702495"];
1628 [label="param DiagnosticDescription(string squiggledText) 702496"];
1629 [label="param DiagnosticDescription(object[] arguments) 702497"];
1630 [label="param DiagnosticDescription(LinePosition? startLocation) 702498"];
1631 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702499"];
1632 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702500"];
1633 [label="param DiagnosticDescription(Type errorCodeType = null) 702501"];
1634 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702502"];
1635 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702503"];
1636 [label="param DiagnosticDescription(bool isSuppressed = false) 702504"];
1637 [label="param DiagnosticDescription(this) 702505"];
1638 [label="_code 702506"];
1639 [label="_isWarningAsError 702507"];
1640 [label="_isSuppressed 702508"];
1641 [label="_squiggledText 702509"];
1642 [label="_arguments 702510"];
1643 [label="_startPosition 702511"];
1644 [label="_argumentOrderDoesNotMatter 702512"];
1645 [label="_errorCodeType 702513"];
1646 [label="_ignoreArgumentsWhenComparing 702514"];
1647 [label="_defaultSeverityOpt 702515"];
1648 [label="_effectiveSeverityOpt 702516"];
1649 [label="_syntaxPredicate 702517"];
1650 [label="_showPredicate 702518"];
1651 [label="_location 702519"];
1652 [label="_argumentsAsStrings 702520"];
1653 [label="_arguments 702521"];
1654 [label="_argumentOrderDoesNotMatter 702522"];
1655 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702523"];
1656 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'T') 702524"];
1657 [label="param Diagnostic(object code) 702525"];
1658 [label="param Diagnostic(string squiggledText = null) 702526"];
1659 [label="param Diagnostic(object[] arguments = null) 702527"];
1660 [label="param Diagnostic(LinePosition? startLocation = null) 702528"];
1661 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702529"];
1662 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702530"];
1663 [label="param Diagnostic(bool isSuppressed = false) 702531"];
1664 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702532"];
1665 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702533"];
1666 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702534"];
1667 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702535"];
1668 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702536"];
1669 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702537"];
1670 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702538"];
1671 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702539"];
1672 [label="param Diagnostic(object code) 702540"];
1673 [label="param Diagnostic(string squiggledText = null) 702541"];
1674 [label="param Diagnostic(object[] arguments = null) 702542"];
1675 [label="param Diagnostic(LinePosition? startLocation = null) 702543"];
1676 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702544"];
1677 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702545"];
1678 [label="param Diagnostic(bool isSuppressed = false) 702546"];
1679 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702547"];
1680 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702548"];
1681 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702549"];
1682 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702550"];
1683 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702551"];
1684 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702552"];
1685 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702553"];
1686 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702554"];
1687 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702555"];
1688 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702556"];
1689 [label="param DiagnosticDescription(object code) 702557"];
1690 [label="param DiagnosticDescription(bool isWarningAsError) 702558"];
1691 [label="param DiagnosticDescription(string squiggledText) 702559"];
1692 [label="param DiagnosticDescription(object[] arguments) 702560"];
1693 [label="param DiagnosticDescription(LinePosition? startLocation) 702561"];
1694 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702562"];
1695 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702563"];
1696 [label="param DiagnosticDescription(Type errorCodeType = null) 702564"];
1697 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702565"];
1698 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702566"];
1699 [label="param DiagnosticDescription(bool isSuppressed = false) 702567"];
1700 [label="param DiagnosticDescription(this) 702568"];
1701 [label="_code 702569"];
1702 [label="_isWarningAsError 702570"];
1703 [label="_isSuppressed 702571"];
1704 [label="_squiggledText 702572"];
1705 [label="_arguments 702573"];
1706 [label="_startPosition 702574"];
1707 [label="_argumentOrderDoesNotMatter 702575"];
1708 [label="_errorCodeType 702576"];
1709 [label="_ignoreArgumentsWhenComparing 702577"];
1710 [label="_defaultSeverityOpt 702578"];
1711 [label="_effectiveSeverityOpt 702579"];
1712 [label="_syntaxPredicate 702580"];
1713 [label="_showPredicate 702581"];
1714 [label="_location 702582"];
1715 [label="_argumentsAsStrings 702583"];
1716 [label="_code 702584"];
1717 [label="_isWarningAsError 702585"];
1718 [label="_squiggledText 702586"];
1719 [label="_arguments 702587"];
1720 [label="_startPosition 702588"];
1721 [label="_syntaxPredicate 702589"];
1722 [label="_argumentOrderDoesNotMatter 702590"];
1723 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702591"];
1724 [label="_errorCodeType 702592"];
1725 [label="_defaultSeverityOpt 702593"];
1726 [label="_effectiveSeverityOpt 702594"];
1727 [label="_isSuppressed 702595"];
1728 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702596"];
1729 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702597"];
1730 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T') 702598"];
1731 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T') 702599"];
1732 [label="param WithArguments(params object[] arguments) 702600"];
1733 [label="param WithArguments(this) 702601"];
1734 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702602"];
1735 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702603"];
1736 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702604"];
1737 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702605"];
1738 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702606"];
1739 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702607"];
1740 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702608"];
1741 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702609"];
1742 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702610"];
1743 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702611"];
1744 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702612"];
1745 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702613"];
1746 [label="param DiagnosticDescription(object code) 702614"];
1747 [label="param DiagnosticDescription(bool isWarningAsError) 702615"];
1748 [label="param DiagnosticDescription(string squiggledText) 702616"];
1749 [label="param DiagnosticDescription(object[] arguments) 702617"];
1750 [label="param DiagnosticDescription(LinePosition? startLocation) 702618"];
1751 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702619"];
1752 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702620"];
1753 [label="param DiagnosticDescription(Type errorCodeType = null) 702621"];
1754 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702622"];
1755 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702623"];
1756 [label="param DiagnosticDescription(bool isSuppressed = false) 702624"];
1757 [label="param DiagnosticDescription(this) 702625"];
1758 [label="_code 702626"];
1759 [label="_isWarningAsError 702627"];
1760 [label="_isSuppressed 702628"];
1761 [label="_squiggledText 702629"];
1762 [label="_arguments 702630"];
1763 [label="_startPosition 702631"];
1764 [label="_argumentOrderDoesNotMatter 702632"];
1765 [label="_errorCodeType 702633"];
1766 [label="_ignoreArgumentsWhenComparing 702634"];
1767 [label="_defaultSeverityOpt 702635"];
1768 [label="_effectiveSeverityOpt 702636"];
1769 [label="_syntaxPredicate 702637"];
1770 [label="_showPredicate 702638"];
1771 [label="_location 702639"];
1772 [label="_argumentsAsStrings 702640"];
1773 [label="_arguments 702641"];
1774 [label="_argumentOrderDoesNotMatter 702642"];
1775 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702643"];
1776 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'f') 702644"];
1777 [label="param Diagnostic(object code) 702645"];
1778 [label="param Diagnostic(string squiggledText = null) 702646"];
1779 [label="param Diagnostic(object[] arguments = null) 702647"];
1780 [label="param Diagnostic(LinePosition? startLocation = null) 702648"];
1781 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702649"];
1782 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702650"];
1783 [label="param Diagnostic(bool isSuppressed = false) 702651"];
1784 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702652"];
1785 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702653"];
1786 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702654"];
1787 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702655"];
1788 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702656"];
1789 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702657"];
1790 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702658"];
1791 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702659"];
1792 [label="param Diagnostic(object code) 702660"];
1793 [label="param Diagnostic(string squiggledText = null) 702661"];
1794 [label="param Diagnostic(object[] arguments = null) 702662"];
1795 [label="param Diagnostic(LinePosition? startLocation = null) 702663"];
1796 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702664"];
1797 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702665"];
1798 [label="param Diagnostic(bool isSuppressed = false) 702666"];
1799 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702667"];
1800 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702668"];
1801 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702669"];
1802 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702670"];
1803 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702671"];
1804 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702672"];
1805 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702673"];
1806 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702674"];
1807 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702675"];
1808 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702676"];
1809 [label="param DiagnosticDescription(object code) 702677"];
1810 [label="param DiagnosticDescription(bool isWarningAsError) 702678"];
1811 [label="param DiagnosticDescription(string squiggledText) 702679"];
1812 [label="param DiagnosticDescription(object[] arguments) 702680"];
1813 [label="param DiagnosticDescription(LinePosition? startLocation) 702681"];
1814 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702682"];
1815 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702683"];
1816 [label="param DiagnosticDescription(Type errorCodeType = null) 702684"];
1817 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702685"];
1818 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702686"];
1819 [label="param DiagnosticDescription(bool isSuppressed = false) 702687"];
1820 [label="param DiagnosticDescription(this) 702688"];
1821 [label="_code 702689"];
1822 [label="_isWarningAsError 702690"];
1823 [label="_isSuppressed 702691"];
1824 [label="_squiggledText 702692"];
1825 [label="_arguments 702693"];
1826 [label="_startPosition 702694"];
1827 [label="_argumentOrderDoesNotMatter 702695"];
1828 [label="_errorCodeType 702696"];
1829 [label="_ignoreArgumentsWhenComparing 702697"];
1830 [label="_defaultSeverityOpt 702698"];
1831 [label="_effectiveSeverityOpt 702699"];
1832 [label="_syntaxPredicate 702700"];
1833 [label="_showPredicate 702701"];
1834 [label="_location 702702"];
1835 [label="_argumentsAsStrings 702703"];
1836 [label="_code 702704"];
1837 [label="_isWarningAsError 702705"];
1838 [label="_squiggledText 702706"];
1839 [label="_arguments 702707"];
1840 [label="_startPosition 702708"];
1841 [label="_syntaxPredicate 702709"];
1842 [label="_argumentOrderDoesNotMatter 702710"];
1843 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702711"];
1844 [label="_errorCodeType 702712"];
1845 [label="_defaultSeverityOpt 702713"];
1846 [label="_effectiveSeverityOpt 702714"];
1847 [label="_isSuppressed 702715"];
1848 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702716"];
1849 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702717"];
1850 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f') 702718"];
1851 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f') 702719"];
1852 [label="param WithArguments(params object[] arguments) 702720"];
1853 [label="param WithArguments(this) 702721"];
1854 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702722"];
1855 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702723"];
1856 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702724"];
1857 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702725"];
1858 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702726"];
1859 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702727"];
1860 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702728"];
1861 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702729"];
1862 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702730"];
1863 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702731"];
1864 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702732"];
1865 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702733"];
1866 [label="param DiagnosticDescription(object code) 702734"];
1867 [label="param DiagnosticDescription(bool isWarningAsError) 702735"];
1868 [label="param DiagnosticDescription(string squiggledText) 702736"];
1869 [label="param DiagnosticDescription(object[] arguments) 702737"];
1870 [label="param DiagnosticDescription(LinePosition? startLocation) 702738"];
1871 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702739"];
1872 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702740"];
1873 [label="param DiagnosticDescription(Type errorCodeType = null) 702741"];
1874 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702742"];
1875 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702743"];
1876 [label="param DiagnosticDescription(bool isSuppressed = false) 702744"];
1877 [label="param DiagnosticDescription(this) 702745"];
1878 [label="_code 702746"];
1879 [label="_isWarningAsError 702747"];
1880 [label="_isSuppressed 702748"];
1881 [label="_squiggledText 702749"];
1882 [label="_arguments 702750"];
1883 [label="_startPosition 702751"];
1884 [label="_argumentOrderDoesNotMatter 702752"];
1885 [label="_errorCodeType 702753"];
1886 [label="_ignoreArgumentsWhenComparing 702754"];
1887 [label="_defaultSeverityOpt 702755"];
1888 [label="_effectiveSeverityOpt 702756"];
1889 [label="_syntaxPredicate 702757"];
1890 [label="_showPredicate 702758"];
1891 [label="_location 702759"];
1892 [label="_argumentsAsStrings 702760"];
1893 [label="_arguments 702761"];
1894 [label="_argumentOrderDoesNotMatter 702762"];
1895 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702763"];
1896 [label="Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))') 702764"];
1897 [label="param Diagnostic(object code) 702765"];
1898 [label="param Diagnostic(string squiggledText = null) 702766"];
1899 [label="param Diagnostic(object[] arguments = null) 702767"];
1900 [label="param Diagnostic(LinePosition? startLocation = null) 702768"];
1901 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702769"];
1902 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702770"];
1903 [label="param Diagnostic(bool isSuppressed = false) 702771"];
1904 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702772"];
1905 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702773"];
1906 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702774"];
1907 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702775"];
1908 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702776"];
1909 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702777"];
1910 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702778"];
1911 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702779"];
1912 [label="param Diagnostic(object code) 702780"];
1913 [label="param Diagnostic(string squiggledText = null) 702781"];
1914 [label="param Diagnostic(object[] arguments = null) 702782"];
1915 [label="param Diagnostic(LinePosition? startLocation = null) 702783"];
1916 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702784"];
1917 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702785"];
1918 [label="param Diagnostic(bool isSuppressed = false) 702786"];
1919 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702787"];
1920 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702788"];
1921 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702789"];
1922 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702790"];
1923 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702791"];
1924 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702792"];
1925 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702793"];
1926 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702794"];
1927 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702795"];
1928 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702796"];
1929 [label="param DiagnosticDescription(object code) 702797"];
1930 [label="param DiagnosticDescription(bool isWarningAsError) 702798"];
1931 [label="param DiagnosticDescription(string squiggledText) 702799"];
1932 [label="param DiagnosticDescription(object[] arguments) 702800"];
1933 [label="param DiagnosticDescription(LinePosition? startLocation) 702801"];
1934 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702802"];
1935 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702803"];
1936 [label="param DiagnosticDescription(Type errorCodeType = null) 702804"];
1937 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702805"];
1938 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702806"];
1939 [label="param DiagnosticDescription(bool isSuppressed = false) 702807"];
1940 [label="param DiagnosticDescription(this) 702808"];
1941 [label="_code 702809"];
1942 [label="_isWarningAsError 702810"];
1943 [label="_isSuppressed 702811"];
1944 [label="_squiggledText 702812"];
1945 [label="_arguments 702813"];
1946 [label="_startPosition 702814"];
1947 [label="_argumentOrderDoesNotMatter 702815"];
1948 [label="_errorCodeType 702816"];
1949 [label="_ignoreArgumentsWhenComparing 702817"];
1950 [label="_defaultSeverityOpt 702818"];
1951 [label="_effectiveSeverityOpt 702819"];
1952 [label="_syntaxPredicate 702820"];
1953 [label="_showPredicate 702821"];
1954 [label="_location 702822"];
1955 [label="_argumentsAsStrings 702823"];
1956 [label="_code 702824"];
1957 [label="_isWarningAsError 702825"];
1958 [label="_squiggledText 702826"];
1959 [label="_arguments 702827"];
1960 [label="_startPosition 702828"];
1961 [label="_syntaxPredicate 702829"];
1962 [label="_argumentOrderDoesNotMatter 702830"];
1963 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702831"];
1964 [label="_errorCodeType 702832"];
1965 [label="_defaultSeverityOpt 702833"];
1966 [label="_effectiveSeverityOpt 702834"];
1967 [label="_isSuppressed 702835"];
1968 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702836"];
1969 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702837"];
1970 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'g') 702838"];
1971 [label="param Diagnostic(object code) 702839"];
1972 [label="param Diagnostic(string squiggledText = null) 702840"];
1973 [label="param Diagnostic(object[] arguments = null) 702841"];
1974 [label="param Diagnostic(LinePosition? startLocation = null) 702842"];
1975 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702843"];
1976 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702844"];
1977 [label="param Diagnostic(bool isSuppressed = false) 702845"];
1978 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702846"];
1979 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702847"];
1980 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702848"];
1981 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702849"];
1982 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702850"];
1983 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702851"];
1984 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702852"];
1985 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702853"];
1986 [label="param Diagnostic(object code) 702854"];
1987 [label="param Diagnostic(string squiggledText = null) 702855"];
1988 [label="param Diagnostic(object[] arguments = null) 702856"];
1989 [label="param Diagnostic(LinePosition? startLocation = null) 702857"];
1990 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702858"];
1991 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702859"];
1992 [label="param Diagnostic(bool isSuppressed = false) 702860"];
1993 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702861"];
1994 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702862"];
1995 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702863"];
1996 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702864"];
1997 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702865"];
1998 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702866"];
1999 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702867"];
2000 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702868"];
2001 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702869"];
2002 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702870"];
2003 [label="param DiagnosticDescription(object code) 702871"];
2004 [label="param DiagnosticDescription(bool isWarningAsError) 702872"];
2005 [label="param DiagnosticDescription(string squiggledText) 702873"];
2006 [label="param DiagnosticDescription(object[] arguments) 702874"];
2007 [label="param DiagnosticDescription(LinePosition? startLocation) 702875"];
2008 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702876"];
2009 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702877"];
2010 [label="param DiagnosticDescription(Type errorCodeType = null) 702878"];
2011 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702879"];
2012 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702880"];
2013 [label="param DiagnosticDescription(bool isSuppressed = false) 702881"];
2014 [label="param DiagnosticDescription(this) 702882"];
2015 [label="_code 702883"];
2016 [label="_isWarningAsError 702884"];
2017 [label="_isSuppressed 702885"];
2018 [label="_squiggledText 702886"];
2019 [label="_arguments 702887"];
2020 [label="_startPosition 702888"];
2021 [label="_argumentOrderDoesNotMatter 702889"];
2022 [label="_errorCodeType 702890"];
2023 [label="_ignoreArgumentsWhenComparing 702891"];
2024 [label="_defaultSeverityOpt 702892"];
2025 [label="_effectiveSeverityOpt 702893"];
2026 [label="_syntaxPredicate 702894"];
2027 [label="_showPredicate 702895"];
2028 [label="_location 702896"];
2029 [label="_argumentsAsStrings 702897"];
2030 [label="_code 702898"];
2031 [label="_isWarningAsError 702899"];
2032 [label="_squiggledText 702900"];
2033 [label="_arguments 702901"];
2034 [label="_startPosition 702902"];
2035 [label="_syntaxPredicate 702903"];
2036 [label="_argumentOrderDoesNotMatter 702904"];
2037 [label="_errorCodeType = errorCodeType ?? code.GetType(); 702905"];
2038 [label="_errorCodeType 702906"];
2039 [label="_defaultSeverityOpt 702907"];
2040 [label="_effectiveSeverityOpt 702908"];
2041 [label="_isSuppressed 702909"];
2042 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702910"];
2043 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702911"];
2044 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g') 702912"];
2045 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g') 702913"];
2046 [label="param WithArguments(params object[] arguments) 702914"];
2047 [label="param WithArguments(this) 702915"];
2048 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702916"];
2049 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702917"];
2050 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702918"];
2051 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702919"];
2052 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702920"];
2053 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702921"];
2054 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702922"];
2055 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702923"];
2056 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702924"];
2057 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702925"];
2058 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 702926"];
2059 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 702927"];
2060 [label="param DiagnosticDescription(object code) 702928"];
2061 [label="param DiagnosticDescription(bool isWarningAsError) 702929"];
2062 [label="param DiagnosticDescription(string squiggledText) 702930"];
2063 [label="param DiagnosticDescription(object[] arguments) 702931"];
2064 [label="param DiagnosticDescription(LinePosition? startLocation) 702932"];
2065 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702933"];
2066 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702934"];
2067 [label="param DiagnosticDescription(Type errorCodeType = null) 702935"];
2068 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702936"];
2069 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 702937"];
2070 [label="param DiagnosticDescription(bool isSuppressed = false) 702938"];
2071 [label="param DiagnosticDescription(this) 702939"];
2072 [label="_code 702940"];
2073 [label="_isWarningAsError 702941"];
2074 [label="_isSuppressed 702942"];
2075 [label="_squiggledText 702943"];
2076 [label="_arguments 702944"];
2077 [label="_startPosition 702945"];
2078 [label="_argumentOrderDoesNotMatter 702946"];
2079 [label="_errorCodeType 702947"];
2080 [label="_ignoreArgumentsWhenComparing 702948"];
2081 [label="_defaultSeverityOpt 702949"];
2082 [label="_effectiveSeverityOpt 702950"];
2083 [label="_syntaxPredicate 702951"];
2084 [label="_showPredicate 702952"];
2085 [label="_location 702953"];
2086 [label="_argumentsAsStrings 702954"];
2087 [label="_arguments 702955"];
2088 [label="_argumentOrderDoesNotMatter 702956"];
2089 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 702957"];
2090 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P') 702958"];
2091 [label="param Diagnostic(object code) 702959"];
2092 [label="param Diagnostic(string squiggledText = null) 702960"];
2093 [label="param Diagnostic(object[] arguments = null) 702961"];
2094 [label="param Diagnostic(LinePosition? startLocation = null) 702962"];
2095 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702963"];
2096 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702964"];
2097 [label="param Diagnostic(bool isSuppressed = false) 702965"];
2098 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702966"];
2099 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702967"];
2100 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702968"];
2101 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702969"];
2102 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702970"];
2103 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702971"];
2104 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 702972"];
2105 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 702973"];
2106 [label="param Diagnostic(object code) 702974"];
2107 [label="param Diagnostic(string squiggledText = null) 702975"];
2108 [label="param Diagnostic(object[] arguments = null) 702976"];
2109 [label="param Diagnostic(LinePosition? startLocation = null) 702977"];
2110 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 702978"];
2111 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 702979"];
2112 [label="param Diagnostic(bool isSuppressed = false) 702980"];
2113 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 702981"];
2114 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702982"];
2115 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702983"];
2116 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702984"];
2117 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702985"];
2118 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702986"];
2119 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702987"];
2120 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702988"];
2121 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 702989"];
2122 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 702990"];
2123 [label="param DiagnosticDescription(object code) 702991"];
2124 [label="param DiagnosticDescription(bool isWarningAsError) 702992"];
2125 [label="param DiagnosticDescription(string squiggledText) 702993"];
2126 [label="param DiagnosticDescription(object[] arguments) 702994"];
2127 [label="param DiagnosticDescription(LinePosition? startLocation) 702995"];
2128 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 702996"];
2129 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 702997"];
2130 [label="param DiagnosticDescription(Type errorCodeType = null) 702998"];
2131 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 702999"];
2132 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703000"];
2133 [label="param DiagnosticDescription(bool isSuppressed = false) 703001"];
2134 [label="param DiagnosticDescription(this) 703002"];
2135 [label="_code 703003"];
2136 [label="_isWarningAsError 703004"];
2137 [label="_isSuppressed 703005"];
2138 [label="_squiggledText 703006"];
2139 [label="_arguments 703007"];
2140 [label="_startPosition 703008"];
2141 [label="_argumentOrderDoesNotMatter 703009"];
2142 [label="_errorCodeType 703010"];
2143 [label="_ignoreArgumentsWhenComparing 703011"];
2144 [label="_defaultSeverityOpt 703012"];
2145 [label="_effectiveSeverityOpt 703013"];
2146 [label="_syntaxPredicate 703014"];
2147 [label="_showPredicate 703015"];
2148 [label="_location 703016"];
2149 [label="_argumentsAsStrings 703017"];
2150 [label="_code 703018"];
2151 [label="_isWarningAsError 703019"];
2152 [label="_squiggledText 703020"];
2153 [label="_arguments 703021"];
2154 [label="_startPosition 703022"];
2155 [label="_syntaxPredicate 703023"];
2156 [label="_argumentOrderDoesNotMatter 703024"];
2157 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703025"];
2158 [label="_errorCodeType 703026"];
2159 [label="_defaultSeverityOpt 703027"];
2160 [label="_effectiveSeverityOpt 703028"];
2161 [label="_isSuppressed 703029"];
2162 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703030"];
2163 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703031"];
2164 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P') 703032"];
2165 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P') 703033"];
2166 [label="param WithArguments(params object[] arguments) 703034"];
2167 [label="param WithArguments(this) 703035"];
2168 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703036"];
2169 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703037"];
2170 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703038"];
2171 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703039"];
2172 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703040"];
2173 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703041"];
2174 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703042"];
2175 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703043"];
2176 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703044"];
2177 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703045"];
2178 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703046"];
2179 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703047"];
2180 [label="param DiagnosticDescription(object code) 703048"];
2181 [label="param DiagnosticDescription(bool isWarningAsError) 703049"];
2182 [label="param DiagnosticDescription(string squiggledText) 703050"];
2183 [label="param DiagnosticDescription(object[] arguments) 703051"];
2184 [label="param DiagnosticDescription(LinePosition? startLocation) 703052"];
2185 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703053"];
2186 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703054"];
2187 [label="param DiagnosticDescription(Type errorCodeType = null) 703055"];
2188 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703056"];
2189 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703057"];
2190 [label="param DiagnosticDescription(bool isSuppressed = false) 703058"];
2191 [label="param DiagnosticDescription(this) 703059"];
2192 [label="_code 703060"];
2193 [label="_isWarningAsError 703061"];
2194 [label="_isSuppressed 703062"];
2195 [label="_squiggledText 703063"];
2196 [label="_arguments 703064"];
2197 [label="_startPosition 703065"];
2198 [label="_argumentOrderDoesNotMatter 703066"];
2199 [label="_errorCodeType 703067"];
2200 [label="_ignoreArgumentsWhenComparing 703068"];
2201 [label="_defaultSeverityOpt 703069"];
2202 [label="_effectiveSeverityOpt 703070"];
2203 [label="_syntaxPredicate 703071"];
2204 [label="_showPredicate 703072"];
2205 [label="_location 703073"];
2206 [label="_argumentsAsStrings 703074"];
2207 [label="_arguments 703075"];
2208 [label="_argumentOrderDoesNotMatter 703076"];
2209 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703077"];
2210 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'h') 703078"];
2211 [label="param Diagnostic(object code) 703079"];
2212 [label="param Diagnostic(string squiggledText = null) 703080"];
2213 [label="param Diagnostic(object[] arguments = null) 703081"];
2214 [label="param Diagnostic(LinePosition? startLocation = null) 703082"];
2215 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703083"];
2216 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703084"];
2217 [label="param Diagnostic(bool isSuppressed = false) 703085"];
2218 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703086"];
2219 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703087"];
2220 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703088"];
2221 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703089"];
2222 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703090"];
2223 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703091"];
2224 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703092"];
2225 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703093"];
2226 [label="param Diagnostic(object code) 703094"];
2227 [label="param Diagnostic(string squiggledText = null) 703095"];
2228 [label="param Diagnostic(object[] arguments = null) 703096"];
2229 [label="param Diagnostic(LinePosition? startLocation = null) 703097"];
2230 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703098"];
2231 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703099"];
2232 [label="param Diagnostic(bool isSuppressed = false) 703100"];
2233 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703101"];
2234 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703102"];
2235 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703103"];
2236 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703104"];
2237 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703105"];
2238 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703106"];
2239 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703107"];
2240 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703108"];
2241 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703109"];
2242 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703110"];
2243 [label="param DiagnosticDescription(object code) 703111"];
2244 [label="param DiagnosticDescription(bool isWarningAsError) 703112"];
2245 [label="param DiagnosticDescription(string squiggledText) 703113"];
2246 [label="param DiagnosticDescription(object[] arguments) 703114"];
2247 [label="param DiagnosticDescription(LinePosition? startLocation) 703115"];
2248 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703116"];
2249 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703117"];
2250 [label="param DiagnosticDescription(Type errorCodeType = null) 703118"];
2251 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703119"];
2252 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703120"];
2253 [label="param DiagnosticDescription(bool isSuppressed = false) 703121"];
2254 [label="param DiagnosticDescription(this) 703122"];
2255 [label="_code 703123"];
2256 [label="_isWarningAsError 703124"];
2257 [label="_isSuppressed 703125"];
2258 [label="_squiggledText 703126"];
2259 [label="_arguments 703127"];
2260 [label="_startPosition 703128"];
2261 [label="_argumentOrderDoesNotMatter 703129"];
2262 [label="_errorCodeType 703130"];
2263 [label="_ignoreArgumentsWhenComparing 703131"];
2264 [label="_defaultSeverityOpt 703132"];
2265 [label="_effectiveSeverityOpt 703133"];
2266 [label="_syntaxPredicate 703134"];
2267 [label="_showPredicate 703135"];
2268 [label="_location 703136"];
2269 [label="_argumentsAsStrings 703137"];
2270 [label="_code 703138"];
2271 [label="_isWarningAsError 703139"];
2272 [label="_squiggledText 703140"];
2273 [label="_arguments 703141"];
2274 [label="_startPosition 703142"];
2275 [label="_syntaxPredicate 703143"];
2276 [label="_argumentOrderDoesNotMatter 703144"];
2277 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703145"];
2278 [label="_errorCodeType 703146"];
2279 [label="_defaultSeverityOpt 703147"];
2280 [label="_effectiveSeverityOpt 703148"];
2281 [label="_isSuppressed 703149"];
2282 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703150"];
2283 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703151"];
2284 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h') 703152"];
2285 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h') 703153"];
2286 [label="param WithArguments(params object[] arguments) 703154"];
2287 [label="param WithArguments(this) 703155"];
2288 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703156"];
2289 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703157"];
2290 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703158"];
2291 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703159"];
2292 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703160"];
2293 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703161"];
2294 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703162"];
2295 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703163"];
2296 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703164"];
2297 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703165"];
2298 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703166"];
2299 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703167"];
2300 [label="param DiagnosticDescription(object code) 703168"];
2301 [label="param DiagnosticDescription(bool isWarningAsError) 703169"];
2302 [label="param DiagnosticDescription(string squiggledText) 703170"];
2303 [label="param DiagnosticDescription(object[] arguments) 703171"];
2304 [label="param DiagnosticDescription(LinePosition? startLocation) 703172"];
2305 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703173"];
2306 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703174"];
2307 [label="param DiagnosticDescription(Type errorCodeType = null) 703175"];
2308 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703176"];
2309 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703177"];
2310 [label="param DiagnosticDescription(bool isSuppressed = false) 703178"];
2311 [label="param DiagnosticDescription(this) 703179"];
2312 [label="_code 703180"];
2313 [label="_isWarningAsError 703181"];
2314 [label="_isSuppressed 703182"];
2315 [label="_squiggledText 703183"];
2316 [label="_arguments 703184"];
2317 [label="_startPosition 703185"];
2318 [label="_argumentOrderDoesNotMatter 703186"];
2319 [label="_errorCodeType 703187"];
2320 [label="_ignoreArgumentsWhenComparing 703188"];
2321 [label="_defaultSeverityOpt 703189"];
2322 [label="_effectiveSeverityOpt 703190"];
2323 [label="_syntaxPredicate 703191"];
2324 [label="_showPredicate 703192"];
2325 [label="_location 703193"];
2326 [label="_argumentsAsStrings 703194"];
2327 [label="_arguments 703195"];
2328 [label="_argumentOrderDoesNotMatter 703196"];
2329 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703197"];
2330 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F') 703198"];
2331 [label="param Diagnostic(object code) 703199"];
2332 [label="param Diagnostic(string squiggledText = null) 703200"];
2333 [label="param Diagnostic(object[] arguments = null) 703201"];
2334 [label="param Diagnostic(LinePosition? startLocation = null) 703202"];
2335 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703203"];
2336 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703204"];
2337 [label="param Diagnostic(bool isSuppressed = false) 703205"];
2338 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703206"];
2339 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703207"];
2340 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703208"];
2341 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703209"];
2342 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703210"];
2343 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703211"];
2344 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703212"];
2345 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703213"];
2346 [label="param Diagnostic(object code) 703214"];
2347 [label="param Diagnostic(string squiggledText = null) 703215"];
2348 [label="param Diagnostic(object[] arguments = null) 703216"];
2349 [label="param Diagnostic(LinePosition? startLocation = null) 703217"];
2350 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703218"];
2351 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703219"];
2352 [label="param Diagnostic(bool isSuppressed = false) 703220"];
2353 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703221"];
2354 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703222"];
2355 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703223"];
2356 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703224"];
2357 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703225"];
2358 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703226"];
2359 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703227"];
2360 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703228"];
2361 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703229"];
2362 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703230"];
2363 [label="param DiagnosticDescription(object code) 703231"];
2364 [label="param DiagnosticDescription(bool isWarningAsError) 703232"];
2365 [label="param DiagnosticDescription(string squiggledText) 703233"];
2366 [label="param DiagnosticDescription(object[] arguments) 703234"];
2367 [label="param DiagnosticDescription(LinePosition? startLocation) 703235"];
2368 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703236"];
2369 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703237"];
2370 [label="param DiagnosticDescription(Type errorCodeType = null) 703238"];
2371 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703239"];
2372 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703240"];
2373 [label="param DiagnosticDescription(bool isSuppressed = false) 703241"];
2374 [label="param DiagnosticDescription(this) 703242"];
2375 [label="_code 703243"];
2376 [label="_isWarningAsError 703244"];
2377 [label="_isSuppressed 703245"];
2378 [label="_squiggledText 703246"];
2379 [label="_arguments 703247"];
2380 [label="_startPosition 703248"];
2381 [label="_argumentOrderDoesNotMatter 703249"];
2382 [label="_errorCodeType 703250"];
2383 [label="_ignoreArgumentsWhenComparing 703251"];
2384 [label="_defaultSeverityOpt 703252"];
2385 [label="_effectiveSeverityOpt 703253"];
2386 [label="_syntaxPredicate 703254"];
2387 [label="_showPredicate 703255"];
2388 [label="_location 703256"];
2389 [label="_argumentsAsStrings 703257"];
2390 [label="_code 703258"];
2391 [label="_isWarningAsError 703259"];
2392 [label="_squiggledText 703260"];
2393 [label="_arguments 703261"];
2394 [label="_startPosition 703262"];
2395 [label="_syntaxPredicate 703263"];
2396 [label="_argumentOrderDoesNotMatter 703264"];
2397 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703265"];
2398 [label="_errorCodeType 703266"];
2399 [label="_defaultSeverityOpt 703267"];
2400 [label="_effectiveSeverityOpt 703268"];
2401 [label="_isSuppressed 703269"];
2402 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703270"];
2403 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703271"];
2404 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F') 703272"];
2405 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F') 703273"];
2406 [label="param WithArguments(params object[] arguments) 703274"];
2407 [label="param WithArguments(this) 703275"];
2408 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703276"];
2409 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703277"];
2410 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703278"];
2411 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703279"];
2412 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703280"];
2413 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703281"];
2414 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703282"];
2415 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703283"];
2416 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703284"];
2417 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703285"];
2418 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703286"];
2419 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703287"];
2420 [label="param DiagnosticDescription(object code) 703288"];
2421 [label="param DiagnosticDescription(bool isWarningAsError) 703289"];
2422 [label="param DiagnosticDescription(string squiggledText) 703290"];
2423 [label="param DiagnosticDescription(object[] arguments) 703291"];
2424 [label="param DiagnosticDescription(LinePosition? startLocation) 703292"];
2425 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703293"];
2426 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703294"];
2427 [label="param DiagnosticDescription(Type errorCodeType = null) 703295"];
2428 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703296"];
2429 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703297"];
2430 [label="param DiagnosticDescription(bool isSuppressed = false) 703298"];
2431 [label="param DiagnosticDescription(this) 703299"];
2432 [label="_code 703300"];
2433 [label="_isWarningAsError 703301"];
2434 [label="_isSuppressed 703302"];
2435 [label="_squiggledText 703303"];
2436 [label="_arguments 703304"];
2437 [label="_startPosition 703305"];
2438 [label="_argumentOrderDoesNotMatter 703306"];
2439 [label="_errorCodeType 703307"];
2440 [label="_ignoreArgumentsWhenComparing 703308"];
2441 [label="_defaultSeverityOpt 703309"];
2442 [label="_effectiveSeverityOpt 703310"];
2443 [label="_syntaxPredicate 703311"];
2444 [label="_showPredicate 703312"];
2445 [label="_location 703313"];
2446 [label="_argumentsAsStrings 703314"];
2447 [label="_arguments 703315"];
2448 [label="_argumentOrderDoesNotMatter 703316"];
2449 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703317"];
2450 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'i') 703318"];
2451 [label="param Diagnostic(object code) 703319"];
2452 [label="param Diagnostic(string squiggledText = null) 703320"];
2453 [label="param Diagnostic(object[] arguments = null) 703321"];
2454 [label="param Diagnostic(LinePosition? startLocation = null) 703322"];
2455 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703323"];
2456 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703324"];
2457 [label="param Diagnostic(bool isSuppressed = false) 703325"];
2458 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703326"];
2459 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703327"];
2460 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703328"];
2461 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703329"];
2462 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703330"];
2463 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703331"];
2464 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703332"];
2465 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703333"];
2466 [label="param Diagnostic(object code) 703334"];
2467 [label="param Diagnostic(string squiggledText = null) 703335"];
2468 [label="param Diagnostic(object[] arguments = null) 703336"];
2469 [label="param Diagnostic(LinePosition? startLocation = null) 703337"];
2470 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703338"];
2471 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703339"];
2472 [label="param Diagnostic(bool isSuppressed = false) 703340"];
2473 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703341"];
2474 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703342"];
2475 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703343"];
2476 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703344"];
2477 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703345"];
2478 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703346"];
2479 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703347"];
2480 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703348"];
2481 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703349"];
2482 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703350"];
2483 [label="param DiagnosticDescription(object code) 703351"];
2484 [label="param DiagnosticDescription(bool isWarningAsError) 703352"];
2485 [label="param DiagnosticDescription(string squiggledText) 703353"];
2486 [label="param DiagnosticDescription(object[] arguments) 703354"];
2487 [label="param DiagnosticDescription(LinePosition? startLocation) 703355"];
2488 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703356"];
2489 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703357"];
2490 [label="param DiagnosticDescription(Type errorCodeType = null) 703358"];
2491 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703359"];
2492 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703360"];
2493 [label="param DiagnosticDescription(bool isSuppressed = false) 703361"];
2494 [label="param DiagnosticDescription(this) 703362"];
2495 [label="_code 703363"];
2496 [label="_isWarningAsError 703364"];
2497 [label="_isSuppressed 703365"];
2498 [label="_squiggledText 703366"];
2499 [label="_arguments 703367"];
2500 [label="_startPosition 703368"];
2501 [label="_argumentOrderDoesNotMatter 703369"];
2502 [label="_errorCodeType 703370"];
2503 [label="_ignoreArgumentsWhenComparing 703371"];
2504 [label="_defaultSeverityOpt 703372"];
2505 [label="_effectiveSeverityOpt 703373"];
2506 [label="_syntaxPredicate 703374"];
2507 [label="_showPredicate 703375"];
2508 [label="_location 703376"];
2509 [label="_argumentsAsStrings 703377"];
2510 [label="_code 703378"];
2511 [label="_isWarningAsError 703379"];
2512 [label="_squiggledText 703380"];
2513 [label="_arguments 703381"];
2514 [label="_startPosition 703382"];
2515 [label="_syntaxPredicate 703383"];
2516 [label="_argumentOrderDoesNotMatter 703384"];
2517 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703385"];
2518 [label="_errorCodeType 703386"];
2519 [label="_defaultSeverityOpt 703387"];
2520 [label="_effectiveSeverityOpt 703388"];
2521 [label="_isSuppressed 703389"];
2522 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703390"];
2523 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703391"];
2524 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i') 703392"];
2525 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i') 703393"];
2526 [label="param WithArguments(params object[] arguments) 703394"];
2527 [label="param WithArguments(this) 703395"];
2528 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703396"];
2529 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703397"];
2530 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703398"];
2531 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703399"];
2532 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703400"];
2533 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703401"];
2534 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703402"];
2535 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703403"];
2536 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703404"];
2537 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703405"];
2538 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703406"];
2539 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703407"];
2540 [label="param DiagnosticDescription(object code) 703408"];
2541 [label="param DiagnosticDescription(bool isWarningAsError) 703409"];
2542 [label="param DiagnosticDescription(string squiggledText) 703410"];
2543 [label="param DiagnosticDescription(object[] arguments) 703411"];
2544 [label="param DiagnosticDescription(LinePosition? startLocation) 703412"];
2545 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703413"];
2546 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703414"];
2547 [label="param DiagnosticDescription(Type errorCodeType = null) 703415"];
2548 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703416"];
2549 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703417"];
2550 [label="param DiagnosticDescription(bool isSuppressed = false) 703418"];
2551 [label="param DiagnosticDescription(this) 703419"];
2552 [label="_code 703420"];
2553 [label="_isWarningAsError 703421"];
2554 [label="_isSuppressed 703422"];
2555 [label="_squiggledText 703423"];
2556 [label="_arguments 703424"];
2557 [label="_startPosition 703425"];
2558 [label="_argumentOrderDoesNotMatter 703426"];
2559 [label="_errorCodeType 703427"];
2560 [label="_ignoreArgumentsWhenComparing 703428"];
2561 [label="_defaultSeverityOpt 703429"];
2562 [label="_effectiveSeverityOpt 703430"];
2563 [label="_syntaxPredicate 703431"];
2564 [label="_showPredicate 703432"];
2565 [label="_location 703433"];
2566 [label="_argumentsAsStrings 703434"];
2567 [label="_arguments 703435"];
2568 [label="_argumentOrderDoesNotMatter 703436"];
2569 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703437"];
2570 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F') 703438"];
2571 [label="param Diagnostic(object code) 703439"];
2572 [label="param Diagnostic(string squiggledText = null) 703440"];
2573 [label="param Diagnostic(object[] arguments = null) 703441"];
2574 [label="param Diagnostic(LinePosition? startLocation = null) 703442"];
2575 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703443"];
2576 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703444"];
2577 [label="param Diagnostic(bool isSuppressed = false) 703445"];
2578 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703446"];
2579 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703447"];
2580 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703448"];
2581 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703449"];
2582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703450"];
2583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703451"];
2584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703452"];
2585 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703453"];
2586 [label="param Diagnostic(object code) 703454"];
2587 [label="param Diagnostic(string squiggledText = null) 703455"];
2588 [label="param Diagnostic(object[] arguments = null) 703456"];
2589 [label="param Diagnostic(LinePosition? startLocation = null) 703457"];
2590 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703458"];
2591 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703459"];
2592 [label="param Diagnostic(bool isSuppressed = false) 703460"];
2593 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703461"];
2594 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703462"];
2595 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703463"];
2596 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703464"];
2597 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703465"];
2598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703466"];
2599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703467"];
2600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703468"];
2601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703469"];
2602 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703470"];
2603 [label="param DiagnosticDescription(object code) 703471"];
2604 [label="param DiagnosticDescription(bool isWarningAsError) 703472"];
2605 [label="param DiagnosticDescription(string squiggledText) 703473"];
2606 [label="param DiagnosticDescription(object[] arguments) 703474"];
2607 [label="param DiagnosticDescription(LinePosition? startLocation) 703475"];
2608 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703476"];
2609 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703477"];
2610 [label="param DiagnosticDescription(Type errorCodeType = null) 703478"];
2611 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703479"];
2612 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703480"];
2613 [label="param DiagnosticDescription(bool isSuppressed = false) 703481"];
2614 [label="param DiagnosticDescription(this) 703482"];
2615 [label="_code 703483"];
2616 [label="_isWarningAsError 703484"];
2617 [label="_isSuppressed 703485"];
2618 [label="_squiggledText 703486"];
2619 [label="_arguments 703487"];
2620 [label="_startPosition 703488"];
2621 [label="_argumentOrderDoesNotMatter 703489"];
2622 [label="_errorCodeType 703490"];
2623 [label="_ignoreArgumentsWhenComparing 703491"];
2624 [label="_defaultSeverityOpt 703492"];
2625 [label="_effectiveSeverityOpt 703493"];
2626 [label="_syntaxPredicate 703494"];
2627 [label="_showPredicate 703495"];
2628 [label="_location 703496"];
2629 [label="_argumentsAsStrings 703497"];
2630 [label="_code 703498"];
2631 [label="_isWarningAsError 703499"];
2632 [label="_squiggledText 703500"];
2633 [label="_arguments 703501"];
2634 [label="_startPosition 703502"];
2635 [label="_syntaxPredicate 703503"];
2636 [label="_argumentOrderDoesNotMatter 703504"];
2637 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703505"];
2638 [label="_errorCodeType 703506"];
2639 [label="_defaultSeverityOpt 703507"];
2640 [label="_effectiveSeverityOpt 703508"];
2641 [label="_isSuppressed 703509"];
2642 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703510"];
2643 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703511"];
2644 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F') 703512"];
2645 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F') 703513"];
2646 [label="param WithArguments(params object[] arguments) 703514"];
2647 [label="param WithArguments(this) 703515"];
2648 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703516"];
2649 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703517"];
2650 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703518"];
2651 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703519"];
2652 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703520"];
2653 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703521"];
2654 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703522"];
2655 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703523"];
2656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703524"];
2657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703525"];
2658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703526"];
2659 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703527"];
2660 [label="param DiagnosticDescription(object code) 703528"];
2661 [label="param DiagnosticDescription(bool isWarningAsError) 703529"];
2662 [label="param DiagnosticDescription(string squiggledText) 703530"];
2663 [label="param DiagnosticDescription(object[] arguments) 703531"];
2664 [label="param DiagnosticDescription(LinePosition? startLocation) 703532"];
2665 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703533"];
2666 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703534"];
2667 [label="param DiagnosticDescription(Type errorCodeType = null) 703535"];
2668 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703536"];
2669 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703537"];
2670 [label="param DiagnosticDescription(bool isSuppressed = false) 703538"];
2671 [label="param DiagnosticDescription(this) 703539"];
2672 [label="_code 703540"];
2673 [label="_isWarningAsError 703541"];
2674 [label="_isSuppressed 703542"];
2675 [label="_squiggledText 703543"];
2676 [label="_arguments 703544"];
2677 [label="_startPosition 703545"];
2678 [label="_argumentOrderDoesNotMatter 703546"];
2679 [label="_errorCodeType 703547"];
2680 [label="_ignoreArgumentsWhenComparing 703548"];
2681 [label="_defaultSeverityOpt 703549"];
2682 [label="_effectiveSeverityOpt 703550"];
2683 [label="_syntaxPredicate 703551"];
2684 [label="_showPredicate 703552"];
2685 [label="_location 703553"];
2686 [label="_argumentsAsStrings 703554"];
2687 [label="_arguments 703555"];
2688 [label="_argumentOrderDoesNotMatter 703556"];
2689 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703557"];
2690 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'j') 703558"];
2691 [label="param Diagnostic(object code) 703559"];
2692 [label="param Diagnostic(string squiggledText = null) 703560"];
2693 [label="param Diagnostic(object[] arguments = null) 703561"];
2694 [label="param Diagnostic(LinePosition? startLocation = null) 703562"];
2695 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703563"];
2696 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703564"];
2697 [label="param Diagnostic(bool isSuppressed = false) 703565"];
2698 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703566"];
2699 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703567"];
2700 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703568"];
2701 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703569"];
2702 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703570"];
2703 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703571"];
2704 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703572"];
2705 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703573"];
2706 [label="param Diagnostic(object code) 703574"];
2707 [label="param Diagnostic(string squiggledText = null) 703575"];
2708 [label="param Diagnostic(object[] arguments = null) 703576"];
2709 [label="param Diagnostic(LinePosition? startLocation = null) 703577"];
2710 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703578"];
2711 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703579"];
2712 [label="param Diagnostic(bool isSuppressed = false) 703580"];
2713 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703581"];
2714 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703582"];
2715 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703583"];
2716 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703584"];
2717 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703585"];
2718 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703586"];
2719 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703587"];
2720 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703588"];
2721 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703589"];
2722 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703590"];
2723 [label="param DiagnosticDescription(object code) 703591"];
2724 [label="param DiagnosticDescription(bool isWarningAsError) 703592"];
2725 [label="param DiagnosticDescription(string squiggledText) 703593"];
2726 [label="param DiagnosticDescription(object[] arguments) 703594"];
2727 [label="param DiagnosticDescription(LinePosition? startLocation) 703595"];
2728 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703596"];
2729 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703597"];
2730 [label="param DiagnosticDescription(Type errorCodeType = null) 703598"];
2731 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703599"];
2732 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703600"];
2733 [label="param DiagnosticDescription(bool isSuppressed = false) 703601"];
2734 [label="param DiagnosticDescription(this) 703602"];
2735 [label="_code 703603"];
2736 [label="_isWarningAsError 703604"];
2737 [label="_isSuppressed 703605"];
2738 [label="_squiggledText 703606"];
2739 [label="_arguments 703607"];
2740 [label="_startPosition 703608"];
2741 [label="_argumentOrderDoesNotMatter 703609"];
2742 [label="_errorCodeType 703610"];
2743 [label="_ignoreArgumentsWhenComparing 703611"];
2744 [label="_defaultSeverityOpt 703612"];
2745 [label="_effectiveSeverityOpt 703613"];
2746 [label="_syntaxPredicate 703614"];
2747 [label="_showPredicate 703615"];
2748 [label="_location 703616"];
2749 [label="_argumentsAsStrings 703617"];
2750 [label="_code 703618"];
2751 [label="_isWarningAsError 703619"];
2752 [label="_squiggledText 703620"];
2753 [label="_arguments 703621"];
2754 [label="_startPosition 703622"];
2755 [label="_syntaxPredicate 703623"];
2756 [label="_argumentOrderDoesNotMatter 703624"];
2757 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703625"];
2758 [label="_errorCodeType 703626"];
2759 [label="_defaultSeverityOpt 703627"];
2760 [label="_effectiveSeverityOpt 703628"];
2761 [label="_isSuppressed 703629"];
2762 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703630"];
2763 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703631"];
2764 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j') 703632"];
2765 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j') 703633"];
2766 [label="param WithArguments(params object[] arguments) 703634"];
2767 [label="param WithArguments(this) 703635"];
2768 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703636"];
2769 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703637"];
2770 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703638"];
2771 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703639"];
2772 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703640"];
2773 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703641"];
2774 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703642"];
2775 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703643"];
2776 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703644"];
2777 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703645"];
2778 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703646"];
2779 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703647"];
2780 [label="param DiagnosticDescription(object code) 703648"];
2781 [label="param DiagnosticDescription(bool isWarningAsError) 703649"];
2782 [label="param DiagnosticDescription(string squiggledText) 703650"];
2783 [label="param DiagnosticDescription(object[] arguments) 703651"];
2784 [label="param DiagnosticDescription(LinePosition? startLocation) 703652"];
2785 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703653"];
2786 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703654"];
2787 [label="param DiagnosticDescription(Type errorCodeType = null) 703655"];
2788 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703656"];
2789 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703657"];
2790 [label="param DiagnosticDescription(bool isSuppressed = false) 703658"];
2791 [label="param DiagnosticDescription(this) 703659"];
2792 [label="_code 703660"];
2793 [label="_isWarningAsError 703661"];
2794 [label="_isSuppressed 703662"];
2795 [label="_squiggledText 703663"];
2796 [label="_arguments 703664"];
2797 [label="_startPosition 703665"];
2798 [label="_argumentOrderDoesNotMatter 703666"];
2799 [label="_errorCodeType 703667"];
2800 [label="_ignoreArgumentsWhenComparing 703668"];
2801 [label="_defaultSeverityOpt 703669"];
2802 [label="_effectiveSeverityOpt 703670"];
2803 [label="_syntaxPredicate 703671"];
2804 [label="_showPredicate 703672"];
2805 [label="_location 703673"];
2806 [label="_argumentsAsStrings 703674"];
2807 [label="_arguments 703675"];
2808 [label="_argumentOrderDoesNotMatter 703676"];
2809 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703677"];
2810 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P') 703678"];
2811 [label="param Diagnostic(object code) 703679"];
2812 [label="param Diagnostic(string squiggledText = null) 703680"];
2813 [label="param Diagnostic(object[] arguments = null) 703681"];
2814 [label="param Diagnostic(LinePosition? startLocation = null) 703682"];
2815 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703683"];
2816 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703684"];
2817 [label="param Diagnostic(bool isSuppressed = false) 703685"];
2818 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703686"];
2819 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703687"];
2820 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703688"];
2821 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703689"];
2822 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703690"];
2823 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703691"];
2824 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703692"];
2825 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703693"];
2826 [label="param Diagnostic(object code) 703694"];
2827 [label="param Diagnostic(string squiggledText = null) 703695"];
2828 [label="param Diagnostic(object[] arguments = null) 703696"];
2829 [label="param Diagnostic(LinePosition? startLocation = null) 703697"];
2830 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703698"];
2831 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703699"];
2832 [label="param Diagnostic(bool isSuppressed = false) 703700"];
2833 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703701"];
2834 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703702"];
2835 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703703"];
2836 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703704"];
2837 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703705"];
2838 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703706"];
2839 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703707"];
2840 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703708"];
2841 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703709"];
2842 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703710"];
2843 [label="param DiagnosticDescription(object code) 703711"];
2844 [label="param DiagnosticDescription(bool isWarningAsError) 703712"];
2845 [label="param DiagnosticDescription(string squiggledText) 703713"];
2846 [label="param DiagnosticDescription(object[] arguments) 703714"];
2847 [label="param DiagnosticDescription(LinePosition? startLocation) 703715"];
2848 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703716"];
2849 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703717"];
2850 [label="param DiagnosticDescription(Type errorCodeType = null) 703718"];
2851 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703719"];
2852 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703720"];
2853 [label="param DiagnosticDescription(bool isSuppressed = false) 703721"];
2854 [label="param DiagnosticDescription(this) 703722"];
2855 [label="_code 703723"];
2856 [label="_isWarningAsError 703724"];
2857 [label="_isSuppressed 703725"];
2858 [label="_squiggledText 703726"];
2859 [label="_arguments 703727"];
2860 [label="_startPosition 703728"];
2861 [label="_argumentOrderDoesNotMatter 703729"];
2862 [label="_errorCodeType 703730"];
2863 [label="_ignoreArgumentsWhenComparing 703731"];
2864 [label="_defaultSeverityOpt 703732"];
2865 [label="_effectiveSeverityOpt 703733"];
2866 [label="_syntaxPredicate 703734"];
2867 [label="_showPredicate 703735"];
2868 [label="_location 703736"];
2869 [label="_argumentsAsStrings 703737"];
2870 [label="_code 703738"];
2871 [label="_isWarningAsError 703739"];
2872 [label="_squiggledText 703740"];
2873 [label="_arguments 703741"];
2874 [label="_startPosition 703742"];
2875 [label="_syntaxPredicate 703743"];
2876 [label="_argumentOrderDoesNotMatter 703744"];
2877 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703745"];
2878 [label="_errorCodeType 703746"];
2879 [label="_defaultSeverityOpt 703747"];
2880 [label="_effectiveSeverityOpt 703748"];
2881 [label="_isSuppressed 703749"];
2882 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703750"];
2883 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703751"];
2884 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P') 703752"];
2885 [label="Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P') 703753"];
2886 [label="param WithArguments(params object[] arguments) 703754"];
2887 [label="param WithArguments(this) 703755"];
2888 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703756"];
2889 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703757"];
2890 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703758"];
2891 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703759"];
2892 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703760"];
2893 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703761"];
2894 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703762"];
2895 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703763"];
2896 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703764"];
2897 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703765"];
2898 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703766"];
2899 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703767"];
2900 [label="param DiagnosticDescription(object code) 703768"];
2901 [label="param DiagnosticDescription(bool isWarningAsError) 703769"];
2902 [label="param DiagnosticDescription(string squiggledText) 703770"];
2903 [label="param DiagnosticDescription(object[] arguments) 703771"];
2904 [label="param DiagnosticDescription(LinePosition? startLocation) 703772"];
2905 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703773"];
2906 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703774"];
2907 [label="param DiagnosticDescription(Type errorCodeType = null) 703775"];
2908 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703776"];
2909 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703777"];
2910 [label="param DiagnosticDescription(bool isSuppressed = false) 703778"];
2911 [label="param DiagnosticDescription(this) 703779"];
2912 [label="_code 703780"];
2913 [label="_isWarningAsError 703781"];
2914 [label="_isSuppressed 703782"];
2915 [label="_squiggledText 703783"];
2916 [label="_arguments 703784"];
2917 [label="_startPosition 703785"];
2918 [label="_argumentOrderDoesNotMatter 703786"];
2919 [label="_errorCodeType 703787"];
2920 [label="_ignoreArgumentsWhenComparing 703788"];
2921 [label="_defaultSeverityOpt 703789"];
2922 [label="_effectiveSeverityOpt 703790"];
2923 [label="_syntaxPredicate 703791"];
2924 [label="_showPredicate 703792"];
2925 [label="_location 703793"];
2926 [label="_argumentsAsStrings 703794"];
2927 [label="_arguments 703795"];
2928 [label="_argumentOrderDoesNotMatter 703796"];
2929 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703797"];
2930 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'k') 703798"];
2931 [label="param Diagnostic(object code) 703799"];
2932 [label="param Diagnostic(string squiggledText = null) 703800"];
2933 [label="param Diagnostic(object[] arguments = null) 703801"];
2934 [label="param Diagnostic(LinePosition? startLocation = null) 703802"];
2935 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703803"];
2936 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703804"];
2937 [label="param Diagnostic(bool isSuppressed = false) 703805"];
2938 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703806"];
2939 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703807"];
2940 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703808"];
2941 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703809"];
2942 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703810"];
2943 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703811"];
2944 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703812"];
2945 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703813"];
2946 [label="param Diagnostic(object code) 703814"];
2947 [label="param Diagnostic(string squiggledText = null) 703815"];
2948 [label="param Diagnostic(object[] arguments = null) 703816"];
2949 [label="param Diagnostic(LinePosition? startLocation = null) 703817"];
2950 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703818"];
2951 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703819"];
2952 [label="param Diagnostic(bool isSuppressed = false) 703820"];
2953 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703821"];
2954 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703822"];
2955 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703823"];
2956 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703824"];
2957 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703825"];
2958 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703826"];
2959 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703827"];
2960 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703828"];
2961 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703829"];
2962 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703830"];
2963 [label="param DiagnosticDescription(object code) 703831"];
2964 [label="param DiagnosticDescription(bool isWarningAsError) 703832"];
2965 [label="param DiagnosticDescription(string squiggledText) 703833"];
2966 [label="param DiagnosticDescription(object[] arguments) 703834"];
2967 [label="param DiagnosticDescription(LinePosition? startLocation) 703835"];
2968 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703836"];
2969 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703837"];
2970 [label="param DiagnosticDescription(Type errorCodeType = null) 703838"];
2971 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703839"];
2972 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703840"];
2973 [label="param DiagnosticDescription(bool isSuppressed = false) 703841"];
2974 [label="param DiagnosticDescription(this) 703842"];
2975 [label="_code 703843"];
2976 [label="_isWarningAsError 703844"];
2977 [label="_isSuppressed 703845"];
2978 [label="_squiggledText 703846"];
2979 [label="_arguments 703847"];
2980 [label="_startPosition 703848"];
2981 [label="_argumentOrderDoesNotMatter 703849"];
2982 [label="_errorCodeType 703850"];
2983 [label="_ignoreArgumentsWhenComparing 703851"];
2984 [label="_defaultSeverityOpt 703852"];
2985 [label="_effectiveSeverityOpt 703853"];
2986 [label="_syntaxPredicate 703854"];
2987 [label="_showPredicate 703855"];
2988 [label="_location 703856"];
2989 [label="_argumentsAsStrings 703857"];
2990 [label="_code 703858"];
2991 [label="_isWarningAsError 703859"];
2992 [label="_squiggledText 703860"];
2993 [label="_arguments 703861"];
2994 [label="_startPosition 703862"];
2995 [label="_syntaxPredicate 703863"];
2996 [label="_argumentOrderDoesNotMatter 703864"];
2997 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703865"];
2998 [label="_errorCodeType 703866"];
2999 [label="_defaultSeverityOpt 703867"];
3000 [label="_effectiveSeverityOpt 703868"];
3001 [label="_isSuppressed 703869"];
3002 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703870"];
3003 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703871"];
3004 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k') 703872"];
3005 [label="Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k') 703873"];
3006 [label="param WithArguments(params object[] arguments) 703874"];
3007 [label="param WithArguments(this) 703875"];
3008 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703876"];
3009 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703877"];
3010 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703878"];
3011 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703879"];
3012 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703880"];
3013 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703881"];
3014 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703882"];
3015 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703883"];
3016 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703884"];
3017 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703885"];
3018 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703886"];
3019 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 703887"];
3020 [label="param DiagnosticDescription(object code) 703888"];
3021 [label="param DiagnosticDescription(bool isWarningAsError) 703889"];
3022 [label="param DiagnosticDescription(string squiggledText) 703890"];
3023 [label="param DiagnosticDescription(object[] arguments) 703891"];
3024 [label="param DiagnosticDescription(LinePosition? startLocation) 703892"];
3025 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703893"];
3026 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703894"];
3027 [label="param DiagnosticDescription(Type errorCodeType = null) 703895"];
3028 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703896"];
3029 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703897"];
3030 [label="param DiagnosticDescription(bool isSuppressed = false) 703898"];
3031 [label="param DiagnosticDescription(this) 703899"];
3032 [label="_code 703900"];
3033 [label="_isWarningAsError 703901"];
3034 [label="_isSuppressed 703902"];
3035 [label="_squiggledText 703903"];
3036 [label="_arguments 703904"];
3037 [label="_startPosition 703905"];
3038 [label="_argumentOrderDoesNotMatter 703906"];
3039 [label="_errorCodeType 703907"];
3040 [label="_ignoreArgumentsWhenComparing 703908"];
3041 [label="_defaultSeverityOpt 703909"];
3042 [label="_effectiveSeverityOpt 703910"];
3043 [label="_syntaxPredicate 703911"];
3044 [label="_showPredicate 703912"];
3045 [label="_location 703913"];
3046 [label="_argumentsAsStrings 703914"];
3047 [label="_arguments 703915"];
3048 [label="_argumentOrderDoesNotMatter 703916"];
3049 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703917"];
3050 [label="Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M') 703918"];
3051 [label="param Diagnostic(object code) 703919"];
3052 [label="param Diagnostic(string squiggledText = null) 703920"];
3053 [label="param Diagnostic(object[] arguments = null) 703921"];
3054 [label="param Diagnostic(LinePosition? startLocation = null) 703922"];
3055 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703923"];
3056 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703924"];
3057 [label="param Diagnostic(bool isSuppressed = false) 703925"];
3058 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703926"];
3059 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703927"];
3060 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703928"];
3061 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703929"];
3062 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703930"];
3063 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703931"];
3064 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703932"];
3065 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 703933"];
3066 [label="param Diagnostic(object code) 703934"];
3067 [label="param Diagnostic(string squiggledText = null) 703935"];
3068 [label="param Diagnostic(object[] arguments = null) 703936"];
3069 [label="param Diagnostic(LinePosition? startLocation = null) 703937"];
3070 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 703938"];
3071 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 703939"];
3072 [label="param Diagnostic(bool isSuppressed = false) 703940"];
3073 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 703941"];
3074 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703942"];
3075 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703943"];
3076 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703944"];
3077 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703945"];
3078 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703946"];
3079 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703947"];
3080 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703948"];
3081 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 703949"];
3082 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 703950"];
3083 [label="param DiagnosticDescription(object code) 703951"];
3084 [label="param DiagnosticDescription(bool isWarningAsError) 703952"];
3085 [label="param DiagnosticDescription(string squiggledText) 703953"];
3086 [label="param DiagnosticDescription(object[] arguments) 703954"];
3087 [label="param DiagnosticDescription(LinePosition? startLocation) 703955"];
3088 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 703956"];
3089 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 703957"];
3090 [label="param DiagnosticDescription(Type errorCodeType = null) 703958"];
3091 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 703959"];
3092 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 703960"];
3093 [label="param DiagnosticDescription(bool isSuppressed = false) 703961"];
3094 [label="param DiagnosticDescription(this) 703962"];
3095 [label="_code 703963"];
3096 [label="_isWarningAsError 703964"];
3097 [label="_isSuppressed 703965"];
3098 [label="_squiggledText 703966"];
3099 [label="_arguments 703967"];
3100 [label="_startPosition 703968"];
3101 [label="_argumentOrderDoesNotMatter 703969"];
3102 [label="_errorCodeType 703970"];
3103 [label="_ignoreArgumentsWhenComparing 703971"];
3104 [label="_defaultSeverityOpt 703972"];
3105 [label="_effectiveSeverityOpt 703973"];
3106 [label="_syntaxPredicate 703974"];
3107 [label="_showPredicate 703975"];
3108 [label="_location 703976"];
3109 [label="_argumentsAsStrings 703977"];
3110 [label="_code 703978"];
3111 [label="_isWarningAsError 703979"];
3112 [label="_squiggledText 703980"];
3113 [label="_arguments 703981"];
3114 [label="_startPosition 703982"];
3115 [label="_syntaxPredicate 703983"];
3116 [label="_argumentOrderDoesNotMatter 703984"];
3117 [label="_errorCodeType = errorCodeType ?? code.GetType(); 703985"];
3118 [label="_errorCodeType 703986"];
3119 [label="_defaultSeverityOpt 703987"];
3120 [label="_effectiveSeverityOpt 703988"];
3121 [label="_isSuppressed 703989"];
3122 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 703990"];
3123 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 703991"];
3124 [label="Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>') 703992"];
3125 [label="Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>') 703993"];
3126 [label="param WithArguments(params object[] arguments) 703994"];
3127 [label="param WithArguments(this) 703995"];
3128 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703996"];
3129 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703997"];
3130 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703998"];
3131 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 703999"];
3132 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704000"];
3133 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704001"];
3134 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704002"];
3135 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704003"];
3136 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704004"];
3137 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704005"];
3138 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704006"];
3139 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 704007"];
3140 [label="param DiagnosticDescription(object code) 704008"];
3141 [label="param DiagnosticDescription(bool isWarningAsError) 704009"];
3142 [label="param DiagnosticDescription(string squiggledText) 704010"];
3143 [label="param DiagnosticDescription(object[] arguments) 704011"];
3144 [label="param DiagnosticDescription(LinePosition? startLocation) 704012"];
3145 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 704013"];
3146 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 704014"];
3147 [label="param DiagnosticDescription(Type errorCodeType = null) 704015"];
3148 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 704016"];
3149 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 704017"];
3150 [label="param DiagnosticDescription(bool isSuppressed = false) 704018"];
3151 [label="param DiagnosticDescription(this) 704019"];
3152 [label="_code 704020"];
3153 [label="_isWarningAsError 704021"];
3154 [label="_isSuppressed 704022"];
3155 [label="_squiggledText 704023"];
3156 [label="_arguments 704024"];
3157 [label="_startPosition 704025"];
3158 [label="_argumentOrderDoesNotMatter 704026"];
3159 [label="_errorCodeType 704027"];
3160 [label="_ignoreArgumentsWhenComparing 704028"];
3161 [label="_defaultSeverityOpt 704029"];
3162 [label="_effectiveSeverityOpt 704030"];
3163 [label="_syntaxPredicate 704031"];
3164 [label="_showPredicate 704032"];
3165 [label="_location 704033"];
3166 [label="_argumentsAsStrings 704034"];
3167 [label="_arguments 704035"];
3168 [label="_argumentOrderDoesNotMatter 704036"];
3169 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 704037"];
3170 [label="Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F') 704038"];
3171 [label="param Diagnostic(object code) 704039"];
3172 [label="param Diagnostic(string squiggledText = null) 704040"];
3173 [label="param Diagnostic(object[] arguments = null) 704041"];
3174 [label="param Diagnostic(LinePosition? startLocation = null) 704042"];
3175 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 704043"];
3176 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 704044"];
3177 [label="param Diagnostic(bool isSuppressed = false) 704045"];
3178 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704046"];
3179 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704047"];
3180 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704048"];
3181 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704049"];
3182 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704050"];
3183 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704051"];
3184 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704052"];
3185 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 704053"];
3186 [label="param Diagnostic(object code) 704054"];
3187 [label="param Diagnostic(string squiggledText = null) 704055"];
3188 [label="param Diagnostic(object[] arguments = null) 704056"];
3189 [label="param Diagnostic(LinePosition? startLocation = null) 704057"];
3190 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 704058"];
3191 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 704059"];
3192 [label="param Diagnostic(bool isSuppressed = false) 704060"];
3193 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 704061"];
3194 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704062"];
3195 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704063"];
3196 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704064"];
3197 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704065"];
3198 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704066"];
3199 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704067"];
3200 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704068"];
3201 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 704069"];
3202 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 704070"];
3203 [label="param DiagnosticDescription(object code) 704071"];
3204 [label="param DiagnosticDescription(bool isWarningAsError) 704072"];
3205 [label="param DiagnosticDescription(string squiggledText) 704073"];
3206 [label="param DiagnosticDescription(object[] arguments) 704074"];
3207 [label="param DiagnosticDescription(LinePosition? startLocation) 704075"];
3208 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 704076"];
3209 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 704077"];
3210 [label="param DiagnosticDescription(Type errorCodeType = null) 704078"];
3211 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 704079"];
3212 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 704080"];
3213 [label="param DiagnosticDescription(bool isSuppressed = false) 704081"];
3214 [label="param DiagnosticDescription(this) 704082"];
3215 [label="_code 704083"];
3216 [label="_isWarningAsError 704084"];
3217 [label="_isSuppressed 704085"];
3218 [label="_squiggledText 704086"];
3219 [label="_arguments 704087"];
3220 [label="_startPosition 704088"];
3221 [label="_argumentOrderDoesNotMatter 704089"];
3222 [label="_errorCodeType 704090"];
3223 [label="_ignoreArgumentsWhenComparing 704091"];
3224 [label="_defaultSeverityOpt 704092"];
3225 [label="_effectiveSeverityOpt 704093"];
3226 [label="_syntaxPredicate 704094"];
3227 [label="_showPredicate 704095"];
3228 [label="_location 704096"];
3229 [label="_argumentsAsStrings 704097"];
3230 [label="_code 704098"];
3231 [label="_isWarningAsError 704099"];
3232 [label="_squiggledText 704100"];
3233 [label="_arguments 704101"];
3234 [label="_startPosition 704102"];
3235 [label="_syntaxPredicate 704103"];
3236 [label="_argumentOrderDoesNotMatter 704104"];
3237 [label="_errorCodeType = errorCodeType ?? code.GetType(); 704105"];
3238 [label="_errorCodeType 704106"];
3239 [label="_defaultSeverityOpt 704107"];
3240 [label="_effectiveSeverityOpt 704108"];
3241 [label="_isSuppressed 704109"];
3242 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 704110"];
3243 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 704111"];
3244 [label="Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null') 704112"];
3245 [label="Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null') 704113"];
3246 [label="param WithArguments(params object[] arguments) 704114"];
3247 [label="param WithArguments(this) 704115"];
3248 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704116"];
3249 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704117"];
3250 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704118"];
3251 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704119"];
3252 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704120"];
3253 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704121"];
3254 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704122"];
3255 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704123"];
3256 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704124"];
3257 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704125"];
3258 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 704126"];
3259 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 704127"];
3260 [label="param DiagnosticDescription(object code) 704128"];
3261 [label="param DiagnosticDescription(bool isWarningAsError) 704129"];
3262 [label="param DiagnosticDescription(string squiggledText) 704130"];
3263 [label="param DiagnosticDescription(object[] arguments) 704131"];
3264 [label="param DiagnosticDescription(LinePosition? startLocation) 704132"];
3265 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 704133"];
3266 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 704134"];
3267 [label="param DiagnosticDescription(Type errorCodeType = null) 704135"];
3268 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 704136"];
3269 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 704137"];
3270 [label="param DiagnosticDescription(bool isSuppressed = false) 704138"];
3271 [label="param DiagnosticDescription(this) 704139"];
3272 [label="_code 704140"];
3273 [label="_isWarningAsError 704141"];
3274 [label="_isSuppressed 704142"];
3275 [label="_squiggledText 704143"];
3276 [label="_arguments 704144"];
3277 [label="_startPosition 704145"];
3278 [label="_argumentOrderDoesNotMatter 704146"];
3279 [label="_errorCodeType 704147"];
3280 [label="_ignoreArgumentsWhenComparing 704148"];
3281 [label="_defaultSeverityOpt 704149"];
3282 [label="_effectiveSeverityOpt 704150"];
3283 [label="_syntaxPredicate 704151"];
3284 [label="_showPredicate 704152"];
3285 [label="_location 704153"];
3286 [label="_argumentsAsStrings 704154"];
3287 [label="_arguments 704155"];
3288 [label="_argumentOrderDoesNotMatter 704156"];
3289 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ); 704157"];
3290 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704158"];
3291 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704159"];
3292 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704160"];
3293 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704161"];
3294 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704162"];
3295 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704163"];
3296 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704164"];
3297 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704165"];
3298 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704166"];
3299 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704167"];
3300 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704168"];
3301 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704169"];
3302 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704170"];
3303 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704171"];
3304 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704172"];
3305 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704173"];
3306 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704174"];
3307 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704175"];
3308 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704176"];
3309 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704177"];
3310 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704178"];
3311 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704179"];
3312 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704180"];
3313 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,15): error CS0103: The name 'a' does not exist in the current context\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'a').WithArguments('a'),\n                // (9,13): error CS0118: 'N' is a namespace but is used like a variable\n                //             N(a);\n                Diagnostic(ErrorCode.ERR_BadSKknown, 'N').WithArguments('N', 'namespace', 'variable'),\n                // (10,23): error CS0103: The name 'b' does not exist in the current context\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'b').WithArguments('b'),\n                // (10,13): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             C<string>(b);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<string>').WithArguments('N.C<T>'),\n                // (11,22): error CS0103: The name 'c' does not exist in the current context\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'c').WithArguments('c'),\n                // (11,15): error CS1955: Non-invocable member 'N.C<T>' cannot be used like a method.\n                //             N.C<int>(c);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'C<int>').WithArguments('N.C<T>'),\n                // (12,17): error CS0103: The name 'd' does not exist in the current context\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'd').WithArguments('d'),\n                // (12,13): error CS0234: The type or namespace name 'D' does not exist in the namespace 'N' (are you missing an assembly reference?)\n                //             N.D(d);\n                Diagnostic(ErrorCode.ERR_DottedTypeNameNotFoundInNS, 'N.D').WithArguments('D', 'N'),\n                // (13,15): error CS0103: The name 'e' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'e').WithArguments('e'),\n                // (13,13): error CS0103: The name 'T' does not exist in the current context\n                //             T(e);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'T').WithArguments('T'),\n                // (14,30): error CS0103: The name 'f' does not exist in the current context\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'f').WithArguments('f'),\n                // (14,13): error CS0149: Method name expected\n                //             (typeof(C<int>))(f);\n                Diagnostic(ErrorCode.ERR_MethodNameExpected, '(typeof(C<int>))'),\n                // (15,15): error CS0103: The name 'g' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'g').WithArguments('g'),\n                // (15,13): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (15,22): error CS0103: The name 'h' does not exist in the current context\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'h').WithArguments('h'),\n                // (15,20): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             P(g) = F(h);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,20): error CS0103: The name 'i' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'i').WithArguments('i'),\n                // (16,18): error CS1955: Non-invocable member 'N.C<T>.F' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'F').WithArguments('N.C<T>.F'),\n                // (16,34): error CS0103: The name 'j' does not exist in the current context\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'j').WithArguments('j'),\n                // (16,32): error CS1955: Non-invocable member 'N.C<T>.P' cannot be used like a method.\n                //             this.F(i) = (this).P(j);\n                Diagnostic(ErrorCode.ERR_NonInvocableMemberCalled, 'P').WithArguments('N.C<T>.P'),\n                // (17,20): error CS0103: The name 'k' does not exist in the current context\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_NameNotInContext, 'k').WithArguments('k'),\n                // (17,13): error CS0023: Operator '.' cannot be applied to operand of type '<null>'\n                //             null.M(k);\n                Diagnostic(ErrorCode.ERR_BadUnaryOp, 'null.M').WithArguments('.', '<null>'),\n                // (5,16): warning CS0649: Field 'N.C<T>.F' is never assigned to, and will always have its default value null\n                //         object F;\n                Diagnostic(ErrorCode.WRN_UnassignedInternalField, 'F').WithArguments('N.C<T>.F', 'null')\n            ) 704181"];
3314 [label="param VerifyDiagnostics(this TCompilation c) 704182"];
3315 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 704183"];
3316 [label="var diagnostics = c.GetDiagnostics(); 704184"];
3317 [label="null 704185"];
3318 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 704186"];
3319 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 704187"];
3320 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 704188"];
3321 [label="null 704189"];
3322 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 704190"];
3323 [label="param Imports(CSharpCompilation compilation) 704191"];
3324 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 704192"];
3325 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 704193"];
3326 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 704194"];
3327 [label="param Imports(DiagnosticBag diagnostics) 704195"];
3328 [label="param Imports(this) 704196"];
3329 [label="_compilation 704197"];
3330 [label="_diagnostics 704198"];
3331 [label="UsingAliases 704199"];
3332 [label="Debug.Assert(usingAliases != null); 704200"];
3333 [label="Debug.Assert(usingAliases != null); 704201"];
3334 [label="Debug.Assert(!usings.IsDefault); 704202"];
3335 [label="Debug.Assert(!externs.IsDefault); 704203"];
3336 [label="_compilation 704204"];
3337 [label="this.UsingAliases 704205"];
3338 [label="this.Usings 704206"];
3339 [label="_diagnostics 704207"];
3340 [label="this.ExternAliases 704208"];
3341 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 704209"];
3342 [label="var diagnostics = c.GetDiagnostics(); 704210"];
3343 [label="param FromGlobalUsings(CSharpCompilation compilation) 704211"];
3344 [label="var usings = compilation.Options.Usings; 704212"];
3345 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 704213"];
3346 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 704214"];
3347 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 704215"];
3348 [label="return Empty; 704216"];
3349 [label="var diagnostics = c.GetDiagnostics(); 704217"];
3350 [label="param Complete(CancellationToken cancellationToken) 704218"];
3351 [label="param Complete(this) 704219"];
3352 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 704220"];
3353 [label="cancellationToken.ThrowIfCancellationRequested(); 704221"];
3354 [label="var incompletePart = _state.NextIncompletePart; 704222"];
3355 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 704223"];
3356 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 704224"];
3357 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 704225"];
3358 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 704226"];
3359 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 704227"];
3360 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 704228"];
3361 [label="Validate() 704229"];
3362 [label="param Validate(this) 704230"];
3363 [label="if (this == Empty)\n            {\n                return;\n            } 704231"];
3364 [label="return; 704232"];
3365 [label="Validate(); 704233"];
3366 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 704234"];
3367 [label="return; 704235"];
3368 [label="param Includes(this BinderFlags self) 704236"];
3369 [label="param Includes(BinderFlags other) 704237"];
3370 [label="return (self & other) == other; 704238"];
3371 [label="var diagnostics = c.GetDiagnostics(); 704239"];
3372 [label="0 704240"];
3373 [label="ExternalScope = 0 704241"];
3374 [label="1 704242"];
3375 [label="TopLevelScope = 1 704243"];
3376 [label="2 704244"];
3377 [label="ValueKindInsignificantBits = 2 704245"];
3378 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 704246"];
3379 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 704247"];
3380 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 704248"];
3381 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 704249"];
3382 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 704250"];
3383 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 704251"];
3384 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 704252"];
3385 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 704253"];
3386 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 704254"];
3387 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 704255"];
3388 [label="10 704256"];
3389 [label="MaxParameterListsForErrorRecovery = 10 704257"];
3390 [label="'<>h__TransparentIdentifier' 704258"];
3391 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 704259"];
3392 [label="s => (MethodSymbol)s 704260"];
3393 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 704261"];
3394 [label="s => (PropertySymbol)s 704262"];
3395 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 704263"];
3396 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 704264"];
3397 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 704265"];
3398 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 704266"];
3399 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 704267"];
3400 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 704268"];
3401 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 704269"];
3402 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 704270"];
3403 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 704271"];
3404 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 704272"];
3405 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 704273"];
3406 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 704274"];
3407 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 704275"];
3408 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 704276"];
3409 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 704277"];
3410 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 704278"];
3411 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 704279"];
3412 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 704280"];
3413 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 704281"];
3414 [label="param GetWellKnownTypeMember(WellKnownMember member) 704282"];
3415 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 704283"];
3416 [label="param GetWellKnownTypeMember(Location location = null) 704284"];
3417 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 704285"];
3418 [label="param GetWellKnownTypeMember(bool isOptional = false) 704286"];
3419 [label="Debug.Assert((syntax != null) ^ (location != null)); 704287"];
3420 [label="Debug.Assert((syntax != null) ^ (location != null)); 704288"];
3421 [label="Debug.Assert((syntax != null) ^ (location != null)); 704289"];
3422 [label="Debug.Assert((syntax != null) ^ (location != null)); 704290"];
3423 [label="DiagnosticInfo useSiteDiagnostic; 704291"];
3424 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 704292"];
3425 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 704293"];
3426 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 704294"];
3427 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 704295"];
3428 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 704296"];
3429 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 704297"];
3430 [label="param GetWellKnownTypeMember(WellKnownMember member) 704298"];
3431 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 704299"];
3432 [label="param GetWellKnownTypeMember(bool isOptional = false) 704300"];
3433 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 704301"];
3434 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 704302"];
3435 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 704303"];
3436 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 704304"];
3437 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 704305"];
3438 [label="Debug.Assert(symbol is object); 704306"];
3439 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 704307"];
3440 [label="isInternal = false; 704308"];
3441 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704309"];
3442 [label="symbol = symbol.ContainingType; 704310"];
3443 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 704311"];
3444 [label="return true; 704312"];
3445 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 704313"];
3446 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 704314"];
3447 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 704315"];
3448 [label="Debug.Assert(symbol is object); 704316"];
3449 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 704317"];
3450 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704318"];
3451 [label="symbol = symbol.ContainingType; 704319"];
3452 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 704320"];
3453 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704321"];
3454 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 704322"];
3455 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 704323"];
3456 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 704324"];
3457 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 704325"];
3458 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 704326"];
3459 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 704327"];
3460 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 704328"];
3461 [label="Debug.Assert(symbol is object); 704329"];
3462 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 704330"];
3463 [label="isInternal = false; 704331"];
3464 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704332"];
3465 [label="symbol = symbol.ContainingType; 704333"];
3466 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 704334"];
3467 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 704335"];
3468 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 704336"];
3469 [label="Debug.Assert(symbol is object); 704337"];
3470 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 704338"];
3471 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704339"];
3472 [label="symbol = symbol.ContainingType; 704340"];
3473 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 704341"];
3474 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 704342"];
3475 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 704343"];
3476 [label="return memberSymbol; 704344"];
3477 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 704345"];
3478 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 704346"];
3479 [label="return memberSymbol; 704347"];
3480 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 704348"];
3481 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 704349"];
3482 [label="Debug.Assert(symbol is object); 704350"];
3483 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 704351"];
3484 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704352"];
3485 [label="symbol = symbol.ContainingType; 704353"];
3486 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 704354"];
3487 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 704355"];
3488 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 704356"];
3489 [label="Debug.Assert(symbol is object); 704357"];
3490 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 704358"];
3491 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 704359"];
3492 [label="symbol = symbol.ContainingType; 704360"];
3493 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 704361"];
3494 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 704362"];
3495 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 704363"];
3496 [label="return memberSymbol; 704364"];
3497 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 704365"];
3498 [label="return memberSymbol; 704366"];
3499 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 704367"];
3500 [label="return memberSymbol; 704368"];
3501 [label="return memberSymbol; 704369"];
3502 [label="param BinderFactory(CSharpCompilation compilation) 704370"];
3503 [label="param BinderFactory(SyntaxTree syntaxTree) 704371"];
3504 [label="param BinderFactory(bool ignoreAccessibility) 704372"];
3505 [label="param BinderFactory(this) 704373"];
3506 [label="_binderCache 704374"];
3507 [label="_compilation 704375"];
3508 [label="_syntaxTree 704376"];
3509 [label="_buckStopsHereBinder 704377"];
3510 [label="_ignoreAccessibility 704378"];
3511 [label="_binderFactoryVisitorPool 704379"];
3512 [label="_compilation 704380"];
3513 [label="_syntaxTree 704381"];
3514 [label="_ignoreAccessibility 704382"];
3515 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 704383"];
3516 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 704384"];
3517 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 704385"];
3518 [label="_binderFactoryVisitorPool 704386"];
3519 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 704387"];
3520 [label="_binderCache 704388"];
3521 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 704389"];
3522 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 704390"];
3523 [label="new BuckStopsHereBinder(compilation) 704391"];
3524 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 704392"];
3525 [label="param BuckStopsHereBinder(this) 704393"];
3526 [label="compilation 704394"];
3527 [label="param BuckStopsHereBinder(this) 704395"];
3528 [label="param Binder(CSharpCompilation compilation) 704396"];
3529 [label="param Binder(this) 704397"];
3530 [label="internal CSharpCompilation Compilation { get; } 704398"];
3531 [label="Flags 704399"];
3532 [label="protected internal Binder? Next { get; } 704400"];
3533 [label="_lazyConversions 704401"];
3534 [label="_lazyOverloadResolution 704402"];
3535 [label="RoslynDebug.Assert(compilation != null); 704403"];
3536 [label="RoslynDebug.Assert(compilation != null); 704404"];
3537 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 704405"];
3538 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 704406"];
3539 [label="this.Flags 704407"];
3540 [label="this.Compilation 704408"];
3541 [label="_buckStopsHereBinder 704409"];
3542 [label="var diagnostics = c.GetDiagnostics(); 704410"];
3543 [label="param GetBinder(SyntaxNode node) 704411"];
3544 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 704412"];
3545 [label="param GetBinder(Symbol memberOpt = null) 704413"];
3546 [label="param GetBinder(this) 704414"];
3547 [label="int position = node.SpanStart; 704415"];
3548 [label="InScript 704416"];
3549 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 704417"];
3550 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 704418"];
3551 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 704419"];
3552 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 704420"];
3553 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 704421"];
3554 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 704422"];
3555 [label="node = node.Parent; 704423"];
3556 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 704424"];
3557 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 704425"];
3558 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 704426"];
3559 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 704427"];
3560 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 704428"];
3561 [label="param GetBinder(SyntaxNode node) 704429"];
3562 [label="param GetBinder(int position) 704430"];
3563 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 704431"];
3564 [label="param GetBinder(Symbol memberOpt = null) 704432"];
3565 [label="param GetBinder(this) 704433"];
3566 [label="Debug.Assert(node != null); 704434"];
3567 [label="Debug.Assert(node != null); 704435"];
3568 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 704436"];
3569 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 704437"];
3570 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 704438"];
3571 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 704439"];
3572 [label="param BinderFactoryVisitor(BinderFactory factory) 704440"];
3573 [label="param BinderFactoryVisitor(this) 704441"];
3574 [label="param BinderFactoryVisitor(this) 704442"];
3575 [label="_position 704443"];
3576 [label="_memberDeclarationOpt 704444"];
3577 [label="_memberOpt 704445"];
3578 [label="_factory 704446"];
3579 [label="_factory 704447"];
3580 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 704448"];
3581 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 704449"];
3582 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 704450"];
3583 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 704451"];
3584 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 704452"];
3585 [label="param Initialize(int position) 704453"];
3586 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 704454"];
3587 [label="param Initialize(Symbol memberOpt) 704455"];
3588 [label="param Initialize(this) 704456"];
3589 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704457"];
3590 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704458"];
3591 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704459"];
3592 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704460"];
3593 [label="_position 704461"];
3594 [label="_memberDeclarationOpt 704462"];
3595 [label="_memberOpt 704463"];
3596 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 704464"];
3597 [label="Binder result = visitor.Visit(node); 704465"];
3598 [label="visitor.Visit(node) 704466"];
3599 [label="param Visit(SyntaxNode node) 704467"];
3600 [label="param Visit(this) 704468"];
3601 [label="return VisitCore(node); 704469"];
3602 [label="VisitCore(node) 704470"];
3603 [label="param VisitCore(SyntaxNode node) 704471"];
3604 [label="param VisitCore(this) 704472"];
3605 [label="return ((CSharpSyntaxNode)node).Accept(this); 704473"];
3606 [label="return ((CSharpSyntaxNode)node).Accept(this); 704474"];
3607 [label="return ((CSharpSyntaxNode)node).Accept(this); 704475"];
3608 [label="param DefaultVisit(SyntaxNode parent) 704476"];
3609 [label="param DefaultVisit(this) 704477"];
3610 [label="return VisitCore(parent.Parent); 704478"];
3611 [label="VisitCore(parent.Parent) 704479"];
3612 [label="param VisitCore(SyntaxNode node) 704480"];
3613 [label="param VisitCore(this) 704481"];
3614 [label="return ((CSharpSyntaxNode)node).Accept(this); 704482"];
3615 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 704483"];
3616 [label="param VisitClassDeclaration(this) 704484"];
3617 [label="return VisitTypeDeclarationCore(node); 704485"];
3618 [label="VisitTypeDeclarationCore(node) 704486"];
3619 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 704487"];
3620 [label="param VisitTypeDeclarationCore(this) 704488"];
3621 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 704489"];
3622 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 704490"];
3623 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 704491"];
3624 [label="NodeUsage extraInfo = NodeUsage.Normal; 704492"];
3625 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704493"];
3626 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704494"];
3627 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704495"];
3628 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704496"];
3629 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704497"];
3630 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704498"];
3631 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 704499"];
3632 [label="return VisitTypeDeclarationCore(parent, extraInfo); 704500"];
3633 [label="return VisitTypeDeclarationCore(parent, extraInfo); 704501"];
3634 [label="VisitTypeDeclarationCore(parent, extraInfo) 704502"];
3635 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 704503"];
3636 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 704504"];
3637 [label="param VisitTypeDeclarationCore(this) 704505"];
3638 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704506"];
3639 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704507"];
3640 [label="CreateBinderCacheKey(parent, extraInfo) 704508"];
3641 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 704509"];
3642 [label="param CreateBinderCacheKey(NodeUsage usage) 704510"];
3643 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704511"];
3644 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704512"];
3645 [label="return new BinderCacheKey(node, usage); 704513"];
3646 [label="return new BinderCacheKey(node, usage); 704514"];
3647 [label="return new BinderCacheKey(node, usage); 704515"];
3648 [label="new BinderCacheKey(node, usage) 704516"];
3649 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 704517"];
3650 [label="param BinderCacheKey(NodeUsage usage) 704518"];
3651 [label="param BinderCacheKey(this) 704519"];
3652 [label="this.syntaxNode 704520"];
3653 [label="this.usage 704521"];
3654 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704522"];
3655 [label="Binder resultBinder; 704523"];
3656 [label="binderCache 704524"];
3657 [label="get\n                {\n                    return _factory._binderCache;\n                } 704525"];
3658 [label="return _factory._binderCache; 704526"];
3659 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704527"];
3660 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704528"];
3661 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704529"];
3662 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704530"];
3663 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704531"];
3664 [label="param GetHashCode(this) 704532"];
3665 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 704533"];
3666 [label="resultBinder = VisitCore(parent.Parent); 704534"];
3667 [label="VisitCore(parent.Parent) 704535"];
3668 [label="param VisitCore(SyntaxNode node) 704536"];
3669 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 704537"];
3670 [label="param VisitNamespaceDeclaration(this) 704538"];
3671 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 704539"];
3672 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 704540"];
3673 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 704541"];
3674 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 704542"];
3675 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 704543"];
3676 [label="bool inUsing = IsInUsing(parent); 704544"];
3677 [label="IsInUsing(parent) 704545"];
3678 [label="param IsInUsing(CSharpSyntaxNode containingNode) 704546"];
3679 [label="param IsInUsing(this) 704547"];
3680 [label="TextSpan containingSpan = containingNode.Span; 704548"];
3681 [label="SyntaxToken token; 704549"];
3682 [label="token 704550"];
3683 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 704551"];
3684 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 704552"];
3685 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 704553"];
3686 [label="token = containingNode.FindToken(_position); 704554"];
3687 [label="token = containingNode.FindToken(_position); 704555"];
3688 [label="var node = token.Parent; 704556"];
3689 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 704557"];
3690 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 704558"];
3691 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 704559"];
3692 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 704560"];
3693 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 704561"];
3694 [label="node = node.Parent; 704562"];
3695 [label="return false; 704563"];
3696 [label="bool inUsing = IsInUsing(parent); 704564"];
3697 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 704565"];
3698 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 704566"];
3699 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 704567"];
3700 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 704568"];
3701 [label="VisitNamespaceDeclaration(parent, _position, inBody, inUsing) 704569"];
3702 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 704570"];
3703 [label="param VisitNamespaceDeclaration(int position) 704571"];
3704 [label="param VisitNamespaceDeclaration(bool inBody) 704572"];
3705 [label="param VisitNamespaceDeclaration(bool inUsing) 704573"];
3706 [label="param VisitNamespaceDeclaration(this) 704574"];
3707 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 704575"];
3708 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 704576"];
3709 [label="inUsing 704577"];
3710 [label="inBody 704578"];
3711 [label="var extraInfo = inUsing ? NodeUsage.NamespaceUsings : (inBody ? NodeUsage.NamespaceBody : NodeUsage.Normal); 704579"];
3712 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704580"];
3713 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704581"];
3714 [label="CreateBinderCacheKey(parent, extraInfo) 704582"];
3715 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 704583"];
3716 [label="param CreateBinderCacheKey(NodeUsage usage) 704584"];
3717 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704585"];
3718 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704586"];
3719 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704587"];
3720 [label="Binder result; 704588"];
3721 [label="binderCache 704589"];
3722 [label="get\n                {\n                    return _factory._binderCache;\n                } 704590"];
3723 [label="return _factory._binderCache; 704591"];
3724 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704592"];
3725 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704593"];
3726 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704594"];
3727 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704595"];
3728 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704596"];
3729 [label="Binder outer; 704597"];
3730 [label="var container = parent.Parent; 704598"];
3731 [label="InScript 704599"];
3732 [label="get\n                {\n                    return _factory.InScript;\n                } 704600"];
3733 [label="_factory.InScript 704601"];
3734 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 704602"];
3735 [label="return _factory.InScript; 704603"];
3736 [label="if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    } 704604"];
3737 [label="outer = _factory.GetBinder(parent.Parent, position); 704605"];
3738 [label="outer = _factory.GetBinder(parent.Parent, position); 704606"];
3739 [label="outer = _factory.GetBinder(parent.Parent, position); 704607"];
3740 [label="_factory.GetBinder(parent.Parent, position) 704608"];
3741 [label="param GetBinder(SyntaxNode node) 704609"];
3742 [label="param GetBinder(int position) 704610"];
3743 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 704611"];
3744 [label="param GetBinder(Symbol memberOpt = null) 704612"];
3745 [label="Debug.Assert(node != null); 704613"];
3746 [label="Debug.Assert(node != null); 704614"];
3747 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 704615"];
3748 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704616"];
3749 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704617"];
3750 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 704618"];
3751 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 704619"];
3752 [label="param VisitCompilationUnit(this) 704620"];
3753 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 704621"];
3754 [label="IsInUsing(parent) 704622"];
3755 [label="param IsInUsing(CSharpSyntaxNode containingNode) 704623"];
3756 [label="param IsInUsing(this) 704624"];
3757 [label="SyntaxToken token; 704625"];
3758 [label="token 704626"];
3759 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 704627"];
3760 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 704628"];
3761 [label="InScript 704629"];
3762 [label="get\n                {\n                    return _factory.InScript;\n                } 704630"];
3763 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 704631"];
3764 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 704632"];
3765 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 704633"];
3766 [label="param VisitCompilationUnit(bool inUsing) 704634"];
3767 [label="param VisitCompilationUnit(bool inScript) 704635"];
3768 [label="param VisitCompilationUnit(this) 704636"];
3769 [label="syntaxTree 704637"];
3770 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 704638"];
3771 [label="return _factory._syntaxTree; 704639"];
3772 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 704640"];
3773 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 704641"];
3774 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 704642"];
3775 [label="inUsing 704643"];
3776 [label="inScript 704644"];
3777 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 704645"];
3778 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 704646"];
3779 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 704647"];
3780 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 704648"];
3781 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 704649"];
3782 [label="param CreateBinderCacheKey(NodeUsage usage) 704650"];
3783 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704651"];
3784 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704652"];
3785 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 704653"];
3786 [label="Binder result; 704654"];
3787 [label="binderCache 704655"];
3788 [label="get\n                {\n                    return _factory._binderCache;\n                } 704656"];
3789 [label="return _factory._binderCache; 704657"];
3790 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704658"];
3791 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704659"];
3792 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704660"];
3793 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704661"];
3794 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 704662"];
3795 [label="this.buckStopsHereBinder 704663"];
3796 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 704664"];
3797 [label="return _factory._buckStopsHereBinder; 704665"];
3798 [label="result = this.buckStopsHereBinder; 704666"];
3799 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 704667"];
3800 [label="compilation 704668"];
3801 [label="get\n                {\n                    return _factory._compilation;\n                } 704669"];
3802 [label="return _factory._compilation; 704670"];
3803 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 704671"];
3804 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 704672"];
3805 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 704673"];
3806 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 704674"];
3807 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 704675"];
3808 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 704676"];
3809 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 704677"];
3810 [label="param InContainerBinder(Binder next) 704678"];
3811 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 704679"];
3812 [label="param InContainerBinder(bool inUsing) 704680"];
3813 [label="param InContainerBinder(this) 704681"];
3814 [label="next 704682"];
3815 [label="param InContainerBinder(this) 704683"];
3816 [label="param Binder(Binder next) 704684"];
3817 [label="param Binder(this) 704685"];
3818 [label="param Binder(Conversions? conversions = null) 704686"];
3819 [label="RoslynDebug.Assert(next != null); 704687"];
3820 [label="RoslynDebug.Assert(next != null); 704688"];
3821 [label="Next 704689"];
3822 [label="this.Flags 704690"];
3823 [label="this.Compilation 704691"];
3824 [label="_lazyConversions 704692"];
3825 [label="_container 704693"];
3826 [label="_computeImports 704694"];
3827 [label="_lazyImports 704695"];
3828 [label="_lazyImportChain 704696"];
3829 [label="_lazyQuickAttributeChecker 704697"];
3830 [label="Debug.Assert((object)container != null); 704698"];
3831 [label="Debug.Assert((object)container != null); 704699"];
3832 [label="Debug.Assert(declarationSyntax != null); 704700"];
3833 [label="Debug.Assert(declarationSyntax != null); 704701"];
3834 [label="_container 704702"];
3835 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 704703"];
3836 [label="_computeImports 704704"];
3837 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 704705"];
3838 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 704706"];
3839 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 704707"];
3840 [label="_usingsSyntax 704708"];
3841 [label="compilation 704709"];
3842 [label="get\n                {\n                    return _factory._compilation;\n                } 704710"];
3843 [label="return _factory._compilation; 704711"];
3844 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 704712"];
3845 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 704713"];
3846 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 704714"];
3847 [label="binderCache 704715"];
3848 [label="return _factory._binderCache; 704716"];
3849 [label="binderCache.TryAdd(key, result); 704717"];
3850 [label="binderCache.TryAdd(key, result); 704718"];
3851 [label="binderCache.TryAdd(key, result); 704719"];
3852 [label="binderCache.TryAdd(key, result); 704720"];
3853 [label="binderCache.TryAdd(key, result); 704721"];
3854 [label="return result; 704722"];
3855 [label="return ((CSharpSyntaxNode)node).Accept(this); 704723"];
3856 [label="_binderFactoryVisitorPool.Free(visitor); 704724"];
3857 [label="_binderFactoryVisitorPool.Free(visitor); 704725"];
3858 [label="return result; 704726"];
3859 [label="if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    } 704727"];
3860 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 704728"];
3861 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 704729"];
3862 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 704730"];
3863 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 704731"];
3864 [label="MakeNamespaceBinder(parent, parent.Name, outer, inUsing) 704732"];
3865 [label="param MakeNamespaceBinder(CSharpSyntaxNode node) 704733"];
3866 [label="param MakeNamespaceBinder(NameSyntax name) 704734"];
3867 [label="param MakeNamespaceBinder(Binder outer) 704735"];
3868 [label="param MakeNamespaceBinder(bool inUsing) 704736"];
3869 [label="param MakeNamespaceBinder(this) 704737"];
3870 [label="QualifiedNameSyntax dotted; 704738"];
3871 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 704739"];
3872 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 704740"];
3873 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 704741"];
3874 [label="NamespaceOrTypeSymbol container; 704742"];
3875 [label="if (outer is InContainerBinder inContainerBinder)\n                {\n                    container = inContainerBinder.Container;\n                }\n                else\n                {\n                    Debug.Assert(outer is SimpleProgramUnitBinder);\n                    container = outer.Compilation.GlobalNamespace;\n                } 704743"];
3876 [label="inContainerBinder.Container 704744"];
3877 [label="get\n            {\n                return _container;\n            } 704745"];
3878 [label="return _container; 704746"];
3879 [label="container = inContainerBinder.Container; 704747"];
3880 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 704748"];
3881 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 704749"];
3882 [label="if ((object)ns == null) return outer; 704750"];
3883 [label="if ((object)ns == null) return outer; 704751"];
3884 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 704752"];
3885 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 704753"];
3886 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 704754"];
3887 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 704755"];
3888 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 704756"];
3889 [label="new InContainerBinder(ns, outer, node, inUsing: inUsing) 704757"];
3890 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 704758"];
3891 [label="param InContainerBinder(Binder next) 704759"];
3892 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 704760"];
3893 [label="param InContainerBinder(bool inUsing) 704761"];
3894 [label="param InContainerBinder(this) 704762"];
3895 [label="param InContainerBinder(this) 704763"];
3896 [label="param Binder(this) 704764"];
3897 [label="param Binder(Conversions? conversions = null) 704765"];
3898 [label="RoslynDebug.Assert(next != null); 704766"];
3899 [label="RoslynDebug.Assert(next != null); 704767"];
3900 [label="this.Flags 704768"];
3901 [label="this.Compilation 704769"];
3902 [label="_lazyConversions 704770"];
3903 [label="_container 704771"];
3904 [label="_computeImports 704772"];
3905 [label="_lazyImports 704773"];
3906 [label="_lazyImportChain 704774"];
3907 [label="_lazyQuickAttributeChecker 704775"];
3908 [label="Debug.Assert((object)container != null); 704776"];
3909 [label="Debug.Assert((object)container != null); 704777"];
3910 [label="Debug.Assert(declarationSyntax != null); 704778"];
3911 [label="Debug.Assert(declarationSyntax != null); 704779"];
3912 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 704780"];
3913 [label="_computeImports 704781"];
3914 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 704782"];
3915 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 704783"];
3916 [label="if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 704784"];
3917 [label="var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax; 704785"];
3918 [label="_usingsSyntax 704786"];
3919 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 704787"];
3920 [label="binderCache 704788"];
3921 [label="return _factory._binderCache; 704789"];
3922 [label="binderCache.TryAdd(key, result); 704790"];
3923 [label="binderCache.TryAdd(key, result); 704791"];
3924 [label="binderCache.TryAdd(key, result); 704792"];
3925 [label="binderCache.TryAdd(key, result); 704793"];
3926 [label="binderCache.TryAdd(key, result); 704794"];
3927 [label="return result; 704795"];
3928 [label="return ((CSharpSyntaxNode)node).Accept(this); 704796"];
3929 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 704797"];
3930 [label="resultBinder.ContainingMemberOrLambda 704798"];
3931 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 704799"];
3932 [label="var merged = _container as MergedNamespaceSymbol; 704800"];
3933 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 704801"];
3934 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 704802"];
3935 [label="((object)merged != null) 704803"];
3936 [label="_container 704804"];
3937 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 704805"];
3938 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 704806"];
3939 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 704807"];
3940 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 704808"];
3941 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 704809"];
3942 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 704810"];
3943 [label="new InContainerBinder(typeSymbol, resultBinder) 704811"];
3944 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 704812"];
3945 [label="param InContainerBinder(Binder next) 704813"];
3946 [label="param InContainerBinder(Imports imports = null) 704814"];
3947 [label="param InContainerBinder(this) 704815"];
3948 [label="next 704816"];
3949 [label="param InContainerBinder(this) 704817"];
3950 [label="param Binder(Binder next) 704818"];
3951 [label="param Binder(this) 704819"];
3952 [label="param Binder(Conversions? conversions = null) 704820"];
3953 [label="RoslynDebug.Assert(next != null); 704821"];
3954 [label="RoslynDebug.Assert(next != null); 704822"];
3955 [label="this.Flags 704823"];
3956 [label="this.Compilation 704824"];
3957 [label="_lazyConversions 704825"];
3958 [label="_container 704826"];
3959 [label="_computeImports 704827"];
3960 [label="_lazyImports 704828"];
3961 [label="_lazyImportChain 704829"];
3962 [label="_lazyQuickAttributeChecker 704830"];
3963 [label="Debug.Assert((object)container != null || imports != null); 704831"];
3964 [label="Debug.Assert((object)container != null || imports != null); 704832"];
3965 [label="_container 704833"];
3966 [label="_lazyImports = imports ?? Imports.Empty; 704834"];
3967 [label="_lazyImports = imports ?? Imports.Empty; 704835"];
3968 [label="_lazyImports 704836"];
3969 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 704837"];
3970 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 704838"];
3971 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 704839"];
3972 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 704840"];
3973 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 704841"];
3974 [label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 704842"];
3975 [label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 704843"];
3976 [label="param WithClassTypeParametersBinder(Binder next) 704844"];
3977 [label="param WithClassTypeParametersBinder(this) 704845"];
3978 [label="next 704846"];
3979 [label="param WithClassTypeParametersBinder(this) 704847"];
3980 [label="param WithTypeParametersBinder(Binder next) 704848"];
3981 [label="param WithTypeParametersBinder(this) 704849"];
3982 [label="next 704850"];
3983 [label="param WithTypeParametersBinder(this) 704851"];
3984 [label="param Binder(Binder next) 704852"];
3985 [label="RoslynDebug.Assert(next != null); 704853"];
3986 [label="RoslynDebug.Assert(next != null); 704854"];
3987 [label="this.Flags 704855"];
3988 [label="this.Compilation 704856"];
3989 [label="_namedType 704857"];
3990 [label="_lazyTypeParameterMap 704858"];
3991 [label="Debug.Assert((object)container != null); 704859"];
3992 [label="Debug.Assert((object)container != null); 704860"];
3993 [label="_namedType 704861"];
3994 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 704862"];
3995 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 704863"];
3996 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 704864"];
3997 [label="param WithUnsafeRegionIfNecessary(this) 704865"];
3998 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 704866"];
3999 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 704867"];
4000 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 704868"];
4001 [label="param Includes(this BinderFlags self) 704869"];
4002 [label="param Includes(BinderFlags other) 704870"];
4003 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 704871"];
4004 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 704872"];
4005 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 704873"];
4006 [label="binderCache 704874"];
4007 [label="return _factory._binderCache; 704875"];
4008 [label="binderCache.TryAdd(key, resultBinder); 704876"];
4009 [label="binderCache.TryAdd(key, resultBinder); 704877"];
4010 [label="binderCache.TryAdd(key, resultBinder); 704878"];
4011 [label="binderCache.TryAdd(key, resultBinder); 704879"];
4012 [label="binderCache.TryAdd(key, resultBinder); 704880"];
4013 [label="return resultBinder; 704881"];
4014 [label="return ((CSharpSyntaxNode)node).Accept(this); 704882"];
4015 [label="_binderFactoryVisitorPool.Free(visitor); 704883"];
4016 [label="param GetDefaultTypeParameterConstraintClauses(TypeParameterListSyntax typeParameterList) 704884"];
4017 [label="param GetDefaultTypeParameterConstraintClauses(this) 704885"];
4018 [label="var builder = ArrayBuilder<TypeParameterConstraintClause>.GetInstance(typeParameterList.Parameters.Count); 704886"];
4019 [label="foreach (TypeParameterSyntax typeParameterSyntax in typeParameterList.Parameters)\n            {\n                builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax));\n            } 704887"];
4020 [label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 704888"];
4021 [label="GetDefaultTypeParameterConstraintClause(typeParameterSyntax) 704889"];
4022 [label="param GetDefaultTypeParameterConstraintClause(TypeParameterSyntax typeParameterSyntax) 704890"];
4023 [label="param GetDefaultTypeParameterConstraintClause(bool isForOverride = false) 704891"];
4024 [label="param GetDefaultTypeParameterConstraintClause(this) 704892"];
4025 [label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 704893"];
4026 [label="AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 704894"];
4027 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 704895"];
4028 [label="param AreNullableAnnotationsEnabled(this) 704896"];
4029 [label="RoslynDebug.Assert(token.SyntaxTree is object); 704897"];
4030 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 704898"];
4031 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 704899"];
4032 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 704900"];
4033 [label="param AreNullableAnnotationsEnabled(int position) 704901"];
4034 [label="param AreNullableAnnotationsEnabled(this) 704902"];
4035 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 704903"];
4036 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 704904"];
4037 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 704905"];
4038 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 704906"];
4039 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 704907"];
4040 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 704908"];
4041 [label="AreNullableAnnotationsGloballyEnabled() 704909"];
4042 [label="param AreNullableAnnotationsGloballyEnabled(this) 704910"];
4043 [label="RoslynDebug.Assert(Next is object); 704911"];
4044 [label="Next.AreNullableAnnotationsGloballyEnabled() 704912"];
4045 [label="param AreNullableAnnotationsGloballyEnabled(this) 704913"];
4046 [label="param AreNullableAnnotationsGloballyEnabled(this) 704914"];
4047 [label="GetGlobalAnnotationState() 704915"];
4048 [label="param GetGlobalAnnotationState(this) 704916"];
4049 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 704917"];
4050 [label="return false; 704918"];
4051 [label="return GetGlobalAnnotationState(); 704919"];
4052 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 704920"];
4053 [label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 704921"];
4054 [label="isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 704922"];
4055 [label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 704923"];
4056 [label="return builder.ToImmutableAndFree(); 704924"];
4057 [label="Debug.Assert(node != null); 704925"];
4058 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 704926"];
4059 [label="NodeUsage extraInfo = NodeUsage.Normal; 704927"];
4060 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704928"];
4061 [label="param Equals(BinderCacheKey other) 704929"];
4062 [label="param Equals(this) 704930"];
4063 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 704931"];
4064 [label="Debug.Assert(node != null); 704932"];
4065 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 704933"];
4066 [label="VisitTypeDeclarationCore(node) 704934"];
4067 [label="NodeUsage extraInfo = NodeUsage.Normal; 704935"];
4068 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 704936"];
4069 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 704937"];
4070 [label="VisitTypeDeclarationCore(parent, extraInfo) 704938"];
4071 [label="CreateBinderCacheKey(parent, extraInfo) 704939"];
4072 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704940"];
4073 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704941"];
4074 [label="return new BinderCacheKey(node, usage); 704942"];
4075 [label="new BinderCacheKey(node, usage) 704943"];
4076 [label="param BinderCacheKey(this) 704944"];
4077 [label="var key = CreateBinderCacheKey(parent, extraInfo); 704945"];
4078 [label="Binder resultBinder; 704946"];
4079 [label="binderCache 704947"];
4080 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704948"];
4081 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704949"];
4082 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 704950"];
4083 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 704951"];
4084 [label="param WithUnsafeRegionIfNecessary(this) 704952"];
4085 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 704953"];
4086 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 704954"];
4087 [label="param Includes(BinderFlags other) 704955"];
4088 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 704956"];
4089 [label="param CheckFeatureAvailability(SyntaxNode syntax) 704957"];
4090 [label="param CheckFeatureAvailability(MessageID feature) 704958"];
4091 [label="param CheckFeatureAvailability(DiagnosticBag diagnostics) 704959"];
4092 [label="param CheckFeatureAvailability(Location? location = null) 704960"];
4093 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 704961"];
4094 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 704962"];
4095 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 704963"];
4096 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 704964"];
4097 [label="CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()) 704965"];
4098 [label="param CheckFeatureAvailability(SyntaxTree tree) 704966"];
4099 [label="param CheckFeatureAvailability(MessageID feature) 704967"];
4100 [label="param CheckFeatureAvailability(DiagnosticBag diagnostics) 704968"];
4101 [label="param CheckFeatureAvailability(Location location) 704969"];
4102 [label="if (feature.GetFeatureAvailabilityDiagnosticInfo((CSharpParseOptions)tree.Options) is { } diagInfo)\n            {\n                diagnostics.Add(diagInfo, location);\n                return false;\n            } 704970"];
4103 [label="if (feature.GetFeatureAvailabilityDiagnosticInfo((CSharpParseOptions)tree.Options) is { } diagInfo)\n            {\n                diagnostics.Add(diagInfo, location);\n                return false;\n            } 704971"];
4104 [label="if (feature.GetFeatureAvailabilityDiagnosticInfo((CSharpParseOptions)tree.Options) is { } diagInfo)\n            {\n                diagnostics.Add(diagInfo, location);\n                return false;\n            } 704972"];
4105 [label="return true; 704973"];
4106 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 704974"];
4107 [label="var diagnostics = c.GetDiagnostics(); 704975"];
4108 [label="Debug.Assert(node != null); 704976"];
4109 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 704977"];
4110 [label="container.AssertMemberExposure(memberOpt); 704978"];
4111 [label="container.AssertMemberExposure(memberOpt); 704979"];
4112 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 704980"];
4113 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 704981"];
4114 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 704982"];
4115 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 704983"];
4116 [label="Debug.Assert((object)containing != null); 704984"];
4117 [label="Debug.Assert((object)containing != null); 704985"];
4118 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 704986"];
4119 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 704987"];
4120 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 704988"];
4121 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 704989"];
4122 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 704990"];
4123 [label="param BinderWithContainingMemberOrLambda(Binder next) 704991"];
4124 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 704992"];
4125 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 704993"];
4126 [label="param BinderWithContainingMemberOrLambda(this) 704994"];
4127 [label="next 704995"];
4128 [label="flags 704996"];
4129 [label="param BinderWithContainingMemberOrLambda(this) 704997"];
4130 [label="param Binder(Binder next) 704998"];
4131 [label="param Binder(BinderFlags flags) 704999"];
4132 [label="param Binder(this) 705000"];
4133 [label="internal CSharpCompilation Compilation { get; } 705001"];
4134 [label="Flags 705002"];
4135 [label="protected internal Binder? Next { get; } 705003"];
4136 [label="_lazyConversions 705004"];
4137 [label="_lazyOverloadResolution 705005"];
4138 [label="RoslynDebug.Assert(next != null); 705006"];
4139 [label="RoslynDebug.Assert(next != null); 705007"];
4140 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 705008"];
4141 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 705009"];
4142 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 705010"];
4143 [label="param Includes(this BinderFlags self) 705011"];
4144 [label="param Includes(BinderFlags other) 705012"];
4145 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 705013"];
4146 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 705014"];
4147 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 705015"];
4148 [label="param Includes(this BinderFlags self) 705016"];
4149 [label="param Includes(BinderFlags other) 705017"];
4150 [label="Next 705018"];
4151 [label="this.Flags 705019"];
4152 [label="this.Compilation 705020"];
4153 [label="_containingMemberOrLambda 705021"];
4154 [label="Debug.Assert(containingMemberOrLambda != null); 705022"];
4155 [label="Debug.Assert(containingMemberOrLambda != null); 705023"];
4156 [label="_containingMemberOrLambda 705024"];
4157 [label="var diagnostics = c.GetDiagnostics(); 705025"];
4158 [label="param BindType(ExpressionSyntax syntax) 705026"];
4159 [label="param BindType(DiagnosticBag diagnostics) 705027"];
4160 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 705028"];
4161 [label="param BindType(bool suppressUseSiteDiagnostics = false) 705029"];
4162 [label="param BindType(this) 705030"];
4163 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 705031"];
4164 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 705032"];
4165 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 705033"];
4166 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 705034"];
4167 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 705035"];
4168 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 705036"];
4169 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 705037"];
4170 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 705038"];
4171 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 705039"];
4172 [label="param BindTypeOrAlias(this) 705040"];
4173 [label="Debug.Assert(diagnostics != null); 705041"];
4174 [label="Debug.Assert(diagnostics != null); 705042"];
4175 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 705043"];
4176 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 705044"];
4177 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 705045"];
4178 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 705046"];
4179 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 705047"];
4180 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 705048"];
4181 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 705049"];
4182 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 705050"];
4183 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 705051"];
4184 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 705052"];
4185 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 705053"];
4186 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 705054"];
4187 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 705055"];
4188 [label="return bindPredefined(syntax, diagnostics); 705056"];
4189 [label="return bindPredefined(syntax, diagnostics); 705057"];
4190 [label="bindPredefined(syntax, diagnostics) 705058"];
4191 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 705059"];
4192 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 705060"];
4193 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 705061"];
4194 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 705062"];
4195 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 705063"];
4196 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 705064"];
4197 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 705065"];
4198 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 705066"];
4199 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 705067"];
4200 [label="param BindPredefinedTypeSymbol(this) 705068"];
4201 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 705069"];
4202 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 705070"];
4203 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 705071"];
4204 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 705072"];
4205 [label="param GetSpecialType(SpecialType typeId) 705073"];
4206 [label="param GetSpecialType(DiagnosticBag diagnostics) 705074"];
4207 [label="param GetSpecialType(SyntaxNode node) 705075"];
4208 [label="param GetSpecialType(this) 705076"];
4209 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705077"];
4210 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705078"];
4211 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705079"];
4212 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705080"];
4213 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 705081"];
4214 [label="param GetSpecialType(CSharpCompilation compilation) 705082"];
4215 [label="param GetSpecialType(SpecialType typeId) 705083"];
4216 [label="param GetSpecialType(SyntaxNode node) 705084"];
4217 [label="param GetSpecialType(DiagnosticBag diagnostics) 705085"];
4218 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 705086"];
4219 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 705087"];
4220 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 705088"];
4221 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 705089"];
4222 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 705090"];
4223 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 705091"];
4224 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 705092"];
4225 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 705093"];
4226 [label="param ReportUseSiteDiagnostics(Symbol symbol) 705094"];
4227 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 705095"];
4228 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 705096"];
4229 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 705097"];
4230 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 705098"];
4231 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 705099"];
4232 [label="return typeSymbol; 705100"];
4233 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 705101"];
4234 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 705102"];
4235 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 705103"];
4236 [label="param AreNullableAnnotationsEnabled(this) 705104"];
4237 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 705105"];
4238 [label="type 705106"];
4239 [label="param operator(TypeWithAnnotations typeWithAnnotations) 705107"];
4240 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 705108"];
4241 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 705109"];
4242 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 705110"];
4243 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 705111"];
4244 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 705112"];
4245 [label="Debug.Assert(typeWithAnnotations.HasType); 705113"];
4246 [label="_typeWithAnnotations 705114"];
4247 [label="_symbol = null; 705115"];
4248 [label="_symbol 705116"];
4249 [label="_isNullableEnabled = false; 705117"];
4250 [label="_isNullableEnabled 705118"];
4251 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 705119"];
4252 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 705120"];
4253 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 705121"];
4254 [label="symbol.IsType 705122"];
4255 [label="=> !_typeWithAnnotations.IsDefault 705123"];
4256 [label="!_typeWithAnnotations.IsDefault 705124"];
4257 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 705125"];
4258 [label="symbol.IsType 705126"];
4259 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 705127"];
4260 [label="symbol.TypeWithAnnotations 705128"];
4261 [label="=> _typeWithAnnotations 705129"];
4262 [label="_typeWithAnnotations 705130"];
4263 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 705131"];
4264 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 705132"];
4265 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 705133"];
4266 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 705134"];
4267 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 705135"];
4268 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 705136"];
4269 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705137"];
4270 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 705138"];
4271 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 705139"];
4272 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705140"];
4273 [label="param ReportDiagnosticsIfObsolete(this) 705141"];
4274 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 705142"];
4275 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 705143"];
4276 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 705144"];
4277 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 705145"];
4278 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 705146"];
4279 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705147"];
4280 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 705148"];
4281 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 705149"];
4282 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705150"];
4283 [label="param ReportDiagnosticsIfObsolete(this) 705151"];
4284 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 705152"];
4285 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705153"];
4286 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705154"];
4287 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705155"];
4288 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705156"];
4289 [label="this.ContainingMemberOrLambda 705157"];
4290 [label="get { return _containingMemberOrLambda; } 705158"];
4291 [label="return _containingMemberOrLambda; 705159"];
4292 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705160"];
4293 [label="this.ContainingType 705161"];
4294 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 705162"];
4295 [label="this.ContainingMemberOrLambda 705163"];
4296 [label="get { return _containingMemberOrLambda; } 705164"];
4297 [label="return _containingMemberOrLambda; 705165"];
4298 [label="var member = this.ContainingMemberOrLambda; 705166"];
4299 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 705167"];
4300 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 705168"];
4301 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 705169"];
4302 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 705170"];
4303 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705171"];
4304 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705172"];
4305 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 705173"];
4306 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705174"];
4307 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 705175"];
4308 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 705176"];
4309 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705177"];
4310 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 705178"];
4311 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 705179"];
4312 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 705180"];
4313 [label="RoslynDebug.Assert(symbol is object); 705181"];
4314 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 705182"];
4315 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 705183"];
4316 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 705184"];
4317 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 705185"];
4318 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 705186"];
4319 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 705187"];
4320 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 705188"];
4321 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 705189"];
4322 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 705190"];
4323 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 705191"];
4324 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 705192"];
4325 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 705193"];
4326 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 705194"];
4327 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 705195"];
4328 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 705196"];
4329 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 705197"];
4330 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 705198"];
4331 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 705199"];
4332 [label="RoslynDebug.Assert(diagnostics != null); 705200"];
4333 [label="RoslynDebug.Assert(diagnostics != null); 705201"];
4334 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 705202"];
4335 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 705203"];
4336 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 705204"];
4337 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 705205"];
4338 [label="DiagnosticInfo? info = null; 705206"];
4339 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 705207"];
4340 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 705208"];
4341 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 705209"];
4342 [label="return kind; 705210"];
4343 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 705211"];
4344 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 705212"];
4345 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705213"];
4346 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 705214"];
4347 [label="return symbol; 705215"];
4348 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 705216"];
4349 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 705217"];
4350 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 705218"];
4351 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 705219"];
4352 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 705220"];
4353 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 705221"];
4354 [label="param UnwrapAlias(DiagnosticBag diagnostics) 705222"];
4355 [label="param UnwrapAlias(SyntaxNode syntax) 705223"];
4356 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 705224"];
4357 [label="param UnwrapAlias(this) 705225"];
4358 [label="symbol.IsAlias 705226"];
4359 [label="=> _symbol?.Kind == SymbolKind.Alias 705227"];
4360 [label="_symbol 705228"];
4361 [label="_symbol?.Kind == SymbolKind.Alias 705229"];
4362 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 705230"];
4363 [label="return symbol; 705231"];
4364 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 705232"];
4365 [label="=> _typeWithAnnotations 705233"];
4366 [label="_typeWithAnnotations 705234"];
4367 [label="var diagnostics = c.GetDiagnostics(); 705235"];
4368 [label="Debug.Assert(node != null); 705236"];
4369 [label="param VisitPropertyDeclaration(PropertyDeclarationSyntax parent) 705237"];
4370 [label="param VisitPropertyDeclaration(this) 705238"];
4371 [label="if (!LookupPosition.IsInBody(_position, parent))\n                {\n                    return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers);\n                } 705239"];
4372 [label="if (!LookupPosition.IsInBody(_position, parent))\n                {\n                    return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers);\n                } 705240"];
4373 [label="if (!LookupPosition.IsInBody(_position, parent))\n                {\n                    return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers);\n                } 705241"];
4374 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 705242"];
4375 [label="VisitCore(parent.Parent) 705243"];
4376 [label="param VisitCore(SyntaxNode node) 705244"];
4377 [label="NodeUsage extraInfo = NodeUsage.Normal; 705245"];
4378 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705246"];
4379 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705247"];
4380 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 705248"];
4381 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 705249"];
4382 [label="param WithUnsafeRegionIfNecessary(this) 705250"];
4383 [label="param GetSpecialType(SpecialType typeId) 705251"];
4384 [label="param GetSpecialType(DiagnosticBag diagnostics) 705252"];
4385 [label="param GetSpecialType(SyntaxNode node) 705253"];
4386 [label="param GetSpecialType(this) 705254"];
4387 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705255"];
4388 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705256"];
4389 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 705257"];
4390 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 705258"];
4391 [label="param GetSpecialType(SpecialType typeId) 705259"];
4392 [label="param GetSpecialType(SyntaxNode node) 705260"];
4393 [label="param GetSpecialType(DiagnosticBag diagnostics) 705261"];
4394 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 705262"];
4395 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 705263"];
4396 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 705264"];
4397 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 705265"];
4398 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 705266"];
4399 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 705267"];
4400 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 705268"];
4401 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 705269"];
4402 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 705270"];
4403 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 705271"];
4404 [label="Debug.Assert(node != null); 705272"];
4405 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 705273"];
4406 [label="param VisitMethodDeclaration(this) 705274"];
4407 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 705275"];
4408 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 705276"];
4409 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 705277"];
4410 [label="NodeUsage usage; 705278"];
4411 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 705279"];
4412 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 705280"];
4413 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 705281"];
4414 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 705282"];
4415 [label="usage = NodeUsage.Normal; 705283"];
4416 [label="var key = CreateBinderCacheKey(methodDecl, usage); 705284"];
4417 [label="var key = CreateBinderCacheKey(methodDecl, usage); 705285"];
4418 [label="CreateBinderCacheKey(methodDecl, usage) 705286"];
4419 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 705287"];
4420 [label="param CreateBinderCacheKey(NodeUsage usage) 705288"];
4421 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705289"];
4422 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705290"];
4423 [label="return new BinderCacheKey(node, usage); 705291"];
4424 [label="new BinderCacheKey(node, usage) 705292"];
4425 [label="param BinderCacheKey(this) 705293"];
4426 [label="var key = CreateBinderCacheKey(methodDecl, usage); 705294"];
4427 [label="Binder resultBinder; 705295"];
4428 [label="binderCache 705296"];
4429 [label="get\n                {\n                    return _factory._binderCache;\n                } 705297"];
4430 [label="return _factory._binderCache; 705298"];
4431 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 705299"];
4432 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 705300"];
4433 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 705301"];
4434 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 705302"];
4435 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 705303"];
4436 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 705304"];
4437 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 705305"];
4438 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 705306"];
4439 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 705307"];
4440 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 705308"];
4441 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 705309"];
4442 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 705310"];
4443 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 705311"];
4444 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705312"];
4445 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705313"];
4446 [label="SourceMemberMethodSymbol method = null; 705314"];
4447 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 705315"];
4448 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 705316"];
4449 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 705317"];
4450 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 705318"];
4451 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 705319"];
4452 [label="param WithUnsafeRegionIfNecessary(this) 705320"];
4453 [label="binderCache 705321"];
4454 [label="return _factory._binderCache; 705322"];
4455 [label="binderCache.TryAdd(key, resultBinder); 705323"];
4456 [label="binderCache.TryAdd(key, resultBinder); 705324"];
4457 [label="binderCache.TryAdd(key, resultBinder); 705325"];
4458 [label="binderCache.TryAdd(key, resultBinder); 705326"];
4459 [label="return resultBinder; 705327"];
4460 [label="return ((CSharpSyntaxNode)node).Accept(this); 705328"];
4461 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 705329"];
4462 [label="param Includes(this BinderFlags self) 705330"];
4463 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 705331"];
4464 [label="param Includes(this BinderFlags self) 705332"];
4465 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 705333"];
4466 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 705334"];
4467 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 705335"];
4468 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 705336"];
4469 [label="param ValidateParameterNameConflicts(this) 705337"];
4470 [label="PooledHashSet<string>? tpNames = null; 705338"];
4471 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 705339"];
4472 [label="PooledHashSet<string>? pNames = null; 705340"];
4473 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 705341"];
4474 [label="tpNames?.Free(); 705342"];
4475 [label="pNames?.Free(); 705343"];
4476 [label="return bindPredefined(syntax, diagnostics); 705344"];
4477 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 705345"];
4478 [label="param GetSpecialType(DiagnosticBag diagnostics) 705346"];
4479 [label="param GetSpecialType(SyntaxNode node) 705347"];
4480 [label="param GetSpecialType(SyntaxNode node) 705348"];
4481 [label="param GetSpecialType(DiagnosticBag diagnostics) 705349"];
4482 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 705350"];
4483 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 705351"];
4484 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 705352"];
4485 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 705353"];
4486 [label="Debug.Assert(typeWithAnnotations.HasType); 705354"];
4487 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705355"];
4488 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 705356"];
4489 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705357"];
4490 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705358"];
4491 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 705359"];
4492 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705360"];
4493 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705361"];
4494 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 705362"];
4495 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 705363"];
4496 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 705364"];
4497 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 705365"];
4498 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705366"];
4499 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 705367"];
4500 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705368"];
4501 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 705369"];
4502 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 705370"];
4503 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 705371"];
4504 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 705372"];
4505 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 705373"];
4506 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 705374"];
4507 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 705375"];
4508 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 705376"];
4509 [label="RoslynDebug.Assert(diagnostics != null); 705377"];
4510 [label="RoslynDebug.Assert(diagnostics != null); 705378"];
4511 [label="DiagnosticInfo? info = null; 705379"];
4512 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 705380"];
4513 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 705381"];
4514 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 705382"];
4515 [label="return kind; 705383"];
4516 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 705384"];
4517 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 705385"];
4518 [label="=> _symbol?.Kind == SymbolKind.Alias 705386"];
4519 [label="_symbol 705387"];
4520 [label="_symbol?.Kind == SymbolKind.Alias 705388"];
4521 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 705389"];
4522 [label="param TypeConversions(AssemblySymbol corLibrary) 705390"];
4523 [label="param TypeConversions(bool includeNullability = false) 705391"];
4524 [label="param TypeConversions(this) 705392"];
4525 [label="corLibrary 705393"];
4526 [label="0 705394"];
4527 [label="includeNullability 705395"];
4528 [label="null 705396"];
4529 [label="param TypeConversions(this) 705397"];
4530 [label="param TypeConversions(AssemblySymbol corLibrary) 705398"];
4531 [label="param TypeConversions(int currentRecursionDepth) 705399"];
4532 [label="param TypeConversions(bool includeNullability) 705400"];
4533 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 705401"];
4534 [label="param TypeConversions(this) 705402"];
4535 [label="50 705403"];
4536 [label="MaximumRecursionDepth = 50 705404"];
4537 [label="false 705405"];
4538 [label="F = false 705406"];
4539 [label="true 705407"];
4540 [label="T = true 705408"];
4541 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 705409"];
4542 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 705410"];
4543 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 705411"];
4544 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 705412"];
4545 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 705413"];
4546 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 705414"];
4547 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 705415"];
4548 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 705416"];
4549 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 705417"];
4550 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 705418"];
4551 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 705419"];
4552 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 705420"];
4553 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 705421"];
4554 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 705422"];
4555 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 705423"];
4556 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 705424"];
4557 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 705425"];
4558 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 705426"];
4559 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 705427"];
4560 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 705428"];
4561 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 705429"];
4562 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 705430"];
4563 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 705431"];
4564 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 705432"];
4565 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 705433"];
4566 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 705434"];
4567 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 705435"];
4568 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 705436"];
4569 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 705437"];
4570 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 705438"];
4571 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 705439"];
4572 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 705440"];
4573 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 705441"];
4574 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 705442"];
4575 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705443"];
4576 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705444"];
4577 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705445"];
4578 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705446"];
4579 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705447"];
4580 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705448"];
4581 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705449"];
4582 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705450"];
4583 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705451"];
4584 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705452"];
4585 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705453"];
4586 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705454"];
4587 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705455"];
4588 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 705456"];
4589 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 705457"];
4590 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 705458"];
4591 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 705459"];
4592 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 705460"];
4593 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 705461"];
4594 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 705462"];
4595 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 705463"];
4596 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 705464"];
4597 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 705465"];
4598 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 705466"];
4599 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 705467"];
4600 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 705468"];
4601 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 705469"];
4602 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 705470"];
4603 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 705471"];
4604 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 705472"];
4605 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 705473"];
4606 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 705474"];
4607 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 705475"];
4608 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 705476"];
4609 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 705477"];
4610 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 705478"];
4611 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 705479"];
4612 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 705480"];
4613 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 705481"];
4614 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 705482"];
4615 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 705483"];
4616 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 705484"];
4617 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 705485"];
4618 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 705486"];
4619 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 705487"];
4620 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 705488"];
4621 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 705489"];
4622 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 705490"];
4623 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 705491"];
4624 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 705492"];
4625 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705493"];
4626 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705494"];
4627 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705495"];
4628 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705496"];
4629 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705497"];
4630 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705498"];
4631 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705499"];
4632 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705500"];
4633 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705501"];
4634 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705502"];
4635 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705503"];
4636 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705504"];
4637 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705505"];
4638 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 705506"];
4639 [label="corLibrary 705507"];
4640 [label="currentRecursionDepth 705508"];
4641 [label="includeNullability 705509"];
4642 [label="otherNullabilityOpt 705510"];
4643 [label="param TypeConversions(this) 705511"];
4644 [label="param ConversionsBase(AssemblySymbol corLibrary) 705512"];
4645 [label="param ConversionsBase(int currentRecursionDepth) 705513"];
4646 [label="param ConversionsBase(bool includeNullability) 705514"];
4647 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 705515"];
4648 [label="param ConversionsBase(this) 705516"];
4649 [label="corLibrary 705517"];
4650 [label="currentRecursionDepth 705518"];
4651 [label="IncludeNullability 705519"];
4652 [label="_lazyOtherNullability 705520"];
4653 [label="Debug.Assert((object)corLibrary != null); 705521"];
4654 [label="Debug.Assert((object)corLibrary != null); 705522"];
4655 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 705523"];
4656 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 705524"];
4657 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 705525"];
4658 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 705526"];
4659 [label="this.corLibrary 705527"];
4660 [label="this.currentRecursionDepth 705528"];
4661 [label="IncludeNullability 705529"];
4662 [label="_lazyOtherNullability 705530"];
4663 [label="var diagnostics = c.GetDiagnostics(); 705531"];
4664 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 705532"];
4665 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 705533"];
4666 [label="Debug.Assert(symbol is object); 705534"];
4667 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 705535"];
4668 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 705536"];
4669 [label="symbol = symbol.ContainingType; 705537"];
4670 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 705538"];
4671 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 705539"];
4672 [label="return memberSymbol; 705540"];
4673 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 705541"];
4674 [label="return memberSymbol; 705542"];
4675 [label="Debug.Assert(node != null); 705543"];
4676 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 705544"];
4677 [label="param VisitFieldDeclaration(this) 705545"];
4678 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 705546"];
4679 [label="VisitCore(parent.Parent) 705547"];
4680 [label="param VisitCore(SyntaxNode node) 705548"];
4681 [label="param VisitCore(this) 705549"];
4682 [label="return ((CSharpSyntaxNode)node).Accept(this); 705550"];
4683 [label="VisitTypeDeclarationCore(node) 705551"];
4684 [label="NodeUsage extraInfo = NodeUsage.Normal; 705552"];
4685 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 705553"];
4686 [label="VisitTypeDeclarationCore(parent, extraInfo) 705554"];
4687 [label="CreateBinderCacheKey(parent, extraInfo) 705555"];
4688 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705556"];
4689 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 705557"];
4690 [label="return new BinderCacheKey(node, usage); 705558"];
4691 [label="new BinderCacheKey(node, usage) 705559"];
4692 [label="param BinderCacheKey(this) 705560"];
4693 [label="var key = CreateBinderCacheKey(parent, extraInfo); 705561"];
4694 [label="Binder resultBinder; 705562"];
4695 [label="binderCache 705563"];
4696 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 705564"];
4697 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 705565"];
4698 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 705566"];
4699 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 705567"];
4700 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 705568"];
4701 [label="param WithUnsafeRegionIfNecessary(this) 705569"];
4702 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 705570"];
4703 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 705571"];
4704 [label="param Includes(BinderFlags other) 705572"];
4705 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 705573"];
4706 [label="param Includes(this BinderFlags self) 705574"];
4707 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 705575"];
4708 [label="param Includes(this BinderFlags self) 705576"];
4709 [label="return bindPredefined(syntax, diagnostics); 705577"];
4710 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 705578"];
4711 [label="param GetSpecialType(DiagnosticBag diagnostics) 705579"];
4712 [label="param GetSpecialType(SyntaxNode node) 705580"];
4713 [label="param GetSpecialType(DiagnosticBag diagnostics) 705581"];
4714 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 705582"];
4715 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 705583"];
4716 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 705584"];
4717 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 705585"];
4718 [label="Debug.Assert(typeWithAnnotations.HasType); 705586"];
4719 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 705587"];
4720 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705588"];
4721 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705589"];
4722 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 705590"];
4723 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705591"];
4724 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 705592"];
4725 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 705593"];
4726 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 705594"];
4727 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 705595"];
4728 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 705596"];
4729 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 705597"];
4730 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 705598"];
4731 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 705599"];
4732 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 705600"];
4733 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 705601"];
4734 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 705602"];
4735 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 705603"];
4736 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 705604"];
4737 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 705605"];
4738 [label="RoslynDebug.Assert(diagnostics != null); 705606"];
4739 [label="RoslynDebug.Assert(diagnostics != null); 705607"];
4740 [label="DiagnosticInfo? info = null; 705608"];
4741 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 705609"];
4742 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 705610"];
4743 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 705611"];
4744 [label="return kind; 705612"];
4745 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 705613"];
4746 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 705614"];
4747 [label="=> _symbol?.Kind == SymbolKind.Alias 705615"];
4748 [label="_symbol 705616"];
4749 [label="_symbol?.Kind == SymbolKind.Alias 705617"];
4750 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 705618"];
4751 [label="null 705619"];
4752 [label="null 705620"];
4753 [label="new ConstantFieldsInProgress(null, null) 705621"];
4754 [label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 705622"];
4755 [label="param ConstantFieldsInProgress(HashSet<SourceFieldSymbolWithSyntaxReference> dependencies) 705623"];
4756 [label="param ConstantFieldsInProgress(this) 705624"];
4757 [label="_fieldOpt 705625"];
4758 [label="_dependencies 705626"];
4759 [label="_fieldOpt 705627"];
4760 [label="_dependencies 705628"];
4761 [label="Empty = new ConstantFieldsInProgress(null, null) 705629"];
4762 [label="get { return (object)_fieldOpt == null; } 705630"];
4763 [label="return (object)_fieldOpt == null; 705631"];
4764 [label="return (object)_fieldOpt == null; 705632"];
4765 [label="diagnostics.Verify(expected); 705633"];
4766 [label="diagnostics.Verify(expected); 705634"];
4767 [label="diagnostics.Verify(expected) 705635"];
4768 [label="param Verify(this ImmutableArray<Diagnostic> actual) 705636"];
4769 [label="param Verify(params DiagnosticDescription[] expected) 705637"];
4770 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 705638"];
4771 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 705639"];
4772 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 705640"];
4773 [label="param Verify(this IEnumerable<Diagnostic> actual) 705641"];
4774 [label="param Verify(params DiagnosticDescription[] expected) 705642"];
4775 [label="Verify(actual, expected, errorCodeOnly: false); 705643"];
4776 [label="Verify(actual, expected, errorCodeOnly: false); 705644"];
4777 [label="Verify(actual, expected, errorCodeOnly: false); 705645"];
4778 [label="Verify(actual, expected, errorCodeOnly: false) 705646"];
4779 [label="param Verify(IEnumerable<Diagnostic> actual) 705647"];
4780 [label="param Verify(DiagnosticDescription[] expected) 705648"];
4781 [label="param Verify(bool errorCodeOnly) 705649"];
4782 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 705650"];
4783 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 705651"];
4784 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 705652"];
4785 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 705653"];
4786 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 705654"];
4787 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 705655"];
4788 [label="=> _defaultSeverityOpt 705656"];
4789 [label="_defaultSeverityOpt 705657"];
4790 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 705658"];
4791 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 705659"];
4792 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 705660"];
4793 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 705661"];
4794 [label="=> _effectiveSeverityOpt 705662"];
4795 [label="_effectiveSeverityOpt 705663"];
4796 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 705664"];
4797 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 705665"];
4798 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 705666"];
4799 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 705667"];
4800 [label="param DiagnosticDescription(Diagnostic d) 705668"];
4801 [label="param DiagnosticDescription(bool errorCodeOnly) 705669"];
4802 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 705670"];
4803 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 705671"];
4804 [label="param DiagnosticDescription(this) 705672"];
4805 [label="_code 705673"];
4806 [label="_isWarningAsError 705674"];
4807 [label="_isSuppressed 705675"];
4808 [label="_squiggledText 705676"];
4809 [label="_arguments 705677"];
4810 [label="_startPosition 705678"];
4811 [label="_argumentOrderDoesNotMatter 705679"];
4812 [label="_errorCodeType 705680"];
4813 [label="_defaultSeverityOpt 705681"];
4814 [label="_effectiveSeverityOpt 705682"];
4815 [label="_syntaxPredicate 705683"];
4816 [label="_code 705684"];
4817 [label="_isWarningAsError 705685"];
4818 [label="_isSuppressed 705686"];
4819 [label="_location 705687"];
4820 [label="includeDefaultSeverity 705688"];
4821 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 705689"];
4822 [label="_defaultSeverityOpt 705690"];
4823 [label="includeEffectiveSeverity 705691"];
4824 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 705692"];
4825 [label="_effectiveSeverityOpt 705693"];
4826 [label="DiagnosticWithInfo dinfo = null; 705694"];
4827 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 705695"];
4828 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 705696"];
4829 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 705697"];
4830 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 705698"];
4831 [label="dinfo = d as DiagnosticWithInfo; 705699"];
4832 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 705700"];
4833 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 705701"];
4834 [label="_errorCodeType 705702"];
4835 [label="_code 705703"];
4836 [label="_ignoreArgumentsWhenComparing 705704"];
4837 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 705705"];
4838 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 705706"];
4839 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 705707"];
4840 [label="_squiggledText 705708"];
4841 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 705709"];
4842 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 705710"];
4843 [label="_arguments 705711"];
4844 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 705712"];
4845 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 705713"];
4846 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 705714"];
4847 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 705715"];
4848 [label="_startPosition 705716"];
4849 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 705717"];
4850 [label="_code 705718"];
4851 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 705719"];
4852 [label="_arguments = null; 705720"];
4853 [label="_arguments 705721"];
4854 [label="_code 705722"];
4855 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 705723"];
4856 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 705724"];
4857 [label="int index = unmatched.IndexOf(d); 705725"];
4858 [label="int index = unmatched.IndexOf(d); 705726"];
4859 [label="param Equals(object obj) 705727"];
4860 [label="param Equals(this) 705728"];
4861 [label="var d = obj as DiagnosticDescription; 705729"];
4862 [label="if (d == null)\n                return false; 705730"];
4863 [label="if (d == null)\n                return false; 705731"];
4864 [label="if (!_code.Equals(d._code))\n                return false; 705732"];
4865 [label="if (!_code.Equals(d._code))\n                return false; 705733"];
4866 [label="return false; 705734"];
4867 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 705735"];
4868 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 705736"];
4869 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 705737"];
4870 [label="if (_squiggledText != d._squiggledText)\n                    return false; 705738"];
4871 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 705739"];
4872 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 705740"];
4873 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 705741"];
4874 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 705742"];
4875 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 705743"];
4876 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 705744"];
4877 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 705745"];
4878 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 705746"];
4879 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 705747"];
4880 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 705748"];
4881 [label="if (d._arguments == null)\n                    return false; 705749"];
4882 [label="GetArgumentsAsStrings() 705750"];
4883 [label="param GetArgumentsAsStrings(this) 705751"];
4884 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 705752"];
4885 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 705753"];
4886 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 705754"];
4887 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 705755"];
4888 [label="_argumentsAsStrings 705756"];
4889 [label="return _argumentsAsStrings; 705757"];
4890 [label="var args1 = GetArgumentsAsStrings(); 705758"];
4891 [label="d.GetArgumentsAsStrings() 705759"];
4892 [label="param GetArgumentsAsStrings(this) 705760"];
4893 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 705761"];
4894 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 705762"];
4895 [label="return _argumentsAsStrings; 705763"];
4896 [label="var args2 = d.GetArgumentsAsStrings(); 705764"];
4897 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 705765"];
4898 [label="if (!args1.SequenceEqual(args2))\n                        return false; 705766"];
4899 [label="if (!args1.SequenceEqual(args2))\n                        return false; 705767"];
4900 [label="if (!args1.SequenceEqual(args2))\n                        return false; 705768"];
4901 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 705769"];
4902 [label="return true; 705770"];
4903 [label="int index = unmatched.IndexOf(d); 705771"];
4904 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 705772"];
4905 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 705773"];
4906 [label="unmatched.RemoveAt(index); 705774"];
4907 [label="if (d == null)\n                return false; 705775"];
4908 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 705776"];
4909 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 705777"];
4910 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 705778"];
4911 [label="if (_squiggledText != d._squiggledText)\n                    return false; 705779"];
4912 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 705780"];
4913 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 705781"];
4914 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 705782"];
4915 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 705783"];
4916 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 705784"];
4917 [label="if (d._arguments == null)\n                    return false; 705785"];
4918 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 705786"];
4919 [label="return false; 705787"];
4920 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 705788"];
4921 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 705789"];
4922 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 705790"];
4923 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 705791"];
4924 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 705792"];
4925 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 705793"];
4926 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 705794"];
4927 [label="if (d._arguments == null)\n                    return false; 705795"];
4928 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 705796"];
4929 [label="if (d == null)\n                return false; 705797"];
4930 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 705798"];
4931 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 705799"];
4932 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 705800"];
4933 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 705801"];
4934 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 705802"];
4935 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 705803"];
4936 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 705804"];
4937 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 705805"];
4938 [label="if (d._arguments != null)\n                    return false; 705806"];
4939 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 705807"];
4940 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 705808"];
4941 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 705809"];
4942 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 705810"];
4943 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 705811"];
4944 [label="DiagnosticDescription.GetAssertText(expected, actual) 705812"];
4945 [label="param GetAssertText(DiagnosticDescription[] expected) 705813"];
4946 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 705814"];
4947 [label="const int CSharp = 1; 705815"];
4948 [label="const int VisualBasic = 2; 705816"];
4949 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 705817"];
4950 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 705818"];
4951 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 705819"];
4952 [label="actual.Any() && actual.First() is CSDiagnostic 705820"];
4953 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 705821"];
4954 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 705822"];
4955 [label="int indentDepth = (language == CSharp) ? 4 : 1; 705823"];
4956 [label="(language == CSharp) 705824"];
4957 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 705825"];
4958 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 705826"];
4959 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 705827"];
4960 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 705828"];
4961 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 705829"];
4962 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 705830"];
4963 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 705831"];
4964 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 705832"];
4965 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 705833"];
4966 [label="IsSortedOrEmpty(expected) 705834"];
4967 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 705835"];
4968 [label="new LinePositionComparer() 705836"];
4969 [label="param LinePositionComparer(this) 705837"];
4970 [label="Instance = new LinePositionComparer() 705838"];
4971 [label="var comparer = LinePositionComparer.Instance; 705839"];
4972 [label="DiagnosticDescription last = null; 705840"];
4973 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 705841"];
4974 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 705842"];
4975 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 705843"];
4976 [label="return false; 705844"];
4977 [label="var assertText = new StringBuilder(); 705845"];
4978 [label="assertText.AppendLine(); 705846"];
4979 [label="int i; 705847"];
4980 [label="assertText.AppendLine('Expected:'); 705848"];
4981 [label="assertText.AppendLine('Expected:'); 705849"];
4982 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 705850"];
4983 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 705851"];
4984 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 705852"];
4985 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 705853"];
4986 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 705854"];
4987 [label="GetDiagnosticDescription(d, indentDepth) 705855"];
4988 [label="param GetDiagnosticDescription(DiagnosticDescription d) 705856"];
4989 [label="param GetDiagnosticDescription(int indentDepth) 705857"];
4990 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705858"];
4991 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705859"];
4992 [label="d.ToString() 705860"];
4993 [label="param ToString(this) 705861"];
4994 [label="var sb = new StringBuilder(); 705862"];
4995 [label="sb.Append('Diagnostic('); 705863"];
4996 [label="sb.Append('Diagnostic('); 705864"];
4997 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 705865"];
4998 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 705866"];
4999 [label="sb.Append(_errorCodeType.Name); 705867"];
5000 [label="sb.Append(_errorCodeType.Name); 705868"];
5001 [label="sb.Append('.'); 705869"];
5002 [label="sb.Append('.'); 705870"];
5003 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 705871"];
5004 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 705872"];
5005 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 705873"];
5006 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 705874"];
5007 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 705875"];
5008 [label="sb.Append(', \\''); 705876"];
5009 [label="sb.Append(', \\''); 705877"];
5010 [label="sb.Append(_squiggledText); 705878"];
5011 [label="sb.Append(_squiggledText); 705879"];
5012 [label="sb.Append('''); 705880"];
5013 [label="sb.Append('''); 705881"];
5014 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 705882"];
5015 [label="sb.Append(')'); 705883"];
5016 [label="sb.Append(')'); 705884"];
5017 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 705885"];
5018 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 705886"];
5019 [label="sb.Append('.WithArguments('); 705887"];
5020 [label="sb.Append('.WithArguments('); 705888"];
5021 [label="GetArgumentsAsStrings() 705889"];
5022 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 705890"];
5023 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 705891"];
5024 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 705892"];
5025 [label="sb.Append('\\''); 705893"];
5026 [label="sb.Append('\\''); 705894"];
5027 [label="sb.Append(argumentStrings.Current); 705895"];
5028 [label="sb.Append(argumentStrings.Current); 705896"];
5029 [label="sb.Append('\\''); 705897"];
5030 [label="sb.Append('\\''); 705898"];
5031 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 705899"];
5032 [label="sb.Append(')'); 705900"];
5033 [label="sb.Append(')'); 705901"];
5034 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 705902"];
5035 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 705903"];
5036 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 705904"];
5037 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 705905"];
5038 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 705906"];
5039 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 705907"];
5040 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 705908"];
5041 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 705909"];
5042 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 705910"];
5043 [label="return sb.ToString(); 705911"];
5044 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705912"];
5045 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705913"];
5046 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 705914"];
5047 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 705915"];
5048 [label="param GetDiagnosticDescription(int indentDepth) 705916"];
5049 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705917"];
5050 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705918"];
5051 [label="var sb = new StringBuilder(); 705919"];
5052 [label="sb.Append('Diagnostic('); 705920"];
5053 [label="sb.Append('Diagnostic('); 705921"];
5054 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 705922"];
5055 [label="sb.Append(_errorCodeType.Name); 705923"];
5056 [label="sb.Append(_errorCodeType.Name); 705924"];
5057 [label="sb.Append('.'); 705925"];
5058 [label="sb.Append('.'); 705926"];
5059 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 705927"];
5060 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 705928"];
5061 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 705929"];
5062 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 705930"];
5063 [label="sb.Append(', \\''); 705931"];
5064 [label="sb.Append(', \\''); 705932"];
5065 [label="sb.Append(_squiggledText); 705933"];
5066 [label="sb.Append(_squiggledText); 705934"];
5067 [label="sb.Append('''); 705935"];
5068 [label="sb.Append('''); 705936"];
5069 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 705937"];
5070 [label="sb.Append(')'); 705938"];
5071 [label="sb.Append(')'); 705939"];
5072 [label="sb.Append('.WithArguments('); 705940"];
5073 [label="sb.Append('.WithArguments('); 705941"];
5074 [label="sb.Append('\\''); 705942"];
5075 [label="sb.Append(argumentStrings.Current); 705943"];
5076 [label="sb.Append(argumentStrings.Current); 705944"];
5077 [label="sb.Append('\\''); 705945"];
5078 [label="sb.Append(', '); 705946"];
5079 [label="sb.Append(', '); 705947"];
5080 [label="sb.Append(')'); 705948"];
5081 [label="sb.Append(')'); 705949"];
5082 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 705950"];
5083 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 705951"];
5084 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 705952"];
5085 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 705953"];
5086 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 705954"];
5087 [label="return sb.ToString(); 705955"];
5088 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705956"];
5089 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705957"];
5090 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 705958"];
5091 [label="sb.Append(')'); 705959"];
5092 [label="return sb.ToString(); 705960"];
5093 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705961"];
5094 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705962"];
5095 [label="return sb.ToString(); 705963"];
5096 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705964"];
5097 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 705965"];
5098 [label="GetCommaSeparatedLines(assertText, expectedText); 705966"];
5099 [label="GetCommaSeparatedLines(assertText, expectedText); 705967"];
5100 [label="GetCommaSeparatedLines(assertText, expectedText) 705968"];
5101 [label="param GetCommaSeparatedLines(StringBuilder sb) 705969"];
5102 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 705970"];
5103 [label="int n = lines.Count; 705971"];
5104 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 705972"];
5105 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 705973"];
5106 [label="sb.Append(lines[i]); 705974"];
5107 [label="sb.Append(lines[i]); 705975"];
5108 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 705976"];
5109 [label="sb.Append(','); 705977"];
5110 [label="sb.Append(','); 705978"];
5111 [label="sb.AppendLine(); 705979"];
5112 [label="GetCommaSeparatedLines(assertText, expectedText); 705980"];
5113 [label="assertText.AppendLine('Actual:'); 705981"];
5114 [label="assertText.AppendLine('Actual:'); 705982"];
5115 [label="var actualText = ArrayBuilder<string>.GetInstance(); 705983"];
5116 [label="var e = actual.GetEnumerator(); 705984"];
5117 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 705985"];
5118 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 705986"];
5119 [label="Diagnostic d = e.Current; 705987"];
5120 [label="string message = d.ToString(); 705988"];
5121 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 705989"];
5122 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 705990"];
5123 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 705991"];
5124 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 705992"];
5125 [label="Indent(assertText, indentDepth); 705993"];
5126 [label="Indent(assertText, indentDepth); 705994"];
5127 [label="Indent(assertText, indentDepth) 705995"];
5128 [label="param Indent(StringBuilder sb) 705996"];
5129 [label="param Indent(int count) 705997"];
5130 [label="sb.Append(' ', 4 * count); 705998"];
5131 [label="sb.Append(' ', 4 * count); 705999"];
5132 [label="sb.Append(' ', 4 * count); 706000"];
5133 [label="Indent(assertText, indentDepth); 706001"];
5134 [label="assertText.Append('// '); 706002"];
5135 [label="assertText.Append('// '); 706003"];
5136 [label="assertText.AppendLine(d.ToString()); 706004"];
5137 [label="assertText.AppendLine(d.ToString()); 706005"];
5138 [label="var l = d.Location; 706006"];
5139 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 706007"];
5140 [label="Indent(assertText, indentDepth); 706008"];
5141 [label="Indent(assertText, indentDepth); 706009"];
5142 [label="Indent(assertText, indentDepth) 706010"];
5143 [label="param Indent(StringBuilder sb) 706011"];
5144 [label="param Indent(int count) 706012"];
5145 [label="sb.Append(' ', 4 * count); 706013"];
5146 [label="sb.Append(' ', 4 * count); 706014"];
5147 [label="sb.Append(' ', 4 * count); 706015"];
5148 [label="Indent(assertText, indentDepth); 706016"];
5149 [label="assertText.Append('// '); 706017"];
5150 [label="assertText.Append('// '); 706018"];
5151 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 706019"];
5152 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 706020"];
5153 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 706021"];
5154 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 706022"];
5155 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 706023"];
5156 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 706024"];
5157 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 706025"];
5158 [label="param DiagnosticDescription(Diagnostic d) 706026"];
5159 [label="param DiagnosticDescription(bool errorCodeOnly) 706027"];
5160 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 706028"];
5161 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 706029"];
5162 [label="param DiagnosticDescription(this) 706030"];
5163 [label="_code 706031"];
5164 [label="_isWarningAsError 706032"];
5165 [label="_isSuppressed 706033"];
5166 [label="_squiggledText 706034"];
5167 [label="_arguments 706035"];
5168 [label="_startPosition 706036"];
5169 [label="_errorCodeType 706037"];
5170 [label="_defaultSeverityOpt 706038"];
5171 [label="_effectiveSeverityOpt 706039"];
5172 [label="_code 706040"];
5173 [label="_isWarningAsError 706041"];
5174 [label="_isSuppressed 706042"];
5175 [label="_location 706043"];
5176 [label="DiagnosticWithInfo dinfo = null; 706044"];
5177 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 706045"];
5178 [label="var diffDescription = description; 706046"];
5179 [label="var idx = Array.IndexOf(expected, description); 706047"];
5180 [label="var idx = Array.IndexOf(expected, description); 706048"];
5181 [label="var idx = Array.IndexOf(expected, description); 706049"];
5182 [label="var idx = Array.IndexOf(expected, description); 706050"];
5183 [label="if (d == null)\n                return false; 706051"];
5184 [label="if (d == null)\n                return false; 706052"];
5185 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 706053"];
5186 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 706054"];
5187 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 706055"];
5188 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 706056"];
5189 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 706057"];
5190 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 706058"];
5191 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 706059"];
5192 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 706060"];
5193 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 706061"];
5194 [label="if (d._arguments == null)\n                    return false; 706062"];
5195 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 706063"];
5196 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 706064"];
5197 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 706065"];
5198 [label="diffDescription = expected[idx]; 706066"];
5199 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 706067"];
5200 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 706068"];
5201 [label="GetDiagnosticDescription(description, indentDepth) 706069"];
5202 [label="param GetDiagnosticDescription(DiagnosticDescription d) 706070"];
5203 [label="param GetDiagnosticDescription(int indentDepth) 706071"];
5204 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706072"];
5205 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706073"];
5206 [label="var sb = new StringBuilder(); 706074"];
5207 [label="sb.Append('Diagnostic('); 706075"];
5208 [label="sb.Append('Diagnostic('); 706076"];
5209 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 706077"];
5210 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 706078"];
5211 [label="sb.Append(_errorCodeType.Name); 706079"];
5212 [label="sb.Append(_errorCodeType.Name); 706080"];
5213 [label="sb.Append('.'); 706081"];
5214 [label="sb.Append('.'); 706082"];
5215 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 706083"];
5216 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 706084"];
5217 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 706085"];
5218 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 706086"];
5219 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 706087"];
5220 [label="sb.Append(', \\''); 706088"];
5221 [label="sb.Append(', \\''); 706089"];
5222 [label="sb.Append(_squiggledText); 706090"];
5223 [label="sb.Append(_squiggledText); 706091"];
5224 [label="sb.Append('''); 706092"];
5225 [label="sb.Append('''); 706093"];
5226 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 706094"];
5227 [label="sb.Append(')'); 706095"];
5228 [label="sb.Append(')'); 706096"];
5229 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 706097"];
5230 [label="sb.Append('.WithArguments('); 706098"];
5231 [label="sb.Append('.WithArguments('); 706099"];
5232 [label="sb.Append('\\''); 706100"];
5233 [label="sb.Append('\\''); 706101"];
5234 [label="sb.Append(argumentStrings.Current); 706102"];
5235 [label="sb.Append(argumentStrings.Current); 706103"];
5236 [label="sb.Append('\\''); 706104"];
5237 [label="sb.Append('\\''); 706105"];
5238 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 706106"];
5239 [label="sb.Append(', '); 706107"];
5240 [label="sb.Append(', '); 706108"];
5241 [label="sb.Append(')'); 706109"];
5242 [label="sb.Append(')'); 706110"];
5243 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 706111"];
5244 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 706112"];
5245 [label="sb.Append('.WithLocation('); 706113"];
5246 [label="sb.Append('.WithLocation('); 706114"];
5247 [label="sb.Append(_startPosition.Value.Line + 1); 706115"];
5248 [label="sb.Append(_startPosition.Value.Line + 1); 706116"];
5249 [label="sb.Append(', '); 706117"];
5250 [label="sb.Append(', '); 706118"];
5251 [label="sb.Append(_startPosition.Value.Character + 1); 706119"];
5252 [label="sb.Append(_startPosition.Value.Character + 1); 706120"];
5253 [label="sb.Append(')'); 706121"];
5254 [label="sb.Append(')'); 706122"];
5255 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 706123"];
5256 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 706124"];
5257 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 706125"];
5258 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 706126"];
5259 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 706127"];
5260 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 706128"];
5261 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 706129"];
5262 [label="return sb.ToString(); 706130"];
5263 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706131"];
5264 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706132"];
5265 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 706133"];
5266 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 706134"];
5267 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 706135"];
5268 [label="GetDiagnosticDescription(diffDescription, indentDepth) 706136"];
5269 [label="param GetDiagnosticDescription(DiagnosticDescription d) 706137"];
5270 [label="param GetDiagnosticDescription(int indentDepth) 706138"];
5271 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706139"];
5272 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706140"];
5273 [label="var sb = new StringBuilder(); 706141"];
5274 [label="sb.Append('Diagnostic('); 706142"];
5275 [label="sb.Append('Diagnostic('); 706143"];
5276 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 706144"];
5277 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 706145"];
5278 [label="sb.Append(_errorCodeType.Name); 706146"];
5279 [label="sb.Append(_errorCodeType.Name); 706147"];
5280 [label="sb.Append('.'); 706148"];
5281 [label="sb.Append('.'); 706149"];
5282 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 706150"];
5283 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 706151"];
5284 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 706152"];
5285 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 706153"];
5286 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 706154"];
5287 [label="sb.Append(', \\''); 706155"];
5288 [label="sb.Append(', \\''); 706156"];
5289 [label="sb.Append(_squiggledText); 706157"];
5290 [label="sb.Append(_squiggledText); 706158"];
5291 [label="sb.Append('''); 706159"];
5292 [label="sb.Append('''); 706160"];
5293 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 706161"];
5294 [label="sb.Append(')'); 706162"];
5295 [label="sb.Append(')'); 706163"];
5296 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 706164"];
5297 [label="sb.Append('.WithArguments('); 706165"];
5298 [label="sb.Append('.WithArguments('); 706166"];
5299 [label="sb.Append('\\''); 706167"];
5300 [label="sb.Append('\\''); 706168"];
5301 [label="sb.Append(argumentStrings.Current); 706169"];
5302 [label="sb.Append(argumentStrings.Current); 706170"];
5303 [label="sb.Append('\\''); 706171"];
5304 [label="sb.Append('\\''); 706172"];
5305 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 706173"];
5306 [label="sb.Append(', '); 706174"];
5307 [label="sb.Append(', '); 706175"];
5308 [label="sb.Append(')'); 706176"];
5309 [label="sb.Append(')'); 706177"];
5310 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 706178"];
5311 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 706179"];
5312 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 706180"];
5313 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 706181"];
5314 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 706182"];
5315 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 706183"];
5316 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 706184"];
5317 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 706185"];
5318 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 706186"];
5319 [label="return sb.ToString(); 706187"];
5320 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706188"];
5321 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706189"];
5322 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 706190"];
5323 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 706191"];
5324 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 706192"];
5325 [label="assertText.AppendLine(','); 706193"];
5326 [label="assertText.AppendLine(','); 706194"];
5327 [label="Indent(assertText, indentDepth); 706195"];
5328 [label="Indent(assertText, indentDepth); 706196"];
5329 [label="Indent(assertText, indentDepth) 706197"];
5330 [label="param Indent(StringBuilder sb) 706198"];
5331 [label="param Indent(int count) 706199"];
5332 [label="sb.Append(' ', 4 * count); 706200"];
5333 [label="sb.Append(' ', 4 * count); 706201"];
5334 [label="Indent(assertText, indentDepth); 706202"];
5335 [label="assertText.Append('// '); 706203"];
5336 [label="Indent(assertText, indentDepth); 706204"];
5337 [label="Indent(assertText, indentDepth); 706205"];
5338 [label="Indent(assertText, indentDepth) 706206"];
5339 [label="param Indent(StringBuilder sb) 706207"];
5340 [label="param Indent(int count) 706208"];
5341 [label="sb.Append(' ', 4 * count); 706209"];
5342 [label="sb.Append(' ', 4 * count); 706210"];
5343 [label="Indent(assertText, indentDepth); 706211"];
5344 [label="assertText.Append('// '); 706212"];
5345 [label="_code 706213"];
5346 [label="_isWarningAsError 706214"];
5347 [label="_isSuppressed 706215"];
5348 [label="_squiggledText 706216"];
5349 [label="_arguments 706217"];
5350 [label="_startPosition 706218"];
5351 [label="_errorCodeType 706219"];
5352 [label="_defaultSeverityOpt 706220"];
5353 [label="_effectiveSeverityOpt 706221"];
5354 [label="_code 706222"];
5355 [label="DiagnosticWithInfo dinfo = null; 706223"];
5356 [label="var diffDescription = description; 706224"];
5357 [label="if (d == null)\n                return false; 706225"];
5358 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 706226"];
5359 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 706227"];
5360 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 706228"];
5361 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 706229"];
5362 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 706230"];
5363 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 706231"];
5364 [label="if (d._arguments == null)\n                    return false; 706232"];
5365 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 706233"];
5366 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 706234"];
5367 [label="param GetDiagnosticDescription(int indentDepth) 706235"];
5368 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706236"];
5369 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706237"];
5370 [label="var sb = new StringBuilder(); 706238"];
5371 [label="sb.Append('Diagnostic('); 706239"];
5372 [label="sb.Append('Diagnostic('); 706240"];
5373 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 706241"];
5374 [label="sb.Append(_errorCodeType.Name); 706242"];
5375 [label="sb.Append(_errorCodeType.Name); 706243"];
5376 [label="sb.Append('.'); 706244"];
5377 [label="sb.Append('.'); 706245"];
5378 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 706246"];
5379 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 706247"];
5380 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 706248"];
5381 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 706249"];
5382 [label="sb.Append(', \\''); 706250"];
5383 [label="sb.Append(', \\''); 706251"];
5384 [label="sb.Append(_squiggledText); 706252"];
5385 [label="sb.Append(_squiggledText); 706253"];
5386 [label="sb.Append('''); 706254"];
5387 [label="sb.Append('''); 706255"];
5388 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 706256"];
5389 [label="sb.Append(')'); 706257"];
5390 [label="sb.Append(')'); 706258"];
5391 [label="sb.Append('.WithArguments('); 706259"];
5392 [label="sb.Append('\\''); 706260"];
5393 [label="sb.Append(argumentStrings.Current); 706261"];
5394 [label="sb.Append('\\''); 706262"];
5395 [label="sb.Append(')'); 706263"];
5396 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 706264"];
5397 [label="sb.Append('.WithLocation('); 706265"];
5398 [label="sb.Append('.WithLocation('); 706266"];
5399 [label="sb.Append(_startPosition.Value.Line + 1); 706267"];
5400 [label="sb.Append(_startPosition.Value.Line + 1); 706268"];
5401 [label="sb.Append(', '); 706269"];
5402 [label="sb.Append(', '); 706270"];
5403 [label="sb.Append(_startPosition.Value.Character + 1); 706271"];
5404 [label="sb.Append(_startPosition.Value.Character + 1); 706272"];
5405 [label="sb.Append(')'); 706273"];
5406 [label="sb.Append(')'); 706274"];
5407 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 706275"];
5408 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 706276"];
5409 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 706277"];
5410 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 706278"];
5411 [label="return sb.ToString(); 706279"];
5412 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706280"];
5413 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706281"];
5414 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 706282"];
5415 [label="param GetDiagnosticDescription(int indentDepth) 706283"];
5416 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706284"];
5417 [label="return sb.ToString(); 706285"];
5418 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706286"];
5419 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706287"];
5420 [label="sb.Append(', '); 706288"];
5421 [label="sb.Append(')'); 706289"];
5422 [label="sb.Append('.WithLocation('); 706290"];
5423 [label="sb.Append(_startPosition.Value.Line + 1); 706291"];
5424 [label="sb.Append(', '); 706292"];
5425 [label="sb.Append(_startPosition.Value.Character + 1); 706293"];
5426 [label="sb.Append(')'); 706294"];
5427 [label="return sb.ToString(); 706295"];
5428 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706296"];
5429 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706297"];
5430 [label="return sb.ToString(); 706298"];
5431 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706299"];
5432 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706300"];
5433 [label="if (d._arguments != null)\n                    return false; 706301"];
5434 [label="sb.Append('.WithLocation('); 706302"];
5435 [label="sb.Append(_startPosition.Value.Line + 1); 706303"];
5436 [label="sb.Append(', '); 706304"];
5437 [label="sb.Append(_startPosition.Value.Character + 1); 706305"];
5438 [label="sb.Append(')'); 706306"];
5439 [label="return sb.ToString(); 706307"];
5440 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706308"];
5441 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706309"];
5442 [label="return sb.ToString(); 706310"];
5443 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706311"];
5444 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 706312"];
5445 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 706313"];
5446 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 706314"];
5447 [label="assertText.AppendLine(); 706315"];
5448 [label="assertText.AppendLine('Diff:'); 706316"];
5449 [label="assertText.AppendLine('Diff:'); 706317"];
5450 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 706318"];
5451 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 706319"];
5452 [label="new[] { '\\r', '\\n' } 706320"];
5453 [label="'\\r' 706321"];
5454 [label="'\\n' 706322"];
5455 [label="new[] { '\\r', '\\n' } 706323"];
5456 [label="new[] { '\\r', '\\n' } 706324"];
5457 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 706325"];
5458 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 706326"];
5459 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 706327"];
5460 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 706328"];
5461 [label="param DiffReport(IEnumerable<T> expected) 706329"];
5462 [label="param DiffReport(IEnumerable<T> actual) 706330"];
5463 [label="param DiffReport(string separator) 706331"];
5464 [label="param DiffReport(IEqualityComparer<T> comparer = null) 706332"];
5465 [label="param DiffReport(Func<T, string> toString = null) 706333"];
5466 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 706334"];
5467 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 706335"];
5468 [label="(comparer != null) 706336"];
5469 [label="EqualityComparer<T>.Default 706337"];
5470 [label="new LCS<T>(EqualityComparer<T>.Default) 706338"];
5471 [label="param LCS(IEqualityComparer<T> comparer) 706339"];
5472 [label="param LCS(this) 706340"];
5473 [label="1 706341"];
5474 [label="DeleteCost = 1 706342"];
5475 [label="1 706343"];
5476 [label="InsertCost = 1 706344"];
5477 [label="2 706345"];
5478 [label="UpdateCost = 2 706346"];
5479 [label="param LongestCommonSubsequence(this) 706347"];
5480 [label="_comparer 706348"];
5481 [label="_comparer 706349"];
5482 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 706350"];
5483 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 706351"];
5484 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 706352"];
5485 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 706353"];
5486 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 706354"];
5487 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 706355"];
5488 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 706356"];
5489 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 706357"];
5490 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 706358"];
5491 [label="lcs.CalculateDiff(expectedList, actualList, toString) 706359"];
5492 [label="param CalculateDiff(IList<T> sequenceA) 706360"];
5493 [label="param CalculateDiff(IList<T> sequenceB) 706361"];
5494 [label="param CalculateDiff(Func<T, string> toString) 706362"];
5495 [label="param CalculateDiff(this) 706363"];
5496 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 706364"];
5497 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 706365"];
5498 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 706366"];
5499 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 706367"];
5500 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 706368"];
5501 [label="param GetEdits(TSequence sequenceA) 706369"];
5502 [label="param GetEdits(int lengthA) 706370"];
5503 [label="param GetEdits(TSequence sequenceB) 706371"];
5504 [label="param GetEdits(int lengthB) 706372"];
5505 [label="param GetEdits(this) 706373"];
5506 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 706374"];
5507 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 706375"];
5508 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 706376"];
5509 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 706377"];
5510 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 706378"];
5511 [label="param ComputeCostMatrix(TSequence sequenceA) 706379"];
5512 [label="param ComputeCostMatrix(int lengthA) 706380"];
5513 [label="param ComputeCostMatrix(TSequence sequenceB) 706381"];
5514 [label="param ComputeCostMatrix(int lengthB) 706382"];
5515 [label="param ComputeCostMatrix(this) 706383"];
5516 [label="var la = lengthA + 1; 706384"];
5517 [label="var la = lengthA + 1; 706385"];
5518 [label="var lb = lengthB + 1; 706386"];
5519 [label="var lb = lengthB + 1; 706387"];
5520 [label="var d = new int[la, lb]; 706388"];
5521 [label="d[0, 0] = 0; 706389"];
5522 [label="d[0, 0] 706390"];
5523 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 706391"];
5524 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 706392"];
5525 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 706393"];
5526 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 706394"];
5527 [label="d[i, 0] 706395"];
5528 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 706396"];
5529 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 706397"];
5530 [label="d[0, j] = d[0, j - 1] + InsertCost; 706398"];
5531 [label="d[0, j] = d[0, j - 1] + InsertCost; 706399"];
5532 [label="d[0, j] 706400"];
5533 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 706401"];
5534 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 706402"];
5535 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 706403"];
5536 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 706404"];
5537 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 706405"];
5538 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 706406"];
5539 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 706407"];
5540 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 706408"];
5541 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 706409"];
5542 [label="param ItemsEqual(IList<T> sequenceA) 706410"];
5543 [label="param ItemsEqual(int indexA) 706411"];
5544 [label="param ItemsEqual(IList<T> sequenceB) 706412"];
5545 [label="param ItemsEqual(int indexB) 706413"];
5546 [label="param ItemsEqual(this) 706414"];
5547 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 706415"];
5548 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 706416"];
5549 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 706417"];
5550 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 706418"];
5551 [label="int m2 = d[i - 1, j] + DeleteCost; 706419"];
5552 [label="int m2 = d[i - 1, j] + DeleteCost; 706420"];
5553 [label="int m3 = d[i, j - 1] + InsertCost; 706421"];
5554 [label="int m3 = d[i, j - 1] + InsertCost; 706422"];
5555 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 706423"];
5556 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 706424"];
5557 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 706425"];
5558 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 706426"];
5559 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 706427"];
5560 [label="d[i, j] 706428"];
5561 [label="return d; 706429"];
5562 [label="int i = lengthA; 706430"];
5563 [label="int j = lengthB; 706431"];
5564 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 706432"];
5565 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 706433"];
5566 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 706434"];
5567 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 706435"];
5568 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 706436"];
5569 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 706437"];
5570 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 706438"];
5571 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 706439"];
5572 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 706440"];
5573 [label="i--; 706441"];
5574 [label="j--; 706442"];
5575 [label="yield return new Edit(EditKind.Update, i, j); 706443"];
5576 [label="yield return new Edit(EditKind.Update, i, j); 706444"];
5577 [label="yield return new Edit(EditKind.Update, i, j); 706445"];
5578 [label="yield return new Edit(EditKind.Update, i, j); 706446"];
5579 [label="new Edit(EditKind.Update, i, j) 706447"];
5580 [label="param Edit(EditKind kind) 706448"];
5581 [label="param Edit(int indexA) 706449"];
5582 [label="param Edit(int indexB) 706450"];
5583 [label="param Edit(this) 706451"];
5584 [label="this.Kind 706452"];
5585 [label="this.IndexA 706453"];
5586 [label="this.IndexB 706454"];
5587 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 706455"];
5588 [label="i--; 706456"];
5589 [label="yield return new Edit(EditKind.Delete, i, -1); 706457"];
5590 [label="yield return new Edit(EditKind.Delete, i, -1); 706458"];
5591 [label="yield return new Edit(EditKind.Delete, i, -1); 706459"];
5592 [label="new Edit(EditKind.Delete, i, -1) 706460"];
5593 [label="param Edit(EditKind kind) 706461"];
5594 [label="param Edit(int indexA) 706462"];
5595 [label="param Edit(int indexB) 706463"];
5596 [label="param Edit(this) 706464"];
5597 [label="this.Kind 706465"];
5598 [label="this.IndexA 706466"];
5599 [label="this.IndexB 706467"];
5600 [label="yield return new Edit(EditKind.Update, i, j); 706468"];
5601 [label="yield return new Edit(EditKind.Update, i, j); 706469"];
5602 [label="yield return new Edit(EditKind.Update, i, j); 706470"];
5603 [label="new Edit(EditKind.Update, i, j) 706471"];
5604 [label="param Edit(EditKind kind) 706472"];
5605 [label="param Edit(int indexA) 706473"];
5606 [label="param Edit(int indexB) 706474"];
5607 [label="param Edit(this) 706475"];
5608 [label="this.Kind 706476"];
5609 [label="this.IndexA 706477"];
5610 [label="this.IndexB 706478"];
5611 [label="j--; 706479"];
5612 [label="yield return new Edit(EditKind.Insert, -1, j); 706480"];
5613 [label="yield return new Edit(EditKind.Insert, -1, j); 706481"];
5614 [label="yield return new Edit(EditKind.Insert, -1, j); 706482"];
5615 [label="new Edit(EditKind.Insert, -1, j) 706483"];
5616 [label="param Edit(EditKind kind) 706484"];
5617 [label="param Edit(int indexA) 706485"];
5618 [label="param Edit(int indexB) 706486"];
5619 [label="param Edit(this) 706487"];
5620 [label="this.Kind 706488"];
5621 [label="this.IndexA 706489"];
5622 [label="this.IndexB 706490"];
5623 [label="yield return new Edit(EditKind.Update, i, j); 706491"];
5624 [label="yield return new Edit(EditKind.Update, i, j); 706492"];
5625 [label="yield return new Edit(EditKind.Update, i, j); 706493"];
5626 [label="new Edit(EditKind.Update, i, j) 706494"];
5627 [label="param Edit(EditKind kind) 706495"];
5628 [label="param Edit(int indexA) 706496"];
5629 [label="param Edit(int indexB) 706497"];
5630 [label="param Edit(this) 706498"];
5631 [label="this.Kind 706499"];
5632 [label="this.IndexA 706500"];
5633 [label="this.IndexB 706501"];
5634 [label="yield return new Edit(EditKind.Delete, i, -1); 706502"];
5635 [label="yield return new Edit(EditKind.Delete, i, -1); 706503"];
5636 [label="new Edit(EditKind.Delete, i, -1) 706504"];
5637 [label="param Edit(EditKind kind) 706505"];
5638 [label="param Edit(int indexA) 706506"];
5639 [label="param Edit(int indexB) 706507"];
5640 [label="param Edit(this) 706508"];
5641 [label="this.Kind 706509"];
5642 [label="this.IndexA 706510"];
5643 [label="this.IndexB 706511"];
5644 [label="yield return new Edit(EditKind.Update, i, j); 706512"];
5645 [label="yield return new Edit(EditKind.Insert, -1, j); 706513"];
5646 [label="yield return new Edit(EditKind.Insert, -1, j); 706514"];
5647 [label="new Edit(EditKind.Insert, -1, j) 706515"];
5648 [label="param Edit(EditKind kind) 706516"];
5649 [label="param Edit(int indexA) 706517"];
5650 [label="param Edit(int indexB) 706518"];
5651 [label="param Edit(this) 706519"];
5652 [label="this.Kind 706520"];
5653 [label="this.IndexA 706521"];
5654 [label="this.IndexB 706522"];
5655 [label="yield return new Edit(EditKind.Update, i, j); 706523"];
5656 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 706524"];
5657 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 706525"];
5658 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 706526"];
5659 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 706527"];
5660 [label="j--; 706528"];
5661 [label="yield return new Edit(EditKind.Insert, -1, j); 706529"];
5662 [label="yield return new Edit(EditKind.Insert, -1, j); 706530"];
5663 [label="yield return new Edit(EditKind.Insert, -1, j); 706531"];
5664 [label="new Edit(EditKind.Insert, -1, j) 706532"];
5665 [label="param Edit(EditKind kind) 706533"];
5666 [label="param Edit(int indexA) 706534"];
5667 [label="param Edit(int indexB) 706535"];
5668 [label="param Edit(this) 706536"];
5669 [label="this.Kind 706537"];
5670 [label="this.IndexA 706538"];
5671 [label="this.IndexB 706539"];
5672 [label="yield return new Edit(EditKind.Update, i, j); 706540"];
5673 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 706541"];
5674 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 706542"];
5675 [label="yield return '++> ' + toString(sequenceB[edit.IndexB]); 706543"];
5676 [label="yield return '++> ' + toString(sequenceB[edit.IndexB]); 706544"];
5677 [label="yield return '++> ' + toString(sequenceB[edit.IndexB]); 706545"];
5678 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 706546"];
5679 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 706547"];
5680 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 706548"];
5681 [label="yield return '--> ' + toString(sequenceA[edit.IndexA]); 706549"];
5682 [label="yield return '--> ' + toString(sequenceA[edit.IndexA]); 706550"];
5683 [label="yield return '--> ' + toString(sequenceA[edit.IndexA]); 706551"];
5684 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 706552"];
5685 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 706553"];
5686 [label="actualText.Free(); 706554"];
5687 [label="expectedText.Free(); 706555"];
5688 [label="return assertText.ToString(); 706556"];
5689 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 706557"];
5690 [label="diagnostics.Verify(expected); 706558"];
5691 [label="VerifyAssemblyIds(c, diagnostics); 706559"];
5692 [label="VerifyAssemblyIds(c, diagnostics); 706560"];
5693 [label="VerifyAssemblyIds(c, diagnostics) 706561"];
5694 [label="param VerifyAssemblyIds(TCompilation c) 706562"];
5695 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 706563"];
5696 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 706564"];
5697 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 706565"];
5698 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 706566"];
5699 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 706567"];
5700 [label="CustomAssert.True(assemblyIds.IsEmpty); 706568"];
5701 [label="CustomAssert.True(assemblyIds.IsEmpty); 706569"];
5702 [label="VerifyAssemblyIds(c, diagnostics); 706570"];
5703 [label="return c; 706571"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 237;
238 -> 234;
239 -> 227;
240 -> 229;
240 -> 239;
240 -> 227;
241 -> 238;
241 -> 240;
242 -> 218;
242 -> 215;
243 -> 219;
243 -> 215;
244 -> 221;
244 -> 215;
245 -> 222;
245 -> 215;
246 -> 223;
246 -> 215;
247 -> 215;
248 -> 224;
248 -> 247;
249 -> 241;
249 -> 247;
250 -> 242;
250 -> 247;
251 -> 243;
251 -> 247;
252 -> 244;
252 -> 247;
253 -> 245;
253 -> 247;
254 -> 246;
254 -> 247;
255 -> 248;
255 -> 247;
256 -> 249;
256 -> 247;
257 -> 250;
257 -> 247;
258 -> 251;
258 -> 247;
259 -> 252;
259 -> 247;
260 -> 253;
260 -> 247;
261 -> 254;
261 -> 247;
262 -> 247;
263 -> 262;
263 -> 247;
264 -> 247;
265 -> 255;
265 -> 264;
266 -> 256;
266 -> 264;
267 -> 257;
267 -> 264;
268 -> 258;
268 -> 264;
269 -> 259;
269 -> 264;
270 -> 260;
270 -> 264;
271 -> 261;
271 -> 264;
272 -> 263;
272 -> 264;
273 -> 268;
273 -> 264;
274 -> 270;
274 -> 264;
275 -> 264;
276 -> 273;
276 -> 275;
277 -> 274;
277 -> 275;
278 -> 265;
278 -> 275;
279 -> 278;
279 -> 212;
279 -> 275;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 276;
282 -> 279;
283 -> 279;
284 -> 280;
284 -> 283;
285 -> 281;
285 -> 283;
286 -> 282;
286 -> 283;
287 -> 280;
287 -> 283;
288 -> 283;
289 -> 286;
289 -> 288;
289 -> 283;
290 -> 0;
291 -> 0;
293 -> 290;
293 -> 291;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 294;
296 -> 293;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 294;
299 -> 293;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 294;
302 -> 293;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 294;
305 -> 293;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 294;
308 -> 293;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 294;
311 -> 293;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 294;
314 -> 293;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 294;
317 -> 293;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 294;
320 -> 293;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 294;
323 -> 293;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 294;
326 -> 293;
326 -> 325;
327 -> 326;
328 -> 294;
331 -> 328;
331 -> 330;
332 -> 329;
332 -> 330;
333 -> 330;
334 -> 331;
334 -> 293;
334 -> 330;
335 -> 330;
336 -> 332;
336 -> 330;
337 -> 333;
337 -> 330;
338 -> 336;
338 -> 337;
338 -> 330;
339 -> 338;
339 -> 335;
339 -> 330;
340 -> 334;
340 -> 335;
340 -> 293;
340 -> 339;
340 -> 338;
340 -> 330;
341 -> 340;
342 -> 0;
343 -> 342;
345 -> 343;
345 -> 344;
346 -> 294;
346 -> 293;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 348;
350 -> 294;
350 -> 293;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 294;
353 -> 293;
353 -> 352;
354 -> 353;
355 -> 318;
357 -> 356;
358 -> 0;
359 -> 0;
360 -> 0;
362 -> 358;
362 -> 359;
362 -> 360;
362 -> 361;
363 -> 357;
364 -> 362;
364 -> 363;
364 -> 356;
365 -> 364;
369 -> 366;
369 -> 367;
369 -> 368;
370 -> 300;
370 -> 293;
370 -> 299;
370 -> 366;
370 -> 369;
371 -> 370;
372 -> 312;
373 -> 321;
374 -> 321;
375 -> 318;
376 -> 0;
377 -> 0;
379 -> 376;
379 -> 378;
380 -> 377;
380 -> 378;
381 -> 378;
382 -> 379;
382 -> 378;
383 -> 380;
383 -> 378;
384 -> 0;
384 -> 378;
385 -> 381;
385 -> 378;
386 -> 378;
387 -> 382;
387 -> 383;
387 -> 384;
387 -> 385;
387 -> 386;
387 -> 378;
388 -> 387;
389 -> 0;
390 -> 0;
392 -> 389;
392 -> 391;
393 -> 390;
393 -> 391;
394 -> 391;
395 -> 392;
395 -> 391;
396 -> 393;
396 -> 391;
397 -> 0;
397 -> 391;
398 -> 394;
398 -> 391;
399 -> 391;
400 -> 395;
400 -> 396;
400 -> 397;
400 -> 398;
400 -> 399;
400 -> 391;
401 -> 400;
403 -> 388;
403 -> 387;
403 -> 402;
404 -> 403;
406 -> 401;
406 -> 400;
406 -> 405;
407 -> 406;
408 -> 0;
409 -> 0;
411 -> 408;
411 -> 410;
412 -> 409;
412 -> 410;
413 -> 410;
414 -> 411;
414 -> 410;
415 -> 412;
415 -> 410;
416 -> 0;
416 -> 410;
417 -> 413;
417 -> 410;
418 -> 410;
419 -> 414;
419 -> 415;
419 -> 416;
419 -> 417;
419 -> 418;
419 -> 410;
420 -> 419;
421 -> 0;
422 -> 0;
424 -> 421;
424 -> 423;
425 -> 422;
425 -> 423;
426 -> 423;
427 -> 424;
427 -> 423;
428 -> 425;
428 -> 423;
429 -> 0;
429 -> 423;
430 -> 426;
430 -> 423;
431 -> 423;
432 -> 427;
432 -> 428;
432 -> 429;
432 -> 430;
432 -> 431;
432 -> 423;
433 -> 432;
434 -> 0;
435 -> 0;
437 -> 434;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 436;
440 -> 437;
440 -> 436;
441 -> 438;
441 -> 436;
442 -> 0;
442 -> 436;
443 -> 439;
443 -> 436;
444 -> 436;
445 -> 440;
445 -> 441;
445 -> 442;
445 -> 443;
445 -> 444;
445 -> 436;
446 -> 445;
447 -> 0;
448 -> 0;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 449;
453 -> 450;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 0;
455 -> 449;
456 -> 452;
456 -> 449;
457 -> 449;
458 -> 453;
458 -> 454;
458 -> 455;
458 -> 456;
458 -> 457;
458 -> 449;
459 -> 458;
460 -> 0;
461 -> 0;
463 -> 460;
463 -> 462;
464 -> 461;
464 -> 462;
465 -> 462;
466 -> 463;
466 -> 462;
467 -> 464;
467 -> 462;
468 -> 0;
468 -> 462;
469 -> 465;
469 -> 462;
470 -> 462;
471 -> 466;
471 -> 467;
471 -> 468;
471 -> 469;
471 -> 470;
471 -> 462;
472 -> 471;
473 -> 0;
474 -> 0;
476 -> 473;
476 -> 475;
477 -> 474;
477 -> 475;
478 -> 475;
479 -> 476;
479 -> 475;
480 -> 477;
480 -> 475;
481 -> 0;
481 -> 475;
482 -> 478;
482 -> 475;
483 -> 475;
484 -> 479;
484 -> 480;
484 -> 481;
484 -> 482;
484 -> 483;
484 -> 475;
485 -> 484;
487 -> 388;
487 -> 387;
487 -> 486;
488 -> 487;
490 -> 401;
490 -> 400;
490 -> 489;
491 -> 490;
493 -> 420;
493 -> 419;
493 -> 492;
494 -> 493;
496 -> 433;
496 -> 432;
496 -> 495;
497 -> 496;
498 -> 0;
499 -> 388;
499 -> 387;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 401;
502 -> 400;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 472;
505 -> 471;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 420;
508 -> 419;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 0;
511 -> 510;
512 -> 511;
513 -> 294;
513 -> 289;
514 -> 284;
514 -> 283;
515 -> 0;
515 -> 283;
516 -> 515;
516 -> 287;
516 -> 283;
517 -> 283;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 283;
519 -> 518;
519 -> 283;
520 -> 513;
520 -> 283;
521 -> 285;
521 -> 283;
522 -> 283;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 293;
523 -> 283;
524 -> 283;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 280;
538 -> 279;
539 -> 280;
539 -> 264;
540 -> 264;
541 -> 267;
541 -> 540;
541 -> 264;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 280;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 388;
546 -> 545;
547 -> 0;
547 -> 264;
548 -> 272;
548 -> 264;
549 -> 269;
549 -> 539;
549 -> 266;
549 -> 546;
549 -> 264;
550 -> 549;
550 -> 264;
551 -> 264;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 264;
556 -> 549;
556 -> 280;
556 -> 538;
556 -> 523;
556 -> 237;
556 -> 0;
556 -> 387;
556 -> 264;
557 -> 264;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 264;
560 -> 559;
560 -> 264;
561 -> 264;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 271;
569 -> 568;
569 -> 264;
570 -> 559;
570 -> 264;
571 -> 0;
571 -> 1;
572 -> 1;
573 -> 571;
573 -> 572;
574 -> 214;
574 -> 572;
575 -> 214;
575 -> 572;
576 -> 214;
576 -> 572;
577 -> 214;
577 -> 572;
578 -> 214;
578 -> 572;
579 -> 214;
579 -> 572;
580 -> 573;
580 -> 572;
581 -> 574;
581 -> 572;
582 -> 575;
582 -> 572;
583 -> 576;
583 -> 572;
584 -> 577;
584 -> 572;
585 -> 578;
585 -> 572;
586 -> 579;
586 -> 572;
587 -> 572;
588 -> 580;
588 -> 587;
589 -> 581;
589 -> 587;
590 -> 582;
590 -> 587;
591 -> 583;
591 -> 587;
592 -> 584;
592 -> 587;
593 -> 585;
593 -> 587;
594 -> 586;
594 -> 587;
595 -> 588;
595 -> 587;
596 -> 588;
596 -> 587;
597 -> 587;
598 -> 589;
598 -> 587;
599 -> 590;
599 -> 587;
600 -> 591;
600 -> 587;
601 -> 592;
601 -> 587;
602 -> 593;
602 -> 587;
604 -> 603;
606 -> 605;
607 -> 594;
607 -> 587;
608 -> 587;
609 -> 596;
609 -> 608;
610 -> 597;
610 -> 608;
611 -> 598;
611 -> 608;
612 -> 599;
612 -> 608;
613 -> 600;
613 -> 608;
614 -> 601;
614 -> 608;
615 -> 602;
615 -> 608;
616 -> 596;
616 -> 608;
617 -> 607;
617 -> 608;
618 -> 597;
618 -> 608;
619 -> 597;
619 -> 608;
620 -> 597;
620 -> 608;
621 -> 620;
621 -> 608;
622 -> 620;
622 -> 608;
623 -> 620;
623 -> 608;
624 -> 620;
624 -> 608;
625 -> 620;
625 -> 608;
626 -> 620;
626 -> 608;
627 -> 620;
627 -> 608;
628 -> 620;
628 -> 608;
629 -> 620;
629 -> 608;
630 -> 620;
630 -> 608;
631 -> 620;
631 -> 608;
632 -> 620;
632 -> 608;
633 -> 620;
633 -> 608;
634 -> 620;
634 -> 608;
635 -> 620;
635 -> 608;
636 -> 609;
636 -> 620;
636 -> 608;
637 -> 610;
637 -> 620;
637 -> 608;
638 -> 611;
638 -> 620;
638 -> 608;
639 -> 612;
639 -> 620;
639 -> 608;
640 -> 613;
640 -> 620;
640 -> 608;
641 -> 614;
641 -> 620;
641 -> 608;
642 -> 615;
642 -> 620;
642 -> 608;
643 -> 616;
643 -> 608;
644 -> 643;
644 -> 620;
644 -> 608;
645 -> 617;
645 -> 620;
645 -> 608;
646 -> 618;
646 -> 620;
646 -> 608;
647 -> 619;
647 -> 620;
647 -> 608;
648 -> 597;
648 -> 572;
649 -> 648;
649 -> 1;
650 -> 214;
650 -> 1;
651 -> 1;
652 -> 214;
652 -> 651;
653 -> 649;
653 -> 651;
654 -> 653;
654 -> 636;
654 -> 651;
655 -> 653;
655 -> 637;
655 -> 651;
656 -> 653;
656 -> 638;
656 -> 651;
657 -> 652;
657 -> 651;
658 -> 653;
658 -> 640;
658 -> 651;
659 -> 653;
659 -> 641;
659 -> 651;
660 -> 651;
661 -> 653;
661 -> 644;
661 -> 651;
662 -> 653;
662 -> 645;
662 -> 651;
663 -> 653;
663 -> 646;
663 -> 651;
664 -> 653;
664 -> 647;
664 -> 651;
665 -> 651;
666 -> 654;
666 -> 665;
667 -> 655;
667 -> 665;
668 -> 656;
668 -> 665;
669 -> 657;
669 -> 665;
670 -> 658;
670 -> 665;
671 -> 659;
671 -> 665;
672 -> 660;
672 -> 665;
673 -> 661;
673 -> 665;
674 -> 662;
674 -> 665;
675 -> 663;
675 -> 665;
676 -> 664;
676 -> 665;
677 -> 660;
677 -> 665;
678 -> 677;
678 -> 665;
679 -> 677;
679 -> 665;
680 -> 677;
680 -> 665;
681 -> 677;
681 -> 665;
682 -> 677;
682 -> 665;
683 -> 677;
683 -> 665;
684 -> 677;
684 -> 665;
685 -> 677;
685 -> 665;
686 -> 677;
686 -> 665;
687 -> 677;
687 -> 665;
688 -> 677;
688 -> 665;
689 -> 677;
689 -> 665;
690 -> 677;
690 -> 665;
691 -> 677;
691 -> 665;
692 -> 677;
692 -> 665;
693 -> 669;
693 -> 677;
693 -> 665;
694 -> 672;
694 -> 677;
694 -> 665;
695 -> 660;
695 -> 1;
696 -> 1;
697 -> 571;
697 -> 696;
698 -> 214;
698 -> 696;
699 -> 214;
699 -> 696;
700 -> 214;
700 -> 696;
701 -> 214;
701 -> 696;
702 -> 214;
702 -> 696;
703 -> 214;
703 -> 696;
704 -> 697;
704 -> 696;
705 -> 698;
705 -> 696;
706 -> 699;
706 -> 696;
707 -> 700;
707 -> 696;
708 -> 701;
708 -> 696;
709 -> 702;
709 -> 696;
710 -> 703;
710 -> 696;
711 -> 696;
712 -> 704;
712 -> 711;
713 -> 705;
713 -> 711;
714 -> 706;
714 -> 711;
715 -> 707;
715 -> 711;
716 -> 708;
716 -> 711;
717 -> 709;
717 -> 711;
718 -> 710;
718 -> 711;
719 -> 712;
719 -> 711;
720 -> 712;
720 -> 711;
721 -> 711;
722 -> 713;
722 -> 711;
723 -> 714;
723 -> 711;
724 -> 715;
724 -> 711;
725 -> 716;
725 -> 711;
726 -> 717;
726 -> 711;
727 -> 718;
727 -> 711;
728 -> 711;
729 -> 720;
729 -> 728;
730 -> 721;
730 -> 728;
731 -> 722;
731 -> 728;
732 -> 723;
732 -> 728;
733 -> 724;
733 -> 728;
734 -> 725;
734 -> 728;
735 -> 726;
735 -> 728;
736 -> 720;
736 -> 728;
737 -> 727;
737 -> 728;
738 -> 721;
738 -> 728;
739 -> 721;
739 -> 728;
740 -> 721;
740 -> 728;
741 -> 740;
741 -> 728;
742 -> 740;
742 -> 728;
743 -> 740;
743 -> 728;
744 -> 740;
744 -> 728;
745 -> 740;
745 -> 728;
746 -> 740;
746 -> 728;
747 -> 740;
747 -> 728;
748 -> 740;
748 -> 728;
749 -> 740;
749 -> 728;
750 -> 740;
750 -> 728;
751 -> 740;
751 -> 728;
752 -> 740;
752 -> 728;
753 -> 740;
753 -> 728;
754 -> 740;
754 -> 728;
755 -> 740;
755 -> 728;
756 -> 729;
756 -> 740;
756 -> 728;
757 -> 730;
757 -> 740;
757 -> 728;
758 -> 731;
758 -> 740;
758 -> 728;
759 -> 732;
759 -> 740;
759 -> 728;
760 -> 733;
760 -> 740;
760 -> 728;
761 -> 734;
761 -> 740;
761 -> 728;
762 -> 735;
762 -> 740;
762 -> 728;
763 -> 736;
763 -> 728;
764 -> 763;
764 -> 740;
764 -> 728;
765 -> 737;
765 -> 740;
765 -> 728;
766 -> 738;
766 -> 740;
766 -> 728;
767 -> 739;
767 -> 740;
767 -> 728;
768 -> 721;
768 -> 696;
769 -> 768;
769 -> 1;
770 -> 214;
770 -> 1;
771 -> 1;
772 -> 214;
772 -> 771;
773 -> 769;
773 -> 771;
774 -> 773;
774 -> 756;
774 -> 771;
775 -> 773;
775 -> 757;
775 -> 771;
776 -> 773;
776 -> 758;
776 -> 771;
777 -> 772;
777 -> 771;
778 -> 773;
778 -> 760;
778 -> 771;
779 -> 773;
779 -> 761;
779 -> 771;
780 -> 771;
781 -> 773;
781 -> 764;
781 -> 771;
782 -> 773;
782 -> 765;
782 -> 771;
783 -> 773;
783 -> 766;
783 -> 771;
784 -> 773;
784 -> 767;
784 -> 771;
785 -> 771;
786 -> 774;
786 -> 785;
787 -> 775;
787 -> 785;
788 -> 776;
788 -> 785;
789 -> 777;
789 -> 785;
790 -> 778;
790 -> 785;
791 -> 779;
791 -> 785;
792 -> 780;
792 -> 785;
793 -> 781;
793 -> 785;
794 -> 782;
794 -> 785;
795 -> 783;
795 -> 785;
796 -> 784;
796 -> 785;
797 -> 780;
797 -> 785;
798 -> 797;
798 -> 785;
799 -> 797;
799 -> 785;
800 -> 797;
800 -> 785;
801 -> 797;
801 -> 785;
802 -> 797;
802 -> 785;
803 -> 797;
803 -> 785;
804 -> 797;
804 -> 785;
805 -> 797;
805 -> 785;
806 -> 797;
806 -> 785;
807 -> 797;
807 -> 785;
808 -> 797;
808 -> 785;
809 -> 797;
809 -> 785;
810 -> 797;
810 -> 785;
811 -> 797;
811 -> 785;
812 -> 797;
812 -> 785;
813 -> 789;
813 -> 797;
813 -> 785;
814 -> 792;
814 -> 797;
814 -> 785;
815 -> 780;
815 -> 1;
816 -> 1;
817 -> 571;
817 -> 816;
818 -> 214;
818 -> 816;
819 -> 214;
819 -> 816;
820 -> 214;
820 -> 816;
821 -> 214;
821 -> 816;
822 -> 214;
822 -> 816;
823 -> 214;
823 -> 816;
824 -> 817;
824 -> 816;
825 -> 818;
825 -> 816;
826 -> 819;
826 -> 816;
827 -> 820;
827 -> 816;
828 -> 821;
828 -> 816;
829 -> 822;
829 -> 816;
830 -> 823;
830 -> 816;
831 -> 816;
832 -> 824;
832 -> 831;
833 -> 825;
833 -> 831;
834 -> 826;
834 -> 831;
835 -> 827;
835 -> 831;
836 -> 828;
836 -> 831;
837 -> 829;
837 -> 831;
838 -> 830;
838 -> 831;
839 -> 832;
839 -> 831;
840 -> 832;
840 -> 831;
841 -> 831;
842 -> 833;
842 -> 831;
843 -> 834;
843 -> 831;
844 -> 835;
844 -> 831;
845 -> 836;
845 -> 831;
846 -> 837;
846 -> 831;
847 -> 838;
847 -> 831;
848 -> 831;
849 -> 840;
849 -> 848;
850 -> 841;
850 -> 848;
851 -> 842;
851 -> 848;
852 -> 843;
852 -> 848;
853 -> 844;
853 -> 848;
854 -> 845;
854 -> 848;
855 -> 846;
855 -> 848;
856 -> 840;
856 -> 848;
857 -> 847;
857 -> 848;
858 -> 841;
858 -> 848;
859 -> 841;
859 -> 848;
860 -> 841;
860 -> 848;
861 -> 860;
861 -> 848;
862 -> 860;
862 -> 848;
863 -> 860;
863 -> 848;
864 -> 860;
864 -> 848;
865 -> 860;
865 -> 848;
866 -> 860;
866 -> 848;
867 -> 860;
867 -> 848;
868 -> 860;
868 -> 848;
869 -> 860;
869 -> 848;
870 -> 860;
870 -> 848;
871 -> 860;
871 -> 848;
872 -> 860;
872 -> 848;
873 -> 860;
873 -> 848;
874 -> 860;
874 -> 848;
875 -> 860;
875 -> 848;
876 -> 849;
876 -> 860;
876 -> 848;
877 -> 850;
877 -> 860;
877 -> 848;
878 -> 851;
878 -> 860;
878 -> 848;
879 -> 852;
879 -> 860;
879 -> 848;
880 -> 853;
880 -> 860;
880 -> 848;
881 -> 854;
881 -> 860;
881 -> 848;
882 -> 855;
882 -> 860;
882 -> 848;
883 -> 856;
883 -> 848;
884 -> 883;
884 -> 860;
884 -> 848;
885 -> 857;
885 -> 860;
885 -> 848;
886 -> 858;
886 -> 860;
886 -> 848;
887 -> 859;
887 -> 860;
887 -> 848;
888 -> 841;
888 -> 816;
889 -> 888;
889 -> 1;
890 -> 214;
890 -> 1;
891 -> 1;
892 -> 214;
892 -> 891;
893 -> 889;
893 -> 891;
894 -> 893;
894 -> 876;
894 -> 891;
895 -> 893;
895 -> 877;
895 -> 891;
896 -> 893;
896 -> 878;
896 -> 891;
897 -> 892;
897 -> 891;
898 -> 893;
898 -> 880;
898 -> 891;
899 -> 893;
899 -> 881;
899 -> 891;
900 -> 891;
901 -> 893;
901 -> 884;
901 -> 891;
902 -> 893;
902 -> 885;
902 -> 891;
903 -> 893;
903 -> 886;
903 -> 891;
904 -> 893;
904 -> 887;
904 -> 891;
905 -> 891;
906 -> 894;
906 -> 905;
907 -> 895;
907 -> 905;
908 -> 896;
908 -> 905;
909 -> 897;
909 -> 905;
910 -> 898;
910 -> 905;
911 -> 899;
911 -> 905;
912 -> 900;
912 -> 905;
913 -> 901;
913 -> 905;
914 -> 902;
914 -> 905;
915 -> 903;
915 -> 905;
916 -> 904;
916 -> 905;
917 -> 900;
917 -> 905;
918 -> 917;
918 -> 905;
919 -> 917;
919 -> 905;
920 -> 917;
920 -> 905;
921 -> 917;
921 -> 905;
922 -> 917;
922 -> 905;
923 -> 917;
923 -> 905;
924 -> 917;
924 -> 905;
925 -> 917;
925 -> 905;
926 -> 917;
926 -> 905;
927 -> 917;
927 -> 905;
928 -> 917;
928 -> 905;
929 -> 917;
929 -> 905;
930 -> 917;
930 -> 905;
931 -> 917;
931 -> 905;
932 -> 917;
932 -> 905;
933 -> 909;
933 -> 917;
933 -> 905;
934 -> 912;
934 -> 917;
934 -> 905;
935 -> 900;
935 -> 1;
936 -> 1;
937 -> 571;
937 -> 936;
938 -> 214;
938 -> 936;
939 -> 214;
939 -> 936;
940 -> 214;
940 -> 936;
941 -> 214;
941 -> 936;
942 -> 214;
942 -> 936;
943 -> 214;
943 -> 936;
944 -> 937;
944 -> 936;
945 -> 938;
945 -> 936;
946 -> 939;
946 -> 936;
947 -> 940;
947 -> 936;
948 -> 941;
948 -> 936;
949 -> 942;
949 -> 936;
950 -> 943;
950 -> 936;
951 -> 936;
952 -> 944;
952 -> 951;
953 -> 945;
953 -> 951;
954 -> 946;
954 -> 951;
955 -> 947;
955 -> 951;
956 -> 948;
956 -> 951;
957 -> 949;
957 -> 951;
958 -> 950;
958 -> 951;
959 -> 952;
959 -> 951;
960 -> 952;
960 -> 951;
961 -> 951;
962 -> 953;
962 -> 951;
963 -> 954;
963 -> 951;
964 -> 955;
964 -> 951;
965 -> 956;
965 -> 951;
966 -> 957;
966 -> 951;
967 -> 958;
967 -> 951;
968 -> 951;
969 -> 960;
969 -> 968;
970 -> 961;
970 -> 968;
971 -> 962;
971 -> 968;
972 -> 963;
972 -> 968;
973 -> 964;
973 -> 968;
974 -> 965;
974 -> 968;
975 -> 966;
975 -> 968;
976 -> 960;
976 -> 968;
977 -> 967;
977 -> 968;
978 -> 961;
978 -> 968;
979 -> 961;
979 -> 968;
980 -> 961;
980 -> 968;
981 -> 980;
981 -> 968;
982 -> 980;
982 -> 968;
983 -> 980;
983 -> 968;
984 -> 980;
984 -> 968;
985 -> 980;
985 -> 968;
986 -> 980;
986 -> 968;
987 -> 980;
987 -> 968;
988 -> 980;
988 -> 968;
989 -> 980;
989 -> 968;
990 -> 980;
990 -> 968;
991 -> 980;
991 -> 968;
992 -> 980;
992 -> 968;
993 -> 980;
993 -> 968;
994 -> 980;
994 -> 968;
995 -> 980;
995 -> 968;
996 -> 969;
996 -> 980;
996 -> 968;
997 -> 970;
997 -> 980;
997 -> 968;
998 -> 971;
998 -> 980;
998 -> 968;
999 -> 972;
999 -> 980;
999 -> 968;
1000 -> 973;
1000 -> 980;
1000 -> 968;
1001 -> 974;
1001 -> 980;
1001 -> 968;
1002 -> 975;
1002 -> 980;
1002 -> 968;
1003 -> 976;
1003 -> 968;
1004 -> 1003;
1004 -> 980;
1004 -> 968;
1005 -> 977;
1005 -> 980;
1005 -> 968;
1006 -> 978;
1006 -> 980;
1006 -> 968;
1007 -> 979;
1007 -> 980;
1007 -> 968;
1008 -> 961;
1008 -> 936;
1009 -> 1008;
1009 -> 1;
1010 -> 214;
1010 -> 1;
1011 -> 1;
1012 -> 214;
1012 -> 1011;
1013 -> 1009;
1013 -> 1011;
1014 -> 1013;
1014 -> 996;
1014 -> 1011;
1015 -> 1013;
1015 -> 997;
1015 -> 1011;
1016 -> 1013;
1016 -> 998;
1016 -> 1011;
1017 -> 1012;
1017 -> 1011;
1018 -> 1013;
1018 -> 1000;
1018 -> 1011;
1019 -> 1013;
1019 -> 1001;
1019 -> 1011;
1020 -> 1011;
1021 -> 1013;
1021 -> 1004;
1021 -> 1011;
1022 -> 1013;
1022 -> 1005;
1022 -> 1011;
1023 -> 1013;
1023 -> 1006;
1023 -> 1011;
1024 -> 1013;
1024 -> 1007;
1024 -> 1011;
1025 -> 1011;
1026 -> 1014;
1026 -> 1025;
1027 -> 1015;
1027 -> 1025;
1028 -> 1016;
1028 -> 1025;
1029 -> 1017;
1029 -> 1025;
1030 -> 1018;
1030 -> 1025;
1031 -> 1019;
1031 -> 1025;
1032 -> 1020;
1032 -> 1025;
1033 -> 1021;
1033 -> 1025;
1034 -> 1022;
1034 -> 1025;
1035 -> 1023;
1035 -> 1025;
1036 -> 1024;
1036 -> 1025;
1037 -> 1020;
1037 -> 1025;
1038 -> 1037;
1038 -> 1025;
1039 -> 1037;
1039 -> 1025;
1040 -> 1037;
1040 -> 1025;
1041 -> 1037;
1041 -> 1025;
1042 -> 1037;
1042 -> 1025;
1043 -> 1037;
1043 -> 1025;
1044 -> 1037;
1044 -> 1025;
1045 -> 1037;
1045 -> 1025;
1046 -> 1037;
1046 -> 1025;
1047 -> 1037;
1047 -> 1025;
1048 -> 1037;
1048 -> 1025;
1049 -> 1037;
1049 -> 1025;
1050 -> 1037;
1050 -> 1025;
1051 -> 1037;
1051 -> 1025;
1052 -> 1037;
1052 -> 1025;
1053 -> 1029;
1053 -> 1037;
1053 -> 1025;
1054 -> 1032;
1054 -> 1037;
1054 -> 1025;
1055 -> 1020;
1055 -> 1;
1056 -> 1;
1057 -> 571;
1057 -> 1056;
1058 -> 214;
1058 -> 1056;
1059 -> 214;
1059 -> 1056;
1060 -> 214;
1060 -> 1056;
1061 -> 214;
1061 -> 1056;
1062 -> 214;
1062 -> 1056;
1063 -> 214;
1063 -> 1056;
1064 -> 1057;
1064 -> 1056;
1065 -> 1058;
1065 -> 1056;
1066 -> 1059;
1066 -> 1056;
1067 -> 1060;
1067 -> 1056;
1068 -> 1061;
1068 -> 1056;
1069 -> 1062;
1069 -> 1056;
1070 -> 1063;
1070 -> 1056;
1071 -> 1056;
1072 -> 1064;
1072 -> 1071;
1073 -> 1065;
1073 -> 1071;
1074 -> 1066;
1074 -> 1071;
1075 -> 1067;
1075 -> 1071;
1076 -> 1068;
1076 -> 1071;
1077 -> 1069;
1077 -> 1071;
1078 -> 1070;
1078 -> 1071;
1079 -> 1072;
1079 -> 1071;
1080 -> 1072;
1080 -> 1071;
1081 -> 1071;
1082 -> 1073;
1082 -> 1071;
1083 -> 1074;
1083 -> 1071;
1084 -> 1075;
1084 -> 1071;
1085 -> 1076;
1085 -> 1071;
1086 -> 1077;
1086 -> 1071;
1087 -> 1078;
1087 -> 1071;
1088 -> 1071;
1089 -> 1080;
1089 -> 1088;
1090 -> 1081;
1090 -> 1088;
1091 -> 1082;
1091 -> 1088;
1092 -> 1083;
1092 -> 1088;
1093 -> 1084;
1093 -> 1088;
1094 -> 1085;
1094 -> 1088;
1095 -> 1086;
1095 -> 1088;
1096 -> 1080;
1096 -> 1088;
1097 -> 1087;
1097 -> 1088;
1098 -> 1081;
1098 -> 1088;
1099 -> 1081;
1099 -> 1088;
1100 -> 1081;
1100 -> 1088;
1101 -> 1100;
1101 -> 1088;
1102 -> 1100;
1102 -> 1088;
1103 -> 1100;
1103 -> 1088;
1104 -> 1100;
1104 -> 1088;
1105 -> 1100;
1105 -> 1088;
1106 -> 1100;
1106 -> 1088;
1107 -> 1100;
1107 -> 1088;
1108 -> 1100;
1108 -> 1088;
1109 -> 1100;
1109 -> 1088;
1110 -> 1100;
1110 -> 1088;
1111 -> 1100;
1111 -> 1088;
1112 -> 1100;
1112 -> 1088;
1113 -> 1100;
1113 -> 1088;
1114 -> 1100;
1114 -> 1088;
1115 -> 1100;
1115 -> 1088;
1116 -> 1089;
1116 -> 1100;
1116 -> 1088;
1117 -> 1090;
1117 -> 1100;
1117 -> 1088;
1118 -> 1091;
1118 -> 1100;
1118 -> 1088;
1119 -> 1092;
1119 -> 1100;
1119 -> 1088;
1120 -> 1093;
1120 -> 1100;
1120 -> 1088;
1121 -> 1094;
1121 -> 1100;
1121 -> 1088;
1122 -> 1095;
1122 -> 1100;
1122 -> 1088;
1123 -> 1096;
1123 -> 1088;
1124 -> 1123;
1124 -> 1100;
1124 -> 1088;
1125 -> 1097;
1125 -> 1100;
1125 -> 1088;
1126 -> 1098;
1126 -> 1100;
1126 -> 1088;
1127 -> 1099;
1127 -> 1100;
1127 -> 1088;
1128 -> 1081;
1128 -> 1056;
1129 -> 1128;
1129 -> 1;
1130 -> 214;
1130 -> 1;
1131 -> 1;
1132 -> 214;
1132 -> 1131;
1133 -> 1129;
1133 -> 1131;
1134 -> 1133;
1134 -> 1116;
1134 -> 1131;
1135 -> 1133;
1135 -> 1117;
1135 -> 1131;
1136 -> 1133;
1136 -> 1118;
1136 -> 1131;
1137 -> 1132;
1137 -> 1131;
1138 -> 1133;
1138 -> 1120;
1138 -> 1131;
1139 -> 1133;
1139 -> 1121;
1139 -> 1131;
1140 -> 1131;
1141 -> 1133;
1141 -> 1124;
1141 -> 1131;
1142 -> 1133;
1142 -> 1125;
1142 -> 1131;
1143 -> 1133;
1143 -> 1126;
1143 -> 1131;
1144 -> 1133;
1144 -> 1127;
1144 -> 1131;
1145 -> 1131;
1146 -> 1134;
1146 -> 1145;
1147 -> 1135;
1147 -> 1145;
1148 -> 1136;
1148 -> 1145;
1149 -> 1137;
1149 -> 1145;
1150 -> 1138;
1150 -> 1145;
1151 -> 1139;
1151 -> 1145;
1152 -> 1140;
1152 -> 1145;
1153 -> 1141;
1153 -> 1145;
1154 -> 1142;
1154 -> 1145;
1155 -> 1143;
1155 -> 1145;
1156 -> 1144;
1156 -> 1145;
1157 -> 1140;
1157 -> 1145;
1158 -> 1157;
1158 -> 1145;
1159 -> 1157;
1159 -> 1145;
1160 -> 1157;
1160 -> 1145;
1161 -> 1157;
1161 -> 1145;
1162 -> 1157;
1162 -> 1145;
1163 -> 1157;
1163 -> 1145;
1164 -> 1157;
1164 -> 1145;
1165 -> 1157;
1165 -> 1145;
1166 -> 1157;
1166 -> 1145;
1167 -> 1157;
1167 -> 1145;
1168 -> 1157;
1168 -> 1145;
1169 -> 1157;
1169 -> 1145;
1170 -> 1157;
1170 -> 1145;
1171 -> 1157;
1171 -> 1145;
1172 -> 1157;
1172 -> 1145;
1173 -> 1149;
1173 -> 1157;
1173 -> 1145;
1174 -> 1152;
1174 -> 1157;
1174 -> 1145;
1175 -> 1140;
1175 -> 1;
1176 -> 1;
1177 -> 571;
1177 -> 1176;
1178 -> 214;
1178 -> 1176;
1179 -> 214;
1179 -> 1176;
1180 -> 214;
1180 -> 1176;
1181 -> 214;
1181 -> 1176;
1182 -> 214;
1182 -> 1176;
1183 -> 214;
1183 -> 1176;
1184 -> 1177;
1184 -> 1176;
1185 -> 1178;
1185 -> 1176;
1186 -> 1179;
1186 -> 1176;
1187 -> 1180;
1187 -> 1176;
1188 -> 1181;
1188 -> 1176;
1189 -> 1182;
1189 -> 1176;
1190 -> 1183;
1190 -> 1176;
1191 -> 1176;
1192 -> 1184;
1192 -> 1191;
1193 -> 1185;
1193 -> 1191;
1194 -> 1186;
1194 -> 1191;
1195 -> 1187;
1195 -> 1191;
1196 -> 1188;
1196 -> 1191;
1197 -> 1189;
1197 -> 1191;
1198 -> 1190;
1198 -> 1191;
1199 -> 1192;
1199 -> 1191;
1200 -> 1192;
1200 -> 1191;
1201 -> 1191;
1202 -> 1193;
1202 -> 1191;
1203 -> 1194;
1203 -> 1191;
1204 -> 1195;
1204 -> 1191;
1205 -> 1196;
1205 -> 1191;
1206 -> 1197;
1206 -> 1191;
1207 -> 1198;
1207 -> 1191;
1208 -> 1191;
1209 -> 1200;
1209 -> 1208;
1210 -> 1201;
1210 -> 1208;
1211 -> 1202;
1211 -> 1208;
1212 -> 1203;
1212 -> 1208;
1213 -> 1204;
1213 -> 1208;
1214 -> 1205;
1214 -> 1208;
1215 -> 1206;
1215 -> 1208;
1216 -> 1200;
1216 -> 1208;
1217 -> 1207;
1217 -> 1208;
1218 -> 1201;
1218 -> 1208;
1219 -> 1201;
1219 -> 1208;
1220 -> 1201;
1220 -> 1208;
1221 -> 1220;
1221 -> 1208;
1222 -> 1220;
1222 -> 1208;
1223 -> 1220;
1223 -> 1208;
1224 -> 1220;
1224 -> 1208;
1225 -> 1220;
1225 -> 1208;
1226 -> 1220;
1226 -> 1208;
1227 -> 1220;
1227 -> 1208;
1228 -> 1220;
1228 -> 1208;
1229 -> 1220;
1229 -> 1208;
1230 -> 1220;
1230 -> 1208;
1231 -> 1220;
1231 -> 1208;
1232 -> 1220;
1232 -> 1208;
1233 -> 1220;
1233 -> 1208;
1234 -> 1220;
1234 -> 1208;
1235 -> 1220;
1235 -> 1208;
1236 -> 1209;
1236 -> 1220;
1236 -> 1208;
1237 -> 1210;
1237 -> 1220;
1237 -> 1208;
1238 -> 1211;
1238 -> 1220;
1238 -> 1208;
1239 -> 1212;
1239 -> 1220;
1239 -> 1208;
1240 -> 1213;
1240 -> 1220;
1240 -> 1208;
1241 -> 1214;
1241 -> 1220;
1241 -> 1208;
1242 -> 1215;
1242 -> 1220;
1242 -> 1208;
1243 -> 1216;
1243 -> 1208;
1244 -> 1243;
1244 -> 1220;
1244 -> 1208;
1245 -> 1217;
1245 -> 1220;
1245 -> 1208;
1246 -> 1218;
1246 -> 1220;
1246 -> 1208;
1247 -> 1219;
1247 -> 1220;
1247 -> 1208;
1248 -> 1201;
1248 -> 1176;
1249 -> 1248;
1249 -> 1;
1250 -> 214;
1250 -> 1;
1251 -> 1;
1252 -> 214;
1252 -> 1251;
1253 -> 1249;
1253 -> 1251;
1254 -> 1253;
1254 -> 1236;
1254 -> 1251;
1255 -> 1253;
1255 -> 1237;
1255 -> 1251;
1256 -> 1253;
1256 -> 1238;
1256 -> 1251;
1257 -> 1252;
1257 -> 1251;
1258 -> 1253;
1258 -> 1240;
1258 -> 1251;
1259 -> 1253;
1259 -> 1241;
1259 -> 1251;
1260 -> 1251;
1261 -> 1253;
1261 -> 1244;
1261 -> 1251;
1262 -> 1253;
1262 -> 1245;
1262 -> 1251;
1263 -> 1253;
1263 -> 1246;
1263 -> 1251;
1264 -> 1253;
1264 -> 1247;
1264 -> 1251;
1265 -> 1251;
1266 -> 1254;
1266 -> 1265;
1267 -> 1255;
1267 -> 1265;
1268 -> 1256;
1268 -> 1265;
1269 -> 1257;
1269 -> 1265;
1270 -> 1258;
1270 -> 1265;
1271 -> 1259;
1271 -> 1265;
1272 -> 1260;
1272 -> 1265;
1273 -> 1261;
1273 -> 1265;
1274 -> 1262;
1274 -> 1265;
1275 -> 1263;
1275 -> 1265;
1276 -> 1264;
1276 -> 1265;
1277 -> 1260;
1277 -> 1265;
1278 -> 1277;
1278 -> 1265;
1279 -> 1277;
1279 -> 1265;
1280 -> 1277;
1280 -> 1265;
1281 -> 1277;
1281 -> 1265;
1282 -> 1277;
1282 -> 1265;
1283 -> 1277;
1283 -> 1265;
1284 -> 1277;
1284 -> 1265;
1285 -> 1277;
1285 -> 1265;
1286 -> 1277;
1286 -> 1265;
1287 -> 1277;
1287 -> 1265;
1288 -> 1277;
1288 -> 1265;
1289 -> 1277;
1289 -> 1265;
1290 -> 1277;
1290 -> 1265;
1291 -> 1277;
1291 -> 1265;
1292 -> 1277;
1292 -> 1265;
1293 -> 1269;
1293 -> 1277;
1293 -> 1265;
1294 -> 1272;
1294 -> 1277;
1294 -> 1265;
1295 -> 1260;
1295 -> 1;
1296 -> 1;
1297 -> 571;
1297 -> 1296;
1298 -> 214;
1298 -> 1296;
1299 -> 214;
1299 -> 1296;
1300 -> 214;
1300 -> 1296;
1301 -> 214;
1301 -> 1296;
1302 -> 214;
1302 -> 1296;
1303 -> 214;
1303 -> 1296;
1304 -> 1297;
1304 -> 1296;
1305 -> 1298;
1305 -> 1296;
1306 -> 1299;
1306 -> 1296;
1307 -> 1300;
1307 -> 1296;
1308 -> 1301;
1308 -> 1296;
1309 -> 1302;
1309 -> 1296;
1310 -> 1303;
1310 -> 1296;
1311 -> 1296;
1312 -> 1304;
1312 -> 1311;
1313 -> 1305;
1313 -> 1311;
1314 -> 1306;
1314 -> 1311;
1315 -> 1307;
1315 -> 1311;
1316 -> 1308;
1316 -> 1311;
1317 -> 1309;
1317 -> 1311;
1318 -> 1310;
1318 -> 1311;
1319 -> 1312;
1319 -> 1311;
1320 -> 1312;
1320 -> 1311;
1321 -> 1311;
1322 -> 1313;
1322 -> 1311;
1323 -> 1314;
1323 -> 1311;
1324 -> 1315;
1324 -> 1311;
1325 -> 1316;
1325 -> 1311;
1326 -> 1317;
1326 -> 1311;
1327 -> 1318;
1327 -> 1311;
1328 -> 1311;
1329 -> 1320;
1329 -> 1328;
1330 -> 1321;
1330 -> 1328;
1331 -> 1322;
1331 -> 1328;
1332 -> 1323;
1332 -> 1328;
1333 -> 1324;
1333 -> 1328;
1334 -> 1325;
1334 -> 1328;
1335 -> 1326;
1335 -> 1328;
1336 -> 1320;
1336 -> 1328;
1337 -> 1327;
1337 -> 1328;
1338 -> 1321;
1338 -> 1328;
1339 -> 1321;
1339 -> 1328;
1340 -> 1321;
1340 -> 1328;
1341 -> 1340;
1341 -> 1328;
1342 -> 1340;
1342 -> 1328;
1343 -> 1340;
1343 -> 1328;
1344 -> 1340;
1344 -> 1328;
1345 -> 1340;
1345 -> 1328;
1346 -> 1340;
1346 -> 1328;
1347 -> 1340;
1347 -> 1328;
1348 -> 1340;
1348 -> 1328;
1349 -> 1340;
1349 -> 1328;
1350 -> 1340;
1350 -> 1328;
1351 -> 1340;
1351 -> 1328;
1352 -> 1340;
1352 -> 1328;
1353 -> 1340;
1353 -> 1328;
1354 -> 1340;
1354 -> 1328;
1355 -> 1340;
1355 -> 1328;
1356 -> 1329;
1356 -> 1340;
1356 -> 1328;
1357 -> 1330;
1357 -> 1340;
1357 -> 1328;
1358 -> 1331;
1358 -> 1340;
1358 -> 1328;
1359 -> 1332;
1359 -> 1340;
1359 -> 1328;
1360 -> 1333;
1360 -> 1340;
1360 -> 1328;
1361 -> 1334;
1361 -> 1340;
1361 -> 1328;
1362 -> 1335;
1362 -> 1340;
1362 -> 1328;
1363 -> 1336;
1363 -> 1328;
1364 -> 1363;
1364 -> 1340;
1364 -> 1328;
1365 -> 1337;
1365 -> 1340;
1365 -> 1328;
1366 -> 1338;
1366 -> 1340;
1366 -> 1328;
1367 -> 1339;
1367 -> 1340;
1367 -> 1328;
1368 -> 1321;
1368 -> 1296;
1369 -> 1368;
1369 -> 1;
1370 -> 214;
1370 -> 1;
1371 -> 1;
1372 -> 214;
1372 -> 1371;
1373 -> 1369;
1373 -> 1371;
1374 -> 1373;
1374 -> 1356;
1374 -> 1371;
1375 -> 1373;
1375 -> 1357;
1375 -> 1371;
1376 -> 1373;
1376 -> 1358;
1376 -> 1371;
1377 -> 1372;
1377 -> 1371;
1378 -> 1373;
1378 -> 1360;
1378 -> 1371;
1379 -> 1373;
1379 -> 1361;
1379 -> 1371;
1380 -> 1371;
1381 -> 1373;
1381 -> 1364;
1381 -> 1371;
1382 -> 1373;
1382 -> 1365;
1382 -> 1371;
1383 -> 1373;
1383 -> 1366;
1383 -> 1371;
1384 -> 1373;
1384 -> 1367;
1384 -> 1371;
1385 -> 1371;
1386 -> 1374;
1386 -> 1385;
1387 -> 1375;
1387 -> 1385;
1388 -> 1376;
1388 -> 1385;
1389 -> 1377;
1389 -> 1385;
1390 -> 1378;
1390 -> 1385;
1391 -> 1379;
1391 -> 1385;
1392 -> 1380;
1392 -> 1385;
1393 -> 1381;
1393 -> 1385;
1394 -> 1382;
1394 -> 1385;
1395 -> 1383;
1395 -> 1385;
1396 -> 1384;
1396 -> 1385;
1397 -> 1380;
1397 -> 1385;
1398 -> 1397;
1398 -> 1385;
1399 -> 1397;
1399 -> 1385;
1400 -> 1397;
1400 -> 1385;
1401 -> 1397;
1401 -> 1385;
1402 -> 1397;
1402 -> 1385;
1403 -> 1397;
1403 -> 1385;
1404 -> 1397;
1404 -> 1385;
1405 -> 1397;
1405 -> 1385;
1406 -> 1397;
1406 -> 1385;
1407 -> 1397;
1407 -> 1385;
1408 -> 1397;
1408 -> 1385;
1409 -> 1397;
1409 -> 1385;
1410 -> 1397;
1410 -> 1385;
1411 -> 1397;
1411 -> 1385;
1412 -> 1397;
1412 -> 1385;
1413 -> 1389;
1413 -> 1397;
1413 -> 1385;
1414 -> 1392;
1414 -> 1397;
1414 -> 1385;
1415 -> 1380;
1415 -> 1;
1416 -> 1;
1417 -> 571;
1417 -> 1416;
1418 -> 214;
1418 -> 1416;
1419 -> 214;
1419 -> 1416;
1420 -> 214;
1420 -> 1416;
1421 -> 214;
1421 -> 1416;
1422 -> 214;
1422 -> 1416;
1423 -> 214;
1423 -> 1416;
1424 -> 1417;
1424 -> 1416;
1425 -> 1418;
1425 -> 1416;
1426 -> 1419;
1426 -> 1416;
1427 -> 1420;
1427 -> 1416;
1428 -> 1421;
1428 -> 1416;
1429 -> 1422;
1429 -> 1416;
1430 -> 1423;
1430 -> 1416;
1431 -> 1416;
1432 -> 1424;
1432 -> 1431;
1433 -> 1425;
1433 -> 1431;
1434 -> 1426;
1434 -> 1431;
1435 -> 1427;
1435 -> 1431;
1436 -> 1428;
1436 -> 1431;
1437 -> 1429;
1437 -> 1431;
1438 -> 1430;
1438 -> 1431;
1439 -> 1432;
1439 -> 1431;
1440 -> 1432;
1440 -> 1431;
1441 -> 1431;
1442 -> 1433;
1442 -> 1431;
1443 -> 1434;
1443 -> 1431;
1444 -> 1435;
1444 -> 1431;
1445 -> 1436;
1445 -> 1431;
1446 -> 1437;
1446 -> 1431;
1447 -> 1438;
1447 -> 1431;
1448 -> 1431;
1449 -> 1440;
1449 -> 1448;
1450 -> 1441;
1450 -> 1448;
1451 -> 1442;
1451 -> 1448;
1452 -> 1443;
1452 -> 1448;
1453 -> 1444;
1453 -> 1448;
1454 -> 1445;
1454 -> 1448;
1455 -> 1446;
1455 -> 1448;
1456 -> 1440;
1456 -> 1448;
1457 -> 1447;
1457 -> 1448;
1458 -> 1441;
1458 -> 1448;
1459 -> 1441;
1459 -> 1448;
1460 -> 1441;
1460 -> 1448;
1461 -> 1460;
1461 -> 1448;
1462 -> 1460;
1462 -> 1448;
1463 -> 1460;
1463 -> 1448;
1464 -> 1460;
1464 -> 1448;
1465 -> 1460;
1465 -> 1448;
1466 -> 1460;
1466 -> 1448;
1467 -> 1460;
1467 -> 1448;
1468 -> 1460;
1468 -> 1448;
1469 -> 1460;
1469 -> 1448;
1470 -> 1460;
1470 -> 1448;
1471 -> 1460;
1471 -> 1448;
1472 -> 1460;
1472 -> 1448;
1473 -> 1460;
1473 -> 1448;
1474 -> 1460;
1474 -> 1448;
1475 -> 1460;
1475 -> 1448;
1476 -> 1449;
1476 -> 1460;
1476 -> 1448;
1477 -> 1450;
1477 -> 1460;
1477 -> 1448;
1478 -> 1451;
1478 -> 1460;
1478 -> 1448;
1479 -> 1452;
1479 -> 1460;
1479 -> 1448;
1480 -> 1453;
1480 -> 1460;
1480 -> 1448;
1481 -> 1454;
1481 -> 1460;
1481 -> 1448;
1482 -> 1455;
1482 -> 1460;
1482 -> 1448;
1483 -> 1456;
1483 -> 1448;
1484 -> 1483;
1484 -> 1460;
1484 -> 1448;
1485 -> 1457;
1485 -> 1460;
1485 -> 1448;
1486 -> 1458;
1486 -> 1460;
1486 -> 1448;
1487 -> 1459;
1487 -> 1460;
1487 -> 1448;
1488 -> 1441;
1488 -> 1416;
1489 -> 1488;
1489 -> 1;
1490 -> 214;
1490 -> 1;
1491 -> 1;
1492 -> 214;
1492 -> 1491;
1493 -> 1489;
1493 -> 1491;
1494 -> 1493;
1494 -> 1476;
1494 -> 1491;
1495 -> 1493;
1495 -> 1477;
1495 -> 1491;
1496 -> 1493;
1496 -> 1478;
1496 -> 1491;
1497 -> 1492;
1497 -> 1491;
1498 -> 1493;
1498 -> 1480;
1498 -> 1491;
1499 -> 1493;
1499 -> 1481;
1499 -> 1491;
1500 -> 1491;
1501 -> 1493;
1501 -> 1484;
1501 -> 1491;
1502 -> 1493;
1502 -> 1485;
1502 -> 1491;
1503 -> 1493;
1503 -> 1486;
1503 -> 1491;
1504 -> 1493;
1504 -> 1487;
1504 -> 1491;
1505 -> 1491;
1506 -> 1494;
1506 -> 1505;
1507 -> 1495;
1507 -> 1505;
1508 -> 1496;
1508 -> 1505;
1509 -> 1497;
1509 -> 1505;
1510 -> 1498;
1510 -> 1505;
1511 -> 1499;
1511 -> 1505;
1512 -> 1500;
1512 -> 1505;
1513 -> 1501;
1513 -> 1505;
1514 -> 1502;
1514 -> 1505;
1515 -> 1503;
1515 -> 1505;
1516 -> 1504;
1516 -> 1505;
1517 -> 1500;
1517 -> 1505;
1518 -> 1517;
1518 -> 1505;
1519 -> 1517;
1519 -> 1505;
1520 -> 1517;
1520 -> 1505;
1521 -> 1517;
1521 -> 1505;
1522 -> 1517;
1522 -> 1505;
1523 -> 1517;
1523 -> 1505;
1524 -> 1517;
1524 -> 1505;
1525 -> 1517;
1525 -> 1505;
1526 -> 1517;
1526 -> 1505;
1527 -> 1517;
1527 -> 1505;
1528 -> 1517;
1528 -> 1505;
1529 -> 1517;
1529 -> 1505;
1530 -> 1517;
1530 -> 1505;
1531 -> 1517;
1531 -> 1505;
1532 -> 1517;
1532 -> 1505;
1533 -> 1509;
1533 -> 1517;
1533 -> 1505;
1534 -> 1512;
1534 -> 1517;
1534 -> 1505;
1535 -> 1500;
1535 -> 1;
1536 -> 1;
1537 -> 571;
1537 -> 1536;
1538 -> 214;
1538 -> 1536;
1539 -> 214;
1539 -> 1536;
1540 -> 214;
1540 -> 1536;
1541 -> 214;
1541 -> 1536;
1542 -> 214;
1542 -> 1536;
1543 -> 214;
1543 -> 1536;
1544 -> 1537;
1544 -> 1536;
1545 -> 1538;
1545 -> 1536;
1546 -> 1539;
1546 -> 1536;
1547 -> 1540;
1547 -> 1536;
1548 -> 1541;
1548 -> 1536;
1549 -> 1542;
1549 -> 1536;
1550 -> 1543;
1550 -> 1536;
1551 -> 1536;
1552 -> 1544;
1552 -> 1551;
1553 -> 1545;
1553 -> 1551;
1554 -> 1546;
1554 -> 1551;
1555 -> 1547;
1555 -> 1551;
1556 -> 1548;
1556 -> 1551;
1557 -> 1549;
1557 -> 1551;
1558 -> 1550;
1558 -> 1551;
1559 -> 1552;
1559 -> 1551;
1560 -> 1552;
1560 -> 1551;
1561 -> 1551;
1562 -> 1553;
1562 -> 1551;
1563 -> 1554;
1563 -> 1551;
1564 -> 1555;
1564 -> 1551;
1565 -> 1556;
1565 -> 1551;
1566 -> 1557;
1566 -> 1551;
1567 -> 1558;
1567 -> 1551;
1568 -> 1551;
1569 -> 1560;
1569 -> 1568;
1570 -> 1561;
1570 -> 1568;
1571 -> 1562;
1571 -> 1568;
1572 -> 1563;
1572 -> 1568;
1573 -> 1564;
1573 -> 1568;
1574 -> 1565;
1574 -> 1568;
1575 -> 1566;
1575 -> 1568;
1576 -> 1560;
1576 -> 1568;
1577 -> 1567;
1577 -> 1568;
1578 -> 1561;
1578 -> 1568;
1579 -> 1561;
1579 -> 1568;
1580 -> 1561;
1580 -> 1568;
1581 -> 1580;
1581 -> 1568;
1582 -> 1580;
1582 -> 1568;
1583 -> 1580;
1583 -> 1568;
1584 -> 1580;
1584 -> 1568;
1585 -> 1580;
1585 -> 1568;
1586 -> 1580;
1586 -> 1568;
1587 -> 1580;
1587 -> 1568;
1588 -> 1580;
1588 -> 1568;
1589 -> 1580;
1589 -> 1568;
1590 -> 1580;
1590 -> 1568;
1591 -> 1580;
1591 -> 1568;
1592 -> 1580;
1592 -> 1568;
1593 -> 1580;
1593 -> 1568;
1594 -> 1580;
1594 -> 1568;
1595 -> 1580;
1595 -> 1568;
1596 -> 1569;
1596 -> 1580;
1596 -> 1568;
1597 -> 1570;
1597 -> 1580;
1597 -> 1568;
1598 -> 1571;
1598 -> 1580;
1598 -> 1568;
1599 -> 1572;
1599 -> 1580;
1599 -> 1568;
1600 -> 1573;
1600 -> 1580;
1600 -> 1568;
1601 -> 1574;
1601 -> 1580;
1601 -> 1568;
1602 -> 1575;
1602 -> 1580;
1602 -> 1568;
1603 -> 1576;
1603 -> 1568;
1604 -> 1603;
1604 -> 1580;
1604 -> 1568;
1605 -> 1577;
1605 -> 1580;
1605 -> 1568;
1606 -> 1578;
1606 -> 1580;
1606 -> 1568;
1607 -> 1579;
1607 -> 1580;
1607 -> 1568;
1608 -> 1561;
1608 -> 1536;
1609 -> 1608;
1609 -> 1;
1610 -> 214;
1610 -> 1;
1611 -> 1;
1612 -> 214;
1612 -> 1611;
1613 -> 1609;
1613 -> 1611;
1614 -> 1613;
1614 -> 1596;
1614 -> 1611;
1615 -> 1613;
1615 -> 1597;
1615 -> 1611;
1616 -> 1613;
1616 -> 1598;
1616 -> 1611;
1617 -> 1612;
1617 -> 1611;
1618 -> 1613;
1618 -> 1600;
1618 -> 1611;
1619 -> 1613;
1619 -> 1601;
1619 -> 1611;
1620 -> 1611;
1621 -> 1613;
1621 -> 1604;
1621 -> 1611;
1622 -> 1613;
1622 -> 1605;
1622 -> 1611;
1623 -> 1613;
1623 -> 1606;
1623 -> 1611;
1624 -> 1613;
1624 -> 1607;
1624 -> 1611;
1625 -> 1611;
1626 -> 1614;
1626 -> 1625;
1627 -> 1615;
1627 -> 1625;
1628 -> 1616;
1628 -> 1625;
1629 -> 1617;
1629 -> 1625;
1630 -> 1618;
1630 -> 1625;
1631 -> 1619;
1631 -> 1625;
1632 -> 1620;
1632 -> 1625;
1633 -> 1621;
1633 -> 1625;
1634 -> 1622;
1634 -> 1625;
1635 -> 1623;
1635 -> 1625;
1636 -> 1624;
1636 -> 1625;
1637 -> 1620;
1637 -> 1625;
1638 -> 1637;
1638 -> 1625;
1639 -> 1637;
1639 -> 1625;
1640 -> 1637;
1640 -> 1625;
1641 -> 1637;
1641 -> 1625;
1642 -> 1637;
1642 -> 1625;
1643 -> 1637;
1643 -> 1625;
1644 -> 1637;
1644 -> 1625;
1645 -> 1637;
1645 -> 1625;
1646 -> 1637;
1646 -> 1625;
1647 -> 1637;
1647 -> 1625;
1648 -> 1637;
1648 -> 1625;
1649 -> 1637;
1649 -> 1625;
1650 -> 1637;
1650 -> 1625;
1651 -> 1637;
1651 -> 1625;
1652 -> 1637;
1652 -> 1625;
1653 -> 1629;
1653 -> 1637;
1653 -> 1625;
1654 -> 1632;
1654 -> 1637;
1654 -> 1625;
1655 -> 1620;
1655 -> 1;
1656 -> 1;
1657 -> 571;
1657 -> 1656;
1658 -> 214;
1658 -> 1656;
1659 -> 214;
1659 -> 1656;
1660 -> 214;
1660 -> 1656;
1661 -> 214;
1661 -> 1656;
1662 -> 214;
1662 -> 1656;
1663 -> 214;
1663 -> 1656;
1664 -> 1657;
1664 -> 1656;
1665 -> 1658;
1665 -> 1656;
1666 -> 1659;
1666 -> 1656;
1667 -> 1660;
1667 -> 1656;
1668 -> 1661;
1668 -> 1656;
1669 -> 1662;
1669 -> 1656;
1670 -> 1663;
1670 -> 1656;
1671 -> 1656;
1672 -> 1664;
1672 -> 1671;
1673 -> 1665;
1673 -> 1671;
1674 -> 1666;
1674 -> 1671;
1675 -> 1667;
1675 -> 1671;
1676 -> 1668;
1676 -> 1671;
1677 -> 1669;
1677 -> 1671;
1678 -> 1670;
1678 -> 1671;
1679 -> 1672;
1679 -> 1671;
1680 -> 1672;
1680 -> 1671;
1681 -> 1671;
1682 -> 1673;
1682 -> 1671;
1683 -> 1674;
1683 -> 1671;
1684 -> 1675;
1684 -> 1671;
1685 -> 1676;
1685 -> 1671;
1686 -> 1677;
1686 -> 1671;
1687 -> 1678;
1687 -> 1671;
1688 -> 1671;
1689 -> 1680;
1689 -> 1688;
1690 -> 1681;
1690 -> 1688;
1691 -> 1682;
1691 -> 1688;
1692 -> 1683;
1692 -> 1688;
1693 -> 1684;
1693 -> 1688;
1694 -> 1685;
1694 -> 1688;
1695 -> 1686;
1695 -> 1688;
1696 -> 1680;
1696 -> 1688;
1697 -> 1687;
1697 -> 1688;
1698 -> 1681;
1698 -> 1688;
1699 -> 1681;
1699 -> 1688;
1700 -> 1681;
1700 -> 1688;
1701 -> 1700;
1701 -> 1688;
1702 -> 1700;
1702 -> 1688;
1703 -> 1700;
1703 -> 1688;
1704 -> 1700;
1704 -> 1688;
1705 -> 1700;
1705 -> 1688;
1706 -> 1700;
1706 -> 1688;
1707 -> 1700;
1707 -> 1688;
1708 -> 1700;
1708 -> 1688;
1709 -> 1700;
1709 -> 1688;
1710 -> 1700;
1710 -> 1688;
1711 -> 1700;
1711 -> 1688;
1712 -> 1700;
1712 -> 1688;
1713 -> 1700;
1713 -> 1688;
1714 -> 1700;
1714 -> 1688;
1715 -> 1700;
1715 -> 1688;
1716 -> 1689;
1716 -> 1700;
1716 -> 1688;
1717 -> 1690;
1717 -> 1700;
1717 -> 1688;
1718 -> 1691;
1718 -> 1700;
1718 -> 1688;
1719 -> 1692;
1719 -> 1700;
1719 -> 1688;
1720 -> 1693;
1720 -> 1700;
1720 -> 1688;
1721 -> 1694;
1721 -> 1700;
1721 -> 1688;
1722 -> 1695;
1722 -> 1700;
1722 -> 1688;
1723 -> 1696;
1723 -> 1688;
1724 -> 1723;
1724 -> 1700;
1724 -> 1688;
1725 -> 1697;
1725 -> 1700;
1725 -> 1688;
1726 -> 1698;
1726 -> 1700;
1726 -> 1688;
1727 -> 1699;
1727 -> 1700;
1727 -> 1688;
1728 -> 1681;
1728 -> 1656;
1729 -> 1728;
1729 -> 1;
1730 -> 214;
1730 -> 1;
1731 -> 1;
1732 -> 214;
1732 -> 1731;
1733 -> 1729;
1733 -> 1731;
1734 -> 1733;
1734 -> 1716;
1734 -> 1731;
1735 -> 1733;
1735 -> 1717;
1735 -> 1731;
1736 -> 1733;
1736 -> 1718;
1736 -> 1731;
1737 -> 1732;
1737 -> 1731;
1738 -> 1733;
1738 -> 1720;
1738 -> 1731;
1739 -> 1733;
1739 -> 1721;
1739 -> 1731;
1740 -> 1731;
1741 -> 1733;
1741 -> 1724;
1741 -> 1731;
1742 -> 1733;
1742 -> 1725;
1742 -> 1731;
1743 -> 1733;
1743 -> 1726;
1743 -> 1731;
1744 -> 1733;
1744 -> 1727;
1744 -> 1731;
1745 -> 1731;
1746 -> 1734;
1746 -> 1745;
1747 -> 1735;
1747 -> 1745;
1748 -> 1736;
1748 -> 1745;
1749 -> 1737;
1749 -> 1745;
1750 -> 1738;
1750 -> 1745;
1751 -> 1739;
1751 -> 1745;
1752 -> 1740;
1752 -> 1745;
1753 -> 1741;
1753 -> 1745;
1754 -> 1742;
1754 -> 1745;
1755 -> 1743;
1755 -> 1745;
1756 -> 1744;
1756 -> 1745;
1757 -> 1740;
1757 -> 1745;
1758 -> 1757;
1758 -> 1745;
1759 -> 1757;
1759 -> 1745;
1760 -> 1757;
1760 -> 1745;
1761 -> 1757;
1761 -> 1745;
1762 -> 1757;
1762 -> 1745;
1763 -> 1757;
1763 -> 1745;
1764 -> 1757;
1764 -> 1745;
1765 -> 1757;
1765 -> 1745;
1766 -> 1757;
1766 -> 1745;
1767 -> 1757;
1767 -> 1745;
1768 -> 1757;
1768 -> 1745;
1769 -> 1757;
1769 -> 1745;
1770 -> 1757;
1770 -> 1745;
1771 -> 1757;
1771 -> 1745;
1772 -> 1757;
1772 -> 1745;
1773 -> 1749;
1773 -> 1757;
1773 -> 1745;
1774 -> 1752;
1774 -> 1757;
1774 -> 1745;
1775 -> 1740;
1775 -> 1;
1776 -> 1;
1777 -> 571;
1777 -> 1776;
1778 -> 214;
1778 -> 1776;
1779 -> 214;
1779 -> 1776;
1780 -> 214;
1780 -> 1776;
1781 -> 214;
1781 -> 1776;
1782 -> 214;
1782 -> 1776;
1783 -> 214;
1783 -> 1776;
1784 -> 1777;
1784 -> 1776;
1785 -> 1778;
1785 -> 1776;
1786 -> 1779;
1786 -> 1776;
1787 -> 1780;
1787 -> 1776;
1788 -> 1781;
1788 -> 1776;
1789 -> 1782;
1789 -> 1776;
1790 -> 1783;
1790 -> 1776;
1791 -> 1776;
1792 -> 1784;
1792 -> 1791;
1793 -> 1785;
1793 -> 1791;
1794 -> 1786;
1794 -> 1791;
1795 -> 1787;
1795 -> 1791;
1796 -> 1788;
1796 -> 1791;
1797 -> 1789;
1797 -> 1791;
1798 -> 1790;
1798 -> 1791;
1799 -> 1792;
1799 -> 1791;
1800 -> 1792;
1800 -> 1791;
1801 -> 1791;
1802 -> 1793;
1802 -> 1791;
1803 -> 1794;
1803 -> 1791;
1804 -> 1795;
1804 -> 1791;
1805 -> 1796;
1805 -> 1791;
1806 -> 1797;
1806 -> 1791;
1807 -> 1798;
1807 -> 1791;
1808 -> 1791;
1809 -> 1800;
1809 -> 1808;
1810 -> 1801;
1810 -> 1808;
1811 -> 1802;
1811 -> 1808;
1812 -> 1803;
1812 -> 1808;
1813 -> 1804;
1813 -> 1808;
1814 -> 1805;
1814 -> 1808;
1815 -> 1806;
1815 -> 1808;
1816 -> 1800;
1816 -> 1808;
1817 -> 1807;
1817 -> 1808;
1818 -> 1801;
1818 -> 1808;
1819 -> 1801;
1819 -> 1808;
1820 -> 1801;
1820 -> 1808;
1821 -> 1820;
1821 -> 1808;
1822 -> 1820;
1822 -> 1808;
1823 -> 1820;
1823 -> 1808;
1824 -> 1820;
1824 -> 1808;
1825 -> 1820;
1825 -> 1808;
1826 -> 1820;
1826 -> 1808;
1827 -> 1820;
1827 -> 1808;
1828 -> 1820;
1828 -> 1808;
1829 -> 1820;
1829 -> 1808;
1830 -> 1820;
1830 -> 1808;
1831 -> 1820;
1831 -> 1808;
1832 -> 1820;
1832 -> 1808;
1833 -> 1820;
1833 -> 1808;
1834 -> 1820;
1834 -> 1808;
1835 -> 1820;
1835 -> 1808;
1836 -> 1809;
1836 -> 1820;
1836 -> 1808;
1837 -> 1810;
1837 -> 1820;
1837 -> 1808;
1838 -> 1811;
1838 -> 1820;
1838 -> 1808;
1839 -> 1812;
1839 -> 1820;
1839 -> 1808;
1840 -> 1813;
1840 -> 1820;
1840 -> 1808;
1841 -> 1814;
1841 -> 1820;
1841 -> 1808;
1842 -> 1815;
1842 -> 1820;
1842 -> 1808;
1843 -> 1816;
1843 -> 1808;
1844 -> 1843;
1844 -> 1820;
1844 -> 1808;
1845 -> 1817;
1845 -> 1820;
1845 -> 1808;
1846 -> 1818;
1846 -> 1820;
1846 -> 1808;
1847 -> 1819;
1847 -> 1820;
1847 -> 1808;
1848 -> 1801;
1848 -> 1776;
1849 -> 1848;
1849 -> 1;
1850 -> 214;
1850 -> 1;
1851 -> 1;
1852 -> 214;
1852 -> 1851;
1853 -> 1849;
1853 -> 1851;
1854 -> 1853;
1854 -> 1836;
1854 -> 1851;
1855 -> 1853;
1855 -> 1837;
1855 -> 1851;
1856 -> 1853;
1856 -> 1838;
1856 -> 1851;
1857 -> 1852;
1857 -> 1851;
1858 -> 1853;
1858 -> 1840;
1858 -> 1851;
1859 -> 1853;
1859 -> 1841;
1859 -> 1851;
1860 -> 1851;
1861 -> 1853;
1861 -> 1844;
1861 -> 1851;
1862 -> 1853;
1862 -> 1845;
1862 -> 1851;
1863 -> 1853;
1863 -> 1846;
1863 -> 1851;
1864 -> 1853;
1864 -> 1847;
1864 -> 1851;
1865 -> 1851;
1866 -> 1854;
1866 -> 1865;
1867 -> 1855;
1867 -> 1865;
1868 -> 1856;
1868 -> 1865;
1869 -> 1857;
1869 -> 1865;
1870 -> 1858;
1870 -> 1865;
1871 -> 1859;
1871 -> 1865;
1872 -> 1860;
1872 -> 1865;
1873 -> 1861;
1873 -> 1865;
1874 -> 1862;
1874 -> 1865;
1875 -> 1863;
1875 -> 1865;
1876 -> 1864;
1876 -> 1865;
1877 -> 1860;
1877 -> 1865;
1878 -> 1877;
1878 -> 1865;
1879 -> 1877;
1879 -> 1865;
1880 -> 1877;
1880 -> 1865;
1881 -> 1877;
1881 -> 1865;
1882 -> 1877;
1882 -> 1865;
1883 -> 1877;
1883 -> 1865;
1884 -> 1877;
1884 -> 1865;
1885 -> 1877;
1885 -> 1865;
1886 -> 1877;
1886 -> 1865;
1887 -> 1877;
1887 -> 1865;
1888 -> 1877;
1888 -> 1865;
1889 -> 1877;
1889 -> 1865;
1890 -> 1877;
1890 -> 1865;
1891 -> 1877;
1891 -> 1865;
1892 -> 1877;
1892 -> 1865;
1893 -> 1869;
1893 -> 1877;
1893 -> 1865;
1894 -> 1872;
1894 -> 1877;
1894 -> 1865;
1895 -> 1860;
1895 -> 1;
1896 -> 1;
1897 -> 571;
1897 -> 1896;
1898 -> 214;
1898 -> 1896;
1899 -> 214;
1899 -> 1896;
1900 -> 214;
1900 -> 1896;
1901 -> 214;
1901 -> 1896;
1902 -> 214;
1902 -> 1896;
1903 -> 214;
1903 -> 1896;
1904 -> 1897;
1904 -> 1896;
1905 -> 1898;
1905 -> 1896;
1906 -> 1899;
1906 -> 1896;
1907 -> 1900;
1907 -> 1896;
1908 -> 1901;
1908 -> 1896;
1909 -> 1902;
1909 -> 1896;
1910 -> 1903;
1910 -> 1896;
1911 -> 1896;
1912 -> 1904;
1912 -> 1911;
1913 -> 1905;
1913 -> 1911;
1914 -> 1906;
1914 -> 1911;
1915 -> 1907;
1915 -> 1911;
1916 -> 1908;
1916 -> 1911;
1917 -> 1909;
1917 -> 1911;
1918 -> 1910;
1918 -> 1911;
1919 -> 1912;
1919 -> 1911;
1920 -> 1912;
1920 -> 1911;
1921 -> 1911;
1922 -> 1913;
1922 -> 1911;
1923 -> 1914;
1923 -> 1911;
1924 -> 1915;
1924 -> 1911;
1925 -> 1916;
1925 -> 1911;
1926 -> 1917;
1926 -> 1911;
1927 -> 1918;
1927 -> 1911;
1928 -> 1911;
1929 -> 1920;
1929 -> 1928;
1930 -> 1921;
1930 -> 1928;
1931 -> 1922;
1931 -> 1928;
1932 -> 1923;
1932 -> 1928;
1933 -> 1924;
1933 -> 1928;
1934 -> 1925;
1934 -> 1928;
1935 -> 1926;
1935 -> 1928;
1936 -> 1920;
1936 -> 1928;
1937 -> 1927;
1937 -> 1928;
1938 -> 1921;
1938 -> 1928;
1939 -> 1921;
1939 -> 1928;
1940 -> 1921;
1940 -> 1928;
1941 -> 1940;
1941 -> 1928;
1942 -> 1940;
1942 -> 1928;
1943 -> 1940;
1943 -> 1928;
1944 -> 1940;
1944 -> 1928;
1945 -> 1940;
1945 -> 1928;
1946 -> 1940;
1946 -> 1928;
1947 -> 1940;
1947 -> 1928;
1948 -> 1940;
1948 -> 1928;
1949 -> 1940;
1949 -> 1928;
1950 -> 1940;
1950 -> 1928;
1951 -> 1940;
1951 -> 1928;
1952 -> 1940;
1952 -> 1928;
1953 -> 1940;
1953 -> 1928;
1954 -> 1940;
1954 -> 1928;
1955 -> 1940;
1955 -> 1928;
1956 -> 1929;
1956 -> 1940;
1956 -> 1928;
1957 -> 1930;
1957 -> 1940;
1957 -> 1928;
1958 -> 1931;
1958 -> 1940;
1958 -> 1928;
1959 -> 1932;
1959 -> 1940;
1959 -> 1928;
1960 -> 1933;
1960 -> 1940;
1960 -> 1928;
1961 -> 1934;
1961 -> 1940;
1961 -> 1928;
1962 -> 1935;
1962 -> 1940;
1962 -> 1928;
1963 -> 1936;
1963 -> 1928;
1964 -> 1963;
1964 -> 1940;
1964 -> 1928;
1965 -> 1937;
1965 -> 1940;
1965 -> 1928;
1966 -> 1938;
1966 -> 1940;
1966 -> 1928;
1967 -> 1939;
1967 -> 1940;
1967 -> 1928;
1968 -> 1921;
1968 -> 1896;
1969 -> 1968;
1969 -> 1;
1970 -> 1;
1971 -> 571;
1971 -> 1970;
1972 -> 214;
1972 -> 1970;
1973 -> 214;
1973 -> 1970;
1974 -> 214;
1974 -> 1970;
1975 -> 214;
1975 -> 1970;
1976 -> 214;
1976 -> 1970;
1977 -> 214;
1977 -> 1970;
1978 -> 1971;
1978 -> 1970;
1979 -> 1972;
1979 -> 1970;
1980 -> 1973;
1980 -> 1970;
1981 -> 1974;
1981 -> 1970;
1982 -> 1975;
1982 -> 1970;
1983 -> 1976;
1983 -> 1970;
1984 -> 1977;
1984 -> 1970;
1985 -> 1970;
1986 -> 1978;
1986 -> 1985;
1987 -> 1979;
1987 -> 1985;
1988 -> 1980;
1988 -> 1985;
1989 -> 1981;
1989 -> 1985;
1990 -> 1982;
1990 -> 1985;
1991 -> 1983;
1991 -> 1985;
1992 -> 1984;
1992 -> 1985;
1993 -> 1986;
1993 -> 1985;
1994 -> 1986;
1994 -> 1985;
1995 -> 1985;
1996 -> 1987;
1996 -> 1985;
1997 -> 1988;
1997 -> 1985;
1998 -> 1989;
1998 -> 1985;
1999 -> 1990;
1999 -> 1985;
2000 -> 1991;
2000 -> 1985;
2001 -> 1992;
2001 -> 1985;
2002 -> 1985;
2003 -> 1994;
2003 -> 2002;
2004 -> 1995;
2004 -> 2002;
2005 -> 1996;
2005 -> 2002;
2006 -> 1997;
2006 -> 2002;
2007 -> 1998;
2007 -> 2002;
2008 -> 1999;
2008 -> 2002;
2009 -> 2000;
2009 -> 2002;
2010 -> 1994;
2010 -> 2002;
2011 -> 2001;
2011 -> 2002;
2012 -> 1995;
2012 -> 2002;
2013 -> 1995;
2013 -> 2002;
2014 -> 1995;
2014 -> 2002;
2015 -> 2014;
2015 -> 2002;
2016 -> 2014;
2016 -> 2002;
2017 -> 2014;
2017 -> 2002;
2018 -> 2014;
2018 -> 2002;
2019 -> 2014;
2019 -> 2002;
2020 -> 2014;
2020 -> 2002;
2021 -> 2014;
2021 -> 2002;
2022 -> 2014;
2022 -> 2002;
2023 -> 2014;
2023 -> 2002;
2024 -> 2014;
2024 -> 2002;
2025 -> 2014;
2025 -> 2002;
2026 -> 2014;
2026 -> 2002;
2027 -> 2014;
2027 -> 2002;
2028 -> 2014;
2028 -> 2002;
2029 -> 2014;
2029 -> 2002;
2030 -> 2003;
2030 -> 2014;
2030 -> 2002;
2031 -> 2004;
2031 -> 2014;
2031 -> 2002;
2032 -> 2005;
2032 -> 2014;
2032 -> 2002;
2033 -> 2006;
2033 -> 2014;
2033 -> 2002;
2034 -> 2007;
2034 -> 2014;
2034 -> 2002;
2035 -> 2008;
2035 -> 2014;
2035 -> 2002;
2036 -> 2009;
2036 -> 2014;
2036 -> 2002;
2037 -> 2010;
2037 -> 2002;
2038 -> 2037;
2038 -> 2014;
2038 -> 2002;
2039 -> 2011;
2039 -> 2014;
2039 -> 2002;
2040 -> 2012;
2040 -> 2014;
2040 -> 2002;
2041 -> 2013;
2041 -> 2014;
2041 -> 2002;
2042 -> 1995;
2042 -> 1970;
2043 -> 2042;
2043 -> 1;
2044 -> 214;
2044 -> 1;
2045 -> 1;
2046 -> 214;
2046 -> 2045;
2047 -> 2043;
2047 -> 2045;
2048 -> 2047;
2048 -> 2030;
2048 -> 2045;
2049 -> 2047;
2049 -> 2031;
2049 -> 2045;
2050 -> 2047;
2050 -> 2032;
2050 -> 2045;
2051 -> 2046;
2051 -> 2045;
2052 -> 2047;
2052 -> 2034;
2052 -> 2045;
2053 -> 2047;
2053 -> 2035;
2053 -> 2045;
2054 -> 2045;
2055 -> 2047;
2055 -> 2038;
2055 -> 2045;
2056 -> 2047;
2056 -> 2039;
2056 -> 2045;
2057 -> 2047;
2057 -> 2040;
2057 -> 2045;
2058 -> 2047;
2058 -> 2041;
2058 -> 2045;
2059 -> 2045;
2060 -> 2048;
2060 -> 2059;
2061 -> 2049;
2061 -> 2059;
2062 -> 2050;
2062 -> 2059;
2063 -> 2051;
2063 -> 2059;
2064 -> 2052;
2064 -> 2059;
2065 -> 2053;
2065 -> 2059;
2066 -> 2054;
2066 -> 2059;
2067 -> 2055;
2067 -> 2059;
2068 -> 2056;
2068 -> 2059;
2069 -> 2057;
2069 -> 2059;
2070 -> 2058;
2070 -> 2059;
2071 -> 2054;
2071 -> 2059;
2072 -> 2071;
2072 -> 2059;
2073 -> 2071;
2073 -> 2059;
2074 -> 2071;
2074 -> 2059;
2075 -> 2071;
2075 -> 2059;
2076 -> 2071;
2076 -> 2059;
2077 -> 2071;
2077 -> 2059;
2078 -> 2071;
2078 -> 2059;
2079 -> 2071;
2079 -> 2059;
2080 -> 2071;
2080 -> 2059;
2081 -> 2071;
2081 -> 2059;
2082 -> 2071;
2082 -> 2059;
2083 -> 2071;
2083 -> 2059;
2084 -> 2071;
2084 -> 2059;
2085 -> 2071;
2085 -> 2059;
2086 -> 2071;
2086 -> 2059;
2087 -> 2063;
2087 -> 2071;
2087 -> 2059;
2088 -> 2066;
2088 -> 2071;
2088 -> 2059;
2089 -> 2054;
2089 -> 1;
2090 -> 1;
2091 -> 571;
2091 -> 2090;
2092 -> 214;
2092 -> 2090;
2093 -> 214;
2093 -> 2090;
2094 -> 214;
2094 -> 2090;
2095 -> 214;
2095 -> 2090;
2096 -> 214;
2096 -> 2090;
2097 -> 214;
2097 -> 2090;
2098 -> 2091;
2098 -> 2090;
2099 -> 2092;
2099 -> 2090;
2100 -> 2093;
2100 -> 2090;
2101 -> 2094;
2101 -> 2090;
2102 -> 2095;
2102 -> 2090;
2103 -> 2096;
2103 -> 2090;
2104 -> 2097;
2104 -> 2090;
2105 -> 2090;
2106 -> 2098;
2106 -> 2105;
2107 -> 2099;
2107 -> 2105;
2108 -> 2100;
2108 -> 2105;
2109 -> 2101;
2109 -> 2105;
2110 -> 2102;
2110 -> 2105;
2111 -> 2103;
2111 -> 2105;
2112 -> 2104;
2112 -> 2105;
2113 -> 2106;
2113 -> 2105;
2114 -> 2106;
2114 -> 2105;
2115 -> 2105;
2116 -> 2107;
2116 -> 2105;
2117 -> 2108;
2117 -> 2105;
2118 -> 2109;
2118 -> 2105;
2119 -> 2110;
2119 -> 2105;
2120 -> 2111;
2120 -> 2105;
2121 -> 2112;
2121 -> 2105;
2122 -> 2105;
2123 -> 2114;
2123 -> 2122;
2124 -> 2115;
2124 -> 2122;
2125 -> 2116;
2125 -> 2122;
2126 -> 2117;
2126 -> 2122;
2127 -> 2118;
2127 -> 2122;
2128 -> 2119;
2128 -> 2122;
2129 -> 2120;
2129 -> 2122;
2130 -> 2114;
2130 -> 2122;
2131 -> 2121;
2131 -> 2122;
2132 -> 2115;
2132 -> 2122;
2133 -> 2115;
2133 -> 2122;
2134 -> 2115;
2134 -> 2122;
2135 -> 2134;
2135 -> 2122;
2136 -> 2134;
2136 -> 2122;
2137 -> 2134;
2137 -> 2122;
2138 -> 2134;
2138 -> 2122;
2139 -> 2134;
2139 -> 2122;
2140 -> 2134;
2140 -> 2122;
2141 -> 2134;
2141 -> 2122;
2142 -> 2134;
2142 -> 2122;
2143 -> 2134;
2143 -> 2122;
2144 -> 2134;
2144 -> 2122;
2145 -> 2134;
2145 -> 2122;
2146 -> 2134;
2146 -> 2122;
2147 -> 2134;
2147 -> 2122;
2148 -> 2134;
2148 -> 2122;
2149 -> 2134;
2149 -> 2122;
2150 -> 2123;
2150 -> 2134;
2150 -> 2122;
2151 -> 2124;
2151 -> 2134;
2151 -> 2122;
2152 -> 2125;
2152 -> 2134;
2152 -> 2122;
2153 -> 2126;
2153 -> 2134;
2153 -> 2122;
2154 -> 2127;
2154 -> 2134;
2154 -> 2122;
2155 -> 2128;
2155 -> 2134;
2155 -> 2122;
2156 -> 2129;
2156 -> 2134;
2156 -> 2122;
2157 -> 2130;
2157 -> 2122;
2158 -> 2157;
2158 -> 2134;
2158 -> 2122;
2159 -> 2131;
2159 -> 2134;
2159 -> 2122;
2160 -> 2132;
2160 -> 2134;
2160 -> 2122;
2161 -> 2133;
2161 -> 2134;
2161 -> 2122;
2162 -> 2115;
2162 -> 2090;
2163 -> 2162;
2163 -> 1;
2164 -> 214;
2164 -> 1;
2165 -> 1;
2166 -> 214;
2166 -> 2165;
2167 -> 2163;
2167 -> 2165;
2168 -> 2167;
2168 -> 2150;
2168 -> 2165;
2169 -> 2167;
2169 -> 2151;
2169 -> 2165;
2170 -> 2167;
2170 -> 2152;
2170 -> 2165;
2171 -> 2166;
2171 -> 2165;
2172 -> 2167;
2172 -> 2154;
2172 -> 2165;
2173 -> 2167;
2173 -> 2155;
2173 -> 2165;
2174 -> 2165;
2175 -> 2167;
2175 -> 2158;
2175 -> 2165;
2176 -> 2167;
2176 -> 2159;
2176 -> 2165;
2177 -> 2167;
2177 -> 2160;
2177 -> 2165;
2178 -> 2167;
2178 -> 2161;
2178 -> 2165;
2179 -> 2165;
2180 -> 2168;
2180 -> 2179;
2181 -> 2169;
2181 -> 2179;
2182 -> 2170;
2182 -> 2179;
2183 -> 2171;
2183 -> 2179;
2184 -> 2172;
2184 -> 2179;
2185 -> 2173;
2185 -> 2179;
2186 -> 2174;
2186 -> 2179;
2187 -> 2175;
2187 -> 2179;
2188 -> 2176;
2188 -> 2179;
2189 -> 2177;
2189 -> 2179;
2190 -> 2178;
2190 -> 2179;
2191 -> 2174;
2191 -> 2179;
2192 -> 2191;
2192 -> 2179;
2193 -> 2191;
2193 -> 2179;
2194 -> 2191;
2194 -> 2179;
2195 -> 2191;
2195 -> 2179;
2196 -> 2191;
2196 -> 2179;
2197 -> 2191;
2197 -> 2179;
2198 -> 2191;
2198 -> 2179;
2199 -> 2191;
2199 -> 2179;
2200 -> 2191;
2200 -> 2179;
2201 -> 2191;
2201 -> 2179;
2202 -> 2191;
2202 -> 2179;
2203 -> 2191;
2203 -> 2179;
2204 -> 2191;
2204 -> 2179;
2205 -> 2191;
2205 -> 2179;
2206 -> 2191;
2206 -> 2179;
2207 -> 2183;
2207 -> 2191;
2207 -> 2179;
2208 -> 2186;
2208 -> 2191;
2208 -> 2179;
2209 -> 2174;
2209 -> 1;
2210 -> 1;
2211 -> 571;
2211 -> 2210;
2212 -> 214;
2212 -> 2210;
2213 -> 214;
2213 -> 2210;
2214 -> 214;
2214 -> 2210;
2215 -> 214;
2215 -> 2210;
2216 -> 214;
2216 -> 2210;
2217 -> 214;
2217 -> 2210;
2218 -> 2211;
2218 -> 2210;
2219 -> 2212;
2219 -> 2210;
2220 -> 2213;
2220 -> 2210;
2221 -> 2214;
2221 -> 2210;
2222 -> 2215;
2222 -> 2210;
2223 -> 2216;
2223 -> 2210;
2224 -> 2217;
2224 -> 2210;
2225 -> 2210;
2226 -> 2218;
2226 -> 2225;
2227 -> 2219;
2227 -> 2225;
2228 -> 2220;
2228 -> 2225;
2229 -> 2221;
2229 -> 2225;
2230 -> 2222;
2230 -> 2225;
2231 -> 2223;
2231 -> 2225;
2232 -> 2224;
2232 -> 2225;
2233 -> 2226;
2233 -> 2225;
2234 -> 2226;
2234 -> 2225;
2235 -> 2225;
2236 -> 2227;
2236 -> 2225;
2237 -> 2228;
2237 -> 2225;
2238 -> 2229;
2238 -> 2225;
2239 -> 2230;
2239 -> 2225;
2240 -> 2231;
2240 -> 2225;
2241 -> 2232;
2241 -> 2225;
2242 -> 2225;
2243 -> 2234;
2243 -> 2242;
2244 -> 2235;
2244 -> 2242;
2245 -> 2236;
2245 -> 2242;
2246 -> 2237;
2246 -> 2242;
2247 -> 2238;
2247 -> 2242;
2248 -> 2239;
2248 -> 2242;
2249 -> 2240;
2249 -> 2242;
2250 -> 2234;
2250 -> 2242;
2251 -> 2241;
2251 -> 2242;
2252 -> 2235;
2252 -> 2242;
2253 -> 2235;
2253 -> 2242;
2254 -> 2235;
2254 -> 2242;
2255 -> 2254;
2255 -> 2242;
2256 -> 2254;
2256 -> 2242;
2257 -> 2254;
2257 -> 2242;
2258 -> 2254;
2258 -> 2242;
2259 -> 2254;
2259 -> 2242;
2260 -> 2254;
2260 -> 2242;
2261 -> 2254;
2261 -> 2242;
2262 -> 2254;
2262 -> 2242;
2263 -> 2254;
2263 -> 2242;
2264 -> 2254;
2264 -> 2242;
2265 -> 2254;
2265 -> 2242;
2266 -> 2254;
2266 -> 2242;
2267 -> 2254;
2267 -> 2242;
2268 -> 2254;
2268 -> 2242;
2269 -> 2254;
2269 -> 2242;
2270 -> 2243;
2270 -> 2254;
2270 -> 2242;
2271 -> 2244;
2271 -> 2254;
2271 -> 2242;
2272 -> 2245;
2272 -> 2254;
2272 -> 2242;
2273 -> 2246;
2273 -> 2254;
2273 -> 2242;
2274 -> 2247;
2274 -> 2254;
2274 -> 2242;
2275 -> 2248;
2275 -> 2254;
2275 -> 2242;
2276 -> 2249;
2276 -> 2254;
2276 -> 2242;
2277 -> 2250;
2277 -> 2242;
2278 -> 2277;
2278 -> 2254;
2278 -> 2242;
2279 -> 2251;
2279 -> 2254;
2279 -> 2242;
2280 -> 2252;
2280 -> 2254;
2280 -> 2242;
2281 -> 2253;
2281 -> 2254;
2281 -> 2242;
2282 -> 2235;
2282 -> 2210;
2283 -> 2282;
2283 -> 1;
2284 -> 214;
2284 -> 1;
2285 -> 1;
2286 -> 214;
2286 -> 2285;
2287 -> 2283;
2287 -> 2285;
2288 -> 2287;
2288 -> 2270;
2288 -> 2285;
2289 -> 2287;
2289 -> 2271;
2289 -> 2285;
2290 -> 2287;
2290 -> 2272;
2290 -> 2285;
2291 -> 2286;
2291 -> 2285;
2292 -> 2287;
2292 -> 2274;
2292 -> 2285;
2293 -> 2287;
2293 -> 2275;
2293 -> 2285;
2294 -> 2285;
2295 -> 2287;
2295 -> 2278;
2295 -> 2285;
2296 -> 2287;
2296 -> 2279;
2296 -> 2285;
2297 -> 2287;
2297 -> 2280;
2297 -> 2285;
2298 -> 2287;
2298 -> 2281;
2298 -> 2285;
2299 -> 2285;
2300 -> 2288;
2300 -> 2299;
2301 -> 2289;
2301 -> 2299;
2302 -> 2290;
2302 -> 2299;
2303 -> 2291;
2303 -> 2299;
2304 -> 2292;
2304 -> 2299;
2305 -> 2293;
2305 -> 2299;
2306 -> 2294;
2306 -> 2299;
2307 -> 2295;
2307 -> 2299;
2308 -> 2296;
2308 -> 2299;
2309 -> 2297;
2309 -> 2299;
2310 -> 2298;
2310 -> 2299;
2311 -> 2294;
2311 -> 2299;
2312 -> 2311;
2312 -> 2299;
2313 -> 2311;
2313 -> 2299;
2314 -> 2311;
2314 -> 2299;
2315 -> 2311;
2315 -> 2299;
2316 -> 2311;
2316 -> 2299;
2317 -> 2311;
2317 -> 2299;
2318 -> 2311;
2318 -> 2299;
2319 -> 2311;
2319 -> 2299;
2320 -> 2311;
2320 -> 2299;
2321 -> 2311;
2321 -> 2299;
2322 -> 2311;
2322 -> 2299;
2323 -> 2311;
2323 -> 2299;
2324 -> 2311;
2324 -> 2299;
2325 -> 2311;
2325 -> 2299;
2326 -> 2311;
2326 -> 2299;
2327 -> 2303;
2327 -> 2311;
2327 -> 2299;
2328 -> 2306;
2328 -> 2311;
2328 -> 2299;
2329 -> 2294;
2329 -> 1;
2330 -> 1;
2331 -> 571;
2331 -> 2330;
2332 -> 214;
2332 -> 2330;
2333 -> 214;
2333 -> 2330;
2334 -> 214;
2334 -> 2330;
2335 -> 214;
2335 -> 2330;
2336 -> 214;
2336 -> 2330;
2337 -> 214;
2337 -> 2330;
2338 -> 2331;
2338 -> 2330;
2339 -> 2332;
2339 -> 2330;
2340 -> 2333;
2340 -> 2330;
2341 -> 2334;
2341 -> 2330;
2342 -> 2335;
2342 -> 2330;
2343 -> 2336;
2343 -> 2330;
2344 -> 2337;
2344 -> 2330;
2345 -> 2330;
2346 -> 2338;
2346 -> 2345;
2347 -> 2339;
2347 -> 2345;
2348 -> 2340;
2348 -> 2345;
2349 -> 2341;
2349 -> 2345;
2350 -> 2342;
2350 -> 2345;
2351 -> 2343;
2351 -> 2345;
2352 -> 2344;
2352 -> 2345;
2353 -> 2346;
2353 -> 2345;
2354 -> 2346;
2354 -> 2345;
2355 -> 2345;
2356 -> 2347;
2356 -> 2345;
2357 -> 2348;
2357 -> 2345;
2358 -> 2349;
2358 -> 2345;
2359 -> 2350;
2359 -> 2345;
2360 -> 2351;
2360 -> 2345;
2361 -> 2352;
2361 -> 2345;
2362 -> 2345;
2363 -> 2354;
2363 -> 2362;
2364 -> 2355;
2364 -> 2362;
2365 -> 2356;
2365 -> 2362;
2366 -> 2357;
2366 -> 2362;
2367 -> 2358;
2367 -> 2362;
2368 -> 2359;
2368 -> 2362;
2369 -> 2360;
2369 -> 2362;
2370 -> 2354;
2370 -> 2362;
2371 -> 2361;
2371 -> 2362;
2372 -> 2355;
2372 -> 2362;
2373 -> 2355;
2373 -> 2362;
2374 -> 2355;
2374 -> 2362;
2375 -> 2374;
2375 -> 2362;
2376 -> 2374;
2376 -> 2362;
2377 -> 2374;
2377 -> 2362;
2378 -> 2374;
2378 -> 2362;
2379 -> 2374;
2379 -> 2362;
2380 -> 2374;
2380 -> 2362;
2381 -> 2374;
2381 -> 2362;
2382 -> 2374;
2382 -> 2362;
2383 -> 2374;
2383 -> 2362;
2384 -> 2374;
2384 -> 2362;
2385 -> 2374;
2385 -> 2362;
2386 -> 2374;
2386 -> 2362;
2387 -> 2374;
2387 -> 2362;
2388 -> 2374;
2388 -> 2362;
2389 -> 2374;
2389 -> 2362;
2390 -> 2363;
2390 -> 2374;
2390 -> 2362;
2391 -> 2364;
2391 -> 2374;
2391 -> 2362;
2392 -> 2365;
2392 -> 2374;
2392 -> 2362;
2393 -> 2366;
2393 -> 2374;
2393 -> 2362;
2394 -> 2367;
2394 -> 2374;
2394 -> 2362;
2395 -> 2368;
2395 -> 2374;
2395 -> 2362;
2396 -> 2369;
2396 -> 2374;
2396 -> 2362;
2397 -> 2370;
2397 -> 2362;
2398 -> 2397;
2398 -> 2374;
2398 -> 2362;
2399 -> 2371;
2399 -> 2374;
2399 -> 2362;
2400 -> 2372;
2400 -> 2374;
2400 -> 2362;
2401 -> 2373;
2401 -> 2374;
2401 -> 2362;
2402 -> 2355;
2402 -> 2330;
2403 -> 2402;
2403 -> 1;
2404 -> 214;
2404 -> 1;
2405 -> 1;
2406 -> 214;
2406 -> 2405;
2407 -> 2403;
2407 -> 2405;
2408 -> 2407;
2408 -> 2390;
2408 -> 2405;
2409 -> 2407;
2409 -> 2391;
2409 -> 2405;
2410 -> 2407;
2410 -> 2392;
2410 -> 2405;
2411 -> 2406;
2411 -> 2405;
2412 -> 2407;
2412 -> 2394;
2412 -> 2405;
2413 -> 2407;
2413 -> 2395;
2413 -> 2405;
2414 -> 2405;
2415 -> 2407;
2415 -> 2398;
2415 -> 2405;
2416 -> 2407;
2416 -> 2399;
2416 -> 2405;
2417 -> 2407;
2417 -> 2400;
2417 -> 2405;
2418 -> 2407;
2418 -> 2401;
2418 -> 2405;
2419 -> 2405;
2420 -> 2408;
2420 -> 2419;
2421 -> 2409;
2421 -> 2419;
2422 -> 2410;
2422 -> 2419;
2423 -> 2411;
2423 -> 2419;
2424 -> 2412;
2424 -> 2419;
2425 -> 2413;
2425 -> 2419;
2426 -> 2414;
2426 -> 2419;
2427 -> 2415;
2427 -> 2419;
2428 -> 2416;
2428 -> 2419;
2429 -> 2417;
2429 -> 2419;
2430 -> 2418;
2430 -> 2419;
2431 -> 2414;
2431 -> 2419;
2432 -> 2431;
2432 -> 2419;
2433 -> 2431;
2433 -> 2419;
2434 -> 2431;
2434 -> 2419;
2435 -> 2431;
2435 -> 2419;
2436 -> 2431;
2436 -> 2419;
2437 -> 2431;
2437 -> 2419;
2438 -> 2431;
2438 -> 2419;
2439 -> 2431;
2439 -> 2419;
2440 -> 2431;
2440 -> 2419;
2441 -> 2431;
2441 -> 2419;
2442 -> 2431;
2442 -> 2419;
2443 -> 2431;
2443 -> 2419;
2444 -> 2431;
2444 -> 2419;
2445 -> 2431;
2445 -> 2419;
2446 -> 2431;
2446 -> 2419;
2447 -> 2423;
2447 -> 2431;
2447 -> 2419;
2448 -> 2426;
2448 -> 2431;
2448 -> 2419;
2449 -> 2414;
2449 -> 1;
2450 -> 1;
2451 -> 571;
2451 -> 2450;
2452 -> 214;
2452 -> 2450;
2453 -> 214;
2453 -> 2450;
2454 -> 214;
2454 -> 2450;
2455 -> 214;
2455 -> 2450;
2456 -> 214;
2456 -> 2450;
2457 -> 214;
2457 -> 2450;
2458 -> 2451;
2458 -> 2450;
2459 -> 2452;
2459 -> 2450;
2460 -> 2453;
2460 -> 2450;
2461 -> 2454;
2461 -> 2450;
2462 -> 2455;
2462 -> 2450;
2463 -> 2456;
2463 -> 2450;
2464 -> 2457;
2464 -> 2450;
2465 -> 2450;
2466 -> 2458;
2466 -> 2465;
2467 -> 2459;
2467 -> 2465;
2468 -> 2460;
2468 -> 2465;
2469 -> 2461;
2469 -> 2465;
2470 -> 2462;
2470 -> 2465;
2471 -> 2463;
2471 -> 2465;
2472 -> 2464;
2472 -> 2465;
2473 -> 2466;
2473 -> 2465;
2474 -> 2466;
2474 -> 2465;
2475 -> 2465;
2476 -> 2467;
2476 -> 2465;
2477 -> 2468;
2477 -> 2465;
2478 -> 2469;
2478 -> 2465;
2479 -> 2470;
2479 -> 2465;
2480 -> 2471;
2480 -> 2465;
2481 -> 2472;
2481 -> 2465;
2482 -> 2465;
2483 -> 2474;
2483 -> 2482;
2484 -> 2475;
2484 -> 2482;
2485 -> 2476;
2485 -> 2482;
2486 -> 2477;
2486 -> 2482;
2487 -> 2478;
2487 -> 2482;
2488 -> 2479;
2488 -> 2482;
2489 -> 2480;
2489 -> 2482;
2490 -> 2474;
2490 -> 2482;
2491 -> 2481;
2491 -> 2482;
2492 -> 2475;
2492 -> 2482;
2493 -> 2475;
2493 -> 2482;
2494 -> 2475;
2494 -> 2482;
2495 -> 2494;
2495 -> 2482;
2496 -> 2494;
2496 -> 2482;
2497 -> 2494;
2497 -> 2482;
2498 -> 2494;
2498 -> 2482;
2499 -> 2494;
2499 -> 2482;
2500 -> 2494;
2500 -> 2482;
2501 -> 2494;
2501 -> 2482;
2502 -> 2494;
2502 -> 2482;
2503 -> 2494;
2503 -> 2482;
2504 -> 2494;
2504 -> 2482;
2505 -> 2494;
2505 -> 2482;
2506 -> 2494;
2506 -> 2482;
2507 -> 2494;
2507 -> 2482;
2508 -> 2494;
2508 -> 2482;
2509 -> 2494;
2509 -> 2482;
2510 -> 2483;
2510 -> 2494;
2510 -> 2482;
2511 -> 2484;
2511 -> 2494;
2511 -> 2482;
2512 -> 2485;
2512 -> 2494;
2512 -> 2482;
2513 -> 2486;
2513 -> 2494;
2513 -> 2482;
2514 -> 2487;
2514 -> 2494;
2514 -> 2482;
2515 -> 2488;
2515 -> 2494;
2515 -> 2482;
2516 -> 2489;
2516 -> 2494;
2516 -> 2482;
2517 -> 2490;
2517 -> 2482;
2518 -> 2517;
2518 -> 2494;
2518 -> 2482;
2519 -> 2491;
2519 -> 2494;
2519 -> 2482;
2520 -> 2492;
2520 -> 2494;
2520 -> 2482;
2521 -> 2493;
2521 -> 2494;
2521 -> 2482;
2522 -> 2475;
2522 -> 2450;
2523 -> 2522;
2523 -> 1;
2524 -> 214;
2524 -> 1;
2525 -> 1;
2526 -> 214;
2526 -> 2525;
2527 -> 2523;
2527 -> 2525;
2528 -> 2527;
2528 -> 2510;
2528 -> 2525;
2529 -> 2527;
2529 -> 2511;
2529 -> 2525;
2530 -> 2527;
2530 -> 2512;
2530 -> 2525;
2531 -> 2526;
2531 -> 2525;
2532 -> 2527;
2532 -> 2514;
2532 -> 2525;
2533 -> 2527;
2533 -> 2515;
2533 -> 2525;
2534 -> 2525;
2535 -> 2527;
2535 -> 2518;
2535 -> 2525;
2536 -> 2527;
2536 -> 2519;
2536 -> 2525;
2537 -> 2527;
2537 -> 2520;
2537 -> 2525;
2538 -> 2527;
2538 -> 2521;
2538 -> 2525;
2539 -> 2525;
2540 -> 2528;
2540 -> 2539;
2541 -> 2529;
2541 -> 2539;
2542 -> 2530;
2542 -> 2539;
2543 -> 2531;
2543 -> 2539;
2544 -> 2532;
2544 -> 2539;
2545 -> 2533;
2545 -> 2539;
2546 -> 2534;
2546 -> 2539;
2547 -> 2535;
2547 -> 2539;
2548 -> 2536;
2548 -> 2539;
2549 -> 2537;
2549 -> 2539;
2550 -> 2538;
2550 -> 2539;
2551 -> 2534;
2551 -> 2539;
2552 -> 2551;
2552 -> 2539;
2553 -> 2551;
2553 -> 2539;
2554 -> 2551;
2554 -> 2539;
2555 -> 2551;
2555 -> 2539;
2556 -> 2551;
2556 -> 2539;
2557 -> 2551;
2557 -> 2539;
2558 -> 2551;
2558 -> 2539;
2559 -> 2551;
2559 -> 2539;
2560 -> 2551;
2560 -> 2539;
2561 -> 2551;
2561 -> 2539;
2562 -> 2551;
2562 -> 2539;
2563 -> 2551;
2563 -> 2539;
2564 -> 2551;
2564 -> 2539;
2565 -> 2551;
2565 -> 2539;
2566 -> 2551;
2566 -> 2539;
2567 -> 2543;
2567 -> 2551;
2567 -> 2539;
2568 -> 2546;
2568 -> 2551;
2568 -> 2539;
2569 -> 2534;
2569 -> 1;
2570 -> 1;
2571 -> 571;
2571 -> 2570;
2572 -> 214;
2572 -> 2570;
2573 -> 214;
2573 -> 2570;
2574 -> 214;
2574 -> 2570;
2575 -> 214;
2575 -> 2570;
2576 -> 214;
2576 -> 2570;
2577 -> 214;
2577 -> 2570;
2578 -> 2571;
2578 -> 2570;
2579 -> 2572;
2579 -> 2570;
2580 -> 2573;
2580 -> 2570;
2581 -> 2574;
2581 -> 2570;
2582 -> 2575;
2582 -> 2570;
2583 -> 2576;
2583 -> 2570;
2584 -> 2577;
2584 -> 2570;
2585 -> 2570;
2586 -> 2578;
2586 -> 2585;
2587 -> 2579;
2587 -> 2585;
2588 -> 2580;
2588 -> 2585;
2589 -> 2581;
2589 -> 2585;
2590 -> 2582;
2590 -> 2585;
2591 -> 2583;
2591 -> 2585;
2592 -> 2584;
2592 -> 2585;
2593 -> 2586;
2593 -> 2585;
2594 -> 2586;
2594 -> 2585;
2595 -> 2585;
2596 -> 2587;
2596 -> 2585;
2597 -> 2588;
2597 -> 2585;
2598 -> 2589;
2598 -> 2585;
2599 -> 2590;
2599 -> 2585;
2600 -> 2591;
2600 -> 2585;
2601 -> 2592;
2601 -> 2585;
2602 -> 2585;
2603 -> 2594;
2603 -> 2602;
2604 -> 2595;
2604 -> 2602;
2605 -> 2596;
2605 -> 2602;
2606 -> 2597;
2606 -> 2602;
2607 -> 2598;
2607 -> 2602;
2608 -> 2599;
2608 -> 2602;
2609 -> 2600;
2609 -> 2602;
2610 -> 2594;
2610 -> 2602;
2611 -> 2601;
2611 -> 2602;
2612 -> 2595;
2612 -> 2602;
2613 -> 2595;
2613 -> 2602;
2614 -> 2595;
2614 -> 2602;
2615 -> 2614;
2615 -> 2602;
2616 -> 2614;
2616 -> 2602;
2617 -> 2614;
2617 -> 2602;
2618 -> 2614;
2618 -> 2602;
2619 -> 2614;
2619 -> 2602;
2620 -> 2614;
2620 -> 2602;
2621 -> 2614;
2621 -> 2602;
2622 -> 2614;
2622 -> 2602;
2623 -> 2614;
2623 -> 2602;
2624 -> 2614;
2624 -> 2602;
2625 -> 2614;
2625 -> 2602;
2626 -> 2614;
2626 -> 2602;
2627 -> 2614;
2627 -> 2602;
2628 -> 2614;
2628 -> 2602;
2629 -> 2614;
2629 -> 2602;
2630 -> 2603;
2630 -> 2614;
2630 -> 2602;
2631 -> 2604;
2631 -> 2614;
2631 -> 2602;
2632 -> 2605;
2632 -> 2614;
2632 -> 2602;
2633 -> 2606;
2633 -> 2614;
2633 -> 2602;
2634 -> 2607;
2634 -> 2614;
2634 -> 2602;
2635 -> 2608;
2635 -> 2614;
2635 -> 2602;
2636 -> 2609;
2636 -> 2614;
2636 -> 2602;
2637 -> 2610;
2637 -> 2602;
2638 -> 2637;
2638 -> 2614;
2638 -> 2602;
2639 -> 2611;
2639 -> 2614;
2639 -> 2602;
2640 -> 2612;
2640 -> 2614;
2640 -> 2602;
2641 -> 2613;
2641 -> 2614;
2641 -> 2602;
2642 -> 2595;
2642 -> 2570;
2643 -> 2642;
2643 -> 1;
2644 -> 214;
2644 -> 1;
2645 -> 1;
2646 -> 214;
2646 -> 2645;
2647 -> 2643;
2647 -> 2645;
2648 -> 2647;
2648 -> 2630;
2648 -> 2645;
2649 -> 2647;
2649 -> 2631;
2649 -> 2645;
2650 -> 2647;
2650 -> 2632;
2650 -> 2645;
2651 -> 2646;
2651 -> 2645;
2652 -> 2647;
2652 -> 2634;
2652 -> 2645;
2653 -> 2647;
2653 -> 2635;
2653 -> 2645;
2654 -> 2645;
2655 -> 2647;
2655 -> 2638;
2655 -> 2645;
2656 -> 2647;
2656 -> 2639;
2656 -> 2645;
2657 -> 2647;
2657 -> 2640;
2657 -> 2645;
2658 -> 2647;
2658 -> 2641;
2658 -> 2645;
2659 -> 2645;
2660 -> 2648;
2660 -> 2659;
2661 -> 2649;
2661 -> 2659;
2662 -> 2650;
2662 -> 2659;
2663 -> 2651;
2663 -> 2659;
2664 -> 2652;
2664 -> 2659;
2665 -> 2653;
2665 -> 2659;
2666 -> 2654;
2666 -> 2659;
2667 -> 2655;
2667 -> 2659;
2668 -> 2656;
2668 -> 2659;
2669 -> 2657;
2669 -> 2659;
2670 -> 2658;
2670 -> 2659;
2671 -> 2654;
2671 -> 2659;
2672 -> 2671;
2672 -> 2659;
2673 -> 2671;
2673 -> 2659;
2674 -> 2671;
2674 -> 2659;
2675 -> 2671;
2675 -> 2659;
2676 -> 2671;
2676 -> 2659;
2677 -> 2671;
2677 -> 2659;
2678 -> 2671;
2678 -> 2659;
2679 -> 2671;
2679 -> 2659;
2680 -> 2671;
2680 -> 2659;
2681 -> 2671;
2681 -> 2659;
2682 -> 2671;
2682 -> 2659;
2683 -> 2671;
2683 -> 2659;
2684 -> 2671;
2684 -> 2659;
2685 -> 2671;
2685 -> 2659;
2686 -> 2671;
2686 -> 2659;
2687 -> 2663;
2687 -> 2671;
2687 -> 2659;
2688 -> 2666;
2688 -> 2671;
2688 -> 2659;
2689 -> 2654;
2689 -> 1;
2690 -> 1;
2691 -> 571;
2691 -> 2690;
2692 -> 214;
2692 -> 2690;
2693 -> 214;
2693 -> 2690;
2694 -> 214;
2694 -> 2690;
2695 -> 214;
2695 -> 2690;
2696 -> 214;
2696 -> 2690;
2697 -> 214;
2697 -> 2690;
2698 -> 2691;
2698 -> 2690;
2699 -> 2692;
2699 -> 2690;
2700 -> 2693;
2700 -> 2690;
2701 -> 2694;
2701 -> 2690;
2702 -> 2695;
2702 -> 2690;
2703 -> 2696;
2703 -> 2690;
2704 -> 2697;
2704 -> 2690;
2705 -> 2690;
2706 -> 2698;
2706 -> 2705;
2707 -> 2699;
2707 -> 2705;
2708 -> 2700;
2708 -> 2705;
2709 -> 2701;
2709 -> 2705;
2710 -> 2702;
2710 -> 2705;
2711 -> 2703;
2711 -> 2705;
2712 -> 2704;
2712 -> 2705;
2713 -> 2706;
2713 -> 2705;
2714 -> 2706;
2714 -> 2705;
2715 -> 2705;
2716 -> 2707;
2716 -> 2705;
2717 -> 2708;
2717 -> 2705;
2718 -> 2709;
2718 -> 2705;
2719 -> 2710;
2719 -> 2705;
2720 -> 2711;
2720 -> 2705;
2721 -> 2712;
2721 -> 2705;
2722 -> 2705;
2723 -> 2714;
2723 -> 2722;
2724 -> 2715;
2724 -> 2722;
2725 -> 2716;
2725 -> 2722;
2726 -> 2717;
2726 -> 2722;
2727 -> 2718;
2727 -> 2722;
2728 -> 2719;
2728 -> 2722;
2729 -> 2720;
2729 -> 2722;
2730 -> 2714;
2730 -> 2722;
2731 -> 2721;
2731 -> 2722;
2732 -> 2715;
2732 -> 2722;
2733 -> 2715;
2733 -> 2722;
2734 -> 2715;
2734 -> 2722;
2735 -> 2734;
2735 -> 2722;
2736 -> 2734;
2736 -> 2722;
2737 -> 2734;
2737 -> 2722;
2738 -> 2734;
2738 -> 2722;
2739 -> 2734;
2739 -> 2722;
2740 -> 2734;
2740 -> 2722;
2741 -> 2734;
2741 -> 2722;
2742 -> 2734;
2742 -> 2722;
2743 -> 2734;
2743 -> 2722;
2744 -> 2734;
2744 -> 2722;
2745 -> 2734;
2745 -> 2722;
2746 -> 2734;
2746 -> 2722;
2747 -> 2734;
2747 -> 2722;
2748 -> 2734;
2748 -> 2722;
2749 -> 2734;
2749 -> 2722;
2750 -> 2723;
2750 -> 2734;
2750 -> 2722;
2751 -> 2724;
2751 -> 2734;
2751 -> 2722;
2752 -> 2725;
2752 -> 2734;
2752 -> 2722;
2753 -> 2726;
2753 -> 2734;
2753 -> 2722;
2754 -> 2727;
2754 -> 2734;
2754 -> 2722;
2755 -> 2728;
2755 -> 2734;
2755 -> 2722;
2756 -> 2729;
2756 -> 2734;
2756 -> 2722;
2757 -> 2730;
2757 -> 2722;
2758 -> 2757;
2758 -> 2734;
2758 -> 2722;
2759 -> 2731;
2759 -> 2734;
2759 -> 2722;
2760 -> 2732;
2760 -> 2734;
2760 -> 2722;
2761 -> 2733;
2761 -> 2734;
2761 -> 2722;
2762 -> 2715;
2762 -> 2690;
2763 -> 2762;
2763 -> 1;
2764 -> 214;
2764 -> 1;
2765 -> 1;
2766 -> 214;
2766 -> 2765;
2767 -> 2763;
2767 -> 2765;
2768 -> 2767;
2768 -> 2750;
2768 -> 2765;
2769 -> 2767;
2769 -> 2751;
2769 -> 2765;
2770 -> 2767;
2770 -> 2752;
2770 -> 2765;
2771 -> 2766;
2771 -> 2765;
2772 -> 2767;
2772 -> 2754;
2772 -> 2765;
2773 -> 2767;
2773 -> 2755;
2773 -> 2765;
2774 -> 2765;
2775 -> 2767;
2775 -> 2758;
2775 -> 2765;
2776 -> 2767;
2776 -> 2759;
2776 -> 2765;
2777 -> 2767;
2777 -> 2760;
2777 -> 2765;
2778 -> 2767;
2778 -> 2761;
2778 -> 2765;
2779 -> 2765;
2780 -> 2768;
2780 -> 2779;
2781 -> 2769;
2781 -> 2779;
2782 -> 2770;
2782 -> 2779;
2783 -> 2771;
2783 -> 2779;
2784 -> 2772;
2784 -> 2779;
2785 -> 2773;
2785 -> 2779;
2786 -> 2774;
2786 -> 2779;
2787 -> 2775;
2787 -> 2779;
2788 -> 2776;
2788 -> 2779;
2789 -> 2777;
2789 -> 2779;
2790 -> 2778;
2790 -> 2779;
2791 -> 2774;
2791 -> 2779;
2792 -> 2791;
2792 -> 2779;
2793 -> 2791;
2793 -> 2779;
2794 -> 2791;
2794 -> 2779;
2795 -> 2791;
2795 -> 2779;
2796 -> 2791;
2796 -> 2779;
2797 -> 2791;
2797 -> 2779;
2798 -> 2791;
2798 -> 2779;
2799 -> 2791;
2799 -> 2779;
2800 -> 2791;
2800 -> 2779;
2801 -> 2791;
2801 -> 2779;
2802 -> 2791;
2802 -> 2779;
2803 -> 2791;
2803 -> 2779;
2804 -> 2791;
2804 -> 2779;
2805 -> 2791;
2805 -> 2779;
2806 -> 2791;
2806 -> 2779;
2807 -> 2783;
2807 -> 2791;
2807 -> 2779;
2808 -> 2786;
2808 -> 2791;
2808 -> 2779;
2809 -> 2774;
2809 -> 1;
2810 -> 1;
2811 -> 571;
2811 -> 2810;
2812 -> 214;
2812 -> 2810;
2813 -> 214;
2813 -> 2810;
2814 -> 214;
2814 -> 2810;
2815 -> 214;
2815 -> 2810;
2816 -> 214;
2816 -> 2810;
2817 -> 214;
2817 -> 2810;
2818 -> 2811;
2818 -> 2810;
2819 -> 2812;
2819 -> 2810;
2820 -> 2813;
2820 -> 2810;
2821 -> 2814;
2821 -> 2810;
2822 -> 2815;
2822 -> 2810;
2823 -> 2816;
2823 -> 2810;
2824 -> 2817;
2824 -> 2810;
2825 -> 2810;
2826 -> 2818;
2826 -> 2825;
2827 -> 2819;
2827 -> 2825;
2828 -> 2820;
2828 -> 2825;
2829 -> 2821;
2829 -> 2825;
2830 -> 2822;
2830 -> 2825;
2831 -> 2823;
2831 -> 2825;
2832 -> 2824;
2832 -> 2825;
2833 -> 2826;
2833 -> 2825;
2834 -> 2826;
2834 -> 2825;
2835 -> 2825;
2836 -> 2827;
2836 -> 2825;
2837 -> 2828;
2837 -> 2825;
2838 -> 2829;
2838 -> 2825;
2839 -> 2830;
2839 -> 2825;
2840 -> 2831;
2840 -> 2825;
2841 -> 2832;
2841 -> 2825;
2842 -> 2825;
2843 -> 2834;
2843 -> 2842;
2844 -> 2835;
2844 -> 2842;
2845 -> 2836;
2845 -> 2842;
2846 -> 2837;
2846 -> 2842;
2847 -> 2838;
2847 -> 2842;
2848 -> 2839;
2848 -> 2842;
2849 -> 2840;
2849 -> 2842;
2850 -> 2834;
2850 -> 2842;
2851 -> 2841;
2851 -> 2842;
2852 -> 2835;
2852 -> 2842;
2853 -> 2835;
2853 -> 2842;
2854 -> 2835;
2854 -> 2842;
2855 -> 2854;
2855 -> 2842;
2856 -> 2854;
2856 -> 2842;
2857 -> 2854;
2857 -> 2842;
2858 -> 2854;
2858 -> 2842;
2859 -> 2854;
2859 -> 2842;
2860 -> 2854;
2860 -> 2842;
2861 -> 2854;
2861 -> 2842;
2862 -> 2854;
2862 -> 2842;
2863 -> 2854;
2863 -> 2842;
2864 -> 2854;
2864 -> 2842;
2865 -> 2854;
2865 -> 2842;
2866 -> 2854;
2866 -> 2842;
2867 -> 2854;
2867 -> 2842;
2868 -> 2854;
2868 -> 2842;
2869 -> 2854;
2869 -> 2842;
2870 -> 2843;
2870 -> 2854;
2870 -> 2842;
2871 -> 2844;
2871 -> 2854;
2871 -> 2842;
2872 -> 2845;
2872 -> 2854;
2872 -> 2842;
2873 -> 2846;
2873 -> 2854;
2873 -> 2842;
2874 -> 2847;
2874 -> 2854;
2874 -> 2842;
2875 -> 2848;
2875 -> 2854;
2875 -> 2842;
2876 -> 2849;
2876 -> 2854;
2876 -> 2842;
2877 -> 2850;
2877 -> 2842;
2878 -> 2877;
2878 -> 2854;
2878 -> 2842;
2879 -> 2851;
2879 -> 2854;
2879 -> 2842;
2880 -> 2852;
2880 -> 2854;
2880 -> 2842;
2881 -> 2853;
2881 -> 2854;
2881 -> 2842;
2882 -> 2835;
2882 -> 2810;
2883 -> 2882;
2883 -> 1;
2884 -> 214;
2884 -> 1;
2885 -> 1;
2886 -> 214;
2886 -> 2885;
2887 -> 2883;
2887 -> 2885;
2888 -> 2887;
2888 -> 2870;
2888 -> 2885;
2889 -> 2887;
2889 -> 2871;
2889 -> 2885;
2890 -> 2887;
2890 -> 2872;
2890 -> 2885;
2891 -> 2886;
2891 -> 2885;
2892 -> 2887;
2892 -> 2874;
2892 -> 2885;
2893 -> 2887;
2893 -> 2875;
2893 -> 2885;
2894 -> 2885;
2895 -> 2887;
2895 -> 2878;
2895 -> 2885;
2896 -> 2887;
2896 -> 2879;
2896 -> 2885;
2897 -> 2887;
2897 -> 2880;
2897 -> 2885;
2898 -> 2887;
2898 -> 2881;
2898 -> 2885;
2899 -> 2885;
2900 -> 2888;
2900 -> 2899;
2901 -> 2889;
2901 -> 2899;
2902 -> 2890;
2902 -> 2899;
2903 -> 2891;
2903 -> 2899;
2904 -> 2892;
2904 -> 2899;
2905 -> 2893;
2905 -> 2899;
2906 -> 2894;
2906 -> 2899;
2907 -> 2895;
2907 -> 2899;
2908 -> 2896;
2908 -> 2899;
2909 -> 2897;
2909 -> 2899;
2910 -> 2898;
2910 -> 2899;
2911 -> 2894;
2911 -> 2899;
2912 -> 2911;
2912 -> 2899;
2913 -> 2911;
2913 -> 2899;
2914 -> 2911;
2914 -> 2899;
2915 -> 2911;
2915 -> 2899;
2916 -> 2911;
2916 -> 2899;
2917 -> 2911;
2917 -> 2899;
2918 -> 2911;
2918 -> 2899;
2919 -> 2911;
2919 -> 2899;
2920 -> 2911;
2920 -> 2899;
2921 -> 2911;
2921 -> 2899;
2922 -> 2911;
2922 -> 2899;
2923 -> 2911;
2923 -> 2899;
2924 -> 2911;
2924 -> 2899;
2925 -> 2911;
2925 -> 2899;
2926 -> 2911;
2926 -> 2899;
2927 -> 2903;
2927 -> 2911;
2927 -> 2899;
2928 -> 2906;
2928 -> 2911;
2928 -> 2899;
2929 -> 2894;
2929 -> 1;
2930 -> 1;
2931 -> 571;
2931 -> 2930;
2932 -> 214;
2932 -> 2930;
2933 -> 214;
2933 -> 2930;
2934 -> 214;
2934 -> 2930;
2935 -> 214;
2935 -> 2930;
2936 -> 214;
2936 -> 2930;
2937 -> 214;
2937 -> 2930;
2938 -> 2931;
2938 -> 2930;
2939 -> 2932;
2939 -> 2930;
2940 -> 2933;
2940 -> 2930;
2941 -> 2934;
2941 -> 2930;
2942 -> 2935;
2942 -> 2930;
2943 -> 2936;
2943 -> 2930;
2944 -> 2937;
2944 -> 2930;
2945 -> 2930;
2946 -> 2938;
2946 -> 2945;
2947 -> 2939;
2947 -> 2945;
2948 -> 2940;
2948 -> 2945;
2949 -> 2941;
2949 -> 2945;
2950 -> 2942;
2950 -> 2945;
2951 -> 2943;
2951 -> 2945;
2952 -> 2944;
2952 -> 2945;
2953 -> 2946;
2953 -> 2945;
2954 -> 2946;
2954 -> 2945;
2955 -> 2945;
2956 -> 2947;
2956 -> 2945;
2957 -> 2948;
2957 -> 2945;
2958 -> 2949;
2958 -> 2945;
2959 -> 2950;
2959 -> 2945;
2960 -> 2951;
2960 -> 2945;
2961 -> 2952;
2961 -> 2945;
2962 -> 2945;
2963 -> 2954;
2963 -> 2962;
2964 -> 2955;
2964 -> 2962;
2965 -> 2956;
2965 -> 2962;
2966 -> 2957;
2966 -> 2962;
2967 -> 2958;
2967 -> 2962;
2968 -> 2959;
2968 -> 2962;
2969 -> 2960;
2969 -> 2962;
2970 -> 2954;
2970 -> 2962;
2971 -> 2961;
2971 -> 2962;
2972 -> 2955;
2972 -> 2962;
2973 -> 2955;
2973 -> 2962;
2974 -> 2955;
2974 -> 2962;
2975 -> 2974;
2975 -> 2962;
2976 -> 2974;
2976 -> 2962;
2977 -> 2974;
2977 -> 2962;
2978 -> 2974;
2978 -> 2962;
2979 -> 2974;
2979 -> 2962;
2980 -> 2974;
2980 -> 2962;
2981 -> 2974;
2981 -> 2962;
2982 -> 2974;
2982 -> 2962;
2983 -> 2974;
2983 -> 2962;
2984 -> 2974;
2984 -> 2962;
2985 -> 2974;
2985 -> 2962;
2986 -> 2974;
2986 -> 2962;
2987 -> 2974;
2987 -> 2962;
2988 -> 2974;
2988 -> 2962;
2989 -> 2974;
2989 -> 2962;
2990 -> 2963;
2990 -> 2974;
2990 -> 2962;
2991 -> 2964;
2991 -> 2974;
2991 -> 2962;
2992 -> 2965;
2992 -> 2974;
2992 -> 2962;
2993 -> 2966;
2993 -> 2974;
2993 -> 2962;
2994 -> 2967;
2994 -> 2974;
2994 -> 2962;
2995 -> 2968;
2995 -> 2974;
2995 -> 2962;
2996 -> 2969;
2996 -> 2974;
2996 -> 2962;
2997 -> 2970;
2997 -> 2962;
2998 -> 2997;
2998 -> 2974;
2998 -> 2962;
2999 -> 2971;
2999 -> 2974;
2999 -> 2962;
3000 -> 2972;
3000 -> 2974;
3000 -> 2962;
3001 -> 2973;
3001 -> 2974;
3001 -> 2962;
3002 -> 2955;
3002 -> 2930;
3003 -> 3002;
3003 -> 1;
3004 -> 214;
3004 -> 1;
3005 -> 1;
3006 -> 214;
3006 -> 3005;
3007 -> 3003;
3007 -> 3005;
3008 -> 3007;
3008 -> 2990;
3008 -> 3005;
3009 -> 3007;
3009 -> 2991;
3009 -> 3005;
3010 -> 3007;
3010 -> 2992;
3010 -> 3005;
3011 -> 3006;
3011 -> 3005;
3012 -> 3007;
3012 -> 2994;
3012 -> 3005;
3013 -> 3007;
3013 -> 2995;
3013 -> 3005;
3014 -> 3005;
3015 -> 3007;
3015 -> 2998;
3015 -> 3005;
3016 -> 3007;
3016 -> 2999;
3016 -> 3005;
3017 -> 3007;
3017 -> 3000;
3017 -> 3005;
3018 -> 3007;
3018 -> 3001;
3018 -> 3005;
3019 -> 3005;
3020 -> 3008;
3020 -> 3019;
3021 -> 3009;
3021 -> 3019;
3022 -> 3010;
3022 -> 3019;
3023 -> 3011;
3023 -> 3019;
3024 -> 3012;
3024 -> 3019;
3025 -> 3013;
3025 -> 3019;
3026 -> 3014;
3026 -> 3019;
3027 -> 3015;
3027 -> 3019;
3028 -> 3016;
3028 -> 3019;
3029 -> 3017;
3029 -> 3019;
3030 -> 3018;
3030 -> 3019;
3031 -> 3014;
3031 -> 3019;
3032 -> 3031;
3032 -> 3019;
3033 -> 3031;
3033 -> 3019;
3034 -> 3031;
3034 -> 3019;
3035 -> 3031;
3035 -> 3019;
3036 -> 3031;
3036 -> 3019;
3037 -> 3031;
3037 -> 3019;
3038 -> 3031;
3038 -> 3019;
3039 -> 3031;
3039 -> 3019;
3040 -> 3031;
3040 -> 3019;
3041 -> 3031;
3041 -> 3019;
3042 -> 3031;
3042 -> 3019;
3043 -> 3031;
3043 -> 3019;
3044 -> 3031;
3044 -> 3019;
3045 -> 3031;
3045 -> 3019;
3046 -> 3031;
3046 -> 3019;
3047 -> 3023;
3047 -> 3031;
3047 -> 3019;
3048 -> 3026;
3048 -> 3031;
3048 -> 3019;
3049 -> 3014;
3049 -> 1;
3050 -> 1;
3051 -> 571;
3051 -> 3050;
3052 -> 214;
3052 -> 3050;
3053 -> 214;
3053 -> 3050;
3054 -> 214;
3054 -> 3050;
3055 -> 214;
3055 -> 3050;
3056 -> 214;
3056 -> 3050;
3057 -> 214;
3057 -> 3050;
3058 -> 3051;
3058 -> 3050;
3059 -> 3052;
3059 -> 3050;
3060 -> 3053;
3060 -> 3050;
3061 -> 3054;
3061 -> 3050;
3062 -> 3055;
3062 -> 3050;
3063 -> 3056;
3063 -> 3050;
3064 -> 3057;
3064 -> 3050;
3065 -> 3050;
3066 -> 3058;
3066 -> 3065;
3067 -> 3059;
3067 -> 3065;
3068 -> 3060;
3068 -> 3065;
3069 -> 3061;
3069 -> 3065;
3070 -> 3062;
3070 -> 3065;
3071 -> 3063;
3071 -> 3065;
3072 -> 3064;
3072 -> 3065;
3073 -> 3066;
3073 -> 3065;
3074 -> 3066;
3074 -> 3065;
3075 -> 3065;
3076 -> 3067;
3076 -> 3065;
3077 -> 3068;
3077 -> 3065;
3078 -> 3069;
3078 -> 3065;
3079 -> 3070;
3079 -> 3065;
3080 -> 3071;
3080 -> 3065;
3081 -> 3072;
3081 -> 3065;
3082 -> 3065;
3083 -> 3074;
3083 -> 3082;
3084 -> 3075;
3084 -> 3082;
3085 -> 3076;
3085 -> 3082;
3086 -> 3077;
3086 -> 3082;
3087 -> 3078;
3087 -> 3082;
3088 -> 3079;
3088 -> 3082;
3089 -> 3080;
3089 -> 3082;
3090 -> 3074;
3090 -> 3082;
3091 -> 3081;
3091 -> 3082;
3092 -> 3075;
3092 -> 3082;
3093 -> 3075;
3093 -> 3082;
3094 -> 3075;
3094 -> 3082;
3095 -> 3094;
3095 -> 3082;
3096 -> 3094;
3096 -> 3082;
3097 -> 3094;
3097 -> 3082;
3098 -> 3094;
3098 -> 3082;
3099 -> 3094;
3099 -> 3082;
3100 -> 3094;
3100 -> 3082;
3101 -> 3094;
3101 -> 3082;
3102 -> 3094;
3102 -> 3082;
3103 -> 3094;
3103 -> 3082;
3104 -> 3094;
3104 -> 3082;
3105 -> 3094;
3105 -> 3082;
3106 -> 3094;
3106 -> 3082;
3107 -> 3094;
3107 -> 3082;
3108 -> 3094;
3108 -> 3082;
3109 -> 3094;
3109 -> 3082;
3110 -> 3083;
3110 -> 3094;
3110 -> 3082;
3111 -> 3084;
3111 -> 3094;
3111 -> 3082;
3112 -> 3085;
3112 -> 3094;
3112 -> 3082;
3113 -> 3086;
3113 -> 3094;
3113 -> 3082;
3114 -> 3087;
3114 -> 3094;
3114 -> 3082;
3115 -> 3088;
3115 -> 3094;
3115 -> 3082;
3116 -> 3089;
3116 -> 3094;
3116 -> 3082;
3117 -> 3090;
3117 -> 3082;
3118 -> 3117;
3118 -> 3094;
3118 -> 3082;
3119 -> 3091;
3119 -> 3094;
3119 -> 3082;
3120 -> 3092;
3120 -> 3094;
3120 -> 3082;
3121 -> 3093;
3121 -> 3094;
3121 -> 3082;
3122 -> 3075;
3122 -> 3050;
3123 -> 3122;
3123 -> 1;
3124 -> 214;
3124 -> 1;
3125 -> 1;
3126 -> 214;
3126 -> 3125;
3127 -> 3123;
3127 -> 3125;
3128 -> 3127;
3128 -> 3110;
3128 -> 3125;
3129 -> 3127;
3129 -> 3111;
3129 -> 3125;
3130 -> 3127;
3130 -> 3112;
3130 -> 3125;
3131 -> 3126;
3131 -> 3125;
3132 -> 3127;
3132 -> 3114;
3132 -> 3125;
3133 -> 3127;
3133 -> 3115;
3133 -> 3125;
3134 -> 3125;
3135 -> 3127;
3135 -> 3118;
3135 -> 3125;
3136 -> 3127;
3136 -> 3119;
3136 -> 3125;
3137 -> 3127;
3137 -> 3120;
3137 -> 3125;
3138 -> 3127;
3138 -> 3121;
3138 -> 3125;
3139 -> 3125;
3140 -> 3128;
3140 -> 3139;
3141 -> 3129;
3141 -> 3139;
3142 -> 3130;
3142 -> 3139;
3143 -> 3131;
3143 -> 3139;
3144 -> 3132;
3144 -> 3139;
3145 -> 3133;
3145 -> 3139;
3146 -> 3134;
3146 -> 3139;
3147 -> 3135;
3147 -> 3139;
3148 -> 3136;
3148 -> 3139;
3149 -> 3137;
3149 -> 3139;
3150 -> 3138;
3150 -> 3139;
3151 -> 3134;
3151 -> 3139;
3152 -> 3151;
3152 -> 3139;
3153 -> 3151;
3153 -> 3139;
3154 -> 3151;
3154 -> 3139;
3155 -> 3151;
3155 -> 3139;
3156 -> 3151;
3156 -> 3139;
3157 -> 3151;
3157 -> 3139;
3158 -> 3151;
3158 -> 3139;
3159 -> 3151;
3159 -> 3139;
3160 -> 3151;
3160 -> 3139;
3161 -> 3151;
3161 -> 3139;
3162 -> 3151;
3162 -> 3139;
3163 -> 3151;
3163 -> 3139;
3164 -> 3151;
3164 -> 3139;
3165 -> 3151;
3165 -> 3139;
3166 -> 3151;
3166 -> 3139;
3167 -> 3143;
3167 -> 3151;
3167 -> 3139;
3168 -> 3146;
3168 -> 3151;
3168 -> 3139;
3169 -> 3134;
3169 -> 1;
3170 -> 1;
3171 -> 571;
3171 -> 3170;
3172 -> 214;
3172 -> 3170;
3173 -> 214;
3173 -> 3170;
3174 -> 214;
3174 -> 3170;
3175 -> 214;
3175 -> 3170;
3176 -> 214;
3176 -> 3170;
3177 -> 214;
3177 -> 3170;
3178 -> 3171;
3178 -> 3170;
3179 -> 3172;
3179 -> 3170;
3180 -> 3173;
3180 -> 3170;
3181 -> 3174;
3181 -> 3170;
3182 -> 3175;
3182 -> 3170;
3183 -> 3176;
3183 -> 3170;
3184 -> 3177;
3184 -> 3170;
3185 -> 3170;
3186 -> 3178;
3186 -> 3185;
3187 -> 3179;
3187 -> 3185;
3188 -> 3180;
3188 -> 3185;
3189 -> 3181;
3189 -> 3185;
3190 -> 3182;
3190 -> 3185;
3191 -> 3183;
3191 -> 3185;
3192 -> 3184;
3192 -> 3185;
3193 -> 3186;
3193 -> 3185;
3194 -> 3186;
3194 -> 3185;
3195 -> 3185;
3196 -> 3187;
3196 -> 3185;
3197 -> 3188;
3197 -> 3185;
3198 -> 3189;
3198 -> 3185;
3199 -> 3190;
3199 -> 3185;
3200 -> 3191;
3200 -> 3185;
3201 -> 3192;
3201 -> 3185;
3202 -> 3185;
3203 -> 3194;
3203 -> 3202;
3204 -> 3195;
3204 -> 3202;
3205 -> 3196;
3205 -> 3202;
3206 -> 3197;
3206 -> 3202;
3207 -> 3198;
3207 -> 3202;
3208 -> 3199;
3208 -> 3202;
3209 -> 3200;
3209 -> 3202;
3210 -> 3194;
3210 -> 3202;
3211 -> 3201;
3211 -> 3202;
3212 -> 3195;
3212 -> 3202;
3213 -> 3195;
3213 -> 3202;
3214 -> 3195;
3214 -> 3202;
3215 -> 3214;
3215 -> 3202;
3216 -> 3214;
3216 -> 3202;
3217 -> 3214;
3217 -> 3202;
3218 -> 3214;
3218 -> 3202;
3219 -> 3214;
3219 -> 3202;
3220 -> 3214;
3220 -> 3202;
3221 -> 3214;
3221 -> 3202;
3222 -> 3214;
3222 -> 3202;
3223 -> 3214;
3223 -> 3202;
3224 -> 3214;
3224 -> 3202;
3225 -> 3214;
3225 -> 3202;
3226 -> 3214;
3226 -> 3202;
3227 -> 3214;
3227 -> 3202;
3228 -> 3214;
3228 -> 3202;
3229 -> 3214;
3229 -> 3202;
3230 -> 3203;
3230 -> 3214;
3230 -> 3202;
3231 -> 3204;
3231 -> 3214;
3231 -> 3202;
3232 -> 3205;
3232 -> 3214;
3232 -> 3202;
3233 -> 3206;
3233 -> 3214;
3233 -> 3202;
3234 -> 3207;
3234 -> 3214;
3234 -> 3202;
3235 -> 3208;
3235 -> 3214;
3235 -> 3202;
3236 -> 3209;
3236 -> 3214;
3236 -> 3202;
3237 -> 3210;
3237 -> 3202;
3238 -> 3237;
3238 -> 3214;
3238 -> 3202;
3239 -> 3211;
3239 -> 3214;
3239 -> 3202;
3240 -> 3212;
3240 -> 3214;
3240 -> 3202;
3241 -> 3213;
3241 -> 3214;
3241 -> 3202;
3242 -> 3195;
3242 -> 3170;
3243 -> 3242;
3243 -> 1;
3244 -> 214;
3244 -> 1;
3245 -> 1;
3246 -> 214;
3246 -> 3245;
3247 -> 3243;
3247 -> 3245;
3248 -> 3247;
3248 -> 3230;
3248 -> 3245;
3249 -> 3247;
3249 -> 3231;
3249 -> 3245;
3250 -> 3247;
3250 -> 3232;
3250 -> 3245;
3251 -> 3246;
3251 -> 3245;
3252 -> 3247;
3252 -> 3234;
3252 -> 3245;
3253 -> 3247;
3253 -> 3235;
3253 -> 3245;
3254 -> 3245;
3255 -> 3247;
3255 -> 3238;
3255 -> 3245;
3256 -> 3247;
3256 -> 3239;
3256 -> 3245;
3257 -> 3247;
3257 -> 3240;
3257 -> 3245;
3258 -> 3247;
3258 -> 3241;
3258 -> 3245;
3259 -> 3245;
3260 -> 3248;
3260 -> 3259;
3261 -> 3249;
3261 -> 3259;
3262 -> 3250;
3262 -> 3259;
3263 -> 3251;
3263 -> 3259;
3264 -> 3252;
3264 -> 3259;
3265 -> 3253;
3265 -> 3259;
3266 -> 3254;
3266 -> 3259;
3267 -> 3255;
3267 -> 3259;
3268 -> 3256;
3268 -> 3259;
3269 -> 3257;
3269 -> 3259;
3270 -> 3258;
3270 -> 3259;
3271 -> 3254;
3271 -> 3259;
3272 -> 3271;
3272 -> 3259;
3273 -> 3271;
3273 -> 3259;
3274 -> 3271;
3274 -> 3259;
3275 -> 3271;
3275 -> 3259;
3276 -> 3271;
3276 -> 3259;
3277 -> 3271;
3277 -> 3259;
3278 -> 3271;
3278 -> 3259;
3279 -> 3271;
3279 -> 3259;
3280 -> 3271;
3280 -> 3259;
3281 -> 3271;
3281 -> 3259;
3282 -> 3271;
3282 -> 3259;
3283 -> 3271;
3283 -> 3259;
3284 -> 3271;
3284 -> 3259;
3285 -> 3271;
3285 -> 3259;
3286 -> 3271;
3286 -> 3259;
3287 -> 3263;
3287 -> 3271;
3287 -> 3259;
3288 -> 3266;
3288 -> 3271;
3288 -> 3259;
3289 -> 3254;
3289 -> 1;
3290 -> 695;
3290 -> 214;
3290 -> 1;
3291 -> 815;
3291 -> 214;
3291 -> 1;
3292 -> 935;
3292 -> 214;
3292 -> 1;
3293 -> 1055;
3293 -> 214;
3293 -> 1;
3294 -> 1175;
3294 -> 214;
3294 -> 1;
3295 -> 1295;
3295 -> 214;
3295 -> 1;
3296 -> 1415;
3296 -> 214;
3296 -> 1;
3297 -> 1535;
3297 -> 214;
3297 -> 1;
3298 -> 1655;
3298 -> 214;
3298 -> 1;
3299 -> 1775;
3299 -> 214;
3299 -> 1;
3300 -> 1895;
3300 -> 214;
3300 -> 1;
3301 -> 1969;
3301 -> 214;
3301 -> 1;
3302 -> 2089;
3302 -> 214;
3302 -> 1;
3303 -> 2209;
3303 -> 214;
3303 -> 1;
3304 -> 2329;
3304 -> 214;
3304 -> 1;
3305 -> 2449;
3305 -> 214;
3305 -> 1;
3306 -> 2569;
3306 -> 214;
3306 -> 1;
3307 -> 2689;
3307 -> 214;
3307 -> 1;
3308 -> 2809;
3308 -> 214;
3308 -> 1;
3309 -> 2929;
3309 -> 214;
3309 -> 1;
3310 -> 3049;
3310 -> 214;
3310 -> 1;
3311 -> 3169;
3311 -> 214;
3311 -> 1;
3312 -> 3289;
3312 -> 214;
3312 -> 1;
3313 -> 1;
3314 -> 570;
3314 -> 3313;
3315 -> 214;
3315 -> 3313;
3316 -> 3313;
3318 -> 0;
3319 -> 0;
3320 -> 0;
3323 -> 3317;
3323 -> 3322;
3324 -> 3318;
3324 -> 3322;
3325 -> 3319;
3325 -> 3322;
3326 -> 3320;
3326 -> 3322;
3327 -> 3321;
3327 -> 3322;
3328 -> 3322;
3329 -> 3328;
3329 -> 3322;
3330 -> 3328;
3330 -> 3322;
3331 -> 3328;
3331 -> 3322;
3332 -> 3322;
3333 -> 3324;
3333 -> 3332;
3333 -> 3322;
3334 -> 3325;
3334 -> 0;
3334 -> 3322;
3335 -> 3326;
3335 -> 0;
3335 -> 3322;
3336 -> 3323;
3336 -> 3328;
3336 -> 3322;
3337 -> 3324;
3337 -> 3328;
3337 -> 3322;
3338 -> 3325;
3338 -> 3328;
3338 -> 3322;
3339 -> 3327;
3339 -> 3328;
3339 -> 3322;
3340 -> 3326;
3340 -> 3328;
3340 -> 3322;
3341 -> 3322;
3342 -> 3316;
3342 -> 3314;
3342 -> 568;
3342 -> 3313;
3343 -> 3342;
3343 -> 3316;
3344 -> 3343;
3344 -> 3342;
3344 -> 3316;
3345 -> 3316;
3346 -> 3344;
3346 -> 3342;
3346 -> 3345;
3346 -> 3316;
3347 -> 3343;
3347 -> 3342;
3347 -> 3345;
3347 -> 3316;
3348 -> 3341;
3348 -> 3346;
3349 -> 3342;
3349 -> 3348;
3349 -> 3336;
3349 -> 3339;
3349 -> 3337;
3349 -> 3338;
3349 -> 3340;
3349 -> 0;
3349 -> 3313;
3350 -> 3342;
3350 -> 3316;
3351 -> 3342;
3351 -> 3316;
3352 -> 3316;
3353 -> 3350;
3353 -> 3349;
3353 -> 3352;
3354 -> 3351;
3354 -> 3353;
3354 -> 3352;
3355 -> 3354;
3355 -> 3352;
3356 -> 0;
3356 -> 3355;
3357 -> 3354;
3357 -> 3352;
3358 -> 3350;
3358 -> 3352;
3359 -> 3351;
3359 -> 3356;
3359 -> 3357;
3359 -> 3358;
3359 -> 3352;
3360 -> 0;
3360 -> 3359;
3361 -> 3360;
3362 -> 3351;
3362 -> 3361;
3363 -> 3362;
3363 -> 3341;
3363 -> 3361;
3364 -> 3363;
3365 -> 3360;
3366 -> 0;
3366 -> 3360;
3367 -> 3366;
3368 -> 3342;
3368 -> 3316;
3369 -> 3342;
3369 -> 3316;
3370 -> 3368;
3370 -> 3369;
3370 -> 3316;
3371 -> 3342;
3371 -> 3370;
3371 -> 3366;
3371 -> 3313;
3373 -> 3372;
3375 -> 3374;
3377 -> 3376;
3380 -> 3379;
3381 -> 0;
3382 -> 0;
3383 -> 0;
3384 -> 3383;
3386 -> 3381;
3386 -> 3382;
3386 -> 3384;
3386 -> 3385;
3387 -> 3386;
3389 -> 3388;
3391 -> 3390;
3393 -> 3392;
3395 -> 3394;
3396 -> 3342;
3396 -> 3316;
3397 -> 3342;
3397 -> 3316;
3398 -> 3342;
3398 -> 3316;
3399 -> 3342;
3399 -> 3316;
3400 -> 3342;
3400 -> 3316;
3401 -> 3316;
3402 -> 3399;
3402 -> 3401;
3402 -> 3316;
3403 -> 3400;
3403 -> 3401;
3403 -> 3316;
3404 -> 3402;
3404 -> 3403;
3404 -> 3316;
3405 -> 3397;
3405 -> 3316;
3406 -> 3396;
3406 -> 3316;
3407 -> 3397;
3407 -> 3316;
3408 -> 3398;
3408 -> 3316;
3409 -> 3399;
3409 -> 3316;
3410 -> 3400;
3410 -> 3316;
3411 -> 3405;
3411 -> 3316;
3412 -> 3316;
3413 -> 3406;
3413 -> 3412;
3414 -> 3407;
3414 -> 3412;
3415 -> 3408;
3415 -> 3412;
3416 -> 3409;
3416 -> 3412;
3417 -> 3410;
3417 -> 3412;
3418 -> 3411;
3418 -> 3412;
3419 -> 3412;
3420 -> 3417;
3420 -> 3419;
3420 -> 3412;
3421 -> 3416;
3421 -> 3419;
3421 -> 3412;
3422 -> 3420;
3422 -> 3421;
3422 -> 3412;
3423 -> 3412;
3424 -> 3413;
3424 -> 3412;
3425 -> 3414;
3425 -> 3412;
3426 -> 3423;
3426 -> 3412;
3427 -> 3418;
3427 -> 3412;
3428 -> 3412;
3429 -> 3424;
3429 -> 3428;
3430 -> 3425;
3430 -> 3428;
3431 -> 3426;
3431 -> 3428;
3432 -> 3427;
3432 -> 3428;
3433 -> 3430;
3433 -> 3428;
3434 -> 3433;
3434 -> 3429;
3434 -> 3371;
3434 -> 3428;
3435 -> 3428;
3436 -> 3434;
3436 -> 3435;
3437 -> 3434;
3437 -> 3435;
3438 -> 3436;
3438 -> 3435;
3439 -> 3436;
3439 -> 3434;
3439 -> 3435;
3440 -> 3435;
3441 -> 3436;
3441 -> 3434;
3441 -> 3435;
3442 -> 3436;
3442 -> 3434;
3442 -> 3435;
3443 -> 3442;
3443 -> 3435;
3444 -> 3435;
3445 -> 3440;
3445 -> 3444;
3445 -> 3428;
3446 -> 3440;
3446 -> 3435;
3447 -> 3440;
3447 -> 3435;
3448 -> 3446;
3448 -> 3435;
3449 -> 3446;
3449 -> 3435;
3450 -> 3446;
3450 -> 3435;
3451 -> 3446;
3451 -> 3435;
3452 -> 3451;
3452 -> 3435;
3453 -> 3451;
3453 -> 3452;
3454 -> 3429;
3454 -> 3433;
3454 -> 3434;
3454 -> 3444;
3454 -> 3428;
3455 -> 3428;
3456 -> 3454;
3456 -> 3455;
3456 -> 3428;
3457 -> 3454;
3457 -> 3456;
3458 -> 3456;
3459 -> 3457;
3459 -> 3458;
3460 -> 3457;
3460 -> 3458;
3461 -> 3459;
3461 -> 3458;
3462 -> 3459;
3462 -> 3457;
3462 -> 3458;
3463 -> 3458;
3464 -> 3459;
3464 -> 3457;
3464 -> 3458;
3465 -> 3459;
3465 -> 3457;
3465 -> 3458;
3466 -> 3465;
3466 -> 3458;
3467 -> 3463;
3467 -> 3458;
3468 -> 3463;
3468 -> 3458;
3469 -> 3467;
3469 -> 3458;
3470 -> 3467;
3470 -> 3458;
3471 -> 3467;
3471 -> 3458;
3472 -> 3467;
3472 -> 3458;
3473 -> 3472;
3473 -> 3458;
3474 -> 3456;
3475 -> 3458;
3475 -> 3474;
3475 -> 3456;
3476 -> 3454;
3476 -> 3428;
3477 -> 3412;
3478 -> 3458;
3478 -> 3477;
3478 -> 3412;
3479 -> 3476;
3479 -> 3412;
3480 -> 3458;
3480 -> 3435;
3481 -> 3458;
3481 -> 3435;
3482 -> 3480;
3482 -> 3435;
3483 -> 3480;
3483 -> 3458;
3483 -> 3435;
3484 -> 3480;
3484 -> 3458;
3484 -> 3435;
3485 -> 3480;
3485 -> 3458;
3485 -> 3435;
3486 -> 3485;
3486 -> 3435;
3487 -> 3463;
3488 -> 3463;
3489 -> 3487;
3489 -> 3463;
3490 -> 3487;
3490 -> 3463;
3491 -> 3487;
3491 -> 3463;
3492 -> 3487;
3492 -> 3463;
3493 -> 3492;
3493 -> 3463;
3494 -> 3458;
3495 -> 3463;
3495 -> 3494;
3495 -> 3458;
3496 -> 3458;
3496 -> 3428;
3497 -> 3463;
3497 -> 3477;
3497 -> 3412;
3498 -> 3496;
3498 -> 3412;
3499 -> 3463;
3500 -> 3463;
3500 -> 3428;
3501 -> 3500;
3501 -> 3412;
3502 -> 3342;
3502 -> 3316;
3503 -> 3342;
3503 -> 3316;
3504 -> 3342;
3504 -> 3316;
3505 -> 3342;
3505 -> 3316;
3506 -> 3505;
3506 -> 3316;
3507 -> 3505;
3507 -> 3316;
3508 -> 3505;
3508 -> 3316;
3509 -> 3505;
3509 -> 3316;
3510 -> 3505;
3510 -> 3316;
3511 -> 3505;
3511 -> 3316;
3512 -> 3502;
3512 -> 3505;
3512 -> 3316;
3513 -> 3503;
3513 -> 3505;
3513 -> 3316;
3514 -> 3504;
3514 -> 3505;
3514 -> 3316;
3515 -> 3505;
3515 -> 3316;
3516 -> 3316;
3517 -> 3515;
3517 -> 3516;
3517 -> 3506;
3517 -> 3512;
3517 -> 3513;
3517 -> 3509;
3517 -> 3514;
3517 -> 3511;
3517 -> 3463;
3517 -> 3316;
3518 -> 3517;
3518 -> 3505;
3518 -> 3316;
3519 -> 3316;
3520 -> 3519;
3520 -> 3505;
3520 -> 3316;
3521 -> 3502;
3521 -> 3316;
3522 -> 3316;
3523 -> 3316;
3524 -> 3521;
3524 -> 3523;
3525 -> 3522;
3525 -> 3523;
3526 -> 3524;
3526 -> 3523;
3527 -> 3523;
3528 -> 3526;
3528 -> 3527;
3529 -> 3525;
3529 -> 3527;
3530 -> 3529;
3530 -> 3527;
3531 -> 3529;
3531 -> 3527;
3532 -> 3529;
3532 -> 3527;
3533 -> 3529;
3533 -> 3527;
3534 -> 3529;
3534 -> 3527;
3535 -> 3527;
3536 -> 3528;
3536 -> 3535;
3536 -> 3527;
3537 -> 3529;
3537 -> 3527;
3538 -> 3537;
3538 -> 3530;
3538 -> 3531;
3538 -> 3532;
3538 -> 3533;
3538 -> 3534;
3538 -> 3527;
3539 -> 3528;
3539 -> 3517;
3539 -> 3518;
3539 -> 3520;
3539 -> 3529;
3539 -> 3527;
3540 -> 3528;
3540 -> 3529;
3540 -> 3527;
3541 -> 3522;
3541 -> 3505;
3541 -> 3316;
3542 -> 3342;
3542 -> 3517;
3542 -> 3518;
3542 -> 3520;
3542 -> 3541;
3542 -> 3519;
3542 -> 3538;
3542 -> 3539;
3542 -> 3540;
3542 -> 3313;
3543 -> 3342;
3543 -> 3316;
3544 -> 3342;
3544 -> 3316;
3545 -> 3342;
3545 -> 3316;
3546 -> 3342;
3546 -> 3316;
3547 -> 3543;
3547 -> 3542;
3547 -> 3316;
3548 -> 3316;
3549 -> 3546;
3549 -> 3548;
3550 -> 3549;
3550 -> 3542;
3550 -> 0;
3550 -> 3548;
3551 -> 3550;
3551 -> 3316;
3552 -> 3316;
3553 -> 3543;
3553 -> 3542;
3553 -> 3552;
3553 -> 3316;
3554 -> 3551;
3554 -> 3553;
3554 -> 3316;
3555 -> 3543;
3555 -> 3542;
3555 -> 3554;
3556 -> 3555;
3556 -> 3316;
3557 -> 3547;
3557 -> 3316;
3558 -> 3544;
3558 -> 3316;
3559 -> 3545;
3559 -> 3316;
3560 -> 3316;
3561 -> 3556;
3561 -> 3560;
3562 -> 3557;
3562 -> 3560;
3563 -> 3558;
3563 -> 3560;
3564 -> 3559;
3564 -> 3560;
3565 -> 3546;
3565 -> 3560;
3566 -> 3560;
3567 -> 3561;
3567 -> 3566;
3567 -> 3560;
3568 -> 3564;
3568 -> 3560;
3569 -> 3564;
3569 -> 3542;
3569 -> 3560;
3570 -> 3565;
3570 -> 3542;
3570 -> 3560;
3571 -> 3560;
3572 -> 3570;
3572 -> 3571;
3573 -> 3570;
3573 -> 3571;
3574 -> 3571;
3575 -> 3574;
3575 -> 3571;
3576 -> 3574;
3576 -> 3571;
3577 -> 3574;
3577 -> 3571;
3578 -> 3574;
3578 -> 3571;
3579 -> 3572;
3579 -> 3574;
3579 -> 3571;
3580 -> 3570;
3580 -> 3574;
3580 -> 3575;
3580 -> 3576;
3580 -> 3577;
3580 -> 3578;
3580 -> 3579;
3580 -> 3560;
3581 -> 3562;
3581 -> 3560;
3582 -> 3563;
3582 -> 3560;
3583 -> 3564;
3583 -> 3560;
3584 -> 3560;
3585 -> 3581;
3585 -> 3584;
3586 -> 3582;
3586 -> 3584;
3587 -> 3583;
3587 -> 3584;
3588 -> 3580;
3588 -> 3584;
3589 -> 3584;
3590 -> 3586;
3590 -> 3589;
3590 -> 3584;
3591 -> 3587;
3591 -> 3589;
3591 -> 3584;
3592 -> 3590;
3592 -> 3591;
3592 -> 3584;
3593 -> 3585;
3593 -> 3588;
3593 -> 3584;
3594 -> 3586;
3594 -> 3588;
3594 -> 3584;
3595 -> 3587;
3595 -> 3588;
3595 -> 3584;
3596 -> 3560;
3597 -> 3561;
3597 -> 3560;
3598 -> 3560;
3599 -> 3597;
3599 -> 3598;
3600 -> 3580;
3600 -> 3598;
3601 -> 3599;
3601 -> 3598;
3602 -> 3598;
3603 -> 3601;
3603 -> 3602;
3604 -> 3600;
3604 -> 3602;
3605 -> 3604;
3605 -> 3602;
3606 -> 3605;
3606 -> 3603;
3606 -> 3580;
3606 -> 3593;
3606 -> 3594;
3606 -> 3595;
3606 -> 3602;
3607 -> 3602;
3608 -> 3606;
3608 -> 3607;
3609 -> 3606;
3609 -> 3607;
3610 -> 3608;
3610 -> 3606;
3610 -> 3607;
3611 -> 3607;
3612 -> 3610;
3612 -> 3611;
3613 -> 3609;
3613 -> 3611;
3614 -> 3613;
3614 -> 3612;
3614 -> 3606;
3614 -> 3611;
3615 -> 3614;
3615 -> 3611;
3616 -> 3614;
3616 -> 3611;
3617 -> 3615;
3617 -> 3611;
3618 -> 3611;
3619 -> 3617;
3619 -> 3618;
3620 -> 3616;
3620 -> 3618;
3621 -> 3620;
3621 -> 3614;
3621 -> 3618;
3622 -> 3619;
3622 -> 3618;
3623 -> 3621;
3623 -> 3622;
3623 -> 3614;
3623 -> 3618;
3624 -> 0;
3624 -> 3618;
3625 -> 3618;
3626 -> 3619;
3626 -> 3623;
3626 -> 3625;
3626 -> 3618;
3627 -> 3620;
3627 -> 3623;
3627 -> 3618;
3628 -> 3619;
3628 -> 3623;
3628 -> 3618;
3629 -> 3620;
3629 -> 3627;
3629 -> 3626;
3630 -> 3619;
3630 -> 3626;
3631 -> 0;
3631 -> 3629;
3632 -> 3619;
3632 -> 3618;
3633 -> 3631;
3633 -> 3618;
3634 -> 3618;
3635 -> 3632;
3635 -> 3634;
3636 -> 3633;
3636 -> 3634;
3637 -> 3620;
3637 -> 3634;
3638 -> 3635;
3638 -> 3634;
3639 -> 3636;
3639 -> 3634;
3640 -> 3634;
3641 -> 3638;
3641 -> 3640;
3642 -> 3639;
3642 -> 3640;
3643 -> 3642;
3643 -> 3640;
3644 -> 3640;
3645 -> 3641;
3645 -> 3640;
3646 -> 3642;
3646 -> 3640;
3647 -> 3640;
3648 -> 3640;
3649 -> 3645;
3649 -> 3648;
3650 -> 3646;
3650 -> 3648;
3651 -> 3647;
3651 -> 3648;
3652 -> 3649;
3652 -> 3651;
3652 -> 3648;
3653 -> 3650;
3653 -> 3651;
3653 -> 3648;
3654 -> 3647;
3654 -> 3634;
3655 -> 3634;
3656 -> 3634;
3657 -> 3637;
3657 -> 3656;
3658 -> 3657;
3658 -> 3629;
3658 -> 3656;
3659 -> 3658;
3659 -> 3634;
3660 -> 3654;
3660 -> 3634;
3661 -> 3655;
3661 -> 3634;
3662 -> 3660;
3662 -> 3661;
3662 -> 3659;
3662 -> 3652;
3662 -> 3653;
3662 -> 3629;
3662 -> 3634;
3663 -> 3634;
3664 -> 3662;
3664 -> 3663;
3665 -> 3664;
3665 -> 3662;
3665 -> 3663;
3666 -> 3635;
3666 -> 3665;
3667 -> 3665;
3668 -> 3666;
3668 -> 3667;
3669 -> 3668;
3669 -> 3667;
3670 -> 3668;
3670 -> 3667;
3671 -> 3670;
3671 -> 3668;
3671 -> 3667;
3672 -> 3669;
3672 -> 3667;
3673 -> 3671;
3673 -> 3672;
3673 -> 3668;
3673 -> 3667;
3674 -> 3670;
3674 -> 3673;
3674 -> 3667;
3675 -> 3669;
3675 -> 3673;
3675 -> 3667;
3676 -> 3669;
3676 -> 3667;
3677 -> 3667;
3678 -> 3676;
3678 -> 3677;
3679 -> 3670;
3679 -> 3677;
3680 -> 3678;
3680 -> 3674;
3680 -> 3677;
3681 -> 3677;
3682 -> 3681;
3682 -> 3677;
3683 -> 3678;
3683 -> 3674;
3683 -> 3677;
3684 -> 3679;
3684 -> 3683;
3684 -> 3680;
3684 -> 3674;
3684 -> 3677;
3685 -> 3679;
3685 -> 3683;
3685 -> 3680;
3685 -> 3674;
3685 -> 3684;
3686 -> 3679;
3686 -> 3683;
3686 -> 3685;
3687 -> 3685;
3688 -> 3686;
3688 -> 3677;
3689 -> 3677;
3690 -> 3688;
3690 -> 3689;
3690 -> 3677;
3691 -> 3688;
3691 -> 3678;
3691 -> 3677;
3692 -> 3688;
3692 -> 3690;
3693 -> 0;
3693 -> 3690;
3694 -> 3688;
3694 -> 3692;
3694 -> 3690;
3695 -> 3677;
3696 -> 3695;
3696 -> 3667;
3697 -> 3669;
3697 -> 3667;
3698 -> 3670;
3698 -> 3694;
3698 -> 3667;
3699 -> 3674;
3699 -> 3667;
3700 -> 3696;
3700 -> 3667;
3701 -> 3667;
3702 -> 3697;
3702 -> 3701;
3703 -> 3698;
3703 -> 3701;
3704 -> 3699;
3704 -> 3701;
3705 -> 3700;
3705 -> 3701;
3706 -> 3670;
3706 -> 3701;
3707 -> 3705;
3707 -> 3701;
3708 -> 3701;
3709 -> 3705;
3709 -> 3701;
3710 -> 3704;
3710 -> 3709;
3711 -> 0;
3711 -> 3710;
3712 -> 3702;
3712 -> 3701;
3713 -> 3711;
3713 -> 3701;
3714 -> 3701;
3715 -> 3712;
3715 -> 3714;
3716 -> 3713;
3716 -> 3714;
3717 -> 3716;
3717 -> 3714;
3718 -> 3714;
3719 -> 3714;
3719 -> 3701;
3720 -> 3701;
3721 -> 3701;
3722 -> 3706;
3722 -> 3721;
3723 -> 3722;
3723 -> 3694;
3723 -> 3721;
3724 -> 3723;
3724 -> 3701;
3725 -> 3719;
3725 -> 3701;
3726 -> 3720;
3726 -> 3701;
3727 -> 3725;
3727 -> 3726;
3727 -> 3724;
3727 -> 3715;
3727 -> 3716;
3727 -> 3694;
3727 -> 3701;
3728 -> 3701;
3729 -> 3727;
3730 -> 3702;
3730 -> 3727;
3731 -> 3727;
3732 -> 3706;
3732 -> 3731;
3733 -> 3731;
3734 -> 3732;
3734 -> 3727;
3734 -> 3733;
3735 -> 3734;
3735 -> 3731;
3736 -> 3735;
3736 -> 3727;
3737 -> 3702;
3737 -> 3727;
3737 -> 3736;
3738 -> 3703;
3738 -> 3736;
3739 -> 3736;
3740 -> 3736;
3741 -> 3737;
3741 -> 3740;
3742 -> 3738;
3742 -> 3740;
3743 -> 3739;
3743 -> 3740;
3744 -> 3739;
3744 -> 3740;
3745 -> 3740;
3746 -> 3741;
3746 -> 3745;
3746 -> 3740;
3747 -> 3744;
3747 -> 3740;
3748 -> 3740;
3749 -> 3743;
3749 -> 3748;
3749 -> 3740;
3750 -> 3744;
3750 -> 3748;
3750 -> 3740;
3751 -> 3742;
3751 -> 3740;
3752 -> 3742;
3752 -> 3740;
3753 -> 3751;
3753 -> 3740;
3754 -> 3740;
3755 -> 3753;
3755 -> 3754;
3756 -> 3752;
3756 -> 3754;
3757 -> 3754;
3758 -> 3757;
3758 -> 3754;
3759 -> 3756;
3759 -> 3755;
3759 -> 3742;
3760 -> 3754;
3760 -> 3740;
3761 -> 3740;
3762 -> 3752;
3762 -> 3761;
3763 -> 3762;
3763 -> 3759;
3763 -> 3761;
3764 -> 3740;
3765 -> 3753;
3765 -> 3764;
3766 -> 3760;
3766 -> 3764;
3767 -> 3763;
3767 -> 3764;
3768 -> 3752;
3768 -> 3764;
3769 -> 3764;
3770 -> 3768;
3770 -> 3769;
3771 -> 3770;
3771 -> 3759;
3771 -> 3769;
3772 -> 3771;
3772 -> 3764;
3773 -> 3764;
3774 -> 3765;
3774 -> 3772;
3774 -> 3764;
3775 -> 3766;
3775 -> 3764;
3776 -> 3767;
3776 -> 3775;
3777 -> 0;
3777 -> 3776;
3778 -> 3765;
3778 -> 3764;
3779 -> 3777;
3779 -> 3764;
3780 -> 3764;
3781 -> 3778;
3781 -> 3780;
3782 -> 3779;
3782 -> 3780;
3783 -> 3782;
3783 -> 3780;
3784 -> 3780;
3785 -> 3780;
3785 -> 3764;
3786 -> 3764;
3787 -> 3764;
3788 -> 3768;
3788 -> 3787;
3789 -> 3788;
3789 -> 3759;
3789 -> 3787;
3790 -> 3789;
3790 -> 3764;
3791 -> 3785;
3791 -> 3764;
3792 -> 3786;
3792 -> 3764;
3793 -> 3791;
3793 -> 3792;
3793 -> 3790;
3793 -> 3781;
3793 -> 3782;
3793 -> 3759;
3793 -> 3764;
3794 -> 3764;
3795 -> 3793;
3796 -> 3768;
3796 -> 3795;
3797 -> 3796;
3797 -> 3793;
3797 -> 3795;
3798 -> 3797;
3798 -> 3793;
3799 -> 3767;
3799 -> 3793;
3800 -> 3799;
3801 -> 3768;
3801 -> 3800;
3802 -> 3801;
3802 -> 3793;
3802 -> 3800;
3803 -> 3802;
3803 -> 3799;
3804 -> 3798;
3804 -> 3799;
3805 -> 3765;
3805 -> 3799;
3806 -> 3766;
3806 -> 3799;
3807 -> 3799;
3808 -> 3799;
3809 -> 3803;
3809 -> 3808;
3810 -> 3804;
3810 -> 3808;
3811 -> 3805;
3811 -> 3808;
3812 -> 3806;
3812 -> 3808;
3813 -> 3807;
3813 -> 3808;
3814 -> 3810;
3814 -> 3808;
3815 -> 3808;
3816 -> 3814;
3816 -> 3815;
3817 -> 3813;
3817 -> 3815;
3818 -> 3815;
3819 -> 3815;
3820 -> 3816;
3820 -> 3819;
3820 -> 3815;
3821 -> 3816;
3821 -> 3817;
3821 -> 3815;
3822 -> 3816;
3822 -> 3793;
3822 -> 3817;
3822 -> 3815;
3823 -> 3816;
3823 -> 3793;
3823 -> 3817;
3823 -> 3815;
3824 -> 3818;
3824 -> 3817;
3824 -> 3815;
3825 -> 3813;
3825 -> 3808;
3826 -> 3813;
3826 -> 3808;
3827 -> 3813;
3827 -> 3808;
3828 -> 3813;
3828 -> 3808;
3829 -> 3813;
3829 -> 3808;
3830 -> 3808;
3831 -> 3809;
3831 -> 3830;
3831 -> 3808;
3832 -> 3808;
3833 -> 3811;
3833 -> 3832;
3833 -> 3808;
3834 -> 3809;
3834 -> 3813;
3834 -> 3808;
3835 -> 3811;
3835 -> 3813;
3835 -> 3812;
3835 -> 3808;
3836 -> 3835;
3836 -> 3813;
3836 -> 3808;
3837 -> 3812;
3837 -> 3808;
3838 -> 3811;
3838 -> 3793;
3838 -> 3837;
3839 -> 3811;
3839 -> 3838;
3840 -> 3839;
3840 -> 3838;
3840 -> 3813;
3841 -> 3799;
3842 -> 3768;
3842 -> 3841;
3843 -> 3842;
3843 -> 3838;
3843 -> 3841;
3844 -> 3843;
3844 -> 3799;
3845 -> 3765;
3845 -> 3799;
3846 -> 3799;
3847 -> 3793;
3848 -> 3847;
3848 -> 3844;
3849 -> 3848;
3849 -> 3793;
3850 -> 3785;
3850 -> 3793;
3851 -> 3807;
3851 -> 3793;
3852 -> 3850;
3852 -> 3851;
3852 -> 3849;
3852 -> 3781;
3852 -> 3782;
3852 -> 3823;
3852 -> 3822;
3852 -> 3821;
3852 -> 3824;
3852 -> 3817;
3852 -> 3834;
3852 -> 3836;
3852 -> 3827;
3852 -> 3828;
3852 -> 3829;
3852 -> 3840;
3852 -> 3844;
3852 -> 3835;
3852 -> 3838;
3852 -> 3793;
3853 -> 3793;
3854 -> 3807;
3854 -> 3764;
3855 -> 3742;
3855 -> 3854;
3855 -> 3852;
3855 -> 3740;
3856 -> 3740;
3857 -> 3740;
3857 -> 3855;
3857 -> 3856;
3858 -> 3855;
3858 -> 3740;
3859 -> 3704;
3859 -> 3727;
3860 -> 3702;
3860 -> 3859;
3861 -> 3702;
3861 -> 3857;
3861 -> 3859;
3862 -> 3858;
3862 -> 3859;
3863 -> 3705;
3863 -> 3859;
3864 -> 3859;
3865 -> 3860;
3865 -> 3864;
3866 -> 3861;
3866 -> 3864;
3867 -> 3862;
3867 -> 3864;
3868 -> 3863;
3868 -> 3864;
3869 -> 3706;
3869 -> 3864;
3870 -> 3864;
3871 -> 3866;
3871 -> 3864;
3872 -> 3864;
3873 -> 3866;
3873 -> 3872;
3873 -> 3864;
3874 -> 3864;
3875 -> 3867;
3875 -> 3864;
3876 -> 3875;
3877 -> 3875;
3877 -> 3876;
3878 -> 3877;
3878 -> 3857;
3878 -> 3876;
3879 -> 3878;
3879 -> 3875;
3880 -> 3866;
3880 -> 3864;
3881 -> 3879;
3881 -> 3880;
3881 -> 3857;
3881 -> 3864;
3882 -> 3864;
3883 -> 3881;
3883 -> 3882;
3883 -> 3864;
3884 -> 3881;
3884 -> 3864;
3885 -> 3867;
3885 -> 3864;
3886 -> 3865;
3886 -> 3864;
3887 -> 3868;
3887 -> 3864;
3888 -> 3864;
3889 -> 3864;
3890 -> 3884;
3890 -> 3889;
3891 -> 3885;
3891 -> 3889;
3892 -> 3886;
3892 -> 3889;
3893 -> 3887;
3893 -> 3889;
3894 -> 3888;
3894 -> 3889;
3895 -> 3889;
3896 -> 3894;
3896 -> 3895;
3897 -> 3895;
3898 -> 3895;
3899 -> 3891;
3899 -> 3898;
3899 -> 3895;
3900 -> 3891;
3900 -> 3881;
3900 -> 3896;
3900 -> 3895;
3901 -> 3891;
3901 -> 3881;
3901 -> 3896;
3901 -> 3895;
3902 -> 3897;
3902 -> 3896;
3902 -> 3895;
3903 -> 3894;
3903 -> 3889;
3904 -> 3894;
3904 -> 3889;
3905 -> 3894;
3905 -> 3889;
3906 -> 3894;
3906 -> 3889;
3907 -> 3894;
3907 -> 3889;
3908 -> 3889;
3909 -> 3890;
3909 -> 3908;
3909 -> 3889;
3910 -> 3889;
3911 -> 3892;
3911 -> 3910;
3911 -> 3889;
3912 -> 3892;
3912 -> 3894;
3912 -> 3893;
3912 -> 3889;
3913 -> 3912;
3913 -> 3894;
3913 -> 3889;
3914 -> 3893;
3914 -> 3889;
3915 -> 3892;
3915 -> 3881;
3915 -> 3914;
3916 -> 3892;
3916 -> 3915;
3917 -> 3892;
3917 -> 3916;
3918 -> 3917;
3918 -> 3916;
3918 -> 3894;
3919 -> 3888;
3919 -> 3859;
3920 -> 3727;
3921 -> 3920;
3921 -> 3916;
3922 -> 3921;
3922 -> 3727;
3923 -> 3719;
3923 -> 3727;
3924 -> 3919;
3924 -> 3727;
3925 -> 3923;
3925 -> 3924;
3925 -> 3922;
3925 -> 3715;
3925 -> 3716;
3925 -> 3901;
3925 -> 3900;
3925 -> 3891;
3925 -> 3902;
3925 -> 3896;
3925 -> 3890;
3925 -> 3913;
3925 -> 3905;
3925 -> 3906;
3925 -> 3907;
3925 -> 3918;
3925 -> 3916;
3925 -> 3912;
3925 -> 3727;
3926 -> 3727;
3927 -> 3919;
3927 -> 3701;
3928 -> 3668;
3928 -> 3927;
3928 -> 3925;
3928 -> 3667;
3929 -> 3636;
3929 -> 3777;
3929 -> 3665;
3930 -> 3929;
3931 -> 3928;
3931 -> 3930;
3932 -> 3931;
3932 -> 3928;
3932 -> 3930;
3933 -> 3930;
3934 -> 3932;
3934 -> 3933;
3934 -> 3930;
3935 -> 3934;
3935 -> 3930;
3936 -> 3931;
3936 -> 3928;
3936 -> 3935;
3937 -> 3936;
3937 -> 3929;
3938 -> 3635;
3938 -> 3929;
3939 -> 3636;
3939 -> 0;
3939 -> 3929;
3940 -> 3937;
3940 -> 3939;
3941 -> 3928;
3941 -> 3939;
3942 -> 3939;
3943 -> 3939;
3944 -> 3940;
3944 -> 3943;
3945 -> 3941;
3945 -> 3943;
3946 -> 3942;
3946 -> 3943;
3947 -> 3942;
3947 -> 3943;
3948 -> 3945;
3948 -> 3943;
3949 -> 3943;
3950 -> 3948;
3950 -> 3949;
3951 -> 3947;
3951 -> 3949;
3952 -> 3949;
3953 -> 3949;
3954 -> 3950;
3954 -> 3953;
3954 -> 3949;
3955 -> 3950;
3955 -> 3937;
3955 -> 3951;
3955 -> 3949;
3956 -> 3950;
3956 -> 3937;
3956 -> 3951;
3956 -> 3949;
3957 -> 3952;
3957 -> 3951;
3957 -> 3949;
3958 -> 3947;
3958 -> 3943;
3959 -> 3947;
3959 -> 3943;
3960 -> 3947;
3960 -> 3943;
3961 -> 3947;
3961 -> 3943;
3962 -> 3947;
3962 -> 3943;
3963 -> 3943;
3964 -> 3944;
3964 -> 3963;
3964 -> 3943;
3965 -> 3944;
3965 -> 3947;
3965 -> 3943;
3966 -> 3341;
3966 -> 3943;
3967 -> 3966;
3967 -> 3946;
3967 -> 3943;
3968 -> 3967;
3968 -> 3947;
3968 -> 3943;
3969 -> 3939;
3970 -> 3635;
3970 -> 3937;
3970 -> 3969;
3970 -> 3939;
3971 -> 3937;
3971 -> 3970;
3972 -> 3942;
3972 -> 3970;
3973 -> 3970;
3974 -> 3970;
3975 -> 3971;
3975 -> 3974;
3976 -> 3972;
3976 -> 3974;
3977 -> 3973;
3977 -> 3974;
3978 -> 3976;
3978 -> 3974;
3979 -> 3974;
3980 -> 3978;
3980 -> 3979;
3981 -> 3977;
3981 -> 3979;
3982 -> 3980;
3982 -> 3979;
3983 -> 3979;
3984 -> 3982;
3984 -> 3983;
3985 -> 3983;
3986 -> 3984;
3986 -> 3985;
3986 -> 3983;
3987 -> 3984;
3987 -> 3955;
3987 -> 3981;
3987 -> 3983;
3988 -> 3984;
3988 -> 3956;
3988 -> 3981;
3988 -> 3983;
3989 -> 3977;
3989 -> 3974;
3990 -> 3977;
3990 -> 3974;
3991 -> 3974;
3992 -> 3975;
3992 -> 3991;
3992 -> 3974;
3993 -> 3975;
3993 -> 3977;
3993 -> 3974;
3994 -> 3635;
3994 -> 3937;
3994 -> 3665;
3995 -> 3665;
3996 -> 3994;
3996 -> 3995;
3997 -> 3973;
3997 -> 3995;
3998 -> 3997;
3998 -> 3987;
3998 -> 3995;
3999 -> 0;
3999 -> 3995;
4000 -> 3995;
4001 -> 3998;
4001 -> 4000;
4002 -> 3999;
4002 -> 4000;
4003 -> 3996;
4003 -> 3995;
4004 -> 4001;
4004 -> 4003;
4004 -> 3995;
4005 -> 4004;
4005 -> 3995;
4006 -> 3665;
4007 -> 4006;
4007 -> 4003;
4008 -> 4007;
4008 -> 3665;
4009 -> 3654;
4009 -> 3665;
4010 -> 4005;
4010 -> 3665;
4011 -> 4009;
4011 -> 4010;
4011 -> 4008;
4011 -> 3652;
4011 -> 3653;
4011 -> 3988;
4011 -> 3987;
4011 -> 3984;
4011 -> 3981;
4011 -> 3993;
4011 -> 3990;
4011 -> 4003;
4011 -> 3956;
4011 -> 3955;
4011 -> 3950;
4011 -> 3957;
4011 -> 3951;
4011 -> 3965;
4011 -> 3959;
4011 -> 3968;
4011 -> 3961;
4011 -> 3962;
4011 -> 3665;
4012 -> 3665;
4013 -> 4005;
4013 -> 3634;
4014 -> 3614;
4014 -> 4013;
4014 -> 4011;
4014 -> 3611;
4015 -> 3580;
4015 -> 3560;
4016 -> 3342;
4016 -> 3316;
4017 -> 3342;
4017 -> 3316;
4018 -> 4016;
4018 -> 4014;
4018 -> 3316;
4019 -> 4016;
4019 -> 4014;
4019 -> 3316;
4020 -> 4019;
4021 -> 4019;
4022 -> 4020;
4022 -> 4021;
4023 -> 4020;
4023 -> 4021;
4024 -> 4017;
4024 -> 4021;
4025 -> 4022;
4025 -> 4014;
4025 -> 4021;
4026 -> 4021;
4027 -> 4025;
4027 -> 4026;
4028 -> 4024;
4028 -> 4026;
4029 -> 4027;
4029 -> 4014;
4029 -> 4026;
4030 -> 4027;
4030 -> 4014;
4030 -> 4026;
4031 -> 4026;
4032 -> 4030;
4032 -> 4031;
4033 -> 4030;
4033 -> 4031;
4034 -> 4028;
4034 -> 4031;
4035 -> 4032;
4035 -> 4031;
4036 -> 4033;
4036 -> 4031;
4037 -> 4035;
4037 -> 4036;
4037 -> 4029;
4037 -> 4031;
4038 -> 4037;
4038 -> 4031;
4039 -> 4034;
4039 -> 4037;
4039 -> 4038;
4040 -> 0;
4040 -> 4038;
4041 -> 4038;
4042 -> 4034;
4042 -> 4041;
4043 -> 4042;
4043 -> 4039;
4043 -> 4041;
4044 -> 4041;
4045 -> 4042;
4045 -> 4043;
4045 -> 4044;
4046 -> 4045;
4046 -> 4044;
4047 -> 4044;
4048 -> 4046;
4048 -> 4047;
4049 -> 4048;
4049 -> 4045;
4049 -> 4047;
4050 -> 4049;
4051 -> 4050;
4051 -> 4044;
4052 -> 4051;
4052 -> 4044;
4053 -> 4023;
4053 -> 4052;
4053 -> 4021;
4054 -> 4053;
4054 -> 4021;
4055 -> 4018;
4055 -> 4054;
4055 -> 0;
4055 -> 4019;
4056 -> 4018;
4056 -> 4055;
4056 -> 3316;
4057 -> 4056;
4057 -> 3566;
4057 -> 3560;
4058 -> 3564;
4058 -> 4056;
4058 -> 3560;
4059 -> 3777;
4059 -> 3618;
4060 -> 4056;
4060 -> 3640;
4061 -> 4056;
4061 -> 3663;
4062 -> 4056;
4062 -> 3663;
4063 -> 4062;
4063 -> 4056;
4063 -> 4061;
4063 -> 3663;
4064 -> 4063;
4064 -> 3566;
4064 -> 3560;
4065 -> 3564;
4065 -> 4063;
4065 -> 3560;
4066 -> 3607;
4067 -> 3777;
4067 -> 4066;
4068 -> 4066;
4069 -> 0;
4069 -> 4063;
4070 -> 4066;
4071 -> 4070;
4072 -> 4069;
4072 -> 4071;
4073 -> 4071;
4074 -> 4071;
4075 -> 4071;
4076 -> 4074;
4076 -> 4075;
4077 -> 4074;
4077 -> 4070;
4078 -> 4070;
4079 -> 4070;
4080 -> 4077;
4080 -> 4070;
4081 -> 4078;
4081 -> 4070;
4082 -> 4070;
4083 -> 3342;
4083 -> 3316;
4084 -> 3342;
4084 -> 3316;
4085 -> 0;
4085 -> 3316;
4086 -> 3316;
4087 -> 4085;
4087 -> 4086;
4088 -> 4083;
4088 -> 3316;
4089 -> 3342;
4089 -> 3316;
4090 -> 3342;
4090 -> 3316;
4091 -> 3342;
4091 -> 3316;
4092 -> 3342;
4092 -> 3316;
4093 -> 4089;
4093 -> 4069;
4093 -> 3316;
4094 -> 4090;
4094 -> 3316;
4095 -> 4091;
4095 -> 3316;
4096 -> 4092;
4096 -> 3316;
4097 -> 3316;
4098 -> 4093;
4098 -> 4097;
4099 -> 4094;
4099 -> 4097;
4100 -> 4095;
4100 -> 4097;
4101 -> 4096;
4101 -> 4097;
4102 -> 4099;
4102 -> 4097;
4103 -> 4098;
4103 -> 4069;
4103 -> 4097;
4104 -> 4102;
4104 -> 4103;
4104 -> 4069;
4104 -> 4097;
4105 -> 4097;
4106 -> 4105;
4106 -> 3316;
4107 -> 3342;
4107 -> 4106;
4107 -> 4104;
4107 -> 3313;
4108 -> 4107;
4108 -> 3566;
4108 -> 3560;
4109 -> 3564;
4109 -> 4107;
4109 -> 3560;
4110 -> 3564;
4110 -> 4109;
4111 -> 4109;
4112 -> 4110;
4112 -> 4071;
4113 -> 3342;
4113 -> 3316;
4114 -> 3342;
4114 -> 3316;
4115 -> 3342;
4115 -> 3316;
4116 -> 3316;
4117 -> 4114;
4117 -> 4116;
4117 -> 3316;
4118 -> 4115;
4118 -> 3316;
4119 -> 4115;
4119 -> 4110;
4119 -> 4113;
4119 -> 3316;
4120 -> 4114;
4120 -> 3316;
4121 -> 3316;
4122 -> 3316;
4123 -> 4118;
4123 -> 4122;
4124 -> 4119;
4124 -> 4122;
4125 -> 4120;
4125 -> 4122;
4126 -> 4121;
4126 -> 4122;
4127 -> 4123;
4127 -> 4122;
4128 -> 4124;
4128 -> 4122;
4129 -> 4122;
4130 -> 4127;
4130 -> 4129;
4131 -> 4128;
4131 -> 4129;
4132 -> 4126;
4132 -> 4129;
4133 -> 4132;
4133 -> 4129;
4134 -> 4132;
4134 -> 4129;
4135 -> 4132;
4135 -> 4129;
4136 -> 4132;
4136 -> 4129;
4137 -> 4132;
4137 -> 4129;
4138 -> 4129;
4139 -> 4130;
4139 -> 4138;
4139 -> 4129;
4140 -> 4131;
4140 -> 4129;
4141 -> 0;
4141 -> 4129;
4142 -> 4129;
4143 -> 4140;
4143 -> 4142;
4144 -> 4141;
4144 -> 4142;
4145 -> 4131;
4145 -> 4129;
4146 -> 0;
4146 -> 4129;
4147 -> 4129;
4148 -> 4145;
4148 -> 4147;
4149 -> 4146;
4149 -> 4147;
4150 -> 4130;
4150 -> 4132;
4150 -> 4129;
4151 -> 4131;
4151 -> 4132;
4151 -> 4129;
4152 -> 4130;
4152 -> 4110;
4152 -> 4132;
4152 -> 4129;
4153 -> 4126;
4153 -> 4122;
4154 -> 4122;
4155 -> 4125;
4155 -> 4154;
4155 -> 4122;
4156 -> 4125;
4156 -> 4126;
4156 -> 4122;
4157 -> 3342;
4157 -> 4121;
4157 -> 4110;
4157 -> 4152;
4157 -> 4151;
4157 -> 4150;
4157 -> 4136;
4157 -> 4137;
4157 -> 4156;
4157 -> 3313;
4158 -> 3342;
4158 -> 3316;
4159 -> 3342;
4159 -> 3316;
4160 -> 3342;
4160 -> 3316;
4161 -> 3342;
4161 -> 3316;
4162 -> 3342;
4162 -> 3316;
4163 -> 4158;
4163 -> 3316;
4164 -> 4159;
4164 -> 3316;
4165 -> 4160;
4165 -> 3316;
4166 -> 4161;
4166 -> 3316;
4167 -> 3316;
4168 -> 4163;
4168 -> 4167;
4169 -> 4164;
4169 -> 4167;
4170 -> 4165;
4170 -> 4167;
4171 -> 4166;
4171 -> 4167;
4172 -> 4162;
4172 -> 4167;
4173 -> 4167;
4174 -> 4169;
4174 -> 4173;
4174 -> 4167;
4175 -> 4168;
4175 -> 4167;
4176 -> 4169;
4176 -> 4167;
4177 -> 4170;
4177 -> 4167;
4178 -> 4167;
4179 -> 4170;
4179 -> 4178;
4179 -> 4167;
4180 -> 4179;
4180 -> 4171;
4180 -> 4167;
4181 -> 4167;
4182 -> 4175;
4182 -> 4181;
4183 -> 4176;
4183 -> 4181;
4184 -> 4177;
4184 -> 4181;
4185 -> 4180;
4185 -> 4181;
4186 -> 4172;
4186 -> 4181;
4187 -> 4182;
4187 -> 4157;
4187 -> 4181;
4188 -> 4182;
4188 -> 4187;
4189 -> 4183;
4189 -> 4187;
4190 -> 4187;
4191 -> 4188;
4191 -> 4190;
4192 -> 4189;
4192 -> 4190;
4193 -> 4186;
4193 -> 4190;
4194 -> 4191;
4194 -> 4190;
4195 -> 4194;
4195 -> 4190;
4196 -> 4192;
4196 -> 4190;
4197 -> 4190;
4198 -> 4195;
4198 -> 4197;
4199 -> 4196;
4199 -> 4197;
4200 -> 4193;
4200 -> 4197;
4201 -> 4198;
4201 -> 4187;
4201 -> 4197;
4202 -> 4199;
4202 -> 4197;
4203 -> 4198;
4203 -> 4197;
4204 -> 4197;
4205 -> 4201;
4205 -> 4204;
4206 -> 4202;
4206 -> 4204;
4207 -> 4203;
4207 -> 4204;
4208 -> 4200;
4208 -> 4204;
4209 -> 4208;
4209 -> 4201;
4209 -> 4204;
4210 -> 4205;
4210 -> 4204;
4211 -> 4207;
4211 -> 4204;
4212 -> 4206;
4212 -> 4204;
4213 -> 4204;
4214 -> 4209;
4214 -> 4213;
4215 -> 4210;
4215 -> 4213;
4216 -> 4211;
4216 -> 4213;
4217 -> 4212;
4217 -> 4213;
4218 -> 4215;
4218 -> 4213;
4219 -> 4214;
4219 -> 4218;
4219 -> 4201;
4219 -> 4213;
4220 -> 4213;
4221 -> 4219;
4221 -> 4220;
4221 -> 4213;
4222 -> 4219;
4222 -> 4213;
4223 -> 4217;
4223 -> 4213;
4224 -> 4216;
4224 -> 4213;
4225 -> 4213;
4226 -> 4222;
4226 -> 4225;
4227 -> 4223;
4227 -> 4225;
4228 -> 4224;
4228 -> 4225;
4229 -> 4226;
4229 -> 4219;
4229 -> 4225;
4230 -> 4225;
4231 -> 4229;
4231 -> 4230;
4231 -> 4225;
4232 -> 4219;
4232 -> 4213;
4233 -> 4194;
4233 -> 4229;
4233 -> 4190;
4234 -> 4190;
4235 -> 4233;
4235 -> 4234;
4236 -> 4193;
4236 -> 4234;
4237 -> 4232;
4237 -> 4190;
4238 -> 4190;
4239 -> 4237;
4239 -> 4238;
4240 -> 4239;
4240 -> 4238;
4241 -> 4238;
4242 -> 4238;
4243 -> 4240;
4243 -> 4242;
4244 -> 4241;
4244 -> 4242;
4245 -> 4243;
4245 -> 4242;
4246 -> 4243;
4246 -> 4244;
4246 -> 4242;
4247 -> 4242;
4248 -> 4247;
4248 -> 4244;
4248 -> 4242;
4249 -> 4242;
4250 -> 4249;
4250 -> 4244;
4250 -> 4242;
4251 -> 4241;
4251 -> 4190;
4252 -> 4190;
4253 -> 4235;
4253 -> 4251;
4253 -> 4252;
4253 -> 4246;
4253 -> 4248;
4253 -> 4250;
4253 -> 4190;
4254 -> 4167;
4255 -> 4253;
4255 -> 4254;
4256 -> 4255;
4256 -> 4253;
4256 -> 4254;
4257 -> 4256;
4257 -> 4167;
4258 -> 4257;
4259 -> 4258;
4259 -> 4257;
4260 -> 4259;
4261 -> 4253;
4261 -> 4260;
4262 -> 4261;
4262 -> 4253;
4262 -> 4260;
4263 -> 4262;
4263 -> 4259;
4264 -> 4172;
4264 -> 4259;
4265 -> 4168;
4265 -> 4259;
4266 -> 4169;
4266 -> 4259;
4267 -> 4264;
4267 -> 4265;
4267 -> 4266;
4267 -> 4263;
4267 -> 4235;
4267 -> 4253;
4267 -> 4259;
4268 -> 4259;
4269 -> 4267;
4269 -> 4268;
4270 -> 4267;
4270 -> 4268;
4271 -> 4267;
4271 -> 4268;
4272 -> 4267;
4272 -> 4268;
4273 -> 4267;
4273 -> 4268;
4274 -> 4269;
4274 -> 4268;
4275 -> 4270;
4275 -> 4268;
4276 -> 4271;
4276 -> 4268;
4277 -> 4272;
4277 -> 4268;
4278 -> 4268;
4279 -> 4274;
4279 -> 4278;
4280 -> 4275;
4280 -> 4278;
4281 -> 4276;
4281 -> 4278;
4282 -> 4277;
4282 -> 4278;
4283 -> 4273;
4283 -> 4278;
4284 -> 4280;
4284 -> 4267;
4284 -> 4278;
4285 -> 4279;
4285 -> 4284;
4286 -> 4280;
4286 -> 4284;
4287 -> 4281;
4287 -> 4284;
4288 -> 4282;
4288 -> 4284;
4289 -> 4284;
4290 -> 4283;
4290 -> 4289;
4291 -> 4290;
4291 -> 4267;
4291 -> 4289;
4292 -> 4291;
4292 -> 4284;
4293 -> 4284;
4294 -> 4283;
4294 -> 4293;
4295 -> 4293;
4296 -> 4294;
4296 -> 4295;
4297 -> 4296;
4297 -> 4267;
4297 -> 4295;
4298 -> 4297;
4298 -> 4293;
4299 -> 4298;
4299 -> 4293;
4300 -> 4298;
4300 -> 4267;
4300 -> 0;
4300 -> 4293;
4301 -> 4298;
4301 -> 4293;
4302 -> 4298;
4302 -> 4267;
4302 -> 4293;
4303 -> 4302;
4303 -> 4284;
4304 -> 4283;
4304 -> 4267;
4304 -> 4284;
4305 -> 4284;
4306 -> 4285;
4306 -> 4305;
4307 -> 4286;
4307 -> 4305;
4308 -> 4287;
4308 -> 4305;
4309 -> 4288;
4309 -> 4305;
4310 -> 4292;
4310 -> 4305;
4311 -> 4303;
4311 -> 4305;
4312 -> 4304;
4312 -> 4305;
4313 -> 4307;
4313 -> 4305;
4314 -> 4307;
4314 -> 4313;
4314 -> 0;
4314 -> 4305;
4315 -> 4307;
4315 -> 4313;
4315 -> 0;
4315 -> 4305;
4316 -> 4307;
4316 -> 4305;
4317 -> 4311;
4317 -> 4305;
4318 -> 4316;
4318 -> 4317;
4318 -> 4313;
4318 -> 4305;
4319 -> 4309;
4319 -> 4305;
4320 -> 4319;
4320 -> 4305;
4321 -> 4306;
4321 -> 4305;
4322 -> 4318;
4322 -> 4305;
4323 -> 4308;
4323 -> 4305;
4324 -> 4310;
4324 -> 4305;
4325 -> 4312;
4325 -> 4305;
4326 -> 4305;
4327 -> 4321;
4327 -> 4326;
4328 -> 4322;
4328 -> 4326;
4329 -> 4323;
4329 -> 4326;
4330 -> 4324;
4330 -> 4326;
4331 -> 4325;
4331 -> 4326;
4332 -> 4326;
4333 -> 4327;
4333 -> 4332;
4333 -> 4326;
4334 -> 4328;
4334 -> 4326;
4335 -> 4330;
4335 -> 4326;
4336 -> 4326;
4337 -> 4334;
4337 -> 4335;
4337 -> 4336;
4337 -> 4318;
4337 -> 4326;
4338 -> 4326;
4339 -> 4337;
4339 -> 4326;
4340 -> 4326;
4341 -> 4338;
4341 -> 4340;
4341 -> 4326;
4342 -> 4337;
4342 -> 4326;
4343 -> 4342;
4343 -> 4305;
4344 -> 4319;
4344 -> 4343;
4345 -> 4284;
4346 -> 4268;
4347 -> 4253;
4347 -> 4257;
4348 -> 4347;
4348 -> 3316;
4349 -> 4159;
4349 -> 3316;
4350 -> 4158;
4350 -> 3316;
4351 -> 4160;
4351 -> 3316;
4352 -> 3316;
4353 -> 4348;
4353 -> 4352;
4354 -> 4349;
4354 -> 4352;
4355 -> 4350;
4355 -> 4352;
4356 -> 4351;
4356 -> 4352;
4357 -> 4162;
4357 -> 4352;
4358 -> 4352;
4359 -> 4353;
4359 -> 4358;
4360 -> 4359;
4360 -> 4253;
4360 -> 4358;
4361 -> 4360;
4361 -> 0;
4361 -> 4358;
4362 -> 4361;
4362 -> 4352;
4363 -> 4353;
4363 -> 4352;
4364 -> 3316;
4365 -> 4363;
4365 -> 4364;
4366 -> 4365;
4366 -> 4253;
4366 -> 4364;
4367 -> 3342;
4367 -> 4366;
4367 -> 4337;
4367 -> 3313;
4368 -> 4367;
4368 -> 3566;
4368 -> 3560;
4369 -> 4367;
4369 -> 3611;
4370 -> 4367;
4370 -> 3611;
4371 -> 4370;
4371 -> 4367;
4371 -> 3611;
4372 -> 4369;
4372 -> 3611;
4373 -> 4371;
4373 -> 4372;
4373 -> 4367;
4373 -> 3611;
4374 -> 4369;
4374 -> 4373;
4375 -> 4373;
4376 -> 4374;
4376 -> 4375;
4377 -> 3777;
4377 -> 4375;
4378 -> 4376;
4378 -> 4375;
4379 -> 4375;
4380 -> 4373;
4381 -> 4376;
4381 -> 4380;
4382 -> 4376;
4382 -> 4380;
4383 -> 3342;
4383 -> 3316;
4384 -> 3342;
4384 -> 3316;
4385 -> 3342;
4385 -> 3316;
4386 -> 3342;
4386 -> 3316;
4387 -> 4383;
4387 -> 3316;
4388 -> 4385;
4388 -> 3316;
4389 -> 4384;
4389 -> 3316;
4390 -> 3316;
4391 -> 4387;
4391 -> 4390;
4392 -> 4388;
4392 -> 4390;
4393 -> 4389;
4393 -> 4390;
4394 -> 4391;
4394 -> 4390;
4395 -> 4390;
4396 -> 4382;
4396 -> 4395;
4396 -> 4390;
4397 -> 4393;
4397 -> 4390;
4398 -> 4392;
4398 -> 4390;
4399 -> 4390;
4400 -> 4397;
4400 -> 4399;
4401 -> 4398;
4401 -> 4399;
4402 -> 4399;
4403 -> 4382;
4403 -> 4402;
4403 -> 4399;
4404 -> 4382;
4404 -> 3566;
4404 -> 3560;
4405 -> 4382;
4405 -> 3607;
4406 -> 4382;
4406 -> 3607;
4407 -> 4406;
4407 -> 4382;
4407 -> 3607;
4408 -> 4405;
4408 -> 3607;
4409 -> 4407;
4409 -> 4408;
4409 -> 4382;
4409 -> 3607;
4410 -> 3607;
4411 -> 4406;
4411 -> 4409;
4411 -> 3607;
4412 -> 4405;
4412 -> 3607;
4413 -> 4406;
4413 -> 4411;
4414 -> 4405;
4414 -> 4411;
4415 -> 3777;
4415 -> 4413;
4416 -> 4405;
4416 -> 3607;
4417 -> 4415;
4417 -> 3607;
4418 -> 3607;
4419 -> 4416;
4419 -> 4418;
4420 -> 4417;
4420 -> 4418;
4421 -> 4420;
4421 -> 4418;
4422 -> 4418;
4423 -> 4418;
4424 -> 4418;
4425 -> 4423;
4425 -> 4424;
4426 -> 4423;
4426 -> 3607;
4427 -> 3607;
4428 -> 3607;
4429 -> 4406;
4429 -> 4428;
4430 -> 4429;
4430 -> 4413;
4430 -> 4428;
4431 -> 4430;
4431 -> 3607;
4432 -> 4426;
4432 -> 3607;
4433 -> 4427;
4433 -> 3607;
4434 -> 4432;
4434 -> 4433;
4434 -> 4431;
4434 -> 4419;
4434 -> 4420;
4434 -> 4413;
4434 -> 3607;
4435 -> 3607;
4436 -> 4405;
4436 -> 4434;
4437 -> 4434;
4438 -> 4436;
4438 -> 4437;
4438 -> 4434;
4439 -> 4436;
4439 -> 4438;
4440 -> 0;
4440 -> 4438;
4441 -> 4438;
4442 -> 4439;
4442 -> 4441;
4443 -> 4440;
4443 -> 4441;
4444 -> 4443;
4444 -> 4441;
4445 -> 4441;
4446 -> 4434;
4447 -> 4415;
4447 -> 3777;
4447 -> 4434;
4448 -> 4415;
4448 -> 0;
4448 -> 4434;
4449 -> 4405;
4449 -> 4442;
4449 -> 4434;
4450 -> 4434;
4451 -> 4449;
4451 -> 4450;
4452 -> 4442;
4452 -> 4450;
4453 -> 4434;
4454 -> 4453;
4454 -> 4451;
4455 -> 4454;
4455 -> 4434;
4456 -> 4426;
4456 -> 4434;
4457 -> 4451;
4457 -> 4434;
4458 -> 4434;
4459 -> 4451;
4459 -> 3607;
4460 -> 4382;
4460 -> 4459;
4460 -> 4455;
4460 -> 3602;
4461 -> 4460;
4461 -> 4129;
4462 -> 4461;
4462 -> 4142;
4463 -> 4460;
4463 -> 4129;
4464 -> 4463;
4464 -> 4147;
4465 -> 3342;
4465 -> 3316;
4466 -> 3342;
4466 -> 3316;
4467 -> 3342;
4467 -> 3316;
4468 -> 3342;
4468 -> 3316;
4469 -> 3342;
4469 -> 3316;
4470 -> 3316;
4471 -> 4465;
4471 -> 4460;
4471 -> 3316;
4472 -> 3316;
4473 -> 4466;
4473 -> 4460;
4473 -> 3316;
4474 -> 4470;
4474 -> 3316;
4475 -> 4472;
4475 -> 3316;
4476 -> 4183;
4476 -> 4460;
4477 -> 4476;
4477 -> 4460;
4478 -> 4477;
4478 -> 4460;
4479 -> 4460;
4480 -> 4479;
4480 -> 4460;
4481 -> 4478;
4481 -> 4460;
4482 -> 4460;
4483 -> 4481;
4483 -> 4460;
4484 -> 4480;
4484 -> 4460;
4485 -> 4460;
4486 -> 4479;
4486 -> 4460;
4487 -> 4479;
4488 -> 4479;
4489 -> 4479;
4490 -> 4487;
4490 -> 4479;
4491 -> 4488;
4491 -> 4479;
4492 -> 4489;
4492 -> 4479;
4493 -> 4491;
4493 -> 4487;
4494 -> 4492;
4494 -> 4487;
4495 -> 4487;
4496 -> 4487;
4496 -> 4479;
4496 -> 0;
4497 -> 4487;
4498 -> 4490;
4498 -> 4487;
4499 -> 4493;
4499 -> 4487;
4500 -> 4494;
4500 -> 4487;
4501 -> 4490;
4501 -> 4487;
4502 -> 4487;
4502 -> 0;
4503 -> 4487;
4503 -> 0;
4504 -> 4500;
4504 -> 4487;
4505 -> 4504;
4505 -> 4487;
4506 -> 4498;
4506 -> 4487;
4507 -> 4499;
4507 -> 4487;
4508 -> 4501;
4508 -> 4487;
4509 -> 4487;
4510 -> 4506;
4510 -> 4509;
4510 -> 4487;
4511 -> 4487;
4512 -> 4487;
4513 -> 4487;
4514 -> 4511;
4514 -> 4513;
4514 -> 4487;
4515 -> 4487;
4516 -> 4515;
4516 -> 4487;
4517 -> 4504;
4517 -> 4516;
4518 -> 4479;
4518 -> 4358;
4519 -> 4518;
4519 -> 4479;
4519 -> 4358;
4520 -> 4519;
4520 -> 0;
4520 -> 4358;
4521 -> 4520;
4521 -> 4352;
4522 -> 3342;
4522 -> 3316;
4523 -> 3342;
4523 -> 3316;
4524 -> 3342;
4524 -> 3316;
4525 -> 4522;
4525 -> 3316;
4526 -> 3316;
4527 -> 4523;
4527 -> 3316;
4528 -> 3316;
4529 -> 3316;
4530 -> 4525;
4530 -> 4529;
4531 -> 4526;
4531 -> 4529;
4532 -> 4527;
4532 -> 4529;
4533 -> 4528;
4533 -> 4529;
4534 -> 4524;
4534 -> 4529;
4536 -> 4535;
4538 -> 4537;
4540 -> 4539;
4542 -> 4538;
4542 -> 4541;
4543 -> 4540;
4543 -> 4541;
4545 -> 4538;
4545 -> 4544;
4546 -> 4540;
4546 -> 4544;
4548 -> 4538;
4548 -> 4547;
4549 -> 4540;
4549 -> 4547;
4551 -> 4538;
4551 -> 4550;
4552 -> 4540;
4552 -> 4550;
4554 -> 4538;
4554 -> 4553;
4555 -> 4540;
4555 -> 4553;
4557 -> 4538;
4557 -> 4556;
4558 -> 4540;
4558 -> 4556;
4560 -> 4538;
4560 -> 4559;
4561 -> 4540;
4561 -> 4559;
4563 -> 4538;
4563 -> 4562;
4564 -> 4540;
4564 -> 4562;
4566 -> 4538;
4566 -> 4565;
4567 -> 4540;
4567 -> 4565;
4569 -> 4538;
4569 -> 4568;
4570 -> 4540;
4570 -> 4568;
4572 -> 4538;
4572 -> 4571;
4574 -> 4538;
4574 -> 4573;
4576 -> 4541;
4576 -> 4575;
4577 -> 4544;
4577 -> 4575;
4578 -> 4547;
4578 -> 4575;
4579 -> 4550;
4579 -> 4575;
4580 -> 4553;
4580 -> 4575;
4581 -> 4556;
4581 -> 4575;
4582 -> 4559;
4582 -> 4575;
4583 -> 4562;
4583 -> 4575;
4584 -> 4565;
4584 -> 4575;
4585 -> 4568;
4585 -> 4575;
4586 -> 4571;
4586 -> 4575;
4587 -> 4573;
4587 -> 4575;
4588 -> 4575;
4590 -> 4538;
4590 -> 4589;
4591 -> 4540;
4591 -> 4589;
4593 -> 4540;
4593 -> 4592;
4594 -> 4538;
4594 -> 4592;
4596 -> 4540;
4596 -> 4595;
4597 -> 4538;
4597 -> 4595;
4599 -> 4540;
4599 -> 4598;
4600 -> 4538;
4600 -> 4598;
4602 -> 4540;
4602 -> 4601;
4603 -> 4538;
4603 -> 4601;
4605 -> 4540;
4605 -> 4604;
4606 -> 4538;
4606 -> 4604;
4608 -> 4540;
4608 -> 4607;
4609 -> 4538;
4609 -> 4607;
4611 -> 4540;
4611 -> 4610;
4612 -> 4538;
4612 -> 4610;
4614 -> 4540;
4614 -> 4613;
4615 -> 4538;
4615 -> 4613;
4617 -> 4540;
4617 -> 4616;
4618 -> 4538;
4618 -> 4616;
4620 -> 4540;
4620 -> 4619;
4621 -> 4538;
4621 -> 4619;
4623 -> 4540;
4623 -> 4622;
4624 -> 4538;
4624 -> 4622;
4626 -> 4589;
4626 -> 4625;
4627 -> 4592;
4627 -> 4625;
4628 -> 4595;
4628 -> 4625;
4629 -> 4598;
4629 -> 4625;
4630 -> 4601;
4630 -> 4625;
4631 -> 4604;
4631 -> 4625;
4632 -> 4607;
4632 -> 4625;
4633 -> 4610;
4633 -> 4625;
4634 -> 4613;
4634 -> 4625;
4635 -> 4616;
4635 -> 4625;
4636 -> 4619;
4636 -> 4625;
4637 -> 4622;
4637 -> 4625;
4638 -> 4625;
4639 -> 4530;
4639 -> 4529;
4640 -> 4531;
4640 -> 4529;
4641 -> 4532;
4641 -> 4529;
4642 -> 4533;
4642 -> 4529;
4643 -> 4529;
4644 -> 4639;
4644 -> 4643;
4645 -> 4640;
4645 -> 4643;
4646 -> 4641;
4646 -> 4643;
4647 -> 4642;
4647 -> 4643;
4648 -> 4534;
4648 -> 4643;
4649 -> 4648;
4649 -> 4643;
4650 -> 4648;
4650 -> 4643;
4651 -> 4648;
4651 -> 4643;
4652 -> 4648;
4652 -> 4643;
4653 -> 4643;
4654 -> 4644;
4654 -> 4653;
4654 -> 4643;
4655 -> 4643;
4656 -> 4647;
4656 -> 4655;
4656 -> 4643;
4657 -> 4643;
4658 -> 4647;
4658 -> 4657;
4658 -> 4643;
4659 -> 4644;
4659 -> 4648;
4659 -> 4643;
4660 -> 4645;
4660 -> 4648;
4660 -> 4643;
4661 -> 4646;
4661 -> 4648;
4661 -> 4643;
4662 -> 4647;
4662 -> 4648;
4662 -> 4643;
4663 -> 3342;
4663 -> 4487;
4663 -> 4659;
4663 -> 4660;
4663 -> 4661;
4663 -> 4662;
4663 -> 3313;
4664 -> 4663;
4665 -> 4663;
4666 -> 4664;
4666 -> 4663;
4667 -> 4664;
4667 -> 4663;
4668 -> 4664;
4668 -> 4663;
4669 -> 4664;
4669 -> 4663;
4670 -> 4669;
4670 -> 4663;
4671 -> 4663;
4672 -> 4663;
4672 -> 3428;
4673 -> 4663;
4673 -> 3477;
4673 -> 3412;
4674 -> 4672;
4674 -> 3412;
4675 -> 4663;
4675 -> 3566;
4675 -> 3560;
4676 -> 4663;
4676 -> 3611;
4677 -> 4663;
4677 -> 3611;
4678 -> 4676;
4678 -> 4663;
4678 -> 3611;
4679 -> 3611;
4680 -> 4678;
4680 -> 4679;
4681 -> 4677;
4681 -> 4679;
4682 -> 4681;
4682 -> 4680;
4682 -> 4663;
4682 -> 4679;
4683 -> 4679;
4684 -> 3777;
4684 -> 4683;
4685 -> 4683;
4686 -> 4683;
4687 -> 4686;
4688 -> 4682;
4688 -> 4687;
4689 -> 4687;
4690 -> 4687;
4691 -> 4687;
4692 -> 4690;
4692 -> 4691;
4693 -> 4690;
4693 -> 4686;
4694 -> 4686;
4695 -> 4686;
4696 -> 4693;
4696 -> 4686;
4697 -> 4694;
4697 -> 4686;
4698 -> 4686;
4699 -> 3611;
4700 -> 4682;
4700 -> 4699;
4701 -> 4682;
4701 -> 4699;
4702 -> 0;
4702 -> 4699;
4703 -> 4699;
4704 -> 4702;
4704 -> 4703;
4705 -> 4701;
4705 -> 4129;
4706 -> 4705;
4706 -> 4142;
4707 -> 4701;
4707 -> 4129;
4708 -> 4707;
4708 -> 4147;
4709 -> 4183;
4709 -> 4701;
4710 -> 4709;
4710 -> 4701;
4711 -> 4710;
4711 -> 4701;
4712 -> 4701;
4713 -> 4711;
4713 -> 4701;
4714 -> 4701;
4715 -> 4713;
4715 -> 4701;
4716 -> 4712;
4716 -> 4701;
4717 -> 4701;
4718 -> 4701;
4719 -> 4701;
4720 -> 4701;
4721 -> 4701;
4722 -> 4719;
4722 -> 4701;
4723 -> 4720;
4723 -> 4701;
4724 -> 4701;
4725 -> 4701;
4725 -> 0;
4726 -> 4701;
4727 -> 4721;
4727 -> 4701;
4728 -> 4722;
4728 -> 4701;
4729 -> 4723;
4729 -> 4701;
4730 -> 4721;
4730 -> 4701;
4731 -> 4721;
4731 -> 0;
4731 -> 4701;
4732 -> 4721;
4732 -> 0;
4732 -> 4701;
4733 -> 4729;
4733 -> 4701;
4734 -> 4733;
4734 -> 4701;
4735 -> 4727;
4735 -> 4701;
4736 -> 4728;
4736 -> 4701;
4737 -> 4730;
4737 -> 4701;
4738 -> 4701;
4739 -> 4735;
4739 -> 4738;
4739 -> 4701;
4740 -> 4701;
4741 -> 4727;
4741 -> 4701;
4742 -> 4701;
4743 -> 4740;
4743 -> 4742;
4743 -> 4701;
4744 -> 4727;
4744 -> 4701;
4745 -> 4744;
4745 -> 4701;
4746 -> 4733;
4746 -> 4745;
4747 -> 4701;
4747 -> 4358;
4748 -> 4747;
4748 -> 4701;
4748 -> 4358;
4749 -> 4748;
4749 -> 0;
4749 -> 4358;
4750 -> 4749;
4750 -> 4352;
4754 -> 4751;
4754 -> 4753;
4755 -> 4752;
4755 -> 4753;
4756 -> 4753;
4757 -> 4756;
4757 -> 4753;
4758 -> 4756;
4758 -> 4753;
4759 -> 4754;
4759 -> 4756;
4759 -> 4753;
4760 -> 4755;
4760 -> 4756;
4760 -> 4753;
4761 -> 4753;
4762 -> 3342;
4762 -> 3316;
4763 -> 3316;
4764 -> 4762;
4764 -> 4727;
4764 -> 4763;
4764 -> 3316;
4765 -> 4764;
4765 -> 3313;
4766 -> 3315;
4766 -> 3313;
4767 -> 3313;
4768 -> 4765;
4768 -> 4767;
4769 -> 4766;
4769 -> 4767;
4770 -> 4768;
4770 -> 4767;
4771 -> 4769;
4771 -> 4767;
4772 -> 4767;
4773 -> 4770;
4773 -> 4772;
4774 -> 4771;
4774 -> 4772;
4775 -> 4773;
4775 -> 4772;
4776 -> 4774;
4776 -> 4772;
4777 -> 4772;
4778 -> 4772;
4779 -> 4775;
4779 -> 4778;
4780 -> 4776;
4780 -> 4778;
4781 -> 4777;
4781 -> 4778;
4782 -> 4778;
4783 -> 4780;
4783 -> 4782;
4783 -> 4778;
4784 -> 4780;
4784 -> 4778;
4785 -> 4784;
4785 -> 214;
4785 -> 3290;
4785 -> 3291;
4785 -> 3292;
4785 -> 3293;
4785 -> 3294;
4785 -> 3295;
4785 -> 3296;
4785 -> 3297;
4785 -> 3298;
4785 -> 3299;
4785 -> 3300;
4785 -> 3301;
4785 -> 3302;
4785 -> 3303;
4785 -> 3304;
4785 -> 3305;
4785 -> 3306;
4785 -> 3307;
4785 -> 3308;
4785 -> 3309;
4785 -> 3310;
4785 -> 3311;
4785 -> 3312;
4785 -> 666;
4785 -> 667;
4785 -> 676;
4785 -> 668;
4785 -> 693;
4785 -> 670;
4785 -> 694;
4785 -> 673;
4785 -> 686;
4785 -> 674;
4785 -> 675;
4785 -> 671;
4785 -> 690;
4785 -> 691;
4785 -> 692;
4785 -> 786;
4785 -> 787;
4785 -> 796;
4785 -> 788;
4785 -> 813;
4785 -> 790;
4785 -> 814;
4785 -> 793;
4785 -> 806;
4785 -> 794;
4785 -> 795;
4785 -> 791;
4785 -> 810;
4785 -> 811;
4785 -> 812;
4785 -> 906;
4785 -> 907;
4785 -> 916;
4785 -> 908;
4785 -> 933;
4785 -> 910;
4785 -> 934;
4785 -> 913;
4785 -> 926;
4785 -> 914;
4785 -> 915;
4785 -> 911;
4785 -> 930;
4785 -> 931;
4785 -> 932;
4785 -> 890;
4785 -> 1026;
4785 -> 1027;
4785 -> 1036;
4785 -> 1028;
4785 -> 1053;
4785 -> 1030;
4785 -> 1054;
4785 -> 1033;
4785 -> 1046;
4785 -> 1034;
4785 -> 1035;
4785 -> 1031;
4785 -> 1050;
4785 -> 1051;
4785 -> 1052;
4785 -> 960;
4785 -> 1010;
4785 -> 1146;
4785 -> 1147;
4785 -> 1156;
4785 -> 1148;
4785 -> 1173;
4785 -> 1150;
4785 -> 1174;
4785 -> 1153;
4785 -> 1166;
4785 -> 1154;
4785 -> 1155;
4785 -> 1151;
4785 -> 1170;
4785 -> 1171;
4785 -> 1172;
4785 -> 1080;
4785 -> 1130;
4785 -> 1266;
4785 -> 1267;
4785 -> 1276;
4785 -> 1268;
4785 -> 1293;
4785 -> 1270;
4785 -> 1294;
4785 -> 1273;
4785 -> 1286;
4785 -> 1274;
4785 -> 1275;
4785 -> 1271;
4785 -> 1290;
4785 -> 1291;
4785 -> 1292;
4785 -> 1200;
4785 -> 1250;
4785 -> 1386;
4785 -> 1387;
4785 -> 1396;
4785 -> 1388;
4785 -> 1413;
4785 -> 1390;
4785 -> 1414;
4785 -> 1393;
4785 -> 1406;
4785 -> 1394;
4785 -> 1395;
4785 -> 1391;
4785 -> 1410;
4785 -> 1411;
4785 -> 1412;
4785 -> 1320;
4785 -> 1370;
4785 -> 1506;
4785 -> 1507;
4785 -> 1516;
4785 -> 1508;
4785 -> 1533;
4785 -> 1510;
4785 -> 1534;
4785 -> 1513;
4785 -> 1526;
4785 -> 1514;
4785 -> 1515;
4785 -> 1511;
4785 -> 1530;
4785 -> 1531;
4785 -> 1532;
4785 -> 1440;
4785 -> 1490;
4785 -> 1626;
4785 -> 1627;
4785 -> 1636;
4785 -> 1628;
4785 -> 1653;
4785 -> 1630;
4785 -> 1654;
4785 -> 1633;
4785 -> 1646;
4785 -> 1634;
4785 -> 1635;
4785 -> 1631;
4785 -> 1650;
4785 -> 1651;
4785 -> 1652;
4785 -> 1560;
4785 -> 1610;
4785 -> 1746;
4785 -> 1747;
4785 -> 1756;
4785 -> 1748;
4785 -> 1773;
4785 -> 1750;
4785 -> 1774;
4785 -> 1753;
4785 -> 1766;
4785 -> 1754;
4785 -> 1755;
4785 -> 1751;
4785 -> 1770;
4785 -> 1771;
4785 -> 1772;
4785 -> 1680;
4785 -> 1730;
4785 -> 1866;
4785 -> 1867;
4785 -> 1876;
4785 -> 1868;
4785 -> 1893;
4785 -> 1870;
4785 -> 1894;
4785 -> 1873;
4785 -> 1886;
4785 -> 1874;
4785 -> 1875;
4785 -> 1871;
4785 -> 1890;
4785 -> 1891;
4785 -> 1892;
4785 -> 1800;
4785 -> 1850;
4785 -> 1956;
4785 -> 1957;
4785 -> 1967;
4785 -> 1958;
4785 -> 1959;
4785 -> 1960;
4785 -> 1962;
4785 -> 1964;
4785 -> 1949;
4785 -> 1965;
4785 -> 1966;
4785 -> 1961;
4785 -> 1953;
4785 -> 1954;
4785 -> 1955;
4785 -> 1920;
4785 -> 2060;
4785 -> 2061;
4785 -> 2070;
4785 -> 2062;
4785 -> 2087;
4785 -> 2064;
4785 -> 2088;
4785 -> 2067;
4785 -> 2080;
4785 -> 2068;
4785 -> 2069;
4785 -> 2065;
4785 -> 2084;
4785 -> 2085;
4785 -> 2086;
4785 -> 1994;
4785 -> 2044;
4785 -> 2180;
4785 -> 2181;
4785 -> 2190;
4785 -> 2182;
4785 -> 2207;
4785 -> 2184;
4785 -> 2208;
4785 -> 2187;
4785 -> 2200;
4785 -> 2188;
4785 -> 2189;
4785 -> 2185;
4785 -> 2204;
4785 -> 2205;
4785 -> 2206;
4785 -> 2114;
4785 -> 2164;
4785 -> 2300;
4785 -> 2301;
4785 -> 2310;
4785 -> 2302;
4785 -> 2327;
4785 -> 2304;
4785 -> 2328;
4785 -> 2307;
4785 -> 2320;
4785 -> 2308;
4785 -> 2309;
4785 -> 2305;
4785 -> 2324;
4785 -> 2325;
4785 -> 2326;
4785 -> 2234;
4785 -> 2284;
4785 -> 2420;
4785 -> 2421;
4785 -> 2430;
4785 -> 2422;
4785 -> 2447;
4785 -> 2424;
4785 -> 2448;
4785 -> 2427;
4785 -> 2440;
4785 -> 2428;
4785 -> 2429;
4785 -> 2425;
4785 -> 2444;
4785 -> 2445;
4785 -> 2446;
4785 -> 2354;
4785 -> 2404;
4785 -> 2540;
4785 -> 2541;
4785 -> 2550;
4785 -> 2542;
4785 -> 2567;
4785 -> 2544;
4785 -> 2568;
4785 -> 2547;
4785 -> 2560;
4785 -> 2548;
4785 -> 2549;
4785 -> 2545;
4785 -> 2564;
4785 -> 2565;
4785 -> 2566;
4785 -> 2474;
4785 -> 2524;
4785 -> 2660;
4785 -> 2661;
4785 -> 2670;
4785 -> 2662;
4785 -> 2687;
4785 -> 2664;
4785 -> 2688;
4785 -> 2667;
4785 -> 2680;
4785 -> 2668;
4785 -> 2669;
4785 -> 2665;
4785 -> 2684;
4785 -> 2685;
4785 -> 2686;
4785 -> 2594;
4785 -> 2644;
4785 -> 2780;
4785 -> 2781;
4785 -> 2790;
4785 -> 2782;
4785 -> 2807;
4785 -> 2784;
4785 -> 2808;
4785 -> 2787;
4785 -> 2800;
4785 -> 2788;
4785 -> 2789;
4785 -> 2785;
4785 -> 2804;
4785 -> 2805;
4785 -> 2806;
4785 -> 2714;
4785 -> 2764;
4785 -> 2900;
4785 -> 2901;
4785 -> 2910;
4785 -> 2902;
4785 -> 2927;
4785 -> 2904;
4785 -> 2928;
4785 -> 2907;
4785 -> 2920;
4785 -> 2908;
4785 -> 2909;
4785 -> 2905;
4785 -> 2924;
4785 -> 2925;
4785 -> 2926;
4785 -> 2834;
4785 -> 2884;
4785 -> 3020;
4785 -> 3021;
4785 -> 3030;
4785 -> 3022;
4785 -> 3047;
4785 -> 3024;
4785 -> 3048;
4785 -> 3027;
4785 -> 3040;
4785 -> 3028;
4785 -> 3029;
4785 -> 3025;
4785 -> 3044;
4785 -> 3045;
4785 -> 3046;
4785 -> 2954;
4785 -> 3004;
4785 -> 3140;
4785 -> 3141;
4785 -> 3150;
4785 -> 3142;
4785 -> 3167;
4785 -> 3144;
4785 -> 3168;
4785 -> 3147;
4785 -> 3160;
4785 -> 3148;
4785 -> 3149;
4785 -> 3145;
4785 -> 3164;
4785 -> 3165;
4785 -> 3166;
4785 -> 3074;
4785 -> 3124;
4785 -> 3260;
4785 -> 3261;
4785 -> 3270;
4785 -> 3262;
4785 -> 3287;
4785 -> 3264;
4785 -> 3288;
4785 -> 3267;
4785 -> 3280;
4785 -> 3268;
4785 -> 3269;
4785 -> 3265;
4785 -> 3284;
4785 -> 3285;
4785 -> 3286;
4785 -> 3194;
4785 -> 3244;
4785 -> 650;
4785 -> 596;
4785 -> 770;
4785 -> 720;
4785 -> 840;
4785 -> 4778;
4786 -> 4778;
4787 -> 4784;
4787 -> 4786;
4787 -> 214;
4787 -> 3290;
4787 -> 3291;
4787 -> 3292;
4787 -> 3293;
4787 -> 3294;
4787 -> 3295;
4787 -> 3296;
4787 -> 3297;
4787 -> 3298;
4787 -> 3299;
4787 -> 3300;
4787 -> 3301;
4787 -> 3302;
4787 -> 3303;
4787 -> 3304;
4787 -> 3305;
4787 -> 3306;
4787 -> 3307;
4787 -> 3308;
4787 -> 3309;
4787 -> 3310;
4787 -> 3311;
4787 -> 3312;
4787 -> 666;
4787 -> 667;
4787 -> 676;
4787 -> 668;
4787 -> 693;
4787 -> 670;
4787 -> 694;
4787 -> 673;
4787 -> 686;
4787 -> 674;
4787 -> 675;
4787 -> 671;
4787 -> 690;
4787 -> 691;
4787 -> 692;
4787 -> 786;
4787 -> 787;
4787 -> 796;
4787 -> 788;
4787 -> 813;
4787 -> 790;
4787 -> 814;
4787 -> 793;
4787 -> 806;
4787 -> 794;
4787 -> 795;
4787 -> 791;
4787 -> 810;
4787 -> 811;
4787 -> 812;
4787 -> 906;
4787 -> 907;
4787 -> 916;
4787 -> 908;
4787 -> 933;
4787 -> 910;
4787 -> 934;
4787 -> 913;
4787 -> 926;
4787 -> 914;
4787 -> 915;
4787 -> 911;
4787 -> 930;
4787 -> 931;
4787 -> 932;
4787 -> 890;
4787 -> 1026;
4787 -> 1027;
4787 -> 1036;
4787 -> 1028;
4787 -> 1053;
4787 -> 1030;
4787 -> 1054;
4787 -> 1033;
4787 -> 1046;
4787 -> 1034;
4787 -> 1035;
4787 -> 1031;
4787 -> 1050;
4787 -> 1051;
4787 -> 1052;
4787 -> 960;
4787 -> 1010;
4787 -> 1146;
4787 -> 1147;
4787 -> 1156;
4787 -> 1148;
4787 -> 1173;
4787 -> 1150;
4787 -> 1174;
4787 -> 1153;
4787 -> 1166;
4787 -> 1154;
4787 -> 1155;
4787 -> 1151;
4787 -> 1170;
4787 -> 1171;
4787 -> 1172;
4787 -> 1080;
4787 -> 1130;
4787 -> 1266;
4787 -> 1267;
4787 -> 1276;
4787 -> 1268;
4787 -> 1293;
4787 -> 1270;
4787 -> 1294;
4787 -> 1273;
4787 -> 1286;
4787 -> 1274;
4787 -> 1275;
4787 -> 1271;
4787 -> 1290;
4787 -> 1291;
4787 -> 1292;
4787 -> 1200;
4787 -> 1250;
4787 -> 1386;
4787 -> 1387;
4787 -> 1396;
4787 -> 1388;
4787 -> 1413;
4787 -> 1390;
4787 -> 1414;
4787 -> 1393;
4787 -> 1406;
4787 -> 1394;
4787 -> 1395;
4787 -> 1391;
4787 -> 1410;
4787 -> 1411;
4787 -> 1412;
4787 -> 1320;
4787 -> 1370;
4787 -> 1506;
4787 -> 1507;
4787 -> 1516;
4787 -> 1508;
4787 -> 1533;
4787 -> 1510;
4787 -> 1534;
4787 -> 1513;
4787 -> 1526;
4787 -> 1514;
4787 -> 1515;
4787 -> 1511;
4787 -> 1530;
4787 -> 1531;
4787 -> 1532;
4787 -> 1440;
4787 -> 1490;
4787 -> 1626;
4787 -> 1627;
4787 -> 1636;
4787 -> 1628;
4787 -> 1653;
4787 -> 1630;
4787 -> 1654;
4787 -> 1633;
4787 -> 1646;
4787 -> 1634;
4787 -> 1635;
4787 -> 1631;
4787 -> 1650;
4787 -> 1651;
4787 -> 1652;
4787 -> 1560;
4787 -> 1610;
4787 -> 1746;
4787 -> 1747;
4787 -> 1756;
4787 -> 1748;
4787 -> 1773;
4787 -> 1750;
4787 -> 1774;
4787 -> 1753;
4787 -> 1766;
4787 -> 1754;
4787 -> 1755;
4787 -> 1751;
4787 -> 1770;
4787 -> 1771;
4787 -> 1772;
4787 -> 1680;
4787 -> 1730;
4787 -> 1866;
4787 -> 1867;
4787 -> 1876;
4787 -> 1868;
4787 -> 1893;
4787 -> 1870;
4787 -> 1894;
4787 -> 1873;
4787 -> 1886;
4787 -> 1874;
4787 -> 1875;
4787 -> 1871;
4787 -> 1890;
4787 -> 1891;
4787 -> 1892;
4787 -> 1800;
4787 -> 1850;
4787 -> 1956;
4787 -> 1957;
4787 -> 1967;
4787 -> 1958;
4787 -> 1959;
4787 -> 1960;
4787 -> 1962;
4787 -> 1964;
4787 -> 1949;
4787 -> 1965;
4787 -> 1966;
4787 -> 1961;
4787 -> 1953;
4787 -> 1954;
4787 -> 1955;
4787 -> 1920;
4787 -> 2060;
4787 -> 2061;
4787 -> 2070;
4787 -> 2062;
4787 -> 2087;
4787 -> 2064;
4787 -> 2088;
4787 -> 2067;
4787 -> 2080;
4787 -> 2068;
4787 -> 2069;
4787 -> 2065;
4787 -> 2084;
4787 -> 2085;
4787 -> 2086;
4787 -> 1994;
4787 -> 2044;
4787 -> 2180;
4787 -> 2181;
4787 -> 2190;
4787 -> 2182;
4787 -> 2207;
4787 -> 2184;
4787 -> 2208;
4787 -> 2187;
4787 -> 2200;
4787 -> 2188;
4787 -> 2189;
4787 -> 2185;
4787 -> 2204;
4787 -> 2205;
4787 -> 2206;
4787 -> 2114;
4787 -> 2164;
4787 -> 2300;
4787 -> 2301;
4787 -> 2310;
4787 -> 2302;
4787 -> 2327;
4787 -> 2304;
4787 -> 2328;
4787 -> 2307;
4787 -> 2320;
4787 -> 2308;
4787 -> 2309;
4787 -> 2305;
4787 -> 2324;
4787 -> 2325;
4787 -> 2326;
4787 -> 2234;
4787 -> 2284;
4787 -> 2420;
4787 -> 2421;
4787 -> 2430;
4787 -> 2422;
4787 -> 2447;
4787 -> 2424;
4787 -> 2448;
4787 -> 2427;
4787 -> 2440;
4787 -> 2428;
4787 -> 2429;
4787 -> 2425;
4787 -> 2444;
4787 -> 2445;
4787 -> 2446;
4787 -> 2354;
4787 -> 2404;
4787 -> 2540;
4787 -> 2541;
4787 -> 2550;
4787 -> 2542;
4787 -> 2567;
4787 -> 2544;
4787 -> 2568;
4787 -> 2547;
4787 -> 2560;
4787 -> 2548;
4787 -> 2549;
4787 -> 2545;
4787 -> 2564;
4787 -> 2565;
4787 -> 2566;
4787 -> 2474;
4787 -> 2524;
4787 -> 2660;
4787 -> 2661;
4787 -> 2670;
4787 -> 2662;
4787 -> 2687;
4787 -> 2664;
4787 -> 2688;
4787 -> 2667;
4787 -> 2680;
4787 -> 2668;
4787 -> 2669;
4787 -> 2665;
4787 -> 2684;
4787 -> 2685;
4787 -> 2686;
4787 -> 2594;
4787 -> 2644;
4787 -> 2780;
4787 -> 2781;
4787 -> 2790;
4787 -> 2782;
4787 -> 2807;
4787 -> 2784;
4787 -> 2808;
4787 -> 2787;
4787 -> 2800;
4787 -> 2788;
4787 -> 2789;
4787 -> 2785;
4787 -> 2804;
4787 -> 2805;
4787 -> 2806;
4787 -> 2714;
4787 -> 2764;
4787 -> 2900;
4787 -> 2901;
4787 -> 2910;
4787 -> 2902;
4787 -> 2927;
4787 -> 2904;
4787 -> 2928;
4787 -> 2907;
4787 -> 2920;
4787 -> 2908;
4787 -> 2909;
4787 -> 2905;
4787 -> 2924;
4787 -> 2925;
4787 -> 2926;
4787 -> 2834;
4787 -> 2884;
4787 -> 3020;
4787 -> 3021;
4787 -> 3030;
4787 -> 3022;
4787 -> 3047;
4787 -> 3024;
4787 -> 3048;
4787 -> 3027;
4787 -> 3040;
4787 -> 3028;
4787 -> 3029;
4787 -> 3025;
4787 -> 3044;
4787 -> 3045;
4787 -> 3046;
4787 -> 2954;
4787 -> 3004;
4787 -> 3140;
4787 -> 3141;
4787 -> 3150;
4787 -> 3142;
4787 -> 3167;
4787 -> 3144;
4787 -> 3168;
4787 -> 3147;
4787 -> 3160;
4787 -> 3148;
4787 -> 3149;
4787 -> 3145;
4787 -> 3164;
4787 -> 3165;
4787 -> 3166;
4787 -> 3074;
4787 -> 3124;
4787 -> 3260;
4787 -> 3261;
4787 -> 3270;
4787 -> 3262;
4787 -> 3287;
4787 -> 3264;
4787 -> 3288;
4787 -> 3267;
4787 -> 3280;
4787 -> 3268;
4787 -> 3269;
4787 -> 3265;
4787 -> 3284;
4787 -> 3285;
4787 -> 3286;
4787 -> 3194;
4787 -> 3244;
4787 -> 650;
4787 -> 596;
4787 -> 770;
4787 -> 720;
4787 -> 840;
4787 -> 4778;
4788 -> 4787;
4788 -> 4786;
4789 -> 4788;
4789 -> 4787;
4789 -> 4786;
4790 -> 4780;
4790 -> 4778;
4791 -> 4790;
4791 -> 4789;
4791 -> 4778;
4792 -> 4778;
4793 -> 4790;
4793 -> 4792;
4793 -> 4789;
4793 -> 4778;
4794 -> 4793;
4794 -> 4792;
4795 -> 4794;
4795 -> 4793;
4795 -> 4792;
4796 -> 4779;
4796 -> 4778;
4797 -> 4781;
4797 -> 4789;
4797 -> 4795;
4797 -> 4778;
4798 -> 4796;
4798 -> 4797;
4798 -> 4778;
4799 -> 4778;
4800 -> 4798;
4800 -> 4799;
4801 -> 4798;
4801 -> 4799;
4802 -> 4798;
4802 -> 4799;
4803 -> 4798;
4803 -> 4799;
4804 -> 4798;
4804 -> 4799;
4805 -> 4804;
4805 -> 4799;
4806 -> 4804;
4806 -> 4799;
4807 -> 4804;
4807 -> 4799;
4808 -> 4804;
4808 -> 4799;
4809 -> 4804;
4809 -> 4799;
4810 -> 4804;
4810 -> 4799;
4811 -> 4804;
4811 -> 4799;
4812 -> 4804;
4812 -> 4799;
4813 -> 4804;
4813 -> 4799;
4814 -> 4804;
4814 -> 4799;
4815 -> 4804;
4815 -> 4799;
4816 -> 4800;
4816 -> 4798;
4816 -> 4804;
4816 -> 4799;
4817 -> 4800;
4817 -> 4798;
4817 -> 4804;
4817 -> 4799;
4818 -> 4800;
4818 -> 4798;
4818 -> 4804;
4818 -> 4799;
4819 -> 4800;
4819 -> 4798;
4819 -> 4804;
4819 -> 4799;
4820 -> 4802;
4820 -> 4799;
4821 -> 4820;
4822 -> 4821;
4822 -> 4804;
4822 -> 4799;
4823 -> 4803;
4823 -> 4799;
4824 -> 4823;
4825 -> 4824;
4825 -> 4804;
4825 -> 4799;
4826 -> 4799;
4827 -> 4799;
4828 -> 4800;
4828 -> 4798;
4828 -> 4827;
4828 -> 4799;
4829 -> 4800;
4829 -> 4798;
4829 -> 4799;
4830 -> 0;
4830 -> 4799;
4831 -> 4800;
4831 -> 4828;
4832 -> 4828;
4833 -> 4831;
4833 -> 4832;
4833 -> 4828;
4834 -> 4831;
4834 -> 4829;
4834 -> 4804;
4834 -> 4833;
4835 -> 4800;
4835 -> 4829;
4835 -> 4804;
4835 -> 4833;
4836 -> 4801;
4836 -> 4804;
4836 -> 4799;
4837 -> 4804;
4837 -> 4836;
4837 -> 4799;
4838 -> 4804;
4838 -> 4819;
4838 -> 4829;
4838 -> 4837;
4839 -> 4838;
4840 -> 4839;
4840 -> 4804;
4840 -> 4838;
4841 -> 4837;
4842 -> 4831;
4842 -> 4841;
4842 -> 4837;
4843 -> 4831;
4843 -> 4839;
4843 -> 4804;
4843 -> 4842;
4844 -> 4837;
4845 -> 4804;
4845 -> 4843;
4845 -> 4844;
4845 -> 4837;
4846 -> 4804;
4846 -> 4843;
4846 -> 4839;
4846 -> 4844;
4846 -> 4837;
4847 -> 4804;
4847 -> 4819;
4847 -> 4839;
4847 -> 4799;
4848 -> 4847;
4848 -> 4804;
4848 -> 4799;
4849 -> 4798;
4849 -> 4847;
4849 -> 4835;
4849 -> 4817;
4849 -> 4818;
4849 -> 4840;
4849 -> 4843;
4849 -> 4848;
4849 -> 4811;
4849 -> 4834;
4849 -> 4836;
4849 -> 4822;
4849 -> 4825;
4849 -> 4815;
4849 -> 4804;
4849 -> 4819;
4849 -> 4778;
4850 -> 4800;
4850 -> 4849;
4850 -> 4804;
4850 -> 4799;
4851 -> 4804;
4851 -> 4849;
4851 -> 4844;
4851 -> 4837;
4852 -> 4851;
4853 -> 4852;
4853 -> 4804;
4853 -> 4851;
4854 -> 4800;
4854 -> 4853;
4854 -> 4804;
4854 -> 4799;
4855 -> 4780;
4855 -> 4778;
4856 -> 4855;
4856 -> 4795;
4856 -> 4778;
4857 -> 4856;
4858 -> 4857;
4858 -> 4853;
4858 -> 4795;
4858 -> 4856;
4859 -> 4858;
4859 -> 4857;
4860 -> 4858;
4860 -> 4857;
4861 -> 4859;
4861 -> 4857;
4862 -> 4857;
4863 -> 4861;
4863 -> 4862;
4863 -> 4857;
4864 -> 4861;
4864 -> 4858;
4864 -> 4857;
4865 -> 4860;
4865 -> 4858;
4865 -> 4864;
4865 -> 4857;
4866 -> 4865;
4867 -> 4860;
4867 -> 4866;
4867 -> 4861;
4867 -> 4857;
4868 -> 4860;
4868 -> 4866;
4868 -> 4861;
4868 -> 4857;
4869 -> 4860;
4869 -> 4866;
4869 -> 4857;
4870 -> 4860;
4870 -> 4866;
4870 -> 4861;
4870 -> 4869;
4871 -> 4857;
4872 -> 4860;
4872 -> 4866;
4872 -> 4871;
4872 -> 4857;
4873 -> 4872;
4874 -> 4857;
4875 -> 4860;
4875 -> 4866;
4875 -> 4874;
4875 -> 4857;
4876 -> 4857;
4877 -> 4861;
4877 -> 4866;
4877 -> 4876;
4877 -> 4857;
4878 -> 4860;
4878 -> 4866;
4878 -> 4861;
4878 -> 4857;
4879 -> 4857;
4880 -> 4860;
4880 -> 4866;
4880 -> 4879;
4880 -> 4857;
4881 -> 4880;
4882 -> 4880;
4883 -> 4860;
4883 -> 4882;
4884 -> 4882;
4885 -> 4883;
4885 -> 4866;
4885 -> 4884;
4885 -> 4882;
4886 -> 4883;
4886 -> 4866;
4886 -> 4885;
4887 -> 4885;
4888 -> 4886;
4888 -> 4883;
4888 -> 4885;
4889 -> 4883;
4889 -> 4866;
4889 -> 4888;
4889 -> 4882;
4890 -> 4889;
4890 -> 4880;
4891 -> 4880;
4892 -> 4861;
4892 -> 4891;
4893 -> 4891;
4894 -> 4892;
4894 -> 4866;
4894 -> 4888;
4894 -> 4893;
4894 -> 4891;
4895 -> 4892;
4895 -> 4866;
4895 -> 4888;
4895 -> 4894;
4895 -> 4891;
4896 -> 4895;
4896 -> 4880;
4897 -> 4860;
4897 -> 4866;
4897 -> 4861;
4897 -> 4880;
4898 -> 4890;
4898 -> 4897;
4899 -> 4896;
4899 -> 4897;
4900 -> 4898;
4900 -> 4899;
4900 -> 4866;
4900 -> 4888;
4900 -> 4894;
4900 -> 4886;
4900 -> 4887;
4900 -> 4897;
4901 -> 4860;
4901 -> 4900;
4901 -> 4861;
4901 -> 4857;
4902 -> 4857;
4903 -> 4858;
4903 -> 4902;
4903 -> 4900;
4903 -> 4856;
4904 -> 4856;
4905 -> 4903;
4905 -> 4904;
4905 -> 4856;
4906 -> 4903;
4906 -> 4905;
4907 -> 4906;
4908 -> 4906;
4909 -> 4906;
4910 -> 4906;
4911 -> 4906;
4911 -> 4910;
4912 -> 4906;
4913 -> 4912;
4914 -> 4906;
4915 -> 4906;
4916 -> 4906;
4917 -> 4906;
4918 -> 4906;
4919 -> 4911;
4920 -> 4906;
4920 -> 4919;
4921 -> 4906;
4921 -> 4919;
4922 -> 4906;
4922 -> 4919;
4922 -> 4912;
4923 -> 4922;
4924 -> 4906;
4924 -> 4919;
4924 -> 4914;
4925 -> 4906;
4925 -> 4919;
4925 -> 4915;
4926 -> 4906;
4926 -> 4919;
4927 -> 4919;
4928 -> 4906;
4928 -> 4919;
4929 -> 4919;
4930 -> 4919;
4931 -> 4919;
4932 -> 4919;
4933 -> 4932;
4934 -> 4919;
4935 -> 4919;
4936 -> 4919;
4937 -> 4919;
4938 -> 4919;
4939 -> 4778;
4940 -> 4853;
4940 -> 4919;
4940 -> 4939;
4940 -> 4778;
4941 -> 4778;
4942 -> 4780;
4942 -> 4778;
4943 -> 4779;
4943 -> 4778;
4944 -> 4778;
4945 -> 4942;
4945 -> 4944;
4946 -> 4943;
4946 -> 4944;
4947 -> 4944;
4948 -> 4944;
4949 -> 4946;
4949 -> 4944;
4950 -> 4949;
4950 -> 4919;
4950 -> 4944;
4951 -> 4919;
4951 -> 4944;
4952 -> 4950;
4952 -> 4944;
4953 -> 4947;
4953 -> 4952;
4954 -> 4953;
4954 -> 4944;
4955 -> 4953;
4955 -> 4944;
4956 -> 4955;
4956 -> 4944;
4957 -> 4945;
4957 -> 4944;
4958 -> 4957;
4958 -> 4919;
4958 -> 4944;
4959 -> 4944;
4960 -> 4957;
4960 -> 4959;
4960 -> 4919;
4960 -> 4944;
4961 -> 4945;
4961 -> 4944;
4962 -> 4961;
4962 -> 4960;
4962 -> 4944;
4963 -> 4944;
4964 -> 4961;
4964 -> 4963;
4964 -> 4960;
4964 -> 4944;
4965 -> 4945;
4965 -> 4944;
4966 -> 4944;
4967 -> 4965;
4967 -> 4966;
4969 -> 4968;
4970 -> 4968;
4971 -> 4970;
4971 -> 4966;
4972 -> 4966;
4973 -> 4967;
4973 -> 4966;
4974 -> 4973;
4974 -> 4964;
4974 -> 4966;
4975 -> 4974;
4976 -> 4975;
4977 -> 4944;
4978 -> 4977;
4978 -> 4944;
4979 -> 4944;
4980 -> 4944;
4981 -> 4977;
4981 -> 4980;
4981 -> 4978;
4981 -> 4944;
4982 -> 4944;
4983 -> 4945;
4983 -> 4944;
4984 -> 4983;
4984 -> 4964;
4984 -> 4944;
4985 -> 4984;
4986 -> 4956;
4986 -> 4984;
4987 -> 4984;
4988 -> 4985;
4988 -> 4987;
4989 -> 4986;
4989 -> 4987;
4990 -> 4987;
4991 -> 4990;
4991 -> 4989;
4991 -> 4987;
4992 -> 4987;
4993 -> 4988;
4993 -> 4992;
4994 -> 4992;
4995 -> 4992;
4996 -> 4994;
4996 -> 4995;
4996 -> 4992;
4997 -> 4992;
4998 -> 4993;
4998 -> 4964;
4998 -> 4997;
4998 -> 4992;
4999 -> 4993;
4999 -> 4964;
4999 -> 4998;
5000 -> 4994;
5000 -> 4999;
5000 -> 4996;
5000 -> 4998;
5001 -> 4998;
5002 -> 4994;
5002 -> 5001;
5002 -> 5000;
5002 -> 4998;
5003 -> 4993;
5003 -> 4964;
5003 -> 4998;
5004 -> 4994;
5004 -> 5003;
5004 -> 5002;
5004 -> 4998;
5005 -> 4992;
5006 -> 4993;
5006 -> 4964;
5006 -> 5005;
5006 -> 4992;
5007 -> 5006;
5008 -> 5007;
5009 -> 4994;
5009 -> 5008;
5009 -> 5004;
5009 -> 5007;
5010 -> 4993;
5010 -> 4964;
5010 -> 5007;
5011 -> 4994;
5011 -> 5010;
5011 -> 5009;
5011 -> 5007;
5012 -> 5006;
5013 -> 4994;
5013 -> 5012;
5013 -> 5011;
5013 -> 5006;
5014 -> 4993;
5014 -> 4964;
5014 -> 4992;
5015 -> 4992;
5016 -> 4994;
5016 -> 5015;
5016 -> 5013;
5016 -> 4992;
5017 -> 4992;
5018 -> 4993;
5018 -> 4964;
5018 -> 5017;
5018 -> 4992;
5019 -> 5018;
5020 -> 4994;
5020 -> 5019;
5020 -> 5016;
5020 -> 5018;
5021 -> 5018;
5022 -> 5021;
5022 -> 5018;
5023 -> 5018;
5024 -> 5022;
5024 -> 5018;
5025 -> 5024;
5026 -> 4994;
5026 -> 5025;
5026 -> 5020;
5026 -> 5024;
5027 -> 5022;
5027 -> 5024;
5028 -> 4994;
5028 -> 5027;
5028 -> 5026;
5028 -> 5024;
5029 -> 5024;
5030 -> 4994;
5030 -> 5029;
5030 -> 5028;
5030 -> 5024;
5031 -> 5024;
5032 -> 5018;
5033 -> 4994;
5033 -> 5032;
5033 -> 5030;
5033 -> 5018;
5034 -> 4992;
5035 -> 4993;
5035 -> 5024;
5035 -> 5034;
5035 -> 4992;
5036 -> 4993;
5036 -> 5024;
5036 -> 4992;
5037 -> 4992;
5038 -> 4993;
5038 -> 5024;
5038 -> 5037;
5038 -> 4992;
5039 -> 4992;
5040 -> 4993;
5040 -> 5024;
5040 -> 5039;
5040 -> 4992;
5041 -> 4992;
5042 -> 4993;
5042 -> 5024;
5042 -> 5041;
5042 -> 4992;
5043 -> 4994;
5043 -> 5033;
5043 -> 4992;
5044 -> 5043;
5044 -> 4987;
5045 -> 4991;
5045 -> 5044;
5045 -> 4987;
5046 -> 4982;
5046 -> 5045;
5046 -> 4984;
5047 -> 4956;
5047 -> 5024;
5048 -> 5047;
5048 -> 5024;
5049 -> 5024;
5050 -> 5049;
5050 -> 5048;
5050 -> 5024;
5051 -> 5024;
5052 -> 5024;
5053 -> 5051;
5053 -> 5052;
5053 -> 5024;
5054 -> 5024;
5055 -> 5024;
5055 -> 5054;
5056 -> 5051;
5056 -> 5055;
5056 -> 5053;
5056 -> 5054;
5057 -> 5054;
5058 -> 5051;
5058 -> 5057;
5058 -> 5056;
5058 -> 5054;
5059 -> 5024;
5059 -> 5054;
5060 -> 5051;
5060 -> 5059;
5060 -> 5058;
5060 -> 5054;
5061 -> 5024;
5062 -> 5061;
5063 -> 5062;
5064 -> 5051;
5064 -> 5063;
5064 -> 5060;
5064 -> 5062;
5065 -> 5024;
5065 -> 5062;
5066 -> 5051;
5066 -> 5065;
5066 -> 5064;
5066 -> 5062;
5067 -> 5061;
5068 -> 5051;
5068 -> 5067;
5068 -> 5066;
5068 -> 5061;
5069 -> 5024;
5070 -> 5024;
5071 -> 5051;
5071 -> 5070;
5071 -> 5068;
5071 -> 5024;
5072 -> 5024;
5073 -> 5051;
5073 -> 5072;
5073 -> 5071;
5073 -> 5024;
5074 -> 5051;
5074 -> 5025;
5074 -> 5073;
5074 -> 5024;
5075 -> 5024;
5076 -> 5051;
5076 -> 5075;
5076 -> 5074;
5076 -> 5024;
5077 -> 5051;
5077 -> 5029;
5077 -> 5076;
5077 -> 5024;
5078 -> 5031;
5079 -> 5051;
5079 -> 5078;
5079 -> 5077;
5079 -> 5031;
5080 -> 5024;
5081 -> 5051;
5081 -> 5080;
5081 -> 5079;
5081 -> 5024;
5082 -> 5024;
5083 -> 5024;
5084 -> 5024;
5085 -> 5024;
5086 -> 5024;
5087 -> 5051;
5087 -> 5081;
5087 -> 5024;
5088 -> 5087;
5088 -> 5024;
5089 -> 5050;
5089 -> 5088;
5089 -> 5024;
5090 -> 4982;
5090 -> 5089;
5090 -> 5046;
5090 -> 5024;
5091 -> 5051;
5091 -> 5080;
5091 -> 5077;
5091 -> 5024;
5092 -> 5051;
5092 -> 5091;
5092 -> 5024;
5093 -> 5092;
5093 -> 5024;
5094 -> 5050;
5094 -> 5093;
5094 -> 5024;
5095 -> 5051;
5095 -> 5071;
5095 -> 5024;
5096 -> 5095;
5096 -> 5024;
5097 -> 5050;
5097 -> 5096;
5097 -> 5024;
5098 -> 4977;
5098 -> 4944;
5099 -> 4982;
5099 -> 4944;
5100 -> 4944;
5101 -> 5098;
5101 -> 5100;
5102 -> 5099;
5102 -> 5100;
5103 -> 5102;
5103 -> 5090;
5103 -> 5100;
5104 -> 5100;
5105 -> 5104;
5105 -> 5103;
5105 -> 5100;
5106 -> 5102;
5106 -> 5104;
5106 -> 5090;
5106 -> 5105;
5107 -> 5101;
5107 -> 5106;
5107 -> 4981;
5107 -> 5105;
5108 -> 5105;
5109 -> 5108;
5110 -> 5101;
5110 -> 5109;
5110 -> 5107;
5110 -> 5108;
5111 -> 5101;
5111 -> 5110;
5111 -> 5105;
5112 -> 4944;
5113 -> 4944;
5114 -> 4977;
5114 -> 5113;
5114 -> 5111;
5114 -> 4944;
5115 -> 4944;
5116 -> 4946;
5116 -> 5024;
5116 -> 4944;
5117 -> 4944;
5118 -> 5116;
5118 -> 4944;
5119 -> 5116;
5119 -> 5118;
5120 -> 5119;
5120 -> 5118;
5121 -> 5120;
5121 -> 5118;
5122 -> 5118;
5123 -> 5118;
5124 -> 4954;
5124 -> 5118;
5125 -> 4977;
5125 -> 5124;
5126 -> 4956;
5126 -> 5124;
5127 -> 5124;
5128 -> 5125;
5128 -> 5127;
5129 -> 5126;
5129 -> 5127;
5130 -> 5127;
5131 -> 5130;
5131 -> 5129;
5131 -> 5127;
5132 -> 5128;
5132 -> 5130;
5132 -> 5131;
5132 -> 5114;
5132 -> 5127;
5133 -> 5124;
5134 -> 5124;
5135 -> 4977;
5135 -> 5134;
5135 -> 5132;
5135 -> 5124;
5136 -> 5119;
5136 -> 5120;
5136 -> 5124;
5137 -> 4977;
5137 -> 5136;
5137 -> 5135;
5137 -> 5124;
5138 -> 5119;
5138 -> 5136;
5138 -> 5124;
5139 -> 5138;
5139 -> 5136;
5139 -> 5124;
5140 -> 4977;
5140 -> 5139;
5141 -> 4956;
5141 -> 5139;
5142 -> 5139;
5143 -> 5140;
5143 -> 5142;
5144 -> 5141;
5144 -> 5142;
5145 -> 5142;
5146 -> 5145;
5146 -> 5144;
5146 -> 5142;
5147 -> 5143;
5147 -> 5145;
5147 -> 5146;
5147 -> 5137;
5147 -> 5142;
5148 -> 5139;
5149 -> 5139;
5150 -> 4977;
5150 -> 5149;
5150 -> 5147;
5150 -> 5139;
5151 -> 5139;
5152 -> 4977;
5152 -> 5151;
5152 -> 5150;
5152 -> 5139;
5153 -> 5119;
5153 -> 5118;
5154 -> 5118;
5155 -> 4958;
5155 -> 5118;
5156 -> 4962;
5156 -> 5118;
5157 -> 5118;
5158 -> 5153;
5158 -> 5157;
5159 -> 5154;
5159 -> 5157;
5160 -> 5155;
5160 -> 5157;
5161 -> 5156;
5161 -> 5157;
5162 -> 5154;
5162 -> 5157;
5163 -> 5162;
5163 -> 5157;
5164 -> 5162;
5164 -> 5157;
5165 -> 5162;
5165 -> 5157;
5166 -> 5162;
5166 -> 5157;
5167 -> 5162;
5167 -> 5157;
5168 -> 5162;
5168 -> 5157;
5169 -> 5162;
5169 -> 5157;
5170 -> 5162;
5170 -> 5157;
5171 -> 5162;
5171 -> 5157;
5172 -> 5158;
5172 -> 5151;
5172 -> 5162;
5172 -> 5157;
5173 -> 5158;
5173 -> 5151;
5173 -> 5162;
5173 -> 5157;
5174 -> 5158;
5174 -> 5151;
5174 -> 5162;
5174 -> 5157;
5175 -> 5158;
5175 -> 5151;
5175 -> 5162;
5175 -> 5157;
5176 -> 5157;
5177 -> 5158;
5177 -> 5151;
5177 -> 5157;
5178 -> 5154;
5178 -> 5118;
5179 -> 4945;
5179 -> 5118;
5180 -> 5154;
5180 -> 5118;
5181 -> 5179;
5181 -> 5180;
5181 -> 5175;
5181 -> 5177;
5181 -> 5173;
5181 -> 5174;
5181 -> 5162;
5181 -> 5159;
5181 -> 5160;
5181 -> 5161;
5181 -> 5118;
5182 -> 5118;
5183 -> 5182;
5184 -> 5181;
5184 -> 5183;
5184 -> 5182;
5185 -> 5181;
5185 -> 5182;
5186 -> 5181;
5186 -> 5182;
5187 -> 5182;
5188 -> 5181;
5188 -> 5187;
5188 -> 5182;
5189 -> 5182;
5190 -> 5181;
5190 -> 5189;
5190 -> 5182;
5191 -> 5182;
5192 -> 5181;
5192 -> 5191;
5192 -> 5182;
5193 -> 5181;
5193 -> 5182;
5194 -> 5181;
5195 -> 5181;
5195 -> 5182;
5196 -> 5118;
5197 -> 5181;
5197 -> 5196;
5197 -> 5118;
5198 -> 4945;
5198 -> 5181;
5198 -> 5197;
5199 -> 5154;
5199 -> 5118;
5200 -> 4956;
5200 -> 5118;
5201 -> 5118;
5202 -> 5199;
5202 -> 5201;
5203 -> 5200;
5203 -> 5201;
5204 -> 5201;
5205 -> 5204;
5205 -> 5203;
5205 -> 5201;
5206 -> 5201;
5207 -> 5201;
5208 -> 5206;
5208 -> 5207;
5208 -> 5201;
5209 -> 5201;
5210 -> 5202;
5210 -> 5181;
5210 -> 5209;
5210 -> 5201;
5211 -> 5202;
5211 -> 5181;
5211 -> 5210;
5212 -> 5206;
5212 -> 5211;
5212 -> 5208;
5212 -> 5210;
5213 -> 5210;
5214 -> 5206;
5214 -> 5213;
5214 -> 5212;
5214 -> 5210;
5215 -> 5202;
5215 -> 5181;
5215 -> 5210;
5216 -> 5206;
5216 -> 5215;
5216 -> 5214;
5216 -> 5210;
5217 -> 5201;
5218 -> 5202;
5218 -> 5181;
5218 -> 5217;
5218 -> 5201;
5219 -> 5218;
5220 -> 5219;
5221 -> 5206;
5221 -> 5220;
5221 -> 5216;
5221 -> 5219;
5222 -> 5202;
5222 -> 5181;
5222 -> 5219;
5223 -> 5206;
5223 -> 5222;
5223 -> 5221;
5223 -> 5219;
5224 -> 5218;
5225 -> 5206;
5225 -> 5224;
5225 -> 5223;
5225 -> 5218;
5226 -> 5202;
5226 -> 5181;
5226 -> 5201;
5227 -> 5201;
5228 -> 5206;
5228 -> 5227;
5228 -> 5225;
5228 -> 5201;
5229 -> 5202;
5229 -> 5181;
5229 -> 5201;
5230 -> 5229;
5231 -> 5206;
5231 -> 5230;
5231 -> 5228;
5231 -> 5229;
5232 -> 5229;
5233 -> 5206;
5233 -> 5232;
5233 -> 5231;
5233 -> 5229;
5234 -> 5229;
5235 -> 5206;
5235 -> 5234;
5235 -> 5233;
5235 -> 5229;
5236 -> 5229;
5237 -> 5206;
5237 -> 5236;
5237 -> 5235;
5237 -> 5229;
5238 -> 5229;
5239 -> 5238;
5240 -> 5206;
5240 -> 5239;
5240 -> 5237;
5240 -> 5238;
5241 -> 5229;
5242 -> 5206;
5242 -> 5241;
5242 -> 5240;
5242 -> 5229;
5243 -> 5201;
5244 -> 5202;
5244 -> 5229;
5244 -> 5243;
5244 -> 5201;
5245 -> 5244;
5246 -> 5206;
5246 -> 5245;
5246 -> 5242;
5246 -> 5244;
5247 -> 5244;
5248 -> 5206;
5248 -> 5247;
5248 -> 5246;
5248 -> 5244;
5249 -> 5244;
5250 -> 5206;
5250 -> 5249;
5250 -> 5248;
5250 -> 5244;
5251 -> 5244;
5252 -> 5206;
5252 -> 5251;
5252 -> 5250;
5252 -> 5244;
5253 -> 5244;
5254 -> 5206;
5254 -> 5253;
5254 -> 5252;
5254 -> 5244;
5255 -> 5202;
5255 -> 5229;
5255 -> 5201;
5256 -> 5201;
5257 -> 5202;
5257 -> 5229;
5257 -> 5256;
5257 -> 5201;
5258 -> 5201;
5259 -> 5202;
5259 -> 5229;
5259 -> 5258;
5259 -> 5201;
5260 -> 5201;
5261 -> 5202;
5261 -> 5229;
5261 -> 5260;
5261 -> 5201;
5262 -> 5206;
5262 -> 5254;
5262 -> 5201;
5263 -> 5262;
5263 -> 5201;
5264 -> 5205;
5264 -> 5263;
5264 -> 5201;
5265 -> 4977;
5265 -> 5264;
5265 -> 5152;
5265 -> 5118;
5266 -> 5198;
5266 -> 5118;
5267 -> 4956;
5267 -> 5118;
5268 -> 5118;
5269 -> 5266;
5269 -> 5268;
5270 -> 5267;
5270 -> 5268;
5271 -> 5268;
5272 -> 5271;
5272 -> 5270;
5272 -> 5268;
5273 -> 5268;
5274 -> 5268;
5275 -> 5273;
5275 -> 5274;
5275 -> 5268;
5276 -> 5268;
5277 -> 5269;
5277 -> 5229;
5277 -> 5276;
5277 -> 5268;
5278 -> 5269;
5278 -> 5229;
5278 -> 5277;
5279 -> 5273;
5279 -> 5278;
5279 -> 5275;
5279 -> 5277;
5280 -> 5277;
5281 -> 5273;
5281 -> 5280;
5281 -> 5279;
5281 -> 5277;
5282 -> 5269;
5282 -> 5229;
5282 -> 5277;
5283 -> 5273;
5283 -> 5282;
5283 -> 5281;
5283 -> 5277;
5284 -> 5268;
5285 -> 5269;
5285 -> 5229;
5285 -> 5284;
5285 -> 5268;
5286 -> 5285;
5287 -> 5286;
5288 -> 5273;
5288 -> 5287;
5288 -> 5283;
5288 -> 5286;
5289 -> 5269;
5289 -> 5229;
5289 -> 5286;
5290 -> 5273;
5290 -> 5289;
5290 -> 5288;
5290 -> 5286;
5291 -> 5285;
5292 -> 5273;
5292 -> 5291;
5292 -> 5290;
5292 -> 5285;
5293 -> 5269;
5293 -> 5229;
5293 -> 5268;
5294 -> 5268;
5295 -> 5273;
5295 -> 5294;
5295 -> 5292;
5295 -> 5268;
5296 -> 5269;
5296 -> 5229;
5296 -> 5268;
5297 -> 5296;
5298 -> 5273;
5298 -> 5297;
5298 -> 5295;
5298 -> 5296;
5299 -> 5296;
5300 -> 5273;
5300 -> 5299;
5300 -> 5298;
5300 -> 5296;
5301 -> 5296;
5302 -> 5273;
5302 -> 5301;
5302 -> 5300;
5302 -> 5296;
5303 -> 5296;
5304 -> 5273;
5304 -> 5303;
5304 -> 5302;
5304 -> 5296;
5305 -> 5296;
5306 -> 5305;
5307 -> 5273;
5307 -> 5306;
5307 -> 5304;
5307 -> 5305;
5308 -> 5296;
5309 -> 5273;
5309 -> 5308;
5309 -> 5307;
5309 -> 5296;
5310 -> 5268;
5311 -> 5269;
5311 -> 5296;
5311 -> 5310;
5311 -> 5268;
5312 -> 5269;
5312 -> 5296;
5312 -> 5268;
5313 -> 5268;
5314 -> 5269;
5314 -> 5296;
5314 -> 5313;
5314 -> 5268;
5315 -> 5268;
5316 -> 5269;
5316 -> 5296;
5316 -> 5315;
5316 -> 5268;
5317 -> 5268;
5318 -> 5269;
5318 -> 5296;
5318 -> 5317;
5318 -> 5268;
5319 -> 5273;
5319 -> 5309;
5319 -> 5268;
5320 -> 5319;
5320 -> 5268;
5321 -> 5272;
5321 -> 5320;
5321 -> 5268;
5322 -> 5115;
5322 -> 5321;
5322 -> 5118;
5323 -> 5296;
5324 -> 5296;
5325 -> 5324;
5326 -> 4977;
5326 -> 5325;
5326 -> 5265;
5326 -> 5324;
5327 -> 4977;
5327 -> 5296;
5328 -> 4956;
5328 -> 5296;
5329 -> 5296;
5330 -> 5327;
5330 -> 5329;
5331 -> 5328;
5331 -> 5329;
5332 -> 5329;
5333 -> 5332;
5333 -> 5331;
5333 -> 5329;
5334 -> 5296;
5335 -> 5296;
5336 -> 4977;
5336 -> 5296;
5337 -> 4956;
5337 -> 5296;
5338 -> 5296;
5339 -> 5336;
5339 -> 5338;
5340 -> 5337;
5340 -> 5338;
5341 -> 5338;
5342 -> 5341;
5342 -> 5340;
5342 -> 5338;
5343 -> 5296;
5344 -> 5296;
5345 -> 5296;
5346 -> 5296;
5347 -> 5296;
5348 -> 5296;
5349 -> 5296;
5350 -> 5296;
5351 -> 5296;
5352 -> 5296;
5353 -> 5296;
5354 -> 5296;
5355 -> 5296;
5356 -> 5296;
5357 -> 5296;
5358 -> 5296;
5359 -> 5296;
5360 -> 5296;
5361 -> 5296;
5362 -> 5296;
5363 -> 5296;
5364 -> 5296;
5365 -> 5296;
5366 -> 4956;
5366 -> 5296;
5367 -> 5366;
5367 -> 5296;
5368 -> 5296;
5369 -> 5368;
5369 -> 5367;
5369 -> 5296;
5370 -> 5296;
5371 -> 5296;
5372 -> 5370;
5372 -> 5371;
5372 -> 5296;
5373 -> 5296;
5374 -> 5296;
5374 -> 5373;
5375 -> 5370;
5375 -> 5374;
5375 -> 5372;
5375 -> 5373;
5376 -> 5373;
5377 -> 5370;
5377 -> 5376;
5377 -> 5375;
5377 -> 5373;
5378 -> 5296;
5378 -> 5373;
5379 -> 5370;
5379 -> 5378;
5379 -> 5377;
5379 -> 5373;
5380 -> 5296;
5381 -> 5380;
5382 -> 5381;
5383 -> 5370;
5383 -> 5382;
5383 -> 5379;
5383 -> 5381;
5384 -> 5296;
5384 -> 5381;
5385 -> 5370;
5385 -> 5384;
5385 -> 5383;
5385 -> 5381;
5386 -> 5380;
5387 -> 5370;
5387 -> 5386;
5387 -> 5385;
5387 -> 5380;
5388 -> 5296;
5389 -> 5296;
5390 -> 5370;
5390 -> 5389;
5390 -> 5387;
5390 -> 5296;
5391 -> 5370;
5391 -> 5297;
5391 -> 5390;
5391 -> 5296;
5392 -> 5370;
5392 -> 5299;
5392 -> 5391;
5392 -> 5296;
5393 -> 5370;
5393 -> 5301;
5393 -> 5392;
5393 -> 5296;
5394 -> 5370;
5394 -> 5303;
5394 -> 5393;
5394 -> 5296;
5395 -> 5370;
5395 -> 5308;
5395 -> 5394;
5395 -> 5296;
5396 -> 5296;
5397 -> 5396;
5398 -> 5370;
5398 -> 5397;
5398 -> 5395;
5398 -> 5396;
5399 -> 5396;
5400 -> 5370;
5400 -> 5399;
5400 -> 5398;
5400 -> 5396;
5401 -> 5396;
5402 -> 5370;
5402 -> 5401;
5402 -> 5400;
5402 -> 5396;
5403 -> 5396;
5404 -> 5370;
5404 -> 5403;
5404 -> 5402;
5404 -> 5396;
5405 -> 5396;
5406 -> 5370;
5406 -> 5405;
5406 -> 5404;
5406 -> 5396;
5407 -> 5296;
5408 -> 5296;
5409 -> 5296;
5410 -> 5296;
5411 -> 5370;
5411 -> 5406;
5411 -> 5296;
5412 -> 5411;
5412 -> 5296;
5413 -> 5369;
5413 -> 5412;
5413 -> 5296;
5414 -> 4956;
5414 -> 5296;
5415 -> 5414;
5415 -> 5296;
5416 -> 5368;
5416 -> 5415;
5416 -> 5296;
5417 -> 5370;
5417 -> 5395;
5417 -> 5296;
5418 -> 5417;
5418 -> 5296;
5419 -> 5416;
5419 -> 5418;
5419 -> 5296;
5420 -> 5370;
5420 -> 5306;
5420 -> 5394;
5420 -> 5305;
5421 -> 5370;
5421 -> 5308;
5421 -> 5420;
5421 -> 5296;
5422 -> 5370;
5422 -> 5397;
5422 -> 5421;
5422 -> 5396;
5423 -> 5370;
5423 -> 5399;
5423 -> 5422;
5423 -> 5396;
5424 -> 5370;
5424 -> 5401;
5424 -> 5423;
5424 -> 5396;
5425 -> 5370;
5425 -> 5403;
5425 -> 5424;
5425 -> 5396;
5426 -> 5370;
5426 -> 5405;
5426 -> 5425;
5426 -> 5396;
5427 -> 5370;
5427 -> 5426;
5427 -> 5296;
5428 -> 5427;
5428 -> 5296;
5429 -> 5369;
5429 -> 5428;
5429 -> 5296;
5430 -> 5370;
5430 -> 5421;
5430 -> 5296;
5431 -> 5430;
5431 -> 5296;
5432 -> 5416;
5432 -> 5431;
5432 -> 5296;
5433 -> 5296;
5434 -> 5370;
5434 -> 5397;
5434 -> 5390;
5434 -> 5396;
5435 -> 5370;
5435 -> 5399;
5435 -> 5434;
5435 -> 5396;
5436 -> 5370;
5436 -> 5401;
5436 -> 5435;
5436 -> 5396;
5437 -> 5370;
5437 -> 5403;
5437 -> 5436;
5437 -> 5396;
5438 -> 5370;
5438 -> 5405;
5438 -> 5437;
5438 -> 5396;
5439 -> 5370;
5439 -> 5438;
5439 -> 5296;
5440 -> 5439;
5440 -> 5296;
5441 -> 5369;
5441 -> 5440;
5441 -> 5296;
5442 -> 5370;
5442 -> 5390;
5442 -> 5296;
5443 -> 5442;
5443 -> 5296;
5444 -> 5416;
5444 -> 5443;
5444 -> 5296;
5445 -> 4944;
5446 -> 5296;
5446 -> 5445;
5446 -> 4944;
5447 -> 4977;
5447 -> 5326;
5447 -> 5446;
5448 -> 4944;
5449 -> 4977;
5449 -> 5448;
5449 -> 5447;
5449 -> 4944;
5450 -> 4982;
5450 -> 4944;
5451 -> 5115;
5451 -> 4944;
5455 -> 5453;
5455 -> 5452;
5456 -> 5454;
5456 -> 5452;
5457 -> 5452;
5458 -> 0;
5458 -> 4944;
5459 -> 4944;
5460 -> 4944;
5461 -> 5450;
5461 -> 5460;
5462 -> 5451;
5462 -> 5460;
5463 -> 5458;
5463 -> 5460;
5464 -> 5459;
5464 -> 5460;
5465 -> 5459;
5465 -> 5460;
5466 -> 5460;
5467 -> 5464;
5467 -> 5466;
5467 -> 5460;
5468 -> 5467;
5468 -> 5460;
5469 -> 0;
5471 -> 5469;
5471 -> 5470;
5472 -> 5470;
5474 -> 5473;
5476 -> 5475;
5478 -> 5477;
5479 -> 5472;
5480 -> 5472;
5480 -> 5470;
5481 -> 5471;
5481 -> 5472;
5481 -> 5470;
5482 -> 5470;
5483 -> 5460;
5484 -> 5483;
5484 -> 5465;
5484 -> 5460;
5485 -> 5461;
5485 -> 5460;
5486 -> 5462;
5486 -> 5460;
5487 -> 5463;
5487 -> 5460;
5488 -> 5485;
5488 -> 5460;
5489 -> 5486;
5489 -> 5460;
5490 -> 5484;
5490 -> 5460;
5491 -> 5460;
5492 -> 5488;
5492 -> 5491;
5493 -> 5489;
5493 -> 5491;
5494 -> 5490;
5494 -> 5491;
5495 -> 5468;
5495 -> 5491;
5496 -> 5492;
5496 -> 5491;
5497 -> 5492;
5497 -> 5485;
5497 -> 5491;
5498 -> 5493;
5498 -> 5491;
5499 -> 5493;
5499 -> 5486;
5499 -> 5491;
5500 -> 5491;
5501 -> 5496;
5501 -> 5500;
5502 -> 5497;
5502 -> 5500;
5503 -> 5498;
5503 -> 5500;
5504 -> 5499;
5504 -> 5500;
5505 -> 5495;
5505 -> 5500;
5506 -> 5501;
5506 -> 5500;
5507 -> 5502;
5507 -> 5500;
5508 -> 5503;
5508 -> 5500;
5509 -> 5504;
5509 -> 5500;
5510 -> 5500;
5511 -> 5506;
5511 -> 5510;
5512 -> 5507;
5512 -> 5510;
5513 -> 5508;
5513 -> 5510;
5514 -> 5509;
5514 -> 5510;
5515 -> 5505;
5515 -> 5510;
5516 -> 5510;
5517 -> 5512;
5517 -> 5516;
5517 -> 5510;
5518 -> 5510;
5519 -> 5514;
5519 -> 5518;
5519 -> 5510;
5520 -> 5517;
5520 -> 5519;
5520 -> 5510;
5521 -> 5510;
5522 -> 5521;
5522 -> 5520;
5522 -> 5510;
5523 -> 5510;
5524 -> 5523;
5524 -> 5512;
5524 -> 5510;
5525 -> 5524;
5526 -> 5520;
5526 -> 5522;
5526 -> 5525;
5526 -> 5524;
5527 -> 5526;
5527 -> 5523;
5527 -> 5525;
5527 -> 5520;
5527 -> 5524;
5528 -> 5510;
5529 -> 5528;
5529 -> 5514;
5529 -> 5510;
5530 -> 5529;
5531 -> 5520;
5531 -> 5522;
5531 -> 5527;
5531 -> 5530;
5531 -> 5529;
5532 -> 5531;
5532 -> 5530;
5532 -> 5528;
5532 -> 5520;
5532 -> 5529;
5533 -> 5510;
5534 -> 5533;
5534 -> 5512;
5534 -> 5510;
5535 -> 5534;
5536 -> 5535;
5536 -> 5514;
5536 -> 5534;
5537 -> 5536;
5538 -> 5520;
5538 -> 5522;
5538 -> 5527;
5538 -> 5532;
5538 -> 5537;
5538 -> 5536;
5539 -> 5511;
5539 -> 5536;
5540 -> 5513;
5540 -> 5536;
5541 -> 5536;
5542 -> 5539;
5542 -> 5541;
5543 -> 5537;
5543 -> 5541;
5544 -> 5540;
5544 -> 5541;
5545 -> 5537;
5545 -> 5541;
5546 -> 5515;
5546 -> 5541;
5547 -> 5542;
5547 -> 5485;
5547 -> 5543;
5547 -> 5541;
5548 -> 5544;
5548 -> 5486;
5548 -> 5545;
5548 -> 5541;
5549 -> 5546;
5549 -> 0;
5549 -> 5547;
5549 -> 5548;
5549 -> 5485;
5549 -> 5486;
5549 -> 5541;
5550 -> 5538;
5550 -> 5549;
5550 -> 5536;
5551 -> 5536;
5552 -> 5520;
5552 -> 5522;
5552 -> 5527;
5552 -> 5532;
5552 -> 5551;
5552 -> 5535;
5552 -> 5536;
5553 -> 5536;
5554 -> 5520;
5554 -> 5522;
5554 -> 5527;
5554 -> 5532;
5554 -> 5533;
5554 -> 5553;
5554 -> 5536;
5555 -> 5550;
5555 -> 5536;
5556 -> 5552;
5556 -> 5536;
5557 -> 5555;
5557 -> 5556;
5557 -> 5536;
5558 -> 5554;
5558 -> 5536;
5559 -> 5557;
5559 -> 5558;
5559 -> 5536;
5560 -> 5559;
5560 -> 5533;
5560 -> 5535;
5560 -> 5520;
5560 -> 5536;
5561 -> 5520;
5561 -> 5510;
5562 -> 5502;
5562 -> 5500;
5563 -> 5504;
5563 -> 5500;
5564 -> 5500;
5565 -> 5562;
5565 -> 5564;
5565 -> 5500;
5566 -> 5563;
5566 -> 5564;
5566 -> 5500;
5567 -> 5565;
5567 -> 5566;
5567 -> 5500;
5568 -> 5561;
5568 -> 5520;
5568 -> 5522;
5568 -> 5527;
5568 -> 5532;
5568 -> 5560;
5568 -> 5562;
5568 -> 5563;
5568 -> 5567;
5569 -> 5567;
5570 -> 5561;
5570 -> 5520;
5570 -> 5522;
5570 -> 5527;
5570 -> 5532;
5570 -> 5560;
5570 -> 5569;
5570 -> 5563;
5570 -> 5567;
5571 -> 5561;
5571 -> 5520;
5571 -> 5522;
5571 -> 5527;
5571 -> 5532;
5571 -> 5560;
5571 -> 5562;
5571 -> 5563;
5571 -> 5570;
5572 -> 5570;
5573 -> 5562;
5573 -> 5572;
5574 -> 5563;
5574 -> 5572;
5575 -> 5572;
5576 -> 0;
5576 -> 5572;
5577 -> 5573;
5577 -> 5572;
5578 -> 5574;
5578 -> 5572;
5579 -> 5572;
5580 -> 5576;
5580 -> 5579;
5581 -> 5577;
5581 -> 5579;
5582 -> 5578;
5582 -> 5579;
5583 -> 5575;
5583 -> 5579;
5584 -> 5580;
5584 -> 5583;
5584 -> 5579;
5585 -> 5581;
5585 -> 5583;
5585 -> 5579;
5586 -> 5582;
5586 -> 5583;
5586 -> 5579;
5587 -> 5573;
5587 -> 5574;
5587 -> 5500;
5588 -> 5573;
5588 -> 5587;
5589 -> 0;
5589 -> 5587;
5590 -> 5588;
5590 -> 5587;
5591 -> 5587;
5592 -> 5587;
5593 -> 5589;
5593 -> 5592;
5594 -> 5590;
5594 -> 5592;
5595 -> 5591;
5595 -> 5592;
5596 -> 5591;
5596 -> 5592;
5597 -> 5593;
5597 -> 5596;
5597 -> 5592;
5598 -> 5594;
5598 -> 5596;
5598 -> 5592;
5599 -> 5595;
5599 -> 5596;
5599 -> 5592;
5600 -> 5591;
5600 -> 5587;
5601 -> 0;
5601 -> 5588;
5602 -> 5588;
5603 -> 5588;
5604 -> 5601;
5604 -> 5603;
5605 -> 5602;
5605 -> 5603;
5606 -> 5602;
5606 -> 5603;
5607 -> 5602;
5607 -> 5603;
5608 -> 5604;
5608 -> 5607;
5608 -> 5603;
5609 -> 5605;
5609 -> 5607;
5609 -> 5603;
5610 -> 5606;
5610 -> 5607;
5610 -> 5603;
5611 -> 5588;
5612 -> 0;
5612 -> 5588;
5613 -> 5588;
5614 -> 5611;
5614 -> 5588;
5615 -> 5588;
5616 -> 5612;
5616 -> 5615;
5617 -> 5613;
5617 -> 5615;
5618 -> 5614;
5618 -> 5615;
5619 -> 5613;
5619 -> 5615;
5620 -> 5616;
5620 -> 5619;
5620 -> 5615;
5621 -> 5617;
5621 -> 5619;
5621 -> 5615;
5622 -> 5618;
5622 -> 5619;
5622 -> 5615;
5623 -> 5613;
5623 -> 5588;
5624 -> 0;
5624 -> 5611;
5625 -> 5611;
5626 -> 5611;
5627 -> 5624;
5627 -> 5626;
5628 -> 5625;
5628 -> 5626;
5629 -> 5625;
5629 -> 5626;
5630 -> 5625;
5630 -> 5626;
5631 -> 5627;
5631 -> 5630;
5631 -> 5626;
5632 -> 5628;
5632 -> 5630;
5632 -> 5626;
5633 -> 5629;
5633 -> 5630;
5633 -> 5626;
5634 -> 0;
5634 -> 5611;
5635 -> 5611;
5636 -> 5611;
5637 -> 5634;
5637 -> 5636;
5638 -> 5635;
5638 -> 5636;
5639 -> 5635;
5639 -> 5636;
5640 -> 5635;
5640 -> 5636;
5641 -> 5637;
5641 -> 5640;
5641 -> 5636;
5642 -> 5638;
5642 -> 5640;
5642 -> 5636;
5643 -> 5639;
5643 -> 5640;
5643 -> 5636;
5644 -> 5635;
5644 -> 5611;
5645 -> 0;
5645 -> 5611;
5646 -> 5611;
5647 -> 5611;
5648 -> 5645;
5648 -> 5647;
5649 -> 5646;
5649 -> 5647;
5650 -> 5646;
5650 -> 5647;
5651 -> 5646;
5651 -> 5647;
5652 -> 5648;
5652 -> 5651;
5652 -> 5647;
5653 -> 5649;
5653 -> 5651;
5653 -> 5647;
5654 -> 5650;
5654 -> 5651;
5654 -> 5647;
5655 -> 5646;
5655 -> 5611;
5656 -> 5500;
5657 -> 5611;
5657 -> 5656;
5657 -> 5500;
5658 -> 5500;
5659 -> 5611;
5659 -> 5658;
5659 -> 5500;
5660 -> 5611;
5660 -> 5659;
5661 -> 0;
5661 -> 5659;
5662 -> 5659;
5663 -> 5660;
5663 -> 5659;
5664 -> 5659;
5665 -> 5661;
5665 -> 5664;
5666 -> 5662;
5666 -> 5664;
5667 -> 5663;
5667 -> 5664;
5668 -> 5662;
5668 -> 5664;
5669 -> 5665;
5669 -> 5668;
5669 -> 5664;
5670 -> 5666;
5670 -> 5668;
5670 -> 5664;
5671 -> 5667;
5671 -> 5668;
5671 -> 5664;
5672 -> 5662;
5672 -> 5659;
5673 -> 5575;
5673 -> 5600;
5673 -> 5602;
5673 -> 5623;
5673 -> 5625;
5673 -> 5644;
5673 -> 5655;
5673 -> 5672;
5673 -> 5584;
5673 -> 5585;
5673 -> 5586;
5673 -> 5597;
5673 -> 5598;
5673 -> 5599;
5673 -> 5608;
5673 -> 5609;
5673 -> 5610;
5673 -> 5620;
5673 -> 5621;
5673 -> 5622;
5673 -> 5631;
5673 -> 5632;
5673 -> 5633;
5673 -> 5641;
5673 -> 5642;
5673 -> 5643;
5673 -> 5652;
5673 -> 5653;
5673 -> 5654;
5673 -> 5669;
5673 -> 5670;
5673 -> 5671;
5673 -> 5491;
5674 -> 5673;
5675 -> 5674;
5676 -> 5493;
5676 -> 5486;
5676 -> 5549;
5676 -> 5673;
5676 -> 5674;
5677 -> 5494;
5677 -> 5676;
5677 -> 5483;
5677 -> 5674;
5678 -> 5674;
5679 -> 5493;
5679 -> 5486;
5679 -> 5549;
5679 -> 5673;
5679 -> 5674;
5680 -> 5494;
5680 -> 5679;
5680 -> 5677;
5680 -> 5674;
5681 -> 5674;
5682 -> 5492;
5682 -> 5485;
5682 -> 5549;
5682 -> 5673;
5682 -> 5674;
5683 -> 5494;
5683 -> 5682;
5683 -> 5680;
5683 -> 5674;
5684 -> 5487;
5684 -> 5675;
5684 -> 5460;
5685 -> 4977;
5685 -> 5684;
5685 -> 5449;
5685 -> 4944;
5686 -> 5115;
5686 -> 5322;
5686 -> 4944;
5687 -> 4982;
5687 -> 5106;
5687 -> 4944;
5688 -> 4977;
5688 -> 5685;
5688 -> 4944;
5689 -> 4767;
5690 -> 3313;
5691 -> 3314;
5691 -> 3313;
5692 -> 4764;
5692 -> 3313;
5693 -> 3313;
5694 -> 5691;
5694 -> 5693;
5695 -> 5692;
5695 -> 5693;
5696 -> 5695;
5696 -> 5693;
5697 -> 5696;
5697 -> 4764;
5697 -> 5296;
5698 -> 5694;
5698 -> 5697;
5698 -> 5296;
5698 -> 5696;
5699 -> 5696;
5699 -> 5698;
5700 -> 5699;
5700 -> 5698;
5701 -> 5699;
5702 -> 3313;
5703 -> 3314;
5703 -> 3313;
}