digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 727077"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 727078"];
3 [label="param BindingTests(this) 727079"];
4 [label="'C' 727080"];
5 [label="DefaultTypeName = 'C' 727081"];
6 [label="'M' 727082"];
7 [label="DefaultMethodName = 'M' 727083"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 727084"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 727085"];
10 [label="param CompilingTestBase(this) 727086"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 727087"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 727088"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 727089"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 727090"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 727091"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 727092"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 727093"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 727094"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 727095"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 727096"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 727097"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 727098"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 727099"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 727100"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 727101"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 727102"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 727103"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 727104"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 727105"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 727106"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 727107"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 727108"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 727109"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 727110"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 727111"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 727112"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 727113"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 727114"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 727115"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 727116"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 727117"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 727118"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 727119"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 727120"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 727121"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 727122"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 727123"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 727124"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 727125"];
50 [label="LazyThreadSafetyMode.PublicationOnly 727126"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 727127"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 727128"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 727129"];
54 [label="LazyThreadSafetyMode.PublicationOnly 727130"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 727131"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 727132"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 727133"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 727134"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 727135"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 727136"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 727137"];
62 [label="LazyThreadSafetyMode.PublicationOnly 727138"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 727139"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 727140"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 727141"];
66 [label="LazyThreadSafetyMode.PublicationOnly 727142"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 727143"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 727144"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 727145"];
70 [label="LazyThreadSafetyMode.PublicationOnly 727146"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 727147"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 727148"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 727149"];
74 [label="LazyThreadSafetyMode.PublicationOnly 727150"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727151"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727152"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 727153"];
78 [label="LazyThreadSafetyMode.PublicationOnly 727154"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727155"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727156"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 727157"];
82 [label="LazyThreadSafetyMode.PublicationOnly 727158"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727159"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727160"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 727161"];
86 [label="LazyThreadSafetyMode.PublicationOnly 727162"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727163"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727164"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 727165"];
90 [label="LazyThreadSafetyMode.PublicationOnly 727166"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727167"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727168"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 727169"];
94 [label="LazyThreadSafetyMode.PublicationOnly 727170"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727171"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727172"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 727173"];
98 [label="LazyThreadSafetyMode.PublicationOnly 727174"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727175"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727176"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 727177"];
102 [label="LazyThreadSafetyMode.PublicationOnly 727178"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 727179"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 727180"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 727181"];
106 [label="LazyThreadSafetyMode.PublicationOnly 727182"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 727183"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 727184"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 727185"];
110 [label="LazyThreadSafetyMode.PublicationOnly 727186"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727187"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727188"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 727189"];
114 [label="LazyThreadSafetyMode.PublicationOnly 727190"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727191"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727192"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 727193"];
118 [label="LazyThreadSafetyMode.PublicationOnly 727194"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727195"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727196"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 727197"];
122 [label="LazyThreadSafetyMode.PublicationOnly 727198"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727199"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727200"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 727201"];
126 [label="LazyThreadSafetyMode.PublicationOnly 727202"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 727203"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 727204"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 727205"];
130 [label="LazyThreadSafetyMode.PublicationOnly 727206"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727207"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727208"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 727209"];
134 [label="LazyThreadSafetyMode.PublicationOnly 727210"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727211"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727212"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 727213"];
138 [label="LazyThreadSafetyMode.PublicationOnly 727214"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727215"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727216"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 727217"];
142 [label="LazyThreadSafetyMode.PublicationOnly 727218"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727219"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727220"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 727221"];
146 [label="LazyThreadSafetyMode.PublicationOnly 727222"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727223"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727224"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 727225"];
150 [label="LazyThreadSafetyMode.PublicationOnly 727226"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727227"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727228"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 727229"];
154 [label="LazyThreadSafetyMode.PublicationOnly 727230"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727231"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727232"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 727233"];
158 [label="LazyThreadSafetyMode.PublicationOnly 727234"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727235"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727236"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 727237"];
162 [label="LazyThreadSafetyMode.PublicationOnly 727238"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727239"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727240"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 727241"];
166 [label="LazyThreadSafetyMode.PublicationOnly 727242"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727243"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727244"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 727245"];
170 [label="LazyThreadSafetyMode.PublicationOnly 727246"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727247"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727248"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 727249"];
174 [label="LazyThreadSafetyMode.PublicationOnly 727250"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727251"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727252"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 727253"];
178 [label="LazyThreadSafetyMode.PublicationOnly 727254"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727255"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 727256"];
181 [label="@'R:\\Invalid.dll' 727257"];
182 [label="fullPath: @'R:\\Invalid.dll' 727258"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 727259"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 727260"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 727261"];
186 [label="MscorlibRef_v4_0_30316_17626 727262"];
187 [label="Net451.mscorlib 727263"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 727264"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 727265"];
190 [label="'/*<bind>*/' 727266"];
191 [label="StartString = '/*<bind>*/' 727267"];
192 [label="'/*</bind>*/' 727268"];
193 [label="EndString = '/*</bind>*/' 727269"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 727270"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 727271"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 727272"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 727273"];
198 [label="param CSharpTestBase(this) 727274"];
199 [label="param CommonTestBase(this) 727275"];
200 [label="param TestBase(this) 727276"];
201 [label="_temp 727277"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 727278"];
203 [label="param UnimplementedInterfaceSquiggleLocation_InterfaceInheritanceScenario04(this) 727279"];
204 [label="string scenarioCode = @'\npublic class ITT\n    : IInterfaceBase, \n     IInterfaceBase2 \n{ }\n\npublic interface IInterfaceBase\n{\n    void xyz();\n}\n\npublic interface IInterfaceBase2\n{\n    void xyz();\n}\n'; 727280"];
205 [label="var testAssembly = CreateCompilation(scenarioCode); 727281"];
206 [label="scenarioCode 727282"];
207 [label="param operator(string source) 727283"];
208 [label="source 727284"];
209 [label="new CSharpTestSource(source) 727285"];
210 [label="param CSharpTestSource(object value) 727286"];
211 [label="param CSharpTestSource(this) 727287"];
212 [label="Value 727288"];
213 [label="var testAssembly = CreateCompilation(scenarioCode); 727289"];
214 [label="var testAssembly = CreateCompilation(scenarioCode); 727290"];
215 [label="CreateCompilation(scenarioCode) 727291"];
216 [label="param CreateCompilation(CSharpTestSource source) 727292"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 727293"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 727294"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 727295"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 727296"];
221 [label="param CreateCompilation(string assemblyName = '') 727297"];
222 [label="param CreateCompilation(string sourceFileName = '') 727298"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 727299"];
224 [label="source 727300"];
225 [label="targetFramework 727301"];
226 [label="references 727302"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 727303"];
228 [label="param GetReferences(TargetFramework tf) 727304"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 727305"];
230 [label="var references = GetReferences(tf); 727306"];
231 [label="GetReferences(tf) 727307"];
232 [label="param GetReferences(TargetFramework targetFramework) 727308"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 727309"];
234 [label="StandardReferences 727310"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 727311"];
236 [label="Mscorlib46ExtendedReferences 727312"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 727313"];
238 [label="TestBase.ValueTupleRef 727314"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 727315"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 727316"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 727317"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 727318"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 727319"];
244 [label="return references; 727320"];
245 [label="options 727321"];
246 [label="parseOptions 727322"];
247 [label="assemblyName 727323"];
248 [label="sourceFileName 727324"];
249 [label="skipUsesIsNullable 727325"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 727326"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 727327"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 727328"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 727329"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 727330"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 727331"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 727332"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 727333"];
258 [label="source 727334"];
259 [label="references 727335"];
260 [label="options 727336"];
261 [label="parseOptions 727337"];
262 [label="assemblyName 727338"];
263 [label="sourceFileName 727339"];
264 [label="skipUsesIsNullable 727340"];
265 [label="null 727341"];
266 [label="experimentalFeature: null 727342"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 727343"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 727344"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 727345"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 727346"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 727347"];
272 [label="param CreateCompilationCore(string assemblyName) 727348"];
273 [label="param CreateCompilationCore(string sourceFileName) 727349"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 727350"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 727351"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 727352"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 727353"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 727354"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 727355"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 727356"];
281 [label="param GetSyntaxTrees(this) 727357"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 727358"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 727359"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 727360"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 727361"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 727362"];
287 [label="param Parse(string text) 727363"];
288 [label="param Parse(string filename = '') 727364"];
289 [label="param Parse(CSharpParseOptions options = null) 727365"];
290 [label="param Parse(Encoding encoding = null) 727366"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 727367"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 727368"];
293 [label="kind: SourceCodeKind.Regular 727369"];
294 [label="documentationMode: DocumentationMode.Parse 727370"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 727371"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 727372"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 727373"];
298 [label="SourceCodeKind.Script 727374"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 727375"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 727376"];
301 [label="LanguageVersion.CSharp6 727377"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 727378"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 727379"];
304 [label="LanguageVersion.CSharp7 727380"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 727381"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 727382"];
307 [label="LanguageVersion.CSharp7_1 727383"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 727384"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 727385"];
310 [label="LanguageVersion.CSharp7_2 727386"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 727387"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 727388"];
313 [label="LanguageVersion.CSharp7_3 727389"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 727390"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 727391"];
316 [label="LanguageVersion.Default 727392"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 727393"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 727394"];
319 [label="LanguageVersion.Preview 727395"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 727396"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 727397"];
322 [label="LanguageVersion.CSharp8 727398"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727399"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727400"];
325 [label="LanguageVersion.CSharp9 727401"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 727402"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 727403"];
328 [label="DocumentationMode.Diagnose 727404"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 727405"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 727406"];
331 [label="Regular 727407"];
332 [label="'UseLegacyStrongNameProvider' 727408"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 727409"];
334 [label="param WithFeature(this CSharpParseOptions options) 727410"];
335 [label="param WithFeature(string feature) 727411"];
336 [label="param WithFeature(string value = 'true') 727412"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 727413"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 727414"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 727415"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 727416"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 727417"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 727418"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 727419"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 727420"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 727421"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 727422"];
347 [label="1 727423"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 727424"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 727425"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 727426"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 727427"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 727428"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 727429"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 727430"];
355 [label="LanguageVersion.CSharp8 727431"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727432"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727433"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 727434"];
359 [label="new SmallDictionary<string, string> { } 727435"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 727436"];
361 [label="kind: SourceCodeKind.Regular 727437"];
362 [label="documentationMode: DocumentationMode.None 727438"];
363 [label="languageVersion: LanguageVersion.Preview 727439"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 727440"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 727441"];
366 [label="s_experimentalFeatures 727442"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 727443"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 727444"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 727445"];
370 [label="'testV7SwitchBinder' 727446"];
371 [label="'true' 727447"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 727448"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 727449"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 727450"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 727451"];
376 [label="RegularWithRecursivePatterns = Regular8 727452"];
377 [label="RegularWithoutPatternCombinators = Regular8 727453"];
378 [label="RegularWithPatternCombinators = RegularPreview 727454"];
379 [label="OutputKind.DynamicallyLinkedLibrary 727455"];
380 [label="OptimizationLevel.Release 727456"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 727457"];
382 [label="param CreateTestOptions(OutputKind outputKind) 727458"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727459"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 727460"];
385 [label="outputKind 727461"];
386 [label="optimizationLevel: optimizationLevel 727462"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 727463"];
388 [label="allowUnsafe: allowUnsafe 727464"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727465"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727466"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 727467"];
392 [label="OutputKind.ConsoleApplication 727468"];
393 [label="OptimizationLevel.Release 727469"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 727470"];
395 [label="param CreateTestOptions(OutputKind outputKind) 727471"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727472"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 727473"];
398 [label="outputKind 727474"];
399 [label="optimizationLevel: optimizationLevel 727475"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 727476"];
401 [label="allowUnsafe: allowUnsafe 727477"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727478"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727479"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 727480"];
405 [label="true 727481"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 727482"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 727483"];
408 [label="true 727484"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 727485"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 727486"];
411 [label="OutputKind.DynamicallyLinkedLibrary 727487"];
412 [label="OptimizationLevel.Debug 727488"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 727489"];
414 [label="param CreateTestOptions(OutputKind outputKind) 727490"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727491"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 727492"];
417 [label="outputKind 727493"];
418 [label="optimizationLevel: optimizationLevel 727494"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 727495"];
420 [label="allowUnsafe: allowUnsafe 727496"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727497"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727498"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 727499"];
424 [label="OutputKind.ConsoleApplication 727500"];
425 [label="OptimizationLevel.Debug 727501"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 727502"];
427 [label="param CreateTestOptions(OutputKind outputKind) 727503"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727504"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 727505"];
430 [label="outputKind 727506"];
431 [label="optimizationLevel: optimizationLevel 727507"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 727508"];
433 [label="allowUnsafe: allowUnsafe 727509"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727510"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727511"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 727512"];
437 [label="OutputKind.WindowsRuntimeMetadata 727513"];
438 [label="OptimizationLevel.Release 727514"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 727515"];
440 [label="param CreateTestOptions(OutputKind outputKind) 727516"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727517"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 727518"];
443 [label="outputKind 727519"];
444 [label="optimizationLevel: optimizationLevel 727520"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 727521"];
446 [label="allowUnsafe: allowUnsafe 727522"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727523"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727524"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 727525"];
450 [label="OutputKind.WindowsRuntimeMetadata 727526"];
451 [label="OptimizationLevel.Debug 727527"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 727528"];
453 [label="param CreateTestOptions(OutputKind outputKind) 727529"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727530"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 727531"];
456 [label="outputKind 727532"];
457 [label="optimizationLevel: optimizationLevel 727533"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 727534"];
459 [label="allowUnsafe: allowUnsafe 727535"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727536"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727537"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 727538"];
463 [label="OutputKind.NetModule 727539"];
464 [label="OptimizationLevel.Release 727540"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 727541"];
466 [label="param CreateTestOptions(OutputKind outputKind) 727542"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727543"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 727544"];
469 [label="outputKind 727545"];
470 [label="optimizationLevel: optimizationLevel 727546"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 727547"];
472 [label="allowUnsafe: allowUnsafe 727548"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727549"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727550"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 727551"];
476 [label="OutputKind.NetModule 727552"];
477 [label="OptimizationLevel.Debug 727553"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 727554"];
479 [label="param CreateTestOptions(OutputKind outputKind) 727555"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727556"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 727557"];
482 [label="outputKind 727558"];
483 [label="optimizationLevel: optimizationLevel 727559"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 727560"];
485 [label="allowUnsafe: allowUnsafe 727561"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727562"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727563"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 727564"];
489 [label="true 727565"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 727566"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 727567"];
492 [label="true 727568"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 727569"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 727570"];
495 [label="true 727571"];
496 [label="DebugDll.WithAllowUnsafe(true) 727572"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 727573"];
498 [label="true 727574"];
499 [label="DebugExe.WithAllowUnsafe(true) 727575"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 727576"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727577"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727578"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727579"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727580"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727581"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727582"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727583"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727584"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727585"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727586"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727587"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727588"];
513 [label="DebugInformationFormat.Pdb 727589"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 727590"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 727591"];
516 [label="options = TestOptions.Regular; 727592"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727593"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727594"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727595"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727596"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727597"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727598"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727599"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727600"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727601"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727602"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 727603"];
528 [label="param CheckSerializable(SyntaxTree tree) 727604"];
529 [label="var stream = new MemoryStream(); 727605"];
530 [label="var root = tree.GetRoot(); 727606"];
531 [label="var root = tree.GetRoot(); 727607"];
532 [label="root.SerializeTo(stream); 727608"];
533 [label="root.SerializeTo(stream); 727609"];
534 [label="root.SerializeTo(stream); 727610"];
535 [label="stream.Position = 0; 727611"];
536 [label="stream.Position 727612"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 727613"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 727614"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 727615"];
540 [label="return tree; 727616"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 727617"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 727618"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 727619"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 727620"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 727621"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 727622"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 727623"];
548 [label="hasTopLevelStatements 727624"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 727625"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 727626"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 727627"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 727628"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 727629"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 727630"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 727631"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 727632"];
557 [label="return; 727633"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 727634"];
559 [label="var compilation = createCompilationLambda(); 727635"];
560 [label="var compilation = createCompilationLambda(); 727636"];
561 [label="return Guid.NewGuid().ToString('D'); 727637"];
562 [label="var compilation = createCompilationLambda(); 727638"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 727639"];
564 [label="IsNullableEnabled(compilation) 727640"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 727641"];
566 [label="var trees = compilation.SyntaxTrees; 727642"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 727643"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 727644"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 727645"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 727646"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 727647"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 727648"];
573 [label="return compilation; 727649"];
574 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727650"];
575 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727651"];
576 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727652"];
577 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase') 727653"];
578 [label="param Diagnostic(object code) 727654"];
579 [label="param Diagnostic(string squiggledText = null) 727655"];
580 [label="param Diagnostic(object[] arguments = null) 727656"];
581 [label="param Diagnostic(LinePosition? startLocation = null) 727657"];
582 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 727658"];
583 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727659"];
584 [label="param Diagnostic(bool isSuppressed = false) 727660"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727661"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727662"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727663"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727664"];
589 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727665"];
590 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727666"];
591 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727667"];
592 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 727668"];
593 [label="param Diagnostic(object code) 727669"];
594 [label="param Diagnostic(string squiggledText = null) 727670"];
595 [label="param Diagnostic(object[] arguments = null) 727671"];
596 [label="param Diagnostic(LinePosition? startLocation = null) 727672"];
597 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 727673"];
598 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727674"];
599 [label="param Diagnostic(bool isSuppressed = false) 727675"];
600 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 727676"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727677"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727678"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727679"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727680"];
605 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727681"];
606 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727682"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727683"];
608 [label="{ } 727684"];
609 [label="None = { } 727685"];
610 [label="null 727686"];
611 [label="Any = null 727687"];
612 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727688"];
613 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 727689"];
614 [label="param DiagnosticDescription(object code) 727690"];
615 [label="param DiagnosticDescription(bool isWarningAsError) 727691"];
616 [label="param DiagnosticDescription(string squiggledText) 727692"];
617 [label="param DiagnosticDescription(object[] arguments) 727693"];
618 [label="param DiagnosticDescription(LinePosition? startLocation) 727694"];
619 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 727695"];
620 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727696"];
621 [label="param DiagnosticDescription(Type errorCodeType = null) 727697"];
622 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727698"];
623 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727699"];
624 [label="param DiagnosticDescription(bool isSuppressed = false) 727700"];
625 [label="param DiagnosticDescription(this) 727701"];
626 [label="_code 727702"];
627 [label="_isWarningAsError 727703"];
628 [label="_isSuppressed 727704"];
629 [label="_squiggledText 727705"];
630 [label="_arguments 727706"];
631 [label="_startPosition 727707"];
632 [label="_argumentOrderDoesNotMatter 727708"];
633 [label="_errorCodeType 727709"];
634 [label="_ignoreArgumentsWhenComparing 727710"];
635 [label="_defaultSeverityOpt 727711"];
636 [label="_effectiveSeverityOpt 727712"];
637 [label="_syntaxPredicate 727713"];
638 [label="_showPredicate 727714"];
639 [label="_location 727715"];
640 [label="_argumentsAsStrings 727716"];
641 [label="_code 727717"];
642 [label="_isWarningAsError 727718"];
643 [label="_squiggledText 727719"];
644 [label="_arguments 727720"];
645 [label="_startPosition 727721"];
646 [label="_syntaxPredicate 727722"];
647 [label="_argumentOrderDoesNotMatter 727723"];
648 [label="_errorCodeType = errorCodeType ?? code.GetType(); 727724"];
649 [label="_errorCodeType 727725"];
650 [label="_defaultSeverityOpt 727726"];
651 [label="_effectiveSeverityOpt 727727"];
652 [label="_isSuppressed 727728"];
653 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727729"];
654 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727730"];
655 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()') 727731"];
656 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()') 727732"];
657 [label="param WithArguments(params object[] arguments) 727733"];
658 [label="param WithArguments(this) 727734"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727735"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727736"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727737"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727738"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727739"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727740"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727741"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727742"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727743"];
668 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727744"];
669 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727745"];
670 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727746"];
671 [label="param DiagnosticDescription(object code) 727747"];
672 [label="param DiagnosticDescription(bool isWarningAsError) 727748"];
673 [label="param DiagnosticDescription(string squiggledText) 727749"];
674 [label="param DiagnosticDescription(object[] arguments) 727750"];
675 [label="param DiagnosticDescription(LinePosition? startLocation) 727751"];
676 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 727752"];
677 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727753"];
678 [label="param DiagnosticDescription(Type errorCodeType = null) 727754"];
679 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727755"];
680 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727756"];
681 [label="param DiagnosticDescription(bool isSuppressed = false) 727757"];
682 [label="param DiagnosticDescription(this) 727758"];
683 [label="_code 727759"];
684 [label="_isWarningAsError 727760"];
685 [label="_isSuppressed 727761"];
686 [label="_squiggledText 727762"];
687 [label="_arguments 727763"];
688 [label="_startPosition 727764"];
689 [label="_argumentOrderDoesNotMatter 727765"];
690 [label="_errorCodeType 727766"];
691 [label="_ignoreArgumentsWhenComparing 727767"];
692 [label="_defaultSeverityOpt 727768"];
693 [label="_effectiveSeverityOpt 727769"];
694 [label="_syntaxPredicate 727770"];
695 [label="_showPredicate 727771"];
696 [label="_location 727772"];
697 [label="_argumentsAsStrings 727773"];
698 [label="_arguments 727774"];
699 [label="_argumentOrderDoesNotMatter 727775"];
700 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727776"];
701 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7) 727777"];
702 [label="param WithLocation(int line) 727778"];
703 [label="param WithLocation(int column) 727779"];
704 [label="param WithLocation(this) 727780"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727781"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727782"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727783"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727784"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727785"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727786"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727787"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727788"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727789"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727790"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727791"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727792"];
717 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727793"];
718 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727794"];
719 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727795"];
720 [label="param DiagnosticDescription(object code) 727796"];
721 [label="param DiagnosticDescription(bool isWarningAsError) 727797"];
722 [label="param DiagnosticDescription(string squiggledText) 727798"];
723 [label="param DiagnosticDescription(object[] arguments) 727799"];
724 [label="param DiagnosticDescription(LinePosition? startLocation) 727800"];
725 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 727801"];
726 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727802"];
727 [label="param DiagnosticDescription(Type errorCodeType = null) 727803"];
728 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727804"];
729 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727805"];
730 [label="param DiagnosticDescription(bool isSuppressed = false) 727806"];
731 [label="param DiagnosticDescription(this) 727807"];
732 [label="_code 727808"];
733 [label="_isWarningAsError 727809"];
734 [label="_isSuppressed 727810"];
735 [label="_squiggledText 727811"];
736 [label="_arguments 727812"];
737 [label="_startPosition 727813"];
738 [label="_argumentOrderDoesNotMatter 727814"];
739 [label="_errorCodeType 727815"];
740 [label="_ignoreArgumentsWhenComparing 727816"];
741 [label="_defaultSeverityOpt 727817"];
742 [label="_effectiveSeverityOpt 727818"];
743 [label="_syntaxPredicate 727819"];
744 [label="_showPredicate 727820"];
745 [label="_location 727821"];
746 [label="_argumentsAsStrings 727822"];
747 [label="_startPosition 727823"];
748 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727824"];
749 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2') 727825"];
750 [label="param Diagnostic(object code) 727826"];
751 [label="param Diagnostic(string squiggledText = null) 727827"];
752 [label="param Diagnostic(object[] arguments = null) 727828"];
753 [label="param Diagnostic(LinePosition? startLocation = null) 727829"];
754 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 727830"];
755 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727831"];
756 [label="param Diagnostic(bool isSuppressed = false) 727832"];
757 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727833"];
758 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727834"];
759 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727835"];
760 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727836"];
761 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727837"];
762 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727838"];
763 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727839"];
764 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 727840"];
765 [label="param Diagnostic(object code) 727841"];
766 [label="param Diagnostic(string squiggledText = null) 727842"];
767 [label="param Diagnostic(object[] arguments = null) 727843"];
768 [label="param Diagnostic(LinePosition? startLocation = null) 727844"];
769 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 727845"];
770 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727846"];
771 [label="param Diagnostic(bool isSuppressed = false) 727847"];
772 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 727848"];
773 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727849"];
774 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727850"];
775 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727851"];
776 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727852"];
777 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727853"];
778 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727854"];
779 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727855"];
780 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 727856"];
781 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 727857"];
782 [label="param DiagnosticDescription(object code) 727858"];
783 [label="param DiagnosticDescription(bool isWarningAsError) 727859"];
784 [label="param DiagnosticDescription(string squiggledText) 727860"];
785 [label="param DiagnosticDescription(object[] arguments) 727861"];
786 [label="param DiagnosticDescription(LinePosition? startLocation) 727862"];
787 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 727863"];
788 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727864"];
789 [label="param DiagnosticDescription(Type errorCodeType = null) 727865"];
790 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727866"];
791 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727867"];
792 [label="param DiagnosticDescription(bool isSuppressed = false) 727868"];
793 [label="param DiagnosticDescription(this) 727869"];
794 [label="_code 727870"];
795 [label="_isWarningAsError 727871"];
796 [label="_isSuppressed 727872"];
797 [label="_squiggledText 727873"];
798 [label="_arguments 727874"];
799 [label="_startPosition 727875"];
800 [label="_argumentOrderDoesNotMatter 727876"];
801 [label="_errorCodeType 727877"];
802 [label="_ignoreArgumentsWhenComparing 727878"];
803 [label="_defaultSeverityOpt 727879"];
804 [label="_effectiveSeverityOpt 727880"];
805 [label="_syntaxPredicate 727881"];
806 [label="_showPredicate 727882"];
807 [label="_location 727883"];
808 [label="_argumentsAsStrings 727884"];
809 [label="_code 727885"];
810 [label="_isWarningAsError 727886"];
811 [label="_squiggledText 727887"];
812 [label="_arguments 727888"];
813 [label="_startPosition 727889"];
814 [label="_syntaxPredicate 727890"];
815 [label="_argumentOrderDoesNotMatter 727891"];
816 [label="_errorCodeType = errorCodeType ?? code.GetType(); 727892"];
817 [label="_errorCodeType 727893"];
818 [label="_defaultSeverityOpt 727894"];
819 [label="_effectiveSeverityOpt 727895"];
820 [label="_isSuppressed 727896"];
821 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 727897"];
822 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727898"];
823 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()') 727899"];
824 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()') 727900"];
825 [label="param WithArguments(params object[] arguments) 727901"];
826 [label="param WithArguments(this) 727902"];
827 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727903"];
828 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727904"];
829 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727905"];
830 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727906"];
831 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727907"];
832 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727908"];
833 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727909"];
834 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727910"];
835 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727911"];
836 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727912"];
837 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727913"];
838 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727914"];
839 [label="param DiagnosticDescription(object code) 727915"];
840 [label="param DiagnosticDescription(bool isWarningAsError) 727916"];
841 [label="param DiagnosticDescription(string squiggledText) 727917"];
842 [label="param DiagnosticDescription(object[] arguments) 727918"];
843 [label="param DiagnosticDescription(LinePosition? startLocation) 727919"];
844 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 727920"];
845 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727921"];
846 [label="param DiagnosticDescription(Type errorCodeType = null) 727922"];
847 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727923"];
848 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727924"];
849 [label="param DiagnosticDescription(bool isSuppressed = false) 727925"];
850 [label="param DiagnosticDescription(this) 727926"];
851 [label="_code 727927"];
852 [label="_isWarningAsError 727928"];
853 [label="_isSuppressed 727929"];
854 [label="_squiggledText 727930"];
855 [label="_arguments 727931"];
856 [label="_startPosition 727932"];
857 [label="_argumentOrderDoesNotMatter 727933"];
858 [label="_errorCodeType 727934"];
859 [label="_ignoreArgumentsWhenComparing 727935"];
860 [label="_defaultSeverityOpt 727936"];
861 [label="_effectiveSeverityOpt 727937"];
862 [label="_syntaxPredicate 727938"];
863 [label="_showPredicate 727939"];
864 [label="_location 727940"];
865 [label="_argumentsAsStrings 727941"];
866 [label="_arguments 727942"];
867 [label="_argumentOrderDoesNotMatter 727943"];
868 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727944"];
869 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6) 727945"];
870 [label="param WithLocation(int line) 727946"];
871 [label="param WithLocation(int column) 727947"];
872 [label="param WithLocation(this) 727948"];
873 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727949"];
874 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727950"];
875 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727951"];
876 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727952"];
877 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727953"];
878 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727954"];
879 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727955"];
880 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727956"];
881 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727957"];
882 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727958"];
883 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727959"];
884 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727960"];
885 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727961"];
886 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727962"];
887 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727963"];
888 [label="param DiagnosticDescription(object code) 727964"];
889 [label="param DiagnosticDescription(bool isWarningAsError) 727965"];
890 [label="param DiagnosticDescription(string squiggledText) 727966"];
891 [label="param DiagnosticDescription(object[] arguments) 727967"];
892 [label="param DiagnosticDescription(LinePosition? startLocation) 727968"];
893 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 727969"];
894 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727970"];
895 [label="param DiagnosticDescription(Type errorCodeType = null) 727971"];
896 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727972"];
897 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727973"];
898 [label="param DiagnosticDescription(bool isSuppressed = false) 727974"];
899 [label="param DiagnosticDescription(this) 727975"];
900 [label="_code 727976"];
901 [label="_isWarningAsError 727977"];
902 [label="_isSuppressed 727978"];
903 [label="_squiggledText 727979"];
904 [label="_arguments 727980"];
905 [label="_startPosition 727981"];
906 [label="_argumentOrderDoesNotMatter 727982"];
907 [label="_errorCodeType 727983"];
908 [label="_ignoreArgumentsWhenComparing 727984"];
909 [label="_defaultSeverityOpt 727985"];
910 [label="_effectiveSeverityOpt 727986"];
911 [label="_syntaxPredicate 727987"];
912 [label="_showPredicate 727988"];
913 [label="_location 727989"];
914 [label="_argumentsAsStrings 727990"];
915 [label="_startPosition 727991"];
916 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727992"];
917 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)) 727993"];
918 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)) 727994"];
919 [label="testAssembly.VerifyDiagnostics(\n                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'\n                //     : IInterfaceBase, \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),\n                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'\n                //      IInterfaceBase2 \n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)) 727995"];
920 [label="param VerifyDiagnostics(this TCompilation c) 727996"];
921 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 727997"];
922 [label="var diagnostics = c.GetDiagnostics(); 727998"];
923 [label="null 727999"];
924 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 728000"];
925 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 728001"];
926 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 728002"];
927 [label="null 728003"];
928 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 728004"];
929 [label="param Imports(CSharpCompilation compilation) 728005"];
930 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 728006"];
931 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 728007"];
932 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 728008"];
933 [label="param Imports(DiagnosticBag diagnostics) 728009"];
934 [label="param Imports(this) 728010"];
935 [label="_compilation 728011"];
936 [label="_diagnostics 728012"];
937 [label="UsingAliases 728013"];
938 [label="Debug.Assert(usingAliases != null); 728014"];
939 [label="Debug.Assert(usingAliases != null); 728015"];
940 [label="Debug.Assert(!usings.IsDefault); 728016"];
941 [label="Debug.Assert(!externs.IsDefault); 728017"];
942 [label="_compilation 728018"];
943 [label="this.UsingAliases 728019"];
944 [label="this.Usings 728020"];
945 [label="_diagnostics 728021"];
946 [label="this.ExternAliases 728022"];
947 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 728023"];
948 [label="var diagnostics = c.GetDiagnostics(); 728024"];
949 [label="param FromGlobalUsings(CSharpCompilation compilation) 728025"];
950 [label="var usings = compilation.Options.Usings; 728026"];
951 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 728027"];
952 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 728028"];
953 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 728029"];
954 [label="return Empty; 728030"];
955 [label="var diagnostics = c.GetDiagnostics(); 728031"];
956 [label="param Complete(CancellationToken cancellationToken) 728032"];
957 [label="param Complete(this) 728033"];
958 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 728034"];
959 [label="cancellationToken.ThrowIfCancellationRequested(); 728035"];
960 [label="var incompletePart = _state.NextIncompletePart; 728036"];
961 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 728037"];
962 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 728038"];
963 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 728039"];
964 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 728040"];
965 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 728041"];
966 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 728042"];
967 [label="Validate() 728043"];
968 [label="param Validate(this) 728044"];
969 [label="if (this == Empty)\n            {\n                return;\n            } 728045"];
970 [label="return; 728046"];
971 [label="Validate(); 728047"];
972 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 728048"];
973 [label="return; 728049"];
974 [label="param Includes(this BinderFlags self) 728050"];
975 [label="param Includes(BinderFlags other) 728051"];
976 [label="return (self & other) == other; 728052"];
977 [label="var diagnostics = c.GetDiagnostics(); 728053"];
978 [label="0 728054"];
979 [label="ExternalScope = 0 728055"];
980 [label="1 728056"];
981 [label="TopLevelScope = 1 728057"];
982 [label="2 728058"];
983 [label="ValueKindInsignificantBits = 2 728059"];
984 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 728060"];
985 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 728061"];
986 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 728062"];
987 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 728063"];
988 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 728064"];
989 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 728065"];
990 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 728066"];
991 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 728067"];
992 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 728068"];
993 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 728069"];
994 [label="10 728070"];
995 [label="MaxParameterListsForErrorRecovery = 10 728071"];
996 [label="'<>h__TransparentIdentifier' 728072"];
997 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 728073"];
998 [label="s => (MethodSymbol)s 728074"];
999 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 728075"];
1000 [label="s => (PropertySymbol)s 728076"];
1001 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 728077"];
1002 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 728078"];
1003 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 728079"];
1004 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 728080"];
1005 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 728081"];
1006 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 728082"];
1007 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728083"];
1008 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728084"];
1009 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728085"];
1010 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728086"];
1011 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 728087"];
1012 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728088"];
1013 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728089"];
1014 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728090"];
1015 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728091"];
1016 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728092"];
1017 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728093"];
1018 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 728094"];
1019 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 728095"];
1020 [label="param GetWellKnownTypeMember(WellKnownMember member) 728096"];
1021 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 728097"];
1022 [label="param GetWellKnownTypeMember(Location location = null) 728098"];
1023 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 728099"];
1024 [label="param GetWellKnownTypeMember(bool isOptional = false) 728100"];
1025 [label="Debug.Assert((syntax != null) ^ (location != null)); 728101"];
1026 [label="Debug.Assert((syntax != null) ^ (location != null)); 728102"];
1027 [label="Debug.Assert((syntax != null) ^ (location != null)); 728103"];
1028 [label="Debug.Assert((syntax != null) ^ (location != null)); 728104"];
1029 [label="DiagnosticInfo useSiteDiagnostic; 728105"];
1030 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728106"];
1031 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728107"];
1032 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728108"];
1033 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728109"];
1034 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 728110"];
1035 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 728111"];
1036 [label="param GetWellKnownTypeMember(WellKnownMember member) 728112"];
1037 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 728113"];
1038 [label="param GetWellKnownTypeMember(bool isOptional = false) 728114"];
1039 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728115"];
1040 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728116"];
1041 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728117"];
1042 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728118"];
1043 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728119"];
1044 [label="Debug.Assert(symbol is object); 728120"];
1045 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 728121"];
1046 [label="isInternal = false; 728122"];
1047 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728123"];
1048 [label="symbol = symbol.ContainingType; 728124"];
1049 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 728125"];
1050 [label="return true; 728126"];
1051 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728127"];
1052 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728128"];
1053 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728129"];
1054 [label="Debug.Assert(symbol is object); 728130"];
1055 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 728131"];
1056 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728132"];
1057 [label="symbol = symbol.ContainingType; 728133"];
1058 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 728134"];
1059 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728135"];
1060 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728136"];
1061 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 728137"];
1062 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 728138"];
1063 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 728139"];
1064 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 728140"];
1065 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728141"];
1066 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728142"];
1067 [label="Debug.Assert(symbol is object); 728143"];
1068 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 728144"];
1069 [label="isInternal = false; 728145"];
1070 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728146"];
1071 [label="symbol = symbol.ContainingType; 728147"];
1072 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 728148"];
1073 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728149"];
1074 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728150"];
1075 [label="Debug.Assert(symbol is object); 728151"];
1076 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 728152"];
1077 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728153"];
1078 [label="symbol = symbol.ContainingType; 728154"];
1079 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 728155"];
1080 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 728156"];
1081 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 728157"];
1082 [label="return memberSymbol; 728158"];
1083 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 728159"];
1084 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 728160"];
1085 [label="return memberSymbol; 728161"];
1086 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728162"];
1087 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728163"];
1088 [label="Debug.Assert(symbol is object); 728164"];
1089 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 728165"];
1090 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728166"];
1091 [label="symbol = symbol.ContainingType; 728167"];
1092 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 728168"];
1093 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728169"];
1094 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728170"];
1095 [label="Debug.Assert(symbol is object); 728171"];
1096 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 728172"];
1097 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 728173"];
1098 [label="symbol = symbol.ContainingType; 728174"];
1099 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 728175"];
1100 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 728176"];
1101 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 728177"];
1102 [label="return memberSymbol; 728178"];
1103 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 728179"];
1104 [label="return memberSymbol; 728180"];
1105 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 728181"];
1106 [label="return memberSymbol; 728182"];
1107 [label="return memberSymbol; 728183"];
1108 [label="param BinderFactory(CSharpCompilation compilation) 728184"];
1109 [label="param BinderFactory(SyntaxTree syntaxTree) 728185"];
1110 [label="param BinderFactory(bool ignoreAccessibility) 728186"];
1111 [label="param BinderFactory(this) 728187"];
1112 [label="_binderCache 728188"];
1113 [label="_compilation 728189"];
1114 [label="_syntaxTree 728190"];
1115 [label="_buckStopsHereBinder 728191"];
1116 [label="_ignoreAccessibility 728192"];
1117 [label="_binderFactoryVisitorPool 728193"];
1118 [label="_compilation 728194"];
1119 [label="_syntaxTree 728195"];
1120 [label="_ignoreAccessibility 728196"];
1121 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 728197"];
1122 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 728198"];
1123 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 728199"];
1124 [label="_binderFactoryVisitorPool 728200"];
1125 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 728201"];
1126 [label="_binderCache 728202"];
1127 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 728203"];
1128 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 728204"];
1129 [label="new BuckStopsHereBinder(compilation) 728205"];
1130 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 728206"];
1131 [label="param BuckStopsHereBinder(this) 728207"];
1132 [label="compilation 728208"];
1133 [label="param BuckStopsHereBinder(this) 728209"];
1134 [label="param Binder(CSharpCompilation compilation) 728210"];
1135 [label="param Binder(this) 728211"];
1136 [label="internal CSharpCompilation Compilation { get; } 728212"];
1137 [label="Flags 728213"];
1138 [label="protected internal Binder? Next { get; } 728214"];
1139 [label="_lazyConversions 728215"];
1140 [label="_lazyOverloadResolution 728216"];
1141 [label="RoslynDebug.Assert(compilation != null); 728217"];
1142 [label="RoslynDebug.Assert(compilation != null); 728218"];
1143 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 728219"];
1144 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 728220"];
1145 [label="this.Flags 728221"];
1146 [label="this.Compilation 728222"];
1147 [label="_buckStopsHereBinder 728223"];
1148 [label="var diagnostics = c.GetDiagnostics(); 728224"];
1149 [label="param GetBinder(SyntaxNode node) 728225"];
1150 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 728226"];
1151 [label="param GetBinder(Symbol memberOpt = null) 728227"];
1152 [label="param GetBinder(this) 728228"];
1153 [label="int position = node.SpanStart; 728229"];
1154 [label="InScript 728230"];
1155 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 728231"];
1156 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 728232"];
1157 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 728233"];
1158 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 728234"];
1159 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 728235"];
1160 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 728236"];
1161 [label="node = node.Parent; 728237"];
1162 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728238"];
1163 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728239"];
1164 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728240"];
1165 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728241"];
1166 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 728242"];
1167 [label="param GetBinder(SyntaxNode node) 728243"];
1168 [label="param GetBinder(int position) 728244"];
1169 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 728245"];
1170 [label="param GetBinder(Symbol memberOpt = null) 728246"];
1171 [label="param GetBinder(this) 728247"];
1172 [label="Debug.Assert(node != null); 728248"];
1173 [label="Debug.Assert(node != null); 728249"];
1174 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 728250"];
1175 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 728251"];
1176 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 728252"];
1177 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 728253"];
1178 [label="param BinderFactoryVisitor(BinderFactory factory) 728254"];
1179 [label="param BinderFactoryVisitor(this) 728255"];
1180 [label="param BinderFactoryVisitor(this) 728256"];
1181 [label="_position 728257"];
1182 [label="_memberDeclarationOpt 728258"];
1183 [label="_memberOpt 728259"];
1184 [label="_factory 728260"];
1185 [label="_factory 728261"];
1186 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 728262"];
1187 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728263"];
1188 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728264"];
1189 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728265"];
1190 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 728266"];
1191 [label="param Initialize(int position) 728267"];
1192 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 728268"];
1193 [label="param Initialize(Symbol memberOpt) 728269"];
1194 [label="param Initialize(this) 728270"];
1195 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728271"];
1196 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728272"];
1197 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728273"];
1198 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728274"];
1199 [label="_position 728275"];
1200 [label="_memberDeclarationOpt 728276"];
1201 [label="_memberOpt 728277"];
1202 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728278"];
1203 [label="Binder result = visitor.Visit(node); 728279"];
1204 [label="visitor.Visit(node) 728280"];
1205 [label="param Visit(SyntaxNode node) 728281"];
1206 [label="param Visit(this) 728282"];
1207 [label="return VisitCore(node); 728283"];
1208 [label="VisitCore(node) 728284"];
1209 [label="param VisitCore(SyntaxNode node) 728285"];
1210 [label="param VisitCore(this) 728286"];
1211 [label="return ((CSharpSyntaxNode)node).Accept(this); 728287"];
1212 [label="return ((CSharpSyntaxNode)node).Accept(this); 728288"];
1213 [label="return ((CSharpSyntaxNode)node).Accept(this); 728289"];
1214 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 728290"];
1215 [label="param VisitClassDeclaration(this) 728291"];
1216 [label="return VisitTypeDeclarationCore(node); 728292"];
1217 [label="VisitTypeDeclarationCore(node) 728293"];
1218 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 728294"];
1219 [label="param VisitTypeDeclarationCore(this) 728295"];
1220 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 728296"];
1221 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 728297"];
1222 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 728298"];
1223 [label="NodeUsage extraInfo = NodeUsage.Normal; 728299"];
1224 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728300"];
1225 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728301"];
1226 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728302"];
1227 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728303"];
1228 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728304"];
1229 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728305"];
1230 [label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728306"];
1231 [label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 728307"];
1232 [label="extraInfo = NodeUsage.NamedTypeBaseListOrParameterList; 728308"];
1233 [label="return VisitTypeDeclarationCore(parent, extraInfo); 728309"];
1234 [label="return VisitTypeDeclarationCore(parent, extraInfo); 728310"];
1235 [label="VisitTypeDeclarationCore(parent, extraInfo) 728311"];
1236 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 728312"];
1237 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 728313"];
1238 [label="param VisitTypeDeclarationCore(this) 728314"];
1239 [label="var key = CreateBinderCacheKey(parent, extraInfo); 728315"];
1240 [label="var key = CreateBinderCacheKey(parent, extraInfo); 728316"];
1241 [label="CreateBinderCacheKey(parent, extraInfo) 728317"];
1242 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 728318"];
1243 [label="param CreateBinderCacheKey(NodeUsage usage) 728319"];
1244 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 728320"];
1245 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 728321"];
1246 [label="return new BinderCacheKey(node, usage); 728322"];
1247 [label="return new BinderCacheKey(node, usage); 728323"];
1248 [label="return new BinderCacheKey(node, usage); 728324"];
1249 [label="new BinderCacheKey(node, usage) 728325"];
1250 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 728326"];
1251 [label="param BinderCacheKey(NodeUsage usage) 728327"];
1252 [label="param BinderCacheKey(this) 728328"];
1253 [label="this.syntaxNode 728329"];
1254 [label="this.usage 728330"];
1255 [label="var key = CreateBinderCacheKey(parent, extraInfo); 728331"];
1256 [label="Binder resultBinder; 728332"];
1257 [label="binderCache 728333"];
1258 [label="get\n                {\n                    return _factory._binderCache;\n                } 728334"];
1259 [label="return _factory._binderCache; 728335"];
1260 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 728336"];
1261 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 728337"];
1262 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 728338"];
1263 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 728339"];
1264 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 728340"];
1265 [label="param GetHashCode(this) 728341"];
1266 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 728342"];
1267 [label="resultBinder = VisitCore(parent.Parent); 728343"];
1268 [label="VisitCore(parent.Parent) 728344"];
1269 [label="param VisitCore(SyntaxNode node) 728345"];
1270 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 728346"];
1271 [label="param VisitCompilationUnit(this) 728347"];
1272 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 728348"];
1273 [label="IsInUsing(parent) 728349"];
1274 [label="param IsInUsing(CSharpSyntaxNode containingNode) 728350"];
1275 [label="param IsInUsing(this) 728351"];
1276 [label="TextSpan containingSpan = containingNode.Span; 728352"];
1277 [label="SyntaxToken token; 728353"];
1278 [label="token 728354"];
1279 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 728355"];
1280 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 728356"];
1281 [label="token = containingNode.FindToken(_position); 728357"];
1282 [label="token = containingNode.FindToken(_position); 728358"];
1283 [label="var node = token.Parent; 728359"];
1284 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 728360"];
1285 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 728361"];
1286 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 728362"];
1287 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 728363"];
1288 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 728364"];
1289 [label="node = node.Parent; 728365"];
1290 [label="return false; 728366"];
1291 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 728367"];
1292 [label="InScript 728368"];
1293 [label="get\n                {\n                    return _factory.InScript;\n                } 728369"];
1294 [label="_factory.InScript 728370"];
1295 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 728371"];
1296 [label="return _factory.InScript; 728372"];
1297 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 728373"];
1298 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 728374"];
1299 [label="param VisitCompilationUnit(bool inUsing) 728375"];
1300 [label="param VisitCompilationUnit(bool inScript) 728376"];
1301 [label="param VisitCompilationUnit(this) 728377"];
1302 [label="syntaxTree 728378"];
1303 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 728379"];
1304 [label="return _factory._syntaxTree; 728380"];
1305 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 728381"];
1306 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 728382"];
1307 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 728383"];
1308 [label="inUsing 728384"];
1309 [label="inScript 728385"];
1310 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 728386"];
1311 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 728387"];
1312 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 728388"];
1313 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 728389"];
1314 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 728390"];
1315 [label="param CreateBinderCacheKey(NodeUsage usage) 728391"];
1316 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 728392"];
1317 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 728393"];
1318 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 728394"];
1319 [label="Binder result; 728395"];
1320 [label="binderCache 728396"];
1321 [label="get\n                {\n                    return _factory._binderCache;\n                } 728397"];
1322 [label="return _factory._binderCache; 728398"];
1323 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 728399"];
1324 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 728400"];
1325 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 728401"];
1326 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 728402"];
1327 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 728403"];
1328 [label="this.buckStopsHereBinder 728404"];
1329 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 728405"];
1330 [label="return _factory._buckStopsHereBinder; 728406"];
1331 [label="result = this.buckStopsHereBinder; 728407"];
1332 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 728408"];
1333 [label="compilation 728409"];
1334 [label="get\n                {\n                    return _factory._compilation;\n                } 728410"];
1335 [label="return _factory._compilation; 728411"];
1336 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728412"];
1337 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728413"];
1338 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728414"];
1339 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728415"];
1340 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728416"];
1341 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 728417"];
1342 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 728418"];
1343 [label="param InContainerBinder(Binder next) 728419"];
1344 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 728420"];
1345 [label="param InContainerBinder(bool inUsing) 728421"];
1346 [label="param InContainerBinder(this) 728422"];
1347 [label="next 728423"];
1348 [label="param InContainerBinder(this) 728424"];
1349 [label="param Binder(Binder next) 728425"];
1350 [label="param Binder(this) 728426"];
1351 [label="param Binder(Conversions? conversions = null) 728427"];
1352 [label="RoslynDebug.Assert(next != null); 728428"];
1353 [label="RoslynDebug.Assert(next != null); 728429"];
1354 [label="Next 728430"];
1355 [label="this.Flags 728431"];
1356 [label="this.Compilation 728432"];
1357 [label="_lazyConversions 728433"];
1358 [label="_container 728434"];
1359 [label="_computeImports 728435"];
1360 [label="_lazyImports 728436"];
1361 [label="_lazyImportChain 728437"];
1362 [label="_lazyQuickAttributeChecker 728438"];
1363 [label="Debug.Assert((object)container != null); 728439"];
1364 [label="Debug.Assert((object)container != null); 728440"];
1365 [label="Debug.Assert(declarationSyntax != null); 728441"];
1366 [label="Debug.Assert(declarationSyntax != null); 728442"];
1367 [label="_container 728443"];
1368 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 728444"];
1369 [label="_computeImports 728445"];
1370 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 728446"];
1371 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 728447"];
1372 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 728448"];
1373 [label="_usingsSyntax 728449"];
1374 [label="compilation 728450"];
1375 [label="get\n                {\n                    return _factory._compilation;\n                } 728451"];
1376 [label="return _factory._compilation; 728452"];
1377 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 728453"];
1378 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 728454"];
1379 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 728455"];
1380 [label="binderCache 728456"];
1381 [label="return _factory._binderCache; 728457"];
1382 [label="binderCache.TryAdd(key, result); 728458"];
1383 [label="binderCache.TryAdd(key, result); 728459"];
1384 [label="binderCache.TryAdd(key, result); 728460"];
1385 [label="binderCache.TryAdd(key, result); 728461"];
1386 [label="binderCache.TryAdd(key, result); 728462"];
1387 [label="return result; 728463"];
1388 [label="return ((CSharpSyntaxNode)node).Accept(this); 728464"];
1389 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 728465"];
1390 [label="resultBinder.ContainingMemberOrLambda 728466"];
1391 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 728467"];
1392 [label="var merged = _container as MergedNamespaceSymbol; 728468"];
1393 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 728469"];
1394 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 728470"];
1395 [label="((object)merged != null) 728471"];
1396 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 728472"];
1397 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 728473"];
1398 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 728474"];
1399 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 728475"];
1400 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 728476"];
1401 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 728477"];
1402 [label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 728478"];
1403 [label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 728479"];
1404 [label="param WithClassTypeParametersBinder(Binder next) 728480"];
1405 [label="param WithClassTypeParametersBinder(this) 728481"];
1406 [label="next 728482"];
1407 [label="param WithClassTypeParametersBinder(this) 728483"];
1408 [label="param WithTypeParametersBinder(Binder next) 728484"];
1409 [label="param WithTypeParametersBinder(this) 728485"];
1410 [label="next 728486"];
1411 [label="param WithTypeParametersBinder(this) 728487"];
1412 [label="param Binder(Binder next) 728488"];
1413 [label="param Binder(this) 728489"];
1414 [label="param Binder(Conversions? conversions = null) 728490"];
1415 [label="RoslynDebug.Assert(next != null); 728491"];
1416 [label="RoslynDebug.Assert(next != null); 728492"];
1417 [label="this.Flags 728493"];
1418 [label="this.Compilation 728494"];
1419 [label="_lazyConversions 728495"];
1420 [label="_namedType 728496"];
1421 [label="_lazyTypeParameterMap 728497"];
1422 [label="Debug.Assert((object)container != null); 728498"];
1423 [label="Debug.Assert((object)container != null); 728499"];
1424 [label="_namedType 728500"];
1425 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 728501"];
1426 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 728502"];
1427 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 728503"];
1428 [label="param WithUnsafeRegionIfNecessary(this) 728504"];
1429 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728505"];
1430 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728506"];
1431 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 728507"];
1432 [label="param Includes(this BinderFlags self) 728508"];
1433 [label="param Includes(BinderFlags other) 728509"];
1434 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728510"];
1435 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728511"];
1436 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 728512"];
1437 [label="binderCache 728513"];
1438 [label="return _factory._binderCache; 728514"];
1439 [label="binderCache.TryAdd(key, resultBinder); 728515"];
1440 [label="binderCache.TryAdd(key, resultBinder); 728516"];
1441 [label="binderCache.TryAdd(key, resultBinder); 728517"];
1442 [label="binderCache.TryAdd(key, resultBinder); 728518"];
1443 [label="binderCache.TryAdd(key, resultBinder); 728519"];
1444 [label="return resultBinder; 728520"];
1445 [label="return ((CSharpSyntaxNode)node).Accept(this); 728521"];
1446 [label="_binderFactoryVisitorPool.Free(visitor); 728522"];
1447 [label="_binderFactoryVisitorPool.Free(visitor); 728523"];
1448 [label="return result; 728524"];
1449 [label="var diagnostics = c.GetDiagnostics(); 728525"];
1450 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 728526"];
1451 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 728527"];
1452 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 728528"];
1453 [label="Debug.Assert((object)containing != null); 728529"];
1454 [label="Debug.Assert((object)containing != null); 728530"];
1455 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728531"];
1456 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728532"];
1457 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728533"];
1458 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728534"];
1459 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 728535"];
1460 [label="param BinderWithContainingMemberOrLambda(Binder next) 728536"];
1461 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 728537"];
1462 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 728538"];
1463 [label="param BinderWithContainingMemberOrLambda(this) 728539"];
1464 [label="next 728540"];
1465 [label="flags 728541"];
1466 [label="param BinderWithContainingMemberOrLambda(this) 728542"];
1467 [label="param Binder(Binder next) 728543"];
1468 [label="param Binder(BinderFlags flags) 728544"];
1469 [label="param Binder(this) 728545"];
1470 [label="internal CSharpCompilation Compilation { get; } 728546"];
1471 [label="Flags 728547"];
1472 [label="protected internal Binder? Next { get; } 728548"];
1473 [label="_lazyConversions 728549"];
1474 [label="_lazyOverloadResolution 728550"];
1475 [label="RoslynDebug.Assert(next != null); 728551"];
1476 [label="RoslynDebug.Assert(next != null); 728552"];
1477 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 728553"];
1478 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 728554"];
1479 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 728555"];
1480 [label="param Includes(this BinderFlags self) 728556"];
1481 [label="param Includes(BinderFlags other) 728557"];
1482 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 728558"];
1483 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 728559"];
1484 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 728560"];
1485 [label="param Includes(this BinderFlags self) 728561"];
1486 [label="param Includes(BinderFlags other) 728562"];
1487 [label="Next 728563"];
1488 [label="this.Flags 728564"];
1489 [label="this.Compilation 728565"];
1490 [label="_containingMemberOrLambda 728566"];
1491 [label="Debug.Assert(containingMemberOrLambda != null); 728567"];
1492 [label="Debug.Assert(containingMemberOrLambda != null); 728568"];
1493 [label="_containingMemberOrLambda 728569"];
1494 [label="var diagnostics = c.GetDiagnostics(); 728570"];
1495 [label="param BindType(ExpressionSyntax syntax) 728571"];
1496 [label="param BindType(DiagnosticBag diagnostics) 728572"];
1497 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 728573"];
1498 [label="param BindType(bool suppressUseSiteDiagnostics = false) 728574"];
1499 [label="param BindType(this) 728575"];
1500 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728576"];
1501 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728577"];
1502 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728578"];
1503 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728579"];
1504 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 728580"];
1505 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 728581"];
1506 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 728582"];
1507 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 728583"];
1508 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 728584"];
1509 [label="param BindTypeOrAlias(this) 728585"];
1510 [label="Debug.Assert(diagnostics != null); 728586"];
1511 [label="Debug.Assert(diagnostics != null); 728587"];
1512 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728588"];
1513 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728589"];
1514 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728590"];
1515 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728591"];
1516 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728592"];
1517 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 728593"];
1518 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 728594"];
1519 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 728595"];
1520 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 728596"];
1521 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 728597"];
1522 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 728598"];
1523 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 728599"];
1524 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728600"];
1525 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728601"];
1526 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728602"];
1527 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728603"];
1528 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728604"];
1529 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 728605"];
1530 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 728606"];
1531 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 728607"];
1532 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 728608"];
1533 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 728609"];
1534 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 728610"];
1535 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 728611"];
1536 [label="var identifierValueText = node.Identifier.ValueText; 728612"];
1537 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 728613"];
1538 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728614"];
1539 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728615"];
1540 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728616"];
1541 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728617"];
1542 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728618"];
1543 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 728619"];
1544 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 728620"];
1545 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 728621"];
1546 [label="param CreateErrorIfLookupOnTypeParameter(string name) 728622"];
1547 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 728623"];
1548 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 728624"];
1549 [label="param CreateErrorIfLookupOnTypeParameter(this) 728625"];
1550 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 728626"];
1551 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 728627"];
1552 [label="return null; 728628"];
1553 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728629"];
1554 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 728630"];
1555 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 728631"];
1556 [label="CreatePool() 728632"];
1557 [label="ObjectPool<LookupResult> pool = null; 728633"];
1558 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 728634"];
1559 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 728635"];
1560 [label="return pool; 728636"];
1561 [label="s_poolInstance = CreatePool() 728637"];
1562 [label="LookupResult.GetInstance() 728638"];
1563 [label="var instance = s_poolInstance.Allocate(); 728639"];
1564 [label="var instance = s_poolInstance.Allocate(); 728640"];
1565 [label="var instance = s_poolInstance.Allocate(); 728641"];
1566 [label="param LookupResult(ObjectPool<LookupResult> pool) 728642"];
1567 [label="param LookupResult(this) 728643"];
1568 [label="_kind 728644"];
1569 [label="_symbolList 728645"];
1570 [label="_error 728646"];
1571 [label="_pool 728647"];
1572 [label="_pool 728648"];
1573 [label="_kind 728649"];
1574 [label="_symbolList = new ArrayBuilder<Symbol>(); 728650"];
1575 [label="_symbolList 728651"];
1576 [label="_error = null; 728652"];
1577 [label="_error 728653"];
1578 [label="var instance = s_poolInstance.Allocate(); 728654"];
1579 [label="instance.IsClear 728655"];
1580 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 728656"];
1581 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728657"];
1582 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728658"];
1583 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728659"];
1584 [label="Debug.Assert(instance.IsClear); 728660"];
1585 [label="return instance; 728661"];
1586 [label="var result = LookupResult.GetInstance(); 728662"];
1587 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 728663"];
1588 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 728664"];
1589 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 728665"];
1590 [label="param GetSimpleNameLookupOptions(NameSyntax node) 728666"];
1591 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 728667"];
1592 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 728668"];
1593 [label="return LookupOptions.NamespacesOrTypesOnly; 728669"];
1594 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 728670"];
1595 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728671"];
1596 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728672"];
1597 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728673"];
1598 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728674"];
1599 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728675"];
1600 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728676"];
1601 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728677"];
1602 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 728678"];
1603 [label="param LookupSymbolsSimpleName(LookupResult result) 728679"];
1604 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 728680"];
1605 [label="param LookupSymbolsSimpleName(string plainName) 728681"];
1606 [label="param LookupSymbolsSimpleName(int arity) 728682"];
1607 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 728683"];
1608 [label="param LookupSymbolsSimpleName(LookupOptions options) 728684"];
1609 [label="param LookupSymbolsSimpleName(bool diagnose) 728685"];
1610 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728686"];
1611 [label="param LookupSymbolsSimpleName(this) 728687"];
1612 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 728688"];
1613 [label="options.IsAttributeTypeLookup() 728689"];
1614 [label="param IsAttributeTypeLookup(this LookupOptions options) 728690"];
1615 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 728691"];
1616 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728692"];
1617 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728693"];
1618 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728694"];
1619 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728695"];
1620 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728696"];
1621 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728697"];
1622 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728698"];
1623 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728699"];
1624 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 728700"];
1625 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 728701"];
1626 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 728702"];
1627 [label="param LookupSymbolsOrMembersInternal(string name) 728703"];
1628 [label="param LookupSymbolsOrMembersInternal(int arity) 728704"];
1629 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 728705"];
1630 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 728706"];
1631 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 728707"];
1632 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728708"];
1633 [label="param LookupSymbolsOrMembersInternal(this) 728709"];
1634 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 728710"];
1635 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 728711"];
1636 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728712"];
1637 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728713"];
1638 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728714"];
1639 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728715"];
1640 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728716"];
1641 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728717"];
1642 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728718"];
1643 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 728719"];
1644 [label="param LookupSymbolsInternal(LookupResult result) 728720"];
1645 [label="param LookupSymbolsInternal(string name) 728721"];
1646 [label="param LookupSymbolsInternal(int arity) 728722"];
1647 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 728723"];
1648 [label="param LookupSymbolsInternal(LookupOptions options) 728724"];
1649 [label="param LookupSymbolsInternal(bool diagnose) 728725"];
1650 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728726"];
1651 [label="param LookupSymbolsInternal(this) 728727"];
1652 [label="result.IsClear 728728"];
1653 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 728729"];
1654 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728730"];
1655 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728731"];
1656 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728732"];
1657 [label="Debug.Assert(result.IsClear); 728733"];
1658 [label="Debug.Assert(options.AreValid()); 728734"];
1659 [label="options.AreValid() 728735"];
1660 [label="param AreValid(this LookupOptions options) 728736"];
1661 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 728737"];
1662 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 728738"];
1663 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 728739"];
1664 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 728740"];
1665 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 728741"];
1666 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 728742"];
1667 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 728743"];
1668 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 728744"];
1669 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 728745"];
1670 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 728746"];
1671 [label="return OnlyOneBitSet(onlyOptions); 728747"];
1672 [label="OnlyOneBitSet(onlyOptions) 728748"];
1673 [label="param OnlyOneBitSet(LookupOptions o) 728749"];
1674 [label="return (o & (o - 1)) == 0; 728750"];
1675 [label="return (o & (o - 1)) == 0; 728751"];
1676 [label="Binder binder = null; 728752"];
1677 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 728753"];
1678 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 728754"];
1679 [label="result.IsMultiViable 728755"];
1680 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 728756"];
1681 [label="Kind 728757"];
1682 [label="get\n            {\n                return _kind;\n            } 728758"];
1683 [label="return _kind; 728759"];
1684 [label="return Kind == LookupResultKind.Viable; 728760"];
1685 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 728761"];
1686 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 728762"];
1687 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 728763"];
1688 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 728764"];
1689 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728765"];
1690 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728766"];
1691 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728767"];
1692 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728768"];
1693 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728769"];
1694 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728770"];
1695 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728771"];
1696 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728772"];
1697 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 728773"];
1698 [label="param LookupSymbolsInSingleBinder(LookupResult result) 728774"];
1699 [label="param LookupSymbolsInSingleBinder(string name) 728775"];
1700 [label="param LookupSymbolsInSingleBinder(int arity) 728776"];
1701 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 728777"];
1702 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 728778"];
1703 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 728779"];
1704 [label="param LookupSymbolsInSingleBinder(bool diagnose) 728780"];
1705 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728781"];
1706 [label="param LookupSymbolsInSingleBinder(this) 728782"];
1707 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728783"];
1708 [label="result.IsClear 728784"];
1709 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 728785"];
1710 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728786"];
1711 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728787"];
1712 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728788"];
1713 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 728789"];
1714 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 728790"];
1715 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 728791"];
1716 [label="param LookupSymbolsInSingleBinder(LookupResult result) 728792"];
1717 [label="param LookupSymbolsInSingleBinder(string name) 728793"];
1718 [label="param LookupSymbolsInSingleBinder(int arity) 728794"];
1719 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 728795"];
1720 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 728796"];
1721 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 728797"];
1722 [label="param LookupSymbolsInSingleBinder(bool diagnose) 728798"];
1723 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728799"];
1724 [label="param LookupSymbolsInSingleBinder(this) 728800"];
1725 [label="result.IsClear 728801"];
1726 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 728802"];
1727 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728803"];
1728 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728804"];
1729 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728805"];
1730 [label="Debug.Assert(result.IsClear); 728806"];
1731 [label="LookupMask 728807"];
1732 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 728808"];
1733 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 728809"];
1734 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 728810"];
1735 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 728811"];
1736 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 728812"];
1737 [label="TypeParameterMap 728813"];
1738 [label="get\n            {\n                if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                }\n                return _lazyTypeParameterMap;\n            } 728814"];
1739 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 728815"];
1740 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 728816"];
1741 [label="var result = new MultiDictionary<string, TypeParameterSymbol>(); 728817"];
1742 [label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    } 728818"];
1743 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 728819"];
1744 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 728820"];
1745 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 728821"];
1746 [label="return _lazyTypeParameterMap; 728822"];
1747 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 728823"];
1748 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 728824"];
1749 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728825"];
1750 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728826"];
1751 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728827"];
1752 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728828"];
1753 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728829"];
1754 [label="param LookupSymbolsInSingleBinder(LookupResult result) 728830"];
1755 [label="param LookupSymbolsInSingleBinder(string name) 728831"];
1756 [label="param LookupSymbolsInSingleBinder(int arity) 728832"];
1757 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 728833"];
1758 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 728834"];
1759 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 728835"];
1760 [label="param LookupSymbolsInSingleBinder(bool diagnose) 728836"];
1761 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728837"];
1762 [label="param LookupSymbolsInSingleBinder(this) 728838"];
1763 [label="result.IsClear 728839"];
1764 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 728840"];
1765 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728841"];
1766 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728842"];
1767 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728843"];
1768 [label="Debug.Assert(result.IsClear); 728844"];
1769 [label="IsSubmissionClass 728845"];
1770 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 728846"];
1771 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 728847"];
1772 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 728848"];
1773 [label="var imports = GetImports(basesBeingResolved); 728849"];
1774 [label="GetImports(basesBeingResolved) 728850"];
1775 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 728851"];
1776 [label="param GetImports(this) 728852"];
1777 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 728853"];
1778 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 728854"];
1779 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 728855"];
1780 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 728856"];
1781 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 728857"];
1782 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 728858"];
1783 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 728859"];
1784 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 728860"];
1785 [label="param FromSyntax(InContainerBinder binder) 728861"];
1786 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 728862"];
1787 [label="param FromSyntax(bool inUsing) 728863"];
1788 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 728864"];
1789 [label="usingDirectives 728865"];
1790 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 728866"];
1791 [label="externAliasDirectives 728867"];
1792 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 728868"];
1793 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 728869"];
1794 [label="inUsing 728870"];
1795 [label="compilationUnit.Usings 728871"];
1796 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 728872"];
1797 [label="externAliasDirectives = compilationUnit.Externs; 728873"];
1798 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 728874"];
1799 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 728875"];
1800 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 728876"];
1801 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 728877"];
1802 [label="return Empty; 728878"];
1803 [label="return _lazyImports; 728879"];
1804 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 728880"];
1805 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 728881"];
1806 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 728882"];
1807 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 728883"];
1808 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728884"];
1809 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728885"];
1810 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728886"];
1811 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728887"];
1812 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728888"];
1813 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728889"];
1814 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728890"];
1815 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728891"];
1816 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728892"];
1817 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 728893"];
1818 [label="param LookupMembersInternal(LookupResult result) 728894"];
1819 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 728895"];
1820 [label="param LookupMembersInternal(string name) 728896"];
1821 [label="param LookupMembersInternal(int arity) 728897"];
1822 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 728898"];
1823 [label="param LookupMembersInternal(LookupOptions options) 728899"];
1824 [label="param LookupMembersInternal(Binder originalBinder) 728900"];
1825 [label="param LookupMembersInternal(bool diagnose) 728901"];
1826 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728902"];
1827 [label="param LookupMembersInternal(this) 728903"];
1828 [label="Debug.Assert(options.AreValid()); 728904"];
1829 [label="options.AreValid() 728905"];
1830 [label="param AreValid(this LookupOptions options) 728906"];
1831 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 728907"];
1832 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 728908"];
1833 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 728909"];
1834 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 728910"];
1835 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 728911"];
1836 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 728912"];
1837 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 728913"];
1838 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 728914"];
1839 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 728915"];
1840 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 728916"];
1841 [label="return OnlyOneBitSet(onlyOptions); 728917"];
1842 [label="OnlyOneBitSet(onlyOptions) 728918"];
1843 [label="param OnlyOneBitSet(LookupOptions o) 728919"];
1844 [label="return (o & (o - 1)) == 0; 728920"];
1845 [label="return (o & (o - 1)) == 0; 728921"];
1846 [label="Debug.Assert(arity >= 0); 728922"];
1847 [label="Debug.Assert(arity >= 0); 728923"];
1848 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 728924"];
1849 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728925"];
1850 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728926"];
1851 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728927"];
1852 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728928"];
1853 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728929"];
1854 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728930"];
1855 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728931"];
1856 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728932"];
1857 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 728933"];
1858 [label="param LookupMembersInNamespace(LookupResult result) 728934"];
1859 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 728935"];
1860 [label="param LookupMembersInNamespace(string name) 728936"];
1861 [label="param LookupMembersInNamespace(int arity) 728937"];
1862 [label="param LookupMembersInNamespace(LookupOptions options) 728938"];
1863 [label="param LookupMembersInNamespace(Binder originalBinder) 728939"];
1864 [label="param LookupMembersInNamespace(bool diagnose) 728940"];
1865 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728941"];
1866 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728942"];
1867 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728943"];
1868 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728944"];
1869 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728945"];
1870 [label="GetCandidateMembers(ns, name, options, originalBinder) 728946"];
1871 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 728947"];
1872 [label="param GetCandidateMembers(string name) 728948"];
1873 [label="param GetCandidateMembers(LookupOptions options) 728949"];
1874 [label="param GetCandidateMembers(Binder originalBinder) 728950"];
1875 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 728951"];
1876 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 728952"];
1877 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 728953"];
1878 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 728954"];
1879 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 728955"];
1880 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 728956"];
1881 [label="return nsOrType.GetMembers(name); 728957"];
1882 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 728958"];
1883 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728959"];
1884 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728960"];
1885 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728961"];
1886 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728962"];
1887 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728963"];
1888 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 728964"];
1889 [label="param CheckViability(Symbol symbol) 728965"];
1890 [label="param CheckViability(int arity) 728966"];
1891 [label="param CheckViability(LookupOptions options) 728967"];
1892 [label="param CheckViability(TypeSymbol accessThroughType) 728968"];
1893 [label="param CheckViability(bool diagnose) 728969"];
1894 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 728970"];
1895 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 728971"];
1896 [label="param CheckViability(this) 728972"];
1897 [label="bool inaccessibleViaQualifier; 728973"];
1898 [label="DiagnosticInfo diagInfo; 728974"];
1899 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 728975"];
1900 [label="symbol.Kind == SymbolKind.Alias 728976"];
1901 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728977"];
1902 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728978"];
1903 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728979"];
1904 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728980"];
1905 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728981"];
1906 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728982"];
1907 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 728983"];
1908 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 728984"];
1909 [label="param WrongArity(Symbol symbol) 728985"];
1910 [label="param WrongArity(int arity) 728986"];
1911 [label="param WrongArity(bool diagnose) 728987"];
1912 [label="param WrongArity(LookupOptions options) 728988"];
1913 [label="param WrongArity(out DiagnosticInfo diagInfo) 728989"];
1914 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 728990"];
1915 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 728991"];
1916 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 728992"];
1917 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 728993"];
1918 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 728994"];
1919 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 728995"];
1920 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 728996"];
1921 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 728997"];
1922 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 728998"];
1923 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 728999"];
1924 [label="options.IsAttributeTypeLookup() 729000"];
1925 [label="param IsAttributeTypeLookup(this LookupOptions options) 729001"];
1926 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 729002"];
1927 [label="diagInfo = null; 729003"];
1928 [label="return false; 729004"];
1929 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729005"];
1930 [label="InCref 729006"];
1931 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 729007"];
1932 [label="return this.Flags.Includes(BinderFlags.Cref); 729008"];
1933 [label="return this.Flags.Includes(BinderFlags.Cref); 729009"];
1934 [label="this.Flags.Includes(BinderFlags.Cref) 729010"];
1935 [label="param Includes(this BinderFlags self) 729011"];
1936 [label="param Includes(BinderFlags other) 729012"];
1937 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729013"];
1938 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729014"];
1939 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729015"];
1940 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729016"];
1941 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729017"];
1942 [label="InCref 729018"];
1943 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729019"];
1944 [label="InCref 729020"];
1945 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729021"];
1946 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729022"];
1947 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729023"];
1948 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729024"];
1949 [label="RefineAccessThroughType(options, accessThroughType) 729025"];
1950 [label="param RefineAccessThroughType(LookupOptions options) 729026"];
1951 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 729027"];
1952 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 729028"];
1953 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 729029"];
1954 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 729030"];
1955 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 729031"];
1956 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729032"];
1957 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729033"];
1958 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729034"];
1959 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 729035"];
1960 [label="param IsAccessible(Symbol symbol) 729036"];
1961 [label="param IsAccessible(TypeSymbol accessThroughType) 729037"];
1962 [label="param IsAccessible(out bool failedThroughTypeCheck) 729038"];
1963 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 729039"];
1964 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 729040"];
1965 [label="param IsAccessible(this) 729041"];
1966 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729042"];
1967 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729043"];
1968 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729044"];
1969 [label="param Includes(this BinderFlags self) 729045"];
1970 [label="param Includes(BinderFlags other) 729046"];
1971 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729047"];
1972 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729048"];
1973 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729049"];
1974 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729050"];
1975 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729051"];
1976 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729052"];
1977 [label="param IsAccessibleHelper(Symbol symbol) 729053"];
1978 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729054"];
1979 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729055"];
1980 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 729056"];
1981 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 729057"];
1982 [label="param IsAccessibleHelper(this) 729058"];
1983 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729059"];
1984 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729060"];
1985 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729061"];
1986 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729062"];
1987 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729063"];
1988 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729064"];
1989 [label="param IsAccessibleHelper(Symbol symbol) 729065"];
1990 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729066"];
1991 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729067"];
1992 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 729068"];
1993 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 729069"];
1994 [label="param IsAccessibleHelper(this) 729070"];
1995 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729071"];
1996 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729072"];
1997 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729073"];
1998 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729074"];
1999 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729075"];
2000 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729076"];
2001 [label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729077"];
2002 [label="param IsSymbolAccessibleConditional(Symbol symbol) 729078"];
2003 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 729079"];
2004 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 729080"];
2005 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 729081"];
2006 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 729082"];
2007 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 729083"];
2008 [label="param IsSymbolAccessibleConditional(this) 729084"];
2009 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729085"];
2010 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729086"];
2011 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729087"];
2012 [label="param Includes(this BinderFlags self) 729088"];
2013 [label="param Includes(BinderFlags other) 729089"];
2014 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729090"];
2015 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729091"];
2016 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729092"];
2017 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729093"];
2018 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729094"];
2019 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729095"];
2020 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729096"];
2021 [label="param IsSymbolAccessible(Symbol symbol) 729097"];
2022 [label="param IsSymbolAccessible(NamedTypeSymbol within) 729098"];
2023 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 729099"];
2024 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 729100"];
2025 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 729101"];
2026 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 729102"];
2027 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729103"];
2028 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729104"];
2029 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729105"];
2030 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729106"];
2031 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729107"];
2032 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729108"];
2033 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729109"];
2034 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 729110"];
2035 [label="param IsSymbolAccessibleCore(Symbol symbol) 729111"];
2036 [label="param IsSymbolAccessibleCore(Symbol within) 729112"];
2037 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 729113"];
2038 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 729114"];
2039 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 729115"];
2040 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 729116"];
2041 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 729117"];
2042 [label="Debug.Assert((object)symbol != null); 729118"];
2043 [label="Debug.Assert((object)symbol != null); 729119"];
2044 [label="Debug.Assert((object)within != null); 729120"];
2045 [label="Debug.Assert((object)within != null); 729121"];
2046 [label="Debug.Assert(within.IsDefinition); 729122"];
2047 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729123"];
2048 [label="failedThroughTypeCheck = false; 729124"];
2049 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 729125"];
2050 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729126"];
2051 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729127"];
2052 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729128"];
2053 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729129"];
2054 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 729130"];
2055 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 729131"];
2056 [label="param IsNamedTypeAccessible(Symbol within) 729132"];
2057 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 729133"];
2058 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 729134"];
2059 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729135"];
2060 [label="Debug.Assert((object)type != null); 729136"];
2061 [label="Debug.Assert((object)type != null); 729137"];
2062 [label="var compilation = within.DeclaringCompilation; 729138"];
2063 [label="bool unused; 729139"];
2064 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 729140"];
2065 [label="var containingType = type.ContainingType; 729141"];
2066 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 729142"];
2067 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 729143"];
2068 [label="(object)containingType == null 729144"];
2069 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 729145"];
2070 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 729146"];
2071 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 729147"];
2072 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 729148"];
2073 [label="param IsNonNestedTypeAccessible(Symbol within) 729149"];
2074 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729150"];
2075 [label="Debug.Assert((object)assembly != null); 729151"];
2076 [label="Debug.Assert((object)assembly != null); 729152"];
2077 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 729153"];
2078 [label="return true; 729154"];
2079 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729155"];
2080 [label="InCref 729156"];
2081 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729157"];
2082 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729158"];
2083 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729159"];
2084 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729160"];
2085 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729161"];
2086 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729162"];
2087 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729163"];
2088 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729164"];
2089 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729165"];
2090 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729166"];
2091 [label="return LookupResult.Good(symbol); 729167"];
2092 [label="LookupResult.Good(symbol) 729168"];
2093 [label="param Good(Symbol symbol) 729169"];
2094 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 729170"];
2095 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 729171"];
2096 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 729172"];
2097 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 729173"];
2098 [label="param SingleLookupResult(LookupResultKind kind) 729174"];
2099 [label="param SingleLookupResult(Symbol symbol) 729175"];
2100 [label="param SingleLookupResult(DiagnosticInfo error) 729176"];
2101 [label="param SingleLookupResult(this) 729177"];
2102 [label="this.Kind 729178"];
2103 [label="this.Symbol 729179"];
2104 [label="this.Error 729180"];
2105 [label="return LookupResult.Good(symbol); 729181"];
2106 [label="result.MergeEqual(resultOfThisMember); 729182"];
2107 [label="result.MergeEqual(resultOfThisMember) 729183"];
2108 [label="param MergeEqual(SingleLookupResult result) 729184"];
2109 [label="param MergeEqual(this) 729185"];
2110 [label="Kind 729186"];
2111 [label="get\n            {\n                return _kind;\n            } 729187"];
2112 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 729188"];
2113 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 729189"];
2114 [label="Kind 729190"];
2115 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 729191"];
2116 [label="this.SetFrom(result); 729192"];
2117 [label="this.SetFrom(result) 729193"];
2118 [label="param SetFrom(SingleLookupResult other) 729194"];
2119 [label="param SetFrom(this) 729195"];
2120 [label="_kind 729196"];
2121 [label="_symbolList.Clear(); 729197"];
2122 [label="_symbolList.Add(other.Symbol); 729198"];
2123 [label="_symbolList.Add(other.Symbol); 729199"];
2124 [label="_error 729200"];
2125 [label="this.SetFrom(result); 729201"];
2126 [label="result.MergeEqual(resultOfThisMember); 729202"];
2127 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 729203"];
2128 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 729204"];
2129 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 729205"];
2130 [label="result.IsMultiViable 729206"];
2131 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 729207"];
2132 [label="return _kind; 729208"];
2133 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 729209"];
2134 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 729210"];
2135 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 729211"];
2136 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 729212"];
2137 [label="originalBinder.IsSemanticModelBinder 729213"];
2138 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 729214"];
2139 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 729215"];
2140 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 729216"];
2141 [label="this.Flags.Includes(BinderFlags.SemanticModel) 729217"];
2142 [label="param Includes(this BinderFlags self) 729218"];
2143 [label="param Includes(BinderFlags other) 729219"];
2144 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 729220"];
2145 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 729221"];
2146 [label="param IsUsingAlias(string name) 729222"];
2147 [label="param IsUsingAlias(bool callerIsSemanticModel) 729223"];
2148 [label="param IsUsingAlias(this) 729224"];
2149 [label="AliasAndUsingDirective node; 729225"];
2150 [label="node 729226"];
2151 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 729227"];
2152 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 729228"];
2153 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 729229"];
2154 [label="return false; 729230"];
2155 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 729231"];
2156 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 729232"];
2157 [label="return; 729233"];
2158 [label="result.IsClear 729234"];
2159 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729235"];
2160 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729236"];
2161 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 729237"];
2162 [label="binder = scope; 729238"];
2163 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 729239"];
2164 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 729240"];
2165 [label="return binder; 729241"];
2166 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 729242"];
2167 [label="diagnostics.Add(node, useSiteDiagnostics); 729243"];
2168 [label="diagnostics.Add(node, useSiteDiagnostics); 729244"];
2169 [label="diagnostics.Add(node, useSiteDiagnostics); 729245"];
2170 [label="diagnostics.Add(node, useSiteDiagnostics); 729246"];
2171 [label="Symbol bindingResult = null; 729247"];
2172 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 729248"];
2173 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 729249"];
2174 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 729250"];
2175 [label="IsViableType(result) 729251"];
2176 [label="param IsViableType(LookupResult result) 729252"];
2177 [label="result.IsMultiViable 729253"];
2178 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 729254"];
2179 [label="Kind 729255"];
2180 [label="get\n            {\n                return _kind;\n            } 729256"];
2181 [label="return _kind; 729257"];
2182 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 729258"];
2183 [label="result.Symbols 729259"];
2184 [label="get\n            {\n                return _symbolList;\n            } 729260"];
2185 [label="return _symbolList; 729261"];
2186 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 729262"];
2187 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 729263"];
2188 [label="return true; 729264"];
2189 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 729265"];
2190 [label="bool wasError; 729266"];
2191 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729267"];
2192 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729268"];
2193 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729269"];
2194 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729270"];
2195 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729271"];
2196 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729272"];
2197 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729273"];
2198 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729274"];
2199 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729275"];
2200 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 729276"];
2201 [label="param ResultSymbol(LookupResult result) 729277"];
2202 [label="param ResultSymbol(string simpleName) 729278"];
2203 [label="param ResultSymbol(int arity) 729279"];
2204 [label="param ResultSymbol(SyntaxNode where) 729280"];
2205 [label="param ResultSymbol(DiagnosticBag diagnostics) 729281"];
2206 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 729282"];
2207 [label="param ResultSymbol(out bool wasError) 729283"];
2208 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 729284"];
2209 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 729285"];
2210 [label="param ResultSymbol(this) 729286"];
2211 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729287"];
2212 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729288"];
2213 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729289"];
2214 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729290"];
2215 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729291"];
2216 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729292"];
2217 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729293"];
2218 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729294"];
2219 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729295"];
2220 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 729296"];
2221 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729297"];
2222 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729298"];
2223 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729299"];
2224 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729300"];
2225 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729301"];
2226 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729302"];
2227 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729303"];
2228 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729304"];
2229 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729305"];
2230 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 729306"];
2231 [label="Debug.Assert(where != null); 729307"];
2232 [label="Debug.Assert(where != null); 729308"];
2233 [label="Debug.Assert(diagnostics != null); 729309"];
2234 [label="Debug.Assert(diagnostics != null); 729310"];
2235 [label="result.Symbols 729311"];
2236 [label="get\n            {\n                return _symbolList;\n            } 729312"];
2237 [label="return _symbolList; 729313"];
2238 [label="var symbols = result.Symbols; 729314"];
2239 [label="wasError = false; 729315"];
2240 [label="result.IsMultiViable 729316"];
2241 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 729317"];
2242 [label="Kind 729318"];
2243 [label="get\n            {\n                return _kind;\n            } 729319"];
2244 [label="return _kind; 729320"];
2245 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 729321"];
2246 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 729322"];
2247 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 729323"];
2248 [label="var singleResult = symbols[0]; 729324"];
2249 [label="var singleType = singleResult as TypeSymbol; 729325"];
2250 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 729326"];
2251 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 729327"];
2252 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 729328"];
2253 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 729329"];
2254 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 729330"];
2255 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 729331"];
2256 [label="if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 729332"];
2257 [label="return singleResult; 729333"];
2258 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 729334"];
2259 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729335"];
2260 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729336"];
2261 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729337"];
2262 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729338"];
2263 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 729339"];
2264 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 729340"];
2265 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 729341"];
2266 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 729342"];
2267 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 729343"];
2268 [label="param CheckRuntimeSupportForSymbolAccess(this) 729344"];
2269 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 729345"];
2270 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 729346"];
2271 [label="return symbol; 729347"];
2272 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 729348"];
2273 [label="result.Free() 729349"];
2274 [label="param Free(this) 729350"];
2275 [label="this.Clear() 729351"];
2276 [label="param Clear(this) 729352"];
2277 [label="_kind 729353"];
2278 [label="_symbolList.Clear(); 729354"];
2279 [label="_error = null; 729355"];
2280 [label="_error 729356"];
2281 [label="this.Clear(); 729357"];
2282 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 729358"];
2283 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 729359"];
2284 [label="_pool.Free(this); 729360"];
2285 [label="_pool.Free(this); 729361"];
2286 [label="result.Free(); 729362"];
2287 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 729363"];
2288 [label="AreNullableAnnotationsEnabled(node.Identifier) 729364"];
2289 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 729365"];
2290 [label="param AreNullableAnnotationsEnabled(this) 729366"];
2291 [label="RoslynDebug.Assert(token.SyntaxTree is object); 729367"];
2292 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 729368"];
2293 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 729369"];
2294 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 729370"];
2295 [label="param AreNullableAnnotationsEnabled(int position) 729371"];
2296 [label="param AreNullableAnnotationsEnabled(this) 729372"];
2297 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 729373"];
2298 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 729374"];
2299 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 729375"];
2300 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 729376"];
2301 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 729377"];
2302 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 729378"];
2303 [label="AreNullableAnnotationsGloballyEnabled() 729379"];
2304 [label="param AreNullableAnnotationsGloballyEnabled(this) 729380"];
2305 [label="RoslynDebug.Assert(Next is object); 729381"];
2306 [label="Next.AreNullableAnnotationsGloballyEnabled() 729382"];
2307 [label="param AreNullableAnnotationsGloballyEnabled(this) 729383"];
2308 [label="param AreNullableAnnotationsGloballyEnabled(this) 729384"];
2309 [label="GetGlobalAnnotationState() 729385"];
2310 [label="param GetGlobalAnnotationState(this) 729386"];
2311 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 729387"];
2312 [label="return false; 729388"];
2313 [label="return GetGlobalAnnotationState(); 729389"];
2314 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 729390"];
2315 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 729391"];
2316 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 729392"];
2317 [label="param CreateUnannotated(bool isNullableEnabled) 729393"];
2318 [label="param CreateUnannotated(Symbol symbol) 729394"];
2319 [label="if (symbol is null)\n                {\n                    return default;\n                } 729395"];
2320 [label="var type = symbol as TypeSymbol; 729396"];
2321 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 729397"];
2322 [label="type is null 729398"];
2323 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 729399"];
2324 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 729400"];
2325 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 729401"];
2326 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 729402"];
2327 [label="Debug.Assert(typeWithAnnotations.HasType); 729403"];
2328 [label="_typeWithAnnotations 729404"];
2329 [label="_symbol = null; 729405"];
2330 [label="_symbol 729406"];
2331 [label="_isNullableEnabled = false; 729407"];
2332 [label="_isNullableEnabled 729408"];
2333 [label="symbol.IsType 729409"];
2334 [label="=> !_typeWithAnnotations.IsDefault 729410"];
2335 [label="!_typeWithAnnotations.IsDefault 729411"];
2336 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 729412"];
2337 [label="symbol.IsType 729413"];
2338 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 729414"];
2339 [label="symbol.TypeWithAnnotations 729415"];
2340 [label="=> _typeWithAnnotations 729416"];
2341 [label="_typeWithAnnotations 729417"];
2342 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729418"];
2343 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729419"];
2344 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729420"];
2345 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729421"];
2346 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729422"];
2347 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729423"];
2348 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 729424"];
2349 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 729425"];
2350 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729426"];
2351 [label="param ReportDiagnosticsIfObsolete(this) 729427"];
2352 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729428"];
2353 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729429"];
2354 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729430"];
2355 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729431"];
2356 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 729432"];
2357 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729433"];
2358 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 729434"];
2359 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729435"];
2360 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729436"];
2361 [label="param ReportDiagnosticsIfObsolete(this) 729437"];
2362 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 729438"];
2363 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729439"];
2364 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729440"];
2365 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729441"];
2366 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729442"];
2367 [label="this.ContainingMemberOrLambda 729443"];
2368 [label="get { return _containingMemberOrLambda; } 729444"];
2369 [label="return _containingMemberOrLambda; 729445"];
2370 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729446"];
2371 [label="this.ContainingType 729447"];
2372 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 729448"];
2373 [label="this.ContainingMemberOrLambda 729449"];
2374 [label="get { return _containingMemberOrLambda; } 729450"];
2375 [label="return _containingMemberOrLambda; 729451"];
2376 [label="var member = this.ContainingMemberOrLambda; 729452"];
2377 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729453"];
2378 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729454"];
2379 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 729455"];
2380 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 729456"];
2381 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729457"];
2382 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729458"];
2383 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 729459"];
2384 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729460"];
2385 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 729461"];
2386 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729462"];
2387 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729463"];
2388 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 729464"];
2389 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 729465"];
2390 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 729466"];
2391 [label="RoslynDebug.Assert(symbol is object); 729467"];
2392 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 729468"];
2393 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 729469"];
2394 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 729470"];
2395 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 729471"];
2396 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 729472"];
2397 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 729473"];
2398 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 729474"];
2399 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729475"];
2400 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729476"];
2401 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729477"];
2402 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729478"];
2403 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729479"];
2404 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 729480"];
2405 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 729481"];
2406 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 729482"];
2407 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 729483"];
2408 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 729484"];
2409 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 729485"];
2410 [label="RoslynDebug.Assert(diagnostics != null); 729486"];
2411 [label="RoslynDebug.Assert(diagnostics != null); 729487"];
2412 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729488"];
2413 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729489"];
2414 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729490"];
2415 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729491"];
2416 [label="DiagnosticInfo? info = null; 729492"];
2417 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 729493"];
2418 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 729494"];
2419 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 729495"];
2420 [label="return kind; 729496"];
2421 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 729497"];
2422 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 729498"];
2423 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729499"];
2424 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729500"];
2425 [label="return symbol; 729501"];
2426 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729502"];
2427 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729503"];
2428 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729504"];
2429 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729505"];
2430 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 729506"];
2431 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 729507"];
2432 [label="param UnwrapAlias(DiagnosticBag diagnostics) 729508"];
2433 [label="param UnwrapAlias(SyntaxNode syntax) 729509"];
2434 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 729510"];
2435 [label="param UnwrapAlias(this) 729511"];
2436 [label="symbol.IsAlias 729512"];
2437 [label="=> _symbol?.Kind == SymbolKind.Alias 729513"];
2438 [label="_symbol 729514"];
2439 [label="_symbol?.Kind == SymbolKind.Alias 729515"];
2440 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 729516"];
2441 [label="return symbol; 729517"];
2442 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 729518"];
2443 [label="=> _typeWithAnnotations 729519"];
2444 [label="_typeWithAnnotations 729520"];
2445 [label="var diagnostics = c.GetDiagnostics(); 729521"];
2446 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 729522"];
2447 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 729523"];
2448 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 729524"];
2449 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729525"];
2450 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 729526"];
2451 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 729527"];
2452 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 729528"];
2453 [label="param CreateErrorIfLookupOnTypeParameter(string name) 729529"];
2454 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 729530"];
2455 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 729531"];
2456 [label="param CreateErrorIfLookupOnTypeParameter(this) 729532"];
2457 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 729533"];
2458 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 729534"];
2459 [label="return null; 729535"];
2460 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729536"];
2461 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 729537"];
2462 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 729538"];
2463 [label="instance.IsClear 729539"];
2464 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729540"];
2465 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729541"];
2466 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729542"];
2467 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729543"];
2468 [label="Debug.Assert(instance.IsClear); 729544"];
2469 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 729545"];
2470 [label="param LookupSymbolsSimpleName(int arity) 729546"];
2471 [label="param LookupSymbolsSimpleName(bool diagnose) 729547"];
2472 [label="param LookupSymbolsOrMembersInternal(int arity) 729548"];
2473 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 729549"];
2474 [label="param LookupSymbolsInternal(int arity) 729550"];
2475 [label="param LookupSymbolsInternal(bool diagnose) 729551"];
2476 [label="result.IsClear 729552"];
2477 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729553"];
2478 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729554"];
2479 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729555"];
2480 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729556"];
2481 [label="Debug.Assert(result.IsClear); 729557"];
2482 [label="Debug.Assert(options.AreValid()); 729558"];
2483 [label="options.AreValid() 729559"];
2484 [label="param AreValid(this LookupOptions options) 729560"];
2485 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 729561"];
2486 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729562"];
2487 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729563"];
2488 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729564"];
2489 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 729565"];
2490 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729566"];
2491 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729567"];
2492 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729568"];
2493 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729569"];
2494 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729570"];
2495 [label="return OnlyOneBitSet(onlyOptions); 729571"];
2496 [label="OnlyOneBitSet(onlyOptions) 729572"];
2497 [label="param OnlyOneBitSet(LookupOptions o) 729573"];
2498 [label="return (o & (o - 1)) == 0; 729574"];
2499 [label="return (o & (o - 1)) == 0; 729575"];
2500 [label="param LookupSymbolsInSingleBinder(LookupResult result) 729576"];
2501 [label="param LookupSymbolsInSingleBinder(string name) 729577"];
2502 [label="param LookupSymbolsInSingleBinder(int arity) 729578"];
2503 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 729579"];
2504 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 729580"];
2505 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729581"];
2506 [label="param LookupSymbolsInSingleBinder(bool diagnose) 729582"];
2507 [label="param LookupSymbolsInSingleBinder(this) 729583"];
2508 [label="result.IsClear 729584"];
2509 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729585"];
2510 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729586"];
2511 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729587"];
2512 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729588"];
2513 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 729589"];
2514 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 729590"];
2515 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 729591"];
2516 [label="param LookupSymbolsInSingleBinder(LookupResult result) 729592"];
2517 [label="param LookupSymbolsInSingleBinder(int arity) 729593"];
2518 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 729594"];
2519 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 729595"];
2520 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729596"];
2521 [label="param LookupSymbolsInSingleBinder(bool diagnose) 729597"];
2522 [label="result.IsClear 729598"];
2523 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729599"];
2524 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729600"];
2525 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729601"];
2526 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729602"];
2527 [label="Debug.Assert(result.IsClear); 729603"];
2528 [label="LookupMask 729604"];
2529 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 729605"];
2530 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 729606"];
2531 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 729607"];
2532 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 729608"];
2533 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 729609"];
2534 [label="param LookupSymbolsInSingleBinder(int arity) 729610"];
2535 [label="param LookupSymbolsInSingleBinder(bool diagnose) 729611"];
2536 [label="result.IsClear 729612"];
2537 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729613"];
2538 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729614"];
2539 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729615"];
2540 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729616"];
2541 [label="Debug.Assert(result.IsClear); 729617"];
2542 [label="IsSubmissionClass 729618"];
2543 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 729619"];
2544 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 729620"];
2545 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 729621"];
2546 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 729622"];
2547 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 729623"];
2548 [label="param LookupMembersInternal(int arity) 729624"];
2549 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 729625"];
2550 [label="param LookupMembersInternal(bool diagnose) 729626"];
2551 [label="param LookupMembersInternal(this) 729627"];
2552 [label="Debug.Assert(options.AreValid()); 729628"];
2553 [label="options.AreValid() 729629"];
2554 [label="param AreValid(this LookupOptions options) 729630"];
2555 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 729631"];
2556 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729632"];
2557 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729633"];
2558 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729634"];
2559 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 729635"];
2560 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729636"];
2561 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729637"];
2562 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729638"];
2563 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729639"];
2564 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729640"];
2565 [label="return OnlyOneBitSet(onlyOptions); 729641"];
2566 [label="OnlyOneBitSet(onlyOptions) 729642"];
2567 [label="param OnlyOneBitSet(LookupOptions o) 729643"];
2568 [label="return (o & (o - 1)) == 0; 729644"];
2569 [label="return (o & (o - 1)) == 0; 729645"];
2570 [label="Debug.Assert(arity >= 0); 729646"];
2571 [label="Debug.Assert(arity >= 0); 729647"];
2572 [label="param LookupMembersInNamespace(int arity) 729648"];
2573 [label="param LookupMembersInNamespace(bool diagnose) 729649"];
2574 [label="param GetCandidateMembers(Binder originalBinder) 729650"];
2575 [label="param CheckViability(int arity) 729651"];
2576 [label="param CheckViability(TypeSymbol accessThroughType) 729652"];
2577 [label="param CheckViability(bool diagnose) 729653"];
2578 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 729654"];
2579 [label="bool inaccessibleViaQualifier; 729655"];
2580 [label="DiagnosticInfo diagInfo; 729656"];
2581 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729657"];
2582 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729658"];
2583 [label="param WrongArity(Symbol symbol) 729659"];
2584 [label="param WrongArity(int arity) 729660"];
2585 [label="param WrongArity(bool diagnose) 729661"];
2586 [label="param WrongArity(LookupOptions options) 729662"];
2587 [label="param WrongArity(out DiagnosticInfo diagInfo) 729663"];
2588 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 729664"];
2589 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729665"];
2590 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729666"];
2591 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729667"];
2592 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729668"];
2593 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 729669"];
2594 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 729670"];
2595 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 729671"];
2596 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 729672"];
2597 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 729673"];
2598 [label="options.IsAttributeTypeLookup() 729674"];
2599 [label="param IsAttributeTypeLookup(this LookupOptions options) 729675"];
2600 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 729676"];
2601 [label="diagInfo = null; 729677"];
2602 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729678"];
2603 [label="RefineAccessThroughType(options, accessThroughType) 729679"];
2604 [label="param RefineAccessThroughType(LookupOptions options) 729680"];
2605 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 729681"];
2606 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 729682"];
2607 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 729683"];
2608 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 729684"];
2609 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 729685"];
2610 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729686"];
2611 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 729687"];
2612 [label="param IsAccessible(TypeSymbol accessThroughType) 729688"];
2613 [label="param IsAccessible(out bool failedThroughTypeCheck) 729689"];
2614 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 729690"];
2615 [label="param IsAccessible(this) 729691"];
2616 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729692"];
2617 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729693"];
2618 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729694"];
2619 [label="param Includes(this BinderFlags self) 729695"];
2620 [label="param Includes(BinderFlags other) 729696"];
2621 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729697"];
2622 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729698"];
2623 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 729699"];
2624 [label="param IsAccessibleHelper(this) 729700"];
2625 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729701"];
2626 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729702"];
2627 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 729703"];
2628 [label="param IsAccessibleHelper(this) 729704"];
2629 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 729705"];
2630 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 729706"];
2631 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 729707"];
2632 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 729708"];
2633 [label="param IsSymbolAccessibleConditional(this) 729709"];
2634 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729710"];
2635 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 729711"];
2636 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729712"];
2637 [label="param Includes(this BinderFlags self) 729713"];
2638 [label="param Includes(BinderFlags other) 729714"];
2639 [label="param IsSymbolAccessible(NamedTypeSymbol within) 729715"];
2640 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 729716"];
2641 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 729717"];
2642 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 729718"];
2643 [label="param IsSymbolAccessibleCore(Symbol within) 729719"];
2644 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 729720"];
2645 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 729721"];
2646 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 729722"];
2647 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 729723"];
2648 [label="Debug.Assert((object)symbol != null); 729724"];
2649 [label="Debug.Assert((object)within != null); 729725"];
2650 [label="Debug.Assert((object)within != null); 729726"];
2651 [label="Debug.Assert(within.IsDefinition); 729727"];
2652 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729728"];
2653 [label="failedThroughTypeCheck = false; 729729"];
2654 [label="param IsNamedTypeAccessible(Symbol within) 729730"];
2655 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 729731"];
2656 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729732"];
2657 [label="Debug.Assert((object)type != null); 729733"];
2658 [label="var compilation = within.DeclaringCompilation; 729734"];
2659 [label="bool unused; 729735"];
2660 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 729736"];
2661 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 729737"];
2662 [label="param IsNonNestedTypeAccessible(Symbol within) 729738"];
2663 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729739"];
2664 [label="Debug.Assert((object)assembly != null); 729740"];
2665 [label="Debug.Assert((object)assembly != null); 729741"];
2666 [label="originalBinder.IsSemanticModelBinder 729742"];
2667 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 729743"];
2668 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 729744"];
2669 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 729745"];
2670 [label="this.Flags.Includes(BinderFlags.SemanticModel) 729746"];
2671 [label="param Includes(this BinderFlags self) 729747"];
2672 [label="param Includes(BinderFlags other) 729748"];
2673 [label="param IsUsingAlias(bool callerIsSemanticModel) 729749"];
2674 [label="return false; 729750"];
2675 [label="return; 729751"];
2676 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729752"];
2677 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 729753"];
2678 [label="binder = scope; 729754"];
2679 [label="return binder; 729755"];
2680 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 729756"];
2681 [label="IsViableType(result) 729757"];
2682 [label="param IsViableType(LookupResult result) 729758"];
2683 [label="result.IsMultiViable 729759"];
2684 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 729760"];
2685 [label="return _kind; 729761"];
2686 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 729762"];
2687 [label="result.Symbols 729763"];
2688 [label="get\n            {\n                return _symbolList;\n            } 729764"];
2689 [label="return _symbolList; 729765"];
2690 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 729766"];
2691 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 729767"];
2692 [label="return true; 729768"];
2693 [label="bool wasError; 729769"];
2694 [label="param ResultSymbol(string simpleName) 729770"];
2695 [label="param ResultSymbol(int arity) 729771"];
2696 [label="param ResultSymbol(SyntaxNode where) 729772"];
2697 [label="param ResultSymbol(DiagnosticBag diagnostics) 729773"];
2698 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 729774"];
2699 [label="param ResultSymbol(out bool wasError) 729775"];
2700 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 729776"];
2701 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 729777"];
2702 [label="param ResultSymbol(this) 729778"];
2703 [label="Debug.Assert(where != null); 729779"];
2704 [label="Debug.Assert(where != null); 729780"];
2705 [label="Debug.Assert(diagnostics != null); 729781"];
2706 [label="Debug.Assert(diagnostics != null); 729782"];
2707 [label="wasError = false; 729783"];
2708 [label="var singleType = singleResult as TypeSymbol; 729784"];
2709 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 729785"];
2710 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 729786"];
2711 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 729787"];
2712 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 729788"];
2713 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 729789"];
2714 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 729790"];
2715 [label="if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 729791"];
2716 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 729792"];
2717 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729793"];
2718 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729794"];
2719 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729795"];
2720 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729796"];
2721 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 729797"];
2722 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 729798"];
2723 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 729799"];
2724 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 729800"];
2725 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 729801"];
2726 [label="param CheckRuntimeSupportForSymbolAccess(this) 729802"];
2727 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 729803"];
2728 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 729804"];
2729 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 729805"];
2730 [label="this.Clear(); 729806"];
2731 [label="result.Free(); 729807"];
2732 [label="if (symbol is null)\n                {\n                    return default;\n                } 729808"];
2733 [label="Debug.Assert(typeWithAnnotations.HasType); 729809"];
2734 [label="_symbol = null; 729810"];
2735 [label="_symbol 729811"];
2736 [label="_isNullableEnabled = false; 729812"];
2737 [label="_isNullableEnabled 729813"];
2738 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729814"];
2739 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 729815"];
2740 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729816"];
2741 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729817"];
2742 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729818"];
2743 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729819"];
2744 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729820"];
2745 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729821"];
2746 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729822"];
2747 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729823"];
2748 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 729824"];
2749 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729825"];
2750 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729826"];
2751 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729827"];
2752 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 729828"];
2753 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 729829"];
2754 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 729830"];
2755 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 729831"];
2756 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 729832"];
2757 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 729833"];
2758 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 729834"];
2759 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 729835"];
2760 [label="RoslynDebug.Assert(diagnostics != null); 729836"];
2761 [label="RoslynDebug.Assert(diagnostics != null); 729837"];
2762 [label="DiagnosticInfo? info = null; 729838"];
2763 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 729839"];
2764 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 729840"];
2765 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 729841"];
2766 [label="return kind; 729842"];
2767 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 729843"];
2768 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 729844"];
2769 [label="=> _symbol?.Kind == SymbolKind.Alias 729845"];
2770 [label="_symbol 729846"];
2771 [label="_symbol?.Kind == SymbolKind.Alias 729847"];
2772 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 729848"];
2773 [label="Debug.Assert(node != null); 729849"];
2774 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 729850"];
2775 [label="NodeUsage extraInfo = NodeUsage.Normal; 729851"];
2776 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 729852"];
2777 [label="param Equals(BinderCacheKey other) 729853"];
2778 [label="param Equals(this) 729854"];
2779 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 729855"];
2780 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 729856"];
2781 [label="param Includes(this BinderFlags self) 729857"];
2782 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 729858"];
2783 [label="param Includes(this BinderFlags self) 729859"];
2784 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 729860"];
2785 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 729861"];
2786 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 729862"];
2787 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 729863"];
2788 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 729864"];
2789 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729865"];
2790 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 729866"];
2791 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 729867"];
2792 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 729868"];
2793 [label="param CreateErrorIfLookupOnTypeParameter(string name) 729869"];
2794 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 729870"];
2795 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 729871"];
2796 [label="param CreateErrorIfLookupOnTypeParameter(this) 729872"];
2797 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 729873"];
2798 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 729874"];
2799 [label="return null; 729875"];
2800 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729876"];
2801 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 729877"];
2802 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 729878"];
2803 [label="instance.IsClear 729879"];
2804 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729880"];
2805 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729881"];
2806 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729882"];
2807 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729883"];
2808 [label="Debug.Assert(instance.IsClear); 729884"];
2809 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 729885"];
2810 [label="param LookupSymbolsSimpleName(bool diagnose) 729886"];
2811 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 729887"];
2812 [label="param LookupSymbolsInternal(bool diagnose) 729888"];
2813 [label="result.IsClear 729889"];
2814 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729890"];
2815 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729891"];
2816 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729892"];
2817 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729893"];
2818 [label="Debug.Assert(result.IsClear); 729894"];
2819 [label="Debug.Assert(options.AreValid()); 729895"];
2820 [label="options.AreValid() 729896"];
2821 [label="param AreValid(this LookupOptions options) 729897"];
2822 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 729898"];
2823 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729899"];
2824 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729900"];
2825 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729901"];
2826 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 729902"];
2827 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729903"];
2828 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729904"];
2829 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729905"];
2830 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729906"];
2831 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729907"];
2832 [label="return OnlyOneBitSet(onlyOptions); 729908"];
2833 [label="OnlyOneBitSet(onlyOptions) 729909"];
2834 [label="param OnlyOneBitSet(LookupOptions o) 729910"];
2835 [label="return (o & (o - 1)) == 0; 729911"];
2836 [label="return (o & (o - 1)) == 0; 729912"];
2837 [label="param LookupSymbolsInSingleBinder(LookupResult result) 729913"];
2838 [label="param LookupSymbolsInSingleBinder(string name) 729914"];
2839 [label="param LookupSymbolsInSingleBinder(int arity) 729915"];
2840 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 729916"];
2841 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 729917"];
2842 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729918"];
2843 [label="param LookupSymbolsInSingleBinder(bool diagnose) 729919"];
2844 [label="param LookupSymbolsInSingleBinder(this) 729920"];
2845 [label="result.IsClear 729921"];
2846 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729922"];
2847 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729923"];
2848 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729924"];
2849 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729925"];
2850 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 729926"];
2851 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 729927"];
2852 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 729928"];
2853 [label="param LookupSymbolsInSingleBinder(LookupResult result) 729929"];
2854 [label="param LookupSymbolsInSingleBinder(int arity) 729930"];
2855 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 729931"];
2856 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 729932"];
2857 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729933"];
2858 [label="param LookupSymbolsInSingleBinder(bool diagnose) 729934"];
2859 [label="result.IsClear 729935"];
2860 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729936"];
2861 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729937"];
2862 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729938"];
2863 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729939"];
2864 [label="Debug.Assert(result.IsClear); 729940"];
2865 [label="LookupMask 729941"];
2866 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 729942"];
2867 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 729943"];
2868 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 729944"];
2869 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 729945"];
2870 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 729946"];
2871 [label="param LookupSymbolsInSingleBinder(bool diagnose) 729947"];
2872 [label="result.IsClear 729948"];
2873 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 729949"];
2874 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729950"];
2875 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729951"];
2876 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729952"];
2877 [label="Debug.Assert(result.IsClear); 729953"];
2878 [label="IsSubmissionClass 729954"];
2879 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 729955"];
2880 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 729956"];
2881 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 729957"];
2882 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 729958"];
2883 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 729959"];
2884 [label="param LookupMembersInternal(bool diagnose) 729960"];
2885 [label="param LookupMembersInternal(this) 729961"];
2886 [label="Debug.Assert(options.AreValid()); 729962"];
2887 [label="options.AreValid() 729963"];
2888 [label="param AreValid(this LookupOptions options) 729964"];
2889 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 729965"];
2890 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729966"];
2891 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 729967"];
2892 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729968"];
2893 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 729969"];
2894 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729970"];
2895 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729971"];
2896 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 729972"];
2897 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729973"];
2898 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 729974"];
2899 [label="return OnlyOneBitSet(onlyOptions); 729975"];
2900 [label="OnlyOneBitSet(onlyOptions) 729976"];
2901 [label="param OnlyOneBitSet(LookupOptions o) 729977"];
2902 [label="return (o & (o - 1)) == 0; 729978"];
2903 [label="return (o & (o - 1)) == 0; 729979"];
2904 [label="Debug.Assert(arity >= 0); 729980"];
2905 [label="param LookupMembersInNamespace(bool diagnose) 729981"];
2906 [label="param GetCandidateMembers(Binder originalBinder) 729982"];
2907 [label="param CheckViability(int arity) 729983"];
2908 [label="param CheckViability(TypeSymbol accessThroughType) 729984"];
2909 [label="param CheckViability(bool diagnose) 729985"];
2910 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 729986"];
2911 [label="bool inaccessibleViaQualifier; 729987"];
2912 [label="DiagnosticInfo diagInfo; 729988"];
2913 [label="param WrongArity(Symbol symbol) 729989"];
2914 [label="param WrongArity(int arity) 729990"];
2915 [label="param WrongArity(bool diagnose) 729991"];
2916 [label="param WrongArity(LookupOptions options) 729992"];
2917 [label="param WrongArity(out DiagnosticInfo diagInfo) 729993"];
2918 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 729994"];
2919 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729995"];
2920 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729996"];
2921 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729997"];
2922 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 729998"];
2923 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 729999"];
2924 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730000"];
2925 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730001"];
2926 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730002"];
2927 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730003"];
2928 [label="options.IsAttributeTypeLookup() 730004"];
2929 [label="param IsAttributeTypeLookup(this LookupOptions options) 730005"];
2930 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730006"];
2931 [label="diagInfo = null; 730007"];
2932 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730008"];
2933 [label="RefineAccessThroughType(options, accessThroughType) 730009"];
2934 [label="param RefineAccessThroughType(LookupOptions options) 730010"];
2935 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 730011"];
2936 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730012"];
2937 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730013"];
2938 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 730014"];
2939 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730015"];
2940 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730016"];
2941 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730017"];
2942 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730018"];
2943 [label="param IsAccessible(TypeSymbol accessThroughType) 730019"];
2944 [label="param IsAccessible(out bool failedThroughTypeCheck) 730020"];
2945 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730021"];
2946 [label="param IsAccessible(this) 730022"];
2947 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730023"];
2948 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730024"];
2949 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730025"];
2950 [label="param Includes(this BinderFlags self) 730026"];
2951 [label="param Includes(BinderFlags other) 730027"];
2952 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730028"];
2953 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730029"];
2954 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 730030"];
2955 [label="param IsAccessibleHelper(this) 730031"];
2956 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730032"];
2957 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730033"];
2958 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 730034"];
2959 [label="param IsAccessibleHelper(this) 730035"];
2960 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 730036"];
2961 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 730037"];
2962 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 730038"];
2963 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 730039"];
2964 [label="param IsSymbolAccessibleConditional(this) 730040"];
2965 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730041"];
2966 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730042"];
2967 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730043"];
2968 [label="param Includes(this BinderFlags self) 730044"];
2969 [label="param Includes(BinderFlags other) 730045"];
2970 [label="param IsSymbolAccessible(NamedTypeSymbol within) 730046"];
2971 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 730047"];
2972 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 730048"];
2973 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730049"];
2974 [label="param IsSymbolAccessibleCore(Symbol within) 730050"];
2975 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 730051"];
2976 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 730052"];
2977 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 730053"];
2978 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 730054"];
2979 [label="Debug.Assert((object)symbol != null); 730055"];
2980 [label="Debug.Assert((object)within != null); 730056"];
2981 [label="Debug.Assert((object)within != null); 730057"];
2982 [label="Debug.Assert(within.IsDefinition); 730058"];
2983 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730059"];
2984 [label="failedThroughTypeCheck = false; 730060"];
2985 [label="param IsNamedTypeAccessible(Symbol within) 730061"];
2986 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730062"];
2987 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730063"];
2988 [label="Debug.Assert((object)type != null); 730064"];
2989 [label="var compilation = within.DeclaringCompilation; 730065"];
2990 [label="bool unused; 730066"];
2991 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 730067"];
2992 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 730068"];
2993 [label="param IsNonNestedTypeAccessible(Symbol within) 730069"];
2994 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730070"];
2995 [label="Debug.Assert((object)assembly != null); 730071"];
2996 [label="Debug.Assert((object)assembly != null); 730072"];
2997 [label="originalBinder.IsSemanticModelBinder 730073"];
2998 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 730074"];
2999 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 730075"];
3000 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 730076"];
3001 [label="this.Flags.Includes(BinderFlags.SemanticModel) 730077"];
3002 [label="param Includes(this BinderFlags self) 730078"];
3003 [label="param Includes(BinderFlags other) 730079"];
3004 [label="param IsUsingAlias(bool callerIsSemanticModel) 730080"];
3005 [label="return false; 730081"];
3006 [label="return; 730082"];
3007 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730083"];
3008 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 730084"];
3009 [label="binder = scope; 730085"];
3010 [label="return binder; 730086"];
3011 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 730087"];
3012 [label="IsViableType(result) 730088"];
3013 [label="param IsViableType(LookupResult result) 730089"];
3014 [label="result.IsMultiViable 730090"];
3015 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 730091"];
3016 [label="return _kind; 730092"];
3017 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 730093"];
3018 [label="result.Symbols 730094"];
3019 [label="get\n            {\n                return _symbolList;\n            } 730095"];
3020 [label="return _symbolList; 730096"];
3021 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 730097"];
3022 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 730098"];
3023 [label="return true; 730099"];
3024 [label="bool wasError; 730100"];
3025 [label="param ResultSymbol(string simpleName) 730101"];
3026 [label="param ResultSymbol(int arity) 730102"];
3027 [label="param ResultSymbol(SyntaxNode where) 730103"];
3028 [label="param ResultSymbol(DiagnosticBag diagnostics) 730104"];
3029 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 730105"];
3030 [label="param ResultSymbol(out bool wasError) 730106"];
3031 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 730107"];
3032 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 730108"];
3033 [label="param ResultSymbol(this) 730109"];
3034 [label="Debug.Assert(where != null); 730110"];
3035 [label="Debug.Assert(where != null); 730111"];
3036 [label="Debug.Assert(diagnostics != null); 730112"];
3037 [label="Debug.Assert(diagnostics != null); 730113"];
3038 [label="wasError = false; 730114"];
3039 [label="var singleType = singleResult as TypeSymbol; 730115"];
3040 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 730116"];
3041 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 730117"];
3042 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 730118"];
3043 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 730119"];
3044 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 730120"];
3045 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 730121"];
3046 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730122"];
3047 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730123"];
3048 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730124"];
3049 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 730125"];
3050 [label="param ReportUseSiteDiagnostics(Symbol symbol) 730126"];
3051 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 730127"];
3052 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 730128"];
3053 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 730129"];
3054 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730130"];
3055 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730131"];
3056 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 730132"];
3057 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730133"];
3058 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730134"];
3059 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730135"];
3060 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730136"];
3061 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 730137"];
3062 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 730138"];
3063 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 730139"];
3064 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 730140"];
3065 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 730141"];
3066 [label="param CheckRuntimeSupportForSymbolAccess(this) 730142"];
3067 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 730143"];
3068 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 730144"];
3069 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 730145"];
3070 [label="this.Clear(); 730146"];
3071 [label="result.Free(); 730147"];
3072 [label="if (symbol is null)\n                {\n                    return default;\n                } 730148"];
3073 [label="Debug.Assert(typeWithAnnotations.HasType); 730149"];
3074 [label="_symbol = null; 730150"];
3075 [label="_symbol 730151"];
3076 [label="_isNullableEnabled = false; 730152"];
3077 [label="_isNullableEnabled 730153"];
3078 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 730154"];
3079 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730155"];
3080 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 730156"];
3081 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730157"];
3082 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730158"];
3083 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730159"];
3084 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730160"];
3085 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 730161"];
3086 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 730162"];
3087 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730163"];
3088 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730164"];
3089 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 730165"];
3090 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 730166"];
3091 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 730167"];
3092 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 730168"];
3093 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 730169"];
3094 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 730170"];
3095 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 730171"];
3096 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 730172"];
3097 [label="RoslynDebug.Assert(diagnostics != null); 730173"];
3098 [label="RoslynDebug.Assert(diagnostics != null); 730174"];
3099 [label="DiagnosticInfo? info = null; 730175"];
3100 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 730176"];
3101 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 730177"];
3102 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 730178"];
3103 [label="return kind; 730179"];
3104 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 730180"];
3105 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 730181"];
3106 [label="=> _symbol?.Kind == SymbolKind.Alias 730182"];
3107 [label="_symbol 730183"];
3108 [label="_symbol?.Kind == SymbolKind.Alias 730184"];
3109 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 730185"];
3110 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 730186"];
3111 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730187"];
3112 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 730188"];
3113 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 730189"];
3114 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 730190"];
3115 [label="param CreateErrorIfLookupOnTypeParameter(string name) 730191"];
3116 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 730192"];
3117 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 730193"];
3118 [label="param CreateErrorIfLookupOnTypeParameter(this) 730194"];
3119 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 730195"];
3120 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 730196"];
3121 [label="return null; 730197"];
3122 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730198"];
3123 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 730199"];
3124 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 730200"];
3125 [label="instance.IsClear 730201"];
3126 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730202"];
3127 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730203"];
3128 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730204"];
3129 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730205"];
3130 [label="Debug.Assert(instance.IsClear); 730206"];
3131 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 730207"];
3132 [label="result.IsClear 730208"];
3133 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730209"];
3134 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730210"];
3135 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730211"];
3136 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730212"];
3137 [label="Debug.Assert(result.IsClear); 730213"];
3138 [label="Debug.Assert(options.AreValid()); 730214"];
3139 [label="options.AreValid() 730215"];
3140 [label="param AreValid(this LookupOptions options) 730216"];
3141 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 730217"];
3142 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730218"];
3143 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730219"];
3144 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730220"];
3145 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 730221"];
3146 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730222"];
3147 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730223"];
3148 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730224"];
3149 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730225"];
3150 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730226"];
3151 [label="return OnlyOneBitSet(onlyOptions); 730227"];
3152 [label="OnlyOneBitSet(onlyOptions) 730228"];
3153 [label="param OnlyOneBitSet(LookupOptions o) 730229"];
3154 [label="return (o & (o - 1)) == 0; 730230"];
3155 [label="return (o & (o - 1)) == 0; 730231"];
3156 [label="param LookupSymbolsInSingleBinder(LookupResult result) 730232"];
3157 [label="param LookupSymbolsInSingleBinder(string name) 730233"];
3158 [label="param LookupSymbolsInSingleBinder(int arity) 730234"];
3159 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 730235"];
3160 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 730236"];
3161 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730237"];
3162 [label="param LookupSymbolsInSingleBinder(bool diagnose) 730238"];
3163 [label="param LookupSymbolsInSingleBinder(this) 730239"];
3164 [label="result.IsClear 730240"];
3165 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730241"];
3166 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730242"];
3167 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730243"];
3168 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730244"];
3169 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 730245"];
3170 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 730246"];
3171 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 730247"];
3172 [label="param LookupSymbolsInSingleBinder(LookupResult result) 730248"];
3173 [label="param LookupSymbolsInSingleBinder(int arity) 730249"];
3174 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 730250"];
3175 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 730251"];
3176 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730252"];
3177 [label="param LookupSymbolsInSingleBinder(bool diagnose) 730253"];
3178 [label="result.IsClear 730254"];
3179 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730255"];
3180 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730256"];
3181 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730257"];
3182 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730258"];
3183 [label="Debug.Assert(result.IsClear); 730259"];
3184 [label="LookupMask 730260"];
3185 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 730261"];
3186 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 730262"];
3187 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 730263"];
3188 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 730264"];
3189 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 730265"];
3190 [label="result.IsClear 730266"];
3191 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730267"];
3192 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730268"];
3193 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730269"];
3194 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730270"];
3195 [label="Debug.Assert(result.IsClear); 730271"];
3196 [label="IsSubmissionClass 730272"];
3197 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 730273"];
3198 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 730274"];
3199 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 730275"];
3200 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 730276"];
3201 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 730277"];
3202 [label="param LookupMembersInternal(this) 730278"];
3203 [label="Debug.Assert(options.AreValid()); 730279"];
3204 [label="options.AreValid() 730280"];
3205 [label="param AreValid(this LookupOptions options) 730281"];
3206 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 730282"];
3207 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730283"];
3208 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730284"];
3209 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730285"];
3210 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 730286"];
3211 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730287"];
3212 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730288"];
3213 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730289"];
3214 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730290"];
3215 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730291"];
3216 [label="return OnlyOneBitSet(onlyOptions); 730292"];
3217 [label="OnlyOneBitSet(onlyOptions) 730293"];
3218 [label="param OnlyOneBitSet(LookupOptions o) 730294"];
3219 [label="return (o & (o - 1)) == 0; 730295"];
3220 [label="return (o & (o - 1)) == 0; 730296"];
3221 [label="Debug.Assert(arity >= 0); 730297"];
3222 [label="param GetCandidateMembers(Binder originalBinder) 730298"];
3223 [label="param CheckViability(TypeSymbol accessThroughType) 730299"];
3224 [label="param CheckViability(bool diagnose) 730300"];
3225 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 730301"];
3226 [label="bool inaccessibleViaQualifier; 730302"];
3227 [label="DiagnosticInfo diagInfo; 730303"];
3228 [label="param WrongArity(Symbol symbol) 730304"];
3229 [label="param WrongArity(int arity) 730305"];
3230 [label="param WrongArity(bool diagnose) 730306"];
3231 [label="param WrongArity(LookupOptions options) 730307"];
3232 [label="param WrongArity(out DiagnosticInfo diagInfo) 730308"];
3233 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 730309"];
3234 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730310"];
3235 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730311"];
3236 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730312"];
3237 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730313"];
3238 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 730314"];
3239 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730315"];
3240 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730316"];
3241 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730317"];
3242 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730318"];
3243 [label="options.IsAttributeTypeLookup() 730319"];
3244 [label="param IsAttributeTypeLookup(this LookupOptions options) 730320"];
3245 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730321"];
3246 [label="diagInfo = null; 730322"];
3247 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730323"];
3248 [label="RefineAccessThroughType(options, accessThroughType) 730324"];
3249 [label="param RefineAccessThroughType(LookupOptions options) 730325"];
3250 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 730326"];
3251 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730327"];
3252 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730328"];
3253 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 730329"];
3254 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730330"];
3255 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730331"];
3256 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730332"];
3257 [label="param IsAccessible(TypeSymbol accessThroughType) 730333"];
3258 [label="param IsAccessible(out bool failedThroughTypeCheck) 730334"];
3259 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730335"];
3260 [label="param IsAccessible(this) 730336"];
3261 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730337"];
3262 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730338"];
3263 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730339"];
3264 [label="param Includes(this BinderFlags self) 730340"];
3265 [label="param Includes(BinderFlags other) 730341"];
3266 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730342"];
3267 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730343"];
3268 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 730344"];
3269 [label="param IsAccessibleHelper(this) 730345"];
3270 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730346"];
3271 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730347"];
3272 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 730348"];
3273 [label="param IsAccessibleHelper(this) 730349"];
3274 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 730350"];
3275 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 730351"];
3276 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 730352"];
3277 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 730353"];
3278 [label="param IsSymbolAccessibleConditional(this) 730354"];
3279 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730355"];
3280 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730356"];
3281 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730357"];
3282 [label="param Includes(this BinderFlags self) 730358"];
3283 [label="param Includes(BinderFlags other) 730359"];
3284 [label="param IsSymbolAccessible(NamedTypeSymbol within) 730360"];
3285 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 730361"];
3286 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 730362"];
3287 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730363"];
3288 [label="param IsSymbolAccessibleCore(Symbol within) 730364"];
3289 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 730365"];
3290 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 730366"];
3291 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 730367"];
3292 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 730368"];
3293 [label="Debug.Assert((object)symbol != null); 730369"];
3294 [label="Debug.Assert((object)within != null); 730370"];
3295 [label="Debug.Assert((object)within != null); 730371"];
3296 [label="Debug.Assert(within.IsDefinition); 730372"];
3297 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730373"];
3298 [label="failedThroughTypeCheck = false; 730374"];
3299 [label="param IsNamedTypeAccessible(Symbol within) 730375"];
3300 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730376"];
3301 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730377"];
3302 [label="Debug.Assert((object)type != null); 730378"];
3303 [label="var compilation = within.DeclaringCompilation; 730379"];
3304 [label="bool unused; 730380"];
3305 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 730381"];
3306 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 730382"];
3307 [label="param IsNonNestedTypeAccessible(Symbol within) 730383"];
3308 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730384"];
3309 [label="Debug.Assert((object)assembly != null); 730385"];
3310 [label="Debug.Assert((object)assembly != null); 730386"];
3311 [label="originalBinder.IsSemanticModelBinder 730387"];
3312 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 730388"];
3313 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 730389"];
3314 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 730390"];
3315 [label="this.Flags.Includes(BinderFlags.SemanticModel) 730391"];
3316 [label="param Includes(this BinderFlags self) 730392"];
3317 [label="param Includes(BinderFlags other) 730393"];
3318 [label="param IsUsingAlias(bool callerIsSemanticModel) 730394"];
3319 [label="return false; 730395"];
3320 [label="return; 730396"];
3321 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730397"];
3322 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 730398"];
3323 [label="binder = scope; 730399"];
3324 [label="return binder; 730400"];
3325 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 730401"];
3326 [label="IsViableType(result) 730402"];
3327 [label="param IsViableType(LookupResult result) 730403"];
3328 [label="result.IsMultiViable 730404"];
3329 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 730405"];
3330 [label="return _kind; 730406"];
3331 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 730407"];
3332 [label="result.Symbols 730408"];
3333 [label="get\n            {\n                return _symbolList;\n            } 730409"];
3334 [label="return _symbolList; 730410"];
3335 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 730411"];
3336 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 730412"];
3337 [label="return true; 730413"];
3338 [label="bool wasError; 730414"];
3339 [label="param ResultSymbol(string simpleName) 730415"];
3340 [label="param ResultSymbol(int arity) 730416"];
3341 [label="param ResultSymbol(SyntaxNode where) 730417"];
3342 [label="param ResultSymbol(DiagnosticBag diagnostics) 730418"];
3343 [label="param ResultSymbol(out bool wasError) 730419"];
3344 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 730420"];
3345 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 730421"];
3346 [label="param ResultSymbol(this) 730422"];
3347 [label="Debug.Assert(where != null); 730423"];
3348 [label="Debug.Assert(where != null); 730424"];
3349 [label="Debug.Assert(diagnostics != null); 730425"];
3350 [label="Debug.Assert(diagnostics != null); 730426"];
3351 [label="wasError = false; 730427"];
3352 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 730428"];
3353 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 730429"];
3354 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 730430"];
3355 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730431"];
3356 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730432"];
3357 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 730433"];
3358 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 730434"];
3359 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730435"];
3360 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 730436"];
3361 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730437"];
3362 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730438"];
3363 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730439"];
3364 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730440"];
3365 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 730441"];
3366 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 730442"];
3367 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 730443"];
3368 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 730444"];
3369 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 730445"];
3370 [label="param CheckRuntimeSupportForSymbolAccess(this) 730446"];
3371 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 730447"];
3372 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 730448"];
3373 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 730449"];
3374 [label="this.Clear(); 730450"];
3375 [label="result.Free(); 730451"];
3376 [label="if (symbol is null)\n                {\n                    return default;\n                } 730452"];
3377 [label="Debug.Assert(typeWithAnnotations.HasType); 730453"];
3378 [label="_symbol = null; 730454"];
3379 [label="_symbol 730455"];
3380 [label="_isNullableEnabled = false; 730456"];
3381 [label="_isNullableEnabled 730457"];
3382 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 730458"];
3383 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730459"];
3384 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730460"];
3385 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730461"];
3386 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730462"];
3387 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730463"];
3388 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 730464"];
3389 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730465"];
3390 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730466"];
3391 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 730467"];
3392 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 730468"];
3393 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 730469"];
3394 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 730470"];
3395 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 730471"];
3396 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 730472"];
3397 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 730473"];
3398 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 730474"];
3399 [label="RoslynDebug.Assert(diagnostics != null); 730475"];
3400 [label="RoslynDebug.Assert(diagnostics != null); 730476"];
3401 [label="DiagnosticInfo? info = null; 730477"];
3402 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 730478"];
3403 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 730479"];
3404 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 730480"];
3405 [label="return kind; 730481"];
3406 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 730482"];
3407 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 730483"];
3408 [label="=> _symbol?.Kind == SymbolKind.Alias 730484"];
3409 [label="_symbol 730485"];
3410 [label="_symbol?.Kind == SymbolKind.Alias 730486"];
3411 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 730487"];
3412 [label="param TypeConversions(AssemblySymbol corLibrary) 730488"];
3413 [label="param TypeConversions(bool includeNullability = false) 730489"];
3414 [label="param TypeConversions(this) 730490"];
3415 [label="corLibrary 730491"];
3416 [label="0 730492"];
3417 [label="includeNullability 730493"];
3418 [label="null 730494"];
3419 [label="param TypeConversions(this) 730495"];
3420 [label="param TypeConversions(AssemblySymbol corLibrary) 730496"];
3421 [label="param TypeConversions(int currentRecursionDepth) 730497"];
3422 [label="param TypeConversions(bool includeNullability) 730498"];
3423 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 730499"];
3424 [label="param TypeConversions(this) 730500"];
3425 [label="50 730501"];
3426 [label="MaximumRecursionDepth = 50 730502"];
3427 [label="false 730503"];
3428 [label="F = false 730504"];
3429 [label="true 730505"];
3430 [label="T = true 730506"];
3431 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 730507"];
3432 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 730508"];
3433 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 730509"];
3434 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 730510"];
3435 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 730511"];
3436 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 730512"];
3437 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 730513"];
3438 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 730514"];
3439 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 730515"];
3440 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 730516"];
3441 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 730517"];
3442 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 730518"];
3443 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 730519"];
3444 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 730520"];
3445 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 730521"];
3446 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 730522"];
3447 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 730523"];
3448 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 730524"];
3449 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730525"];
3450 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730526"];
3451 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730527"];
3452 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730528"];
3453 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730529"];
3454 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730530"];
3455 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 730531"];
3456 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 730532"];
3457 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 730533"];
3458 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 730534"];
3459 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 730535"];
3460 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 730536"];
3461 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730537"];
3462 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730538"];
3463 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730539"];
3464 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730540"];
3465 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730541"];
3466 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730542"];
3467 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730543"];
3468 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730544"];
3469 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730545"];
3470 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730546"];
3471 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730547"];
3472 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730548"];
3473 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730549"];
3474 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730550"];
3475 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730551"];
3476 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730552"];
3477 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730553"];
3478 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 730554"];
3479 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 730555"];
3480 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 730556"];
3481 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 730557"];
3482 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 730558"];
3483 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 730559"];
3484 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 730560"];
3485 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 730561"];
3486 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 730562"];
3487 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 730563"];
3488 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 730564"];
3489 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 730565"];
3490 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 730566"];
3491 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 730567"];
3492 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 730568"];
3493 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 730569"];
3494 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 730570"];
3495 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 730571"];
3496 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 730572"];
3497 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 730573"];
3498 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 730574"];
3499 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 730575"];
3500 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 730576"];
3501 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 730577"];
3502 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 730578"];
3503 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 730579"];
3504 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 730580"];
3505 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 730581"];
3506 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 730582"];
3507 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 730583"];
3508 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 730584"];
3509 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 730585"];
3510 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 730586"];
3511 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 730587"];
3512 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 730588"];
3513 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 730589"];
3514 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 730590"];
3515 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730591"];
3516 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730592"];
3517 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730593"];
3518 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730594"];
3519 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730595"];
3520 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730596"];
3521 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730597"];
3522 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730598"];
3523 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730599"];
3524 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730600"];
3525 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730601"];
3526 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730602"];
3527 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730603"];
3528 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 730604"];
3529 [label="corLibrary 730605"];
3530 [label="currentRecursionDepth 730606"];
3531 [label="includeNullability 730607"];
3532 [label="otherNullabilityOpt 730608"];
3533 [label="param TypeConversions(this) 730609"];
3534 [label="param ConversionsBase(AssemblySymbol corLibrary) 730610"];
3535 [label="param ConversionsBase(int currentRecursionDepth) 730611"];
3536 [label="param ConversionsBase(bool includeNullability) 730612"];
3537 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 730613"];
3538 [label="param ConversionsBase(this) 730614"];
3539 [label="corLibrary 730615"];
3540 [label="currentRecursionDepth 730616"];
3541 [label="IncludeNullability 730617"];
3542 [label="_lazyOtherNullability 730618"];
3543 [label="Debug.Assert((object)corLibrary != null); 730619"];
3544 [label="Debug.Assert((object)corLibrary != null); 730620"];
3545 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 730621"];
3546 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 730622"];
3547 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 730623"];
3548 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 730624"];
3549 [label="this.corLibrary 730625"];
3550 [label="this.currentRecursionDepth 730626"];
3551 [label="IncludeNullability 730627"];
3552 [label="_lazyOtherNullability 730628"];
3553 [label="var diagnostics = c.GetDiagnostics(); 730629"];
3554 [label="Debug.Assert(node != null); 730630"];
3555 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 730631"];
3556 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 730632"];
3557 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 730633"];
3558 [label="param Includes(this BinderFlags self) 730634"];
3559 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 730635"];
3560 [label="param Includes(this BinderFlags self) 730636"];
3561 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 730637"];
3562 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730638"];
3563 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 730639"];
3564 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 730640"];
3565 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 730641"];
3566 [label="param CreateErrorIfLookupOnTypeParameter(string name) 730642"];
3567 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 730643"];
3568 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 730644"];
3569 [label="param CreateErrorIfLookupOnTypeParameter(this) 730645"];
3570 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 730646"];
3571 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 730647"];
3572 [label="return null; 730648"];
3573 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730649"];
3574 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 730650"];
3575 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 730651"];
3576 [label="instance.IsClear 730652"];
3577 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730653"];
3578 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730654"];
3579 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730655"];
3580 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730656"];
3581 [label="Debug.Assert(instance.IsClear); 730657"];
3582 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 730658"];
3583 [label="result.IsClear 730659"];
3584 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730660"];
3585 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730661"];
3586 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730662"];
3587 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730663"];
3588 [label="Debug.Assert(result.IsClear); 730664"];
3589 [label="Debug.Assert(options.AreValid()); 730665"];
3590 [label="options.AreValid() 730666"];
3591 [label="param AreValid(this LookupOptions options) 730667"];
3592 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 730668"];
3593 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730669"];
3594 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730670"];
3595 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730671"];
3596 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 730672"];
3597 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730673"];
3598 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730674"];
3599 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730675"];
3600 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730676"];
3601 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730677"];
3602 [label="return OnlyOneBitSet(onlyOptions); 730678"];
3603 [label="OnlyOneBitSet(onlyOptions) 730679"];
3604 [label="param OnlyOneBitSet(LookupOptions o) 730680"];
3605 [label="return (o & (o - 1)) == 0; 730681"];
3606 [label="return (o & (o - 1)) == 0; 730682"];
3607 [label="param LookupSymbolsInSingleBinder(LookupResult result) 730683"];
3608 [label="param LookupSymbolsInSingleBinder(string name) 730684"];
3609 [label="param LookupSymbolsInSingleBinder(int arity) 730685"];
3610 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 730686"];
3611 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 730687"];
3612 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730688"];
3613 [label="param LookupSymbolsInSingleBinder(bool diagnose) 730689"];
3614 [label="param LookupSymbolsInSingleBinder(this) 730690"];
3615 [label="result.IsClear 730691"];
3616 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730692"];
3617 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730693"];
3618 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730694"];
3619 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730695"];
3620 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 730696"];
3621 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 730697"];
3622 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 730698"];
3623 [label="param LookupSymbolsInSingleBinder(LookupResult result) 730699"];
3624 [label="param LookupSymbolsInSingleBinder(int arity) 730700"];
3625 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 730701"];
3626 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 730702"];
3627 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730703"];
3628 [label="param LookupSymbolsInSingleBinder(bool diagnose) 730704"];
3629 [label="result.IsClear 730705"];
3630 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730706"];
3631 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730707"];
3632 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730708"];
3633 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730709"];
3634 [label="Debug.Assert(result.IsClear); 730710"];
3635 [label="LookupMask 730711"];
3636 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 730712"];
3637 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 730713"];
3638 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 730714"];
3639 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 730715"];
3640 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 730716"];
3641 [label="result.IsClear 730717"];
3642 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730718"];
3643 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730719"];
3644 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730720"];
3645 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730721"];
3646 [label="Debug.Assert(result.IsClear); 730722"];
3647 [label="IsSubmissionClass 730723"];
3648 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 730724"];
3649 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 730725"];
3650 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 730726"];
3651 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 730727"];
3652 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 730728"];
3653 [label="param LookupMembersInternal(this) 730729"];
3654 [label="Debug.Assert(options.AreValid()); 730730"];
3655 [label="options.AreValid() 730731"];
3656 [label="param AreValid(this LookupOptions options) 730732"];
3657 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 730733"];
3658 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730734"];
3659 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730735"];
3660 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730736"];
3661 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 730737"];
3662 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730738"];
3663 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730739"];
3664 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730740"];
3665 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730741"];
3666 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730742"];
3667 [label="return OnlyOneBitSet(onlyOptions); 730743"];
3668 [label="OnlyOneBitSet(onlyOptions) 730744"];
3669 [label="param OnlyOneBitSet(LookupOptions o) 730745"];
3670 [label="return (o & (o - 1)) == 0; 730746"];
3671 [label="return (o & (o - 1)) == 0; 730747"];
3672 [label="Debug.Assert(arity >= 0); 730748"];
3673 [label="param GetCandidateMembers(Binder originalBinder) 730749"];
3674 [label="param CheckViability(TypeSymbol accessThroughType) 730750"];
3675 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 730751"];
3676 [label="bool inaccessibleViaQualifier; 730752"];
3677 [label="DiagnosticInfo diagInfo; 730753"];
3678 [label="param WrongArity(Symbol symbol) 730754"];
3679 [label="param WrongArity(int arity) 730755"];
3680 [label="param WrongArity(bool diagnose) 730756"];
3681 [label="param WrongArity(LookupOptions options) 730757"];
3682 [label="param WrongArity(out DiagnosticInfo diagInfo) 730758"];
3683 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 730759"];
3684 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730760"];
3685 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730761"];
3686 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730762"];
3687 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 730763"];
3688 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 730764"];
3689 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730765"];
3690 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730766"];
3691 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730767"];
3692 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730768"];
3693 [label="options.IsAttributeTypeLookup() 730769"];
3694 [label="param IsAttributeTypeLookup(this LookupOptions options) 730770"];
3695 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 730771"];
3696 [label="diagInfo = null; 730772"];
3697 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730773"];
3698 [label="RefineAccessThroughType(options, accessThroughType) 730774"];
3699 [label="param RefineAccessThroughType(LookupOptions options) 730775"];
3700 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 730776"];
3701 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730777"];
3702 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730778"];
3703 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 730779"];
3704 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 730780"];
3705 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730781"];
3706 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 730782"];
3707 [label="param IsAccessible(TypeSymbol accessThroughType) 730783"];
3708 [label="param IsAccessible(out bool failedThroughTypeCheck) 730784"];
3709 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730785"];
3710 [label="param IsAccessible(this) 730786"];
3711 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730787"];
3712 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730788"];
3713 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730789"];
3714 [label="param Includes(this BinderFlags self) 730790"];
3715 [label="param Includes(BinderFlags other) 730791"];
3716 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730792"];
3717 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730793"];
3718 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 730794"];
3719 [label="param IsAccessibleHelper(this) 730795"];
3720 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730796"];
3721 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730797"];
3722 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 730798"];
3723 [label="param IsAccessibleHelper(this) 730799"];
3724 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 730800"];
3725 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 730801"];
3726 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 730802"];
3727 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 730803"];
3728 [label="param IsSymbolAccessibleConditional(this) 730804"];
3729 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730805"];
3730 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 730806"];
3731 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730807"];
3732 [label="param Includes(this BinderFlags self) 730808"];
3733 [label="param Includes(BinderFlags other) 730809"];
3734 [label="param IsSymbolAccessible(NamedTypeSymbol within) 730810"];
3735 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 730811"];
3736 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 730812"];
3737 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730813"];
3738 [label="param IsSymbolAccessibleCore(Symbol within) 730814"];
3739 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 730815"];
3740 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 730816"];
3741 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 730817"];
3742 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 730818"];
3743 [label="Debug.Assert((object)symbol != null); 730819"];
3744 [label="Debug.Assert((object)within != null); 730820"];
3745 [label="Debug.Assert((object)within != null); 730821"];
3746 [label="Debug.Assert(within.IsDefinition); 730822"];
3747 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730823"];
3748 [label="failedThroughTypeCheck = false; 730824"];
3749 [label="param IsNamedTypeAccessible(Symbol within) 730825"];
3750 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 730826"];
3751 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730827"];
3752 [label="Debug.Assert((object)type != null); 730828"];
3753 [label="var compilation = within.DeclaringCompilation; 730829"];
3754 [label="bool unused; 730830"];
3755 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 730831"];
3756 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 730832"];
3757 [label="param IsNonNestedTypeAccessible(Symbol within) 730833"];
3758 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730834"];
3759 [label="Debug.Assert((object)assembly != null); 730835"];
3760 [label="Debug.Assert((object)assembly != null); 730836"];
3761 [label="originalBinder.IsSemanticModelBinder 730837"];
3762 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 730838"];
3763 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 730839"];
3764 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 730840"];
3765 [label="this.Flags.Includes(BinderFlags.SemanticModel) 730841"];
3766 [label="param Includes(this BinderFlags self) 730842"];
3767 [label="param Includes(BinderFlags other) 730843"];
3768 [label="param IsUsingAlias(bool callerIsSemanticModel) 730844"];
3769 [label="return false; 730845"];
3770 [label="return; 730846"];
3771 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730847"];
3772 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 730848"];
3773 [label="binder = scope; 730849"];
3774 [label="return binder; 730850"];
3775 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 730851"];
3776 [label="IsViableType(result) 730852"];
3777 [label="param IsViableType(LookupResult result) 730853"];
3778 [label="result.IsMultiViable 730854"];
3779 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 730855"];
3780 [label="return _kind; 730856"];
3781 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 730857"];
3782 [label="result.Symbols 730858"];
3783 [label="get\n            {\n                return _symbolList;\n            } 730859"];
3784 [label="return _symbolList; 730860"];
3785 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 730861"];
3786 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 730862"];
3787 [label="return true; 730863"];
3788 [label="bool wasError; 730864"];
3789 [label="param ResultSymbol(int arity) 730865"];
3790 [label="param ResultSymbol(SyntaxNode where) 730866"];
3791 [label="param ResultSymbol(DiagnosticBag diagnostics) 730867"];
3792 [label="param ResultSymbol(out bool wasError) 730868"];
3793 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 730869"];
3794 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 730870"];
3795 [label="param ResultSymbol(this) 730871"];
3796 [label="Debug.Assert(where != null); 730872"];
3797 [label="Debug.Assert(where != null); 730873"];
3798 [label="Debug.Assert(diagnostics != null); 730874"];
3799 [label="Debug.Assert(diagnostics != null); 730875"];
3800 [label="wasError = false; 730876"];
3801 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 730877"];
3802 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 730878"];
3803 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 730879"];
3804 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730880"];
3805 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730881"];
3806 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 730882"];
3807 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 730883"];
3808 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730884"];
3809 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 730885"];
3810 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730886"];
3811 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730887"];
3812 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730888"];
3813 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730889"];
3814 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 730890"];
3815 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 730891"];
3816 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 730892"];
3817 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 730893"];
3818 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 730894"];
3819 [label="param CheckRuntimeSupportForSymbolAccess(this) 730895"];
3820 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 730896"];
3821 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 730897"];
3822 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 730898"];
3823 [label="this.Clear(); 730899"];
3824 [label="result.Free(); 730900"];
3825 [label="if (symbol is null)\n                {\n                    return default;\n                } 730901"];
3826 [label="Debug.Assert(typeWithAnnotations.HasType); 730902"];
3827 [label="_symbol = null; 730903"];
3828 [label="_symbol 730904"];
3829 [label="_isNullableEnabled = false; 730905"];
3830 [label="_isNullableEnabled 730906"];
3831 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 730907"];
3832 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730908"];
3833 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730909"];
3834 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730910"];
3835 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730911"];
3836 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730912"];
3837 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 730913"];
3838 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730914"];
3839 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730915"];
3840 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 730916"];
3841 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 730917"];
3842 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 730918"];
3843 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 730919"];
3844 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 730920"];
3845 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 730921"];
3846 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 730922"];
3847 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 730923"];
3848 [label="RoslynDebug.Assert(diagnostics != null); 730924"];
3849 [label="RoslynDebug.Assert(diagnostics != null); 730925"];
3850 [label="DiagnosticInfo? info = null; 730926"];
3851 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 730927"];
3852 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 730928"];
3853 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 730929"];
3854 [label="return kind; 730930"];
3855 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 730931"];
3856 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 730932"];
3857 [label="=> _symbol?.Kind == SymbolKind.Alias 730933"];
3858 [label="_symbol 730934"];
3859 [label="_symbol?.Kind == SymbolKind.Alias 730935"];
3860 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 730936"];
3861 [label="Debug.Assert(node != null); 730937"];
3862 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 730938"];
3863 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 730939"];
3864 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 730940"];
3865 [label="param Includes(this BinderFlags self) 730941"];
3866 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 730942"];
3867 [label="param Includes(this BinderFlags self) 730943"];
3868 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 730944"];
3869 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730945"];
3870 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 730946"];
3871 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 730947"];
3872 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 730948"];
3873 [label="param CreateErrorIfLookupOnTypeParameter(string name) 730949"];
3874 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 730950"];
3875 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 730951"];
3876 [label="param CreateErrorIfLookupOnTypeParameter(this) 730952"];
3877 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 730953"];
3878 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 730954"];
3879 [label="return null; 730955"];
3880 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730956"];
3881 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 730957"];
3882 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 730958"];
3883 [label="instance.IsClear 730959"];
3884 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730960"];
3885 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730961"];
3886 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730962"];
3887 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730963"];
3888 [label="Debug.Assert(instance.IsClear); 730964"];
3889 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 730965"];
3890 [label="result.IsClear 730966"];
3891 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730967"];
3892 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730968"];
3893 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730969"];
3894 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730970"];
3895 [label="Debug.Assert(result.IsClear); 730971"];
3896 [label="Debug.Assert(options.AreValid()); 730972"];
3897 [label="options.AreValid() 730973"];
3898 [label="param AreValid(this LookupOptions options) 730974"];
3899 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 730975"];
3900 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730976"];
3901 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 730977"];
3902 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730978"];
3903 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 730979"];
3904 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730980"];
3905 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730981"];
3906 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 730982"];
3907 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730983"];
3908 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 730984"];
3909 [label="return OnlyOneBitSet(onlyOptions); 730985"];
3910 [label="OnlyOneBitSet(onlyOptions) 730986"];
3911 [label="param OnlyOneBitSet(LookupOptions o) 730987"];
3912 [label="return (o & (o - 1)) == 0; 730988"];
3913 [label="return (o & (o - 1)) == 0; 730989"];
3914 [label="param LookupSymbolsInSingleBinder(LookupResult result) 730990"];
3915 [label="param LookupSymbolsInSingleBinder(string name) 730991"];
3916 [label="param LookupSymbolsInSingleBinder(int arity) 730992"];
3917 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 730993"];
3918 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 730994"];
3919 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730995"];
3920 [label="param LookupSymbolsInSingleBinder(bool diagnose) 730996"];
3921 [label="param LookupSymbolsInSingleBinder(this) 730997"];
3922 [label="result.IsClear 730998"];
3923 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 730999"];
3924 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731000"];
3925 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731001"];
3926 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731002"];
3927 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731003"];
3928 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731004"];
3929 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731005"];
3930 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731006"];
3931 [label="param LookupSymbolsInSingleBinder(int arity) 731007"];
3932 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731008"];
3933 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731009"];
3934 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731010"];
3935 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731011"];
3936 [label="result.IsClear 731012"];
3937 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731013"];
3938 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731014"];
3939 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731015"];
3940 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731016"];
3941 [label="Debug.Assert(result.IsClear); 731017"];
3942 [label="LookupMask 731018"];
3943 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 731019"];
3944 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731020"];
3945 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731021"];
3946 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731022"];
3947 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731023"];
3948 [label="result.IsClear 731024"];
3949 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731025"];
3950 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731026"];
3951 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731027"];
3952 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731028"];
3953 [label="Debug.Assert(result.IsClear); 731029"];
3954 [label="IsSubmissionClass 731030"];
3955 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731031"];
3956 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731032"];
3957 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 731033"];
3958 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731034"];
3959 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 731035"];
3960 [label="param LookupMembersInternal(this) 731036"];
3961 [label="Debug.Assert(options.AreValid()); 731037"];
3962 [label="options.AreValid() 731038"];
3963 [label="param AreValid(this LookupOptions options) 731039"];
3964 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731040"];
3965 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731041"];
3966 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731042"];
3967 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731043"];
3968 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731044"];
3969 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731045"];
3970 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731046"];
3971 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731047"];
3972 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731048"];
3973 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731049"];
3974 [label="return OnlyOneBitSet(onlyOptions); 731050"];
3975 [label="OnlyOneBitSet(onlyOptions) 731051"];
3976 [label="param OnlyOneBitSet(LookupOptions o) 731052"];
3977 [label="return (o & (o - 1)) == 0; 731053"];
3978 [label="return (o & (o - 1)) == 0; 731054"];
3979 [label="Debug.Assert(arity >= 0); 731055"];
3980 [label="param GetCandidateMembers(Binder originalBinder) 731056"];
3981 [label="param CheckViability(TypeSymbol accessThroughType) 731057"];
3982 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 731058"];
3983 [label="bool inaccessibleViaQualifier; 731059"];
3984 [label="param WrongArity(Symbol symbol) 731060"];
3985 [label="param WrongArity(int arity) 731061"];
3986 [label="param WrongArity(bool diagnose) 731062"];
3987 [label="param WrongArity(LookupOptions options) 731063"];
3988 [label="param WrongArity(out DiagnosticInfo diagInfo) 731064"];
3989 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 731065"];
3990 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731066"];
3991 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731067"];
3992 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731068"];
3993 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731069"];
3994 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731070"];
3995 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731071"];
3996 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731072"];
3997 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731073"];
3998 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731074"];
3999 [label="options.IsAttributeTypeLookup() 731075"];
4000 [label="param IsAttributeTypeLookup(this LookupOptions options) 731076"];
4001 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731077"];
4002 [label="diagInfo = null; 731078"];
4003 [label="RefineAccessThroughType(options, accessThroughType) 731079"];
4004 [label="param RefineAccessThroughType(LookupOptions options) 731080"];
4005 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731081"];
4006 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731082"];
4007 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731083"];
4008 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731084"];
4009 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731085"];
4010 [label="param IsAccessible(TypeSymbol accessThroughType) 731086"];
4011 [label="param IsAccessible(out bool failedThroughTypeCheck) 731087"];
4012 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731088"];
4013 [label="param IsAccessible(this) 731089"];
4014 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731090"];
4015 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731091"];
4016 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731092"];
4017 [label="param Includes(this BinderFlags self) 731093"];
4018 [label="param Includes(BinderFlags other) 731094"];
4019 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731095"];
4020 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731096"];
4021 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731097"];
4022 [label="param IsAccessibleHelper(this) 731098"];
4023 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731099"];
4024 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731100"];
4025 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731101"];
4026 [label="param IsAccessibleHelper(this) 731102"];
4027 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731103"];
4028 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731104"];
4029 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 731105"];
4030 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 731106"];
4031 [label="param IsSymbolAccessibleConditional(this) 731107"];
4032 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731108"];
4033 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731109"];
4034 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731110"];
4035 [label="param Includes(this BinderFlags self) 731111"];
4036 [label="param Includes(BinderFlags other) 731112"];
4037 [label="param IsSymbolAccessible(NamedTypeSymbol within) 731113"];
4038 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731114"];
4039 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 731115"];
4040 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731116"];
4041 [label="param IsSymbolAccessibleCore(Symbol within) 731117"];
4042 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731118"];
4043 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731119"];
4044 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731120"];
4045 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 731121"];
4046 [label="Debug.Assert((object)symbol != null); 731122"];
4047 [label="Debug.Assert((object)within != null); 731123"];
4048 [label="Debug.Assert((object)within != null); 731124"];
4049 [label="Debug.Assert(within.IsDefinition); 731125"];
4050 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731126"];
4051 [label="failedThroughTypeCheck = false; 731127"];
4052 [label="param IsNamedTypeAccessible(Symbol within) 731128"];
4053 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731129"];
4054 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731130"];
4055 [label="Debug.Assert((object)type != null); 731131"];
4056 [label="var compilation = within.DeclaringCompilation; 731132"];
4057 [label="bool unused; 731133"];
4058 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 731134"];
4059 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 731135"];
4060 [label="param IsNonNestedTypeAccessible(Symbol within) 731136"];
4061 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731137"];
4062 [label="Debug.Assert((object)assembly != null); 731138"];
4063 [label="Debug.Assert((object)assembly != null); 731139"];
4064 [label="originalBinder.IsSemanticModelBinder 731140"];
4065 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 731141"];
4066 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 731142"];
4067 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 731143"];
4068 [label="this.Flags.Includes(BinderFlags.SemanticModel) 731144"];
4069 [label="param Includes(this BinderFlags self) 731145"];
4070 [label="param Includes(BinderFlags other) 731146"];
4071 [label="param IsUsingAlias(bool callerIsSemanticModel) 731147"];
4072 [label="return false; 731148"];
4073 [label="return; 731149"];
4074 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731150"];
4075 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731151"];
4076 [label="binder = scope; 731152"];
4077 [label="return binder; 731153"];
4078 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 731154"];
4079 [label="IsViableType(result) 731155"];
4080 [label="param IsViableType(LookupResult result) 731156"];
4081 [label="result.IsMultiViable 731157"];
4082 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 731158"];
4083 [label="return _kind; 731159"];
4084 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 731160"];
4085 [label="result.Symbols 731161"];
4086 [label="get\n            {\n                return _symbolList;\n            } 731162"];
4087 [label="return _symbolList; 731163"];
4088 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 731164"];
4089 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 731165"];
4090 [label="return true; 731166"];
4091 [label="bool wasError; 731167"];
4092 [label="param ResultSymbol(SyntaxNode where) 731168"];
4093 [label="param ResultSymbol(DiagnosticBag diagnostics) 731169"];
4094 [label="param ResultSymbol(out bool wasError) 731170"];
4095 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 731171"];
4096 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 731172"];
4097 [label="param ResultSymbol(this) 731173"];
4098 [label="Debug.Assert(where != null); 731174"];
4099 [label="Debug.Assert(where != null); 731175"];
4100 [label="Debug.Assert(diagnostics != null); 731176"];
4101 [label="Debug.Assert(diagnostics != null); 731177"];
4102 [label="wasError = false; 731178"];
4103 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 731179"];
4104 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 731180"];
4105 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 731181"];
4106 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 731182"];
4107 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 731183"];
4108 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 731184"];
4109 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 731185"];
4110 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 731186"];
4111 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731187"];
4112 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731188"];
4113 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731189"];
4114 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731190"];
4115 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 731191"];
4116 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 731192"];
4117 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 731193"];
4118 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 731194"];
4119 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 731195"];
4120 [label="param CheckRuntimeSupportForSymbolAccess(this) 731196"];
4121 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 731197"];
4122 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 731198"];
4123 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 731199"];
4124 [label="this.Clear(); 731200"];
4125 [label="result.Free(); 731201"];
4126 [label="if (symbol is null)\n                {\n                    return default;\n                } 731202"];
4127 [label="Debug.Assert(typeWithAnnotations.HasType); 731203"];
4128 [label="_symbol = null; 731204"];
4129 [label="_symbol 731205"];
4130 [label="_isNullableEnabled = false; 731206"];
4131 [label="_isNullableEnabled 731207"];
4132 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 731208"];
4133 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731209"];
4134 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731210"];
4135 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731211"];
4136 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731212"];
4137 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731213"];
4138 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 731214"];
4139 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731215"];
4140 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731216"];
4141 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 731217"];
4142 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 731218"];
4143 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 731219"];
4144 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 731220"];
4145 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 731221"];
4146 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 731222"];
4147 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 731223"];
4148 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 731224"];
4149 [label="RoslynDebug.Assert(diagnostics != null); 731225"];
4150 [label="RoslynDebug.Assert(diagnostics != null); 731226"];
4151 [label="DiagnosticInfo? info = null; 731227"];
4152 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 731228"];
4153 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 731229"];
4154 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 731230"];
4155 [label="return kind; 731231"];
4156 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 731232"];
4157 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 731233"];
4158 [label="=> _symbol?.Kind == SymbolKind.Alias 731234"];
4159 [label="_symbol 731235"];
4160 [label="_symbol?.Kind == SymbolKind.Alias 731236"];
4161 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 731237"];
4162 [label="Debug.Assert(node != null); 731238"];
4163 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 731239"];
4164 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 731240"];
4165 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 731241"];
4166 [label="param Includes(this BinderFlags self) 731242"];
4167 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 731243"];
4168 [label="param Includes(this BinderFlags self) 731244"];
4169 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 731245"];
4170 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731246"];
4171 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 731247"];
4172 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 731248"];
4173 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 731249"];
4174 [label="param CreateErrorIfLookupOnTypeParameter(string name) 731250"];
4175 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 731251"];
4176 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 731252"];
4177 [label="param CreateErrorIfLookupOnTypeParameter(this) 731253"];
4178 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 731254"];
4179 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 731255"];
4180 [label="return null; 731256"];
4181 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731257"];
4182 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 731258"];
4183 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 731259"];
4184 [label="instance.IsClear 731260"];
4185 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731261"];
4186 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731262"];
4187 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731263"];
4188 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731264"];
4189 [label="Debug.Assert(instance.IsClear); 731265"];
4190 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 731266"];
4191 [label="result.IsClear 731267"];
4192 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731268"];
4193 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731269"];
4194 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731270"];
4195 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731271"];
4196 [label="Debug.Assert(result.IsClear); 731272"];
4197 [label="Debug.Assert(options.AreValid()); 731273"];
4198 [label="options.AreValid() 731274"];
4199 [label="param AreValid(this LookupOptions options) 731275"];
4200 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731276"];
4201 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731277"];
4202 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731278"];
4203 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731279"];
4204 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731280"];
4205 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731281"];
4206 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731282"];
4207 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731283"];
4208 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731284"];
4209 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731285"];
4210 [label="return OnlyOneBitSet(onlyOptions); 731286"];
4211 [label="OnlyOneBitSet(onlyOptions) 731287"];
4212 [label="param OnlyOneBitSet(LookupOptions o) 731288"];
4213 [label="return (o & (o - 1)) == 0; 731289"];
4214 [label="return (o & (o - 1)) == 0; 731290"];
4215 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731291"];
4216 [label="param LookupSymbolsInSingleBinder(string name) 731292"];
4217 [label="param LookupSymbolsInSingleBinder(int arity) 731293"];
4218 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731294"];
4219 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731295"];
4220 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731296"];
4221 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731297"];
4222 [label="param LookupSymbolsInSingleBinder(this) 731298"];
4223 [label="result.IsClear 731299"];
4224 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731300"];
4225 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731301"];
4226 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731302"];
4227 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731303"];
4228 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731304"];
4229 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731305"];
4230 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731306"];
4231 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731307"];
4232 [label="param LookupSymbolsInSingleBinder(int arity) 731308"];
4233 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731309"];
4234 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731310"];
4235 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731311"];
4236 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731312"];
4237 [label="result.IsClear 731313"];
4238 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731314"];
4239 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731315"];
4240 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731316"];
4241 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731317"];
4242 [label="Debug.Assert(result.IsClear); 731318"];
4243 [label="LookupMask 731319"];
4244 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 731320"];
4245 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731321"];
4246 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731322"];
4247 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731323"];
4248 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731324"];
4249 [label="result.IsClear 731325"];
4250 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731326"];
4251 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731327"];
4252 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731328"];
4253 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731329"];
4254 [label="Debug.Assert(result.IsClear); 731330"];
4255 [label="IsSubmissionClass 731331"];
4256 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731332"];
4257 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731333"];
4258 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 731334"];
4259 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731335"];
4260 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 731336"];
4261 [label="param LookupMembersInternal(this) 731337"];
4262 [label="Debug.Assert(options.AreValid()); 731338"];
4263 [label="options.AreValid() 731339"];
4264 [label="param AreValid(this LookupOptions options) 731340"];
4265 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731341"];
4266 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731342"];
4267 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731343"];
4268 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731344"];
4269 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731345"];
4270 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731346"];
4271 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731347"];
4272 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731348"];
4273 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731349"];
4274 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731350"];
4275 [label="return OnlyOneBitSet(onlyOptions); 731351"];
4276 [label="OnlyOneBitSet(onlyOptions) 731352"];
4277 [label="param OnlyOneBitSet(LookupOptions o) 731353"];
4278 [label="return (o & (o - 1)) == 0; 731354"];
4279 [label="return (o & (o - 1)) == 0; 731355"];
4280 [label="Debug.Assert(arity >= 0); 731356"];
4281 [label="param GetCandidateMembers(Binder originalBinder) 731357"];
4282 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 731358"];
4283 [label="bool inaccessibleViaQualifier; 731359"];
4284 [label="param WrongArity(Symbol symbol) 731360"];
4285 [label="param WrongArity(int arity) 731361"];
4286 [label="param WrongArity(bool diagnose) 731362"];
4287 [label="param WrongArity(LookupOptions options) 731363"];
4288 [label="param WrongArity(out DiagnosticInfo diagInfo) 731364"];
4289 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 731365"];
4290 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731366"];
4291 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731367"];
4292 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731368"];
4293 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731369"];
4294 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731370"];
4295 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731371"];
4296 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731372"];
4297 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731373"];
4298 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731374"];
4299 [label="options.IsAttributeTypeLookup() 731375"];
4300 [label="param IsAttributeTypeLookup(this LookupOptions options) 731376"];
4301 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731377"];
4302 [label="diagInfo = null; 731378"];
4303 [label="RefineAccessThroughType(options, accessThroughType) 731379"];
4304 [label="param RefineAccessThroughType(LookupOptions options) 731380"];
4305 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731381"];
4306 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731382"];
4307 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731383"];
4308 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731384"];
4309 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731385"];
4310 [label="param IsAccessible(TypeSymbol accessThroughType) 731386"];
4311 [label="param IsAccessible(out bool failedThroughTypeCheck) 731387"];
4312 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731388"];
4313 [label="param IsAccessible(this) 731389"];
4314 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731390"];
4315 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731391"];
4316 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731392"];
4317 [label="param Includes(this BinderFlags self) 731393"];
4318 [label="param Includes(BinderFlags other) 731394"];
4319 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731395"];
4320 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731396"];
4321 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731397"];
4322 [label="param IsAccessibleHelper(this) 731398"];
4323 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731399"];
4324 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731400"];
4325 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731401"];
4326 [label="param IsAccessibleHelper(this) 731402"];
4327 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731403"];
4328 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731404"];
4329 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 731405"];
4330 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 731406"];
4331 [label="param IsSymbolAccessibleConditional(this) 731407"];
4332 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731408"];
4333 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731409"];
4334 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731410"];
4335 [label="param Includes(this BinderFlags self) 731411"];
4336 [label="param Includes(BinderFlags other) 731412"];
4337 [label="param IsSymbolAccessible(NamedTypeSymbol within) 731413"];
4338 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731414"];
4339 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 731415"];
4340 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731416"];
4341 [label="param IsSymbolAccessibleCore(Symbol within) 731417"];
4342 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731418"];
4343 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731419"];
4344 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731420"];
4345 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 731421"];
4346 [label="Debug.Assert((object)symbol != null); 731422"];
4347 [label="Debug.Assert((object)within != null); 731423"];
4348 [label="Debug.Assert((object)within != null); 731424"];
4349 [label="Debug.Assert(within.IsDefinition); 731425"];
4350 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731426"];
4351 [label="failedThroughTypeCheck = false; 731427"];
4352 [label="param IsNamedTypeAccessible(Symbol within) 731428"];
4353 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731429"];
4354 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731430"];
4355 [label="Debug.Assert((object)type != null); 731431"];
4356 [label="var compilation = within.DeclaringCompilation; 731432"];
4357 [label="bool unused; 731433"];
4358 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 731434"];
4359 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 731435"];
4360 [label="param IsNonNestedTypeAccessible(Symbol within) 731436"];
4361 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731437"];
4362 [label="Debug.Assert((object)assembly != null); 731438"];
4363 [label="Debug.Assert((object)assembly != null); 731439"];
4364 [label="originalBinder.IsSemanticModelBinder 731440"];
4365 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 731441"];
4366 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 731442"];
4367 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 731443"];
4368 [label="this.Flags.Includes(BinderFlags.SemanticModel) 731444"];
4369 [label="param Includes(this BinderFlags self) 731445"];
4370 [label="param Includes(BinderFlags other) 731446"];
4371 [label="param IsUsingAlias(bool callerIsSemanticModel) 731447"];
4372 [label="return false; 731448"];
4373 [label="return; 731449"];
4374 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731450"];
4375 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731451"];
4376 [label="binder = scope; 731452"];
4377 [label="return binder; 731453"];
4378 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 731454"];
4379 [label="IsViableType(result) 731455"];
4380 [label="param IsViableType(LookupResult result) 731456"];
4381 [label="result.IsMultiViable 731457"];
4382 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 731458"];
4383 [label="return _kind; 731459"];
4384 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 731460"];
4385 [label="result.Symbols 731461"];
4386 [label="get\n            {\n                return _symbolList;\n            } 731462"];
4387 [label="return _symbolList; 731463"];
4388 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 731464"];
4389 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 731465"];
4390 [label="return true; 731466"];
4391 [label="bool wasError; 731467"];
4392 [label="param ResultSymbol(DiagnosticBag diagnostics) 731468"];
4393 [label="param ResultSymbol(out bool wasError) 731469"];
4394 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 731470"];
4395 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 731471"];
4396 [label="param ResultSymbol(this) 731472"];
4397 [label="Debug.Assert(where != null); 731473"];
4398 [label="Debug.Assert(diagnostics != null); 731474"];
4399 [label="Debug.Assert(diagnostics != null); 731475"];
4400 [label="wasError = false; 731476"];
4401 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 731477"];
4402 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 731478"];
4403 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 731479"];
4404 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 731480"];
4405 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 731481"];
4406 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 731482"];
4407 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 731483"];
4408 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731484"];
4409 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731485"];
4410 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731486"];
4411 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731487"];
4412 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 731488"];
4413 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 731489"];
4414 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 731490"];
4415 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 731491"];
4416 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 731492"];
4417 [label="param CheckRuntimeSupportForSymbolAccess(this) 731493"];
4418 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 731494"];
4419 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 731495"];
4420 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 731496"];
4421 [label="this.Clear(); 731497"];
4422 [label="result.Free(); 731498"];
4423 [label="if (symbol is null)\n                {\n                    return default;\n                } 731499"];
4424 [label="Debug.Assert(typeWithAnnotations.HasType); 731500"];
4425 [label="_symbol = null; 731501"];
4426 [label="_symbol 731502"];
4427 [label="_isNullableEnabled = false; 731503"];
4428 [label="_isNullableEnabled 731504"];
4429 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 731505"];
4430 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731506"];
4431 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731507"];
4432 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731508"];
4433 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731509"];
4434 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731510"];
4435 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 731511"];
4436 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731512"];
4437 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731513"];
4438 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 731514"];
4439 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 731515"];
4440 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 731516"];
4441 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 731517"];
4442 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 731518"];
4443 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 731519"];
4444 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 731520"];
4445 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 731521"];
4446 [label="RoslynDebug.Assert(diagnostics != null); 731522"];
4447 [label="RoslynDebug.Assert(diagnostics != null); 731523"];
4448 [label="DiagnosticInfo? info = null; 731524"];
4449 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 731525"];
4450 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 731526"];
4451 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 731527"];
4452 [label="return kind; 731528"];
4453 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 731529"];
4454 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 731530"];
4455 [label="=> _symbol?.Kind == SymbolKind.Alias 731531"];
4456 [label="_symbol 731532"];
4457 [label="_symbol?.Kind == SymbolKind.Alias 731533"];
4458 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 731534"];
4459 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 731535"];
4460 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731536"];
4461 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 731537"];
4462 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 731538"];
4463 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 731539"];
4464 [label="param CreateErrorIfLookupOnTypeParameter(string name) 731540"];
4465 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 731541"];
4466 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 731542"];
4467 [label="param CreateErrorIfLookupOnTypeParameter(this) 731543"];
4468 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 731544"];
4469 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 731545"];
4470 [label="return null; 731546"];
4471 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731547"];
4472 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 731548"];
4473 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 731549"];
4474 [label="instance.IsClear 731550"];
4475 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731551"];
4476 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731552"];
4477 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731553"];
4478 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731554"];
4479 [label="Debug.Assert(instance.IsClear); 731555"];
4480 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 731556"];
4481 [label="result.IsClear 731557"];
4482 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731558"];
4483 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731559"];
4484 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731560"];
4485 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731561"];
4486 [label="Debug.Assert(result.IsClear); 731562"];
4487 [label="Debug.Assert(options.AreValid()); 731563"];
4488 [label="options.AreValid() 731564"];
4489 [label="param AreValid(this LookupOptions options) 731565"];
4490 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731566"];
4491 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731567"];
4492 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731568"];
4493 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731569"];
4494 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731570"];
4495 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731571"];
4496 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731572"];
4497 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731573"];
4498 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731574"];
4499 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731575"];
4500 [label="return OnlyOneBitSet(onlyOptions); 731576"];
4501 [label="OnlyOneBitSet(onlyOptions) 731577"];
4502 [label="param OnlyOneBitSet(LookupOptions o) 731578"];
4503 [label="return (o & (o - 1)) == 0; 731579"];
4504 [label="return (o & (o - 1)) == 0; 731580"];
4505 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731581"];
4506 [label="param LookupSymbolsInSingleBinder(string name) 731582"];
4507 [label="param LookupSymbolsInSingleBinder(int arity) 731583"];
4508 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731584"];
4509 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731585"];
4510 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731586"];
4511 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731587"];
4512 [label="param LookupSymbolsInSingleBinder(this) 731588"];
4513 [label="result.IsClear 731589"];
4514 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731590"];
4515 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731591"];
4516 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731592"];
4517 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731593"];
4518 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731594"];
4519 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731595"];
4520 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731596"];
4521 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731597"];
4522 [label="param LookupSymbolsInSingleBinder(int arity) 731598"];
4523 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731599"];
4524 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731600"];
4525 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731601"];
4526 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731602"];
4527 [label="result.IsClear 731603"];
4528 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731604"];
4529 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731605"];
4530 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731606"];
4531 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731607"];
4532 [label="Debug.Assert(result.IsClear); 731608"];
4533 [label="LookupMask 731609"];
4534 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 731610"];
4535 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731611"];
4536 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731612"];
4537 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731613"];
4538 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731614"];
4539 [label="result.IsClear 731615"];
4540 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731616"];
4541 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731617"];
4542 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731618"];
4543 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731619"];
4544 [label="Debug.Assert(result.IsClear); 731620"];
4545 [label="IsSubmissionClass 731621"];
4546 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731622"];
4547 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731623"];
4548 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 731624"];
4549 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731625"];
4550 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 731626"];
4551 [label="param LookupMembersInternal(this) 731627"];
4552 [label="Debug.Assert(options.AreValid()); 731628"];
4553 [label="options.AreValid() 731629"];
4554 [label="param AreValid(this LookupOptions options) 731630"];
4555 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731631"];
4556 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731632"];
4557 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731633"];
4558 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731634"];
4559 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731635"];
4560 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731636"];
4561 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731637"];
4562 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731638"];
4563 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731639"];
4564 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731640"];
4565 [label="return OnlyOneBitSet(onlyOptions); 731641"];
4566 [label="OnlyOneBitSet(onlyOptions) 731642"];
4567 [label="param OnlyOneBitSet(LookupOptions o) 731643"];
4568 [label="return (o & (o - 1)) == 0; 731644"];
4569 [label="return (o & (o - 1)) == 0; 731645"];
4570 [label="Debug.Assert(arity >= 0); 731646"];
4571 [label="param GetCandidateMembers(Binder originalBinder) 731647"];
4572 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 731648"];
4573 [label="param WrongArity(Symbol symbol) 731649"];
4574 [label="param WrongArity(int arity) 731650"];
4575 [label="param WrongArity(bool diagnose) 731651"];
4576 [label="param WrongArity(LookupOptions options) 731652"];
4577 [label="param WrongArity(out DiagnosticInfo diagInfo) 731653"];
4578 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 731654"];
4579 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731655"];
4580 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731656"];
4581 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731657"];
4582 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731658"];
4583 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731659"];
4584 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731660"];
4585 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731661"];
4586 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731662"];
4587 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731663"];
4588 [label="options.IsAttributeTypeLookup() 731664"];
4589 [label="param IsAttributeTypeLookup(this LookupOptions options) 731665"];
4590 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731666"];
4591 [label="diagInfo = null; 731667"];
4592 [label="RefineAccessThroughType(options, accessThroughType) 731668"];
4593 [label="param RefineAccessThroughType(LookupOptions options) 731669"];
4594 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731670"];
4595 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731671"];
4596 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731672"];
4597 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731673"];
4598 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731674"];
4599 [label="param IsAccessible(TypeSymbol accessThroughType) 731675"];
4600 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731676"];
4601 [label="param IsAccessible(this) 731677"];
4602 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731678"];
4603 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731679"];
4604 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731680"];
4605 [label="param Includes(this BinderFlags self) 731681"];
4606 [label="param Includes(BinderFlags other) 731682"];
4607 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731683"];
4608 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731684"];
4609 [label="param IsAccessibleHelper(this) 731685"];
4610 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731686"];
4611 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731687"];
4612 [label="param IsAccessibleHelper(this) 731688"];
4613 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731689"];
4614 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731690"];
4615 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 731691"];
4616 [label="param IsSymbolAccessibleConditional(this) 731692"];
4617 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731693"];
4618 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731694"];
4619 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731695"];
4620 [label="param Includes(this BinderFlags self) 731696"];
4621 [label="param Includes(BinderFlags other) 731697"];
4622 [label="param IsSymbolAccessible(NamedTypeSymbol within) 731698"];
4623 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731699"];
4624 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731700"];
4625 [label="param IsSymbolAccessibleCore(Symbol within) 731701"];
4626 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731702"];
4627 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731703"];
4628 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731704"];
4629 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 731705"];
4630 [label="Debug.Assert((object)symbol != null); 731706"];
4631 [label="Debug.Assert((object)within != null); 731707"];
4632 [label="Debug.Assert((object)within != null); 731708"];
4633 [label="Debug.Assert(within.IsDefinition); 731709"];
4634 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731710"];
4635 [label="failedThroughTypeCheck = false; 731711"];
4636 [label="param IsNamedTypeAccessible(Symbol within) 731712"];
4637 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731713"];
4638 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731714"];
4639 [label="Debug.Assert((object)type != null); 731715"];
4640 [label="var compilation = within.DeclaringCompilation; 731716"];
4641 [label="bool unused; 731717"];
4642 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 731718"];
4643 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 731719"];
4644 [label="param IsNonNestedTypeAccessible(Symbol within) 731720"];
4645 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731721"];
4646 [label="Debug.Assert((object)assembly != null); 731722"];
4647 [label="Debug.Assert((object)assembly != null); 731723"];
4648 [label="originalBinder.IsSemanticModelBinder 731724"];
4649 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 731725"];
4650 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 731726"];
4651 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 731727"];
4652 [label="this.Flags.Includes(BinderFlags.SemanticModel) 731728"];
4653 [label="param Includes(this BinderFlags self) 731729"];
4654 [label="param Includes(BinderFlags other) 731730"];
4655 [label="param IsUsingAlias(bool callerIsSemanticModel) 731731"];
4656 [label="return false; 731732"];
4657 [label="return; 731733"];
4658 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731734"];
4659 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731735"];
4660 [label="binder = scope; 731736"];
4661 [label="return binder; 731737"];
4662 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 731738"];
4663 [label="IsViableType(result) 731739"];
4664 [label="param IsViableType(LookupResult result) 731740"];
4665 [label="result.IsMultiViable 731741"];
4666 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 731742"];
4667 [label="return _kind; 731743"];
4668 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 731744"];
4669 [label="result.Symbols 731745"];
4670 [label="get\n            {\n                return _symbolList;\n            } 731746"];
4671 [label="return _symbolList; 731747"];
4672 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 731748"];
4673 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 731749"];
4674 [label="return true; 731750"];
4675 [label="bool wasError; 731751"];
4676 [label="param ResultSymbol(out bool wasError) 731752"];
4677 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 731753"];
4678 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 731754"];
4679 [label="param ResultSymbol(this) 731755"];
4680 [label="Debug.Assert(where != null); 731756"];
4681 [label="Debug.Assert(diagnostics != null); 731757"];
4682 [label="wasError = false; 731758"];
4683 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 731759"];
4684 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 731760"];
4685 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 731761"];
4686 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 731762"];
4687 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 731763"];
4688 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 731764"];
4689 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731765"];
4690 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731766"];
4691 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731767"];
4692 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 731768"];
4693 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 731769"];
4694 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 731770"];
4695 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 731771"];
4696 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 731772"];
4697 [label="param CheckRuntimeSupportForSymbolAccess(this) 731773"];
4698 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 731774"];
4699 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 731775"];
4700 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 731776"];
4701 [label="this.Clear(); 731777"];
4702 [label="result.Free(); 731778"];
4703 [label="if (symbol is null)\n                {\n                    return default;\n                } 731779"];
4704 [label="Debug.Assert(typeWithAnnotations.HasType); 731780"];
4705 [label="_symbol = null; 731781"];
4706 [label="_symbol 731782"];
4707 [label="_isNullableEnabled = false; 731783"];
4708 [label="_isNullableEnabled 731784"];
4709 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 731785"];
4710 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731786"];
4711 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731787"];
4712 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731788"];
4713 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731789"];
4714 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731790"];
4715 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 731791"];
4716 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731792"];
4717 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731793"];
4718 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 731794"];
4719 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 731795"];
4720 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 731796"];
4721 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 731797"];
4722 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 731798"];
4723 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 731799"];
4724 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 731800"];
4725 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 731801"];
4726 [label="RoslynDebug.Assert(diagnostics != null); 731802"];
4727 [label="RoslynDebug.Assert(diagnostics != null); 731803"];
4728 [label="DiagnosticInfo? info = null; 731804"];
4729 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 731805"];
4730 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 731806"];
4731 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 731807"];
4732 [label="return kind; 731808"];
4733 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 731809"];
4734 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 731810"];
4735 [label="=> _symbol?.Kind == SymbolKind.Alias 731811"];
4736 [label="_symbol 731812"];
4737 [label="_symbol?.Kind == SymbolKind.Alias 731813"];
4738 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 731814"];
4739 [label="Debug.Assert(node != null); 731815"];
4740 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 731816"];
4741 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 731817"];
4742 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 731818"];
4743 [label="param Includes(this BinderFlags self) 731819"];
4744 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 731820"];
4745 [label="param Includes(this BinderFlags self) 731821"];
4746 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 731822"];
4747 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731823"];
4748 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 731824"];
4749 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 731825"];
4750 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 731826"];
4751 [label="param CreateErrorIfLookupOnTypeParameter(string name) 731827"];
4752 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 731828"];
4753 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 731829"];
4754 [label="param CreateErrorIfLookupOnTypeParameter(this) 731830"];
4755 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 731831"];
4756 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 731832"];
4757 [label="return null; 731833"];
4758 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731834"];
4759 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 731835"];
4760 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 731836"];
4761 [label="instance.IsClear 731837"];
4762 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731838"];
4763 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731839"];
4764 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731840"];
4765 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731841"];
4766 [label="Debug.Assert(instance.IsClear); 731842"];
4767 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 731843"];
4768 [label="result.IsClear 731844"];
4769 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731845"];
4770 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731846"];
4771 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731847"];
4772 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731848"];
4773 [label="Debug.Assert(result.IsClear); 731849"];
4774 [label="Debug.Assert(options.AreValid()); 731850"];
4775 [label="options.AreValid() 731851"];
4776 [label="param AreValid(this LookupOptions options) 731852"];
4777 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731853"];
4778 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731854"];
4779 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731855"];
4780 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731856"];
4781 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731857"];
4782 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731858"];
4783 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731859"];
4784 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731860"];
4785 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731861"];
4786 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731862"];
4787 [label="return OnlyOneBitSet(onlyOptions); 731863"];
4788 [label="OnlyOneBitSet(onlyOptions) 731864"];
4789 [label="param OnlyOneBitSet(LookupOptions o) 731865"];
4790 [label="return (o & (o - 1)) == 0; 731866"];
4791 [label="return (o & (o - 1)) == 0; 731867"];
4792 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731868"];
4793 [label="param LookupSymbolsInSingleBinder(string name) 731869"];
4794 [label="param LookupSymbolsInSingleBinder(int arity) 731870"];
4795 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731871"];
4796 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731872"];
4797 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731873"];
4798 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731874"];
4799 [label="param LookupSymbolsInSingleBinder(this) 731875"];
4800 [label="result.IsClear 731876"];
4801 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731877"];
4802 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731878"];
4803 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731879"];
4804 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731880"];
4805 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 731881"];
4806 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731882"];
4807 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 731883"];
4808 [label="param LookupSymbolsInSingleBinder(LookupResult result) 731884"];
4809 [label="param LookupSymbolsInSingleBinder(int arity) 731885"];
4810 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 731886"];
4811 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 731887"];
4812 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731888"];
4813 [label="param LookupSymbolsInSingleBinder(bool diagnose) 731889"];
4814 [label="result.IsClear 731890"];
4815 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731891"];
4816 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731892"];
4817 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731893"];
4818 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731894"];
4819 [label="Debug.Assert(result.IsClear); 731895"];
4820 [label="LookupMask 731896"];
4821 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 731897"];
4822 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731898"];
4823 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731899"];
4824 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731900"];
4825 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 731901"];
4826 [label="result.IsClear 731902"];
4827 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 731903"];
4828 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731904"];
4829 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731905"];
4830 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731906"];
4831 [label="Debug.Assert(result.IsClear); 731907"];
4832 [label="IsSubmissionClass 731908"];
4833 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731909"];
4834 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731910"];
4835 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 731911"];
4836 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731912"];
4837 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 731913"];
4838 [label="param LookupMembersInternal(this) 731914"];
4839 [label="Debug.Assert(options.AreValid()); 731915"];
4840 [label="options.AreValid() 731916"];
4841 [label="param AreValid(this LookupOptions options) 731917"];
4842 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 731918"];
4843 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731919"];
4844 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 731920"];
4845 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731921"];
4846 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 731922"];
4847 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731923"];
4848 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731924"];
4849 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 731925"];
4850 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731926"];
4851 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 731927"];
4852 [label="return OnlyOneBitSet(onlyOptions); 731928"];
4853 [label="OnlyOneBitSet(onlyOptions) 731929"];
4854 [label="param OnlyOneBitSet(LookupOptions o) 731930"];
4855 [label="return (o & (o - 1)) == 0; 731931"];
4856 [label="return (o & (o - 1)) == 0; 731932"];
4857 [label="Debug.Assert(arity >= 0); 731933"];
4858 [label="param GetCandidateMembers(Binder originalBinder) 731934"];
4859 [label="param WrongArity(Symbol symbol) 731935"];
4860 [label="param WrongArity(int arity) 731936"];
4861 [label="param WrongArity(bool diagnose) 731937"];
4862 [label="param WrongArity(LookupOptions options) 731938"];
4863 [label="param WrongArity(out DiagnosticInfo diagInfo) 731939"];
4864 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 731940"];
4865 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731941"];
4866 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731942"];
4867 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731943"];
4868 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 731944"];
4869 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731945"];
4870 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731946"];
4871 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731947"];
4872 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731948"];
4873 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731949"];
4874 [label="options.IsAttributeTypeLookup() 731950"];
4875 [label="param IsAttributeTypeLookup(this LookupOptions options) 731951"];
4876 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 731952"];
4877 [label="diagInfo = null; 731953"];
4878 [label="RefineAccessThroughType(options, accessThroughType) 731954"];
4879 [label="param RefineAccessThroughType(LookupOptions options) 731955"];
4880 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731956"];
4881 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731957"];
4882 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731958"];
4883 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731959"];
4884 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 731960"];
4885 [label="param IsAccessible(TypeSymbol accessThroughType) 731961"];
4886 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731962"];
4887 [label="param IsAccessible(this) 731963"];
4888 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731964"];
4889 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731965"];
4890 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731966"];
4891 [label="param Includes(this BinderFlags self) 731967"];
4892 [label="param Includes(BinderFlags other) 731968"];
4893 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731969"];
4894 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731970"];
4895 [label="param IsAccessibleHelper(this) 731971"];
4896 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731972"];
4897 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 731973"];
4898 [label="param IsAccessibleHelper(this) 731974"];
4899 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731975"];
4900 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731976"];
4901 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 731977"];
4902 [label="param IsSymbolAccessibleConditional(this) 731978"];
4903 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731979"];
4904 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 731980"];
4905 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731981"];
4906 [label="param Includes(this BinderFlags self) 731982"];
4907 [label="param Includes(BinderFlags other) 731983"];
4908 [label="param IsSymbolAccessible(NamedTypeSymbol within) 731984"];
4909 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731985"];
4910 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731986"];
4911 [label="param IsSymbolAccessibleCore(Symbol within) 731987"];
4912 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731988"];
4913 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731989"];
4914 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731990"];
4915 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 731991"];
4916 [label="Debug.Assert((object)symbol != null); 731992"];
4917 [label="Debug.Assert((object)within != null); 731993"];
4918 [label="Debug.Assert((object)within != null); 731994"];
4919 [label="Debug.Assert(within.IsDefinition); 731995"];
4920 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731996"];
4921 [label="failedThroughTypeCheck = false; 731997"];
4922 [label="param IsNamedTypeAccessible(Symbol within) 731998"];
4923 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 731999"];
4924 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732000"];
4925 [label="Debug.Assert((object)type != null); 732001"];
4926 [label="var compilation = within.DeclaringCompilation; 732002"];
4927 [label="bool unused; 732003"];
4928 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 732004"];
4929 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 732005"];
4930 [label="param IsNonNestedTypeAccessible(Symbol within) 732006"];
4931 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732007"];
4932 [label="Debug.Assert((object)assembly != null); 732008"];
4933 [label="Debug.Assert((object)assembly != null); 732009"];
4934 [label="originalBinder.IsSemanticModelBinder 732010"];
4935 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 732011"];
4936 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 732012"];
4937 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 732013"];
4938 [label="this.Flags.Includes(BinderFlags.SemanticModel) 732014"];
4939 [label="param Includes(this BinderFlags self) 732015"];
4940 [label="param Includes(BinderFlags other) 732016"];
4941 [label="param IsUsingAlias(bool callerIsSemanticModel) 732017"];
4942 [label="return false; 732018"];
4943 [label="return; 732019"];
4944 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732020"];
4945 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 732021"];
4946 [label="binder = scope; 732022"];
4947 [label="return binder; 732023"];
4948 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 732024"];
4949 [label="IsViableType(result) 732025"];
4950 [label="param IsViableType(LookupResult result) 732026"];
4951 [label="result.IsMultiViable 732027"];
4952 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 732028"];
4953 [label="return _kind; 732029"];
4954 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 732030"];
4955 [label="result.Symbols 732031"];
4956 [label="get\n            {\n                return _symbolList;\n            } 732032"];
4957 [label="return _symbolList; 732033"];
4958 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 732034"];
4959 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 732035"];
4960 [label="return true; 732036"];
4961 [label="bool wasError; 732037"];
4962 [label="param ResultSymbol(out bool wasError) 732038"];
4963 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 732039"];
4964 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 732040"];
4965 [label="param ResultSymbol(this) 732041"];
4966 [label="Debug.Assert(where != null); 732042"];
4967 [label="Debug.Assert(diagnostics != null); 732043"];
4968 [label="wasError = false; 732044"];
4969 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 732045"];
4970 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 732046"];
4971 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 732047"];
4972 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 732048"];
4973 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 732049"];
4974 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 732050"];
4975 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732051"];
4976 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732052"];
4977 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732053"];
4978 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 732054"];
4979 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 732055"];
4980 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 732056"];
4981 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 732057"];
4982 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 732058"];
4983 [label="param CheckRuntimeSupportForSymbolAccess(this) 732059"];
4984 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 732060"];
4985 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 732061"];
4986 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 732062"];
4987 [label="this.Clear(); 732063"];
4988 [label="result.Free(); 732064"];
4989 [label="if (symbol is null)\n                {\n                    return default;\n                } 732065"];
4990 [label="Debug.Assert(typeWithAnnotations.HasType); 732066"];
4991 [label="_symbol = null; 732067"];
4992 [label="_symbol 732068"];
4993 [label="_isNullableEnabled = false; 732069"];
4994 [label="_isNullableEnabled 732070"];
4995 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 732071"];
4996 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732072"];
4997 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732073"];
4998 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732074"];
4999 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732075"];
5000 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732076"];
5001 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 732077"];
5002 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732078"];
5003 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732079"];
5004 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 732080"];
5005 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 732081"];
5006 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 732082"];
5007 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 732083"];
5008 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 732084"];
5009 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 732085"];
5010 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 732086"];
5011 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 732087"];
5012 [label="RoslynDebug.Assert(diagnostics != null); 732088"];
5013 [label="RoslynDebug.Assert(diagnostics != null); 732089"];
5014 [label="DiagnosticInfo? info = null; 732090"];
5015 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 732091"];
5016 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 732092"];
5017 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 732093"];
5018 [label="return kind; 732094"];
5019 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 732095"];
5020 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 732096"];
5021 [label="=> _symbol?.Kind == SymbolKind.Alias 732097"];
5022 [label="_symbol 732098"];
5023 [label="_symbol?.Kind == SymbolKind.Alias 732099"];
5024 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 732100"];
5025 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 732101"];
5026 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 732102"];
5027 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 732103"];
5028 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 732104"];
5029 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 732105"];
5030 [label="param CreateErrorIfLookupOnTypeParameter(string name) 732106"];
5031 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 732107"];
5032 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 732108"];
5033 [label="param CreateErrorIfLookupOnTypeParameter(this) 732109"];
5034 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 732110"];
5035 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 732111"];
5036 [label="return null; 732112"];
5037 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 732113"];
5038 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 732114"];
5039 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 732115"];
5040 [label="instance.IsClear 732116"];
5041 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 732117"];
5042 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732118"];
5043 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732119"];
5044 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732120"];
5045 [label="Debug.Assert(instance.IsClear); 732121"];
5046 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 732122"];
5047 [label="result.IsClear 732123"];
5048 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 732124"];
5049 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732125"];
5050 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732126"];
5051 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732127"];
5052 [label="Debug.Assert(result.IsClear); 732128"];
5053 [label="Debug.Assert(options.AreValid()); 732129"];
5054 [label="options.AreValid() 732130"];
5055 [label="param AreValid(this LookupOptions options) 732131"];
5056 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 732132"];
5057 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 732133"];
5058 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 732134"];
5059 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 732135"];
5060 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 732136"];
5061 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 732137"];
5062 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 732138"];
5063 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 732139"];
5064 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 732140"];
5065 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 732141"];
5066 [label="return OnlyOneBitSet(onlyOptions); 732142"];
5067 [label="OnlyOneBitSet(onlyOptions) 732143"];
5068 [label="param OnlyOneBitSet(LookupOptions o) 732144"];
5069 [label="return (o & (o - 1)) == 0; 732145"];
5070 [label="return (o & (o - 1)) == 0; 732146"];
5071 [label="param LookupSymbolsInSingleBinder(LookupResult result) 732147"];
5072 [label="param LookupSymbolsInSingleBinder(string name) 732148"];
5073 [label="param LookupSymbolsInSingleBinder(int arity) 732149"];
5074 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 732150"];
5075 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 732151"];
5076 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 732152"];
5077 [label="param LookupSymbolsInSingleBinder(bool diagnose) 732153"];
5078 [label="param LookupSymbolsInSingleBinder(this) 732154"];
5079 [label="result.IsClear 732155"];
5080 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 732156"];
5081 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732157"];
5082 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732158"];
5083 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732159"];
5084 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 732160"];
5085 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 732161"];
5086 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 732162"];
5087 [label="param LookupSymbolsInSingleBinder(LookupResult result) 732163"];
5088 [label="param LookupSymbolsInSingleBinder(int arity) 732164"];
5089 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 732165"];
5090 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 732166"];
5091 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 732167"];
5092 [label="param LookupSymbolsInSingleBinder(bool diagnose) 732168"];
5093 [label="result.IsClear 732169"];
5094 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 732170"];
5095 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732171"];
5096 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732172"];
5097 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732173"];
5098 [label="Debug.Assert(result.IsClear); 732174"];
5099 [label="LookupMask 732175"];
5100 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 732176"];
5101 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 732177"];
5102 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 732178"];
5103 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 732179"];
5104 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 732180"];
5105 [label="result.IsClear 732181"];
5106 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 732182"];
5107 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732183"];
5108 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732184"];
5109 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732185"];
5110 [label="Debug.Assert(result.IsClear); 732186"];
5111 [label="IsSubmissionClass 732187"];
5112 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 732188"];
5113 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 732189"];
5114 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 732190"];
5115 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 732191"];
5116 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 732192"];
5117 [label="param LookupMembersInternal(this) 732193"];
5118 [label="Debug.Assert(options.AreValid()); 732194"];
5119 [label="options.AreValid() 732195"];
5120 [label="param AreValid(this LookupOptions options) 732196"];
5121 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 732197"];
5122 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 732198"];
5123 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 732199"];
5124 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 732200"];
5125 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 732201"];
5126 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 732202"];
5127 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 732203"];
5128 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 732204"];
5129 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 732205"];
5130 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 732206"];
5131 [label="return OnlyOneBitSet(onlyOptions); 732207"];
5132 [label="OnlyOneBitSet(onlyOptions) 732208"];
5133 [label="param OnlyOneBitSet(LookupOptions o) 732209"];
5134 [label="return (o & (o - 1)) == 0; 732210"];
5135 [label="return (o & (o - 1)) == 0; 732211"];
5136 [label="Debug.Assert(arity >= 0); 732212"];
5137 [label="param GetCandidateMembers(Binder originalBinder) 732213"];
5138 [label="param WrongArity(Symbol symbol) 732214"];
5139 [label="param WrongArity(int arity) 732215"];
5140 [label="param WrongArity(bool diagnose) 732216"];
5141 [label="param WrongArity(LookupOptions options) 732217"];
5142 [label="param WrongArity(out DiagnosticInfo diagInfo) 732218"];
5143 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 732219"];
5144 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 732220"];
5145 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 732221"];
5146 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 732222"];
5147 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 732223"];
5148 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 732224"];
5149 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 732225"];
5150 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 732226"];
5151 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 732227"];
5152 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 732228"];
5153 [label="options.IsAttributeTypeLookup() 732229"];
5154 [label="param IsAttributeTypeLookup(this LookupOptions options) 732230"];
5155 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 732231"];
5156 [label="diagInfo = null; 732232"];
5157 [label="RefineAccessThroughType(options, accessThroughType) 732233"];
5158 [label="param RefineAccessThroughType(LookupOptions options) 732234"];
5159 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 732235"];
5160 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 732236"];
5161 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 732237"];
5162 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 732238"];
5163 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 732239"];
5164 [label="param IsAccessible(TypeSymbol accessThroughType) 732240"];
5165 [label="param IsAccessible(this) 732241"];
5166 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 732242"];
5167 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 732243"];
5168 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 732244"];
5169 [label="param Includes(this BinderFlags self) 732245"];
5170 [label="param Includes(BinderFlags other) 732246"];
5171 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 732247"];
5172 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 732248"];
5173 [label="param IsAccessibleHelper(this) 732249"];
5174 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 732250"];
5175 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 732251"];
5176 [label="param IsAccessibleHelper(this) 732252"];
5177 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 732253"];
5178 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 732254"];
5179 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 732255"];
5180 [label="param IsSymbolAccessibleConditional(this) 732256"];
5181 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 732257"];
5182 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 732258"];
5183 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 732259"];
5184 [label="param Includes(this BinderFlags self) 732260"];
5185 [label="param Includes(BinderFlags other) 732261"];
5186 [label="param IsSymbolAccessible(NamedTypeSymbol within) 732262"];
5187 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 732263"];
5188 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 732264"];
5189 [label="param IsSymbolAccessibleCore(Symbol within) 732265"];
5190 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 732266"];
5191 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 732267"];
5192 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 732268"];
5193 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 732269"];
5194 [label="Debug.Assert((object)symbol != null); 732270"];
5195 [label="Debug.Assert((object)within != null); 732271"];
5196 [label="Debug.Assert((object)within != null); 732272"];
5197 [label="Debug.Assert(within.IsDefinition); 732273"];
5198 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732274"];
5199 [label="failedThroughTypeCheck = false; 732275"];
5200 [label="param IsNamedTypeAccessible(Symbol within) 732276"];
5201 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 732277"];
5202 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732278"];
5203 [label="Debug.Assert((object)type != null); 732279"];
5204 [label="var compilation = within.DeclaringCompilation; 732280"];
5205 [label="bool unused; 732281"];
5206 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 732282"];
5207 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 732283"];
5208 [label="param IsNonNestedTypeAccessible(Symbol within) 732284"];
5209 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732285"];
5210 [label="Debug.Assert((object)assembly != null); 732286"];
5211 [label="Debug.Assert((object)assembly != null); 732287"];
5212 [label="originalBinder.IsSemanticModelBinder 732288"];
5213 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 732289"];
5214 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 732290"];
5215 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 732291"];
5216 [label="this.Flags.Includes(BinderFlags.SemanticModel) 732292"];
5217 [label="param Includes(this BinderFlags self) 732293"];
5218 [label="param Includes(BinderFlags other) 732294"];
5219 [label="param IsUsingAlias(bool callerIsSemanticModel) 732295"];
5220 [label="return false; 732296"];
5221 [label="return; 732297"];
5222 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732298"];
5223 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 732299"];
5224 [label="binder = scope; 732300"];
5225 [label="return binder; 732301"];
5226 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 732302"];
5227 [label="IsViableType(result) 732303"];
5228 [label="param IsViableType(LookupResult result) 732304"];
5229 [label="result.IsMultiViable 732305"];
5230 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 732306"];
5231 [label="return _kind; 732307"];
5232 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 732308"];
5233 [label="result.Symbols 732309"];
5234 [label="get\n            {\n                return _symbolList;\n            } 732310"];
5235 [label="return _symbolList; 732311"];
5236 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 732312"];
5237 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 732313"];
5238 [label="return true; 732314"];
5239 [label="bool wasError; 732315"];
5240 [label="param ResultSymbol(out bool wasError) 732316"];
5241 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 732317"];
5242 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 732318"];
5243 [label="param ResultSymbol(this) 732319"];
5244 [label="Debug.Assert(where != null); 732320"];
5245 [label="Debug.Assert(diagnostics != null); 732321"];
5246 [label="wasError = false; 732322"];
5247 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 732323"];
5248 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 732324"];
5249 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 732325"];
5250 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 732326"];
5251 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 732327"];
5252 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 732328"];
5253 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732329"];
5254 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732330"];
5255 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732331"];
5256 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 732332"];
5257 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 732333"];
5258 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 732334"];
5259 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 732335"];
5260 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 732336"];
5261 [label="param CheckRuntimeSupportForSymbolAccess(this) 732337"];
5262 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 732338"];
5263 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 732339"];
5264 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 732340"];
5265 [label="this.Clear(); 732341"];
5266 [label="result.Free(); 732342"];
5267 [label="if (symbol is null)\n                {\n                    return default;\n                } 732343"];
5268 [label="Debug.Assert(typeWithAnnotations.HasType); 732344"];
5269 [label="_symbol = null; 732345"];
5270 [label="_symbol 732346"];
5271 [label="_isNullableEnabled = false; 732347"];
5272 [label="_isNullableEnabled 732348"];
5273 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 732349"];
5274 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732350"];
5275 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732351"];
5276 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732352"];
5277 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732353"];
5278 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732354"];
5279 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 732355"];
5280 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732356"];
5281 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732357"];
5282 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 732358"];
5283 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 732359"];
5284 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 732360"];
5285 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 732361"];
5286 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 732362"];
5287 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 732363"];
5288 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 732364"];
5289 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 732365"];
5290 [label="RoslynDebug.Assert(diagnostics != null); 732366"];
5291 [label="RoslynDebug.Assert(diagnostics != null); 732367"];
5292 [label="DiagnosticInfo? info = null; 732368"];
5293 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 732369"];
5294 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 732370"];
5295 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 732371"];
5296 [label="return kind; 732372"];
5297 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 732373"];
5298 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 732374"];
5299 [label="=> _symbol?.Kind == SymbolKind.Alias 732375"];
5300 [label="_symbol 732376"];
5301 [label="_symbol?.Kind == SymbolKind.Alias 732377"];
5302 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 732378"];
5303 [label="diagnostics.Verify(expected); 732379"];
5304 [label="diagnostics.Verify(expected); 732380"];
5305 [label="diagnostics.Verify(expected) 732381"];
5306 [label="param Verify(this ImmutableArray<Diagnostic> actual) 732382"];
5307 [label="param Verify(params DiagnosticDescription[] expected) 732383"];
5308 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 732384"];
5309 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 732385"];
5310 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 732386"];
5311 [label="param Verify(this IEnumerable<Diagnostic> actual) 732387"];
5312 [label="param Verify(params DiagnosticDescription[] expected) 732388"];
5313 [label="Verify(actual, expected, errorCodeOnly: false); 732389"];
5314 [label="Verify(actual, expected, errorCodeOnly: false); 732390"];
5315 [label="Verify(actual, expected, errorCodeOnly: false); 732391"];
5316 [label="Verify(actual, expected, errorCodeOnly: false) 732392"];
5317 [label="param Verify(IEnumerable<Diagnostic> actual) 732393"];
5318 [label="param Verify(DiagnosticDescription[] expected) 732394"];
5319 [label="param Verify(bool errorCodeOnly) 732395"];
5320 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 732396"];
5321 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 732397"];
5322 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 732398"];
5323 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 732399"];
5324 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 732400"];
5325 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 732401"];
5326 [label="=> _defaultSeverityOpt 732402"];
5327 [label="_defaultSeverityOpt 732403"];
5328 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 732404"];
5329 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 732405"];
5330 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 732406"];
5331 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 732407"];
5332 [label="=> _effectiveSeverityOpt 732408"];
5333 [label="_effectiveSeverityOpt 732409"];
5334 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 732410"];
5335 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 732411"];
5336 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 732412"];
5337 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 732413"];
5338 [label="param DiagnosticDescription(Diagnostic d) 732414"];
5339 [label="param DiagnosticDescription(bool errorCodeOnly) 732415"];
5340 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 732416"];
5341 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 732417"];
5342 [label="param DiagnosticDescription(this) 732418"];
5343 [label="_code 732419"];
5344 [label="_isWarningAsError 732420"];
5345 [label="_isSuppressed 732421"];
5346 [label="_squiggledText 732422"];
5347 [label="_arguments 732423"];
5348 [label="_startPosition 732424"];
5349 [label="_argumentOrderDoesNotMatter 732425"];
5350 [label="_errorCodeType 732426"];
5351 [label="_defaultSeverityOpt 732427"];
5352 [label="_effectiveSeverityOpt 732428"];
5353 [label="_syntaxPredicate 732429"];
5354 [label="_code 732430"];
5355 [label="_isWarningAsError 732431"];
5356 [label="_isSuppressed 732432"];
5357 [label="_location 732433"];
5358 [label="includeDefaultSeverity 732434"];
5359 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 732435"];
5360 [label="_defaultSeverityOpt 732436"];
5361 [label="includeEffectiveSeverity 732437"];
5362 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 732438"];
5363 [label="_effectiveSeverityOpt 732439"];
5364 [label="DiagnosticWithInfo dinfo = null; 732440"];
5365 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 732441"];
5366 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 732442"];
5367 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 732443"];
5368 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 732444"];
5369 [label="dinfo = d as DiagnosticWithInfo; 732445"];
5370 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 732446"];
5371 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 732447"];
5372 [label="_errorCodeType 732448"];
5373 [label="_code 732449"];
5374 [label="_ignoreArgumentsWhenComparing 732450"];
5375 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 732451"];
5376 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 732452"];
5377 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 732453"];
5378 [label="_squiggledText 732454"];
5379 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 732455"];
5380 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 732456"];
5381 [label="_arguments 732457"];
5382 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732458"];
5383 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732459"];
5384 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732460"];
5385 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 732461"];
5386 [label="_startPosition 732462"];
5387 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 732463"];
5388 [label="_code 732464"];
5389 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732465"];
5390 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 732466"];
5391 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 732467"];
5392 [label="int index = unmatched.IndexOf(d); 732468"];
5393 [label="int index = unmatched.IndexOf(d); 732469"];
5394 [label="param Equals(object obj) 732470"];
5395 [label="param Equals(this) 732471"];
5396 [label="var d = obj as DiagnosticDescription; 732472"];
5397 [label="if (d == null)\n                return false; 732473"];
5398 [label="if (d == null)\n                return false; 732474"];
5399 [label="if (!_code.Equals(d._code))\n                return false; 732475"];
5400 [label="if (!_code.Equals(d._code))\n                return false; 732476"];
5401 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 732477"];
5402 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 732478"];
5403 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 732479"];
5404 [label="if (_squiggledText != d._squiggledText)\n                    return false; 732480"];
5405 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 732481"];
5406 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 732482"];
5407 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 732483"];
5408 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 732484"];
5409 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 732485"];
5410 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 732486"];
5411 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 732487"];
5412 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 732488"];
5413 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 732489"];
5414 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 732490"];
5415 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 732491"];
5416 [label="if (d._arguments == null)\n                    return false; 732492"];
5417 [label="GetArgumentsAsStrings() 732493"];
5418 [label="param GetArgumentsAsStrings(this) 732494"];
5419 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 732495"];
5420 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 732496"];
5421 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 732497"];
5422 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 732498"];
5423 [label="_argumentsAsStrings 732499"];
5424 [label="return _argumentsAsStrings; 732500"];
5425 [label="var args1 = GetArgumentsAsStrings(); 732501"];
5426 [label="d.GetArgumentsAsStrings() 732502"];
5427 [label="param GetArgumentsAsStrings(this) 732503"];
5428 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 732504"];
5429 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 732505"];
5430 [label="return _argumentsAsStrings; 732506"];
5431 [label="var args2 = d.GetArgumentsAsStrings(); 732507"];
5432 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 732508"];
5433 [label="if (!args1.SequenceEqual(args2))\n                        return false; 732509"];
5434 [label="if (!args1.SequenceEqual(args2))\n                        return false; 732510"];
5435 [label="if (!args1.SequenceEqual(args2))\n                        return false; 732511"];
5436 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 732512"];
5437 [label="return true; 732513"];
5438 [label="int index = unmatched.IndexOf(d); 732514"];
5439 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 732515"];
5440 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 732516"];
5441 [label="unmatched.RemoveAt(index); 732517"];
5442 [label="if (d == null)\n                return false; 732518"];
5443 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 732519"];
5444 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 732520"];
5445 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 732521"];
5446 [label="if (_squiggledText != d._squiggledText)\n                    return false; 732522"];
5447 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 732523"];
5448 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 732524"];
5449 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 732525"];
5450 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 732526"];
5451 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 732527"];
5452 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 732528"];
5453 [label="if (d._arguments == null)\n                    return false; 732529"];
5454 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 732530"];
5455 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 732531"];
5456 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 732532"];
5457 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 732533"];
5458 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 732534"];
5459 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 732535"];
5460 [label="DiagnosticDescription.GetAssertText(expected, actual) 732536"];
5461 [label="param GetAssertText(DiagnosticDescription[] expected) 732537"];
5462 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 732538"];
5463 [label="const int CSharp = 1; 732539"];
5464 [label="const int VisualBasic = 2; 732540"];
5465 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732541"];
5466 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732542"];
5467 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732543"];
5468 [label="actual.Any() && actual.First() is CSDiagnostic 732544"];
5469 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732545"];
5470 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 732546"];
5471 [label="int indentDepth = (language == CSharp) ? 4 : 1; 732547"];
5472 [label="(language == CSharp) 732548"];
5473 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 732549"];
5474 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 732550"];
5475 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 732551"];
5476 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 732552"];
5477 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 732553"];
5478 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 732554"];
5479 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 732555"];
5480 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 732556"];
5481 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 732557"];
5482 [label="IsSortedOrEmpty(expected) 732558"];
5483 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 732559"];
5484 [label="new LinePositionComparer() 732560"];
5485 [label="param LinePositionComparer(this) 732561"];
5486 [label="Instance = new LinePositionComparer() 732562"];
5487 [label="var comparer = LinePositionComparer.Instance; 732563"];
5488 [label="DiagnosticDescription last = null; 732564"];
5489 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 732565"];
5490 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 732566"];
5491 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 732567"];
5492 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 732568"];
5493 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 732569"];
5494 [label="last = diagnostic; 732570"];
5495 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 732571"];
5496 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 732572"];
5497 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 732573"];
5498 [label="comparer.Compare(last._startPosition, diagnostic._startPosition) 732574"];
5499 [label="param Compare(LinePosition? x) 732575"];
5500 [label="param Compare(LinePosition? y) 732576"];
5501 [label="param Compare(this) 732577"];
5502 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 732578"];
5503 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 732579"];
5504 [label="if (y == null)\n                {\n                    return 1;\n                } 732580"];
5505 [label="if (y == null)\n                {\n                    return 1;\n                } 732581"];
5506 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732582"];
5507 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732583"];
5508 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 732584"];
5509 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 732585"];
5510 [label="return lineDiff; 732586"];
5511 [label="return true; 732587"];
5512 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 732588"];
5513 [label="actual = Sort(actual); 732589"];
5514 [label="Sort(actual) 732590"];
5515 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 732591"];
5516 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732592"];
5517 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732593"];
5518 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732594"];
5519 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732595"];
5520 [label="var assertText = new StringBuilder(); 732596"];
5521 [label="assertText.AppendLine(); 732597"];
5522 [label="int i; 732598"];
5523 [label="assertText.AppendLine('Expected:'); 732599"];
5524 [label="assertText.AppendLine('Expected:'); 732600"];
5525 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 732601"];
5526 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 732602"];
5527 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 732603"];
5528 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732604"];
5529 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732605"];
5530 [label="GetDiagnosticDescription(d, indentDepth) 732606"];
5531 [label="param GetDiagnosticDescription(DiagnosticDescription d) 732607"];
5532 [label="param GetDiagnosticDescription(int indentDepth) 732608"];
5533 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732609"];
5534 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732610"];
5535 [label="d.ToString() 732611"];
5536 [label="param ToString(this) 732612"];
5537 [label="var sb = new StringBuilder(); 732613"];
5538 [label="sb.Append('Diagnostic('); 732614"];
5539 [label="sb.Append('Diagnostic('); 732615"];
5540 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732616"];
5541 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732617"];
5542 [label="sb.Append(_errorCodeType.Name); 732618"];
5543 [label="sb.Append(_errorCodeType.Name); 732619"];
5544 [label="sb.Append('.'); 732620"];
5545 [label="sb.Append('.'); 732621"];
5546 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732622"];
5547 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732623"];
5548 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732624"];
5549 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732625"];
5550 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 732626"];
5551 [label="sb.Append(', \\''); 732627"];
5552 [label="sb.Append(', \\''); 732628"];
5553 [label="sb.Append(_squiggledText); 732629"];
5554 [label="sb.Append(_squiggledText); 732630"];
5555 [label="sb.Append('''); 732631"];
5556 [label="sb.Append('''); 732632"];
5557 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 732633"];
5558 [label="sb.Append(')'); 732634"];
5559 [label="sb.Append(')'); 732635"];
5560 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 732636"];
5561 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 732637"];
5562 [label="sb.Append('.WithArguments('); 732638"];
5563 [label="sb.Append('.WithArguments('); 732639"];
5564 [label="GetArgumentsAsStrings() 732640"];
5565 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 732641"];
5566 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 732642"];
5567 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 732643"];
5568 [label="sb.Append('\\''); 732644"];
5569 [label="sb.Append('\\''); 732645"];
5570 [label="sb.Append(argumentStrings.Current); 732646"];
5571 [label="sb.Append(argumentStrings.Current); 732647"];
5572 [label="sb.Append('\\''); 732648"];
5573 [label="sb.Append('\\''); 732649"];
5574 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 732650"];
5575 [label="sb.Append(', '); 732651"];
5576 [label="sb.Append(', '); 732652"];
5577 [label="sb.Append(')'); 732653"];
5578 [label="sb.Append(')'); 732654"];
5579 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732655"];
5580 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732656"];
5581 [label="sb.Append('.WithLocation('); 732657"];
5582 [label="sb.Append('.WithLocation('); 732658"];
5583 [label="sb.Append(_startPosition.Value.Line + 1); 732659"];
5584 [label="sb.Append(_startPosition.Value.Line + 1); 732660"];
5585 [label="sb.Append(', '); 732661"];
5586 [label="sb.Append(', '); 732662"];
5587 [label="sb.Append(_startPosition.Value.Character + 1); 732663"];
5588 [label="sb.Append(_startPosition.Value.Character + 1); 732664"];
5589 [label="sb.Append(')'); 732665"];
5590 [label="sb.Append(')'); 732666"];
5591 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 732667"];
5592 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732668"];
5593 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732669"];
5594 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732670"];
5595 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732671"];
5596 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732672"];
5597 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732673"];
5598 [label="return sb.ToString(); 732674"];
5599 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732675"];
5600 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732676"];
5601 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732677"];
5602 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732678"];
5603 [label="param GetDiagnosticDescription(int indentDepth) 732679"];
5604 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732680"];
5605 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732681"];
5606 [label="var sb = new StringBuilder(); 732682"];
5607 [label="sb.Append('Diagnostic('); 732683"];
5608 [label="sb.Append('Diagnostic('); 732684"];
5609 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732685"];
5610 [label="sb.Append(_errorCodeType.Name); 732686"];
5611 [label="sb.Append(_errorCodeType.Name); 732687"];
5612 [label="sb.Append('.'); 732688"];
5613 [label="sb.Append('.'); 732689"];
5614 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732690"];
5615 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732691"];
5616 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732692"];
5617 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 732693"];
5618 [label="sb.Append(', \\''); 732694"];
5619 [label="sb.Append(', \\''); 732695"];
5620 [label="sb.Append(_squiggledText); 732696"];
5621 [label="sb.Append(_squiggledText); 732697"];
5622 [label="sb.Append('''); 732698"];
5623 [label="sb.Append('''); 732699"];
5624 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 732700"];
5625 [label="sb.Append(')'); 732701"];
5626 [label="sb.Append(')'); 732702"];
5627 [label="sb.Append('.WithArguments('); 732703"];
5628 [label="sb.Append('.WithArguments('); 732704"];
5629 [label="sb.Append('\\''); 732705"];
5630 [label="sb.Append(argumentStrings.Current); 732706"];
5631 [label="sb.Append(argumentStrings.Current); 732707"];
5632 [label="sb.Append('\\''); 732708"];
5633 [label="sb.Append(', '); 732709"];
5634 [label="sb.Append(')'); 732710"];
5635 [label="sb.Append(')'); 732711"];
5636 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732712"];
5637 [label="sb.Append('.WithLocation('); 732713"];
5638 [label="sb.Append('.WithLocation('); 732714"];
5639 [label="sb.Append(_startPosition.Value.Line + 1); 732715"];
5640 [label="sb.Append(_startPosition.Value.Line + 1); 732716"];
5641 [label="sb.Append(', '); 732717"];
5642 [label="sb.Append(', '); 732718"];
5643 [label="sb.Append(_startPosition.Value.Character + 1); 732719"];
5644 [label="sb.Append(_startPosition.Value.Character + 1); 732720"];
5645 [label="sb.Append(')'); 732721"];
5646 [label="sb.Append(')'); 732722"];
5647 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 732723"];
5648 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732724"];
5649 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732725"];
5650 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732726"];
5651 [label="return sb.ToString(); 732727"];
5652 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732728"];
5653 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732729"];
5654 [label="GetCommaSeparatedLines(assertText, expectedText); 732730"];
5655 [label="GetCommaSeparatedLines(assertText, expectedText); 732731"];
5656 [label="GetCommaSeparatedLines(assertText, expectedText) 732732"];
5657 [label="param GetCommaSeparatedLines(StringBuilder sb) 732733"];
5658 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 732734"];
5659 [label="int n = lines.Count; 732735"];
5660 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 732736"];
5661 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 732737"];
5662 [label="sb.Append(lines[i]); 732738"];
5663 [label="sb.Append(lines[i]); 732739"];
5664 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 732740"];
5665 [label="sb.Append(','); 732741"];
5666 [label="sb.Append(','); 732742"];
5667 [label="sb.AppendLine(); 732743"];
5668 [label="GetCommaSeparatedLines(assertText, expectedText); 732744"];
5669 [label="assertText.AppendLine('Actual:'); 732745"];
5670 [label="assertText.AppendLine('Actual:'); 732746"];
5671 [label="var actualText = ArrayBuilder<string>.GetInstance(); 732747"];
5672 [label="var e = actual.GetEnumerator(); 732748"];
5673 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 732749"];
5674 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 732750"];
5675 [label="param Compare(LinePosition? x) 732751"];
5676 [label="param Compare(LinePosition? y) 732752"];
5677 [label="param Compare(this) 732753"];
5678 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 732754"];
5679 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 732755"];
5680 [label="if (y == null)\n                {\n                    return 1;\n                } 732756"];
5681 [label="if (y == null)\n                {\n                    return 1;\n                } 732757"];
5682 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732758"];
5683 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732759"];
5684 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 732760"];
5685 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 732761"];
5686 [label="return x.Value.Character.CompareTo(y.Value.Character); 732762"];
5687 [label="return x.Value.Character.CompareTo(y.Value.Character); 732763"];
5688 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732764"];
5689 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 732765"];
5690 [label="return lineDiff; 732766"];
5691 [label="Diagnostic d = e.Current; 732767"];
5692 [label="string message = d.ToString(); 732768"];
5693 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 732769"];
5694 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 732770"];
5695 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 732771"];
5696 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 732772"];
5697 [label="Indent(assertText, indentDepth); 732773"];
5698 [label="Indent(assertText, indentDepth); 732774"];
5699 [label="Indent(assertText, indentDepth) 732775"];
5700 [label="param Indent(StringBuilder sb) 732776"];
5701 [label="param Indent(int count) 732777"];
5702 [label="sb.Append(' ', 4 * count); 732778"];
5703 [label="sb.Append(' ', 4 * count); 732779"];
5704 [label="sb.Append(' ', 4 * count); 732780"];
5705 [label="Indent(assertText, indentDepth); 732781"];
5706 [label="assertText.Append('// '); 732782"];
5707 [label="assertText.Append('// '); 732783"];
5708 [label="assertText.AppendLine(d.ToString()); 732784"];
5709 [label="assertText.AppendLine(d.ToString()); 732785"];
5710 [label="var l = d.Location; 732786"];
5711 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 732787"];
5712 [label="Indent(assertText, indentDepth); 732788"];
5713 [label="Indent(assertText, indentDepth); 732789"];
5714 [label="Indent(assertText, indentDepth) 732790"];
5715 [label="param Indent(StringBuilder sb) 732791"];
5716 [label="param Indent(int count) 732792"];
5717 [label="sb.Append(' ', 4 * count); 732793"];
5718 [label="sb.Append(' ', 4 * count); 732794"];
5719 [label="sb.Append(' ', 4 * count); 732795"];
5720 [label="Indent(assertText, indentDepth); 732796"];
5721 [label="assertText.Append('// '); 732797"];
5722 [label="assertText.Append('// '); 732798"];
5723 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 732799"];
5724 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 732800"];
5725 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732801"];
5726 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732802"];
5727 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732803"];
5728 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732804"];
5729 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 732805"];
5730 [label="param DiagnosticDescription(Diagnostic d) 732806"];
5731 [label="param DiagnosticDescription(bool errorCodeOnly) 732807"];
5732 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 732808"];
5733 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 732809"];
5734 [label="param DiagnosticDescription(this) 732810"];
5735 [label="_code 732811"];
5736 [label="_isWarningAsError 732812"];
5737 [label="_isSuppressed 732813"];
5738 [label="_squiggledText 732814"];
5739 [label="_arguments 732815"];
5740 [label="_startPosition 732816"];
5741 [label="_errorCodeType 732817"];
5742 [label="_defaultSeverityOpt 732818"];
5743 [label="_effectiveSeverityOpt 732819"];
5744 [label="_code 732820"];
5745 [label="_isWarningAsError 732821"];
5746 [label="_isSuppressed 732822"];
5747 [label="_location 732823"];
5748 [label="DiagnosticWithInfo dinfo = null; 732824"];
5749 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 732825"];
5750 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732826"];
5751 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732827"];
5752 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 732828"];
5753 [label="var diffDescription = description; 732829"];
5754 [label="var idx = Array.IndexOf(expected, description); 732830"];
5755 [label="var idx = Array.IndexOf(expected, description); 732831"];
5756 [label="var idx = Array.IndexOf(expected, description); 732832"];
5757 [label="var idx = Array.IndexOf(expected, description); 732833"];
5758 [label="if (d == null)\n                return false; 732834"];
5759 [label="if (d == null)\n                return false; 732835"];
5760 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 732836"];
5761 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 732837"];
5762 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 732838"];
5763 [label="if (_squiggledText != d._squiggledText)\n                    return false; 732839"];
5764 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 732840"];
5765 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 732841"];
5766 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 732842"];
5767 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 732843"];
5768 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 732844"];
5769 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 732845"];
5770 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 732846"];
5771 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 732847"];
5772 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 732848"];
5773 [label="if (d._arguments == null)\n                    return false; 732849"];
5774 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 732850"];
5775 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 732851"];
5776 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 732852"];
5777 [label="diffDescription = expected[idx]; 732853"];
5778 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 732854"];
5779 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 732855"];
5780 [label="GetDiagnosticDescription(description, indentDepth) 732856"];
5781 [label="param GetDiagnosticDescription(DiagnosticDescription d) 732857"];
5782 [label="param GetDiagnosticDescription(int indentDepth) 732858"];
5783 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732859"];
5784 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732860"];
5785 [label="var sb = new StringBuilder(); 732861"];
5786 [label="sb.Append('Diagnostic('); 732862"];
5787 [label="sb.Append('Diagnostic('); 732863"];
5788 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732864"];
5789 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732865"];
5790 [label="sb.Append(_errorCodeType.Name); 732866"];
5791 [label="sb.Append(_errorCodeType.Name); 732867"];
5792 [label="sb.Append('.'); 732868"];
5793 [label="sb.Append('.'); 732869"];
5794 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732870"];
5795 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732871"];
5796 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732872"];
5797 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732873"];
5798 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 732874"];
5799 [label="sb.Append(', \\''); 732875"];
5800 [label="sb.Append(', \\''); 732876"];
5801 [label="sb.Append(_squiggledText); 732877"];
5802 [label="sb.Append(_squiggledText); 732878"];
5803 [label="sb.Append('''); 732879"];
5804 [label="sb.Append('''); 732880"];
5805 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 732881"];
5806 [label="sb.Append(')'); 732882"];
5807 [label="sb.Append(')'); 732883"];
5808 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 732884"];
5809 [label="sb.Append('.WithArguments('); 732885"];
5810 [label="sb.Append('.WithArguments('); 732886"];
5811 [label="sb.Append('\\''); 732887"];
5812 [label="sb.Append('\\''); 732888"];
5813 [label="sb.Append(argumentStrings.Current); 732889"];
5814 [label="sb.Append(argumentStrings.Current); 732890"];
5815 [label="sb.Append('\\''); 732891"];
5816 [label="sb.Append('\\''); 732892"];
5817 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 732893"];
5818 [label="sb.Append(', '); 732894"];
5819 [label="sb.Append(', '); 732895"];
5820 [label="sb.Append(')'); 732896"];
5821 [label="sb.Append(')'); 732897"];
5822 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732898"];
5823 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732899"];
5824 [label="sb.Append('.WithLocation('); 732900"];
5825 [label="sb.Append('.WithLocation('); 732901"];
5826 [label="sb.Append(_startPosition.Value.Line + 1); 732902"];
5827 [label="sb.Append(_startPosition.Value.Line + 1); 732903"];
5828 [label="sb.Append(', '); 732904"];
5829 [label="sb.Append(', '); 732905"];
5830 [label="sb.Append(_startPosition.Value.Character + 1); 732906"];
5831 [label="sb.Append(_startPosition.Value.Character + 1); 732907"];
5832 [label="sb.Append(')'); 732908"];
5833 [label="sb.Append(')'); 732909"];
5834 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 732910"];
5835 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732911"];
5836 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732912"];
5837 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732913"];
5838 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732914"];
5839 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732915"];
5840 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732916"];
5841 [label="return sb.ToString(); 732917"];
5842 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732918"];
5843 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732919"];
5844 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 732920"];
5845 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 732921"];
5846 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 732922"];
5847 [label="GetDiagnosticDescription(diffDescription, indentDepth) 732923"];
5848 [label="param GetDiagnosticDescription(DiagnosticDescription d) 732924"];
5849 [label="param GetDiagnosticDescription(int indentDepth) 732925"];
5850 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732926"];
5851 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732927"];
5852 [label="var sb = new StringBuilder(); 732928"];
5853 [label="sb.Append('Diagnostic('); 732929"];
5854 [label="sb.Append('Diagnostic('); 732930"];
5855 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732931"];
5856 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 732932"];
5857 [label="sb.Append(_errorCodeType.Name); 732933"];
5858 [label="sb.Append(_errorCodeType.Name); 732934"];
5859 [label="sb.Append('.'); 732935"];
5860 [label="sb.Append('.'); 732936"];
5861 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732937"];
5862 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732938"];
5863 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732939"];
5864 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 732940"];
5865 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 732941"];
5866 [label="sb.Append(', \\''); 732942"];
5867 [label="sb.Append(', \\''); 732943"];
5868 [label="sb.Append(_squiggledText); 732944"];
5869 [label="sb.Append(_squiggledText); 732945"];
5870 [label="sb.Append('''); 732946"];
5871 [label="sb.Append('''); 732947"];
5872 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 732948"];
5873 [label="sb.Append(')'); 732949"];
5874 [label="sb.Append(')'); 732950"];
5875 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 732951"];
5876 [label="sb.Append('.WithArguments('); 732952"];
5877 [label="sb.Append('.WithArguments('); 732953"];
5878 [label="sb.Append('\\''); 732954"];
5879 [label="sb.Append('\\''); 732955"];
5880 [label="sb.Append(argumentStrings.Current); 732956"];
5881 [label="sb.Append(argumentStrings.Current); 732957"];
5882 [label="sb.Append('\\''); 732958"];
5883 [label="sb.Append('\\''); 732959"];
5884 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 732960"];
5885 [label="sb.Append(', '); 732961"];
5886 [label="sb.Append(', '); 732962"];
5887 [label="sb.Append(')'); 732963"];
5888 [label="sb.Append(')'); 732964"];
5889 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732965"];
5890 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 732966"];
5891 [label="sb.Append('.WithLocation('); 732967"];
5892 [label="sb.Append('.WithLocation('); 732968"];
5893 [label="sb.Append(_startPosition.Value.Line + 1); 732969"];
5894 [label="sb.Append(_startPosition.Value.Line + 1); 732970"];
5895 [label="sb.Append(', '); 732971"];
5896 [label="sb.Append(', '); 732972"];
5897 [label="sb.Append(_startPosition.Value.Character + 1); 732973"];
5898 [label="sb.Append(_startPosition.Value.Character + 1); 732974"];
5899 [label="sb.Append(')'); 732975"];
5900 [label="sb.Append(')'); 732976"];
5901 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 732977"];
5902 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732978"];
5903 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 732979"];
5904 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732980"];
5905 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 732981"];
5906 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732982"];
5907 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 732983"];
5908 [label="return sb.ToString(); 732984"];
5909 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732985"];
5910 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 732986"];
5911 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 732987"];
5912 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 732988"];
5913 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 732989"];
5914 [label="assertText.AppendLine(','); 732990"];
5915 [label="assertText.AppendLine(','); 732991"];
5916 [label="Indent(assertText, indentDepth); 732992"];
5917 [label="Indent(assertText, indentDepth); 732993"];
5918 [label="Indent(assertText, indentDepth) 732994"];
5919 [label="param Indent(StringBuilder sb) 732995"];
5920 [label="param Indent(int count) 732996"];
5921 [label="sb.Append(' ', 4 * count); 732997"];
5922 [label="sb.Append(' ', 4 * count); 732998"];
5923 [label="Indent(assertText, indentDepth); 732999"];
5924 [label="assertText.Append('// '); 733000"];
5925 [label="Indent(assertText, indentDepth); 733001"];
5926 [label="Indent(assertText, indentDepth); 733002"];
5927 [label="Indent(assertText, indentDepth) 733003"];
5928 [label="param Indent(StringBuilder sb) 733004"];
5929 [label="param Indent(int count) 733005"];
5930 [label="sb.Append(' ', 4 * count); 733006"];
5931 [label="sb.Append(' ', 4 * count); 733007"];
5932 [label="Indent(assertText, indentDepth); 733008"];
5933 [label="assertText.Append('// '); 733009"];
5934 [label="_code 733010"];
5935 [label="_isWarningAsError 733011"];
5936 [label="_isSuppressed 733012"];
5937 [label="_squiggledText 733013"];
5938 [label="_arguments 733014"];
5939 [label="_startPosition 733015"];
5940 [label="_errorCodeType 733016"];
5941 [label="_defaultSeverityOpt 733017"];
5942 [label="_effectiveSeverityOpt 733018"];
5943 [label="_code 733019"];
5944 [label="DiagnosticWithInfo dinfo = null; 733020"];
5945 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 733021"];
5946 [label="var diffDescription = description; 733022"];
5947 [label="if (d == null)\n                return false; 733023"];
5948 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 733024"];
5949 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 733025"];
5950 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 733026"];
5951 [label="if (_squiggledText != d._squiggledText)\n                    return false; 733027"];
5952 [label="return false; 733028"];
5953 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 733029"];
5954 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 733030"];
5955 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 733031"];
5956 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 733032"];
5957 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 733033"];
5958 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 733034"];
5959 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 733035"];
5960 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 733036"];
5961 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 733037"];
5962 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 733038"];
5963 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 733039"];
5964 [label="if (d._arguments == null)\n                    return false; 733040"];
5965 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 733041"];
5966 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 733042"];
5967 [label="param GetDiagnosticDescription(int indentDepth) 733043"];
5968 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733044"];
5969 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733045"];
5970 [label="var sb = new StringBuilder(); 733046"];
5971 [label="sb.Append('Diagnostic('); 733047"];
5972 [label="sb.Append('Diagnostic('); 733048"];
5973 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 733049"];
5974 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 733050"];
5975 [label="sb.Append(_errorCodeType.Name); 733051"];
5976 [label="sb.Append(_errorCodeType.Name); 733052"];
5977 [label="sb.Append('.'); 733053"];
5978 [label="sb.Append('.'); 733054"];
5979 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733055"];
5980 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733056"];
5981 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 733057"];
5982 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 733058"];
5983 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 733059"];
5984 [label="sb.Append(', \\''); 733060"];
5985 [label="sb.Append(', \\''); 733061"];
5986 [label="sb.Append(_squiggledText); 733062"];
5987 [label="sb.Append(_squiggledText); 733063"];
5988 [label="sb.Append('''); 733064"];
5989 [label="sb.Append('''); 733065"];
5990 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 733066"];
5991 [label="sb.Append(')'); 733067"];
5992 [label="sb.Append(')'); 733068"];
5993 [label="sb.Append('.WithArguments('); 733069"];
5994 [label="sb.Append('.WithArguments('); 733070"];
5995 [label="sb.Append('\\''); 733071"];
5996 [label="sb.Append('\\''); 733072"];
5997 [label="sb.Append(argumentStrings.Current); 733073"];
5998 [label="sb.Append(argumentStrings.Current); 733074"];
5999 [label="sb.Append('\\''); 733075"];
6000 [label="sb.Append('\\''); 733076"];
6001 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 733077"];
6002 [label="sb.Append(', '); 733078"];
6003 [label="sb.Append(', '); 733079"];
6004 [label="sb.Append(')'); 733080"];
6005 [label="sb.Append(')'); 733081"];
6006 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 733082"];
6007 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 733083"];
6008 [label="sb.Append('.WithLocation('); 733084"];
6009 [label="sb.Append('.WithLocation('); 733085"];
6010 [label="sb.Append(_startPosition.Value.Line + 1); 733086"];
6011 [label="sb.Append(_startPosition.Value.Line + 1); 733087"];
6012 [label="sb.Append(', '); 733088"];
6013 [label="sb.Append(', '); 733089"];
6014 [label="sb.Append(_startPosition.Value.Character + 1); 733090"];
6015 [label="sb.Append(_startPosition.Value.Character + 1); 733091"];
6016 [label="sb.Append(')'); 733092"];
6017 [label="sb.Append(')'); 733093"];
6018 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 733094"];
6019 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 733095"];
6020 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 733096"];
6021 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 733097"];
6022 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 733098"];
6023 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 733099"];
6024 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 733100"];
6025 [label="return sb.ToString(); 733101"];
6026 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733102"];
6027 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733103"];
6028 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 733104"];
6029 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 733105"];
6030 [label="param GetDiagnosticDescription(int indentDepth) 733106"];
6031 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733107"];
6032 [label="sb.Append(_errorCodeType.Name); 733108"];
6033 [label="sb.Append(_errorCodeType.Name); 733109"];
6034 [label="sb.Append('.'); 733110"];
6035 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733111"];
6036 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733112"];
6037 [label="sb.Append(', \\''); 733113"];
6038 [label="sb.Append(_squiggledText); 733114"];
6039 [label="sb.Append(_squiggledText); 733115"];
6040 [label="sb.Append('''); 733116"];
6041 [label="sb.Append(')'); 733117"];
6042 [label="sb.Append('.WithArguments('); 733118"];
6043 [label="sb.Append('\\''); 733119"];
6044 [label="sb.Append(argumentStrings.Current); 733120"];
6045 [label="sb.Append('\\''); 733121"];
6046 [label="sb.Append(', '); 733122"];
6047 [label="sb.Append(')'); 733123"];
6048 [label="sb.Append('.WithLocation('); 733124"];
6049 [label="sb.Append(_startPosition.Value.Line + 1); 733125"];
6050 [label="sb.Append(', '); 733126"];
6051 [label="sb.Append(_startPosition.Value.Character + 1); 733127"];
6052 [label="sb.Append(')'); 733128"];
6053 [label="return sb.ToString(); 733129"];
6054 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733130"];
6055 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 733131"];
6056 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 733132"];
6057 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 733133"];
6058 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 733134"];
6059 [label="assertText.AppendLine(); 733135"];
6060 [label="assertText.AppendLine('Diff:'); 733136"];
6061 [label="assertText.AppendLine('Diff:'); 733137"];
6062 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733138"];
6063 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733139"];
6064 [label="new[] { '\\r', '\\n' } 733140"];
6065 [label="'\\r' 733141"];
6066 [label="'\\n' 733142"];
6067 [label="new[] { '\\r', '\\n' } 733143"];
6068 [label="new[] { '\\r', '\\n' } 733144"];
6069 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 733145"];
6070 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733146"];
6071 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733147"];
6072 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 733148"];
6073 [label="param DiffReport(IEnumerable<T> expected) 733149"];
6074 [label="param DiffReport(IEnumerable<T> actual) 733150"];
6075 [label="param DiffReport(string separator) 733151"];
6076 [label="param DiffReport(IEqualityComparer<T> comparer = null) 733152"];
6077 [label="param DiffReport(Func<T, string> toString = null) 733153"];
6078 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 733154"];
6079 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 733155"];
6080 [label="(comparer != null) 733156"];
6081 [label="EqualityComparer<T>.Default 733157"];
6082 [label="new LCS<T>(EqualityComparer<T>.Default) 733158"];
6083 [label="param LCS(IEqualityComparer<T> comparer) 733159"];
6084 [label="param LCS(this) 733160"];
6085 [label="1 733161"];
6086 [label="DeleteCost = 1 733162"];
6087 [label="1 733163"];
6088 [label="InsertCost = 1 733164"];
6089 [label="2 733165"];
6090 [label="UpdateCost = 2 733166"];
6091 [label="param LongestCommonSubsequence(this) 733167"];
6092 [label="_comparer 733168"];
6093 [label="_comparer 733169"];
6094 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 733170"];
6095 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 733171"];
6096 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 733172"];
6097 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 733173"];
6098 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 733174"];
6099 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733175"];
6100 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733176"];
6101 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733177"];
6102 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733178"];
6103 [label="lcs.CalculateDiff(expectedList, actualList, toString) 733179"];
6104 [label="param CalculateDiff(IList<T> sequenceA) 733180"];
6105 [label="param CalculateDiff(IList<T> sequenceB) 733181"];
6106 [label="param CalculateDiff(Func<T, string> toString) 733182"];
6107 [label="param CalculateDiff(this) 733183"];
6108 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 733184"];
6109 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 733185"];
6110 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 733186"];
6111 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 733187"];
6112 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 733188"];
6113 [label="param GetEdits(TSequence sequenceA) 733189"];
6114 [label="param GetEdits(int lengthA) 733190"];
6115 [label="param GetEdits(TSequence sequenceB) 733191"];
6116 [label="param GetEdits(int lengthB) 733192"];
6117 [label="param GetEdits(this) 733193"];
6118 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733194"];
6119 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733195"];
6120 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733196"];
6121 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733197"];
6122 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 733198"];
6123 [label="param ComputeCostMatrix(TSequence sequenceA) 733199"];
6124 [label="param ComputeCostMatrix(int lengthA) 733200"];
6125 [label="param ComputeCostMatrix(TSequence sequenceB) 733201"];
6126 [label="param ComputeCostMatrix(int lengthB) 733202"];
6127 [label="param ComputeCostMatrix(this) 733203"];
6128 [label="var la = lengthA + 1; 733204"];
6129 [label="var la = lengthA + 1; 733205"];
6130 [label="var lb = lengthB + 1; 733206"];
6131 [label="var lb = lengthB + 1; 733207"];
6132 [label="var d = new int[la, lb]; 733208"];
6133 [label="d[0, 0] = 0; 733209"];
6134 [label="d[0, 0] 733210"];
6135 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 733211"];
6136 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 733212"];
6137 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 733213"];
6138 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 733214"];
6139 [label="d[i, 0] 733215"];
6140 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 733216"];
6141 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 733217"];
6142 [label="d[0, j] = d[0, j - 1] + InsertCost; 733218"];
6143 [label="d[0, j] = d[0, j - 1] + InsertCost; 733219"];
6144 [label="d[0, j] 733220"];
6145 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 733221"];
6146 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 733222"];
6147 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 733223"];
6148 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 733224"];
6149 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733225"];
6150 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733226"];
6151 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733227"];
6152 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733228"];
6153 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 733229"];
6154 [label="param ItemsEqual(IList<T> sequenceA) 733230"];
6155 [label="param ItemsEqual(int indexA) 733231"];
6156 [label="param ItemsEqual(IList<T> sequenceB) 733232"];
6157 [label="param ItemsEqual(int indexB) 733233"];
6158 [label="param ItemsEqual(this) 733234"];
6159 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 733235"];
6160 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 733236"];
6161 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 733237"];
6162 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733238"];
6163 [label="int m2 = d[i - 1, j] + DeleteCost; 733239"];
6164 [label="int m2 = d[i - 1, j] + DeleteCost; 733240"];
6165 [label="int m3 = d[i, j - 1] + InsertCost; 733241"];
6166 [label="int m3 = d[i, j - 1] + InsertCost; 733242"];
6167 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733243"];
6168 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733244"];
6169 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733245"];
6170 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733246"];
6171 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733247"];
6172 [label="d[i, j] 733248"];
6173 [label="return d; 733249"];
6174 [label="int i = lengthA; 733250"];
6175 [label="int j = lengthB; 733251"];
6176 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 733252"];
6177 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 733253"];
6178 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 733254"];
6179 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 733255"];
6180 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 733256"];
6181 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 733257"];
6182 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 733258"];
6183 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 733259"];
6184 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 733260"];
6185 [label="i--; 733261"];
6186 [label="j--; 733262"];
6187 [label="yield return new Edit(EditKind.Update, i, j); 733263"];
6188 [label="yield return new Edit(EditKind.Update, i, j); 733264"];
6189 [label="yield return new Edit(EditKind.Update, i, j); 733265"];
6190 [label="yield return new Edit(EditKind.Update, i, j); 733266"];
6191 [label="new Edit(EditKind.Update, i, j) 733267"];
6192 [label="param Edit(EditKind kind) 733268"];
6193 [label="param Edit(int indexA) 733269"];
6194 [label="param Edit(int indexB) 733270"];
6195 [label="param Edit(this) 733271"];
6196 [label="this.Kind 733272"];
6197 [label="this.IndexA 733273"];
6198 [label="this.IndexB 733274"];
6199 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 733275"];
6200 [label="yield return new Edit(EditKind.Update, i, j); 733276"];
6201 [label="yield return new Edit(EditKind.Update, i, j); 733277"];
6202 [label="new Edit(EditKind.Update, i, j) 733278"];
6203 [label="param Edit(EditKind kind) 733279"];
6204 [label="param Edit(int indexA) 733280"];
6205 [label="param Edit(int indexB) 733281"];
6206 [label="param Edit(this) 733282"];
6207 [label="this.Kind 733283"];
6208 [label="this.IndexA 733284"];
6209 [label="this.IndexB 733285"];
6210 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 733286"];
6211 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 733287"];
6212 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 733288"];
6213 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 733289"];
6214 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 733290"];
6215 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 733291"];
6216 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 733292"];
6217 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 733293"];
6218 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 733294"];
6219 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733295"];
6220 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733296"];
6221 [label="actualText.Free(); 733297"];
6222 [label="expectedText.Free(); 733298"];
6223 [label="return assertText.ToString(); 733299"];
6224 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 733300"];
6225 [label="diagnostics.Verify(expected); 733301"];
6226 [label="VerifyAssemblyIds(c, diagnostics); 733302"];
6227 [label="VerifyAssemblyIds(c, diagnostics); 733303"];
6228 [label="VerifyAssemblyIds(c, diagnostics) 733304"];
6229 [label="param VerifyAssemblyIds(TCompilation c) 733305"];
6230 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 733306"];
6231 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 733307"];
6232 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 733308"];
6233 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 733309"];
6234 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 733310"];
6235 [label="CustomAssert.True(assemblyIds.IsEmpty); 733311"];
6236 [label="CustomAssert.True(assemblyIds.IsEmpty); 733312"];
6237 [label="VerifyAssemblyIds(c, diagnostics); 733313"];
6238 [label="return c; 733314"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 573;
574 -> 1;
575 -> 1;
576 -> 0;
576 -> 1;
577 -> 1;
578 -> 576;
578 -> 577;
579 -> 575;
579 -> 577;
580 -> 575;
580 -> 577;
581 -> 575;
581 -> 577;
582 -> 575;
582 -> 577;
583 -> 575;
583 -> 577;
584 -> 575;
584 -> 577;
585 -> 578;
585 -> 577;
586 -> 579;
586 -> 577;
587 -> 580;
587 -> 577;
588 -> 581;
588 -> 577;
589 -> 582;
589 -> 577;
590 -> 583;
590 -> 577;
591 -> 584;
591 -> 577;
592 -> 577;
593 -> 585;
593 -> 592;
594 -> 586;
594 -> 592;
595 -> 587;
595 -> 592;
596 -> 588;
596 -> 592;
597 -> 589;
597 -> 592;
598 -> 590;
598 -> 592;
599 -> 591;
599 -> 592;
600 -> 593;
600 -> 592;
601 -> 593;
601 -> 592;
602 -> 592;
603 -> 594;
603 -> 592;
604 -> 595;
604 -> 592;
605 -> 596;
605 -> 592;
606 -> 597;
606 -> 592;
607 -> 598;
607 -> 592;
609 -> 608;
611 -> 610;
612 -> 599;
612 -> 592;
613 -> 592;
614 -> 601;
614 -> 613;
615 -> 602;
615 -> 613;
616 -> 603;
616 -> 613;
617 -> 604;
617 -> 613;
618 -> 605;
618 -> 613;
619 -> 606;
619 -> 613;
620 -> 607;
620 -> 613;
621 -> 601;
621 -> 613;
622 -> 612;
622 -> 613;
623 -> 602;
623 -> 613;
624 -> 602;
624 -> 613;
625 -> 602;
625 -> 613;
626 -> 625;
626 -> 613;
627 -> 625;
627 -> 613;
628 -> 625;
628 -> 613;
629 -> 625;
629 -> 613;
630 -> 625;
630 -> 613;
631 -> 625;
631 -> 613;
632 -> 625;
632 -> 613;
633 -> 625;
633 -> 613;
634 -> 625;
634 -> 613;
635 -> 625;
635 -> 613;
636 -> 625;
636 -> 613;
637 -> 625;
637 -> 613;
638 -> 625;
638 -> 613;
639 -> 625;
639 -> 613;
640 -> 625;
640 -> 613;
641 -> 614;
641 -> 625;
641 -> 613;
642 -> 615;
642 -> 625;
642 -> 613;
643 -> 616;
643 -> 625;
643 -> 613;
644 -> 617;
644 -> 625;
644 -> 613;
645 -> 618;
645 -> 625;
645 -> 613;
646 -> 619;
646 -> 625;
646 -> 613;
647 -> 620;
647 -> 625;
647 -> 613;
648 -> 621;
648 -> 613;
649 -> 648;
649 -> 625;
649 -> 613;
650 -> 622;
650 -> 625;
650 -> 613;
651 -> 623;
651 -> 625;
651 -> 613;
652 -> 624;
652 -> 625;
652 -> 613;
653 -> 602;
653 -> 577;
654 -> 653;
654 -> 1;
655 -> 575;
655 -> 1;
656 -> 1;
657 -> 575;
657 -> 656;
658 -> 654;
658 -> 656;
659 -> 658;
659 -> 641;
659 -> 656;
660 -> 658;
660 -> 642;
660 -> 656;
661 -> 658;
661 -> 643;
661 -> 656;
662 -> 657;
662 -> 656;
663 -> 658;
663 -> 645;
663 -> 656;
664 -> 658;
664 -> 646;
664 -> 656;
665 -> 656;
666 -> 658;
666 -> 649;
666 -> 656;
667 -> 658;
667 -> 650;
667 -> 656;
668 -> 658;
668 -> 651;
668 -> 656;
669 -> 658;
669 -> 652;
669 -> 656;
670 -> 656;
671 -> 659;
671 -> 670;
672 -> 660;
672 -> 670;
673 -> 661;
673 -> 670;
674 -> 662;
674 -> 670;
675 -> 663;
675 -> 670;
676 -> 664;
676 -> 670;
677 -> 665;
677 -> 670;
678 -> 666;
678 -> 670;
679 -> 667;
679 -> 670;
680 -> 668;
680 -> 670;
681 -> 669;
681 -> 670;
682 -> 665;
682 -> 670;
683 -> 682;
683 -> 670;
684 -> 682;
684 -> 670;
685 -> 682;
685 -> 670;
686 -> 682;
686 -> 670;
687 -> 682;
687 -> 670;
688 -> 682;
688 -> 670;
689 -> 682;
689 -> 670;
690 -> 682;
690 -> 670;
691 -> 682;
691 -> 670;
692 -> 682;
692 -> 670;
693 -> 682;
693 -> 670;
694 -> 682;
694 -> 670;
695 -> 682;
695 -> 670;
696 -> 682;
696 -> 670;
697 -> 682;
697 -> 670;
698 -> 674;
698 -> 682;
698 -> 670;
699 -> 677;
699 -> 682;
699 -> 670;
700 -> 665;
700 -> 1;
701 -> 1;
702 -> 575;
702 -> 701;
703 -> 575;
703 -> 701;
704 -> 700;
704 -> 701;
705 -> 704;
705 -> 671;
705 -> 701;
706 -> 704;
706 -> 672;
706 -> 701;
707 -> 704;
707 -> 673;
707 -> 701;
708 -> 704;
708 -> 698;
708 -> 701;
709 -> 701;
710 -> 702;
710 -> 709;
710 -> 701;
711 -> 703;
711 -> 709;
711 -> 701;
712 -> 710;
712 -> 711;
712 -> 701;
713 -> 704;
713 -> 676;
713 -> 701;
714 -> 704;
714 -> 699;
714 -> 701;
715 -> 704;
715 -> 678;
715 -> 701;
716 -> 704;
716 -> 679;
716 -> 701;
717 -> 704;
717 -> 680;
717 -> 701;
718 -> 704;
718 -> 681;
718 -> 701;
719 -> 701;
720 -> 705;
720 -> 719;
721 -> 706;
721 -> 719;
722 -> 707;
722 -> 719;
723 -> 708;
723 -> 719;
724 -> 712;
724 -> 719;
725 -> 713;
725 -> 719;
726 -> 714;
726 -> 719;
727 -> 715;
727 -> 719;
728 -> 716;
728 -> 719;
729 -> 717;
729 -> 719;
730 -> 718;
730 -> 719;
731 -> 709;
731 -> 719;
732 -> 731;
732 -> 719;
733 -> 731;
733 -> 719;
734 -> 731;
734 -> 719;
735 -> 731;
735 -> 719;
736 -> 731;
736 -> 719;
737 -> 731;
737 -> 719;
738 -> 731;
738 -> 719;
739 -> 731;
739 -> 719;
740 -> 731;
740 -> 719;
741 -> 731;
741 -> 719;
742 -> 731;
742 -> 719;
743 -> 731;
743 -> 719;
744 -> 731;
744 -> 719;
745 -> 731;
745 -> 719;
746 -> 731;
746 -> 719;
747 -> 724;
747 -> 731;
747 -> 719;
748 -> 709;
748 -> 1;
749 -> 1;
750 -> 576;
750 -> 749;
751 -> 575;
751 -> 749;
752 -> 575;
752 -> 749;
753 -> 575;
753 -> 749;
754 -> 575;
754 -> 749;
755 -> 575;
755 -> 749;
756 -> 575;
756 -> 749;
757 -> 750;
757 -> 749;
758 -> 751;
758 -> 749;
759 -> 752;
759 -> 749;
760 -> 753;
760 -> 749;
761 -> 754;
761 -> 749;
762 -> 755;
762 -> 749;
763 -> 756;
763 -> 749;
764 -> 749;
765 -> 757;
765 -> 764;
766 -> 758;
766 -> 764;
767 -> 759;
767 -> 764;
768 -> 760;
768 -> 764;
769 -> 761;
769 -> 764;
770 -> 762;
770 -> 764;
771 -> 763;
771 -> 764;
772 -> 765;
772 -> 764;
773 -> 765;
773 -> 764;
774 -> 764;
775 -> 766;
775 -> 764;
776 -> 767;
776 -> 764;
777 -> 768;
777 -> 764;
778 -> 769;
778 -> 764;
779 -> 770;
779 -> 764;
780 -> 771;
780 -> 764;
781 -> 764;
782 -> 773;
782 -> 781;
783 -> 774;
783 -> 781;
784 -> 775;
784 -> 781;
785 -> 776;
785 -> 781;
786 -> 777;
786 -> 781;
787 -> 778;
787 -> 781;
788 -> 779;
788 -> 781;
789 -> 773;
789 -> 781;
790 -> 780;
790 -> 781;
791 -> 774;
791 -> 781;
792 -> 774;
792 -> 781;
793 -> 774;
793 -> 781;
794 -> 793;
794 -> 781;
795 -> 793;
795 -> 781;
796 -> 793;
796 -> 781;
797 -> 793;
797 -> 781;
798 -> 793;
798 -> 781;
799 -> 793;
799 -> 781;
800 -> 793;
800 -> 781;
801 -> 793;
801 -> 781;
802 -> 793;
802 -> 781;
803 -> 793;
803 -> 781;
804 -> 793;
804 -> 781;
805 -> 793;
805 -> 781;
806 -> 793;
806 -> 781;
807 -> 793;
807 -> 781;
808 -> 793;
808 -> 781;
809 -> 782;
809 -> 793;
809 -> 781;
810 -> 783;
810 -> 793;
810 -> 781;
811 -> 784;
811 -> 793;
811 -> 781;
812 -> 785;
812 -> 793;
812 -> 781;
813 -> 786;
813 -> 793;
813 -> 781;
814 -> 787;
814 -> 793;
814 -> 781;
815 -> 788;
815 -> 793;
815 -> 781;
816 -> 789;
816 -> 781;
817 -> 816;
817 -> 793;
817 -> 781;
818 -> 790;
818 -> 793;
818 -> 781;
819 -> 791;
819 -> 793;
819 -> 781;
820 -> 792;
820 -> 793;
820 -> 781;
821 -> 774;
821 -> 749;
822 -> 821;
822 -> 1;
823 -> 575;
823 -> 1;
824 -> 1;
825 -> 575;
825 -> 824;
826 -> 822;
826 -> 824;
827 -> 826;
827 -> 809;
827 -> 824;
828 -> 826;
828 -> 810;
828 -> 824;
829 -> 826;
829 -> 811;
829 -> 824;
830 -> 825;
830 -> 824;
831 -> 826;
831 -> 813;
831 -> 824;
832 -> 826;
832 -> 814;
832 -> 824;
833 -> 824;
834 -> 826;
834 -> 817;
834 -> 824;
835 -> 826;
835 -> 818;
835 -> 824;
836 -> 826;
836 -> 819;
836 -> 824;
837 -> 826;
837 -> 820;
837 -> 824;
838 -> 824;
839 -> 827;
839 -> 838;
840 -> 828;
840 -> 838;
841 -> 829;
841 -> 838;
842 -> 830;
842 -> 838;
843 -> 831;
843 -> 838;
844 -> 832;
844 -> 838;
845 -> 833;
845 -> 838;
846 -> 834;
846 -> 838;
847 -> 835;
847 -> 838;
848 -> 836;
848 -> 838;
849 -> 837;
849 -> 838;
850 -> 833;
850 -> 838;
851 -> 850;
851 -> 838;
852 -> 850;
852 -> 838;
853 -> 850;
853 -> 838;
854 -> 850;
854 -> 838;
855 -> 850;
855 -> 838;
856 -> 850;
856 -> 838;
857 -> 850;
857 -> 838;
858 -> 850;
858 -> 838;
859 -> 850;
859 -> 838;
860 -> 850;
860 -> 838;
861 -> 850;
861 -> 838;
862 -> 850;
862 -> 838;
863 -> 850;
863 -> 838;
864 -> 850;
864 -> 838;
865 -> 850;
865 -> 838;
866 -> 842;
866 -> 850;
866 -> 838;
867 -> 845;
867 -> 850;
867 -> 838;
868 -> 833;
868 -> 1;
869 -> 1;
870 -> 575;
870 -> 869;
871 -> 575;
871 -> 869;
872 -> 868;
872 -> 869;
873 -> 872;
873 -> 839;
873 -> 869;
874 -> 872;
874 -> 840;
874 -> 869;
875 -> 872;
875 -> 841;
875 -> 869;
876 -> 872;
876 -> 866;
876 -> 869;
877 -> 869;
878 -> 870;
878 -> 877;
878 -> 869;
879 -> 871;
879 -> 877;
879 -> 869;
880 -> 878;
880 -> 879;
880 -> 869;
881 -> 872;
881 -> 844;
881 -> 869;
882 -> 872;
882 -> 867;
882 -> 869;
883 -> 872;
883 -> 846;
883 -> 869;
884 -> 872;
884 -> 847;
884 -> 869;
885 -> 872;
885 -> 848;
885 -> 869;
886 -> 872;
886 -> 849;
886 -> 869;
887 -> 869;
888 -> 873;
888 -> 887;
889 -> 874;
889 -> 887;
890 -> 875;
890 -> 887;
891 -> 876;
891 -> 887;
892 -> 880;
892 -> 887;
893 -> 881;
893 -> 887;
894 -> 882;
894 -> 887;
895 -> 883;
895 -> 887;
896 -> 884;
896 -> 887;
897 -> 885;
897 -> 887;
898 -> 886;
898 -> 887;
899 -> 877;
899 -> 887;
900 -> 899;
900 -> 887;
901 -> 899;
901 -> 887;
902 -> 899;
902 -> 887;
903 -> 899;
903 -> 887;
904 -> 899;
904 -> 887;
905 -> 899;
905 -> 887;
906 -> 899;
906 -> 887;
907 -> 899;
907 -> 887;
908 -> 899;
908 -> 887;
909 -> 899;
909 -> 887;
910 -> 899;
910 -> 887;
911 -> 899;
911 -> 887;
912 -> 899;
912 -> 887;
913 -> 899;
913 -> 887;
914 -> 899;
914 -> 887;
915 -> 892;
915 -> 899;
915 -> 887;
916 -> 877;
916 -> 1;
917 -> 748;
917 -> 575;
917 -> 1;
918 -> 916;
918 -> 575;
918 -> 1;
919 -> 1;
920 -> 574;
920 -> 919;
921 -> 575;
921 -> 919;
922 -> 919;
924 -> 0;
925 -> 0;
926 -> 0;
929 -> 923;
929 -> 928;
930 -> 924;
930 -> 928;
931 -> 925;
931 -> 928;
932 -> 926;
932 -> 928;
933 -> 927;
933 -> 928;
934 -> 928;
935 -> 934;
935 -> 928;
936 -> 934;
936 -> 928;
937 -> 934;
937 -> 928;
938 -> 928;
939 -> 930;
939 -> 938;
939 -> 928;
940 -> 931;
940 -> 0;
940 -> 928;
941 -> 932;
941 -> 0;
941 -> 928;
942 -> 929;
942 -> 934;
942 -> 928;
943 -> 930;
943 -> 934;
943 -> 928;
944 -> 931;
944 -> 934;
944 -> 928;
945 -> 933;
945 -> 934;
945 -> 928;
946 -> 932;
946 -> 934;
946 -> 928;
947 -> 928;
948 -> 922;
948 -> 920;
948 -> 571;
948 -> 919;
949 -> 948;
949 -> 922;
950 -> 949;
950 -> 948;
950 -> 922;
951 -> 922;
952 -> 950;
952 -> 948;
952 -> 951;
952 -> 922;
953 -> 949;
953 -> 948;
953 -> 951;
953 -> 922;
954 -> 947;
954 -> 952;
955 -> 948;
955 -> 954;
955 -> 942;
955 -> 945;
955 -> 943;
955 -> 944;
955 -> 946;
955 -> 0;
955 -> 919;
956 -> 948;
956 -> 922;
957 -> 948;
957 -> 922;
958 -> 922;
959 -> 956;
959 -> 955;
959 -> 958;
960 -> 957;
960 -> 959;
960 -> 958;
961 -> 960;
961 -> 958;
962 -> 0;
962 -> 961;
963 -> 960;
963 -> 958;
964 -> 956;
964 -> 958;
965 -> 957;
965 -> 962;
965 -> 963;
965 -> 964;
965 -> 958;
966 -> 0;
966 -> 965;
967 -> 966;
968 -> 957;
968 -> 967;
969 -> 968;
969 -> 947;
969 -> 967;
970 -> 969;
971 -> 966;
972 -> 0;
972 -> 966;
973 -> 972;
974 -> 948;
974 -> 922;
975 -> 948;
975 -> 922;
976 -> 974;
976 -> 975;
976 -> 922;
977 -> 948;
977 -> 976;
977 -> 972;
977 -> 919;
979 -> 978;
981 -> 980;
983 -> 982;
986 -> 985;
987 -> 0;
988 -> 0;
989 -> 0;
990 -> 989;
992 -> 987;
992 -> 988;
992 -> 990;
992 -> 991;
993 -> 992;
995 -> 994;
997 -> 996;
999 -> 998;
1001 -> 1000;
1002 -> 948;
1002 -> 922;
1003 -> 948;
1003 -> 922;
1004 -> 948;
1004 -> 922;
1005 -> 948;
1005 -> 922;
1006 -> 948;
1006 -> 922;
1007 -> 922;
1008 -> 1005;
1008 -> 1007;
1008 -> 922;
1009 -> 1006;
1009 -> 1007;
1009 -> 922;
1010 -> 1008;
1010 -> 1009;
1010 -> 922;
1011 -> 1003;
1011 -> 922;
1012 -> 1002;
1012 -> 922;
1013 -> 1003;
1013 -> 922;
1014 -> 1004;
1014 -> 922;
1015 -> 1005;
1015 -> 922;
1016 -> 1006;
1016 -> 922;
1017 -> 1011;
1017 -> 922;
1018 -> 922;
1019 -> 1012;
1019 -> 1018;
1020 -> 1013;
1020 -> 1018;
1021 -> 1014;
1021 -> 1018;
1022 -> 1015;
1022 -> 1018;
1023 -> 1016;
1023 -> 1018;
1024 -> 1017;
1024 -> 1018;
1025 -> 1018;
1026 -> 1023;
1026 -> 1025;
1026 -> 1018;
1027 -> 1022;
1027 -> 1025;
1027 -> 1018;
1028 -> 1026;
1028 -> 1027;
1028 -> 1018;
1029 -> 1018;
1030 -> 1019;
1030 -> 1018;
1031 -> 1020;
1031 -> 1018;
1032 -> 1029;
1032 -> 1018;
1033 -> 1024;
1033 -> 1018;
1034 -> 1018;
1035 -> 1030;
1035 -> 1034;
1036 -> 1031;
1036 -> 1034;
1037 -> 1032;
1037 -> 1034;
1038 -> 1033;
1038 -> 1034;
1039 -> 1036;
1039 -> 1034;
1040 -> 1039;
1040 -> 1035;
1040 -> 977;
1040 -> 1034;
1041 -> 1034;
1042 -> 1040;
1042 -> 1041;
1043 -> 1040;
1043 -> 1041;
1044 -> 1042;
1044 -> 1041;
1045 -> 1042;
1045 -> 1040;
1045 -> 1041;
1046 -> 1041;
1047 -> 1042;
1047 -> 1040;
1047 -> 1041;
1048 -> 1042;
1048 -> 1040;
1048 -> 1041;
1049 -> 1048;
1049 -> 1041;
1050 -> 1041;
1051 -> 1046;
1051 -> 1050;
1051 -> 1034;
1052 -> 1046;
1052 -> 1041;
1053 -> 1046;
1053 -> 1041;
1054 -> 1052;
1054 -> 1041;
1055 -> 1052;
1055 -> 1041;
1056 -> 1052;
1056 -> 1041;
1057 -> 1052;
1057 -> 1041;
1058 -> 1057;
1058 -> 1041;
1059 -> 1057;
1059 -> 1058;
1060 -> 1035;
1060 -> 1039;
1060 -> 1040;
1060 -> 1050;
1060 -> 1034;
1061 -> 1034;
1062 -> 1060;
1062 -> 1061;
1062 -> 1034;
1063 -> 1060;
1063 -> 1062;
1064 -> 1062;
1065 -> 1063;
1065 -> 1064;
1066 -> 1063;
1066 -> 1064;
1067 -> 1065;
1067 -> 1064;
1068 -> 1065;
1068 -> 1063;
1068 -> 1064;
1069 -> 1064;
1070 -> 1065;
1070 -> 1063;
1070 -> 1064;
1071 -> 1065;
1071 -> 1063;
1071 -> 1064;
1072 -> 1071;
1072 -> 1064;
1073 -> 1069;
1073 -> 1064;
1074 -> 1069;
1074 -> 1064;
1075 -> 1073;
1075 -> 1064;
1076 -> 1073;
1076 -> 1064;
1077 -> 1073;
1077 -> 1064;
1078 -> 1073;
1078 -> 1064;
1079 -> 1078;
1079 -> 1064;
1080 -> 1062;
1081 -> 1064;
1081 -> 1080;
1081 -> 1062;
1082 -> 1060;
1082 -> 1034;
1083 -> 1018;
1084 -> 1064;
1084 -> 1083;
1084 -> 1018;
1085 -> 1082;
1085 -> 1018;
1086 -> 1064;
1086 -> 1041;
1087 -> 1064;
1087 -> 1041;
1088 -> 1086;
1088 -> 1041;
1089 -> 1086;
1089 -> 1064;
1089 -> 1041;
1090 -> 1086;
1090 -> 1064;
1090 -> 1041;
1091 -> 1086;
1091 -> 1064;
1091 -> 1041;
1092 -> 1091;
1092 -> 1041;
1093 -> 1069;
1094 -> 1069;
1095 -> 1093;
1095 -> 1069;
1096 -> 1093;
1096 -> 1069;
1097 -> 1093;
1097 -> 1069;
1098 -> 1093;
1098 -> 1069;
1099 -> 1098;
1099 -> 1069;
1100 -> 1064;
1101 -> 1069;
1101 -> 1100;
1101 -> 1064;
1102 -> 1064;
1102 -> 1034;
1103 -> 1069;
1103 -> 1083;
1103 -> 1018;
1104 -> 1102;
1104 -> 1018;
1105 -> 1069;
1106 -> 1069;
1106 -> 1034;
1107 -> 1106;
1107 -> 1018;
1108 -> 948;
1108 -> 922;
1109 -> 948;
1109 -> 922;
1110 -> 948;
1110 -> 922;
1111 -> 948;
1111 -> 922;
1112 -> 1111;
1112 -> 922;
1113 -> 1111;
1113 -> 922;
1114 -> 1111;
1114 -> 922;
1115 -> 1111;
1115 -> 922;
1116 -> 1111;
1116 -> 922;
1117 -> 1111;
1117 -> 922;
1118 -> 1108;
1118 -> 1111;
1118 -> 922;
1119 -> 1109;
1119 -> 1111;
1119 -> 922;
1120 -> 1110;
1120 -> 1111;
1120 -> 922;
1121 -> 1111;
1121 -> 922;
1122 -> 922;
1123 -> 1121;
1123 -> 1122;
1123 -> 1112;
1123 -> 1118;
1123 -> 1119;
1123 -> 1115;
1123 -> 1120;
1123 -> 1117;
1123 -> 1069;
1123 -> 922;
1124 -> 1123;
1124 -> 1111;
1124 -> 922;
1125 -> 922;
1126 -> 1125;
1126 -> 1111;
1126 -> 922;
1127 -> 1108;
1127 -> 922;
1128 -> 922;
1129 -> 922;
1130 -> 1127;
1130 -> 1129;
1131 -> 1128;
1131 -> 1129;
1132 -> 1130;
1132 -> 1129;
1133 -> 1129;
1134 -> 1132;
1134 -> 1133;
1135 -> 1131;
1135 -> 1133;
1136 -> 1135;
1136 -> 1133;
1137 -> 1135;
1137 -> 1133;
1138 -> 1135;
1138 -> 1133;
1139 -> 1135;
1139 -> 1133;
1140 -> 1135;
1140 -> 1133;
1141 -> 1133;
1142 -> 1134;
1142 -> 1141;
1142 -> 1133;
1143 -> 1135;
1143 -> 1133;
1144 -> 1143;
1144 -> 1136;
1144 -> 1137;
1144 -> 1138;
1144 -> 1139;
1144 -> 1140;
1144 -> 1133;
1145 -> 1134;
1145 -> 1123;
1145 -> 1124;
1145 -> 1126;
1145 -> 1135;
1145 -> 1133;
1146 -> 1134;
1146 -> 1135;
1146 -> 1133;
1147 -> 1128;
1147 -> 1111;
1147 -> 922;
1148 -> 948;
1148 -> 1123;
1148 -> 1124;
1148 -> 1126;
1148 -> 1147;
1148 -> 1125;
1148 -> 1144;
1148 -> 1145;
1148 -> 1146;
1148 -> 919;
1149 -> 948;
1149 -> 922;
1150 -> 948;
1150 -> 922;
1151 -> 948;
1151 -> 922;
1152 -> 948;
1152 -> 922;
1153 -> 1149;
1153 -> 1148;
1153 -> 922;
1154 -> 922;
1155 -> 1152;
1155 -> 1154;
1156 -> 1155;
1156 -> 1148;
1156 -> 0;
1156 -> 1154;
1157 -> 1156;
1157 -> 922;
1158 -> 922;
1159 -> 1149;
1159 -> 1148;
1159 -> 1158;
1159 -> 922;
1160 -> 1157;
1160 -> 1159;
1160 -> 922;
1161 -> 1149;
1161 -> 1148;
1161 -> 1160;
1162 -> 1161;
1162 -> 922;
1163 -> 1153;
1163 -> 922;
1164 -> 1150;
1164 -> 922;
1165 -> 1151;
1165 -> 922;
1166 -> 922;
1167 -> 1162;
1167 -> 1166;
1168 -> 1163;
1168 -> 1166;
1169 -> 1164;
1169 -> 1166;
1170 -> 1165;
1170 -> 1166;
1171 -> 1152;
1171 -> 1166;
1172 -> 1166;
1173 -> 1167;
1173 -> 1172;
1173 -> 1166;
1174 -> 1170;
1174 -> 1166;
1175 -> 1170;
1175 -> 1148;
1175 -> 1166;
1176 -> 1171;
1176 -> 1148;
1176 -> 1166;
1177 -> 1166;
1178 -> 1176;
1178 -> 1177;
1179 -> 1176;
1179 -> 1177;
1180 -> 1177;
1181 -> 1180;
1181 -> 1177;
1182 -> 1180;
1182 -> 1177;
1183 -> 1180;
1183 -> 1177;
1184 -> 1180;
1184 -> 1177;
1185 -> 1178;
1185 -> 1180;
1185 -> 1177;
1186 -> 1176;
1186 -> 1180;
1186 -> 1181;
1186 -> 1182;
1186 -> 1183;
1186 -> 1184;
1186 -> 1185;
1186 -> 1166;
1187 -> 1168;
1187 -> 1166;
1188 -> 1169;
1188 -> 1166;
1189 -> 1170;
1189 -> 1166;
1190 -> 1166;
1191 -> 1187;
1191 -> 1190;
1192 -> 1188;
1192 -> 1190;
1193 -> 1189;
1193 -> 1190;
1194 -> 1186;
1194 -> 1190;
1195 -> 1190;
1196 -> 1192;
1196 -> 1195;
1196 -> 1190;
1197 -> 1193;
1197 -> 1195;
1197 -> 1190;
1198 -> 1196;
1198 -> 1197;
1198 -> 1190;
1199 -> 1191;
1199 -> 1194;
1199 -> 1190;
1200 -> 1192;
1200 -> 1194;
1200 -> 1190;
1201 -> 1193;
1201 -> 1194;
1201 -> 1190;
1202 -> 1166;
1203 -> 1167;
1203 -> 1166;
1204 -> 1166;
1205 -> 1203;
1205 -> 1204;
1206 -> 1186;
1206 -> 1204;
1207 -> 1205;
1207 -> 1204;
1208 -> 1204;
1209 -> 1207;
1209 -> 1208;
1210 -> 1206;
1210 -> 1208;
1211 -> 1210;
1211 -> 1208;
1212 -> 1211;
1212 -> 1209;
1212 -> 1186;
1212 -> 1199;
1212 -> 1200;
1212 -> 1201;
1212 -> 1208;
1213 -> 1208;
1214 -> 1212;
1214 -> 1213;
1215 -> 1212;
1215 -> 1213;
1216 -> 1214;
1216 -> 1213;
1217 -> 1213;
1218 -> 1216;
1218 -> 1217;
1219 -> 1215;
1219 -> 1217;
1220 -> 1219;
1220 -> 1212;
1220 -> 1217;
1221 -> 1218;
1221 -> 1217;
1222 -> 1220;
1222 -> 1221;
1222 -> 1212;
1222 -> 1217;
1223 -> 0;
1223 -> 1217;
1224 -> 1217;
1225 -> 1218;
1225 -> 1222;
1225 -> 1224;
1225 -> 1217;
1226 -> 1219;
1226 -> 1222;
1226 -> 1217;
1227 -> 1218;
1227 -> 1222;
1227 -> 1217;
1228 -> 1219;
1228 -> 1226;
1228 -> 1225;
1229 -> 1218;
1229 -> 1225;
1230 -> 1219;
1230 -> 1228;
1231 -> 1218;
1231 -> 1228;
1232 -> 0;
1232 -> 1230;
1233 -> 1218;
1233 -> 1217;
1234 -> 1232;
1234 -> 1217;
1235 -> 1217;
1236 -> 1233;
1236 -> 1235;
1237 -> 1234;
1237 -> 1235;
1238 -> 1219;
1238 -> 1235;
1239 -> 1236;
1239 -> 1235;
1240 -> 1237;
1240 -> 1235;
1241 -> 1235;
1242 -> 1239;
1242 -> 1241;
1243 -> 1240;
1243 -> 1241;
1244 -> 1243;
1244 -> 1241;
1245 -> 1241;
1246 -> 1242;
1246 -> 1241;
1247 -> 1243;
1247 -> 1241;
1248 -> 1241;
1249 -> 1241;
1250 -> 1246;
1250 -> 1249;
1251 -> 1247;
1251 -> 1249;
1252 -> 1248;
1252 -> 1249;
1253 -> 1250;
1253 -> 1252;
1253 -> 1249;
1254 -> 1251;
1254 -> 1252;
1254 -> 1249;
1255 -> 1248;
1255 -> 1235;
1256 -> 1235;
1257 -> 1235;
1258 -> 1238;
1258 -> 1257;
1259 -> 1258;
1259 -> 1230;
1259 -> 1257;
1260 -> 1259;
1260 -> 1235;
1261 -> 1255;
1261 -> 1235;
1262 -> 1256;
1262 -> 1235;
1263 -> 1261;
1263 -> 1262;
1263 -> 1260;
1263 -> 1253;
1263 -> 1254;
1263 -> 1230;
1263 -> 1235;
1264 -> 1235;
1265 -> 1263;
1265 -> 1264;
1266 -> 1265;
1266 -> 1263;
1266 -> 1264;
1267 -> 1236;
1267 -> 1266;
1268 -> 1266;
1269 -> 1267;
1269 -> 1268;
1270 -> 1269;
1270 -> 1268;
1271 -> 1269;
1271 -> 1268;
1272 -> 1270;
1272 -> 1268;
1273 -> 1268;
1274 -> 1272;
1274 -> 1273;
1275 -> 1271;
1275 -> 1273;
1276 -> 1274;
1276 -> 1269;
1276 -> 1273;
1277 -> 1273;
1278 -> 1277;
1278 -> 1273;
1279 -> 1274;
1279 -> 1269;
1279 -> 1273;
1280 -> 1275;
1280 -> 1279;
1280 -> 1276;
1280 -> 1269;
1281 -> 1275;
1281 -> 1279;
1281 -> 1280;
1282 -> 1280;
1283 -> 1281;
1283 -> 1273;
1284 -> 1273;
1285 -> 1283;
1285 -> 1284;
1285 -> 1273;
1286 -> 1283;
1286 -> 1274;
1286 -> 1273;
1287 -> 1283;
1287 -> 1285;
1288 -> 0;
1288 -> 1285;
1289 -> 1283;
1289 -> 1287;
1289 -> 1285;
1290 -> 1273;
1291 -> 1290;
1291 -> 1268;
1292 -> 1268;
1293 -> 1271;
1293 -> 1292;
1294 -> 1292;
1295 -> 1293;
1295 -> 1289;
1295 -> 1294;
1296 -> 1295;
1296 -> 1292;
1297 -> 1268;
1298 -> 1272;
1298 -> 1297;
1299 -> 1291;
1299 -> 1297;
1300 -> 1296;
1300 -> 1297;
1301 -> 1271;
1301 -> 1297;
1302 -> 1297;
1303 -> 1301;
1303 -> 1302;
1304 -> 1303;
1304 -> 1289;
1304 -> 1302;
1305 -> 1304;
1305 -> 1297;
1306 -> 1297;
1307 -> 1298;
1307 -> 1305;
1307 -> 1297;
1308 -> 1299;
1308 -> 1297;
1309 -> 1300;
1309 -> 1308;
1310 -> 0;
1310 -> 1309;
1311 -> 1298;
1311 -> 1297;
1312 -> 1310;
1312 -> 1297;
1313 -> 1297;
1314 -> 1311;
1314 -> 1313;
1315 -> 1312;
1315 -> 1313;
1316 -> 1315;
1316 -> 1313;
1317 -> 1313;
1318 -> 1313;
1318 -> 1297;
1319 -> 1297;
1320 -> 1297;
1321 -> 1301;
1321 -> 1320;
1322 -> 1321;
1322 -> 1289;
1322 -> 1320;
1323 -> 1322;
1323 -> 1297;
1324 -> 1318;
1324 -> 1297;
1325 -> 1319;
1325 -> 1297;
1326 -> 1324;
1326 -> 1325;
1326 -> 1323;
1326 -> 1314;
1326 -> 1315;
1326 -> 1289;
1326 -> 1297;
1327 -> 1297;
1328 -> 1326;
1329 -> 1301;
1329 -> 1328;
1330 -> 1329;
1330 -> 1326;
1330 -> 1328;
1331 -> 1330;
1331 -> 1326;
1332 -> 1300;
1332 -> 1326;
1333 -> 1332;
1334 -> 1301;
1334 -> 1333;
1335 -> 1334;
1335 -> 1326;
1335 -> 1333;
1336 -> 1335;
1336 -> 1332;
1337 -> 1331;
1337 -> 1332;
1338 -> 1298;
1338 -> 1332;
1339 -> 1299;
1339 -> 1332;
1340 -> 1332;
1341 -> 1332;
1342 -> 1336;
1342 -> 1341;
1343 -> 1337;
1343 -> 1341;
1344 -> 1338;
1344 -> 1341;
1345 -> 1339;
1345 -> 1341;
1346 -> 1340;
1346 -> 1341;
1347 -> 1343;
1347 -> 1341;
1348 -> 1341;
1349 -> 1347;
1349 -> 1348;
1350 -> 1346;
1350 -> 1348;
1351 -> 1348;
1352 -> 1348;
1353 -> 1349;
1353 -> 1352;
1353 -> 1348;
1354 -> 1349;
1354 -> 1350;
1354 -> 1348;
1355 -> 1349;
1355 -> 1326;
1355 -> 1350;
1355 -> 1348;
1356 -> 1349;
1356 -> 1326;
1356 -> 1350;
1356 -> 1348;
1357 -> 1351;
1357 -> 1350;
1357 -> 1348;
1358 -> 1346;
1358 -> 1341;
1359 -> 1346;
1359 -> 1341;
1360 -> 1346;
1360 -> 1341;
1361 -> 1346;
1361 -> 1341;
1362 -> 1346;
1362 -> 1341;
1363 -> 1341;
1364 -> 1342;
1364 -> 1363;
1364 -> 1341;
1365 -> 1341;
1366 -> 1344;
1366 -> 1365;
1366 -> 1341;
1367 -> 1342;
1367 -> 1346;
1367 -> 1341;
1368 -> 1344;
1368 -> 1346;
1368 -> 1345;
1368 -> 1341;
1369 -> 1368;
1369 -> 1346;
1369 -> 1341;
1370 -> 1345;
1370 -> 1341;
1371 -> 1344;
1371 -> 1326;
1371 -> 1370;
1372 -> 1344;
1372 -> 1371;
1373 -> 1372;
1373 -> 1371;
1373 -> 1346;
1374 -> 1332;
1375 -> 1301;
1375 -> 1374;
1376 -> 1375;
1376 -> 1371;
1376 -> 1374;
1377 -> 1376;
1377 -> 1332;
1378 -> 1298;
1378 -> 1332;
1379 -> 1332;
1380 -> 1326;
1381 -> 1380;
1381 -> 1377;
1382 -> 1381;
1382 -> 1326;
1383 -> 1318;
1383 -> 1326;
1384 -> 1340;
1384 -> 1326;
1385 -> 1383;
1385 -> 1384;
1385 -> 1382;
1385 -> 1314;
1385 -> 1315;
1385 -> 1356;
1385 -> 1355;
1385 -> 1354;
1385 -> 1357;
1385 -> 1350;
1385 -> 1367;
1385 -> 1369;
1385 -> 1360;
1385 -> 1361;
1385 -> 1362;
1385 -> 1373;
1385 -> 1377;
1385 -> 1368;
1385 -> 1371;
1385 -> 1326;
1386 -> 1326;
1387 -> 1340;
1387 -> 1297;
1388 -> 1269;
1388 -> 1387;
1388 -> 1385;
1388 -> 1268;
1389 -> 1237;
1389 -> 1310;
1389 -> 1266;
1390 -> 1389;
1391 -> 1388;
1391 -> 1390;
1392 -> 1391;
1392 -> 1388;
1392 -> 1390;
1393 -> 1390;
1394 -> 1392;
1394 -> 1393;
1394 -> 1390;
1395 -> 1394;
1395 -> 1390;
1396 -> 1395;
1396 -> 1389;
1397 -> 1236;
1397 -> 1389;
1398 -> 1237;
1398 -> 0;
1398 -> 1389;
1399 -> 1396;
1399 -> 1398;
1400 -> 1388;
1400 -> 1398;
1401 -> 1398;
1402 -> 1398;
1403 -> 1399;
1403 -> 1402;
1404 -> 1400;
1404 -> 1402;
1405 -> 1401;
1405 -> 1402;
1406 -> 1404;
1406 -> 1402;
1407 -> 1402;
1408 -> 1406;
1408 -> 1407;
1409 -> 1405;
1409 -> 1407;
1410 -> 1408;
1410 -> 1407;
1411 -> 1407;
1412 -> 1410;
1412 -> 1411;
1413 -> 1409;
1413 -> 1411;
1414 -> 1411;
1415 -> 1411;
1416 -> 1412;
1416 -> 1415;
1416 -> 1411;
1417 -> 1412;
1417 -> 1396;
1417 -> 1413;
1417 -> 1411;
1418 -> 1412;
1418 -> 1396;
1418 -> 1413;
1418 -> 1411;
1419 -> 1414;
1419 -> 1413;
1419 -> 1411;
1420 -> 1405;
1420 -> 1402;
1421 -> 1405;
1421 -> 1402;
1422 -> 1402;
1423 -> 1403;
1423 -> 1422;
1423 -> 1402;
1424 -> 1403;
1424 -> 1405;
1424 -> 1402;
1425 -> 1236;
1425 -> 1396;
1425 -> 1266;
1426 -> 1266;
1427 -> 1425;
1427 -> 1426;
1428 -> 1401;
1428 -> 1426;
1429 -> 1428;
1429 -> 1417;
1429 -> 1426;
1430 -> 0;
1430 -> 1426;
1431 -> 1426;
1432 -> 1429;
1432 -> 1431;
1433 -> 1430;
1433 -> 1431;
1434 -> 1427;
1434 -> 1426;
1435 -> 1432;
1435 -> 1434;
1435 -> 1426;
1436 -> 1435;
1436 -> 1426;
1437 -> 1266;
1438 -> 1437;
1438 -> 1434;
1439 -> 1438;
1439 -> 1266;
1440 -> 1255;
1440 -> 1266;
1441 -> 1436;
1441 -> 1266;
1442 -> 1440;
1442 -> 1441;
1442 -> 1439;
1442 -> 1253;
1442 -> 1254;
1442 -> 1418;
1442 -> 1417;
1442 -> 1412;
1442 -> 1419;
1442 -> 1413;
1442 -> 1424;
1442 -> 1421;
1442 -> 1434;
1442 -> 1266;
1443 -> 1266;
1444 -> 1436;
1444 -> 1235;
1445 -> 1212;
1445 -> 1444;
1445 -> 1442;
1445 -> 1208;
1446 -> 1186;
1446 -> 1166;
1447 -> 1171;
1447 -> 1445;
1447 -> 1446;
1447 -> 1166;
1448 -> 1445;
1448 -> 1166;
1449 -> 948;
1449 -> 1448;
1449 -> 1447;
1449 -> 919;
1450 -> 948;
1450 -> 922;
1451 -> 948;
1451 -> 922;
1452 -> 948;
1452 -> 922;
1453 -> 922;
1454 -> 1451;
1454 -> 1453;
1454 -> 922;
1455 -> 1452;
1455 -> 922;
1456 -> 1452;
1456 -> 1449;
1456 -> 1450;
1456 -> 922;
1457 -> 1451;
1457 -> 922;
1458 -> 922;
1459 -> 922;
1460 -> 1455;
1460 -> 1459;
1461 -> 1456;
1461 -> 1459;
1462 -> 1457;
1462 -> 1459;
1463 -> 1458;
1463 -> 1459;
1464 -> 1460;
1464 -> 1459;
1465 -> 1461;
1465 -> 1459;
1466 -> 1459;
1467 -> 1464;
1467 -> 1466;
1468 -> 1465;
1468 -> 1466;
1469 -> 1463;
1469 -> 1466;
1470 -> 1469;
1470 -> 1466;
1471 -> 1469;
1471 -> 1466;
1472 -> 1469;
1472 -> 1466;
1473 -> 1469;
1473 -> 1466;
1474 -> 1469;
1474 -> 1466;
1475 -> 1466;
1476 -> 1467;
1476 -> 1475;
1476 -> 1466;
1477 -> 1468;
1477 -> 1466;
1478 -> 0;
1478 -> 1466;
1479 -> 1466;
1480 -> 1477;
1480 -> 1479;
1481 -> 1478;
1481 -> 1479;
1482 -> 1468;
1482 -> 1466;
1483 -> 0;
1483 -> 1466;
1484 -> 1466;
1485 -> 1482;
1485 -> 1484;
1486 -> 1483;
1486 -> 1484;
1487 -> 1467;
1487 -> 1469;
1487 -> 1466;
1488 -> 1468;
1488 -> 1469;
1488 -> 1466;
1489 -> 1467;
1489 -> 1449;
1489 -> 1469;
1489 -> 1466;
1490 -> 1463;
1490 -> 1459;
1491 -> 1459;
1492 -> 1462;
1492 -> 1491;
1492 -> 1459;
1493 -> 1462;
1493 -> 1463;
1493 -> 1459;
1494 -> 948;
1494 -> 1458;
1494 -> 1449;
1494 -> 1489;
1494 -> 1488;
1494 -> 1487;
1494 -> 1473;
1494 -> 1474;
1494 -> 1493;
1494 -> 919;
1495 -> 948;
1495 -> 922;
1496 -> 948;
1496 -> 922;
1497 -> 948;
1497 -> 922;
1498 -> 948;
1498 -> 922;
1499 -> 948;
1499 -> 922;
1500 -> 1495;
1500 -> 922;
1501 -> 1496;
1501 -> 922;
1502 -> 1497;
1502 -> 922;
1503 -> 1498;
1503 -> 922;
1504 -> 922;
1505 -> 1500;
1505 -> 1504;
1506 -> 1501;
1506 -> 1504;
1507 -> 1502;
1507 -> 1504;
1508 -> 1503;
1508 -> 1504;
1509 -> 1499;
1509 -> 1504;
1510 -> 1504;
1511 -> 1506;
1511 -> 1510;
1511 -> 1504;
1512 -> 1505;
1512 -> 1504;
1513 -> 1506;
1513 -> 1504;
1514 -> 1507;
1514 -> 1504;
1515 -> 1504;
1516 -> 1507;
1516 -> 1515;
1516 -> 1504;
1517 -> 1504;
1518 -> 1512;
1518 -> 1517;
1519 -> 1513;
1519 -> 1517;
1520 -> 1514;
1520 -> 1517;
1521 -> 1516;
1521 -> 1517;
1522 -> 1509;
1522 -> 1517;
1523 -> 1518;
1523 -> 1494;
1523 -> 1517;
1524 -> 1518;
1524 -> 1523;
1525 -> 1519;
1525 -> 1523;
1526 -> 1520;
1526 -> 1523;
1527 -> 1521;
1527 -> 1523;
1528 -> 1523;
1529 -> 1523;
1530 -> 1524;
1530 -> 1529;
1531 -> 1525;
1531 -> 1529;
1532 -> 1526;
1532 -> 1529;
1533 -> 1527;
1533 -> 1529;
1534 -> 1528;
1534 -> 1529;
1535 -> 1522;
1535 -> 1529;
1536 -> 1530;
1536 -> 1523;
1536 -> 1529;
1537 -> 1536;
1537 -> 1529;
1538 -> 1530;
1538 -> 1523;
1538 -> 1529;
1539 -> 1534;
1539 -> 1529;
1540 -> 1536;
1540 -> 1529;
1541 -> 1529;
1542 -> 1531;
1542 -> 1529;
1543 -> 1529;
1544 -> 1538;
1544 -> 1543;
1545 -> 1539;
1545 -> 1543;
1546 -> 1540;
1546 -> 1543;
1547 -> 1541;
1547 -> 1543;
1548 -> 1542;
1548 -> 1543;
1549 -> 1535;
1549 -> 1543;
1550 -> 1543;
1551 -> 1545;
1551 -> 1550;
1551 -> 1543;
1552 -> 1543;
1553 -> 1552;
1553 -> 1529;
1554 -> 1529;
1555 -> 1553;
1555 -> 1554;
1555 -> 1529;
1557 -> 1556;
1558 -> 1557;
1558 -> 1556;
1559 -> 1556;
1560 -> 1558;
1560 -> 1556;
1561 -> 1560;
1562 -> 1529;
1563 -> 1561;
1563 -> 1562;
1564 -> 1561;
1564 -> 1558;
1564 -> 1562;
1565 -> 1562;
1566 -> 1564;
1566 -> 1565;
1567 -> 1563;
1567 -> 1565;
1568 -> 1567;
1568 -> 1565;
1569 -> 1567;
1569 -> 1565;
1570 -> 1567;
1570 -> 1565;
1571 -> 1567;
1571 -> 1565;
1572 -> 1566;
1572 -> 1567;
1572 -> 1565;
1573 -> 0;
1573 -> 1567;
1573 -> 1565;
1574 -> 1565;
1575 -> 1574;
1575 -> 1567;
1575 -> 1565;
1576 -> 1565;
1577 -> 1576;
1577 -> 1567;
1577 -> 1565;
1578 -> 1564;
1578 -> 1563;
1578 -> 1573;
1578 -> 1575;
1578 -> 1577;
1578 -> 1572;
1578 -> 1574;
1578 -> 1562;
1579 -> 1562;
1580 -> 1578;
1580 -> 1579;
1581 -> 1580;
1581 -> 1578;
1581 -> 0;
1581 -> 1579;
1582 -> 1579;
1583 -> 1580;
1583 -> 1578;
1583 -> 1582;
1583 -> 1579;
1584 -> 1581;
1584 -> 1562;
1585 -> 1578;
1585 -> 1562;
1586 -> 1585;
1586 -> 1529;
1587 -> 1530;
1587 -> 1529;
1588 -> 1530;
1588 -> 1523;
1588 -> 1529;
1589 -> 1529;
1590 -> 1587;
1590 -> 1589;
1591 -> 1588;
1591 -> 1589;
1592 -> 1590;
1592 -> 1589;
1593 -> 0;
1593 -> 1592;
1594 -> 1529;
1595 -> 1586;
1595 -> 1529;
1596 -> 1534;
1596 -> 1529;
1597 -> 1536;
1597 -> 1529;
1598 -> 1529;
1599 -> 1532;
1599 -> 1529;
1600 -> 1593;
1600 -> 1529;
1601 -> 1594;
1601 -> 1529;
1602 -> 1529;
1603 -> 1595;
1603 -> 1602;
1604 -> 1596;
1604 -> 1602;
1605 -> 1597;
1605 -> 1602;
1606 -> 1598;
1606 -> 1602;
1607 -> 1599;
1607 -> 1602;
1608 -> 1600;
1608 -> 1602;
1609 -> 1598;
1609 -> 1602;
1610 -> 1601;
1610 -> 1602;
1611 -> 1535;
1611 -> 1602;
1612 -> 1608;
1612 -> 1602;
1613 -> 1602;
1614 -> 1612;
1614 -> 1613;
1615 -> 1614;
1615 -> 0;
1615 -> 1613;
1616 -> 1603;
1616 -> 1615;
1617 -> 1604;
1617 -> 1615;
1618 -> 1605;
1618 -> 1615;
1619 -> 1606;
1619 -> 1615;
1620 -> 1607;
1620 -> 1615;
1621 -> 1608;
1621 -> 1615;
1622 -> 1609;
1622 -> 1615;
1623 -> 1610;
1623 -> 1615;
1624 -> 1615;
1625 -> 1616;
1625 -> 1624;
1626 -> 1617;
1626 -> 1624;
1627 -> 1618;
1627 -> 1624;
1628 -> 1619;
1628 -> 1624;
1629 -> 1620;
1629 -> 1624;
1630 -> 1621;
1630 -> 1624;
1631 -> 1622;
1631 -> 1624;
1632 -> 1623;
1632 -> 1624;
1633 -> 1611;
1633 -> 1624;
1634 -> 1624;
1635 -> 1626;
1635 -> 1634;
1635 -> 1624;
1636 -> 1625;
1636 -> 1635;
1637 -> 1627;
1637 -> 1635;
1638 -> 1628;
1638 -> 1635;
1639 -> 1629;
1639 -> 1635;
1640 -> 1630;
1640 -> 1635;
1641 -> 1631;
1641 -> 1635;
1642 -> 1632;
1642 -> 1635;
1643 -> 1635;
1644 -> 1636;
1644 -> 1643;
1645 -> 1637;
1645 -> 1643;
1646 -> 1638;
1646 -> 1643;
1647 -> 1639;
1647 -> 1643;
1648 -> 1640;
1648 -> 1643;
1649 -> 1641;
1649 -> 1643;
1650 -> 1642;
1650 -> 1643;
1651 -> 1633;
1651 -> 1643;
1652 -> 1643;
1653 -> 1644;
1653 -> 1652;
1654 -> 1653;
1654 -> 1578;
1654 -> 0;
1654 -> 1652;
1655 -> 1652;
1656 -> 1653;
1656 -> 1578;
1656 -> 1655;
1656 -> 1652;
1657 -> 1654;
1657 -> 1643;
1658 -> 1648;
1658 -> 1643;
1659 -> 1643;
1660 -> 1658;
1660 -> 1659;
1661 -> 1660;
1661 -> 0;
1661 -> 1659;
1662 -> 1660;
1662 -> 0;
1662 -> 1659;
1663 -> 1659;
1664 -> 0;
1664 -> 1659;
1665 -> 1660;
1665 -> 1664;
1665 -> 1659;
1666 -> 0;
1666 -> 1659;
1667 -> 1660;
1667 -> 1666;
1667 -> 1659;
1668 -> 1659;
1669 -> 0;
1669 -> 1659;
1670 -> 1660;
1670 -> 1669;
1670 -> 1659;
1671 -> 1670;
1671 -> 1659;
1672 -> 1659;
1673 -> 1671;
1673 -> 1672;
1674 -> 1672;
1675 -> 1673;
1675 -> 1674;
1675 -> 1672;
1676 -> 1643;
1677 -> 1651;
1677 -> 1643;
1678 -> 1643;
1679 -> 1643;
1680 -> 1644;
1680 -> 1679;
1681 -> 1679;
1682 -> 1680;
1682 -> 1681;
1683 -> 1682;
1683 -> 1578;
1683 -> 1681;
1684 -> 1683;
1684 -> 1679;
1685 -> 1684;
1685 -> 1643;
1686 -> 1677;
1686 -> 1685;
1686 -> 1643;
1687 -> 1686;
1688 -> 1676;
1688 -> 1687;
1688 -> 1686;
1689 -> 1644;
1689 -> 1688;
1690 -> 1645;
1690 -> 1688;
1691 -> 1646;
1691 -> 1688;
1692 -> 1647;
1692 -> 1688;
1693 -> 1648;
1693 -> 1688;
1694 -> 1651;
1694 -> 1688;
1695 -> 1649;
1695 -> 1688;
1696 -> 1650;
1696 -> 1688;
1697 -> 1688;
1698 -> 1689;
1698 -> 1697;
1699 -> 1690;
1699 -> 1697;
1700 -> 1691;
1700 -> 1697;
1701 -> 1692;
1701 -> 1697;
1702 -> 1693;
1702 -> 1697;
1703 -> 1694;
1703 -> 1697;
1704 -> 1695;
1704 -> 1697;
1705 -> 1696;
1705 -> 1697;
1706 -> 1677;
1706 -> 1697;
1707 -> 1688;
1708 -> 1688;
1709 -> 1644;
1709 -> 1708;
1710 -> 1709;
1710 -> 1578;
1710 -> 0;
1710 -> 1708;
1711 -> 1708;
1712 -> 1709;
1712 -> 1578;
1712 -> 1711;
1712 -> 1708;
1713 -> 1710;
1713 -> 1688;
1714 -> 1648;
1714 -> 0;
1714 -> 1686;
1715 -> 1686;
1716 -> 1689;
1716 -> 1697;
1717 -> 1690;
1717 -> 1697;
1718 -> 1691;
1718 -> 1697;
1719 -> 1692;
1719 -> 1697;
1720 -> 1693;
1720 -> 1697;
1721 -> 1694;
1721 -> 1697;
1722 -> 1695;
1722 -> 1697;
1723 -> 1705;
1723 -> 1697;
1724 -> 1686;
1724 -> 1697;
1725 -> 1697;
1726 -> 1716;
1726 -> 1725;
1727 -> 1726;
1727 -> 1578;
1727 -> 0;
1727 -> 1725;
1728 -> 1725;
1729 -> 1726;
1729 -> 1578;
1729 -> 1728;
1729 -> 1725;
1730 -> 1727;
1730 -> 1697;
1731 -> 1697;
1732 -> 1724;
1732 -> 1731;
1733 -> 0;
1733 -> 1731;
1734 -> 1733;
1734 -> 1697;
1735 -> 1720;
1735 -> 1734;
1735 -> 1697;
1736 -> 1697;
1737 -> 1697;
1738 -> 1724;
1738 -> 1737;
1739 -> 1737;
1740 -> 1738;
1740 -> 1592;
1740 -> 1739;
1740 -> 1737;
1741 -> 1740;
1742 -> 1738;
1742 -> 1592;
1742 -> 1740;
1743 -> 1738;
1743 -> 1592;
1743 -> 1740;
1744 -> 1741;
1744 -> 1740;
1745 -> 1740;
1746 -> 1738;
1746 -> 1744;
1746 -> 1737;
1747 -> 1746;
1747 -> 1697;
1748 -> 1747;
1748 -> 1717;
1748 -> 1744;
1748 -> 1697;
1749 -> 1646;
1749 -> 1748;
1750 -> 1647;
1750 -> 1748;
1751 -> 1648;
1751 -> 1748;
1752 -> 1649;
1752 -> 1748;
1753 -> 1723;
1753 -> 1748;
1754 -> 1748;
1755 -> 1748;
1756 -> 1749;
1756 -> 1748;
1757 -> 1750;
1757 -> 1748;
1758 -> 1751;
1758 -> 1748;
1759 -> 1748;
1760 -> 1752;
1760 -> 1748;
1761 -> 1753;
1761 -> 1748;
1762 -> 1748;
1763 -> 1748;
1764 -> 1754;
1764 -> 1763;
1765 -> 1764;
1765 -> 1578;
1765 -> 0;
1765 -> 1763;
1766 -> 1763;
1767 -> 1764;
1767 -> 1578;
1767 -> 1766;
1767 -> 1763;
1768 -> 1765;
1768 -> 1748;
1769 -> 1748;
1770 -> 1762;
1770 -> 1769;
1771 -> 1770;
1771 -> 1748;
1771 -> 0;
1771 -> 1769;
1772 -> 1771;
1772 -> 1748;
1773 -> 1757;
1773 -> 1748;
1774 -> 1748;
1775 -> 1773;
1775 -> 1774;
1776 -> 1762;
1776 -> 1774;
1777 -> 1774;
1778 -> 1776;
1778 -> 1748;
1778 -> 1777;
1778 -> 1774;
1779 -> 1774;
1780 -> 1776;
1780 -> 1748;
1780 -> 1779;
1780 -> 1774;
1781 -> 1776;
1781 -> 1748;
1781 -> 1780;
1782 -> 1775;
1782 -> 1780;
1783 -> 1780;
1784 -> 1782;
1784 -> 1783;
1785 -> 1782;
1785 -> 1783;
1786 -> 1782;
1786 -> 1783;
1787 -> 1782;
1787 -> 1783;
1788 -> 1783;
1789 -> 1788;
1789 -> 1783;
1790 -> 1783;
1791 -> 1790;
1791 -> 1783;
1792 -> 1784;
1792 -> 1782;
1792 -> 1783;
1793 -> 1784;
1793 -> 1792;
1794 -> 1787;
1794 -> 1792;
1795 -> 1793;
1795 -> 1792;
1795 -> 1794;
1796 -> 1793;
1796 -> 1792;
1796 -> 1795;
1797 -> 1793;
1797 -> 1792;
1798 -> 1783;
1799 -> 1796;
1799 -> 1792;
1799 -> 1798;
1799 -> 1783;
1800 -> 1797;
1800 -> 1792;
1800 -> 1798;
1800 -> 1783;
1801 -> 1799;
1801 -> 1800;
1801 -> 1783;
1802 -> 947;
1802 -> 1801;
1803 -> 1776;
1803 -> 1802;
1803 -> 1774;
1804 -> 1758;
1804 -> 0;
1804 -> 1748;
1805 -> 1748;
1806 -> 1762;
1806 -> 1802;
1806 -> 1805;
1806 -> 1748;
1807 -> 1804;
1807 -> 1806;
1807 -> 1748;
1808 -> 1754;
1808 -> 1807;
1809 -> 1762;
1809 -> 1802;
1809 -> 1807;
1810 -> 1755;
1810 -> 1807;
1811 -> 1756;
1811 -> 1807;
1812 -> 1757;
1812 -> 1807;
1813 -> 1758;
1813 -> 1807;
1814 -> 1759;
1814 -> 1807;
1815 -> 1760;
1815 -> 1807;
1816 -> 1761;
1816 -> 1807;
1817 -> 1807;
1818 -> 1808;
1818 -> 1817;
1819 -> 1809;
1819 -> 1817;
1820 -> 1810;
1820 -> 1817;
1821 -> 1811;
1821 -> 1817;
1822 -> 1812;
1822 -> 1817;
1823 -> 1813;
1823 -> 1817;
1824 -> 1814;
1824 -> 1817;
1825 -> 1815;
1825 -> 1817;
1826 -> 1816;
1826 -> 1817;
1827 -> 1762;
1827 -> 1817;
1828 -> 1823;
1828 -> 1817;
1829 -> 1817;
1830 -> 1828;
1830 -> 1829;
1831 -> 1830;
1831 -> 0;
1831 -> 1829;
1832 -> 1830;
1832 -> 0;
1832 -> 1829;
1833 -> 1829;
1834 -> 0;
1834 -> 1829;
1835 -> 1830;
1835 -> 1834;
1835 -> 1829;
1836 -> 0;
1836 -> 1829;
1837 -> 1830;
1837 -> 1836;
1837 -> 1829;
1838 -> 1829;
1839 -> 0;
1839 -> 1829;
1840 -> 1830;
1840 -> 1839;
1840 -> 1829;
1841 -> 1840;
1841 -> 1829;
1842 -> 1829;
1843 -> 1841;
1843 -> 1842;
1844 -> 1842;
1845 -> 1843;
1845 -> 1844;
1845 -> 1842;
1846 -> 1817;
1847 -> 1821;
1847 -> 1846;
1847 -> 1817;
1848 -> 1819;
1848 -> 1802;
1848 -> 1817;
1849 -> 1818;
1849 -> 1848;
1850 -> 1819;
1850 -> 1848;
1851 -> 1820;
1851 -> 1848;
1852 -> 1821;
1852 -> 1848;
1853 -> 1823;
1853 -> 1848;
1854 -> 1824;
1854 -> 1848;
1855 -> 1825;
1855 -> 1848;
1856 -> 1826;
1856 -> 1848;
1857 -> 1848;
1858 -> 1849;
1858 -> 1857;
1859 -> 1850;
1859 -> 1857;
1860 -> 1851;
1860 -> 1857;
1861 -> 1852;
1861 -> 1857;
1862 -> 1853;
1862 -> 1857;
1863 -> 1854;
1863 -> 1857;
1864 -> 1855;
1864 -> 1857;
1865 -> 1856;
1865 -> 1857;
1866 -> 1859;
1866 -> 1857;
1867 -> 1860;
1867 -> 1857;
1868 -> 1862;
1868 -> 1857;
1869 -> 1863;
1869 -> 1857;
1870 -> 1857;
1871 -> 1866;
1871 -> 1870;
1872 -> 1867;
1872 -> 1870;
1873 -> 1868;
1873 -> 1870;
1874 -> 1869;
1874 -> 1870;
1875 -> 1873;
1875 -> 0;
1875 -> 1870;
1876 -> 1870;
1877 -> 1875;
1877 -> 1871;
1877 -> 1870;
1878 -> 1871;
1878 -> 1802;
1878 -> 0;
1878 -> 1877;
1879 -> 1873;
1879 -> 0;
1879 -> 1878;
1880 -> 1878;
1881 -> 1872;
1881 -> 1879;
1882 -> 1881;
1882 -> 1857;
1883 -> 1882;
1884 -> 1861;
1884 -> 1882;
1885 -> 1862;
1885 -> 1882;
1886 -> 1864;
1886 -> 1882;
1887 -> 1865;
1887 -> 1882;
1888 -> 1882;
1889 -> 1883;
1889 -> 1888;
1890 -> 1884;
1890 -> 1888;
1891 -> 1885;
1891 -> 1888;
1892 -> 1883;
1892 -> 1888;
1893 -> 1886;
1893 -> 1888;
1894 -> 1887;
1894 -> 1888;
1895 -> 1883;
1895 -> 1888;
1896 -> 1863;
1896 -> 1888;
1897 -> 1888;
1898 -> 1888;
1899 -> 1889;
1899 -> 1802;
1899 -> 1881;
1899 -> 0;
1899 -> 1888;
1900 -> 1899;
1900 -> 1888;
1901 -> 1900;
1901 -> 1802;
1901 -> 1881;
1901 -> 1888;
1902 -> 1896;
1902 -> 1802;
1902 -> 1901;
1902 -> 1881;
1902 -> 1888;
1903 -> 1900;
1903 -> 1902;
1904 -> 1890;
1904 -> 1902;
1905 -> 1893;
1905 -> 1902;
1906 -> 1891;
1906 -> 1902;
1907 -> 1898;
1907 -> 1902;
1908 -> 1902;
1909 -> 1903;
1909 -> 1908;
1910 -> 1904;
1910 -> 1908;
1911 -> 1905;
1911 -> 1908;
1912 -> 1906;
1912 -> 1908;
1913 -> 1907;
1913 -> 1908;
1914 -> 1909;
1914 -> 1802;
1914 -> 1902;
1914 -> 1881;
1914 -> 1908;
1915 -> 1914;
1916 -> 1910;
1916 -> 1915;
1916 -> 1914;
1917 -> 1912;
1917 -> 0;
1917 -> 1914;
1918 -> 1916;
1918 -> 1917;
1918 -> 1914;
1919 -> 1909;
1919 -> 1918;
1920 -> 1919;
1920 -> 1802;
1920 -> 1902;
1920 -> 1881;
1920 -> 1918;
1921 -> 1919;
1921 -> 1918;
1922 -> 1919;
1922 -> 1802;
1922 -> 1902;
1922 -> 1881;
1922 -> 1910;
1922 -> 1918;
1923 -> 1912;
1923 -> 1918;
1924 -> 1918;
1925 -> 1923;
1925 -> 1924;
1926 -> 1922;
1926 -> 1925;
1926 -> 1918;
1927 -> 1908;
1928 -> 1908;
1929 -> 1928;
1929 -> 1902;
1930 -> 1929;
1931 -> 1896;
1931 -> 1930;
1932 -> 1931;
1932 -> 1902;
1932 -> 1930;
1933 -> 0;
1933 -> 1930;
1934 -> 1930;
1935 -> 1932;
1935 -> 1934;
1936 -> 1933;
1936 -> 1934;
1937 -> 1935;
1937 -> 1929;
1938 -> 1891;
1938 -> 0;
1938 -> 1937;
1939 -> 1937;
1940 -> 1891;
1940 -> 0;
1940 -> 1938;
1941 -> 1938;
1942 -> 1940;
1943 -> 1942;
1943 -> 1940;
1944 -> 1943;
1945 -> 1944;
1945 -> 1943;
1946 -> 1900;
1946 -> 1943;
1947 -> 1891;
1947 -> 1943;
1948 -> 1892;
1948 -> 1943;
1949 -> 1943;
1950 -> 1947;
1950 -> 1949;
1951 -> 1948;
1951 -> 1949;
1952 -> 1950;
1952 -> 0;
1952 -> 1949;
1953 -> 1949;
1954 -> 1952;
1954 -> 1949;
1955 -> 1951;
1955 -> 1954;
1956 -> 1897;
1956 -> 1943;
1957 -> 1894;
1957 -> 1943;
1958 -> 1895;
1958 -> 1943;
1959 -> 1943;
1960 -> 1946;
1960 -> 1959;
1961 -> 1955;
1961 -> 1959;
1962 -> 1956;
1962 -> 1959;
1963 -> 1957;
1963 -> 1959;
1964 -> 1958;
1964 -> 1959;
1965 -> 1896;
1965 -> 1959;
1966 -> 1965;
1966 -> 1902;
1966 -> 1959;
1967 -> 0;
1967 -> 1959;
1968 -> 1959;
1969 -> 1966;
1969 -> 1968;
1970 -> 1967;
1970 -> 1968;
1971 -> 1960;
1971 -> 1959;
1972 -> 1961;
1972 -> 1959;
1973 -> 1962;
1973 -> 1959;
1974 -> 1963;
1974 -> 1959;
1975 -> 1964;
1975 -> 1959;
1976 -> 1959;
1977 -> 1971;
1977 -> 1976;
1978 -> 1972;
1978 -> 1976;
1979 -> 1973;
1979 -> 1976;
1980 -> 1974;
1980 -> 1976;
1981 -> 1975;
1981 -> 1976;
1982 -> 1965;
1982 -> 1976;
1983 -> 1977;
1983 -> 1976;
1984 -> 1978;
1984 -> 1976;
1985 -> 1979;
1985 -> 1976;
1986 -> 1980;
1986 -> 1976;
1987 -> 1981;
1987 -> 1976;
1988 -> 1976;
1989 -> 1983;
1989 -> 1988;
1990 -> 1984;
1990 -> 1988;
1991 -> 1985;
1991 -> 1988;
1992 -> 1986;
1992 -> 1988;
1993 -> 1987;
1993 -> 1988;
1994 -> 1982;
1994 -> 1902;
1994 -> 1988;
1995 -> 1989;
1995 -> 1988;
1996 -> 1994;
1996 -> 1902;
1996 -> 1988;
1997 -> 1990;
1997 -> 1988;
1998 -> 1991;
1998 -> 1988;
1999 -> 1992;
1999 -> 1988;
2000 -> 1993;
2000 -> 1988;
2001 -> 1988;
2002 -> 1995;
2002 -> 2001;
2003 -> 1996;
2003 -> 2001;
2004 -> 1997;
2004 -> 2001;
2005 -> 1998;
2005 -> 2001;
2006 -> 1999;
2006 -> 2001;
2007 -> 2000;
2007 -> 2001;
2008 -> 1994;
2008 -> 2001;
2009 -> 2008;
2009 -> 1902;
2009 -> 2001;
2010 -> 0;
2010 -> 2001;
2011 -> 2001;
2012 -> 2009;
2012 -> 2011;
2013 -> 2010;
2013 -> 2011;
2014 -> 2002;
2014 -> 2001;
2015 -> 2003;
2015 -> 2001;
2016 -> 2004;
2016 -> 2001;
2017 -> 2005;
2017 -> 2001;
2018 -> 2006;
2018 -> 2001;
2019 -> 2007;
2019 -> 2001;
2020 -> 2001;
2021 -> 2014;
2021 -> 2020;
2022 -> 2015;
2022 -> 2020;
2023 -> 2016;
2023 -> 2020;
2024 -> 2017;
2024 -> 2020;
2025 -> 2018;
2025 -> 2020;
2026 -> 2019;
2026 -> 2020;
2027 -> 2021;
2027 -> 2020;
2028 -> 2022;
2028 -> 2020;
2029 -> 2023;
2029 -> 2020;
2030 -> 2024;
2030 -> 2020;
2031 -> 2022;
2031 -> 1902;
2031 -> 2020;
2032 -> 2025;
2032 -> 2020;
2033 -> 2026;
2033 -> 2020;
2034 -> 2020;
2035 -> 2027;
2035 -> 2034;
2036 -> 2028;
2036 -> 2034;
2037 -> 2029;
2037 -> 2034;
2038 -> 2030;
2038 -> 2034;
2039 -> 2031;
2039 -> 2034;
2040 -> 2032;
2040 -> 2034;
2041 -> 2033;
2041 -> 2034;
2042 -> 2034;
2043 -> 2035;
2043 -> 2042;
2043 -> 2034;
2044 -> 2034;
2045 -> 2036;
2045 -> 2044;
2045 -> 2034;
2046 -> 2036;
2046 -> 1902;
2046 -> 2034;
2047 -> 2036;
2047 -> 2034;
2048 -> 2034;
2049 -> 2035;
2049 -> 1802;
2049 -> 1902;
2049 -> 1881;
2049 -> 2034;
2050 -> 2035;
2050 -> 2049;
2051 -> 2036;
2051 -> 2049;
2052 -> 2040;
2052 -> 2049;
2053 -> 2041;
2053 -> 2049;
2054 -> 2049;
2055 -> 2050;
2055 -> 2054;
2056 -> 2051;
2056 -> 2054;
2057 -> 2052;
2057 -> 2054;
2058 -> 2053;
2058 -> 2054;
2059 -> 2056;
2059 -> 2054;
2060 -> 2054;
2061 -> 2055;
2061 -> 2060;
2061 -> 2054;
2062 -> 2056;
2062 -> 1902;
2062 -> 2054;
2063 -> 2054;
2064 -> 2055;
2064 -> 1802;
2064 -> 1902;
2064 -> 1881;
2064 -> 2054;
2065 -> 2055;
2065 -> 1802;
2065 -> 1902;
2065 -> 1881;
2065 -> 2054;
2066 -> 2054;
2067 -> 2065;
2067 -> 2066;
2067 -> 2054;
2068 -> 2067;
2068 -> 2054;
2069 -> 2056;
2069 -> 2068;
2070 -> 2068;
2071 -> 2068;
2071 -> 2070;
2072 -> 2068;
2072 -> 2070;
2073 -> 2069;
2073 -> 2070;
2074 -> 2073;
2074 -> 2070;
2075 -> 2070;
2076 -> 2071;
2076 -> 2075;
2076 -> 2070;
2077 -> 2072;
2077 -> 2070;
2078 -> 2077;
2079 -> 1945;
2079 -> 2078;
2079 -> 1943;
2080 -> 2079;
2081 -> 2080;
2081 -> 2079;
2082 -> 1900;
2082 -> 2079;
2083 -> 1891;
2083 -> 0;
2083 -> 2081;
2084 -> 2081;
2085 -> 1891;
2085 -> 0;
2085 -> 2083;
2086 -> 2083;
2087 -> 1891;
2087 -> 0;
2087 -> 2085;
2088 -> 2085;
2089 -> 1891;
2089 -> 0;
2089 -> 2087;
2090 -> 2087;
2091 -> 1900;
2091 -> 2089;
2092 -> 2089;
2093 -> 2091;
2093 -> 2092;
2094 -> 0;
2094 -> 2092;
2095 -> 2093;
2095 -> 2092;
2096 -> 2092;
2097 -> 2092;
2098 -> 2094;
2098 -> 2097;
2099 -> 2095;
2099 -> 2097;
2100 -> 2096;
2100 -> 2097;
2101 -> 2096;
2101 -> 2097;
2102 -> 2098;
2102 -> 2101;
2102 -> 2097;
2103 -> 2099;
2103 -> 2101;
2103 -> 2097;
2104 -> 2100;
2104 -> 2101;
2104 -> 2097;
2105 -> 2096;
2105 -> 2089;
2106 -> 2105;
2106 -> 1882;
2107 -> 1882;
2108 -> 2106;
2108 -> 2107;
2109 -> 1858;
2109 -> 2107;
2110 -> 2107;
2111 -> 2109;
2111 -> 2110;
2112 -> 2111;
2112 -> 2107;
2113 -> 2112;
2113 -> 2108;
2113 -> 2102;
2113 -> 2107;
2114 -> 2113;
2115 -> 2114;
2115 -> 2113;
2116 -> 2108;
2116 -> 2115;
2117 -> 2115;
2118 -> 2116;
2118 -> 2117;
2119 -> 2109;
2119 -> 2117;
2120 -> 2118;
2120 -> 2102;
2120 -> 2119;
2120 -> 2117;
2121 -> 2119;
2121 -> 1578;
2121 -> 2120;
2121 -> 2117;
2122 -> 2118;
2122 -> 2103;
2122 -> 2117;
2123 -> 2119;
2123 -> 2121;
2123 -> 2122;
2123 -> 2082;
2123 -> 2117;
2124 -> 2118;
2124 -> 2104;
2124 -> 2119;
2124 -> 2117;
2125 -> 2115;
2126 -> 1882;
2127 -> 1882;
2127 -> 2123;
2127 -> 2124;
2127 -> 1857;
2128 -> 1848;
2129 -> 1807;
2130 -> 1807;
2131 -> 1754;
2131 -> 2130;
2132 -> 2131;
2132 -> 2123;
2132 -> 2130;
2133 -> 2132;
2133 -> 1807;
2134 -> 2133;
2135 -> 1756;
2135 -> 2134;
2135 -> 2133;
2136 -> 1755;
2136 -> 2133;
2137 -> 2133;
2138 -> 1759;
2138 -> 2137;
2139 -> 2138;
2139 -> 2123;
2139 -> 2137;
2140 -> 0;
2140 -> 2137;
2141 -> 2137;
2142 -> 2139;
2142 -> 2141;
2143 -> 2140;
2143 -> 2141;
2144 -> 2142;
2144 -> 2133;
2145 -> 2133;
2146 -> 2136;
2146 -> 2145;
2147 -> 2144;
2147 -> 2145;
2148 -> 1803;
2148 -> 2145;
2149 -> 2145;
2150 -> 2149;
2150 -> 2145;
2151 -> 2146;
2151 -> 2145;
2152 -> 2149;
2152 -> 2145;
2153 -> 2148;
2153 -> 2123;
2153 -> 2151;
2153 -> 2152;
2153 -> 2124;
2153 -> 2150;
2153 -> 2145;
2154 -> 2145;
2155 -> 2154;
2155 -> 2133;
2156 -> 2135;
2156 -> 2155;
2156 -> 2133;
2157 -> 2133;
2158 -> 1748;
2159 -> 1644;
2159 -> 2158;
2160 -> 2159;
2160 -> 2153;
2160 -> 0;
2160 -> 2158;
2161 -> 2160;
2161 -> 1748;
2162 -> 1748;
2162 -> 2161;
2163 -> 1648;
2163 -> 0;
2163 -> 1748;
2164 -> 1748;
2165 -> 2162;
2165 -> 1643;
2166 -> 1615;
2167 -> 1531;
2167 -> 1529;
2168 -> 1530;
2168 -> 1529;
2169 -> 2057;
2169 -> 1529;
2170 -> 2167;
2170 -> 2168;
2170 -> 2169;
2170 -> 2153;
2170 -> 1529;
2171 -> 1529;
2172 -> 1529;
2173 -> 1534;
2173 -> 2172;
2173 -> 1529;
2174 -> 1586;
2174 -> 1529;
2175 -> 1529;
2176 -> 2174;
2176 -> 2175;
2177 -> 2175;
2178 -> 2176;
2178 -> 2177;
2179 -> 2177;
2180 -> 2178;
2180 -> 2179;
2181 -> 2180;
2181 -> 2170;
2181 -> 2179;
2182 -> 2181;
2182 -> 2175;
2183 -> 2175;
2184 -> 2176;
2184 -> 2183;
2185 -> 2184;
2185 -> 2170;
2185 -> 2183;
2186 -> 2185;
2186 -> 2175;
2187 -> 2186;
2187 -> 2170;
2188 -> 2187;
2189 -> 2171;
2189 -> 1529;
2190 -> 2189;
2191 -> 1586;
2191 -> 2189;
2192 -> 1536;
2192 -> 2189;
2193 -> 2189;
2194 -> 1530;
2194 -> 2189;
2195 -> 1531;
2195 -> 2189;
2196 -> 1533;
2196 -> 2189;
2197 -> 2190;
2197 -> 2189;
2198 -> 1534;
2198 -> 2189;
2199 -> 1593;
2199 -> 2189;
2200 -> 2189;
2201 -> 2191;
2201 -> 2200;
2202 -> 2192;
2202 -> 2200;
2203 -> 2193;
2203 -> 2200;
2204 -> 2194;
2204 -> 2200;
2205 -> 2195;
2205 -> 2200;
2206 -> 2196;
2206 -> 2200;
2207 -> 2197;
2207 -> 2200;
2208 -> 2198;
2208 -> 2200;
2209 -> 2199;
2209 -> 2200;
2210 -> 1535;
2210 -> 2200;
2211 -> 2201;
2211 -> 2200;
2212 -> 2202;
2212 -> 2200;
2213 -> 2203;
2213 -> 2200;
2214 -> 2204;
2214 -> 2200;
2215 -> 2205;
2215 -> 2200;
2216 -> 2206;
2216 -> 2200;
2217 -> 2207;
2217 -> 2200;
2218 -> 2208;
2218 -> 2200;
2219 -> 2209;
2219 -> 2200;
2220 -> 2200;
2221 -> 2211;
2221 -> 2220;
2222 -> 2212;
2222 -> 2220;
2223 -> 2213;
2223 -> 2220;
2224 -> 2214;
2224 -> 2220;
2225 -> 2215;
2225 -> 2220;
2226 -> 2216;
2226 -> 2220;
2227 -> 2217;
2227 -> 2220;
2228 -> 2218;
2228 -> 2220;
2229 -> 2219;
2229 -> 2220;
2230 -> 2210;
2230 -> 2220;
2231 -> 2220;
2232 -> 2224;
2232 -> 2231;
2232 -> 2220;
2233 -> 2220;
2234 -> 2225;
2234 -> 2233;
2234 -> 2220;
2235 -> 2220;
2236 -> 2221;
2236 -> 2235;
2237 -> 2236;
2237 -> 2170;
2237 -> 2235;
2238 -> 2237;
2238 -> 2220;
2239 -> 2220;
2240 -> 2220;
2241 -> 2221;
2241 -> 2240;
2242 -> 2240;
2243 -> 2241;
2243 -> 2242;
2244 -> 2243;
2244 -> 2170;
2244 -> 2242;
2245 -> 2244;
2245 -> 2220;
2246 -> 2245;
2247 -> 2238;
2247 -> 2170;
2247 -> 2246;
2247 -> 2245;
2248 -> 2247;
2249 -> 2248;
2249 -> 2247;
2250 -> 2247;
2251 -> 2249;
2251 -> 2250;
2251 -> 2247;
2252 -> 2249;
2252 -> 2248;
2252 -> 0;
2252 -> 2247;
2253 -> 2248;
2253 -> 0;
2253 -> 2251;
2254 -> 2253;
2254 -> 2230;
2254 -> 2248;
2254 -> 2251;
2255 -> 2226;
2255 -> 2251;
2256 -> 2248;
2256 -> 0;
2256 -> 2255;
2257 -> 2248;
2257 -> 2247;
2258 -> 2257;
2258 -> 2248;
2258 -> 0;
2258 -> 2200;
2259 -> 2204;
2259 -> 2258;
2260 -> 2258;
2261 -> 2257;
2261 -> 2258;
2262 -> 2205;
2262 -> 2258;
2263 -> 2258;
2264 -> 2259;
2264 -> 2263;
2265 -> 2260;
2265 -> 2263;
2266 -> 2261;
2266 -> 2263;
2267 -> 2262;
2267 -> 2263;
2268 -> 2210;
2268 -> 2263;
2269 -> 2266;
2269 -> 2248;
2269 -> 2263;
2270 -> 2263;
2271 -> 2257;
2271 -> 2200;
2272 -> 2271;
2272 -> 2248;
2272 -> 0;
2272 -> 2189;
2273 -> 1529;
2274 -> 1586;
2274 -> 2273;
2275 -> 2273;
2276 -> 2274;
2276 -> 2275;
2277 -> 0;
2277 -> 2276;
2277 -> 2275;
2278 -> 2276;
2278 -> 2248;
2278 -> 2277;
2278 -> 2275;
2279 -> 2275;
2280 -> 2279;
2280 -> 2276;
2280 -> 2275;
2281 -> 2273;
2282 -> 2273;
2283 -> 2274;
2283 -> 2278;
2283 -> 2282;
2283 -> 2273;
2284 -> 2274;
2284 -> 2283;
2285 -> 2274;
2285 -> 2278;
2285 -> 2284;
2285 -> 2280;
2285 -> 2283;
2286 -> 1529;
2287 -> 1530;
2287 -> 2285;
2287 -> 1529;
2288 -> 1529;
2289 -> 2287;
2289 -> 2288;
2290 -> 1535;
2290 -> 2288;
2291 -> 2289;
2291 -> 2285;
2291 -> 2288;
2292 -> 2289;
2292 -> 2285;
2292 -> 2288;
2293 -> 2288;
2294 -> 2292;
2294 -> 2293;
2295 -> 2292;
2295 -> 2293;
2296 -> 2290;
2296 -> 2293;
2297 -> 2294;
2297 -> 2293;
2298 -> 2295;
2298 -> 2293;
2299 -> 2297;
2299 -> 2298;
2299 -> 2291;
2299 -> 2293;
2300 -> 2299;
2300 -> 2293;
2301 -> 2296;
2301 -> 2299;
2301 -> 2300;
2302 -> 0;
2302 -> 2300;
2303 -> 2300;
2304 -> 2296;
2304 -> 2303;
2305 -> 2304;
2305 -> 2301;
2305 -> 2303;
2306 -> 2303;
2307 -> 2304;
2307 -> 2305;
2307 -> 2306;
2308 -> 2307;
2308 -> 2306;
2309 -> 2306;
2310 -> 2308;
2310 -> 2309;
2311 -> 2310;
2311 -> 2307;
2311 -> 2309;
2312 -> 2311;
2313 -> 2312;
2313 -> 2306;
2314 -> 2313;
2314 -> 2306;
2315 -> 2271;
2315 -> 1529;
2316 -> 1529;
2317 -> 2314;
2317 -> 2316;
2318 -> 2315;
2318 -> 2316;
2319 -> 2318;
2319 -> 2316;
2320 -> 2318;
2320 -> 2316;
2321 -> 2320;
2321 -> 2316;
2322 -> 2321;
2322 -> 2316;
2323 -> 2317;
2323 -> 2322;
2324 -> 2322;
2325 -> 2323;
2325 -> 2324;
2326 -> 2322;
2326 -> 2324;
2327 -> 2325;
2327 -> 2323;
2327 -> 2324;
2328 -> 2325;
2328 -> 2326;
2328 -> 2324;
2329 -> 2324;
2330 -> 2329;
2330 -> 2326;
2330 -> 2324;
2331 -> 2324;
2332 -> 2331;
2332 -> 2326;
2332 -> 2324;
2333 -> 1504;
2334 -> 2322;
2334 -> 2333;
2335 -> 2334;
2335 -> 2328;
2335 -> 2323;
2335 -> 2333;
2336 -> 2335;
2336 -> 1504;
2337 -> 2336;
2338 -> 2337;
2338 -> 2336;
2339 -> 2338;
2340 -> 2322;
2340 -> 2339;
2341 -> 2340;
2341 -> 2328;
2341 -> 2339;
2342 -> 2341;
2342 -> 2338;
2343 -> 1509;
2343 -> 2338;
2344 -> 1505;
2344 -> 2338;
2345 -> 1506;
2345 -> 2338;
2346 -> 2338;
2347 -> 2342;
2347 -> 2346;
2348 -> 2342;
2348 -> 2346;
2349 -> 2342;
2349 -> 2346;
2350 -> 2342;
2350 -> 2346;
2351 -> 2342;
2351 -> 2346;
2352 -> 2347;
2352 -> 2346;
2353 -> 2348;
2353 -> 2346;
2354 -> 2349;
2354 -> 2346;
2355 -> 2350;
2355 -> 2346;
2356 -> 2346;
2357 -> 2352;
2357 -> 2356;
2358 -> 2353;
2358 -> 2356;
2359 -> 2354;
2359 -> 2356;
2360 -> 2355;
2360 -> 2356;
2361 -> 2351;
2361 -> 2356;
2362 -> 2358;
2362 -> 2342;
2362 -> 2356;
2363 -> 2357;
2363 -> 2362;
2364 -> 2358;
2364 -> 2362;
2365 -> 2359;
2365 -> 2362;
2366 -> 2360;
2366 -> 2362;
2367 -> 2362;
2368 -> 2361;
2368 -> 2367;
2369 -> 2368;
2369 -> 2342;
2369 -> 2367;
2370 -> 2369;
2370 -> 2362;
2371 -> 2362;
2372 -> 2361;
2372 -> 2371;
2373 -> 2371;
2374 -> 2372;
2374 -> 2373;
2375 -> 2374;
2375 -> 2342;
2375 -> 2373;
2376 -> 2375;
2376 -> 2371;
2377 -> 2376;
2377 -> 2371;
2378 -> 2376;
2378 -> 2342;
2378 -> 0;
2378 -> 2371;
2379 -> 2376;
2379 -> 2371;
2380 -> 2376;
2380 -> 2371;
2381 -> 2380;
2381 -> 2362;
2382 -> 2361;
2382 -> 2342;
2382 -> 2362;
2383 -> 2362;
2384 -> 2363;
2384 -> 2383;
2385 -> 2364;
2385 -> 2383;
2386 -> 2365;
2386 -> 2383;
2387 -> 2366;
2387 -> 2383;
2388 -> 2370;
2388 -> 2383;
2389 -> 2381;
2389 -> 2383;
2390 -> 2382;
2390 -> 2383;
2391 -> 2385;
2391 -> 2383;
2392 -> 2385;
2392 -> 2391;
2392 -> 0;
2392 -> 2383;
2393 -> 2385;
2393 -> 2391;
2393 -> 0;
2393 -> 2383;
2394 -> 2385;
2394 -> 2383;
2395 -> 2389;
2395 -> 2383;
2396 -> 2394;
2396 -> 2395;
2396 -> 2391;
2396 -> 2383;
2397 -> 2387;
2397 -> 2383;
2398 -> 2397;
2398 -> 2383;
2399 -> 2384;
2399 -> 2383;
2400 -> 2396;
2400 -> 2383;
2401 -> 2386;
2401 -> 2383;
2402 -> 2388;
2402 -> 2383;
2403 -> 2390;
2403 -> 2383;
2404 -> 2383;
2405 -> 2399;
2405 -> 2404;
2406 -> 2400;
2406 -> 2404;
2407 -> 2401;
2407 -> 2404;
2408 -> 2402;
2408 -> 2404;
2409 -> 2403;
2409 -> 2404;
2410 -> 2404;
2411 -> 2405;
2411 -> 2410;
2411 -> 2404;
2412 -> 2406;
2412 -> 2404;
2413 -> 2408;
2413 -> 2404;
2414 -> 2404;
2415 -> 2412;
2415 -> 2413;
2415 -> 2414;
2415 -> 2396;
2415 -> 2404;
2416 -> 2404;
2417 -> 2415;
2417 -> 2404;
2418 -> 2404;
2419 -> 2416;
2419 -> 2418;
2419 -> 2404;
2420 -> 2415;
2420 -> 2404;
2421 -> 2420;
2421 -> 2383;
2422 -> 2397;
2422 -> 2421;
2423 -> 2362;
2424 -> 2346;
2425 -> 2322;
2425 -> 2336;
2426 -> 2425;
2426 -> 922;
2427 -> 1496;
2427 -> 922;
2428 -> 1495;
2428 -> 922;
2429 -> 1497;
2429 -> 922;
2430 -> 922;
2431 -> 2426;
2431 -> 2430;
2432 -> 2427;
2432 -> 2430;
2433 -> 2428;
2433 -> 2430;
2434 -> 2429;
2434 -> 2430;
2435 -> 1499;
2435 -> 2430;
2436 -> 2430;
2437 -> 2431;
2437 -> 2436;
2438 -> 2437;
2438 -> 2330;
2438 -> 2436;
2439 -> 2438;
2439 -> 0;
2439 -> 2436;
2440 -> 2439;
2440 -> 2430;
2441 -> 2431;
2441 -> 2430;
2442 -> 922;
2443 -> 2441;
2443 -> 2442;
2444 -> 2443;
2444 -> 2328;
2444 -> 2442;
2445 -> 948;
2445 -> 2444;
2445 -> 2415;
2445 -> 2323;
2445 -> 919;
2446 -> 1521;
2446 -> 2445;
2447 -> 2446;
2447 -> 2445;
2448 -> 2445;
2449 -> 2445;
2450 -> 2445;
2451 -> 2449;
2451 -> 2450;
2452 -> 2449;
2452 -> 2450;
2453 -> 2449;
2453 -> 2450;
2454 -> 2449;
2454 -> 2450;
2455 -> 2449;
2455 -> 2450;
2456 -> 2445;
2456 -> 2450;
2457 -> 2450;
2458 -> 2452;
2458 -> 2457;
2458 -> 2450;
2459 -> 2450;
2460 -> 2459;
2460 -> 2445;
2461 -> 2445;
2462 -> 2460;
2462 -> 2461;
2462 -> 2445;
2463 -> 2445;
2464 -> 2445;
2464 -> 2463;
2465 -> 2464;
2465 -> 2445;
2465 -> 0;
2465 -> 2463;
2466 -> 2463;
2467 -> 2464;
2467 -> 2445;
2467 -> 2466;
2467 -> 2463;
2468 -> 2465;
2468 -> 2445;
2469 -> 2445;
2470 -> 2445;
2471 -> 2445;
2472 -> 2470;
2472 -> 2445;
2473 -> 2471;
2473 -> 2445;
2474 -> 2472;
2474 -> 2445;
2475 -> 2473;
2475 -> 2445;
2476 -> 2445;
2477 -> 2445;
2477 -> 2476;
2478 -> 2477;
2478 -> 2445;
2478 -> 0;
2478 -> 2476;
2479 -> 2476;
2480 -> 2477;
2480 -> 2445;
2480 -> 2479;
2480 -> 2476;
2481 -> 2478;
2481 -> 2445;
2482 -> 2472;
2482 -> 2445;
2483 -> 2445;
2484 -> 2482;
2484 -> 2483;
2485 -> 2484;
2485 -> 0;
2485 -> 2483;
2486 -> 2484;
2486 -> 0;
2486 -> 2483;
2487 -> 2483;
2488 -> 0;
2488 -> 2483;
2489 -> 2484;
2489 -> 2488;
2489 -> 2483;
2490 -> 0;
2490 -> 2483;
2491 -> 2484;
2491 -> 2490;
2491 -> 2483;
2492 -> 2483;
2493 -> 0;
2493 -> 2483;
2494 -> 2484;
2494 -> 2493;
2494 -> 2483;
2495 -> 2494;
2495 -> 2483;
2496 -> 2483;
2497 -> 2495;
2497 -> 2496;
2498 -> 2496;
2499 -> 2497;
2499 -> 2498;
2499 -> 2496;
2500 -> 2445;
2501 -> 2445;
2502 -> 2474;
2502 -> 2445;
2503 -> 2474;
2503 -> 2445;
2504 -> 2474;
2504 -> 2445;
2505 -> 2445;
2506 -> 2475;
2506 -> 2445;
2507 -> 2445;
2508 -> 2445;
2509 -> 2445;
2509 -> 2508;
2510 -> 2509;
2510 -> 2445;
2510 -> 0;
2510 -> 2508;
2511 -> 2508;
2512 -> 2509;
2512 -> 2445;
2512 -> 2511;
2512 -> 2508;
2513 -> 2510;
2513 -> 2445;
2514 -> 2472;
2514 -> 0;
2514 -> 2445;
2515 -> 2445;
2516 -> 2445;
2517 -> 2474;
2517 -> 2445;
2518 -> 2474;
2518 -> 2445;
2519 -> 2474;
2519 -> 2445;
2520 -> 2445;
2521 -> 2475;
2521 -> 2445;
2522 -> 2445;
2523 -> 2516;
2523 -> 2522;
2524 -> 2523;
2524 -> 2445;
2524 -> 0;
2524 -> 2522;
2525 -> 2522;
2526 -> 2523;
2526 -> 2445;
2526 -> 2525;
2526 -> 2522;
2527 -> 2524;
2527 -> 2445;
2528 -> 2445;
2529 -> 2445;
2529 -> 2528;
2530 -> 0;
2530 -> 2528;
2531 -> 2530;
2531 -> 2445;
2532 -> 2519;
2532 -> 2531;
2532 -> 2445;
2533 -> 2445;
2534 -> 2474;
2534 -> 2445;
2535 -> 2475;
2535 -> 2445;
2536 -> 2445;
2537 -> 2445;
2537 -> 2536;
2538 -> 2537;
2538 -> 2445;
2538 -> 0;
2538 -> 2536;
2539 -> 2536;
2540 -> 2537;
2540 -> 2445;
2540 -> 2539;
2540 -> 2536;
2541 -> 2538;
2541 -> 2445;
2542 -> 2445;
2543 -> 2445;
2543 -> 2542;
2544 -> 2543;
2544 -> 2445;
2544 -> 0;
2544 -> 2542;
2545 -> 2544;
2545 -> 2445;
2546 -> 2445;
2547 -> 2535;
2547 -> 2474;
2548 -> 2534;
2548 -> 2474;
2549 -> 2474;
2550 -> 2547;
2550 -> 2474;
2551 -> 2445;
2551 -> 2474;
2552 -> 2474;
2553 -> 2474;
2554 -> 2552;
2554 -> 2553;
2555 -> 2554;
2555 -> 0;
2555 -> 2553;
2556 -> 2554;
2556 -> 0;
2556 -> 2553;
2557 -> 2553;
2558 -> 0;
2558 -> 2553;
2559 -> 2554;
2559 -> 2558;
2559 -> 2553;
2560 -> 0;
2560 -> 2553;
2561 -> 2554;
2561 -> 2560;
2561 -> 2553;
2562 -> 2553;
2563 -> 0;
2563 -> 2553;
2564 -> 2554;
2564 -> 2563;
2564 -> 2553;
2565 -> 2564;
2565 -> 2553;
2566 -> 2553;
2567 -> 2565;
2567 -> 2566;
2568 -> 2566;
2569 -> 2567;
2569 -> 2568;
2569 -> 2566;
2570 -> 2474;
2571 -> 2548;
2571 -> 2570;
2571 -> 2474;
2572 -> 2548;
2572 -> 2474;
2573 -> 2550;
2573 -> 2474;
2574 -> 2548;
2574 -> 2474;
2575 -> 2572;
2575 -> 2474;
2576 -> 2474;
2577 -> 2573;
2577 -> 2474;
2578 -> 2474;
2579 -> 2474;
2580 -> 2474;
2581 -> 2577;
2581 -> 2548;
2582 -> 2580;
2582 -> 2548;
2583 -> 2548;
2584 -> 2575;
2584 -> 2548;
2585 -> 2581;
2585 -> 2548;
2586 -> 2548;
2587 -> 2582;
2587 -> 2548;
2588 -> 2583;
2588 -> 2445;
2588 -> 2548;
2588 -> 2474;
2589 -> 2588;
2590 -> 2584;
2590 -> 2589;
2590 -> 2588;
2591 -> 2586;
2591 -> 0;
2591 -> 2588;
2592 -> 2590;
2592 -> 2591;
2592 -> 2588;
2593 -> 2583;
2593 -> 2592;
2594 -> 2593;
2594 -> 2445;
2594 -> 2548;
2594 -> 2474;
2594 -> 2592;
2595 -> 2593;
2595 -> 2592;
2596 -> 2593;
2596 -> 2445;
2596 -> 2548;
2596 -> 2474;
2596 -> 2584;
2596 -> 2592;
2597 -> 2586;
2597 -> 2592;
2598 -> 2592;
2599 -> 2597;
2599 -> 2598;
2600 -> 2596;
2600 -> 2599;
2600 -> 2592;
2601 -> 2548;
2602 -> 2576;
2602 -> 2548;
2603 -> 2548;
2604 -> 2548;
2604 -> 2603;
2605 -> 2602;
2605 -> 2603;
2606 -> 2604;
2606 -> 0;
2606 -> 2603;
2607 -> 2603;
2608 -> 2606;
2608 -> 2603;
2609 -> 2605;
2609 -> 2608;
2610 -> 2579;
2610 -> 2548;
2611 -> 2578;
2611 -> 2548;
2612 -> 2609;
2612 -> 2548;
2613 -> 2610;
2613 -> 2548;
2614 -> 2611;
2614 -> 2548;
2615 -> 2548;
2616 -> 2615;
2616 -> 2548;
2617 -> 0;
2617 -> 2548;
2618 -> 2548;
2619 -> 2616;
2619 -> 2618;
2620 -> 2617;
2620 -> 2618;
2621 -> 2612;
2621 -> 2548;
2622 -> 2613;
2622 -> 2548;
2623 -> 2614;
2623 -> 2548;
2624 -> 2615;
2624 -> 2548;
2625 -> 2621;
2625 -> 2548;
2626 -> 2622;
2626 -> 2548;
2627 -> 2623;
2627 -> 2548;
2628 -> 2624;
2628 -> 2548;
2629 -> 2628;
2629 -> 2548;
2630 -> 2625;
2630 -> 2548;
2631 -> 2626;
2631 -> 2548;
2632 -> 2627;
2632 -> 2548;
2633 -> 2628;
2633 -> 2548;
2634 -> 2633;
2634 -> 2548;
2635 -> 0;
2635 -> 2548;
2636 -> 2548;
2637 -> 2634;
2637 -> 2636;
2638 -> 2635;
2638 -> 2636;
2639 -> 2629;
2639 -> 2548;
2640 -> 2630;
2640 -> 2548;
2641 -> 2631;
2641 -> 2548;
2642 -> 2632;
2642 -> 2548;
2643 -> 2639;
2643 -> 2548;
2644 -> 2640;
2644 -> 2548;
2645 -> 2641;
2645 -> 2548;
2646 -> 2639;
2646 -> 2548;
2647 -> 2642;
2647 -> 2548;
2648 -> 2548;
2649 -> 2548;
2650 -> 2643;
2650 -> 2649;
2650 -> 2548;
2651 -> 2643;
2651 -> 2548;
2652 -> 2643;
2652 -> 2548;
2653 -> 2548;
2654 -> 2643;
2654 -> 2548;
2655 -> 2647;
2655 -> 2548;
2656 -> 2654;
2656 -> 2548;
2657 -> 2548;
2658 -> 2654;
2658 -> 2548;
2659 -> 2548;
2660 -> 2548;
2660 -> 2445;
2660 -> 2474;
2661 -> 2548;
2662 -> 2654;
2662 -> 2548;
2663 -> 2662;
2663 -> 2548;
2664 -> 2548;
2665 -> 2661;
2665 -> 2664;
2665 -> 2548;
2666 -> 2572;
2667 -> 2445;
2667 -> 2666;
2668 -> 2667;
2668 -> 2572;
2668 -> 2666;
2669 -> 0;
2669 -> 2666;
2670 -> 2666;
2671 -> 2668;
2671 -> 2670;
2672 -> 2669;
2672 -> 2670;
2673 -> 2671;
2673 -> 2572;
2674 -> 2572;
2675 -> 2572;
2676 -> 2509;
2676 -> 2572;
2676 -> 0;
2676 -> 2508;
2677 -> 2676;
2677 -> 2445;
2678 -> 2445;
2678 -> 2677;
2679 -> 2678;
2679 -> 2445;
2680 -> 2445;
2681 -> 2445;
2682 -> 2680;
2682 -> 2681;
2683 -> 2681;
2684 -> 2682;
2684 -> 2683;
2685 -> 2684;
2685 -> 2572;
2685 -> 2683;
2686 -> 2685;
2686 -> 2681;
2687 -> 2681;
2688 -> 2682;
2688 -> 2687;
2689 -> 2688;
2689 -> 2572;
2689 -> 2687;
2690 -> 2689;
2690 -> 2681;
2691 -> 2690;
2691 -> 2572;
2692 -> 2691;
2693 -> 2445;
2694 -> 2445;
2695 -> 2445;
2696 -> 2445;
2697 -> 2445;
2698 -> 2447;
2698 -> 2445;
2699 -> 2693;
2699 -> 2445;
2700 -> 2693;
2700 -> 2445;
2701 -> 2693;
2701 -> 2445;
2702 -> 2445;
2703 -> 2445;
2704 -> 2696;
2704 -> 2703;
2704 -> 2445;
2705 -> 2445;
2706 -> 2697;
2706 -> 2705;
2706 -> 2445;
2707 -> 2445;
2708 -> 2572;
2709 -> 2572;
2710 -> 2708;
2710 -> 2709;
2710 -> 2572;
2711 -> 2708;
2711 -> 2572;
2711 -> 0;
2712 -> 2572;
2712 -> 0;
2712 -> 2710;
2713 -> 2712;
2713 -> 2702;
2713 -> 2572;
2713 -> 2710;
2714 -> 2698;
2714 -> 2710;
2715 -> 2572;
2715 -> 0;
2715 -> 2714;
2716 -> 2572;
2716 -> 0;
2716 -> 2445;
2717 -> 2696;
2717 -> 2716;
2718 -> 2716;
2719 -> 2572;
2719 -> 2716;
2720 -> 2697;
2720 -> 2716;
2721 -> 2716;
2722 -> 2717;
2722 -> 2721;
2723 -> 2718;
2723 -> 2721;
2724 -> 2719;
2724 -> 2721;
2725 -> 2720;
2725 -> 2721;
2726 -> 2702;
2726 -> 2721;
2727 -> 2724;
2727 -> 2572;
2727 -> 2721;
2728 -> 2721;
2729 -> 2572;
2729 -> 0;
2729 -> 2445;
2730 -> 2445;
2731 -> 2445;
2732 -> 2572;
2732 -> 2445;
2733 -> 2572;
2734 -> 2572;
2735 -> 2734;
2735 -> 2572;
2736 -> 2572;
2737 -> 2736;
2737 -> 2572;
2738 -> 2572;
2739 -> 2572;
2740 -> 2572;
2741 -> 2738;
2741 -> 2572;
2742 -> 2739;
2742 -> 2572;
2743 -> 2740;
2743 -> 2572;
2744 -> 2742;
2744 -> 2738;
2745 -> 2743;
2745 -> 2738;
2746 -> 2738;
2747 -> 2738;
2747 -> 2572;
2747 -> 0;
2748 -> 2738;
2749 -> 2741;
2749 -> 2738;
2750 -> 2744;
2750 -> 2738;
2751 -> 2745;
2751 -> 2738;
2752 -> 2741;
2752 -> 2738;
2753 -> 2738;
2753 -> 0;
2754 -> 2738;
2754 -> 0;
2755 -> 2751;
2755 -> 2738;
2756 -> 2755;
2756 -> 2738;
2757 -> 2749;
2757 -> 2738;
2758 -> 2750;
2758 -> 2738;
2759 -> 2752;
2759 -> 2738;
2760 -> 2738;
2761 -> 2757;
2761 -> 2760;
2761 -> 2738;
2762 -> 2738;
2763 -> 2738;
2764 -> 2738;
2765 -> 2762;
2765 -> 2764;
2765 -> 2738;
2766 -> 2738;
2767 -> 2766;
2767 -> 2738;
2768 -> 2755;
2768 -> 2767;
2769 -> 2572;
2769 -> 2436;
2770 -> 2769;
2770 -> 2735;
2770 -> 2436;
2771 -> 2770;
2771 -> 0;
2771 -> 2436;
2772 -> 2771;
2772 -> 2430;
2773 -> 2738;
2773 -> 1172;
2773 -> 1166;
2774 -> 1170;
2774 -> 2738;
2774 -> 1166;
2775 -> 1310;
2775 -> 1217;
2776 -> 2738;
2776 -> 1241;
2777 -> 2738;
2777 -> 1264;
2778 -> 2738;
2778 -> 1264;
2779 -> 2778;
2779 -> 2738;
2779 -> 2777;
2779 -> 1264;
2780 -> 2779;
2780 -> 1466;
2781 -> 2780;
2781 -> 1479;
2782 -> 2779;
2782 -> 1466;
2783 -> 2782;
2783 -> 1484;
2784 -> 1516;
2784 -> 1508;
2784 -> 1504;
2785 -> 2784;
2785 -> 1517;
2786 -> 2785;
2786 -> 2779;
2787 -> 2786;
2787 -> 2779;
2788 -> 2779;
2789 -> 2779;
2790 -> 2779;
2791 -> 2789;
2791 -> 2790;
2792 -> 2789;
2792 -> 2790;
2793 -> 2789;
2793 -> 2790;
2794 -> 2789;
2794 -> 2790;
2795 -> 2789;
2795 -> 2790;
2796 -> 2779;
2796 -> 2790;
2797 -> 2790;
2798 -> 2792;
2798 -> 2797;
2798 -> 2790;
2799 -> 2790;
2800 -> 2799;
2800 -> 2779;
2801 -> 2779;
2802 -> 2800;
2802 -> 2801;
2802 -> 2779;
2803 -> 2779;
2804 -> 2779;
2804 -> 2803;
2805 -> 2804;
2805 -> 2779;
2805 -> 0;
2805 -> 2803;
2806 -> 2803;
2807 -> 2804;
2807 -> 2779;
2807 -> 2806;
2807 -> 2803;
2808 -> 2805;
2808 -> 2779;
2809 -> 2779;
2810 -> 2779;
2811 -> 2810;
2811 -> 2779;
2812 -> 2811;
2812 -> 2779;
2813 -> 2779;
2814 -> 2779;
2814 -> 2813;
2815 -> 2814;
2815 -> 2779;
2815 -> 0;
2815 -> 2813;
2816 -> 2813;
2817 -> 2814;
2817 -> 2779;
2817 -> 2816;
2817 -> 2813;
2818 -> 2815;
2818 -> 2779;
2819 -> 2779;
2820 -> 2779;
2821 -> 2819;
2821 -> 2820;
2822 -> 2821;
2822 -> 0;
2822 -> 2820;
2823 -> 2821;
2823 -> 0;
2823 -> 2820;
2824 -> 2820;
2825 -> 0;
2825 -> 2820;
2826 -> 2821;
2826 -> 2825;
2826 -> 2820;
2827 -> 0;
2827 -> 2820;
2828 -> 2821;
2828 -> 2827;
2828 -> 2820;
2829 -> 2820;
2830 -> 0;
2830 -> 2820;
2831 -> 2821;
2831 -> 2830;
2831 -> 2820;
2832 -> 2831;
2832 -> 2820;
2833 -> 2820;
2834 -> 2832;
2834 -> 2833;
2835 -> 2833;
2836 -> 2834;
2836 -> 2835;
2836 -> 2833;
2837 -> 2779;
2838 -> 2779;
2839 -> 2779;
2840 -> 2779;
2841 -> 2779;
2842 -> 2779;
2843 -> 2812;
2843 -> 2779;
2844 -> 2779;
2845 -> 2779;
2846 -> 2779;
2846 -> 2845;
2847 -> 2846;
2847 -> 2779;
2847 -> 0;
2847 -> 2845;
2848 -> 2845;
2849 -> 2846;
2849 -> 2779;
2849 -> 2848;
2849 -> 2845;
2850 -> 2847;
2850 -> 2779;
2851 -> 2779;
2851 -> 0;
2852 -> 2779;
2853 -> 2779;
2854 -> 2779;
2855 -> 2779;
2856 -> 2779;
2857 -> 2779;
2858 -> 2812;
2858 -> 2779;
2859 -> 2779;
2860 -> 2853;
2860 -> 2859;
2861 -> 2860;
2861 -> 2779;
2861 -> 0;
2861 -> 2859;
2862 -> 2859;
2863 -> 2860;
2863 -> 2779;
2863 -> 2862;
2863 -> 2859;
2864 -> 2861;
2864 -> 2779;
2865 -> 2779;
2866 -> 2779;
2866 -> 2865;
2867 -> 0;
2867 -> 2865;
2868 -> 2867;
2868 -> 2779;
2869 -> 2856;
2869 -> 2868;
2869 -> 2779;
2870 -> 2779;
2871 -> 2812;
2871 -> 2779;
2872 -> 2779;
2873 -> 2779;
2873 -> 2872;
2874 -> 2873;
2874 -> 2779;
2874 -> 0;
2874 -> 2872;
2875 -> 2872;
2876 -> 2873;
2876 -> 2779;
2876 -> 2875;
2876 -> 2872;
2877 -> 2874;
2877 -> 2779;
2878 -> 2779;
2879 -> 2779;
2879 -> 2878;
2880 -> 2879;
2880 -> 2779;
2880 -> 0;
2880 -> 2878;
2881 -> 2880;
2881 -> 2779;
2882 -> 2779;
2883 -> 2779;
2884 -> 2871;
2884 -> 2779;
2885 -> 2779;
2886 -> 2779;
2887 -> 2779;
2888 -> 2886;
2888 -> 2887;
2889 -> 2888;
2889 -> 0;
2889 -> 2887;
2890 -> 2888;
2890 -> 0;
2890 -> 2887;
2891 -> 2887;
2892 -> 0;
2892 -> 2887;
2893 -> 2888;
2893 -> 2892;
2893 -> 2887;
2894 -> 0;
2894 -> 2887;
2895 -> 2888;
2895 -> 2894;
2895 -> 2887;
2896 -> 2887;
2897 -> 0;
2897 -> 2887;
2898 -> 2888;
2898 -> 2897;
2898 -> 2887;
2899 -> 2898;
2899 -> 2887;
2900 -> 2887;
2901 -> 2899;
2901 -> 2900;
2902 -> 2900;
2903 -> 2901;
2903 -> 2902;
2903 -> 2900;
2904 -> 2779;
2905 -> 2884;
2905 -> 2779;
2906 -> 2779;
2907 -> 2779;
2908 -> 2779;
2909 -> 2905;
2909 -> 2779;
2910 -> 2779;
2911 -> 2779;
2912 -> 2779;
2913 -> 2779;
2914 -> 2907;
2914 -> 2779;
2915 -> 2909;
2915 -> 2779;
2916 -> 2907;
2916 -> 2779;
2917 -> 2912;
2917 -> 2779;
2918 -> 2913;
2918 -> 2779;
2919 -> 2918;
2920 -> 2914;
2920 -> 2919;
2920 -> 2918;
2921 -> 2916;
2921 -> 0;
2921 -> 2918;
2922 -> 2920;
2922 -> 2921;
2922 -> 2918;
2923 -> 2913;
2923 -> 2922;
2924 -> 2923;
2924 -> 2779;
2924 -> 2922;
2925 -> 2923;
2925 -> 2922;
2926 -> 2923;
2926 -> 2779;
2926 -> 2914;
2926 -> 2922;
2927 -> 2916;
2927 -> 2922;
2928 -> 2922;
2929 -> 2927;
2929 -> 2928;
2930 -> 2926;
2930 -> 2929;
2930 -> 2922;
2931 -> 2779;
2932 -> 2908;
2932 -> 2907;
2933 -> 2907;
2934 -> 2907;
2934 -> 2933;
2935 -> 2932;
2935 -> 2933;
2936 -> 2934;
2936 -> 0;
2936 -> 2933;
2937 -> 2933;
2938 -> 2936;
2938 -> 2933;
2939 -> 2935;
2939 -> 2938;
2940 -> 2911;
2940 -> 2907;
2941 -> 2905;
2941 -> 2907;
2942 -> 2910;
2942 -> 2907;
2943 -> 2939;
2943 -> 2907;
2944 -> 2940;
2944 -> 2907;
2945 -> 2942;
2945 -> 2907;
2946 -> 2779;
2946 -> 2907;
2947 -> 2946;
2947 -> 2779;
2947 -> 2907;
2948 -> 0;
2948 -> 2907;
2949 -> 2907;
2950 -> 2947;
2950 -> 2949;
2951 -> 2948;
2951 -> 2949;
2952 -> 2943;
2952 -> 2907;
2953 -> 2944;
2953 -> 2907;
2954 -> 2945;
2954 -> 2907;
2955 -> 2946;
2955 -> 2907;
2956 -> 2952;
2956 -> 2907;
2957 -> 2953;
2957 -> 2907;
2958 -> 2954;
2958 -> 2907;
2959 -> 2955;
2959 -> 2779;
2959 -> 2907;
2960 -> 2959;
2960 -> 2907;
2961 -> 2956;
2961 -> 2907;
2962 -> 2957;
2962 -> 2907;
2963 -> 2958;
2963 -> 2907;
2964 -> 2959;
2964 -> 2907;
2965 -> 2964;
2965 -> 2779;
2965 -> 2907;
2966 -> 0;
2966 -> 2907;
2967 -> 2907;
2968 -> 2965;
2968 -> 2967;
2969 -> 2966;
2969 -> 2967;
2970 -> 2960;
2970 -> 2907;
2971 -> 2961;
2971 -> 2907;
2972 -> 2962;
2972 -> 2907;
2973 -> 2963;
2973 -> 2907;
2974 -> 2970;
2974 -> 2907;
2975 -> 2971;
2975 -> 2907;
2976 -> 2972;
2976 -> 2907;
2977 -> 2970;
2977 -> 2907;
2978 -> 2973;
2978 -> 2907;
2979 -> 2907;
2980 -> 2907;
2981 -> 2974;
2981 -> 2980;
2981 -> 2907;
2982 -> 2974;
2982 -> 2779;
2982 -> 2907;
2983 -> 2974;
2983 -> 2907;
2984 -> 2907;
2985 -> 2974;
2985 -> 2907;
2986 -> 2978;
2986 -> 2907;
2987 -> 2985;
2987 -> 2907;
2988 -> 2907;
2989 -> 2985;
2989 -> 2779;
2989 -> 2907;
2990 -> 2907;
2991 -> 2907;
2991 -> 2779;
2992 -> 2907;
2993 -> 2985;
2993 -> 2907;
2994 -> 2993;
2994 -> 2907;
2995 -> 2907;
2996 -> 2992;
2996 -> 2995;
2996 -> 2907;
2997 -> 2907;
2998 -> 2779;
2998 -> 2997;
2999 -> 2998;
2999 -> 2907;
2999 -> 2997;
3000 -> 0;
3000 -> 2997;
3001 -> 2997;
3002 -> 2999;
3002 -> 3001;
3003 -> 3000;
3003 -> 3001;
3004 -> 3002;
3004 -> 2907;
3005 -> 2907;
3006 -> 2907;
3007 -> 2846;
3007 -> 2907;
3007 -> 0;
3007 -> 2845;
3008 -> 3007;
3008 -> 2779;
3009 -> 2779;
3009 -> 3008;
3010 -> 3009;
3010 -> 2779;
3011 -> 2779;
3012 -> 2779;
3013 -> 3011;
3013 -> 3012;
3014 -> 3012;
3015 -> 3013;
3015 -> 3014;
3016 -> 3015;
3016 -> 2941;
3016 -> 3014;
3017 -> 3016;
3017 -> 3012;
3018 -> 3012;
3019 -> 3013;
3019 -> 3018;
3020 -> 3019;
3020 -> 2941;
3020 -> 3018;
3021 -> 3020;
3021 -> 3012;
3022 -> 3021;
3022 -> 2941;
3023 -> 3022;
3024 -> 2779;
3025 -> 2779;
3026 -> 2779;
3027 -> 2779;
3028 -> 2779;
3029 -> 2787;
3029 -> 2779;
3030 -> 3024;
3030 -> 2779;
3031 -> 3024;
3031 -> 2779;
3032 -> 3024;
3032 -> 2779;
3033 -> 2779;
3034 -> 2779;
3035 -> 3027;
3035 -> 3034;
3035 -> 2779;
3036 -> 2779;
3037 -> 3028;
3037 -> 3036;
3037 -> 2779;
3038 -> 2779;
3039 -> 2941;
3040 -> 2941;
3041 -> 3039;
3041 -> 3040;
3041 -> 2941;
3042 -> 3039;
3042 -> 2941;
3042 -> 0;
3043 -> 2941;
3043 -> 0;
3043 -> 3041;
3044 -> 3043;
3044 -> 3033;
3044 -> 2941;
3044 -> 3041;
3045 -> 3029;
3045 -> 3041;
3046 -> 2941;
3046 -> 3045;
3047 -> 3028;
3047 -> 3045;
3048 -> 3027;
3048 -> 3045;
3049 -> 3045;
3050 -> 3046;
3050 -> 3049;
3051 -> 3047;
3051 -> 3049;
3052 -> 3048;
3052 -> 3049;
3053 -> 3050;
3053 -> 2941;
3053 -> 3049;
3054 -> 3049;
3055 -> 3053;
3055 -> 3054;
3055 -> 3049;
3056 -> 2941;
3056 -> 3053;
3056 -> 0;
3056 -> 2779;
3057 -> 3027;
3057 -> 3056;
3058 -> 3056;
3059 -> 2941;
3059 -> 3056;
3060 -> 3028;
3060 -> 3056;
3061 -> 3056;
3062 -> 3057;
3062 -> 3061;
3063 -> 3058;
3063 -> 3061;
3064 -> 3059;
3064 -> 3061;
3065 -> 3060;
3065 -> 3061;
3066 -> 3033;
3066 -> 3061;
3067 -> 3064;
3067 -> 3053;
3067 -> 3061;
3068 -> 3061;
3069 -> 2941;
3069 -> 3053;
3069 -> 0;
3069 -> 2779;
3070 -> 2779;
3071 -> 2779;
3072 -> 2941;
3072 -> 2779;
3073 -> 3053;
3073 -> 2941;
3074 -> 2941;
3075 -> 3074;
3075 -> 2941;
3076 -> 2941;
3077 -> 3076;
3077 -> 2941;
3078 -> 3053;
3079 -> 3053;
3080 -> 3053;
3081 -> 3078;
3081 -> 3053;
3082 -> 3079;
3082 -> 3053;
3083 -> 3053;
3084 -> 3053;
3084 -> 0;
3085 -> 3053;
3086 -> 3080;
3086 -> 3053;
3087 -> 3081;
3087 -> 3053;
3088 -> 3082;
3088 -> 3053;
3089 -> 3080;
3089 -> 3053;
3090 -> 3080;
3090 -> 0;
3090 -> 3053;
3091 -> 3080;
3091 -> 0;
3091 -> 3053;
3092 -> 3088;
3092 -> 3053;
3093 -> 3092;
3093 -> 3053;
3094 -> 3086;
3094 -> 3053;
3095 -> 3087;
3095 -> 3053;
3096 -> 3089;
3096 -> 3053;
3097 -> 3053;
3098 -> 3094;
3098 -> 3097;
3098 -> 3053;
3099 -> 3053;
3100 -> 3086;
3100 -> 3053;
3101 -> 3053;
3102 -> 3099;
3102 -> 3101;
3102 -> 3053;
3103 -> 3086;
3103 -> 3053;
3104 -> 3103;
3104 -> 3053;
3105 -> 3092;
3105 -> 3104;
3106 -> 3053;
3106 -> 2436;
3107 -> 3106;
3107 -> 3075;
3107 -> 2436;
3108 -> 3107;
3108 -> 0;
3108 -> 2436;
3109 -> 3108;
3109 -> 2430;
3110 -> 3086;
3111 -> 3086;
3112 -> 3086;
3113 -> 3111;
3113 -> 3112;
3114 -> 3111;
3114 -> 3112;
3115 -> 3111;
3115 -> 3112;
3116 -> 3111;
3116 -> 3112;
3117 -> 3111;
3117 -> 3112;
3118 -> 3086;
3118 -> 3112;
3119 -> 3112;
3120 -> 3114;
3120 -> 3119;
3120 -> 3112;
3121 -> 3112;
3122 -> 3121;
3122 -> 3086;
3123 -> 3086;
3124 -> 3122;
3124 -> 3123;
3124 -> 3086;
3125 -> 3086;
3126 -> 3086;
3126 -> 3125;
3127 -> 3126;
3127 -> 3086;
3127 -> 0;
3127 -> 3125;
3128 -> 3125;
3129 -> 3126;
3129 -> 3086;
3129 -> 3128;
3129 -> 3125;
3130 -> 3127;
3130 -> 3086;
3131 -> 3086;
3132 -> 3086;
3133 -> 3086;
3133 -> 3132;
3134 -> 3133;
3134 -> 3086;
3134 -> 0;
3134 -> 3132;
3135 -> 3132;
3136 -> 3133;
3136 -> 3086;
3136 -> 3135;
3136 -> 3132;
3137 -> 3134;
3137 -> 3086;
3138 -> 3086;
3139 -> 3086;
3140 -> 3138;
3140 -> 3139;
3141 -> 3140;
3141 -> 0;
3141 -> 3139;
3142 -> 3140;
3142 -> 0;
3142 -> 3139;
3143 -> 3139;
3144 -> 0;
3144 -> 3139;
3145 -> 3140;
3145 -> 3144;
3145 -> 3139;
3146 -> 0;
3146 -> 3139;
3147 -> 3140;
3147 -> 3146;
3147 -> 3139;
3148 -> 3139;
3149 -> 0;
3149 -> 3139;
3150 -> 3140;
3150 -> 3149;
3150 -> 3139;
3151 -> 3150;
3151 -> 3139;
3152 -> 3139;
3153 -> 3151;
3153 -> 3152;
3154 -> 3152;
3155 -> 3153;
3155 -> 3154;
3155 -> 3152;
3156 -> 3086;
3157 -> 3086;
3158 -> 3086;
3159 -> 3086;
3160 -> 3086;
3161 -> 3086;
3162 -> 3086;
3163 -> 3086;
3164 -> 3086;
3165 -> 3086;
3165 -> 3164;
3166 -> 3165;
3166 -> 3086;
3166 -> 0;
3166 -> 3164;
3167 -> 3164;
3168 -> 3165;
3168 -> 3086;
3168 -> 3167;
3168 -> 3164;
3169 -> 3166;
3169 -> 3086;
3170 -> 3086;
3170 -> 0;
3171 -> 3086;
3172 -> 3086;
3173 -> 3086;
3174 -> 3086;
3175 -> 3086;
3176 -> 3086;
3177 -> 3086;
3178 -> 3086;
3179 -> 3172;
3179 -> 3178;
3180 -> 3179;
3180 -> 3086;
3180 -> 0;
3180 -> 3178;
3181 -> 3178;
3182 -> 3179;
3182 -> 3086;
3182 -> 3181;
3182 -> 3178;
3183 -> 3180;
3183 -> 3086;
3184 -> 3086;
3185 -> 3086;
3185 -> 3184;
3186 -> 0;
3186 -> 3184;
3187 -> 3186;
3187 -> 3086;
3188 -> 3175;
3188 -> 3187;
3188 -> 3086;
3189 -> 3086;
3190 -> 3086;
3191 -> 3086;
3191 -> 3190;
3192 -> 3191;
3192 -> 3086;
3192 -> 0;
3192 -> 3190;
3193 -> 3190;
3194 -> 3191;
3194 -> 3086;
3194 -> 3193;
3194 -> 3190;
3195 -> 3192;
3195 -> 3086;
3196 -> 3086;
3197 -> 3086;
3197 -> 3196;
3198 -> 3197;
3198 -> 3086;
3198 -> 0;
3198 -> 3196;
3199 -> 3198;
3199 -> 3086;
3200 -> 3086;
3201 -> 3086;
3202 -> 3086;
3203 -> 3086;
3204 -> 3086;
3205 -> 3203;
3205 -> 3204;
3206 -> 3205;
3206 -> 0;
3206 -> 3204;
3207 -> 3205;
3207 -> 0;
3207 -> 3204;
3208 -> 3204;
3209 -> 0;
3209 -> 3204;
3210 -> 3205;
3210 -> 3209;
3210 -> 3204;
3211 -> 0;
3211 -> 3204;
3212 -> 3205;
3212 -> 3211;
3212 -> 3204;
3213 -> 3204;
3214 -> 0;
3214 -> 3204;
3215 -> 3205;
3215 -> 3214;
3215 -> 3204;
3216 -> 3215;
3216 -> 3204;
3217 -> 3204;
3218 -> 3216;
3218 -> 3217;
3219 -> 3217;
3220 -> 3218;
3220 -> 3219;
3220 -> 3217;
3221 -> 3086;
3222 -> 3086;
3223 -> 3086;
3224 -> 3086;
3225 -> 3086;
3226 -> 3086;
3227 -> 3086;
3228 -> 3086;
3229 -> 3086;
3230 -> 3224;
3230 -> 3086;
3231 -> 3224;
3231 -> 3086;
3232 -> 3227;
3232 -> 3086;
3233 -> 3228;
3233 -> 3086;
3234 -> 3233;
3235 -> 3229;
3235 -> 3234;
3235 -> 3233;
3236 -> 3231;
3236 -> 0;
3236 -> 3233;
3237 -> 3235;
3237 -> 3236;
3237 -> 3233;
3238 -> 3228;
3238 -> 3237;
3239 -> 3238;
3239 -> 3086;
3239 -> 3237;
3240 -> 3238;
3240 -> 3237;
3241 -> 3238;
3241 -> 3086;
3241 -> 3229;
3241 -> 3237;
3242 -> 3231;
3242 -> 3237;
3243 -> 3237;
3244 -> 3242;
3244 -> 3243;
3245 -> 3241;
3245 -> 3244;
3245 -> 3237;
3246 -> 3086;
3247 -> 3223;
3247 -> 3224;
3248 -> 3224;
3249 -> 3224;
3249 -> 3248;
3250 -> 3247;
3250 -> 3248;
3251 -> 3249;
3251 -> 0;
3251 -> 3248;
3252 -> 3248;
3253 -> 3251;
3253 -> 3248;
3254 -> 3250;
3254 -> 3253;
3255 -> 3226;
3255 -> 3224;
3256 -> 3225;
3256 -> 3224;
3257 -> 3254;
3257 -> 3224;
3258 -> 3255;
3258 -> 3224;
3259 -> 3256;
3259 -> 3224;
3260 -> 3086;
3260 -> 3224;
3261 -> 3260;
3261 -> 3086;
3261 -> 3224;
3262 -> 0;
3262 -> 3224;
3263 -> 3224;
3264 -> 3261;
3264 -> 3263;
3265 -> 3262;
3265 -> 3263;
3266 -> 3257;
3266 -> 3224;
3267 -> 3258;
3267 -> 3224;
3268 -> 3259;
3268 -> 3224;
3269 -> 3260;
3269 -> 3224;
3270 -> 3266;
3270 -> 3224;
3271 -> 3267;
3271 -> 3224;
3272 -> 3268;
3272 -> 3224;
3273 -> 3269;
3273 -> 3086;
3273 -> 3224;
3274 -> 3273;
3274 -> 3224;
3275 -> 3270;
3275 -> 3224;
3276 -> 3271;
3276 -> 3224;
3277 -> 3272;
3277 -> 3224;
3278 -> 3273;
3278 -> 3224;
3279 -> 3278;
3279 -> 3086;
3279 -> 3224;
3280 -> 0;
3280 -> 3224;
3281 -> 3224;
3282 -> 3279;
3282 -> 3281;
3283 -> 3280;
3283 -> 3281;
3284 -> 3274;
3284 -> 3224;
3285 -> 3275;
3285 -> 3224;
3286 -> 3276;
3286 -> 3224;
3287 -> 3277;
3287 -> 3224;
3288 -> 3284;
3288 -> 3224;
3289 -> 3285;
3289 -> 3224;
3290 -> 3286;
3290 -> 3224;
3291 -> 3284;
3291 -> 3224;
3292 -> 3287;
3292 -> 3224;
3293 -> 3224;
3294 -> 3224;
3295 -> 3288;
3295 -> 3294;
3295 -> 3224;
3296 -> 3288;
3296 -> 3086;
3296 -> 3224;
3297 -> 3288;
3297 -> 3224;
3298 -> 3224;
3299 -> 3288;
3299 -> 3224;
3300 -> 3292;
3300 -> 3224;
3301 -> 3299;
3301 -> 3224;
3302 -> 3224;
3303 -> 3299;
3303 -> 3086;
3303 -> 3224;
3304 -> 3224;
3305 -> 3224;
3305 -> 3086;
3306 -> 3224;
3307 -> 3299;
3307 -> 3224;
3308 -> 3307;
3308 -> 3224;
3309 -> 3224;
3310 -> 3306;
3310 -> 3309;
3310 -> 3224;
3311 -> 3224;
3312 -> 3086;
3312 -> 3311;
3313 -> 3312;
3313 -> 3224;
3313 -> 3311;
3314 -> 0;
3314 -> 3311;
3315 -> 3311;
3316 -> 3313;
3316 -> 3315;
3317 -> 3314;
3317 -> 3315;
3318 -> 3316;
3318 -> 3224;
3319 -> 3224;
3320 -> 3224;
3321 -> 3165;
3321 -> 3224;
3321 -> 0;
3321 -> 3164;
3322 -> 3321;
3322 -> 3086;
3323 -> 3086;
3323 -> 3322;
3324 -> 3323;
3324 -> 3086;
3325 -> 3086;
3326 -> 3086;
3327 -> 3325;
3327 -> 3326;
3328 -> 3326;
3329 -> 3327;
3329 -> 3328;
3330 -> 3329;
3330 -> 3224;
3330 -> 3328;
3331 -> 3330;
3331 -> 3326;
3332 -> 3326;
3333 -> 3327;
3333 -> 3332;
3334 -> 3333;
3334 -> 3224;
3334 -> 3332;
3335 -> 3334;
3335 -> 3326;
3336 -> 3335;
3336 -> 3224;
3337 -> 3336;
3338 -> 3086;
3339 -> 3086;
3340 -> 3086;
3341 -> 3086;
3342 -> 3086;
3343 -> 3338;
3343 -> 3086;
3344 -> 3338;
3344 -> 3086;
3345 -> 3338;
3345 -> 3086;
3346 -> 3086;
3347 -> 3086;
3348 -> 3341;
3348 -> 3347;
3348 -> 3086;
3349 -> 3086;
3350 -> 3342;
3350 -> 3349;
3350 -> 3086;
3351 -> 3086;
3352 -> 3224;
3352 -> 0;
3353 -> 3352;
3353 -> 3346;
3353 -> 3224;
3354 -> 3339;
3354 -> 3224;
3355 -> 3342;
3355 -> 3354;
3356 -> 3341;
3356 -> 3354;
3357 -> 3355;
3357 -> 3354;
3358 -> 3356;
3358 -> 3354;
3359 -> 3354;
3360 -> 3224;
3360 -> 3354;
3360 -> 0;
3360 -> 3086;
3361 -> 3341;
3361 -> 3360;
3362 -> 3360;
3363 -> 3224;
3363 -> 3360;
3364 -> 3342;
3364 -> 3360;
3365 -> 3360;
3366 -> 3361;
3366 -> 3365;
3367 -> 3362;
3367 -> 3365;
3368 -> 3363;
3368 -> 3365;
3369 -> 3364;
3369 -> 3365;
3370 -> 3346;
3370 -> 3365;
3371 -> 3368;
3371 -> 3354;
3371 -> 3365;
3372 -> 3365;
3373 -> 3224;
3373 -> 3354;
3373 -> 0;
3373 -> 3086;
3374 -> 3086;
3375 -> 3086;
3376 -> 3224;
3376 -> 3086;
3377 -> 3354;
3377 -> 3224;
3378 -> 3224;
3379 -> 3378;
3379 -> 3224;
3380 -> 3224;
3381 -> 3380;
3381 -> 3224;
3382 -> 3354;
3383 -> 3354;
3384 -> 3382;
3384 -> 3354;
3385 -> 3383;
3385 -> 3354;
3386 -> 3354;
3387 -> 3354;
3387 -> 0;
3388 -> 3354;
3389 -> 3384;
3389 -> 3354;
3390 -> 3385;
3390 -> 3354;
3391 -> 3354;
3392 -> 3354;
3392 -> 0;
3393 -> 3354;
3393 -> 0;
3394 -> 3390;
3394 -> 3354;
3395 -> 3394;
3395 -> 3354;
3396 -> 3354;
3397 -> 3389;
3397 -> 3354;
3398 -> 3391;
3398 -> 3354;
3399 -> 3354;
3400 -> 3396;
3400 -> 3399;
3400 -> 3354;
3401 -> 3354;
3402 -> 3354;
3403 -> 3354;
3404 -> 3401;
3404 -> 3403;
3404 -> 3354;
3405 -> 3354;
3406 -> 3405;
3406 -> 3354;
3407 -> 3394;
3407 -> 3406;
3408 -> 3354;
3408 -> 2436;
3409 -> 3408;
3409 -> 3379;
3409 -> 2436;
3410 -> 3409;
3410 -> 0;
3410 -> 2436;
3411 -> 3410;
3411 -> 2430;
3412 -> 948;
3412 -> 922;
3413 -> 948;
3413 -> 922;
3414 -> 948;
3414 -> 922;
3415 -> 3412;
3415 -> 922;
3416 -> 922;
3417 -> 3413;
3417 -> 922;
3418 -> 922;
3419 -> 922;
3420 -> 3415;
3420 -> 3419;
3421 -> 3416;
3421 -> 3419;
3422 -> 3417;
3422 -> 3419;
3423 -> 3418;
3423 -> 3419;
3424 -> 3414;
3424 -> 3419;
3426 -> 3425;
3428 -> 3427;
3430 -> 3429;
3432 -> 3428;
3432 -> 3431;
3433 -> 3430;
3433 -> 3431;
3435 -> 3428;
3435 -> 3434;
3436 -> 3430;
3436 -> 3434;
3438 -> 3428;
3438 -> 3437;
3439 -> 3430;
3439 -> 3437;
3441 -> 3428;
3441 -> 3440;
3442 -> 3430;
3442 -> 3440;
3444 -> 3428;
3444 -> 3443;
3445 -> 3430;
3445 -> 3443;
3447 -> 3428;
3447 -> 3446;
3448 -> 3430;
3448 -> 3446;
3450 -> 3428;
3450 -> 3449;
3451 -> 3430;
3451 -> 3449;
3453 -> 3428;
3453 -> 3452;
3454 -> 3430;
3454 -> 3452;
3456 -> 3428;
3456 -> 3455;
3457 -> 3430;
3457 -> 3455;
3459 -> 3428;
3459 -> 3458;
3460 -> 3430;
3460 -> 3458;
3462 -> 3428;
3462 -> 3461;
3464 -> 3428;
3464 -> 3463;
3466 -> 3431;
3466 -> 3465;
3467 -> 3434;
3467 -> 3465;
3468 -> 3437;
3468 -> 3465;
3469 -> 3440;
3469 -> 3465;
3470 -> 3443;
3470 -> 3465;
3471 -> 3446;
3471 -> 3465;
3472 -> 3449;
3472 -> 3465;
3473 -> 3452;
3473 -> 3465;
3474 -> 3455;
3474 -> 3465;
3475 -> 3458;
3475 -> 3465;
3476 -> 3461;
3476 -> 3465;
3477 -> 3463;
3477 -> 3465;
3478 -> 3465;
3480 -> 3428;
3480 -> 3479;
3481 -> 3430;
3481 -> 3479;
3483 -> 3430;
3483 -> 3482;
3484 -> 3428;
3484 -> 3482;
3486 -> 3430;
3486 -> 3485;
3487 -> 3428;
3487 -> 3485;
3489 -> 3430;
3489 -> 3488;
3490 -> 3428;
3490 -> 3488;
3492 -> 3430;
3492 -> 3491;
3493 -> 3428;
3493 -> 3491;
3495 -> 3430;
3495 -> 3494;
3496 -> 3428;
3496 -> 3494;
3498 -> 3430;
3498 -> 3497;
3499 -> 3428;
3499 -> 3497;
3501 -> 3430;
3501 -> 3500;
3502 -> 3428;
3502 -> 3500;
3504 -> 3430;
3504 -> 3503;
3505 -> 3428;
3505 -> 3503;
3507 -> 3430;
3507 -> 3506;
3508 -> 3428;
3508 -> 3506;
3510 -> 3430;
3510 -> 3509;
3511 -> 3428;
3511 -> 3509;
3513 -> 3430;
3513 -> 3512;
3514 -> 3428;
3514 -> 3512;
3516 -> 3479;
3516 -> 3515;
3517 -> 3482;
3517 -> 3515;
3518 -> 3485;
3518 -> 3515;
3519 -> 3488;
3519 -> 3515;
3520 -> 3491;
3520 -> 3515;
3521 -> 3494;
3521 -> 3515;
3522 -> 3497;
3522 -> 3515;
3523 -> 3500;
3523 -> 3515;
3524 -> 3503;
3524 -> 3515;
3525 -> 3506;
3525 -> 3515;
3526 -> 3509;
3526 -> 3515;
3527 -> 3512;
3527 -> 3515;
3528 -> 3515;
3529 -> 3420;
3529 -> 3419;
3530 -> 3421;
3530 -> 3419;
3531 -> 3422;
3531 -> 3419;
3532 -> 3423;
3532 -> 3419;
3533 -> 3419;
3534 -> 3529;
3534 -> 3533;
3535 -> 3530;
3535 -> 3533;
3536 -> 3531;
3536 -> 3533;
3537 -> 3532;
3537 -> 3533;
3538 -> 3424;
3538 -> 3533;
3539 -> 3538;
3539 -> 3533;
3540 -> 3538;
3540 -> 3533;
3541 -> 3538;
3541 -> 3533;
3542 -> 3538;
3542 -> 3533;
3543 -> 3533;
3544 -> 3534;
3544 -> 3543;
3544 -> 3533;
3545 -> 3533;
3546 -> 3537;
3546 -> 3545;
3546 -> 3533;
3547 -> 3533;
3548 -> 3537;
3548 -> 3547;
3548 -> 3533;
3549 -> 3534;
3549 -> 3538;
3549 -> 3533;
3550 -> 3535;
3550 -> 3538;
3550 -> 3533;
3551 -> 3536;
3551 -> 3538;
3551 -> 3533;
3552 -> 3537;
3552 -> 3538;
3552 -> 3533;
3553 -> 948;
3553 -> 3354;
3553 -> 3549;
3553 -> 3550;
3553 -> 3551;
3553 -> 3552;
3553 -> 919;
3554 -> 3553;
3554 -> 1172;
3554 -> 1166;
3555 -> 1170;
3555 -> 3553;
3555 -> 1166;
3556 -> 3553;
3556 -> 1241;
3557 -> 3553;
3557 -> 1466;
3558 -> 3557;
3558 -> 1479;
3559 -> 3553;
3559 -> 1466;
3560 -> 3559;
3560 -> 1484;
3561 -> 3553;
3562 -> 3553;
3563 -> 3553;
3564 -> 3562;
3564 -> 3563;
3565 -> 3562;
3565 -> 3563;
3566 -> 3562;
3566 -> 3563;
3567 -> 3562;
3567 -> 3563;
3568 -> 3562;
3568 -> 3563;
3569 -> 3553;
3569 -> 3563;
3570 -> 3563;
3571 -> 3565;
3571 -> 3570;
3571 -> 3563;
3572 -> 3563;
3573 -> 3572;
3573 -> 3553;
3574 -> 3553;
3575 -> 3573;
3575 -> 3574;
3575 -> 3553;
3576 -> 3553;
3577 -> 3553;
3577 -> 3576;
3578 -> 3577;
3578 -> 3553;
3578 -> 0;
3578 -> 3576;
3579 -> 3576;
3580 -> 3577;
3580 -> 3553;
3580 -> 3579;
3580 -> 3576;
3581 -> 3578;
3581 -> 3553;
3582 -> 3553;
3583 -> 3553;
3584 -> 3553;
3584 -> 3583;
3585 -> 3584;
3585 -> 3553;
3585 -> 0;
3585 -> 3583;
3586 -> 3583;
3587 -> 3584;
3587 -> 3553;
3587 -> 3586;
3587 -> 3583;
3588 -> 3585;
3588 -> 3553;
3589 -> 3553;
3590 -> 3553;
3591 -> 3589;
3591 -> 3590;
3592 -> 3591;
3592 -> 0;
3592 -> 3590;
3593 -> 3591;
3593 -> 0;
3593 -> 3590;
3594 -> 3590;
3595 -> 0;
3595 -> 3590;
3596 -> 3591;
3596 -> 3595;
3596 -> 3590;
3597 -> 0;
3597 -> 3590;
3598 -> 3591;
3598 -> 3597;
3598 -> 3590;
3599 -> 3590;
3600 -> 0;
3600 -> 3590;
3601 -> 3591;
3601 -> 3600;
3601 -> 3590;
3602 -> 3601;
3602 -> 3590;
3603 -> 3590;
3604 -> 3602;
3604 -> 3603;
3605 -> 3603;
3606 -> 3604;
3606 -> 3605;
3606 -> 3603;
3607 -> 3553;
3608 -> 3553;
3609 -> 3553;
3610 -> 3553;
3611 -> 3553;
3612 -> 3553;
3613 -> 3553;
3614 -> 3553;
3615 -> 3553;
3616 -> 3553;
3616 -> 3615;
3617 -> 3616;
3617 -> 3553;
3617 -> 0;
3617 -> 3615;
3618 -> 3615;
3619 -> 3616;
3619 -> 3553;
3619 -> 3618;
3619 -> 3615;
3620 -> 3617;
3620 -> 3553;
3621 -> 3553;
3621 -> 0;
3622 -> 3553;
3623 -> 3553;
3624 -> 3553;
3625 -> 3553;
3626 -> 3553;
3627 -> 3553;
3628 -> 3553;
3629 -> 3553;
3630 -> 3623;
3630 -> 3629;
3631 -> 3630;
3631 -> 3553;
3631 -> 0;
3631 -> 3629;
3632 -> 3629;
3633 -> 3630;
3633 -> 3553;
3633 -> 3632;
3633 -> 3629;
3634 -> 3631;
3634 -> 3553;
3635 -> 3553;
3636 -> 3553;
3636 -> 3635;
3637 -> 0;
3637 -> 3635;
3638 -> 3637;
3638 -> 3553;
3639 -> 3626;
3639 -> 3638;
3639 -> 3553;
3640 -> 3553;
3641 -> 3553;
3642 -> 3553;
3642 -> 3641;
3643 -> 3642;
3643 -> 3553;
3643 -> 0;
3643 -> 3641;
3644 -> 3641;
3645 -> 3642;
3645 -> 3553;
3645 -> 3644;
3645 -> 3641;
3646 -> 3643;
3646 -> 3553;
3647 -> 3553;
3648 -> 3553;
3648 -> 3647;
3649 -> 3648;
3649 -> 3553;
3649 -> 0;
3649 -> 3647;
3650 -> 3649;
3650 -> 3553;
3651 -> 3553;
3652 -> 3553;
3653 -> 3553;
3654 -> 3553;
3655 -> 3553;
3656 -> 3654;
3656 -> 3655;
3657 -> 3656;
3657 -> 0;
3657 -> 3655;
3658 -> 3656;
3658 -> 0;
3658 -> 3655;
3659 -> 3655;
3660 -> 0;
3660 -> 3655;
3661 -> 3656;
3661 -> 3660;
3661 -> 3655;
3662 -> 0;
3662 -> 3655;
3663 -> 3656;
3663 -> 3662;
3663 -> 3655;
3664 -> 3655;
3665 -> 0;
3665 -> 3655;
3666 -> 3656;
3666 -> 3665;
3666 -> 3655;
3667 -> 3666;
3667 -> 3655;
3668 -> 3655;
3669 -> 3667;
3669 -> 3668;
3670 -> 3668;
3671 -> 3669;
3671 -> 3670;
3671 -> 3668;
3672 -> 3553;
3673 -> 3553;
3674 -> 3553;
3675 -> 3553;
3676 -> 3553;
3677 -> 3553;
3678 -> 3553;
3679 -> 3553;
3680 -> 3553;
3681 -> 3553;
3682 -> 3677;
3682 -> 3553;
3683 -> 3678;
3683 -> 3553;
3684 -> 3683;
3685 -> 3679;
3685 -> 3684;
3685 -> 3683;
3686 -> 3681;
3686 -> 0;
3686 -> 3683;
3687 -> 3685;
3687 -> 3686;
3687 -> 3683;
3688 -> 3678;
3688 -> 3687;
3689 -> 3688;
3689 -> 3553;
3689 -> 3687;
3690 -> 3688;
3690 -> 3687;
3691 -> 3688;
3691 -> 3553;
3691 -> 3679;
3691 -> 3687;
3692 -> 3681;
3692 -> 3687;
3693 -> 3687;
3694 -> 3692;
3694 -> 3693;
3695 -> 3691;
3695 -> 3694;
3695 -> 3687;
3696 -> 3553;
3697 -> 3674;
3697 -> 3677;
3698 -> 3677;
3699 -> 3677;
3699 -> 3698;
3700 -> 3697;
3700 -> 3698;
3701 -> 3699;
3701 -> 0;
3701 -> 3698;
3702 -> 3698;
3703 -> 3701;
3703 -> 3698;
3704 -> 3700;
3704 -> 3703;
3705 -> 3676;
3705 -> 3677;
3706 -> 3675;
3706 -> 3677;
3707 -> 3704;
3707 -> 3677;
3708 -> 3705;
3708 -> 3677;
3709 -> 3706;
3709 -> 3677;
3710 -> 3553;
3710 -> 3677;
3711 -> 3710;
3711 -> 3553;
3711 -> 3677;
3712 -> 0;
3712 -> 3677;
3713 -> 3677;
3714 -> 3711;
3714 -> 3713;
3715 -> 3712;
3715 -> 3713;
3716 -> 3707;
3716 -> 3677;
3717 -> 3708;
3717 -> 3677;
3718 -> 3709;
3718 -> 3677;
3719 -> 3710;
3719 -> 3677;
3720 -> 3716;
3720 -> 3677;
3721 -> 3717;
3721 -> 3677;
3722 -> 3718;
3722 -> 3677;
3723 -> 3719;
3723 -> 3553;
3723 -> 3677;
3724 -> 3723;
3724 -> 3677;
3725 -> 3720;
3725 -> 3677;
3726 -> 3721;
3726 -> 3677;
3727 -> 3722;
3727 -> 3677;
3728 -> 3723;
3728 -> 3677;
3729 -> 3728;
3729 -> 3553;
3729 -> 3677;
3730 -> 0;
3730 -> 3677;
3731 -> 3677;
3732 -> 3729;
3732 -> 3731;
3733 -> 3730;
3733 -> 3731;
3734 -> 3724;
3734 -> 3677;
3735 -> 3725;
3735 -> 3677;
3736 -> 3726;
3736 -> 3677;
3737 -> 3727;
3737 -> 3677;
3738 -> 3734;
3738 -> 3677;
3739 -> 3735;
3739 -> 3677;
3740 -> 3736;
3740 -> 3677;
3741 -> 3734;
3741 -> 3677;
3742 -> 3737;
3742 -> 3677;
3743 -> 3677;
3744 -> 3677;
3745 -> 3738;
3745 -> 3744;
3745 -> 3677;
3746 -> 3738;
3746 -> 3553;
3746 -> 3677;
3747 -> 3738;
3747 -> 3677;
3748 -> 3677;
3749 -> 3738;
3749 -> 3677;
3750 -> 3742;
3750 -> 3677;
3751 -> 3749;
3751 -> 3677;
3752 -> 3677;
3753 -> 3749;
3753 -> 3553;
3753 -> 3677;
3754 -> 3677;
3755 -> 3677;
3755 -> 3553;
3756 -> 3677;
3757 -> 3749;
3757 -> 3677;
3758 -> 3757;
3758 -> 3677;
3759 -> 3677;
3760 -> 3756;
3760 -> 3759;
3760 -> 3677;
3761 -> 3677;
3762 -> 3553;
3762 -> 3761;
3763 -> 3762;
3763 -> 3677;
3763 -> 3761;
3764 -> 0;
3764 -> 3761;
3765 -> 3761;
3766 -> 3763;
3766 -> 3765;
3767 -> 3764;
3767 -> 3765;
3768 -> 3766;
3768 -> 3677;
3769 -> 3677;
3770 -> 3677;
3771 -> 3616;
3771 -> 3677;
3771 -> 0;
3771 -> 3615;
3772 -> 3771;
3772 -> 3553;
3773 -> 3553;
3773 -> 3772;
3774 -> 3773;
3774 -> 3553;
3775 -> 3553;
3776 -> 3553;
3777 -> 3775;
3777 -> 3776;
3778 -> 3776;
3779 -> 3777;
3779 -> 3778;
3780 -> 3779;
3780 -> 3677;
3780 -> 3778;
3781 -> 3780;
3781 -> 3776;
3782 -> 3776;
3783 -> 3777;
3783 -> 3782;
3784 -> 3783;
3784 -> 3677;
3784 -> 3782;
3785 -> 3784;
3785 -> 3776;
3786 -> 3785;
3786 -> 3677;
3787 -> 3786;
3788 -> 3553;
3789 -> 3553;
3790 -> 3553;
3791 -> 3553;
3792 -> 3788;
3792 -> 3553;
3793 -> 3788;
3793 -> 3553;
3794 -> 3788;
3794 -> 3553;
3795 -> 3553;
3796 -> 3553;
3797 -> 3790;
3797 -> 3796;
3797 -> 3553;
3798 -> 3553;
3799 -> 3791;
3799 -> 3798;
3799 -> 3553;
3800 -> 3553;
3801 -> 3677;
3801 -> 0;
3802 -> 3801;
3802 -> 3795;
3802 -> 3677;
3803 -> 3789;
3803 -> 3677;
3804 -> 3791;
3804 -> 3803;
3805 -> 3790;
3805 -> 3803;
3806 -> 3804;
3806 -> 3803;
3807 -> 3805;
3807 -> 3803;
3808 -> 3803;
3809 -> 3677;
3809 -> 3803;
3809 -> 0;
3809 -> 3553;
3810 -> 3790;
3810 -> 3809;
3811 -> 3809;
3812 -> 3677;
3812 -> 3809;
3813 -> 3791;
3813 -> 3809;
3814 -> 3809;
3815 -> 3810;
3815 -> 3814;
3816 -> 3811;
3816 -> 3814;
3817 -> 3812;
3817 -> 3814;
3818 -> 3813;
3818 -> 3814;
3819 -> 3795;
3819 -> 3814;
3820 -> 3817;
3820 -> 3803;
3820 -> 3814;
3821 -> 3814;
3822 -> 3677;
3822 -> 3803;
3822 -> 0;
3822 -> 3553;
3823 -> 3553;
3824 -> 3553;
3825 -> 3677;
3825 -> 3553;
3826 -> 3803;
3826 -> 3677;
3827 -> 3677;
3828 -> 3827;
3828 -> 3677;
3829 -> 3677;
3830 -> 3829;
3830 -> 3677;
3831 -> 3803;
3832 -> 3803;
3833 -> 3831;
3833 -> 3803;
3834 -> 3832;
3834 -> 3803;
3835 -> 3803;
3836 -> 3803;
3836 -> 0;
3837 -> 3803;
3838 -> 3833;
3838 -> 3803;
3839 -> 3834;
3839 -> 3803;
3840 -> 3803;
3841 -> 3803;
3841 -> 0;
3842 -> 3803;
3842 -> 0;
3843 -> 3839;
3843 -> 3803;
3844 -> 3843;
3844 -> 3803;
3845 -> 3803;
3846 -> 3838;
3846 -> 3803;
3847 -> 3840;
3847 -> 3803;
3848 -> 3803;
3849 -> 3845;
3849 -> 3848;
3849 -> 3803;
3850 -> 3803;
3851 -> 3803;
3852 -> 3803;
3853 -> 3850;
3853 -> 3852;
3853 -> 3803;
3854 -> 3803;
3855 -> 3854;
3855 -> 3803;
3856 -> 3843;
3856 -> 3855;
3857 -> 3803;
3857 -> 2436;
3858 -> 3857;
3858 -> 3828;
3858 -> 2436;
3859 -> 3858;
3859 -> 0;
3859 -> 2436;
3860 -> 3859;
3860 -> 2430;
3861 -> 3803;
3861 -> 1172;
3861 -> 1166;
3862 -> 1170;
3862 -> 3803;
3862 -> 1166;
3863 -> 3803;
3863 -> 1241;
3864 -> 3803;
3864 -> 1466;
3865 -> 3864;
3865 -> 1479;
3866 -> 3803;
3866 -> 1466;
3867 -> 3866;
3867 -> 1484;
3868 -> 3803;
3869 -> 3803;
3870 -> 3803;
3871 -> 3869;
3871 -> 3870;
3872 -> 3869;
3872 -> 3870;
3873 -> 3869;
3873 -> 3870;
3874 -> 3869;
3874 -> 3870;
3875 -> 3869;
3875 -> 3870;
3876 -> 3803;
3876 -> 3870;
3877 -> 3870;
3878 -> 3872;
3878 -> 3877;
3878 -> 3870;
3879 -> 3870;
3880 -> 3879;
3880 -> 3803;
3881 -> 3803;
3882 -> 3880;
3882 -> 3881;
3882 -> 3803;
3883 -> 3803;
3884 -> 3803;
3884 -> 3883;
3885 -> 3884;
3885 -> 3803;
3885 -> 0;
3885 -> 3883;
3886 -> 3883;
3887 -> 3884;
3887 -> 3803;
3887 -> 3886;
3887 -> 3883;
3888 -> 3885;
3888 -> 3803;
3889 -> 3803;
3890 -> 3803;
3891 -> 3803;
3891 -> 3890;
3892 -> 3891;
3892 -> 3803;
3892 -> 0;
3892 -> 3890;
3893 -> 3890;
3894 -> 3891;
3894 -> 3803;
3894 -> 3893;
3894 -> 3890;
3895 -> 3892;
3895 -> 3803;
3896 -> 3803;
3897 -> 3803;
3898 -> 3896;
3898 -> 3897;
3899 -> 3898;
3899 -> 0;
3899 -> 3897;
3900 -> 3898;
3900 -> 0;
3900 -> 3897;
3901 -> 3897;
3902 -> 0;
3902 -> 3897;
3903 -> 3898;
3903 -> 3902;
3903 -> 3897;
3904 -> 0;
3904 -> 3897;
3905 -> 3898;
3905 -> 3904;
3905 -> 3897;
3906 -> 3897;
3907 -> 0;
3907 -> 3897;
3908 -> 3898;
3908 -> 3907;
3908 -> 3897;
3909 -> 3908;
3909 -> 3897;
3910 -> 3897;
3911 -> 3909;
3911 -> 3910;
3912 -> 3910;
3913 -> 3911;
3913 -> 3912;
3913 -> 3910;
3914 -> 3803;
3915 -> 3803;
3916 -> 3803;
3917 -> 3803;
3918 -> 3803;
3919 -> 3803;
3920 -> 3803;
3921 -> 3803;
3922 -> 3803;
3923 -> 3803;
3923 -> 3922;
3924 -> 3923;
3924 -> 3803;
3924 -> 0;
3924 -> 3922;
3925 -> 3922;
3926 -> 3923;
3926 -> 3803;
3926 -> 3925;
3926 -> 3922;
3927 -> 3924;
3927 -> 3803;
3928 -> 3803;
3928 -> 0;
3929 -> 3803;
3930 -> 3803;
3931 -> 3803;
3932 -> 3803;
3933 -> 3803;
3934 -> 3803;
3935 -> 3803;
3936 -> 3803;
3937 -> 3930;
3937 -> 3936;
3938 -> 3937;
3938 -> 3803;
3938 -> 0;
3938 -> 3936;
3939 -> 3936;
3940 -> 3937;
3940 -> 3803;
3940 -> 3939;
3940 -> 3936;
3941 -> 3938;
3941 -> 3803;
3942 -> 3803;
3943 -> 3803;
3943 -> 3942;
3944 -> 0;
3944 -> 3942;
3945 -> 3944;
3945 -> 3803;
3946 -> 3933;
3946 -> 3945;
3946 -> 3803;
3947 -> 3803;
3948 -> 3803;
3949 -> 3803;
3949 -> 3948;
3950 -> 3949;
3950 -> 3803;
3950 -> 0;
3950 -> 3948;
3951 -> 3948;
3952 -> 3949;
3952 -> 3803;
3952 -> 3951;
3952 -> 3948;
3953 -> 3950;
3953 -> 3803;
3954 -> 3803;
3955 -> 3803;
3955 -> 3954;
3956 -> 3955;
3956 -> 3803;
3956 -> 0;
3956 -> 3954;
3957 -> 3956;
3957 -> 3803;
3958 -> 3803;
3959 -> 3803;
3960 -> 3803;
3961 -> 3803;
3962 -> 3803;
3963 -> 3961;
3963 -> 3962;
3964 -> 3963;
3964 -> 0;
3964 -> 3962;
3965 -> 3963;
3965 -> 0;
3965 -> 3962;
3966 -> 3962;
3967 -> 0;
3967 -> 3962;
3968 -> 3963;
3968 -> 3967;
3968 -> 3962;
3969 -> 0;
3969 -> 3962;
3970 -> 3963;
3970 -> 3969;
3970 -> 3962;
3971 -> 3962;
3972 -> 0;
3972 -> 3962;
3973 -> 3963;
3973 -> 3972;
3973 -> 3962;
3974 -> 3973;
3974 -> 3962;
3975 -> 3962;
3976 -> 3974;
3976 -> 3975;
3977 -> 3975;
3978 -> 3976;
3978 -> 3977;
3978 -> 3975;
3979 -> 3803;
3980 -> 3803;
3981 -> 3803;
3982 -> 3803;
3983 -> 3803;
3984 -> 3803;
3985 -> 3803;
3986 -> 3803;
3987 -> 3803;
3988 -> 3803;
3989 -> 3984;
3989 -> 3803;
3990 -> 3989;
3991 -> 3985;
3991 -> 3990;
3991 -> 3989;
3992 -> 3987;
3992 -> 0;
3992 -> 3989;
3993 -> 3991;
3993 -> 3992;
3993 -> 3989;
3994 -> 3984;
3994 -> 3993;
3995 -> 3994;
3995 -> 3803;
3995 -> 3993;
3996 -> 3994;
3996 -> 3993;
3997 -> 3994;
3997 -> 3803;
3997 -> 3985;
3997 -> 3993;
3998 -> 3987;
3998 -> 3993;
3999 -> 3993;
4000 -> 3998;
4000 -> 3999;
4001 -> 3997;
4001 -> 4000;
4001 -> 3993;
4002 -> 3803;
4003 -> 3803;
4004 -> 3803;
4004 -> 4003;
4005 -> 3981;
4005 -> 4003;
4006 -> 4004;
4006 -> 0;
4006 -> 4003;
4007 -> 4003;
4008 -> 4006;
4008 -> 4003;
4009 -> 4005;
4009 -> 4008;
4010 -> 4009;
4010 -> 3803;
4011 -> 3983;
4011 -> 3803;
4012 -> 3982;
4012 -> 3803;
4013 -> 3803;
4014 -> 4013;
4014 -> 3803;
4015 -> 0;
4015 -> 3803;
4016 -> 3803;
4017 -> 4014;
4017 -> 4016;
4018 -> 4015;
4018 -> 4016;
4019 -> 4010;
4019 -> 3803;
4020 -> 4011;
4020 -> 3803;
4021 -> 4012;
4021 -> 3803;
4022 -> 4013;
4022 -> 3803;
4023 -> 4019;
4023 -> 3803;
4024 -> 4020;
4024 -> 3803;
4025 -> 4021;
4025 -> 3803;
4026 -> 4022;
4026 -> 3803;
4027 -> 4026;
4027 -> 3803;
4028 -> 4023;
4028 -> 3803;
4029 -> 4024;
4029 -> 3803;
4030 -> 4025;
4030 -> 3803;
4031 -> 4026;
4031 -> 3803;
4032 -> 4031;
4032 -> 3803;
4033 -> 0;
4033 -> 3803;
4034 -> 3803;
4035 -> 4032;
4035 -> 4034;
4036 -> 4033;
4036 -> 4034;
4037 -> 4027;
4037 -> 3803;
4038 -> 4028;
4038 -> 3803;
4039 -> 4029;
4039 -> 3803;
4040 -> 4030;
4040 -> 3803;
4041 -> 4037;
4041 -> 3803;
4042 -> 4038;
4042 -> 3803;
4043 -> 4039;
4043 -> 3803;
4044 -> 4037;
4044 -> 3803;
4045 -> 4040;
4045 -> 3803;
4046 -> 3803;
4047 -> 3803;
4048 -> 4041;
4048 -> 4047;
4048 -> 3803;
4049 -> 4041;
4049 -> 3803;
4050 -> 4041;
4050 -> 3803;
4051 -> 3803;
4052 -> 4041;
4052 -> 3803;
4053 -> 4045;
4053 -> 3803;
4054 -> 4052;
4054 -> 3803;
4055 -> 3803;
4056 -> 4052;
4056 -> 3803;
4057 -> 3803;
4058 -> 3803;
4059 -> 3803;
4060 -> 4052;
4060 -> 3803;
4061 -> 4060;
4061 -> 3803;
4062 -> 3803;
4063 -> 4059;
4063 -> 4062;
4063 -> 3803;
4064 -> 3981;
4065 -> 3803;
4065 -> 4064;
4066 -> 4065;
4066 -> 3981;
4066 -> 4064;
4067 -> 0;
4067 -> 4064;
4068 -> 4064;
4069 -> 4066;
4069 -> 4068;
4070 -> 4067;
4070 -> 4068;
4071 -> 4069;
4071 -> 3981;
4072 -> 3981;
4073 -> 3981;
4074 -> 3923;
4074 -> 3981;
4074 -> 0;
4074 -> 3922;
4075 -> 4074;
4075 -> 3803;
4076 -> 3803;
4076 -> 4075;
4077 -> 4076;
4077 -> 3803;
4078 -> 3803;
4079 -> 3803;
4080 -> 4078;
4080 -> 4079;
4081 -> 4079;
4082 -> 4080;
4082 -> 4081;
4083 -> 4082;
4083 -> 3981;
4083 -> 4081;
4084 -> 4083;
4084 -> 4079;
4085 -> 4079;
4086 -> 4080;
4086 -> 4085;
4087 -> 4086;
4087 -> 3981;
4087 -> 4085;
4088 -> 4087;
4088 -> 4079;
4089 -> 4088;
4089 -> 3981;
4090 -> 4089;
4091 -> 3803;
4092 -> 3803;
4093 -> 3803;
4094 -> 4091;
4094 -> 3803;
4095 -> 4091;
4095 -> 3803;
4096 -> 4091;
4096 -> 3803;
4097 -> 3803;
4098 -> 3803;
4099 -> 4092;
4099 -> 4098;
4099 -> 3803;
4100 -> 3803;
4101 -> 4093;
4101 -> 4100;
4101 -> 3803;
4102 -> 3803;
4103 -> 3981;
4103 -> 0;
4104 -> 4103;
4104 -> 4097;
4104 -> 3981;
4105 -> 4092;
4105 -> 3981;
4106 -> 4093;
4106 -> 4105;
4107 -> 4106;
4107 -> 4105;
4108 -> 4105;
4109 -> 4105;
4110 -> 3981;
4110 -> 4105;
4110 -> 0;
4110 -> 3803;
4111 -> 4092;
4111 -> 4110;
4112 -> 4110;
4113 -> 3981;
4113 -> 4110;
4114 -> 4093;
4114 -> 4110;
4115 -> 4110;
4116 -> 4111;
4116 -> 4115;
4117 -> 4112;
4117 -> 4115;
4118 -> 4113;
4118 -> 4115;
4119 -> 4114;
4119 -> 4115;
4120 -> 4097;
4120 -> 4115;
4121 -> 4118;
4121 -> 4105;
4121 -> 4115;
4122 -> 4115;
4123 -> 3981;
4123 -> 4105;
4123 -> 0;
4123 -> 3803;
4124 -> 3803;
4125 -> 3803;
4126 -> 3981;
4126 -> 3803;
4127 -> 4105;
4127 -> 3981;
4128 -> 3981;
4129 -> 4128;
4129 -> 3981;
4130 -> 3981;
4131 -> 4130;
4131 -> 3981;
4132 -> 4105;
4133 -> 4105;
4134 -> 4132;
4134 -> 4105;
4135 -> 4133;
4135 -> 4105;
4136 -> 4105;
4137 -> 4105;
4137 -> 0;
4138 -> 4105;
4139 -> 4134;
4139 -> 4105;
4140 -> 4135;
4140 -> 4105;
4141 -> 4105;
4142 -> 4105;
4142 -> 0;
4143 -> 4105;
4143 -> 0;
4144 -> 4140;
4144 -> 4105;
4145 -> 4144;
4145 -> 4105;
4146 -> 4105;
4147 -> 4139;
4147 -> 4105;
4148 -> 4141;
4148 -> 4105;
4149 -> 4105;
4150 -> 4146;
4150 -> 4149;
4150 -> 4105;
4151 -> 4105;
4152 -> 4105;
4153 -> 4105;
4154 -> 4151;
4154 -> 4153;
4154 -> 4105;
4155 -> 4105;
4156 -> 4155;
4156 -> 4105;
4157 -> 4144;
4157 -> 4156;
4158 -> 4105;
4158 -> 2436;
4159 -> 4158;
4159 -> 4129;
4159 -> 2436;
4160 -> 4159;
4160 -> 0;
4160 -> 2436;
4161 -> 4160;
4161 -> 2430;
4162 -> 4105;
4162 -> 1172;
4162 -> 1166;
4163 -> 1170;
4163 -> 4105;
4163 -> 1166;
4164 -> 4105;
4164 -> 1241;
4165 -> 4105;
4165 -> 1466;
4166 -> 4165;
4166 -> 1479;
4167 -> 4105;
4167 -> 1466;
4168 -> 4167;
4168 -> 1484;
4169 -> 4105;
4170 -> 4105;
4171 -> 4105;
4172 -> 4170;
4172 -> 4171;
4173 -> 4170;
4173 -> 4171;
4174 -> 4170;
4174 -> 4171;
4175 -> 4170;
4175 -> 4171;
4176 -> 4170;
4176 -> 4171;
4177 -> 4105;
4177 -> 4171;
4178 -> 4171;
4179 -> 4173;
4179 -> 4178;
4179 -> 4171;
4180 -> 4171;
4181 -> 4180;
4181 -> 4105;
4182 -> 4105;
4183 -> 4181;
4183 -> 4182;
4183 -> 4105;
4184 -> 4105;
4185 -> 4105;
4185 -> 4184;
4186 -> 4185;
4186 -> 4105;
4186 -> 0;
4186 -> 4184;
4187 -> 4184;
4188 -> 4185;
4188 -> 4105;
4188 -> 4187;
4188 -> 4184;
4189 -> 4186;
4189 -> 4105;
4190 -> 4105;
4191 -> 4105;
4192 -> 4105;
4192 -> 4191;
4193 -> 4192;
4193 -> 4105;
4193 -> 0;
4193 -> 4191;
4194 -> 4191;
4195 -> 4192;
4195 -> 4105;
4195 -> 4194;
4195 -> 4191;
4196 -> 4193;
4196 -> 4105;
4197 -> 4105;
4198 -> 4105;
4199 -> 4197;
4199 -> 4198;
4200 -> 4199;
4200 -> 0;
4200 -> 4198;
4201 -> 4199;
4201 -> 0;
4201 -> 4198;
4202 -> 4198;
4203 -> 0;
4203 -> 4198;
4204 -> 4199;
4204 -> 4203;
4204 -> 4198;
4205 -> 0;
4205 -> 4198;
4206 -> 4199;
4206 -> 4205;
4206 -> 4198;
4207 -> 4198;
4208 -> 0;
4208 -> 4198;
4209 -> 4199;
4209 -> 4208;
4209 -> 4198;
4210 -> 4209;
4210 -> 4198;
4211 -> 4198;
4212 -> 4210;
4212 -> 4211;
4213 -> 4211;
4214 -> 4212;
4214 -> 4213;
4214 -> 4211;
4215 -> 4105;
4216 -> 4105;
4217 -> 4105;
4218 -> 4105;
4219 -> 4105;
4220 -> 4105;
4221 -> 4105;
4222 -> 4105;
4223 -> 4105;
4224 -> 4105;
4224 -> 4223;
4225 -> 4224;
4225 -> 4105;
4225 -> 0;
4225 -> 4223;
4226 -> 4223;
4227 -> 4224;
4227 -> 4105;
4227 -> 4226;
4227 -> 4223;
4228 -> 4225;
4228 -> 4105;
4229 -> 4105;
4229 -> 0;
4230 -> 4105;
4231 -> 4105;
4232 -> 4105;
4233 -> 4105;
4234 -> 4105;
4235 -> 4105;
4236 -> 4105;
4237 -> 4105;
4238 -> 4231;
4238 -> 4237;
4239 -> 4238;
4239 -> 4105;
4239 -> 0;
4239 -> 4237;
4240 -> 4237;
4241 -> 4238;
4241 -> 4105;
4241 -> 4240;
4241 -> 4237;
4242 -> 4239;
4242 -> 4105;
4243 -> 4105;
4244 -> 4105;
4244 -> 4243;
4245 -> 0;
4245 -> 4243;
4246 -> 4245;
4246 -> 4105;
4247 -> 4234;
4247 -> 4246;
4247 -> 4105;
4248 -> 4105;
4249 -> 4105;
4250 -> 4105;
4250 -> 4249;
4251 -> 4250;
4251 -> 4105;
4251 -> 0;
4251 -> 4249;
4252 -> 4249;
4253 -> 4250;
4253 -> 4105;
4253 -> 4252;
4253 -> 4249;
4254 -> 4251;
4254 -> 4105;
4255 -> 4105;
4256 -> 4105;
4256 -> 4255;
4257 -> 4256;
4257 -> 4105;
4257 -> 0;
4257 -> 4255;
4258 -> 4257;
4258 -> 4105;
4259 -> 4105;
4260 -> 4105;
4261 -> 4105;
4262 -> 4105;
4263 -> 4105;
4264 -> 4262;
4264 -> 4263;
4265 -> 4264;
4265 -> 0;
4265 -> 4263;
4266 -> 4264;
4266 -> 0;
4266 -> 4263;
4267 -> 4263;
4268 -> 0;
4268 -> 4263;
4269 -> 4264;
4269 -> 4268;
4269 -> 4263;
4270 -> 0;
4270 -> 4263;
4271 -> 4264;
4271 -> 4270;
4271 -> 4263;
4272 -> 4263;
4273 -> 0;
4273 -> 4263;
4274 -> 4264;
4274 -> 4273;
4274 -> 4263;
4275 -> 4274;
4275 -> 4263;
4276 -> 4263;
4277 -> 4275;
4277 -> 4276;
4278 -> 4276;
4279 -> 4277;
4279 -> 4278;
4279 -> 4276;
4280 -> 4105;
4281 -> 4105;
4282 -> 4105;
4283 -> 4105;
4284 -> 4105;
4285 -> 4105;
4286 -> 4105;
4287 -> 4105;
4288 -> 4105;
4289 -> 4284;
4289 -> 4105;
4290 -> 4289;
4291 -> 4285;
4291 -> 4290;
4291 -> 4289;
4292 -> 4287;
4292 -> 0;
4292 -> 4289;
4293 -> 4291;
4293 -> 4292;
4293 -> 4289;
4294 -> 4284;
4294 -> 4293;
4295 -> 4294;
4295 -> 4105;
4295 -> 4293;
4296 -> 4294;
4296 -> 4293;
4297 -> 4294;
4297 -> 4105;
4297 -> 4285;
4297 -> 4293;
4298 -> 4287;
4298 -> 4293;
4299 -> 4293;
4300 -> 4298;
4300 -> 4299;
4301 -> 4297;
4301 -> 4300;
4301 -> 4293;
4302 -> 4105;
4303 -> 4105;
4304 -> 4105;
4304 -> 4303;
4305 -> 4105;
4305 -> 4303;
4306 -> 4304;
4306 -> 0;
4306 -> 4303;
4307 -> 4303;
4308 -> 4306;
4308 -> 4303;
4309 -> 4305;
4309 -> 4308;
4310 -> 4309;
4310 -> 4105;
4311 -> 4283;
4311 -> 4105;
4312 -> 4282;
4312 -> 4105;
4313 -> 4105;
4314 -> 4313;
4314 -> 4105;
4315 -> 0;
4315 -> 4105;
4316 -> 4105;
4317 -> 4314;
4317 -> 4316;
4318 -> 4315;
4318 -> 4316;
4319 -> 4310;
4319 -> 4105;
4320 -> 4311;
4320 -> 4105;
4321 -> 4312;
4321 -> 4105;
4322 -> 4313;
4322 -> 4105;
4323 -> 4319;
4323 -> 4105;
4324 -> 4320;
4324 -> 4105;
4325 -> 4321;
4325 -> 4105;
4326 -> 4322;
4326 -> 4105;
4327 -> 4326;
4327 -> 4105;
4328 -> 4323;
4328 -> 4105;
4329 -> 4324;
4329 -> 4105;
4330 -> 4325;
4330 -> 4105;
4331 -> 4326;
4331 -> 4105;
4332 -> 4331;
4332 -> 4105;
4333 -> 0;
4333 -> 4105;
4334 -> 4105;
4335 -> 4332;
4335 -> 4334;
4336 -> 4333;
4336 -> 4334;
4337 -> 4327;
4337 -> 4105;
4338 -> 4328;
4338 -> 4105;
4339 -> 4329;
4339 -> 4105;
4340 -> 4330;
4340 -> 4105;
4341 -> 4337;
4341 -> 4105;
4342 -> 4338;
4342 -> 4105;
4343 -> 4339;
4343 -> 4105;
4344 -> 4337;
4344 -> 4105;
4345 -> 4340;
4345 -> 4105;
4346 -> 4105;
4347 -> 4105;
4348 -> 4341;
4348 -> 4347;
4348 -> 4105;
4349 -> 4341;
4349 -> 4105;
4350 -> 4341;
4350 -> 4105;
4351 -> 4105;
4352 -> 4341;
4352 -> 4105;
4353 -> 4345;
4353 -> 4105;
4354 -> 4352;
4354 -> 4105;
4355 -> 4105;
4356 -> 4352;
4356 -> 4105;
4357 -> 4105;
4358 -> 4105;
4359 -> 4105;
4360 -> 4352;
4360 -> 4105;
4361 -> 4360;
4361 -> 4105;
4362 -> 4105;
4363 -> 4359;
4363 -> 4362;
4363 -> 4105;
4364 -> 4283;
4365 -> 4105;
4365 -> 4364;
4366 -> 4365;
4366 -> 4283;
4366 -> 4364;
4367 -> 0;
4367 -> 4364;
4368 -> 4364;
4369 -> 4366;
4369 -> 4368;
4370 -> 4367;
4370 -> 4368;
4371 -> 4369;
4371 -> 4283;
4372 -> 4283;
4373 -> 4283;
4374 -> 4224;
4374 -> 4283;
4374 -> 0;
4374 -> 4223;
4375 -> 4374;
4375 -> 4105;
4376 -> 4105;
4376 -> 4375;
4377 -> 4376;
4377 -> 4105;
4378 -> 4105;
4379 -> 4105;
4380 -> 4378;
4380 -> 4379;
4381 -> 4379;
4382 -> 4380;
4382 -> 4381;
4383 -> 4382;
4383 -> 4339;
4383 -> 4381;
4384 -> 4383;
4384 -> 4379;
4385 -> 4379;
4386 -> 4380;
4386 -> 4385;
4387 -> 4386;
4387 -> 4339;
4387 -> 4385;
4388 -> 4387;
4388 -> 4379;
4389 -> 4388;
4389 -> 4339;
4390 -> 4389;
4391 -> 4105;
4392 -> 4105;
4393 -> 4391;
4393 -> 4105;
4394 -> 4391;
4394 -> 4105;
4395 -> 4391;
4395 -> 4105;
4396 -> 4105;
4397 -> 4105;
4398 -> 4105;
4399 -> 4392;
4399 -> 4398;
4399 -> 4105;
4400 -> 4105;
4401 -> 4339;
4401 -> 0;
4402 -> 4401;
4402 -> 4396;
4402 -> 4339;
4403 -> 4392;
4403 -> 4339;
4404 -> 4403;
4405 -> 4403;
4406 -> 4403;
4407 -> 4339;
4407 -> 4403;
4407 -> 0;
4407 -> 4105;
4408 -> 4105;
4408 -> 4407;
4409 -> 4407;
4410 -> 4339;
4410 -> 4407;
4411 -> 4392;
4411 -> 4407;
4412 -> 4407;
4413 -> 4408;
4413 -> 4412;
4414 -> 4409;
4414 -> 4412;
4415 -> 4410;
4415 -> 4412;
4416 -> 4411;
4416 -> 4412;
4417 -> 4396;
4417 -> 4412;
4418 -> 4415;
4418 -> 4403;
4418 -> 4412;
4419 -> 4412;
4420 -> 4339;
4420 -> 4403;
4420 -> 0;
4420 -> 4105;
4421 -> 4105;
4422 -> 4105;
4423 -> 4339;
4423 -> 4105;
4424 -> 4403;
4424 -> 4339;
4425 -> 4339;
4426 -> 4425;
4426 -> 4339;
4427 -> 4339;
4428 -> 4427;
4428 -> 4339;
4429 -> 4403;
4430 -> 4403;
4431 -> 4429;
4431 -> 4403;
4432 -> 4430;
4432 -> 4403;
4433 -> 4403;
4434 -> 4403;
4434 -> 0;
4435 -> 4403;
4436 -> 4431;
4436 -> 4403;
4437 -> 4432;
4437 -> 4403;
4438 -> 4403;
4439 -> 4403;
4439 -> 0;
4440 -> 4403;
4440 -> 0;
4441 -> 4437;
4441 -> 4403;
4442 -> 4441;
4442 -> 4403;
4443 -> 4403;
4444 -> 4436;
4444 -> 4403;
4445 -> 4438;
4445 -> 4403;
4446 -> 4403;
4447 -> 4443;
4447 -> 4446;
4447 -> 4403;
4448 -> 4403;
4449 -> 4403;
4450 -> 4403;
4451 -> 4448;
4451 -> 4450;
4451 -> 4403;
4452 -> 4403;
4453 -> 4452;
4453 -> 4403;
4454 -> 4441;
4454 -> 4453;
4455 -> 4403;
4455 -> 2436;
4456 -> 4455;
4456 -> 4426;
4456 -> 2436;
4457 -> 4456;
4457 -> 0;
4457 -> 2436;
4458 -> 4457;
4458 -> 2430;
4459 -> 4403;
4460 -> 4403;
4461 -> 4403;
4462 -> 4460;
4462 -> 4461;
4463 -> 4460;
4463 -> 4461;
4464 -> 4460;
4464 -> 4461;
4465 -> 4460;
4465 -> 4461;
4466 -> 4460;
4466 -> 4461;
4467 -> 4403;
4467 -> 4461;
4468 -> 4461;
4469 -> 4463;
4469 -> 4468;
4469 -> 4461;
4470 -> 4461;
4471 -> 4470;
4471 -> 4403;
4472 -> 4403;
4473 -> 4471;
4473 -> 4472;
4473 -> 4403;
4474 -> 4403;
4475 -> 4403;
4475 -> 4474;
4476 -> 4475;
4476 -> 4403;
4476 -> 0;
4476 -> 4474;
4477 -> 4474;
4478 -> 4475;
4478 -> 4403;
4478 -> 4477;
4478 -> 4474;
4479 -> 4476;
4479 -> 4403;
4480 -> 4403;
4481 -> 4403;
4482 -> 4403;
4482 -> 4481;
4483 -> 4482;
4483 -> 4403;
4483 -> 0;
4483 -> 4481;
4484 -> 4481;
4485 -> 4482;
4485 -> 4403;
4485 -> 4484;
4485 -> 4481;
4486 -> 4483;
4486 -> 4403;
4487 -> 4403;
4488 -> 4403;
4489 -> 4487;
4489 -> 4488;
4490 -> 4489;
4490 -> 0;
4490 -> 4488;
4491 -> 4489;
4491 -> 0;
4491 -> 4488;
4492 -> 4488;
4493 -> 0;
4493 -> 4488;
4494 -> 4489;
4494 -> 4493;
4494 -> 4488;
4495 -> 0;
4495 -> 4488;
4496 -> 4489;
4496 -> 4495;
4496 -> 4488;
4497 -> 4488;
4498 -> 0;
4498 -> 4488;
4499 -> 4489;
4499 -> 4498;
4499 -> 4488;
4500 -> 4499;
4500 -> 4488;
4501 -> 4488;
4502 -> 4500;
4502 -> 4501;
4503 -> 4501;
4504 -> 4502;
4504 -> 4503;
4504 -> 4501;
4505 -> 4403;
4506 -> 4403;
4507 -> 4403;
4508 -> 4403;
4509 -> 4403;
4510 -> 4403;
4511 -> 4403;
4512 -> 4403;
4513 -> 4403;
4514 -> 4403;
4514 -> 4513;
4515 -> 4514;
4515 -> 4403;
4515 -> 0;
4515 -> 4513;
4516 -> 4513;
4517 -> 4514;
4517 -> 4403;
4517 -> 4516;
4517 -> 4513;
4518 -> 4515;
4518 -> 4403;
4519 -> 4403;
4519 -> 0;
4520 -> 4403;
4521 -> 4403;
4522 -> 4403;
4523 -> 4403;
4524 -> 4403;
4525 -> 4403;
4526 -> 4403;
4527 -> 4403;
4528 -> 4521;
4528 -> 4527;
4529 -> 4528;
4529 -> 4403;
4529 -> 0;
4529 -> 4527;
4530 -> 4527;
4531 -> 4528;
4531 -> 4403;
4531 -> 4530;
4531 -> 4527;
4532 -> 4529;
4532 -> 4403;
4533 -> 4403;
4534 -> 4403;
4534 -> 4533;
4535 -> 0;
4535 -> 4533;
4536 -> 4535;
4536 -> 4403;
4537 -> 4524;
4537 -> 4536;
4537 -> 4403;
4538 -> 4403;
4539 -> 4403;
4540 -> 4403;
4540 -> 4539;
4541 -> 4540;
4541 -> 4403;
4541 -> 0;
4541 -> 4539;
4542 -> 4539;
4543 -> 4540;
4543 -> 4403;
4543 -> 4542;
4543 -> 4539;
4544 -> 4541;
4544 -> 4403;
4545 -> 4403;
4546 -> 4403;
4546 -> 4545;
4547 -> 4546;
4547 -> 4403;
4547 -> 0;
4547 -> 4545;
4548 -> 4547;
4548 -> 4403;
4549 -> 4403;
4550 -> 4403;
4551 -> 4403;
4552 -> 4403;
4553 -> 4403;
4554 -> 4552;
4554 -> 4553;
4555 -> 4554;
4555 -> 0;
4555 -> 4553;
4556 -> 4554;
4556 -> 0;
4556 -> 4553;
4557 -> 4553;
4558 -> 0;
4558 -> 4553;
4559 -> 4554;
4559 -> 4558;
4559 -> 4553;
4560 -> 0;
4560 -> 4553;
4561 -> 4554;
4561 -> 4560;
4561 -> 4553;
4562 -> 4553;
4563 -> 0;
4563 -> 4553;
4564 -> 4554;
4564 -> 4563;
4564 -> 4553;
4565 -> 4564;
4565 -> 4553;
4566 -> 4553;
4567 -> 4565;
4567 -> 4566;
4568 -> 4566;
4569 -> 4567;
4569 -> 4568;
4569 -> 4566;
4570 -> 4403;
4571 -> 4403;
4572 -> 4403;
4573 -> 4403;
4574 -> 4403;
4575 -> 4403;
4576 -> 4403;
4577 -> 4403;
4578 -> 4573;
4578 -> 4403;
4579 -> 4578;
4580 -> 4574;
4580 -> 4579;
4580 -> 4578;
4581 -> 4576;
4581 -> 0;
4581 -> 4578;
4582 -> 4580;
4582 -> 4581;
4582 -> 4578;
4583 -> 4573;
4583 -> 4582;
4584 -> 4583;
4584 -> 4403;
4584 -> 4582;
4585 -> 4583;
4585 -> 4582;
4586 -> 4583;
4586 -> 4403;
4586 -> 4574;
4586 -> 4582;
4587 -> 4576;
4587 -> 4582;
4588 -> 4582;
4589 -> 4587;
4589 -> 4588;
4590 -> 4586;
4590 -> 4589;
4590 -> 4582;
4591 -> 4403;
4592 -> 4403;
4593 -> 4403;
4593 -> 4592;
4594 -> 4403;
4594 -> 4592;
4595 -> 4593;
4595 -> 0;
4595 -> 4592;
4596 -> 4592;
4597 -> 4595;
4597 -> 4592;
4598 -> 4594;
4598 -> 4597;
4599 -> 4598;
4599 -> 4403;
4600 -> 4572;
4600 -> 4403;
4601 -> 4403;
4602 -> 4601;
4602 -> 4403;
4603 -> 0;
4603 -> 4403;
4604 -> 4403;
4605 -> 4602;
4605 -> 4604;
4606 -> 4603;
4606 -> 4604;
4607 -> 4599;
4607 -> 4403;
4608 -> 4600;
4608 -> 4403;
4609 -> 4601;
4609 -> 4403;
4610 -> 4607;
4610 -> 4403;
4611 -> 4608;
4611 -> 4403;
4612 -> 4609;
4612 -> 4403;
4613 -> 4612;
4613 -> 4403;
4614 -> 4610;
4614 -> 4403;
4615 -> 4611;
4615 -> 4403;
4616 -> 4612;
4616 -> 4403;
4617 -> 4616;
4617 -> 4403;
4618 -> 0;
4618 -> 4403;
4619 -> 4403;
4620 -> 4617;
4620 -> 4619;
4621 -> 4618;
4621 -> 4619;
4622 -> 4613;
4622 -> 4403;
4623 -> 4614;
4623 -> 4403;
4624 -> 4615;
4624 -> 4403;
4625 -> 4622;
4625 -> 4403;
4626 -> 4623;
4626 -> 4403;
4627 -> 4403;
4628 -> 4622;
4628 -> 4403;
4629 -> 4624;
4629 -> 4403;
4630 -> 4403;
4631 -> 4403;
4632 -> 4625;
4632 -> 4631;
4632 -> 4403;
4633 -> 4625;
4633 -> 4403;
4634 -> 4625;
4634 -> 4403;
4635 -> 4403;
4636 -> 4625;
4636 -> 4403;
4637 -> 4629;
4637 -> 4403;
4638 -> 4636;
4638 -> 4403;
4639 -> 4403;
4640 -> 4636;
4640 -> 4403;
4641 -> 4403;
4642 -> 4403;
4643 -> 4403;
4644 -> 4636;
4644 -> 4403;
4645 -> 4644;
4645 -> 4403;
4646 -> 4403;
4647 -> 4643;
4647 -> 4646;
4647 -> 4403;
4648 -> 4572;
4649 -> 4403;
4649 -> 4648;
4650 -> 4649;
4650 -> 4572;
4650 -> 4648;
4651 -> 0;
4651 -> 4648;
4652 -> 4648;
4653 -> 4650;
4653 -> 4652;
4654 -> 4651;
4654 -> 4652;
4655 -> 4653;
4655 -> 4572;
4656 -> 4572;
4657 -> 4572;
4658 -> 4514;
4658 -> 4572;
4658 -> 0;
4658 -> 4513;
4659 -> 4658;
4659 -> 4403;
4660 -> 4403;
4660 -> 4659;
4661 -> 4660;
4661 -> 4403;
4662 -> 4403;
4663 -> 4403;
4664 -> 4662;
4664 -> 4663;
4665 -> 4663;
4666 -> 4664;
4666 -> 4665;
4667 -> 4666;
4667 -> 4572;
4667 -> 4665;
4668 -> 4667;
4668 -> 4663;
4669 -> 4663;
4670 -> 4664;
4670 -> 4669;
4671 -> 4670;
4671 -> 4572;
4671 -> 4669;
4672 -> 4671;
4672 -> 4663;
4673 -> 4672;
4673 -> 4572;
4674 -> 4673;
4675 -> 4403;
4676 -> 4675;
4676 -> 4403;
4677 -> 4675;
4677 -> 4403;
4678 -> 4675;
4678 -> 4403;
4679 -> 4403;
4680 -> 4403;
4681 -> 4403;
4682 -> 4403;
4683 -> 4572;
4683 -> 0;
4684 -> 4683;
4684 -> 4679;
4684 -> 4572;
4685 -> 4572;
4686 -> 4572;
4687 -> 4572;
4688 -> 4572;
4688 -> 0;
4688 -> 4403;
4689 -> 4403;
4689 -> 4688;
4690 -> 4688;
4691 -> 4572;
4691 -> 4688;
4692 -> 4688;
4693 -> 4689;
4693 -> 4692;
4694 -> 4690;
4694 -> 4692;
4695 -> 4691;
4695 -> 4692;
4696 -> 4689;
4696 -> 4692;
4697 -> 4679;
4697 -> 4692;
4698 -> 4695;
4698 -> 4572;
4698 -> 4692;
4699 -> 4692;
4700 -> 4572;
4700 -> 0;
4700 -> 4403;
4701 -> 4403;
4702 -> 4403;
4703 -> 4572;
4703 -> 4403;
4704 -> 4572;
4705 -> 4572;
4706 -> 4705;
4706 -> 4572;
4707 -> 4572;
4708 -> 4707;
4708 -> 4572;
4709 -> 4572;
4710 -> 4572;
4711 -> 4709;
4711 -> 4572;
4712 -> 4710;
4712 -> 4572;
4713 -> 4572;
4714 -> 4572;
4714 -> 0;
4715 -> 4572;
4716 -> 4711;
4716 -> 4572;
4717 -> 4712;
4717 -> 4572;
4718 -> 4572;
4719 -> 4572;
4719 -> 0;
4720 -> 4572;
4720 -> 0;
4721 -> 4717;
4721 -> 4572;
4722 -> 4721;
4722 -> 4572;
4723 -> 4572;
4724 -> 4716;
4724 -> 4572;
4725 -> 4718;
4725 -> 4572;
4726 -> 4572;
4727 -> 4723;
4727 -> 4726;
4727 -> 4572;
4728 -> 4572;
4729 -> 4572;
4730 -> 4572;
4731 -> 4728;
4731 -> 4730;
4731 -> 4572;
4732 -> 4572;
4733 -> 4732;
4733 -> 4572;
4734 -> 4721;
4734 -> 4733;
4735 -> 4572;
4735 -> 2436;
4736 -> 4735;
4736 -> 4706;
4736 -> 2436;
4737 -> 4736;
4737 -> 0;
4737 -> 2436;
4738 -> 4737;
4738 -> 2430;
4739 -> 4572;
4739 -> 1172;
4739 -> 1166;
4740 -> 1170;
4740 -> 4572;
4740 -> 1166;
4741 -> 4572;
4741 -> 1241;
4742 -> 4572;
4742 -> 1466;
4743 -> 4742;
4743 -> 1479;
4744 -> 4572;
4744 -> 1466;
4745 -> 4744;
4745 -> 1484;
4746 -> 4572;
4747 -> 4572;
4748 -> 4572;
4749 -> 4747;
4749 -> 4748;
4750 -> 4747;
4750 -> 4748;
4751 -> 4747;
4751 -> 4748;
4752 -> 4747;
4752 -> 4748;
4753 -> 4747;
4753 -> 4748;
4754 -> 4572;
4754 -> 4748;
4755 -> 4748;
4756 -> 4750;
4756 -> 4755;
4756 -> 4748;
4757 -> 4748;
4758 -> 4757;
4758 -> 4572;
4759 -> 4572;
4760 -> 4758;
4760 -> 4759;
4760 -> 4572;
4761 -> 4572;
4762 -> 4572;
4762 -> 4761;
4763 -> 4762;
4763 -> 4572;
4763 -> 0;
4763 -> 4761;
4764 -> 4761;
4765 -> 4762;
4765 -> 4572;
4765 -> 4764;
4765 -> 4761;
4766 -> 4763;
4766 -> 4572;
4767 -> 4572;
4768 -> 4572;
4769 -> 4572;
4769 -> 4768;
4770 -> 4769;
4770 -> 4572;
4770 -> 0;
4770 -> 4768;
4771 -> 4768;
4772 -> 4769;
4772 -> 4572;
4772 -> 4771;
4772 -> 4768;
4773 -> 4770;
4773 -> 4572;
4774 -> 4572;
4775 -> 4572;
4776 -> 4774;
4776 -> 4775;
4777 -> 4776;
4777 -> 0;
4777 -> 4775;
4778 -> 4776;
4778 -> 0;
4778 -> 4775;
4779 -> 4775;
4780 -> 0;
4780 -> 4775;
4781 -> 4776;
4781 -> 4780;
4781 -> 4775;
4782 -> 0;
4782 -> 4775;
4783 -> 4776;
4783 -> 4782;
4783 -> 4775;
4784 -> 4775;
4785 -> 0;
4785 -> 4775;
4786 -> 4776;
4786 -> 4785;
4786 -> 4775;
4787 -> 4786;
4787 -> 4775;
4788 -> 4775;
4789 -> 4787;
4789 -> 4788;
4790 -> 4788;
4791 -> 4789;
4791 -> 4790;
4791 -> 4788;
4792 -> 4572;
4793 -> 4572;
4794 -> 4572;
4795 -> 4572;
4796 -> 4572;
4797 -> 4572;
4798 -> 4572;
4799 -> 4572;
4800 -> 4572;
4801 -> 4572;
4801 -> 4800;
4802 -> 4801;
4802 -> 4572;
4802 -> 0;
4802 -> 4800;
4803 -> 4800;
4804 -> 4801;
4804 -> 4572;
4804 -> 4803;
4804 -> 4800;
4805 -> 4802;
4805 -> 4572;
4806 -> 4572;
4806 -> 0;
4807 -> 4572;
4808 -> 4572;
4809 -> 4572;
4810 -> 4572;
4811 -> 4572;
4812 -> 4572;
4813 -> 4572;
4814 -> 4572;
4815 -> 4808;
4815 -> 4814;
4816 -> 4815;
4816 -> 4572;
4816 -> 0;
4816 -> 4814;
4817 -> 4814;
4818 -> 4815;
4818 -> 4572;
4818 -> 4817;
4818 -> 4814;
4819 -> 4816;
4819 -> 4572;
4820 -> 4572;
4821 -> 4572;
4821 -> 4820;
4822 -> 0;
4822 -> 4820;
4823 -> 4822;
4823 -> 4572;
4824 -> 4811;
4824 -> 4823;
4824 -> 4572;
4825 -> 4572;
4826 -> 4572;
4827 -> 4572;
4827 -> 4826;
4828 -> 4827;
4828 -> 4572;
4828 -> 0;
4828 -> 4826;
4829 -> 4826;
4830 -> 4827;
4830 -> 4572;
4830 -> 4829;
4830 -> 4826;
4831 -> 4828;
4831 -> 4572;
4832 -> 4572;
4833 -> 4572;
4833 -> 4832;
4834 -> 4833;
4834 -> 4572;
4834 -> 0;
4834 -> 4832;
4835 -> 4834;
4835 -> 4572;
4836 -> 4572;
4837 -> 4572;
4838 -> 4572;
4839 -> 4572;
4840 -> 4572;
4841 -> 4839;
4841 -> 4840;
4842 -> 4841;
4842 -> 0;
4842 -> 4840;
4843 -> 4841;
4843 -> 0;
4843 -> 4840;
4844 -> 4840;
4845 -> 0;
4845 -> 4840;
4846 -> 4841;
4846 -> 4845;
4846 -> 4840;
4847 -> 0;
4847 -> 4840;
4848 -> 4841;
4848 -> 4847;
4848 -> 4840;
4849 -> 4840;
4850 -> 0;
4850 -> 4840;
4851 -> 4841;
4851 -> 4850;
4851 -> 4840;
4852 -> 4851;
4852 -> 4840;
4853 -> 4840;
4854 -> 4852;
4854 -> 4853;
4855 -> 4853;
4856 -> 4854;
4856 -> 4855;
4856 -> 4853;
4857 -> 4572;
4858 -> 4572;
4859 -> 4572;
4860 -> 4572;
4861 -> 4572;
4862 -> 4572;
4863 -> 4572;
4864 -> 4859;
4864 -> 4572;
4865 -> 4864;
4866 -> 4860;
4866 -> 4865;
4866 -> 4864;
4867 -> 4862;
4867 -> 0;
4867 -> 4864;
4868 -> 4866;
4868 -> 4867;
4868 -> 4864;
4869 -> 4859;
4869 -> 4868;
4870 -> 4869;
4870 -> 4572;
4870 -> 4868;
4871 -> 4869;
4871 -> 4868;
4872 -> 4869;
4872 -> 4572;
4872 -> 4860;
4872 -> 4868;
4873 -> 4862;
4873 -> 4868;
4874 -> 4868;
4875 -> 4873;
4875 -> 4874;
4876 -> 4872;
4876 -> 4875;
4876 -> 4868;
4877 -> 4572;
4878 -> 4572;
4879 -> 4572;
4879 -> 4878;
4880 -> 4572;
4880 -> 4878;
4881 -> 4879;
4881 -> 0;
4881 -> 4878;
4882 -> 4878;
4883 -> 4881;
4883 -> 4878;
4884 -> 4880;
4884 -> 4883;
4885 -> 4884;
4885 -> 4572;
4886 -> 4572;
4887 -> 4572;
4888 -> 4887;
4888 -> 4572;
4889 -> 0;
4889 -> 4572;
4890 -> 4572;
4891 -> 4888;
4891 -> 4890;
4892 -> 4889;
4892 -> 4890;
4893 -> 4885;
4893 -> 4572;
4894 -> 4886;
4894 -> 4572;
4895 -> 4887;
4895 -> 4572;
4896 -> 4893;
4896 -> 4572;
4897 -> 4894;
4897 -> 4572;
4898 -> 4895;
4898 -> 4572;
4899 -> 4898;
4899 -> 4572;
4900 -> 4896;
4900 -> 4572;
4901 -> 4897;
4901 -> 4572;
4902 -> 4898;
4902 -> 4572;
4903 -> 4902;
4903 -> 4572;
4904 -> 0;
4904 -> 4572;
4905 -> 4572;
4906 -> 4903;
4906 -> 4905;
4907 -> 4904;
4907 -> 4905;
4908 -> 4899;
4908 -> 4572;
4909 -> 4900;
4909 -> 4572;
4910 -> 4901;
4910 -> 4572;
4911 -> 4908;
4911 -> 4572;
4912 -> 4909;
4912 -> 4572;
4913 -> 4572;
4914 -> 4908;
4914 -> 4572;
4915 -> 4910;
4915 -> 4572;
4916 -> 4572;
4917 -> 4572;
4918 -> 4911;
4918 -> 4917;
4918 -> 4572;
4919 -> 4911;
4919 -> 4572;
4920 -> 4911;
4920 -> 4572;
4921 -> 4572;
4922 -> 4911;
4922 -> 4572;
4923 -> 4915;
4923 -> 4572;
4924 -> 4922;
4924 -> 4572;
4925 -> 4572;
4926 -> 4922;
4926 -> 4572;
4927 -> 4572;
4928 -> 4572;
4929 -> 4572;
4930 -> 4922;
4930 -> 4572;
4931 -> 4930;
4931 -> 4572;
4932 -> 4572;
4933 -> 4929;
4933 -> 4932;
4933 -> 4572;
4934 -> 4886;
4935 -> 4572;
4935 -> 4934;
4936 -> 4935;
4936 -> 4886;
4936 -> 4934;
4937 -> 0;
4937 -> 4934;
4938 -> 4934;
4939 -> 4936;
4939 -> 4938;
4940 -> 4937;
4940 -> 4938;
4941 -> 4939;
4941 -> 4886;
4942 -> 4886;
4943 -> 4886;
4944 -> 4801;
4944 -> 4886;
4944 -> 0;
4944 -> 4800;
4945 -> 4944;
4945 -> 4572;
4946 -> 4572;
4946 -> 4945;
4947 -> 4946;
4947 -> 4572;
4948 -> 4572;
4949 -> 4572;
4950 -> 4948;
4950 -> 4949;
4951 -> 4949;
4952 -> 4950;
4952 -> 4951;
4953 -> 4952;
4953 -> 4886;
4953 -> 4951;
4954 -> 4953;
4954 -> 4949;
4955 -> 4949;
4956 -> 4950;
4956 -> 4955;
4957 -> 4956;
4957 -> 4886;
4957 -> 4955;
4958 -> 4957;
4958 -> 4949;
4959 -> 4958;
4959 -> 4886;
4960 -> 4959;
4961 -> 4572;
4962 -> 4961;
4962 -> 4572;
4963 -> 4961;
4963 -> 4572;
4964 -> 4961;
4964 -> 4572;
4965 -> 4572;
4966 -> 4572;
4967 -> 4572;
4968 -> 4572;
4969 -> 4886;
4969 -> 0;
4970 -> 4969;
4970 -> 4965;
4970 -> 4886;
4971 -> 4886;
4972 -> 4886;
4973 -> 4886;
4974 -> 4886;
4974 -> 0;
4974 -> 4572;
4975 -> 4572;
4975 -> 4974;
4976 -> 4974;
4977 -> 4886;
4977 -> 4974;
4978 -> 4974;
4979 -> 4975;
4979 -> 4978;
4980 -> 4976;
4980 -> 4978;
4981 -> 4977;
4981 -> 4978;
4982 -> 4975;
4982 -> 4978;
4983 -> 4965;
4983 -> 4978;
4984 -> 4981;
4984 -> 4886;
4984 -> 4978;
4985 -> 4978;
4986 -> 4886;
4986 -> 0;
4986 -> 4572;
4987 -> 4572;
4988 -> 4572;
4989 -> 4886;
4989 -> 4572;
4990 -> 4886;
4991 -> 4886;
4992 -> 4991;
4992 -> 4886;
4993 -> 4886;
4994 -> 4993;
4994 -> 4886;
4995 -> 4886;
4996 -> 4886;
4997 -> 4995;
4997 -> 4886;
4998 -> 4996;
4998 -> 4886;
4999 -> 4886;
5000 -> 4886;
5000 -> 0;
5001 -> 4886;
5002 -> 4997;
5002 -> 4886;
5003 -> 4998;
5003 -> 4886;
5004 -> 4886;
5005 -> 4886;
5005 -> 0;
5006 -> 4886;
5006 -> 0;
5007 -> 5003;
5007 -> 4886;
5008 -> 5007;
5008 -> 4886;
5009 -> 4886;
5010 -> 5002;
5010 -> 4886;
5011 -> 5004;
5011 -> 4886;
5012 -> 4886;
5013 -> 5009;
5013 -> 5012;
5013 -> 4886;
5014 -> 4886;
5015 -> 4886;
5016 -> 4886;
5017 -> 5014;
5017 -> 5016;
5017 -> 4886;
5018 -> 4886;
5019 -> 5018;
5019 -> 4886;
5020 -> 5007;
5020 -> 5019;
5021 -> 4886;
5021 -> 2436;
5022 -> 5021;
5022 -> 4992;
5022 -> 2436;
5023 -> 5022;
5023 -> 0;
5023 -> 2436;
5024 -> 5023;
5024 -> 2430;
5025 -> 4886;
5026 -> 4886;
5027 -> 4886;
5028 -> 5026;
5028 -> 5027;
5029 -> 5026;
5029 -> 5027;
5030 -> 5026;
5030 -> 5027;
5031 -> 5026;
5031 -> 5027;
5032 -> 5026;
5032 -> 5027;
5033 -> 4886;
5033 -> 5027;
5034 -> 5027;
5035 -> 5029;
5035 -> 5034;
5035 -> 5027;
5036 -> 5027;
5037 -> 5036;
5037 -> 4886;
5038 -> 4886;
5039 -> 5037;
5039 -> 5038;
5039 -> 4886;
5040 -> 4886;
5041 -> 4886;
5041 -> 5040;
5042 -> 5041;
5042 -> 4886;
5042 -> 0;
5042 -> 5040;
5043 -> 5040;
5044 -> 5041;
5044 -> 4886;
5044 -> 5043;
5044 -> 5040;
5045 -> 5042;
5045 -> 4886;
5046 -> 4886;
5047 -> 4886;
5048 -> 4886;
5048 -> 5047;
5049 -> 5048;
5049 -> 4886;
5049 -> 0;
5049 -> 5047;
5050 -> 5047;
5051 -> 5048;
5051 -> 4886;
5051 -> 5050;
5051 -> 5047;
5052 -> 5049;
5052 -> 4886;
5053 -> 4886;
5054 -> 4886;
5055 -> 5053;
5055 -> 5054;
5056 -> 5055;
5056 -> 0;
5056 -> 5054;
5057 -> 5055;
5057 -> 0;
5057 -> 5054;
5058 -> 5054;
5059 -> 0;
5059 -> 5054;
5060 -> 5055;
5060 -> 5059;
5060 -> 5054;
5061 -> 0;
5061 -> 5054;
5062 -> 5055;
5062 -> 5061;
5062 -> 5054;
5063 -> 5054;
5064 -> 0;
5064 -> 5054;
5065 -> 5055;
5065 -> 5064;
5065 -> 5054;
5066 -> 5065;
5066 -> 5054;
5067 -> 5054;
5068 -> 5066;
5068 -> 5067;
5069 -> 5067;
5070 -> 5068;
5070 -> 5069;
5070 -> 5067;
5071 -> 4886;
5072 -> 4886;
5073 -> 4886;
5074 -> 4886;
5075 -> 4886;
5076 -> 4886;
5077 -> 4886;
5078 -> 4886;
5079 -> 4886;
5080 -> 4886;
5080 -> 5079;
5081 -> 5080;
5081 -> 4886;
5081 -> 0;
5081 -> 5079;
5082 -> 5079;
5083 -> 5080;
5083 -> 4886;
5083 -> 5082;
5083 -> 5079;
5084 -> 5081;
5084 -> 4886;
5085 -> 4886;
5085 -> 0;
5086 -> 4886;
5087 -> 4886;
5088 -> 4886;
5089 -> 4886;
5090 -> 4886;
5091 -> 4886;
5092 -> 4886;
5093 -> 4886;
5094 -> 5087;
5094 -> 5093;
5095 -> 5094;
5095 -> 4886;
5095 -> 0;
5095 -> 5093;
5096 -> 5093;
5097 -> 5094;
5097 -> 4886;
5097 -> 5096;
5097 -> 5093;
5098 -> 5095;
5098 -> 4886;
5099 -> 4886;
5100 -> 4886;
5100 -> 5099;
5101 -> 0;
5101 -> 5099;
5102 -> 5101;
5102 -> 4886;
5103 -> 5090;
5103 -> 5102;
5103 -> 4886;
5104 -> 4886;
5105 -> 4886;
5106 -> 4886;
5106 -> 5105;
5107 -> 5106;
5107 -> 4886;
5107 -> 0;
5107 -> 5105;
5108 -> 5105;
5109 -> 5106;
5109 -> 4886;
5109 -> 5108;
5109 -> 5105;
5110 -> 5107;
5110 -> 4886;
5111 -> 4886;
5112 -> 4886;
5112 -> 5111;
5113 -> 5112;
5113 -> 4886;
5113 -> 0;
5113 -> 5111;
5114 -> 5113;
5114 -> 4886;
5115 -> 4886;
5116 -> 4886;
5117 -> 4886;
5118 -> 4886;
5119 -> 4886;
5120 -> 5118;
5120 -> 5119;
5121 -> 5120;
5121 -> 0;
5121 -> 5119;
5122 -> 5120;
5122 -> 0;
5122 -> 5119;
5123 -> 5119;
5124 -> 0;
5124 -> 5119;
5125 -> 5120;
5125 -> 5124;
5125 -> 5119;
5126 -> 0;
5126 -> 5119;
5127 -> 5120;
5127 -> 5126;
5127 -> 5119;
5128 -> 5119;
5129 -> 0;
5129 -> 5119;
5130 -> 5120;
5130 -> 5129;
5130 -> 5119;
5131 -> 5130;
5131 -> 5119;
5132 -> 5119;
5133 -> 5131;
5133 -> 5132;
5134 -> 5132;
5135 -> 5133;
5135 -> 5134;
5135 -> 5132;
5136 -> 4886;
5137 -> 4886;
5138 -> 4886;
5139 -> 4886;
5140 -> 4886;
5141 -> 4886;
5142 -> 4886;
5143 -> 5138;
5143 -> 4886;
5144 -> 5143;
5145 -> 5139;
5145 -> 5144;
5145 -> 5143;
5146 -> 5141;
5146 -> 0;
5146 -> 5143;
5147 -> 5145;
5147 -> 5146;
5147 -> 5143;
5148 -> 5138;
5148 -> 5147;
5149 -> 5148;
5149 -> 4886;
5149 -> 5147;
5150 -> 5148;
5150 -> 5147;
5151 -> 5148;
5151 -> 4886;
5151 -> 5139;
5151 -> 5147;
5152 -> 5141;
5152 -> 5147;
5153 -> 5147;
5154 -> 5152;
5154 -> 5153;
5155 -> 5151;
5155 -> 5154;
5155 -> 5147;
5156 -> 4886;
5157 -> 4886;
5158 -> 4886;
5158 -> 5157;
5159 -> 4886;
5159 -> 5157;
5160 -> 5158;
5160 -> 0;
5160 -> 5157;
5161 -> 5157;
5162 -> 5160;
5162 -> 5157;
5163 -> 5159;
5163 -> 5162;
5164 -> 5163;
5164 -> 4886;
5165 -> 4886;
5166 -> 5165;
5166 -> 4886;
5167 -> 0;
5167 -> 4886;
5168 -> 4886;
5169 -> 5166;
5169 -> 5168;
5170 -> 5167;
5170 -> 5168;
5171 -> 5164;
5171 -> 4886;
5172 -> 4886;
5173 -> 5165;
5173 -> 4886;
5174 -> 5171;
5174 -> 4886;
5175 -> 5172;
5175 -> 4886;
5176 -> 5173;
5176 -> 4886;
5177 -> 5176;
5177 -> 4886;
5178 -> 5174;
5178 -> 4886;
5179 -> 5175;
5179 -> 4886;
5180 -> 5176;
5180 -> 4886;
5181 -> 5180;
5181 -> 4886;
5182 -> 0;
5182 -> 4886;
5183 -> 4886;
5184 -> 5181;
5184 -> 5183;
5185 -> 5182;
5185 -> 5183;
5186 -> 5177;
5186 -> 4886;
5187 -> 5178;
5187 -> 4886;
5188 -> 5179;
5188 -> 4886;
5189 -> 5186;
5189 -> 4886;
5190 -> 5187;
5190 -> 4886;
5191 -> 4886;
5192 -> 5186;
5192 -> 4886;
5193 -> 5188;
5193 -> 4886;
5194 -> 4886;
5195 -> 4886;
5196 -> 5189;
5196 -> 5195;
5196 -> 4886;
5197 -> 5189;
5197 -> 4886;
5198 -> 5189;
5198 -> 4886;
5199 -> 4886;
5200 -> 5189;
5200 -> 4886;
5201 -> 5193;
5201 -> 4886;
5202 -> 5200;
5202 -> 4886;
5203 -> 4886;
5204 -> 5200;
5204 -> 4886;
5205 -> 4886;
5206 -> 4886;
5207 -> 4886;
5208 -> 5200;
5208 -> 4886;
5209 -> 5208;
5209 -> 4886;
5210 -> 4886;
5211 -> 5207;
5211 -> 5210;
5211 -> 4886;
5212 -> 5172;
5213 -> 4886;
5213 -> 5212;
5214 -> 5213;
5214 -> 5172;
5214 -> 5212;
5215 -> 0;
5215 -> 5212;
5216 -> 5212;
5217 -> 5214;
5217 -> 5216;
5218 -> 5215;
5218 -> 5216;
5219 -> 5217;
5219 -> 5172;
5220 -> 5172;
5221 -> 5172;
5222 -> 5080;
5222 -> 5172;
5222 -> 0;
5222 -> 5079;
5223 -> 5222;
5223 -> 4886;
5224 -> 4886;
5224 -> 5223;
5225 -> 5224;
5225 -> 4886;
5226 -> 4886;
5227 -> 4886;
5228 -> 5226;
5228 -> 5227;
5229 -> 5227;
5230 -> 5228;
5230 -> 5229;
5231 -> 5230;
5231 -> 5172;
5231 -> 5229;
5232 -> 5231;
5232 -> 5227;
5233 -> 5227;
5234 -> 5228;
5234 -> 5233;
5235 -> 5234;
5235 -> 5172;
5235 -> 5233;
5236 -> 5235;
5236 -> 5227;
5237 -> 5236;
5237 -> 5172;
5238 -> 5237;
5239 -> 4886;
5240 -> 5239;
5240 -> 4886;
5241 -> 5239;
5241 -> 4886;
5242 -> 5239;
5242 -> 4886;
5243 -> 4886;
5244 -> 4886;
5245 -> 4886;
5246 -> 4886;
5247 -> 5172;
5247 -> 0;
5248 -> 5247;
5248 -> 5243;
5248 -> 5172;
5249 -> 5172;
5250 -> 5172;
5251 -> 5172;
5252 -> 5172;
5252 -> 0;
5252 -> 4886;
5253 -> 4886;
5253 -> 5252;
5254 -> 5252;
5255 -> 5172;
5255 -> 5252;
5256 -> 5252;
5257 -> 5253;
5257 -> 5256;
5258 -> 5254;
5258 -> 5256;
5259 -> 5255;
5259 -> 5256;
5260 -> 5253;
5260 -> 5256;
5261 -> 5243;
5261 -> 5256;
5262 -> 5259;
5262 -> 5172;
5262 -> 5256;
5263 -> 5256;
5264 -> 5172;
5264 -> 0;
5264 -> 4886;
5265 -> 4886;
5266 -> 4886;
5267 -> 5172;
5267 -> 4886;
5268 -> 5172;
5269 -> 5172;
5270 -> 5269;
5270 -> 5172;
5271 -> 5172;
5272 -> 5271;
5272 -> 5172;
5273 -> 5172;
5274 -> 5172;
5275 -> 5273;
5275 -> 5172;
5276 -> 5274;
5276 -> 5172;
5277 -> 5172;
5278 -> 5172;
5278 -> 0;
5279 -> 5172;
5280 -> 5275;
5280 -> 5172;
5281 -> 5276;
5281 -> 5172;
5282 -> 5172;
5283 -> 5172;
5283 -> 0;
5284 -> 5172;
5284 -> 0;
5285 -> 5281;
5285 -> 5172;
5286 -> 5285;
5286 -> 5172;
5287 -> 5172;
5288 -> 5280;
5288 -> 5172;
5289 -> 5282;
5289 -> 5172;
5290 -> 5172;
5291 -> 5287;
5291 -> 5290;
5291 -> 5172;
5292 -> 5172;
5293 -> 5172;
5294 -> 5172;
5295 -> 5292;
5295 -> 5294;
5295 -> 5172;
5296 -> 5172;
5297 -> 5296;
5297 -> 5172;
5298 -> 5285;
5298 -> 5297;
5299 -> 5172;
5299 -> 2436;
5300 -> 5299;
5300 -> 5270;
5300 -> 2436;
5301 -> 5300;
5301 -> 0;
5301 -> 2436;
5302 -> 5301;
5302 -> 2430;
5303 -> 5172;
5303 -> 919;
5304 -> 921;
5304 -> 919;
5305 -> 919;
5306 -> 5303;
5306 -> 5305;
5307 -> 5304;
5307 -> 5305;
5308 -> 5306;
5308 -> 5305;
5309 -> 5307;
5309 -> 5305;
5310 -> 5305;
5311 -> 5308;
5311 -> 5310;
5312 -> 5309;
5312 -> 5310;
5313 -> 5311;
5313 -> 5310;
5314 -> 5312;
5314 -> 5310;
5315 -> 5310;
5316 -> 5310;
5317 -> 5313;
5317 -> 5316;
5318 -> 5314;
5318 -> 5316;
5319 -> 5315;
5319 -> 5316;
5320 -> 5316;
5321 -> 5318;
5321 -> 5320;
5321 -> 5316;
5322 -> 5318;
5322 -> 5316;
5323 -> 5322;
5323 -> 575;
5323 -> 917;
5323 -> 918;
5323 -> 720;
5323 -> 721;
5323 -> 730;
5323 -> 722;
5323 -> 723;
5323 -> 747;
5323 -> 726;
5323 -> 727;
5323 -> 740;
5323 -> 728;
5323 -> 729;
5323 -> 725;
5323 -> 744;
5323 -> 745;
5323 -> 746;
5323 -> 712;
5323 -> 888;
5323 -> 889;
5323 -> 898;
5323 -> 890;
5323 -> 891;
5323 -> 915;
5323 -> 894;
5323 -> 895;
5323 -> 908;
5323 -> 896;
5323 -> 897;
5323 -> 893;
5323 -> 912;
5323 -> 913;
5323 -> 914;
5323 -> 880;
5323 -> 655;
5323 -> 601;
5323 -> 823;
5323 -> 773;
5323 -> 5316;
5324 -> 5316;
5325 -> 5322;
5325 -> 5324;
5325 -> 575;
5325 -> 917;
5325 -> 918;
5325 -> 720;
5325 -> 721;
5325 -> 730;
5325 -> 722;
5325 -> 723;
5325 -> 747;
5325 -> 726;
5325 -> 727;
5325 -> 740;
5325 -> 728;
5325 -> 729;
5325 -> 725;
5325 -> 744;
5325 -> 745;
5325 -> 746;
5325 -> 712;
5325 -> 888;
5325 -> 889;
5325 -> 898;
5325 -> 890;
5325 -> 891;
5325 -> 915;
5325 -> 894;
5325 -> 895;
5325 -> 908;
5325 -> 896;
5325 -> 897;
5325 -> 893;
5325 -> 912;
5325 -> 913;
5325 -> 914;
5325 -> 880;
5325 -> 655;
5325 -> 601;
5325 -> 823;
5325 -> 773;
5325 -> 5316;
5326 -> 5325;
5326 -> 5324;
5327 -> 5326;
5327 -> 5325;
5327 -> 5324;
5328 -> 5318;
5328 -> 5316;
5329 -> 5328;
5329 -> 5327;
5329 -> 5316;
5330 -> 5316;
5331 -> 5328;
5331 -> 5330;
5331 -> 5327;
5331 -> 5316;
5332 -> 5331;
5332 -> 5330;
5333 -> 5332;
5333 -> 5331;
5333 -> 5330;
5334 -> 5317;
5334 -> 5316;
5335 -> 5319;
5335 -> 5327;
5335 -> 5333;
5335 -> 5316;
5336 -> 5334;
5336 -> 5335;
5336 -> 5316;
5337 -> 5316;
5338 -> 5336;
5338 -> 5337;
5339 -> 5336;
5339 -> 5337;
5340 -> 5336;
5340 -> 5337;
5341 -> 5336;
5341 -> 5337;
5342 -> 5336;
5342 -> 5337;
5343 -> 5342;
5343 -> 5337;
5344 -> 5342;
5344 -> 5337;
5345 -> 5342;
5345 -> 5337;
5346 -> 5342;
5346 -> 5337;
5347 -> 5342;
5347 -> 5337;
5348 -> 5342;
5348 -> 5337;
5349 -> 5342;
5349 -> 5337;
5350 -> 5342;
5350 -> 5337;
5351 -> 5342;
5351 -> 5337;
5352 -> 5342;
5352 -> 5337;
5353 -> 5342;
5353 -> 5337;
5354 -> 5338;
5354 -> 5336;
5354 -> 5342;
5354 -> 5337;
5355 -> 5338;
5355 -> 5336;
5355 -> 5342;
5355 -> 5337;
5356 -> 5338;
5356 -> 5336;
5356 -> 5342;
5356 -> 5337;
5357 -> 5338;
5357 -> 5336;
5357 -> 5342;
5357 -> 5337;
5358 -> 5340;
5358 -> 5337;
5359 -> 5358;
5360 -> 5359;
5360 -> 5342;
5360 -> 5337;
5361 -> 5341;
5361 -> 5337;
5362 -> 5361;
5363 -> 5362;
5363 -> 5342;
5363 -> 5337;
5364 -> 5337;
5365 -> 5337;
5366 -> 5338;
5366 -> 5336;
5366 -> 5365;
5366 -> 5337;
5367 -> 5338;
5367 -> 5336;
5367 -> 5337;
5368 -> 0;
5368 -> 5337;
5369 -> 5338;
5369 -> 5366;
5370 -> 5366;
5371 -> 5369;
5371 -> 5370;
5371 -> 5366;
5372 -> 5369;
5372 -> 5367;
5372 -> 5342;
5372 -> 5371;
5373 -> 5338;
5373 -> 5367;
5373 -> 5342;
5373 -> 5371;
5374 -> 5339;
5374 -> 5342;
5374 -> 5337;
5375 -> 5342;
5375 -> 5374;
5375 -> 5337;
5376 -> 5342;
5376 -> 5357;
5376 -> 5367;
5376 -> 5375;
5377 -> 5376;
5378 -> 5377;
5378 -> 5342;
5378 -> 5376;
5379 -> 5375;
5380 -> 5369;
5380 -> 5379;
5380 -> 5375;
5381 -> 5369;
5381 -> 5377;
5381 -> 5342;
5381 -> 5380;
5382 -> 5375;
5383 -> 5342;
5383 -> 5381;
5383 -> 5382;
5383 -> 5375;
5384 -> 5342;
5384 -> 5381;
5384 -> 5377;
5384 -> 5382;
5384 -> 5375;
5385 -> 5342;
5385 -> 5357;
5385 -> 5377;
5385 -> 5337;
5386 -> 5385;
5386 -> 5342;
5386 -> 5337;
5387 -> 5336;
5387 -> 5385;
5387 -> 5373;
5387 -> 5355;
5387 -> 5356;
5387 -> 5378;
5387 -> 5381;
5387 -> 5386;
5387 -> 5349;
5387 -> 5372;
5387 -> 5374;
5387 -> 5360;
5387 -> 5363;
5387 -> 5353;
5387 -> 5342;
5387 -> 5357;
5387 -> 5316;
5388 -> 5338;
5388 -> 5387;
5388 -> 5342;
5388 -> 5337;
5389 -> 5342;
5389 -> 5387;
5389 -> 5382;
5389 -> 5375;
5390 -> 5318;
5390 -> 5316;
5391 -> 5390;
5391 -> 5333;
5391 -> 5316;
5392 -> 5391;
5393 -> 5392;
5393 -> 5387;
5393 -> 5333;
5393 -> 5391;
5394 -> 5393;
5394 -> 5392;
5395 -> 5393;
5395 -> 5392;
5396 -> 5394;
5396 -> 5392;
5397 -> 5392;
5398 -> 5396;
5398 -> 5397;
5398 -> 5392;
5399 -> 5396;
5399 -> 5393;
5399 -> 5392;
5400 -> 5395;
5400 -> 5393;
5400 -> 5399;
5400 -> 5392;
5401 -> 5395;
5401 -> 5400;
5401 -> 5396;
5401 -> 5392;
5402 -> 5395;
5402 -> 5400;
5402 -> 5396;
5402 -> 5392;
5403 -> 5395;
5403 -> 5400;
5403 -> 5392;
5404 -> 5395;
5404 -> 5400;
5404 -> 5396;
5404 -> 5403;
5405 -> 5392;
5406 -> 5395;
5406 -> 5400;
5406 -> 5405;
5406 -> 5392;
5407 -> 5406;
5408 -> 5395;
5408 -> 5400;
5408 -> 5396;
5408 -> 5407;
5409 -> 5392;
5410 -> 5395;
5410 -> 5400;
5410 -> 5409;
5410 -> 5392;
5411 -> 5392;
5412 -> 5396;
5412 -> 5400;
5412 -> 5411;
5412 -> 5392;
5413 -> 5395;
5413 -> 5400;
5413 -> 5396;
5413 -> 5392;
5414 -> 5392;
5415 -> 5395;
5415 -> 5400;
5415 -> 5414;
5415 -> 5392;
5416 -> 5415;
5417 -> 5415;
5418 -> 5395;
5418 -> 5417;
5419 -> 5417;
5420 -> 5418;
5420 -> 5400;
5420 -> 5419;
5420 -> 5417;
5421 -> 5418;
5421 -> 5400;
5421 -> 5420;
5422 -> 5420;
5423 -> 5421;
5423 -> 5418;
5423 -> 5420;
5424 -> 5418;
5424 -> 5400;
5424 -> 5423;
5424 -> 5417;
5425 -> 5424;
5425 -> 5415;
5426 -> 5415;
5427 -> 5396;
5427 -> 5426;
5428 -> 5426;
5429 -> 5427;
5429 -> 5400;
5429 -> 5423;
5429 -> 5428;
5429 -> 5426;
5430 -> 5427;
5430 -> 5400;
5430 -> 5423;
5430 -> 5429;
5430 -> 5426;
5431 -> 5430;
5431 -> 5415;
5432 -> 5395;
5432 -> 5400;
5432 -> 5396;
5432 -> 5415;
5433 -> 5425;
5433 -> 5432;
5434 -> 5431;
5434 -> 5432;
5435 -> 5433;
5435 -> 5434;
5435 -> 5400;
5435 -> 5423;
5435 -> 5429;
5435 -> 5421;
5435 -> 5422;
5435 -> 5432;
5436 -> 5395;
5436 -> 5435;
5436 -> 5396;
5436 -> 5392;
5437 -> 5392;
5438 -> 5393;
5438 -> 5437;
5438 -> 5435;
5438 -> 5391;
5439 -> 5391;
5440 -> 5438;
5440 -> 5439;
5440 -> 5391;
5441 -> 5438;
5441 -> 5440;
5442 -> 5441;
5443 -> 5441;
5444 -> 5441;
5445 -> 5441;
5446 -> 5441;
5446 -> 5445;
5447 -> 5441;
5448 -> 5447;
5449 -> 5441;
5449 -> 5448;
5450 -> 5441;
5451 -> 5441;
5452 -> 5441;
5453 -> 5441;
5454 -> 5441;
5455 -> 5316;
5456 -> 5387;
5456 -> 5441;
5456 -> 5455;
5456 -> 5316;
5457 -> 5316;
5458 -> 5318;
5458 -> 5316;
5459 -> 5317;
5459 -> 5316;
5460 -> 5316;
5461 -> 5458;
5461 -> 5460;
5462 -> 5459;
5462 -> 5460;
5463 -> 5460;
5464 -> 5460;
5465 -> 5462;
5465 -> 5460;
5466 -> 5465;
5466 -> 5441;
5466 -> 5460;
5467 -> 5441;
5467 -> 5460;
5468 -> 5466;
5468 -> 5460;
5469 -> 5463;
5469 -> 5468;
5470 -> 5469;
5470 -> 5460;
5471 -> 5469;
5471 -> 5460;
5472 -> 5471;
5472 -> 5460;
5473 -> 5461;
5473 -> 5460;
5474 -> 5473;
5474 -> 5441;
5474 -> 5460;
5475 -> 5460;
5476 -> 5473;
5476 -> 5475;
5476 -> 5441;
5476 -> 5460;
5477 -> 5461;
5477 -> 5460;
5478 -> 5477;
5478 -> 5476;
5478 -> 5460;
5479 -> 5460;
5480 -> 5477;
5480 -> 5479;
5480 -> 5476;
5480 -> 5460;
5481 -> 5461;
5481 -> 5460;
5482 -> 5460;
5483 -> 5481;
5483 -> 5482;
5485 -> 5484;
5486 -> 5484;
5487 -> 5486;
5487 -> 5482;
5488 -> 5482;
5489 -> 5483;
5489 -> 5482;
5490 -> 5489;
5490 -> 5480;
5490 -> 5482;
5491 -> 5490;
5492 -> 5490;
5493 -> 5488;
5493 -> 5492;
5493 -> 5490;
5494 -> 5490;
5495 -> 5494;
5495 -> 5492;
5495 -> 5490;
5496 -> 5494;
5496 -> 5480;
5496 -> 5490;
5497 -> 5490;
5497 -> 5480;
5498 -> 5490;
5499 -> 5496;
5499 -> 5498;
5500 -> 5497;
5500 -> 5498;
5501 -> 5487;
5501 -> 5498;
5502 -> 5498;
5503 -> 5499;
5503 -> 5502;
5503 -> 5498;
5504 -> 5498;
5505 -> 5500;
5505 -> 5504;
5505 -> 5498;
5506 -> 5500;
5506 -> 5480;
5506 -> 5498;
5507 -> 5499;
5507 -> 5480;
5507 -> 5506;
5507 -> 5498;
5508 -> 5498;
5509 -> 5507;
5509 -> 5508;
5509 -> 5498;
5510 -> 5507;
5510 -> 5509;
5511 -> 5482;
5512 -> 5511;
5512 -> 5460;
5513 -> 5462;
5513 -> 5512;
5514 -> 5512;
5515 -> 5513;
5515 -> 5514;
5516 -> 5515;
5516 -> 5514;
5517 -> 5514;
5518 -> 5486;
5518 -> 5514;
5519 -> 5516;
5519 -> 5517;
5519 -> 5518;
5519 -> 5480;
5519 -> 5514;
5520 -> 5460;
5521 -> 5520;
5521 -> 5460;
5522 -> 5460;
5523 -> 5460;
5524 -> 5520;
5524 -> 5523;
5524 -> 5521;
5524 -> 5460;
5525 -> 5460;
5526 -> 5461;
5526 -> 5460;
5527 -> 5526;
5527 -> 5519;
5527 -> 5460;
5528 -> 5527;
5529 -> 5472;
5529 -> 5527;
5530 -> 5527;
5531 -> 5528;
5531 -> 5530;
5532 -> 5529;
5532 -> 5530;
5533 -> 5530;
5534 -> 5533;
5534 -> 5532;
5534 -> 5530;
5535 -> 5530;
5536 -> 5531;
5536 -> 5535;
5537 -> 5535;
5538 -> 5535;
5539 -> 5537;
5539 -> 5538;
5539 -> 5535;
5540 -> 5535;
5541 -> 5536;
5541 -> 5519;
5541 -> 5540;
5541 -> 5535;
5542 -> 5536;
5542 -> 5519;
5542 -> 5541;
5543 -> 5537;
5543 -> 5542;
5543 -> 5539;
5543 -> 5541;
5544 -> 5541;
5545 -> 5537;
5545 -> 5544;
5545 -> 5543;
5545 -> 5541;
5546 -> 5536;
5546 -> 5519;
5546 -> 5541;
5547 -> 5537;
5547 -> 5546;
5547 -> 5545;
5547 -> 5541;
5548 -> 5535;
5549 -> 5536;
5549 -> 5519;
5549 -> 5548;
5549 -> 5535;
5550 -> 5549;
5551 -> 5550;
5552 -> 5537;
5552 -> 5551;
5552 -> 5547;
5552 -> 5550;
5553 -> 5536;
5553 -> 5519;
5553 -> 5550;
5554 -> 5537;
5554 -> 5553;
5554 -> 5552;
5554 -> 5550;
5555 -> 5549;
5556 -> 5537;
5556 -> 5555;
5556 -> 5554;
5556 -> 5549;
5557 -> 5536;
5557 -> 5519;
5557 -> 5535;
5558 -> 5535;
5559 -> 5537;
5559 -> 5558;
5559 -> 5556;
5559 -> 5535;
5560 -> 5535;
5561 -> 5536;
5561 -> 5519;
5561 -> 5560;
5561 -> 5535;
5562 -> 5561;
5563 -> 5537;
5563 -> 5562;
5563 -> 5559;
5563 -> 5561;
5564 -> 5561;
5565 -> 5564;
5565 -> 5561;
5566 -> 5561;
5567 -> 5565;
5567 -> 5561;
5568 -> 5567;
5569 -> 5537;
5569 -> 5568;
5569 -> 5563;
5569 -> 5567;
5570 -> 5565;
5570 -> 5567;
5571 -> 5537;
5571 -> 5570;
5571 -> 5569;
5571 -> 5567;
5572 -> 5567;
5573 -> 5537;
5573 -> 5572;
5573 -> 5571;
5573 -> 5567;
5574 -> 5567;
5575 -> 5574;
5576 -> 5537;
5576 -> 5575;
5576 -> 5573;
5576 -> 5574;
5577 -> 5561;
5578 -> 5537;
5578 -> 5577;
5578 -> 5576;
5578 -> 5561;
5579 -> 5535;
5580 -> 5536;
5580 -> 5567;
5580 -> 5579;
5580 -> 5535;
5581 -> 5580;
5582 -> 5537;
5582 -> 5581;
5582 -> 5578;
5582 -> 5580;
5583 -> 5580;
5584 -> 5537;
5584 -> 5583;
5584 -> 5582;
5584 -> 5580;
5585 -> 5580;
5586 -> 5537;
5586 -> 5585;
5586 -> 5584;
5586 -> 5580;
5587 -> 5580;
5588 -> 5537;
5588 -> 5587;
5588 -> 5586;
5588 -> 5580;
5589 -> 5580;
5590 -> 5537;
5590 -> 5589;
5590 -> 5588;
5590 -> 5580;
5591 -> 5536;
5591 -> 5567;
5591 -> 5535;
5592 -> 5535;
5593 -> 5536;
5593 -> 5567;
5593 -> 5592;
5593 -> 5535;
5594 -> 5535;
5595 -> 5536;
5595 -> 5567;
5595 -> 5594;
5595 -> 5535;
5596 -> 5535;
5597 -> 5536;
5597 -> 5567;
5597 -> 5596;
5597 -> 5535;
5598 -> 5537;
5598 -> 5590;
5598 -> 5535;
5599 -> 5598;
5599 -> 5530;
5600 -> 5534;
5600 -> 5599;
5600 -> 5530;
5601 -> 5525;
5601 -> 5600;
5601 -> 5527;
5602 -> 5472;
5602 -> 5567;
5603 -> 5602;
5603 -> 5567;
5604 -> 5567;
5605 -> 5604;
5605 -> 5603;
5605 -> 5567;
5606 -> 5567;
5607 -> 5567;
5608 -> 5606;
5608 -> 5607;
5608 -> 5567;
5609 -> 5567;
5610 -> 5567;
5610 -> 5609;
5611 -> 5606;
5611 -> 5610;
5611 -> 5608;
5611 -> 5609;
5612 -> 5609;
5613 -> 5606;
5613 -> 5612;
5613 -> 5611;
5613 -> 5609;
5614 -> 5567;
5614 -> 5609;
5615 -> 5606;
5615 -> 5614;
5615 -> 5613;
5615 -> 5609;
5616 -> 5567;
5617 -> 5616;
5618 -> 5617;
5619 -> 5606;
5619 -> 5618;
5619 -> 5615;
5619 -> 5617;
5620 -> 5567;
5620 -> 5617;
5621 -> 5606;
5621 -> 5620;
5621 -> 5619;
5621 -> 5617;
5622 -> 5616;
5623 -> 5606;
5623 -> 5622;
5623 -> 5621;
5623 -> 5616;
5624 -> 5567;
5625 -> 5567;
5626 -> 5606;
5626 -> 5625;
5626 -> 5623;
5626 -> 5567;
5627 -> 5567;
5628 -> 5606;
5628 -> 5627;
5628 -> 5626;
5628 -> 5567;
5629 -> 5606;
5629 -> 5568;
5629 -> 5628;
5629 -> 5567;
5630 -> 5567;
5631 -> 5606;
5631 -> 5630;
5631 -> 5629;
5631 -> 5567;
5632 -> 5606;
5632 -> 5572;
5632 -> 5631;
5632 -> 5567;
5633 -> 5606;
5633 -> 5575;
5633 -> 5632;
5633 -> 5574;
5634 -> 5567;
5635 -> 5606;
5635 -> 5634;
5635 -> 5633;
5635 -> 5567;
5636 -> 5567;
5637 -> 5636;
5638 -> 5606;
5638 -> 5637;
5638 -> 5635;
5638 -> 5636;
5639 -> 5636;
5640 -> 5606;
5640 -> 5639;
5640 -> 5638;
5640 -> 5636;
5641 -> 5636;
5642 -> 5606;
5642 -> 5641;
5642 -> 5640;
5642 -> 5636;
5643 -> 5636;
5644 -> 5606;
5644 -> 5643;
5644 -> 5642;
5644 -> 5636;
5645 -> 5636;
5646 -> 5606;
5646 -> 5645;
5646 -> 5644;
5646 -> 5636;
5647 -> 5567;
5648 -> 5567;
5649 -> 5567;
5650 -> 5567;
5651 -> 5606;
5651 -> 5646;
5651 -> 5567;
5652 -> 5651;
5652 -> 5567;
5653 -> 5605;
5653 -> 5652;
5653 -> 5567;
5654 -> 5520;
5654 -> 5460;
5655 -> 5525;
5655 -> 5460;
5656 -> 5460;
5657 -> 5654;
5657 -> 5656;
5658 -> 5655;
5658 -> 5656;
5659 -> 5658;
5659 -> 5601;
5659 -> 5656;
5660 -> 5656;
5661 -> 5660;
5661 -> 5659;
5661 -> 5656;
5662 -> 5658;
5662 -> 5660;
5662 -> 5601;
5662 -> 5661;
5663 -> 5657;
5663 -> 5662;
5663 -> 5524;
5663 -> 5661;
5664 -> 5661;
5665 -> 5664;
5666 -> 5657;
5666 -> 5665;
5666 -> 5663;
5666 -> 5664;
5667 -> 5657;
5667 -> 5666;
5667 -> 5661;
5668 -> 5460;
5669 -> 5460;
5670 -> 5520;
5670 -> 5669;
5670 -> 5667;
5670 -> 5460;
5671 -> 5460;
5672 -> 5519;
5672 -> 5567;
5672 -> 5460;
5673 -> 5460;
5674 -> 5672;
5674 -> 5460;
5675 -> 5674;
5675 -> 5673;
5676 -> 5674;
5676 -> 5673;
5677 -> 5674;
5677 -> 5673;
5678 -> 5673;
5679 -> 5675;
5679 -> 5678;
5679 -> 5673;
5680 -> 5673;
5681 -> 5676;
5681 -> 5680;
5681 -> 5673;
5682 -> 5676;
5682 -> 5674;
5682 -> 5673;
5683 -> 5675;
5683 -> 5674;
5683 -> 5682;
5683 -> 5673;
5684 -> 5673;
5685 -> 5683;
5685 -> 5684;
5685 -> 5673;
5686 -> 5676;
5686 -> 5674;
5686 -> 5673;
5687 -> 5675;
5687 -> 5674;
5687 -> 5686;
5687 -> 5673;
5688 -> 5676;
5688 -> 5687;
5688 -> 5673;
5689 -> 5688;
5689 -> 5684;
5689 -> 5673;
5690 -> 5688;
5690 -> 5689;
5691 -> 5672;
5691 -> 5690;
5692 -> 5691;
5692 -> 5690;
5693 -> 5692;
5693 -> 5690;
5694 -> 5690;
5695 -> 5690;
5696 -> 5470;
5696 -> 5690;
5697 -> 5520;
5697 -> 5696;
5698 -> 5472;
5698 -> 5696;
5699 -> 5696;
5700 -> 5697;
5700 -> 5699;
5701 -> 5698;
5701 -> 5699;
5702 -> 5699;
5703 -> 5702;
5703 -> 5701;
5703 -> 5699;
5704 -> 5700;
5704 -> 5702;
5704 -> 5703;
5704 -> 5670;
5704 -> 5699;
5705 -> 5696;
5706 -> 5696;
5707 -> 5520;
5707 -> 5706;
5707 -> 5704;
5707 -> 5696;
5708 -> 5691;
5708 -> 5692;
5708 -> 5696;
5709 -> 5520;
5709 -> 5708;
5709 -> 5707;
5709 -> 5696;
5710 -> 5691;
5710 -> 5708;
5710 -> 5696;
5711 -> 5710;
5711 -> 5708;
5711 -> 5696;
5712 -> 5520;
5712 -> 5711;
5713 -> 5472;
5713 -> 5711;
5714 -> 5711;
5715 -> 5712;
5715 -> 5714;
5716 -> 5713;
5716 -> 5714;
5717 -> 5714;
5718 -> 5717;
5718 -> 5716;
5718 -> 5714;
5719 -> 5715;
5719 -> 5717;
5719 -> 5718;
5719 -> 5709;
5719 -> 5714;
5720 -> 5711;
5721 -> 5711;
5722 -> 5520;
5722 -> 5721;
5722 -> 5719;
5722 -> 5711;
5723 -> 5711;
5724 -> 5520;
5724 -> 5723;
5724 -> 5722;
5724 -> 5711;
5725 -> 5691;
5725 -> 5690;
5726 -> 5690;
5727 -> 5474;
5727 -> 5690;
5728 -> 5478;
5728 -> 5690;
5729 -> 5690;
5730 -> 5725;
5730 -> 5729;
5731 -> 5726;
5731 -> 5729;
5732 -> 5727;
5732 -> 5729;
5733 -> 5728;
5733 -> 5729;
5734 -> 5726;
5734 -> 5729;
5735 -> 5734;
5735 -> 5729;
5736 -> 5734;
5736 -> 5729;
5737 -> 5734;
5737 -> 5729;
5738 -> 5734;
5738 -> 5729;
5739 -> 5734;
5739 -> 5729;
5740 -> 5734;
5740 -> 5729;
5741 -> 5734;
5741 -> 5729;
5742 -> 5734;
5742 -> 5729;
5743 -> 5734;
5743 -> 5729;
5744 -> 5730;
5744 -> 5723;
5744 -> 5734;
5744 -> 5729;
5745 -> 5730;
5745 -> 5723;
5745 -> 5734;
5745 -> 5729;
5746 -> 5730;
5746 -> 5723;
5746 -> 5734;
5746 -> 5729;
5747 -> 5730;
5747 -> 5723;
5747 -> 5734;
5747 -> 5729;
5748 -> 5729;
5749 -> 5730;
5749 -> 5723;
5749 -> 5729;
5750 -> 5734;
5751 -> 5734;
5751 -> 5749;
5751 -> 5750;
5752 -> 5734;
5752 -> 5749;
5752 -> 5747;
5752 -> 5750;
5753 -> 5726;
5753 -> 5690;
5754 -> 5461;
5754 -> 5690;
5755 -> 5726;
5755 -> 5690;
5756 -> 5754;
5756 -> 5755;
5756 -> 5747;
5756 -> 5749;
5756 -> 5745;
5756 -> 5746;
5756 -> 5734;
5756 -> 5731;
5756 -> 5732;
5756 -> 5733;
5756 -> 5690;
5757 -> 5690;
5758 -> 5757;
5759 -> 5756;
5759 -> 5758;
5759 -> 5757;
5760 -> 5756;
5760 -> 5757;
5761 -> 5756;
5761 -> 5757;
5762 -> 5756;
5762 -> 5757;
5763 -> 5756;
5763 -> 5762;
5764 -> 5757;
5765 -> 5756;
5765 -> 5764;
5765 -> 5757;
5766 -> 5765;
5767 -> 5756;
5767 -> 5766;
5768 -> 5757;
5769 -> 5756;
5769 -> 5768;
5769 -> 5757;
5770 -> 5757;
5771 -> 5756;
5771 -> 5770;
5771 -> 5757;
5772 -> 5756;
5772 -> 5757;
5773 -> 5756;
5774 -> 5756;
5774 -> 5757;
5775 -> 5690;
5776 -> 5756;
5776 -> 5775;
5776 -> 5690;
5777 -> 5461;
5777 -> 5756;
5777 -> 5776;
5778 -> 5726;
5778 -> 5690;
5779 -> 5472;
5779 -> 5690;
5780 -> 5690;
5781 -> 5778;
5781 -> 5780;
5782 -> 5779;
5782 -> 5780;
5783 -> 5780;
5784 -> 5783;
5784 -> 5782;
5784 -> 5780;
5785 -> 5780;
5786 -> 5780;
5787 -> 5785;
5787 -> 5786;
5787 -> 5780;
5788 -> 5780;
5789 -> 5781;
5789 -> 5756;
5789 -> 5788;
5789 -> 5780;
5790 -> 5781;
5790 -> 5756;
5790 -> 5789;
5791 -> 5785;
5791 -> 5790;
5791 -> 5787;
5791 -> 5789;
5792 -> 5789;
5793 -> 5785;
5793 -> 5792;
5793 -> 5791;
5793 -> 5789;
5794 -> 5781;
5794 -> 5756;
5794 -> 5789;
5795 -> 5785;
5795 -> 5794;
5795 -> 5793;
5795 -> 5789;
5796 -> 5780;
5797 -> 5781;
5797 -> 5756;
5797 -> 5796;
5797 -> 5780;
5798 -> 5797;
5799 -> 5798;
5800 -> 5785;
5800 -> 5799;
5800 -> 5795;
5800 -> 5798;
5801 -> 5781;
5801 -> 5756;
5801 -> 5798;
5802 -> 5785;
5802 -> 5801;
5802 -> 5800;
5802 -> 5798;
5803 -> 5797;
5804 -> 5785;
5804 -> 5803;
5804 -> 5802;
5804 -> 5797;
5805 -> 5781;
5805 -> 5756;
5805 -> 5780;
5806 -> 5780;
5807 -> 5785;
5807 -> 5806;
5807 -> 5804;
5807 -> 5780;
5808 -> 5781;
5808 -> 5756;
5808 -> 5780;
5809 -> 5808;
5810 -> 5785;
5810 -> 5809;
5810 -> 5807;
5810 -> 5808;
5811 -> 5808;
5812 -> 5785;
5812 -> 5811;
5812 -> 5810;
5812 -> 5808;
5813 -> 5808;
5814 -> 5785;
5814 -> 5813;
5814 -> 5812;
5814 -> 5808;
5815 -> 5808;
5816 -> 5785;
5816 -> 5815;
5816 -> 5814;
5816 -> 5808;
5817 -> 5808;
5818 -> 5817;
5819 -> 5785;
5819 -> 5818;
5819 -> 5816;
5819 -> 5817;
5820 -> 5808;
5821 -> 5785;
5821 -> 5820;
5821 -> 5819;
5821 -> 5808;
5822 -> 5780;
5823 -> 5781;
5823 -> 5808;
5823 -> 5822;
5823 -> 5780;
5824 -> 5823;
5825 -> 5785;
5825 -> 5824;
5825 -> 5821;
5825 -> 5823;
5826 -> 5823;
5827 -> 5785;
5827 -> 5826;
5827 -> 5825;
5827 -> 5823;
5828 -> 5823;
5829 -> 5785;
5829 -> 5828;
5829 -> 5827;
5829 -> 5823;
5830 -> 5823;
5831 -> 5785;
5831 -> 5830;
5831 -> 5829;
5831 -> 5823;
5832 -> 5823;
5833 -> 5785;
5833 -> 5832;
5833 -> 5831;
5833 -> 5823;
5834 -> 5781;
5834 -> 5808;
5834 -> 5780;
5835 -> 5780;
5836 -> 5781;
5836 -> 5808;
5836 -> 5835;
5836 -> 5780;
5837 -> 5780;
5838 -> 5781;
5838 -> 5808;
5838 -> 5837;
5838 -> 5780;
5839 -> 5780;
5840 -> 5781;
5840 -> 5808;
5840 -> 5839;
5840 -> 5780;
5841 -> 5785;
5841 -> 5833;
5841 -> 5780;
5842 -> 5841;
5842 -> 5780;
5843 -> 5784;
5843 -> 5842;
5843 -> 5780;
5844 -> 5520;
5844 -> 5843;
5844 -> 5724;
5844 -> 5690;
5845 -> 5777;
5845 -> 5690;
5846 -> 5472;
5846 -> 5690;
5847 -> 5690;
5848 -> 5845;
5848 -> 5847;
5849 -> 5846;
5849 -> 5847;
5850 -> 5847;
5851 -> 5850;
5851 -> 5849;
5851 -> 5847;
5852 -> 5847;
5853 -> 5847;
5854 -> 5852;
5854 -> 5853;
5854 -> 5847;
5855 -> 5847;
5856 -> 5848;
5856 -> 5808;
5856 -> 5855;
5856 -> 5847;
5857 -> 5848;
5857 -> 5808;
5857 -> 5856;
5858 -> 5852;
5858 -> 5857;
5858 -> 5854;
5858 -> 5856;
5859 -> 5856;
5860 -> 5852;
5860 -> 5859;
5860 -> 5858;
5860 -> 5856;
5861 -> 5848;
5861 -> 5808;
5861 -> 5856;
5862 -> 5852;
5862 -> 5861;
5862 -> 5860;
5862 -> 5856;
5863 -> 5847;
5864 -> 5848;
5864 -> 5808;
5864 -> 5863;
5864 -> 5847;
5865 -> 5864;
5866 -> 5865;
5867 -> 5852;
5867 -> 5866;
5867 -> 5862;
5867 -> 5865;
5868 -> 5848;
5868 -> 5808;
5868 -> 5865;
5869 -> 5852;
5869 -> 5868;
5869 -> 5867;
5869 -> 5865;
5870 -> 5864;
5871 -> 5852;
5871 -> 5870;
5871 -> 5869;
5871 -> 5864;
5872 -> 5848;
5872 -> 5808;
5872 -> 5847;
5873 -> 5847;
5874 -> 5852;
5874 -> 5873;
5874 -> 5871;
5874 -> 5847;
5875 -> 5848;
5875 -> 5808;
5875 -> 5847;
5876 -> 5875;
5877 -> 5852;
5877 -> 5876;
5877 -> 5874;
5877 -> 5875;
5878 -> 5875;
5879 -> 5852;
5879 -> 5878;
5879 -> 5877;
5879 -> 5875;
5880 -> 5875;
5881 -> 5852;
5881 -> 5880;
5881 -> 5879;
5881 -> 5875;
5882 -> 5875;
5883 -> 5852;
5883 -> 5882;
5883 -> 5881;
5883 -> 5875;
5884 -> 5875;
5885 -> 5884;
5886 -> 5852;
5886 -> 5885;
5886 -> 5883;
5886 -> 5884;
5887 -> 5875;
5888 -> 5852;
5888 -> 5887;
5888 -> 5886;
5888 -> 5875;
5889 -> 5847;
5890 -> 5848;
5890 -> 5875;
5890 -> 5889;
5890 -> 5847;
5891 -> 5890;
5892 -> 5852;
5892 -> 5891;
5892 -> 5888;
5892 -> 5890;
5893 -> 5890;
5894 -> 5852;
5894 -> 5893;
5894 -> 5892;
5894 -> 5890;
5895 -> 5890;
5896 -> 5852;
5896 -> 5895;
5896 -> 5894;
5896 -> 5890;
5897 -> 5890;
5898 -> 5852;
5898 -> 5897;
5898 -> 5896;
5898 -> 5890;
5899 -> 5890;
5900 -> 5852;
5900 -> 5899;
5900 -> 5898;
5900 -> 5890;
5901 -> 5848;
5901 -> 5875;
5901 -> 5847;
5902 -> 5847;
5903 -> 5848;
5903 -> 5875;
5903 -> 5902;
5903 -> 5847;
5904 -> 5847;
5905 -> 5848;
5905 -> 5875;
5905 -> 5904;
5905 -> 5847;
5906 -> 5847;
5907 -> 5848;
5907 -> 5875;
5907 -> 5906;
5907 -> 5847;
5908 -> 5852;
5908 -> 5900;
5908 -> 5847;
5909 -> 5908;
5909 -> 5847;
5910 -> 5851;
5910 -> 5909;
5910 -> 5847;
5911 -> 5671;
5911 -> 5910;
5911 -> 5690;
5912 -> 5875;
5913 -> 5875;
5914 -> 5913;
5915 -> 5520;
5915 -> 5914;
5915 -> 5844;
5915 -> 5913;
5916 -> 5520;
5916 -> 5875;
5917 -> 5472;
5917 -> 5875;
5918 -> 5875;
5919 -> 5916;
5919 -> 5918;
5920 -> 5917;
5920 -> 5918;
5921 -> 5918;
5922 -> 5921;
5922 -> 5920;
5922 -> 5918;
5923 -> 5875;
5924 -> 5875;
5925 -> 5520;
5925 -> 5875;
5926 -> 5472;
5926 -> 5875;
5927 -> 5875;
5928 -> 5925;
5928 -> 5927;
5929 -> 5926;
5929 -> 5927;
5930 -> 5927;
5931 -> 5930;
5931 -> 5929;
5931 -> 5927;
5932 -> 5875;
5933 -> 5875;
5934 -> 5875;
5935 -> 5875;
5936 -> 5875;
5937 -> 5875;
5938 -> 5875;
5939 -> 5875;
5940 -> 5875;
5941 -> 5875;
5942 -> 5875;
5943 -> 5875;
5944 -> 5875;
5945 -> 5875;
5946 -> 5875;
5947 -> 5875;
5948 -> 5875;
5949 -> 5875;
5950 -> 5875;
5951 -> 5875;
5951 -> 5950;
5952 -> 5951;
5953 -> 5875;
5953 -> 5952;
5954 -> 5875;
5954 -> 5952;
5955 -> 5875;
5956 -> 5875;
5956 -> 5952;
5956 -> 5955;
5957 -> 5956;
5958 -> 5875;
5958 -> 5952;
5958 -> 5957;
5959 -> 5875;
5960 -> 5875;
5960 -> 5952;
5960 -> 5959;
5961 -> 5875;
5962 -> 5875;
5962 -> 5952;
5962 -> 5961;
5963 -> 5875;
5963 -> 5952;
5964 -> 5952;
5965 -> 5875;
5965 -> 5952;
5966 -> 5472;
5966 -> 5875;
5967 -> 5966;
5967 -> 5875;
5968 -> 5875;
5969 -> 5968;
5969 -> 5967;
5969 -> 5875;
5970 -> 5875;
5971 -> 5875;
5972 -> 5970;
5972 -> 5971;
5972 -> 5875;
5973 -> 5875;
5974 -> 5875;
5974 -> 5952;
5974 -> 5973;
5975 -> 5875;
5975 -> 5952;
5975 -> 5974;
5976 -> 5970;
5976 -> 5975;
5976 -> 5972;
5976 -> 5974;
5977 -> 5974;
5978 -> 5970;
5978 -> 5977;
5978 -> 5976;
5978 -> 5974;
5979 -> 5875;
5979 -> 5952;
5979 -> 5974;
5980 -> 5970;
5980 -> 5979;
5980 -> 5978;
5980 -> 5974;
5981 -> 5875;
5982 -> 5875;
5982 -> 5952;
5982 -> 5981;
5983 -> 5982;
5984 -> 5983;
5985 -> 5970;
5985 -> 5984;
5985 -> 5980;
5985 -> 5983;
5986 -> 5875;
5986 -> 5952;
5986 -> 5983;
5987 -> 5970;
5987 -> 5986;
5987 -> 5985;
5987 -> 5983;
5988 -> 5982;
5989 -> 5970;
5989 -> 5988;
5989 -> 5987;
5989 -> 5982;
5990 -> 5875;
5990 -> 5952;
5991 -> 5875;
5992 -> 5970;
5992 -> 5991;
5992 -> 5989;
5992 -> 5875;
5993 -> 5952;
5994 -> 5970;
5994 -> 5993;
5994 -> 5992;
5994 -> 5952;
5995 -> 5952;
5996 -> 5970;
5996 -> 5995;
5996 -> 5994;
5996 -> 5952;
5997 -> 5952;
5998 -> 5970;
5998 -> 5997;
5998 -> 5996;
5998 -> 5952;
5999 -> 5952;
6000 -> 5970;
6000 -> 5999;
6000 -> 5998;
6000 -> 5952;
6001 -> 5952;
6002 -> 6001;
6003 -> 5970;
6003 -> 6002;
6003 -> 6000;
6003 -> 6001;
6004 -> 5952;
6005 -> 5970;
6005 -> 6004;
6005 -> 6003;
6005 -> 5952;
6006 -> 5875;
6007 -> 5875;
6007 -> 5952;
6007 -> 6006;
6008 -> 6007;
6009 -> 5970;
6009 -> 6008;
6009 -> 6005;
6009 -> 6007;
6010 -> 6007;
6011 -> 5970;
6011 -> 6010;
6011 -> 6009;
6011 -> 6007;
6012 -> 6007;
6013 -> 5970;
6013 -> 6012;
6013 -> 6011;
6013 -> 6007;
6014 -> 6007;
6015 -> 5970;
6015 -> 6014;
6015 -> 6013;
6015 -> 6007;
6016 -> 6007;
6017 -> 5970;
6017 -> 6016;
6017 -> 6015;
6017 -> 6007;
6018 -> 5875;
6018 -> 5952;
6019 -> 5875;
6020 -> 5875;
6020 -> 5952;
6020 -> 6019;
6021 -> 5875;
6022 -> 5875;
6022 -> 5952;
6022 -> 6021;
6023 -> 5875;
6024 -> 5875;
6024 -> 5952;
6024 -> 6023;
6025 -> 5970;
6025 -> 6017;
6025 -> 5875;
6026 -> 6025;
6026 -> 5875;
6027 -> 5969;
6027 -> 6026;
6027 -> 5875;
6028 -> 5520;
6028 -> 6027;
6028 -> 5915;
6028 -> 5875;
6029 -> 5472;
6029 -> 5875;
6030 -> 6029;
6030 -> 5875;
6031 -> 5968;
6031 -> 6030;
6031 -> 5875;
6032 -> 5952;
6032 -> 5974;
6033 -> 5970;
6033 -> 6032;
6033 -> 5972;
6033 -> 5974;
6034 -> 5970;
6034 -> 5977;
6034 -> 6033;
6034 -> 5974;
6035 -> 5952;
6035 -> 5974;
6036 -> 5970;
6036 -> 6035;
6036 -> 6034;
6036 -> 5974;
6037 -> 5970;
6037 -> 5984;
6037 -> 6036;
6037 -> 5983;
6038 -> 5952;
6038 -> 5983;
6039 -> 5970;
6039 -> 6038;
6039 -> 6037;
6039 -> 5983;
6040 -> 5970;
6040 -> 5988;
6040 -> 6039;
6040 -> 5982;
6041 -> 5970;
6041 -> 5991;
6041 -> 6040;
6041 -> 5875;
6042 -> 5970;
6042 -> 5993;
6042 -> 6041;
6042 -> 5952;
6043 -> 5970;
6043 -> 5995;
6043 -> 6042;
6043 -> 5952;
6044 -> 5970;
6044 -> 5997;
6044 -> 6043;
6044 -> 5952;
6045 -> 5970;
6045 -> 5999;
6045 -> 6044;
6045 -> 5952;
6046 -> 5970;
6046 -> 6002;
6046 -> 6045;
6046 -> 6001;
6047 -> 5970;
6047 -> 6004;
6047 -> 6046;
6047 -> 5952;
6048 -> 5970;
6048 -> 6008;
6048 -> 6047;
6048 -> 6007;
6049 -> 5970;
6049 -> 6010;
6049 -> 6048;
6049 -> 6007;
6050 -> 5970;
6050 -> 6012;
6050 -> 6049;
6050 -> 6007;
6051 -> 5970;
6051 -> 6014;
6051 -> 6050;
6051 -> 6007;
6052 -> 5970;
6052 -> 6016;
6052 -> 6051;
6052 -> 6007;
6053 -> 5970;
6053 -> 6052;
6053 -> 5875;
6054 -> 6053;
6054 -> 5875;
6055 -> 6031;
6055 -> 6054;
6055 -> 5875;
6056 -> 5671;
6056 -> 6055;
6056 -> 5911;
6056 -> 5875;
6057 -> 5460;
6058 -> 5875;
6058 -> 6057;
6058 -> 5460;
6059 -> 5520;
6059 -> 6028;
6059 -> 6058;
6060 -> 5460;
6061 -> 5520;
6061 -> 6060;
6061 -> 6059;
6061 -> 5460;
6062 -> 5525;
6062 -> 5460;
6063 -> 5671;
6063 -> 5460;
6067 -> 6065;
6067 -> 6064;
6068 -> 6066;
6068 -> 6064;
6069 -> 6064;
6070 -> 0;
6070 -> 5460;
6071 -> 5460;
6072 -> 5460;
6073 -> 6062;
6073 -> 6072;
6074 -> 6063;
6074 -> 6072;
6075 -> 6070;
6075 -> 6072;
6076 -> 6071;
6076 -> 6072;
6077 -> 6071;
6077 -> 6072;
6078 -> 6072;
6079 -> 6076;
6079 -> 6078;
6079 -> 6072;
6080 -> 6079;
6080 -> 6072;
6081 -> 0;
6083 -> 6081;
6083 -> 6082;
6084 -> 6082;
6086 -> 6085;
6088 -> 6087;
6090 -> 6089;
6091 -> 6084;
6092 -> 6084;
6092 -> 6082;
6093 -> 6083;
6093 -> 6084;
6093 -> 6082;
6094 -> 6082;
6095 -> 6072;
6096 -> 6095;
6096 -> 6077;
6096 -> 6072;
6097 -> 6073;
6097 -> 6072;
6098 -> 6074;
6098 -> 6072;
6099 -> 6075;
6099 -> 6072;
6100 -> 6097;
6100 -> 6072;
6101 -> 6098;
6101 -> 6072;
6102 -> 6096;
6102 -> 6072;
6103 -> 6072;
6104 -> 6100;
6104 -> 6103;
6105 -> 6101;
6105 -> 6103;
6106 -> 6102;
6106 -> 6103;
6107 -> 6080;
6107 -> 6103;
6108 -> 6104;
6108 -> 6103;
6109 -> 6104;
6109 -> 6097;
6109 -> 6103;
6110 -> 6105;
6110 -> 6103;
6111 -> 6105;
6111 -> 6098;
6111 -> 6103;
6112 -> 6103;
6113 -> 6108;
6113 -> 6112;
6114 -> 6109;
6114 -> 6112;
6115 -> 6110;
6115 -> 6112;
6116 -> 6111;
6116 -> 6112;
6117 -> 6107;
6117 -> 6112;
6118 -> 6113;
6118 -> 6112;
6119 -> 6114;
6119 -> 6112;
6120 -> 6115;
6120 -> 6112;
6121 -> 6116;
6121 -> 6112;
6122 -> 6112;
6123 -> 6118;
6123 -> 6122;
6124 -> 6119;
6124 -> 6122;
6125 -> 6120;
6125 -> 6122;
6126 -> 6121;
6126 -> 6122;
6127 -> 6117;
6127 -> 6122;
6128 -> 6122;
6129 -> 6124;
6129 -> 6128;
6129 -> 6122;
6130 -> 6122;
6131 -> 6126;
6131 -> 6130;
6131 -> 6122;
6132 -> 6129;
6132 -> 6131;
6132 -> 6122;
6133 -> 6122;
6134 -> 6133;
6134 -> 6132;
6134 -> 6122;
6135 -> 6122;
6136 -> 6135;
6136 -> 6124;
6136 -> 6122;
6137 -> 6136;
6138 -> 6132;
6138 -> 6134;
6138 -> 6137;
6138 -> 6136;
6139 -> 6138;
6139 -> 6135;
6139 -> 6137;
6139 -> 6132;
6139 -> 6136;
6140 -> 6122;
6141 -> 6140;
6141 -> 6126;
6141 -> 6122;
6142 -> 6141;
6143 -> 6132;
6143 -> 6134;
6143 -> 6139;
6143 -> 6142;
6143 -> 6141;
6144 -> 6143;
6144 -> 6142;
6144 -> 6140;
6144 -> 6132;
6144 -> 6141;
6145 -> 6122;
6146 -> 6145;
6146 -> 6124;
6146 -> 6122;
6147 -> 6146;
6148 -> 6147;
6148 -> 6126;
6148 -> 6146;
6149 -> 6148;
6150 -> 6132;
6150 -> 6134;
6150 -> 6139;
6150 -> 6144;
6150 -> 6149;
6150 -> 6148;
6151 -> 6123;
6151 -> 6148;
6152 -> 6125;
6152 -> 6148;
6153 -> 6148;
6154 -> 6151;
6154 -> 6153;
6155 -> 6149;
6155 -> 6153;
6156 -> 6152;
6156 -> 6153;
6157 -> 6149;
6157 -> 6153;
6158 -> 6127;
6158 -> 6153;
6159 -> 6154;
6159 -> 6097;
6159 -> 6155;
6159 -> 6153;
6160 -> 6156;
6160 -> 6098;
6160 -> 6157;
6160 -> 6153;
6161 -> 6158;
6161 -> 0;
6161 -> 6159;
6161 -> 6160;
6161 -> 6097;
6161 -> 6098;
6161 -> 6153;
6162 -> 6150;
6162 -> 6161;
6162 -> 6148;
6163 -> 6148;
6164 -> 6132;
6164 -> 6134;
6164 -> 6139;
6164 -> 6144;
6164 -> 6163;
6164 -> 6147;
6164 -> 6148;
6165 -> 6148;
6166 -> 6132;
6166 -> 6134;
6166 -> 6139;
6166 -> 6144;
6166 -> 6145;
6166 -> 6165;
6166 -> 6148;
6167 -> 6162;
6167 -> 6148;
6168 -> 6164;
6168 -> 6148;
6169 -> 6167;
6169 -> 6168;
6169 -> 6148;
6170 -> 6166;
6170 -> 6148;
6171 -> 6169;
6171 -> 6170;
6171 -> 6148;
6172 -> 6171;
6172 -> 6145;
6172 -> 6147;
6172 -> 6132;
6172 -> 6148;
6173 -> 6132;
6173 -> 6122;
6174 -> 6114;
6174 -> 6112;
6175 -> 6116;
6175 -> 6112;
6176 -> 6112;
6177 -> 6174;
6177 -> 6176;
6177 -> 6112;
6178 -> 6175;
6178 -> 6176;
6178 -> 6112;
6179 -> 6177;
6179 -> 6178;
6179 -> 6112;
6180 -> 6173;
6180 -> 6132;
6180 -> 6134;
6180 -> 6139;
6180 -> 6144;
6180 -> 6172;
6180 -> 6174;
6180 -> 6175;
6180 -> 6179;
6181 -> 6179;
6182 -> 6173;
6182 -> 6132;
6182 -> 6134;
6182 -> 6139;
6182 -> 6144;
6182 -> 6172;
6182 -> 6181;
6182 -> 6175;
6182 -> 6179;
6183 -> 6173;
6183 -> 6132;
6183 -> 6134;
6183 -> 6139;
6183 -> 6144;
6183 -> 6172;
6183 -> 6174;
6183 -> 6175;
6183 -> 6182;
6184 -> 6182;
6185 -> 6174;
6185 -> 6184;
6186 -> 6175;
6186 -> 6184;
6187 -> 6184;
6188 -> 0;
6188 -> 6184;
6189 -> 6185;
6189 -> 6184;
6190 -> 6186;
6190 -> 6184;
6191 -> 6184;
6192 -> 6188;
6192 -> 6191;
6193 -> 6189;
6193 -> 6191;
6194 -> 6190;
6194 -> 6191;
6195 -> 6187;
6195 -> 6191;
6196 -> 6192;
6196 -> 6195;
6196 -> 6191;
6197 -> 6193;
6197 -> 6195;
6197 -> 6191;
6198 -> 6194;
6198 -> 6195;
6198 -> 6191;
6199 -> 6185;
6199 -> 6186;
6199 -> 6112;
6200 -> 0;
6200 -> 6199;
6201 -> 6199;
6202 -> 6199;
6203 -> 6200;
6203 -> 6202;
6204 -> 6201;
6204 -> 6202;
6205 -> 6201;
6205 -> 6202;
6206 -> 6201;
6206 -> 6202;
6207 -> 6203;
6207 -> 6206;
6207 -> 6202;
6208 -> 6204;
6208 -> 6206;
6208 -> 6202;
6209 -> 6205;
6209 -> 6206;
6209 -> 6202;
6210 -> 6112;
6211 -> 6199;
6211 -> 6210;
6211 -> 6112;
6212 -> 6112;
6213 -> 6199;
6213 -> 6212;
6213 -> 6112;
6214 -> 6187;
6214 -> 6201;
6214 -> 6196;
6214 -> 6197;
6214 -> 6198;
6214 -> 6207;
6214 -> 6208;
6214 -> 6209;
6214 -> 6103;
6215 -> 6214;
6216 -> 6215;
6217 -> 6105;
6217 -> 6098;
6217 -> 6161;
6217 -> 6214;
6217 -> 6215;
6218 -> 6106;
6218 -> 6217;
6218 -> 6095;
6218 -> 6215;
6219 -> 6099;
6219 -> 6216;
6219 -> 6072;
6220 -> 5520;
6220 -> 6219;
6220 -> 6061;
6220 -> 5460;
6221 -> 5671;
6221 -> 6056;
6221 -> 5460;
6222 -> 5525;
6222 -> 5662;
6222 -> 5460;
6223 -> 5520;
6223 -> 6220;
6223 -> 5460;
6224 -> 5305;
6225 -> 919;
6226 -> 920;
6226 -> 919;
6227 -> 5172;
6227 -> 919;
6228 -> 919;
6229 -> 6226;
6229 -> 6228;
6230 -> 6227;
6230 -> 6228;
6231 -> 6230;
6231 -> 6228;
6232 -> 6231;
6232 -> 5172;
6232 -> 5952;
6233 -> 6229;
6233 -> 6232;
6233 -> 5952;
6233 -> 6231;
6234 -> 6231;
6234 -> 6233;
6235 -> 6234;
6235 -> 6233;
6236 -> 6234;
6237 -> 919;
6238 -> 920;
6238 -> 919;
}