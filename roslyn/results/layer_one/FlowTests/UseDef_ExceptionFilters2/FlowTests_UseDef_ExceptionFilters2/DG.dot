digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 762740"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 762741"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 762742"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 762743"];
5 [label="@'\n}' 762744"];
6 [label="suffix = @'\n}' 762745"];
7 [label="param FlowTests(this) 762746"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 762747"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 762748"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 762749"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 762750"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 762751"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 762752"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 762753"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 762754"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 762755"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 762756"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 762757"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 762758"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 762759"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 762760"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 762761"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 762762"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 762763"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 762764"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 762765"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 762766"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 762767"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 762768"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 762769"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 762770"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 762771"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 762772"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 762773"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 762774"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 762775"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 762776"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 762777"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 762778"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 762779"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 762780"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 762781"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 762782"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 762783"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 762784"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 762785"];
47 [label="LazyThreadSafetyMode.PublicationOnly 762786"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 762787"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 762788"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 762789"];
51 [label="LazyThreadSafetyMode.PublicationOnly 762790"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 762791"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 762792"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 762793"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 762794"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 762795"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 762796"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 762797"];
59 [label="LazyThreadSafetyMode.PublicationOnly 762798"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 762799"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 762800"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 762801"];
63 [label="LazyThreadSafetyMode.PublicationOnly 762802"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 762803"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 762804"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 762805"];
67 [label="LazyThreadSafetyMode.PublicationOnly 762806"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 762807"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 762808"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 762809"];
71 [label="LazyThreadSafetyMode.PublicationOnly 762810"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762811"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762812"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 762813"];
75 [label="LazyThreadSafetyMode.PublicationOnly 762814"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762815"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762816"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 762817"];
79 [label="LazyThreadSafetyMode.PublicationOnly 762818"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762819"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762820"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 762821"];
83 [label="LazyThreadSafetyMode.PublicationOnly 762822"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762823"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762824"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 762825"];
87 [label="LazyThreadSafetyMode.PublicationOnly 762826"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762827"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762828"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 762829"];
91 [label="LazyThreadSafetyMode.PublicationOnly 762830"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762831"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762832"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 762833"];
95 [label="LazyThreadSafetyMode.PublicationOnly 762834"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762835"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762836"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 762837"];
99 [label="LazyThreadSafetyMode.PublicationOnly 762838"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 762839"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 762840"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 762841"];
103 [label="LazyThreadSafetyMode.PublicationOnly 762842"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 762843"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 762844"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 762845"];
107 [label="LazyThreadSafetyMode.PublicationOnly 762846"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762847"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762848"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 762849"];
111 [label="LazyThreadSafetyMode.PublicationOnly 762850"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762851"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762852"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 762853"];
115 [label="LazyThreadSafetyMode.PublicationOnly 762854"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762855"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762856"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 762857"];
119 [label="LazyThreadSafetyMode.PublicationOnly 762858"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762859"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762860"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 762861"];
123 [label="LazyThreadSafetyMode.PublicationOnly 762862"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 762863"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 762864"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 762865"];
127 [label="LazyThreadSafetyMode.PublicationOnly 762866"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762867"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762868"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 762869"];
131 [label="LazyThreadSafetyMode.PublicationOnly 762870"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762871"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762872"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 762873"];
135 [label="LazyThreadSafetyMode.PublicationOnly 762874"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762875"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762876"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 762877"];
139 [label="LazyThreadSafetyMode.PublicationOnly 762878"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762879"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762880"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 762881"];
143 [label="LazyThreadSafetyMode.PublicationOnly 762882"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762883"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762884"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 762885"];
147 [label="LazyThreadSafetyMode.PublicationOnly 762886"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762887"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762888"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 762889"];
151 [label="LazyThreadSafetyMode.PublicationOnly 762890"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762891"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762892"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 762893"];
155 [label="LazyThreadSafetyMode.PublicationOnly 762894"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762895"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762896"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 762897"];
159 [label="LazyThreadSafetyMode.PublicationOnly 762898"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762899"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762900"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 762901"];
163 [label="LazyThreadSafetyMode.PublicationOnly 762902"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762903"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762904"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 762905"];
167 [label="LazyThreadSafetyMode.PublicationOnly 762906"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762907"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762908"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 762909"];
171 [label="LazyThreadSafetyMode.PublicationOnly 762910"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762911"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762912"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 762913"];
175 [label="LazyThreadSafetyMode.PublicationOnly 762914"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762915"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 762916"];
178 [label="@'R:\\Invalid.dll' 762917"];
179 [label="fullPath: @'R:\\Invalid.dll' 762918"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 762919"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 762920"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 762921"];
183 [label="MscorlibRef_v4_0_30316_17626 762922"];
184 [label="Net451.mscorlib 762923"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 762924"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 762925"];
187 [label="'/*<bind>*/' 762926"];
188 [label="StartString = '/*<bind>*/' 762927"];
189 [label="'/*</bind>*/' 762928"];
190 [label="EndString = '/*</bind>*/' 762929"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 762930"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 762931"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 762932"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 762933"];
195 [label="param CSharpTestBase(this) 762934"];
196 [label="param CommonTestBase(this) 762935"];
197 [label="param TestBase(this) 762936"];
198 [label="_temp 762937"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 762938"];
200 [label="param UseDef_ExceptionFilters2(this) 762939"];
201 [label="var source = @'\nclass C\n{\n    static void Main()\n    {\n        try\n        {\n        }\n        catch (System.Exception e) when (F())\n        {\n        }\n    }\n\n    static bool F() { return true; }\n}\n'; 762940"];
202 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 762941"];
203 [label="source 762942"];
204 [label="param operator(string source) 762943"];
205 [label="source 762944"];
206 [label="new CSharpTestSource(source) 762945"];
207 [label="param CSharpTestSource(object value) 762946"];
208 [label="param CSharpTestSource(this) 762947"];
209 [label="Value 762948"];
210 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 762949"];
211 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 762950"];
212 [label="CreateCompilation(source) 762951"];
213 [label="param CreateCompilation(CSharpTestSource source) 762952"];
214 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 762953"];
215 [label="param CreateCompilation(CSharpCompilationOptions options = null) 762954"];
216 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 762955"];
217 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 762956"];
218 [label="param CreateCompilation(string assemblyName = '') 762957"];
219 [label="param CreateCompilation(string sourceFileName = '') 762958"];
220 [label="param CreateCompilation(bool skipUsesIsNullable = false) 762959"];
221 [label="source 762960"];
222 [label="targetFramework 762961"];
223 [label="references 762962"];
224 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 762963"];
225 [label="param GetReferences(TargetFramework tf) 762964"];
226 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 762965"];
227 [label="var references = GetReferences(tf); 762966"];
228 [label="GetReferences(tf) 762967"];
229 [label="param GetReferences(TargetFramework targetFramework) 762968"];
230 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 762969"];
231 [label="StandardReferences 762970"];
232 [label="RuntimeUtilities.IsCoreClrRuntime 762971"];
233 [label="Mscorlib46ExtendedReferences 762972"];
234 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 762973"];
235 [label="TestBase.ValueTupleRef 762974"];
236 [label="TestReferences.NetFx.ValueTuple.tuplelib 762975"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 762976"];
238 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 762977"];
239 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 762978"];
240 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 762979"];
241 [label="return references; 762980"];
242 [label="options 762981"];
243 [label="parseOptions 762982"];
244 [label="assemblyName 762983"];
245 [label="sourceFileName 762984"];
246 [label="skipUsesIsNullable 762985"];
247 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 762986"];
248 [label="param CreateEmptyCompilation(CSharpTestSource source) 762987"];
249 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 762988"];
250 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 762989"];
251 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 762990"];
252 [label="param CreateEmptyCompilation(string assemblyName = '') 762991"];
253 [label="param CreateEmptyCompilation(string sourceFileName = '') 762992"];
254 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 762993"];
255 [label="source 762994"];
256 [label="references 762995"];
257 [label="options 762996"];
258 [label="parseOptions 762997"];
259 [label="assemblyName 762998"];
260 [label="sourceFileName 762999"];
261 [label="skipUsesIsNullable 763000"];
262 [label="null 763001"];
263 [label="experimentalFeature: null 763002"];
264 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 763003"];
265 [label="param CreateCompilationCore(CSharpTestSource source) 763004"];
266 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 763005"];
267 [label="param CreateCompilationCore(CSharpCompilationOptions options) 763006"];
268 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 763007"];
269 [label="param CreateCompilationCore(string assemblyName) 763008"];
270 [label="param CreateCompilationCore(string sourceFileName) 763009"];
271 [label="param CreateCompilationCore(bool skipUsesIsNullable) 763010"];
272 [label="param CreateCompilationCore(MessageID? experimentalFeature) 763011"];
273 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 763012"];
274 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 763013"];
275 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 763014"];
276 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 763015"];
277 [label="param GetSyntaxTrees(string sourceFileName = '') 763016"];
278 [label="param GetSyntaxTrees(this) 763017"];
279 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 763018"];
280 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 763019"];
281 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 763020"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 763021"];
283 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 763022"];
284 [label="param Parse(string text) 763023"];
285 [label="param Parse(string filename = '') 763024"];
286 [label="param Parse(CSharpParseOptions options = null) 763025"];
287 [label="param Parse(Encoding encoding = null) 763026"];
288 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 763027"];
289 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 763028"];
290 [label="kind: SourceCodeKind.Regular 763029"];
291 [label="documentationMode: DocumentationMode.Parse 763030"];
292 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 763031"];
293 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 763032"];
294 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 763033"];
295 [label="SourceCodeKind.Script 763034"];
296 [label="Regular.WithKind(SourceCodeKind.Script) 763035"];
297 [label="Script = Regular.WithKind(SourceCodeKind.Script) 763036"];
298 [label="LanguageVersion.CSharp6 763037"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 763038"];
300 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 763039"];
301 [label="LanguageVersion.CSharp7 763040"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 763041"];
303 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 763042"];
304 [label="LanguageVersion.CSharp7_1 763043"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 763044"];
306 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 763045"];
307 [label="LanguageVersion.CSharp7_2 763046"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 763047"];
309 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 763048"];
310 [label="LanguageVersion.CSharp7_3 763049"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 763050"];
312 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 763051"];
313 [label="LanguageVersion.Default 763052"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 763053"];
315 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 763054"];
316 [label="LanguageVersion.Preview 763055"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 763056"];
318 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 763057"];
319 [label="LanguageVersion.CSharp8 763058"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 763059"];
321 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 763060"];
322 [label="LanguageVersion.CSharp9 763061"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 763062"];
324 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 763063"];
325 [label="DocumentationMode.Diagnose 763064"];
326 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 763065"];
327 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 763066"];
328 [label="Regular 763067"];
329 [label="'UseLegacyStrongNameProvider' 763068"];
330 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 763069"];
331 [label="param WithFeature(this CSharpParseOptions options) 763070"];
332 [label="param WithFeature(string feature) 763071"];
333 [label="param WithFeature(string value = 'true') 763072"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 763073"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 763074"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 763075"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 763076"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 763077"];
339 [label="new[] { new KeyValuePair<string, string>(feature, value) } 763078"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 763079"];
341 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 763080"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 763081"];
343 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 763082"];
344 [label="1 763083"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 763084"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 763085"];
347 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 763086"];
348 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 763087"];
349 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 763088"];
350 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 763089"];
351 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 763090"];
352 [label="LanguageVersion.CSharp8 763091"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 763092"];
354 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 763093"];
355 [label="RegularWithExtendedPartialMethods = RegularPreview 763094"];
356 [label="new SmallDictionary<string, string> { } 763095"];
357 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 763096"];
358 [label="kind: SourceCodeKind.Regular 763097"];
359 [label="documentationMode: DocumentationMode.None 763098"];
360 [label="languageVersion: LanguageVersion.Preview 763099"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 763100"];
362 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 763101"];
363 [label="s_experimentalFeatures 763102"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 763103"];
365 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 763104"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 763105"];
367 [label="'testV7SwitchBinder' 763106"];
368 [label="'true' 763107"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 763108"];
370 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 763109"];
371 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 763110"];
372 [label="RegularWithoutRecursivePatterns = Regular7_3 763111"];
373 [label="RegularWithRecursivePatterns = Regular8 763112"];
374 [label="RegularWithoutPatternCombinators = Regular8 763113"];
375 [label="RegularWithPatternCombinators = RegularPreview 763114"];
376 [label="OutputKind.DynamicallyLinkedLibrary 763115"];
377 [label="OptimizationLevel.Release 763116"];
378 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 763117"];
379 [label="param CreateTestOptions(OutputKind outputKind) 763118"];
380 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763119"];
381 [label="param CreateTestOptions(bool allowUnsafe = false) 763120"];
382 [label="outputKind 763121"];
383 [label="optimizationLevel: optimizationLevel 763122"];
384 [label="warningLevel: Diagnostic.MaxWarningLevel 763123"];
385 [label="allowUnsafe: allowUnsafe 763124"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763125"];
387 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763126"];
388 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 763127"];
389 [label="OutputKind.ConsoleApplication 763128"];
390 [label="OptimizationLevel.Release 763129"];
391 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 763130"];
392 [label="param CreateTestOptions(OutputKind outputKind) 763131"];
393 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763132"];
394 [label="param CreateTestOptions(bool allowUnsafe = false) 763133"];
395 [label="outputKind 763134"];
396 [label="optimizationLevel: optimizationLevel 763135"];
397 [label="warningLevel: Diagnostic.MaxWarningLevel 763136"];
398 [label="allowUnsafe: allowUnsafe 763137"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763138"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763139"];
401 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 763140"];
402 [label="true 763141"];
403 [label="ReleaseDll.WithDebugPlusMode(true) 763142"];
404 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 763143"];
405 [label="true 763144"];
406 [label="ReleaseExe.WithDebugPlusMode(true) 763145"];
407 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 763146"];
408 [label="OutputKind.DynamicallyLinkedLibrary 763147"];
409 [label="OptimizationLevel.Debug 763148"];
410 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 763149"];
411 [label="param CreateTestOptions(OutputKind outputKind) 763150"];
412 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763151"];
413 [label="param CreateTestOptions(bool allowUnsafe = false) 763152"];
414 [label="outputKind 763153"];
415 [label="optimizationLevel: optimizationLevel 763154"];
416 [label="warningLevel: Diagnostic.MaxWarningLevel 763155"];
417 [label="allowUnsafe: allowUnsafe 763156"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763157"];
419 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763158"];
420 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 763159"];
421 [label="OutputKind.ConsoleApplication 763160"];
422 [label="OptimizationLevel.Debug 763161"];
423 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 763162"];
424 [label="param CreateTestOptions(OutputKind outputKind) 763163"];
425 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763164"];
426 [label="param CreateTestOptions(bool allowUnsafe = false) 763165"];
427 [label="outputKind 763166"];
428 [label="optimizationLevel: optimizationLevel 763167"];
429 [label="warningLevel: Diagnostic.MaxWarningLevel 763168"];
430 [label="allowUnsafe: allowUnsafe 763169"];
431 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763170"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763171"];
433 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 763172"];
434 [label="OutputKind.WindowsRuntimeMetadata 763173"];
435 [label="OptimizationLevel.Release 763174"];
436 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 763175"];
437 [label="param CreateTestOptions(OutputKind outputKind) 763176"];
438 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763177"];
439 [label="param CreateTestOptions(bool allowUnsafe = false) 763178"];
440 [label="outputKind 763179"];
441 [label="optimizationLevel: optimizationLevel 763180"];
442 [label="warningLevel: Diagnostic.MaxWarningLevel 763181"];
443 [label="allowUnsafe: allowUnsafe 763182"];
444 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763183"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763184"];
446 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 763185"];
447 [label="OutputKind.WindowsRuntimeMetadata 763186"];
448 [label="OptimizationLevel.Debug 763187"];
449 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 763188"];
450 [label="param CreateTestOptions(OutputKind outputKind) 763189"];
451 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763190"];
452 [label="param CreateTestOptions(bool allowUnsafe = false) 763191"];
453 [label="outputKind 763192"];
454 [label="optimizationLevel: optimizationLevel 763193"];
455 [label="warningLevel: Diagnostic.MaxWarningLevel 763194"];
456 [label="allowUnsafe: allowUnsafe 763195"];
457 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763196"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763197"];
459 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 763198"];
460 [label="OutputKind.NetModule 763199"];
461 [label="OptimizationLevel.Release 763200"];
462 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 763201"];
463 [label="param CreateTestOptions(OutputKind outputKind) 763202"];
464 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763203"];
465 [label="param CreateTestOptions(bool allowUnsafe = false) 763204"];
466 [label="outputKind 763205"];
467 [label="optimizationLevel: optimizationLevel 763206"];
468 [label="warningLevel: Diagnostic.MaxWarningLevel 763207"];
469 [label="allowUnsafe: allowUnsafe 763208"];
470 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763209"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763210"];
472 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 763211"];
473 [label="OutputKind.NetModule 763212"];
474 [label="OptimizationLevel.Debug 763213"];
475 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 763214"];
476 [label="param CreateTestOptions(OutputKind outputKind) 763215"];
477 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 763216"];
478 [label="param CreateTestOptions(bool allowUnsafe = false) 763217"];
479 [label="outputKind 763218"];
480 [label="optimizationLevel: optimizationLevel 763219"];
481 [label="warningLevel: Diagnostic.MaxWarningLevel 763220"];
482 [label="allowUnsafe: allowUnsafe 763221"];
483 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763222"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 763223"];
485 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 763224"];
486 [label="true 763225"];
487 [label="ReleaseDll.WithAllowUnsafe(true) 763226"];
488 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 763227"];
489 [label="true 763228"];
490 [label="ReleaseExe.WithAllowUnsafe(true) 763229"];
491 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 763230"];
492 [label="true 763231"];
493 [label="DebugDll.WithAllowUnsafe(true) 763232"];
494 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 763233"];
495 [label="true 763234"];
496 [label="DebugExe.WithAllowUnsafe(true) 763235"];
497 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 763236"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 763237"];
499 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763238"];
500 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763239"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 763240"];
502 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763241"];
503 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763242"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 763243"];
505 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763244"];
506 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763245"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 763246"];
508 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763247"];
509 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 763248"];
510 [label="DebugInformationFormat.Pdb 763249"];
511 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 763250"];
512 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 763251"];
513 [label="options = TestOptions.Regular; 763252"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 763253"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 763254"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 763255"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 763256"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 763257"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 763258"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 763259"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 763260"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 763261"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 763262"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 763263"];
525 [label="param CheckSerializable(SyntaxTree tree) 763264"];
526 [label="var stream = new MemoryStream(); 763265"];
527 [label="var root = tree.GetRoot(); 763266"];
528 [label="var root = tree.GetRoot(); 763267"];
529 [label="root.SerializeTo(stream); 763268"];
530 [label="root.SerializeTo(stream); 763269"];
531 [label="root.SerializeTo(stream); 763270"];
532 [label="stream.Position = 0; 763271"];
533 [label="stream.Position 763272"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 763273"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 763274"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 763275"];
537 [label="return tree; 763276"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 763277"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 763278"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 763279"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 763280"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 763281"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 763282"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 763283"];
545 [label="hasTopLevelStatements 763284"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 763285"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 763286"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 763287"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 763288"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 763289"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 763290"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 763291"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 763292"];
554 [label="return; 763293"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 763294"];
556 [label="var compilation = createCompilationLambda(); 763295"];
557 [label="var compilation = createCompilationLambda(); 763296"];
558 [label="return Guid.NewGuid().ToString('D'); 763297"];
559 [label="var compilation = createCompilationLambda(); 763298"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 763299"];
561 [label="IsNullableEnabled(compilation) 763300"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 763301"];
563 [label="var trees = compilation.SyntaxTrees; 763302"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 763303"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 763304"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 763305"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 763306"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 763307"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 763308"];
570 [label="return compilation; 763309"];
571 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 763310"];
572 [label="Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e') 763311"];
573 [label="param Diagnostic(object code) 763312"];
574 [label="param Diagnostic(string squiggledText = null) 763313"];
575 [label="param Diagnostic(object[] arguments = null) 763314"];
576 [label="param Diagnostic(LinePosition? startLocation = null) 763315"];
577 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 763316"];
578 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 763317"];
579 [label="param Diagnostic(bool isSuppressed = false) 763318"];
580 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763319"];
581 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763320"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763321"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763322"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763323"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763324"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763325"];
587 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 763326"];
588 [label="param Diagnostic(object code) 763327"];
589 [label="param Diagnostic(string squiggledText = null) 763328"];
590 [label="param Diagnostic(object[] arguments = null) 763329"];
591 [label="param Diagnostic(LinePosition? startLocation = null) 763330"];
592 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 763331"];
593 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 763332"];
594 [label="param Diagnostic(bool isSuppressed = false) 763333"];
595 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 763334"];
596 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763335"];
597 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763336"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763337"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763338"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763339"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763340"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763341"];
603 [label="{ } 763342"];
604 [label="None = { } 763343"];
605 [label="null 763344"];
606 [label="Any = null 763345"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 763346"];
608 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 763347"];
609 [label="param DiagnosticDescription(object code) 763348"];
610 [label="param DiagnosticDescription(bool isWarningAsError) 763349"];
611 [label="param DiagnosticDescription(string squiggledText) 763350"];
612 [label="param DiagnosticDescription(object[] arguments) 763351"];
613 [label="param DiagnosticDescription(LinePosition? startLocation) 763352"];
614 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 763353"];
615 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 763354"];
616 [label="param DiagnosticDescription(Type errorCodeType = null) 763355"];
617 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 763356"];
618 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 763357"];
619 [label="param DiagnosticDescription(bool isSuppressed = false) 763358"];
620 [label="param DiagnosticDescription(this) 763359"];
621 [label="_code 763360"];
622 [label="_isWarningAsError 763361"];
623 [label="_isSuppressed 763362"];
624 [label="_squiggledText 763363"];
625 [label="_arguments 763364"];
626 [label="_startPosition 763365"];
627 [label="_argumentOrderDoesNotMatter 763366"];
628 [label="_errorCodeType 763367"];
629 [label="_ignoreArgumentsWhenComparing 763368"];
630 [label="_defaultSeverityOpt 763369"];
631 [label="_effectiveSeverityOpt 763370"];
632 [label="_syntaxPredicate 763371"];
633 [label="_showPredicate 763372"];
634 [label="_location 763373"];
635 [label="_argumentsAsStrings 763374"];
636 [label="_code 763375"];
637 [label="_isWarningAsError 763376"];
638 [label="_squiggledText 763377"];
639 [label="_arguments 763378"];
640 [label="_startPosition 763379"];
641 [label="_syntaxPredicate 763380"];
642 [label="_argumentOrderDoesNotMatter 763381"];
643 [label="_errorCodeType = errorCodeType ?? code.GetType(); 763382"];
644 [label="_errorCodeType 763383"];
645 [label="_defaultSeverityOpt 763384"];
646 [label="_effectiveSeverityOpt 763385"];
647 [label="_isSuppressed 763386"];
648 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 763387"];
649 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 763388"];
650 [label="Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e') 763389"];
651 [label="Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e') 763390"];
652 [label="param WithArguments(params object[] arguments) 763391"];
653 [label="param WithArguments(this) 763392"];
654 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763393"];
655 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763394"];
656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763395"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763396"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763397"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763398"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763399"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763400"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763401"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763402"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763403"];
665 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 763404"];
666 [label="param DiagnosticDescription(object code) 763405"];
667 [label="param DiagnosticDescription(bool isWarningAsError) 763406"];
668 [label="param DiagnosticDescription(string squiggledText) 763407"];
669 [label="param DiagnosticDescription(object[] arguments) 763408"];
670 [label="param DiagnosticDescription(LinePosition? startLocation) 763409"];
671 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 763410"];
672 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 763411"];
673 [label="param DiagnosticDescription(Type errorCodeType = null) 763412"];
674 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 763413"];
675 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 763414"];
676 [label="param DiagnosticDescription(bool isSuppressed = false) 763415"];
677 [label="param DiagnosticDescription(this) 763416"];
678 [label="_code 763417"];
679 [label="_isWarningAsError 763418"];
680 [label="_isSuppressed 763419"];
681 [label="_squiggledText 763420"];
682 [label="_arguments 763421"];
683 [label="_startPosition 763422"];
684 [label="_argumentOrderDoesNotMatter 763423"];
685 [label="_errorCodeType 763424"];
686 [label="_ignoreArgumentsWhenComparing 763425"];
687 [label="_defaultSeverityOpt 763426"];
688 [label="_effectiveSeverityOpt 763427"];
689 [label="_syntaxPredicate 763428"];
690 [label="_showPredicate 763429"];
691 [label="_location 763430"];
692 [label="_argumentsAsStrings 763431"];
693 [label="_arguments 763432"];
694 [label="_argumentOrderDoesNotMatter 763433"];
695 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 763434"];
696 [label="Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33) 763435"];
697 [label="param WithLocation(int line) 763436"];
698 [label="param WithLocation(int column) 763437"];
699 [label="param WithLocation(this) 763438"];
700 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763439"];
701 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763440"];
702 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763441"];
703 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763442"];
704 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763443"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763444"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763445"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763446"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763447"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763448"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763449"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763450"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763451"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 763452"];
714 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 763453"];
715 [label="param DiagnosticDescription(object code) 763454"];
716 [label="param DiagnosticDescription(bool isWarningAsError) 763455"];
717 [label="param DiagnosticDescription(string squiggledText) 763456"];
718 [label="param DiagnosticDescription(object[] arguments) 763457"];
719 [label="param DiagnosticDescription(LinePosition? startLocation) 763458"];
720 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 763459"];
721 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 763460"];
722 [label="param DiagnosticDescription(Type errorCodeType = null) 763461"];
723 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 763462"];
724 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 763463"];
725 [label="param DiagnosticDescription(bool isSuppressed = false) 763464"];
726 [label="param DiagnosticDescription(this) 763465"];
727 [label="_code 763466"];
728 [label="_isWarningAsError 763467"];
729 [label="_isSuppressed 763468"];
730 [label="_squiggledText 763469"];
731 [label="_arguments 763470"];
732 [label="_startPosition 763471"];
733 [label="_argumentOrderDoesNotMatter 763472"];
734 [label="_errorCodeType 763473"];
735 [label="_ignoreArgumentsWhenComparing 763474"];
736 [label="_defaultSeverityOpt 763475"];
737 [label="_effectiveSeverityOpt 763476"];
738 [label="_syntaxPredicate 763477"];
739 [label="_showPredicate 763478"];
740 [label="_location 763479"];
741 [label="_argumentsAsStrings 763480"];
742 [label="_startPosition 763481"];
743 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)); 763482"];
744 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)) 763483"];
745 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,33): warning CS0168: The variable 'e' is declared but never used\n                //         catch (System.Exception e) when (true)\n                Diagnostic(ErrorCode.WRN_UnreferencedVar, 'e').WithArguments('e').WithLocation(9, 33)) 763484"];
746 [label="param VerifyDiagnostics(this TCompilation c) 763485"];
747 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 763486"];
748 [label="var diagnostics = c.GetDiagnostics(); 763487"];
749 [label="var diagnostics = c.GetDiagnostics(); 763488"];
750 [label="diagnostics.Verify(expected); 763489"];
751 [label="diagnostics.Verify(expected); 763490"];
752 [label="diagnostics.Verify(expected) 763491"];
753 [label="param Verify(this ImmutableArray<Diagnostic> actual) 763492"];
754 [label="param Verify(params DiagnosticDescription[] expected) 763493"];
755 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 763494"];
756 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 763495"];
757 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 763496"];
758 [label="param Verify(this IEnumerable<Diagnostic> actual) 763497"];
759 [label="param Verify(params DiagnosticDescription[] expected) 763498"];
760 [label="Verify(actual, expected, errorCodeOnly: false); 763499"];
761 [label="Verify(actual, expected, errorCodeOnly: false); 763500"];
762 [label="Verify(actual, expected, errorCodeOnly: false); 763501"];
763 [label="Verify(actual, expected, errorCodeOnly: false) 763502"];
764 [label="param Verify(IEnumerable<Diagnostic> actual) 763503"];
765 [label="param Verify(DiagnosticDescription[] expected) 763504"];
766 [label="param Verify(bool errorCodeOnly) 763505"];
767 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 763506"];
768 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 763507"];
769 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 763508"];
770 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 763509"];
771 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 763510"];
772 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 763511"];
773 [label="=> _defaultSeverityOpt 763512"];
774 [label="_defaultSeverityOpt 763513"];
775 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 763514"];
776 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 763515"];
777 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 763516"];
778 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 763517"];
779 [label="=> _effectiveSeverityOpt 763518"];
780 [label="_effectiveSeverityOpt 763519"];
781 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 763520"];
782 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 763521"];
783 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 763522"];
784 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 763523"];
785 [label="param DiagnosticDescription(Diagnostic d) 763524"];
786 [label="param DiagnosticDescription(bool errorCodeOnly) 763525"];
787 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 763526"];
788 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 763527"];
789 [label="param DiagnosticDescription(this) 763528"];
790 [label="_code 763529"];
791 [label="_isWarningAsError 763530"];
792 [label="_isSuppressed 763531"];
793 [label="_squiggledText 763532"];
794 [label="_arguments 763533"];
795 [label="_startPosition 763534"];
796 [label="_argumentOrderDoesNotMatter 763535"];
797 [label="_errorCodeType 763536"];
798 [label="_defaultSeverityOpt 763537"];
799 [label="_effectiveSeverityOpt 763538"];
800 [label="_syntaxPredicate 763539"];
801 [label="_code 763540"];
802 [label="_isWarningAsError 763541"];
803 [label="_isSuppressed 763542"];
804 [label="_location 763543"];
805 [label="includeDefaultSeverity 763544"];
806 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 763545"];
807 [label="_defaultSeverityOpt 763546"];
808 [label="includeEffectiveSeverity 763547"];
809 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 763548"];
810 [label="_effectiveSeverityOpt 763549"];
811 [label="DiagnosticWithInfo dinfo = null; 763550"];
812 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 763551"];
813 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 763552"];
814 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 763553"];
815 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 763554"];
816 [label="dinfo = d as DiagnosticWithInfo; 763555"];
817 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 763556"];
818 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 763557"];
819 [label="_errorCodeType 763558"];
820 [label="_code 763559"];
821 [label="_ignoreArgumentsWhenComparing 763560"];
822 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 763561"];
823 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 763562"];
824 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 763563"];
825 [label="_squiggledText 763564"];
826 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 763565"];
827 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 763566"];
828 [label="_arguments 763567"];
829 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 763568"];
830 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 763569"];
831 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 763570"];
832 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 763571"];
833 [label="_startPosition 763572"];
834 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 763573"];
835 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 763574"];
836 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 763575"];
837 [label="int index = unmatched.IndexOf(d); 763576"];
838 [label="int index = unmatched.IndexOf(d); 763577"];
839 [label="param Equals(object obj) 763578"];
840 [label="param Equals(this) 763579"];
841 [label="var d = obj as DiagnosticDescription; 763580"];
842 [label="if (d == null)\n                return false; 763581"];
843 [label="if (d == null)\n                return false; 763582"];
844 [label="if (!_code.Equals(d._code))\n                return false; 763583"];
845 [label="if (!_code.Equals(d._code))\n                return false; 763584"];
846 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 763585"];
847 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 763586"];
848 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 763587"];
849 [label="if (_squiggledText != d._squiggledText)\n                    return false; 763588"];
850 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 763589"];
851 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 763590"];
852 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 763591"];
853 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 763592"];
854 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 763593"];
855 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 763594"];
856 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 763595"];
857 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 763596"];
858 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 763597"];
859 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 763598"];
860 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 763599"];
861 [label="if (d._arguments == null)\n                    return false; 763600"];
862 [label="GetArgumentsAsStrings() 763601"];
863 [label="param GetArgumentsAsStrings(this) 763602"];
864 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 763603"];
865 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 763604"];
866 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 763605"];
867 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 763606"];
868 [label="_argumentsAsStrings 763607"];
869 [label="return _argumentsAsStrings; 763608"];
870 [label="var args1 = GetArgumentsAsStrings(); 763609"];
871 [label="d.GetArgumentsAsStrings() 763610"];
872 [label="param GetArgumentsAsStrings(this) 763611"];
873 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 763612"];
874 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 763613"];
875 [label="return _argumentsAsStrings; 763614"];
876 [label="var args2 = d.GetArgumentsAsStrings(); 763615"];
877 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 763616"];
878 [label="if (!args1.SequenceEqual(args2))\n                        return false; 763617"];
879 [label="if (!args1.SequenceEqual(args2))\n                        return false; 763618"];
880 [label="if (!args1.SequenceEqual(args2))\n                        return false; 763619"];
881 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 763620"];
882 [label="return true; 763621"];
883 [label="int index = unmatched.IndexOf(d); 763622"];
884 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 763623"];
885 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 763624"];
886 [label="unmatched.RemoveAt(index); 763625"];
887 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 763626"];
888 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 763627"];
889 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 763628"];
890 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 763629"];
891 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 763630"];
892 [label="DiagnosticDescription.GetAssertText(expected, actual) 763631"];
893 [label="param GetAssertText(DiagnosticDescription[] expected) 763632"];
894 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 763633"];
895 [label="const int CSharp = 1; 763634"];
896 [label="const int VisualBasic = 2; 763635"];
897 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 763636"];
898 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 763637"];
899 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 763638"];
900 [label="actual.Any() && actual.First() is CSDiagnostic 763639"];
901 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 763640"];
902 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 763641"];
903 [label="int indentDepth = (language == CSharp) ? 4 : 1; 763642"];
904 [label="(language == CSharp) 763643"];
905 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 763644"];
906 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 763645"];
907 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 763646"];
908 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 763647"];
909 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 763648"];
910 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 763649"];
911 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 763650"];
912 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 763651"];
913 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 763652"];
914 [label="IsSortedOrEmpty(expected) 763653"];
915 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 763654"];
916 [label="new LinePositionComparer() 763655"];
917 [label="param LinePositionComparer(this) 763656"];
918 [label="Instance = new LinePositionComparer() 763657"];
919 [label="var comparer = LinePositionComparer.Instance; 763658"];
920 [label="DiagnosticDescription last = null; 763659"];
921 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 763660"];
922 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 763661"];
923 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 763662"];
924 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 763663"];
925 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 763664"];
926 [label="last = diagnostic; 763665"];
927 [label="return true; 763666"];
928 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 763667"];
929 [label="actual = Sort(actual); 763668"];
930 [label="Sort(actual) 763669"];
931 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 763670"];
932 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 763671"];
933 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 763672"];
934 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 763673"];
935 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 763674"];
936 [label="var assertText = new StringBuilder(); 763675"];
937 [label="assertText.AppendLine(); 763676"];
938 [label="int i; 763677"];
939 [label="assertText.AppendLine('Expected:'); 763678"];
940 [label="assertText.AppendLine('Expected:'); 763679"];
941 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 763680"];
942 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 763681"];
943 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 763682"];
944 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 763683"];
945 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 763684"];
946 [label="GetDiagnosticDescription(d, indentDepth) 763685"];
947 [label="param GetDiagnosticDescription(DiagnosticDescription d) 763686"];
948 [label="param GetDiagnosticDescription(int indentDepth) 763687"];
949 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763688"];
950 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763689"];
951 [label="d.ToString() 763690"];
952 [label="param ToString(this) 763691"];
953 [label="var sb = new StringBuilder(); 763692"];
954 [label="sb.Append('Diagnostic('); 763693"];
955 [label="sb.Append('Diagnostic('); 763694"];
956 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 763695"];
957 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 763696"];
958 [label="sb.Append(_errorCodeType.Name); 763697"];
959 [label="sb.Append(_errorCodeType.Name); 763698"];
960 [label="sb.Append('.'); 763699"];
961 [label="sb.Append('.'); 763700"];
962 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 763701"];
963 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 763702"];
964 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 763703"];
965 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 763704"];
966 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 763705"];
967 [label="sb.Append(', \\''); 763706"];
968 [label="sb.Append(', \\''); 763707"];
969 [label="sb.Append(_squiggledText); 763708"];
970 [label="sb.Append(_squiggledText); 763709"];
971 [label="sb.Append('''); 763710"];
972 [label="sb.Append('''); 763711"];
973 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 763712"];
974 [label="sb.Append(')'); 763713"];
975 [label="sb.Append(')'); 763714"];
976 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 763715"];
977 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 763716"];
978 [label="sb.Append('.WithArguments('); 763717"];
979 [label="sb.Append('.WithArguments('); 763718"];
980 [label="GetArgumentsAsStrings() 763719"];
981 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 763720"];
982 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 763721"];
983 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 763722"];
984 [label="sb.Append('\\''); 763723"];
985 [label="sb.Append('\\''); 763724"];
986 [label="sb.Append(argumentStrings.Current); 763725"];
987 [label="sb.Append(argumentStrings.Current); 763726"];
988 [label="sb.Append('\\''); 763727"];
989 [label="sb.Append('\\''); 763728"];
990 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 763729"];
991 [label="sb.Append(')'); 763730"];
992 [label="sb.Append(')'); 763731"];
993 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 763732"];
994 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 763733"];
995 [label="sb.Append('.WithLocation('); 763734"];
996 [label="sb.Append('.WithLocation('); 763735"];
997 [label="sb.Append(_startPosition.Value.Line + 1); 763736"];
998 [label="sb.Append(_startPosition.Value.Line + 1); 763737"];
999 [label="sb.Append(', '); 763738"];
1000 [label="sb.Append(', '); 763739"];
1001 [label="sb.Append(_startPosition.Value.Character + 1); 763740"];
1002 [label="sb.Append(_startPosition.Value.Character + 1); 763741"];
1003 [label="sb.Append(')'); 763742"];
1004 [label="sb.Append(')'); 763743"];
1005 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 763744"];
1006 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 763745"];
1007 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 763746"];
1008 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 763747"];
1009 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 763748"];
1010 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 763749"];
1011 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 763750"];
1012 [label="return sb.ToString(); 763751"];
1013 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763752"];
1014 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763753"];
1015 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 763754"];
1016 [label="GetCommaSeparatedLines(assertText, expectedText); 763755"];
1017 [label="GetCommaSeparatedLines(assertText, expectedText); 763756"];
1018 [label="GetCommaSeparatedLines(assertText, expectedText) 763757"];
1019 [label="param GetCommaSeparatedLines(StringBuilder sb) 763758"];
1020 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 763759"];
1021 [label="int n = lines.Count; 763760"];
1022 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 763761"];
1023 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 763762"];
1024 [label="sb.Append(lines[i]); 763763"];
1025 [label="sb.Append(lines[i]); 763764"];
1026 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 763765"];
1027 [label="sb.AppendLine(); 763766"];
1028 [label="GetCommaSeparatedLines(assertText, expectedText); 763767"];
1029 [label="assertText.AppendLine('Actual:'); 763768"];
1030 [label="assertText.AppendLine('Actual:'); 763769"];
1031 [label="var actualText = ArrayBuilder<string>.GetInstance(); 763770"];
1032 [label="var e = actual.GetEnumerator(); 763771"];
1033 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 763772"];
1034 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 763773"];
1035 [label="param Compare(LinePosition? x) 763774"];
1036 [label="param Compare(LinePosition? y) 763775"];
1037 [label="param Compare(this) 763776"];
1038 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 763777"];
1039 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 763778"];
1040 [label="if (y == null)\n                {\n                    return 1;\n                } 763779"];
1041 [label="if (y == null)\n                {\n                    return 1;\n                } 763780"];
1042 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 763781"];
1043 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 763782"];
1044 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 763783"];
1045 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 763784"];
1046 [label="return x.Value.Character.CompareTo(y.Value.Character); 763785"];
1047 [label="return x.Value.Character.CompareTo(y.Value.Character); 763786"];
1048 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 763787"];
1049 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 763788"];
1050 [label="Diagnostic d = e.Current; 763789"];
1051 [label="string message = d.ToString(); 763790"];
1052 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 763791"];
1053 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 763792"];
1054 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 763793"];
1055 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 763794"];
1056 [label="Indent(assertText, indentDepth); 763795"];
1057 [label="Indent(assertText, indentDepth); 763796"];
1058 [label="Indent(assertText, indentDepth) 763797"];
1059 [label="param Indent(StringBuilder sb) 763798"];
1060 [label="param Indent(int count) 763799"];
1061 [label="sb.Append(' ', 4 * count); 763800"];
1062 [label="sb.Append(' ', 4 * count); 763801"];
1063 [label="sb.Append(' ', 4 * count); 763802"];
1064 [label="Indent(assertText, indentDepth); 763803"];
1065 [label="assertText.Append('// '); 763804"];
1066 [label="assertText.Append('// '); 763805"];
1067 [label="assertText.AppendLine(d.ToString()); 763806"];
1068 [label="assertText.AppendLine(d.ToString()); 763807"];
1069 [label="var l = d.Location; 763808"];
1070 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 763809"];
1071 [label="Indent(assertText, indentDepth); 763810"];
1072 [label="Indent(assertText, indentDepth); 763811"];
1073 [label="Indent(assertText, indentDepth) 763812"];
1074 [label="param Indent(StringBuilder sb) 763813"];
1075 [label="param Indent(int count) 763814"];
1076 [label="sb.Append(' ', 4 * count); 763815"];
1077 [label="sb.Append(' ', 4 * count); 763816"];
1078 [label="sb.Append(' ', 4 * count); 763817"];
1079 [label="Indent(assertText, indentDepth); 763818"];
1080 [label="assertText.Append('// '); 763819"];
1081 [label="assertText.Append('// '); 763820"];
1082 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 763821"];
1083 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 763822"];
1084 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 763823"];
1085 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 763824"];
1086 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 763825"];
1087 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 763826"];
1088 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 763827"];
1089 [label="param DiagnosticDescription(Diagnostic d) 763828"];
1090 [label="param DiagnosticDescription(bool errorCodeOnly) 763829"];
1091 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 763830"];
1092 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 763831"];
1093 [label="param DiagnosticDescription(this) 763832"];
1094 [label="_code 763833"];
1095 [label="_isWarningAsError 763834"];
1096 [label="_isSuppressed 763835"];
1097 [label="_squiggledText 763836"];
1098 [label="_arguments 763837"];
1099 [label="_startPosition 763838"];
1100 [label="_errorCodeType 763839"];
1101 [label="_defaultSeverityOpt 763840"];
1102 [label="_effectiveSeverityOpt 763841"];
1103 [label="_code 763842"];
1104 [label="_isWarningAsError 763843"];
1105 [label="_isSuppressed 763844"];
1106 [label="_location 763845"];
1107 [label="DiagnosticWithInfo dinfo = null; 763846"];
1108 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 763847"];
1109 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 763848"];
1110 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 763849"];
1111 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 763850"];
1112 [label="var diffDescription = description; 763851"];
1113 [label="var idx = Array.IndexOf(expected, description); 763852"];
1114 [label="var idx = Array.IndexOf(expected, description); 763853"];
1115 [label="var idx = Array.IndexOf(expected, description); 763854"];
1116 [label="var idx = Array.IndexOf(expected, description); 763855"];
1117 [label="if (d == null)\n                return false; 763856"];
1118 [label="if (d == null)\n                return false; 763857"];
1119 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 763858"];
1120 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 763859"];
1121 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 763860"];
1122 [label="if (_squiggledText != d._squiggledText)\n                    return false; 763861"];
1123 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 763862"];
1124 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 763863"];
1125 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 763864"];
1126 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 763865"];
1127 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 763866"];
1128 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 763867"];
1129 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 763868"];
1130 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 763869"];
1131 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 763870"];
1132 [label="if (d._arguments == null)\n                    return false; 763871"];
1133 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 763872"];
1134 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 763873"];
1135 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 763874"];
1136 [label="diffDescription = expected[idx]; 763875"];
1137 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 763876"];
1138 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 763877"];
1139 [label="GetDiagnosticDescription(description, indentDepth) 763878"];
1140 [label="param GetDiagnosticDescription(DiagnosticDescription d) 763879"];
1141 [label="param GetDiagnosticDescription(int indentDepth) 763880"];
1142 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763881"];
1143 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763882"];
1144 [label="var sb = new StringBuilder(); 763883"];
1145 [label="sb.Append('Diagnostic('); 763884"];
1146 [label="sb.Append('Diagnostic('); 763885"];
1147 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 763886"];
1148 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 763887"];
1149 [label="sb.Append(_errorCodeType.Name); 763888"];
1150 [label="sb.Append(_errorCodeType.Name); 763889"];
1151 [label="sb.Append('.'); 763890"];
1152 [label="sb.Append('.'); 763891"];
1153 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 763892"];
1154 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 763893"];
1155 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 763894"];
1156 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 763895"];
1157 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 763896"];
1158 [label="sb.Append(', \\''); 763897"];
1159 [label="sb.Append(', \\''); 763898"];
1160 [label="sb.Append(_squiggledText); 763899"];
1161 [label="sb.Append(_squiggledText); 763900"];
1162 [label="sb.Append('''); 763901"];
1163 [label="sb.Append('''); 763902"];
1164 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 763903"];
1165 [label="sb.Append(')'); 763904"];
1166 [label="sb.Append(')'); 763905"];
1167 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 763906"];
1168 [label="sb.Append('.WithArguments('); 763907"];
1169 [label="sb.Append('.WithArguments('); 763908"];
1170 [label="sb.Append('\\''); 763909"];
1171 [label="sb.Append('\\''); 763910"];
1172 [label="sb.Append(argumentStrings.Current); 763911"];
1173 [label="sb.Append(argumentStrings.Current); 763912"];
1174 [label="sb.Append('\\''); 763913"];
1175 [label="sb.Append('\\''); 763914"];
1176 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 763915"];
1177 [label="sb.Append(')'); 763916"];
1178 [label="sb.Append(')'); 763917"];
1179 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 763918"];
1180 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 763919"];
1181 [label="sb.Append('.WithLocation('); 763920"];
1182 [label="sb.Append('.WithLocation('); 763921"];
1183 [label="sb.Append(_startPosition.Value.Line + 1); 763922"];
1184 [label="sb.Append(_startPosition.Value.Line + 1); 763923"];
1185 [label="sb.Append(', '); 763924"];
1186 [label="sb.Append(', '); 763925"];
1187 [label="sb.Append(_startPosition.Value.Character + 1); 763926"];
1188 [label="sb.Append(_startPosition.Value.Character + 1); 763927"];
1189 [label="sb.Append(')'); 763928"];
1190 [label="sb.Append(')'); 763929"];
1191 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 763930"];
1192 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 763931"];
1193 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 763932"];
1194 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 763933"];
1195 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 763934"];
1196 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 763935"];
1197 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 763936"];
1198 [label="return sb.ToString(); 763937"];
1199 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763938"];
1200 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763939"];
1201 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 763940"];
1202 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 763941"];
1203 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 763942"];
1204 [label="GetDiagnosticDescription(diffDescription, indentDepth) 763943"];
1205 [label="param GetDiagnosticDescription(DiagnosticDescription d) 763944"];
1206 [label="param GetDiagnosticDescription(int indentDepth) 763945"];
1207 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763946"];
1208 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 763947"];
1209 [label="var sb = new StringBuilder(); 763948"];
1210 [label="sb.Append('Diagnostic('); 763949"];
1211 [label="sb.Append('Diagnostic('); 763950"];
1212 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 763951"];
1213 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 763952"];
1214 [label="sb.Append(_errorCodeType.Name); 763953"];
1215 [label="sb.Append(_errorCodeType.Name); 763954"];
1216 [label="sb.Append('.'); 763955"];
1217 [label="sb.Append('.'); 763956"];
1218 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 763957"];
1219 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 763958"];
1220 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 763959"];
1221 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 763960"];
1222 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 763961"];
1223 [label="sb.Append(', \\''); 763962"];
1224 [label="sb.Append(', \\''); 763963"];
1225 [label="sb.Append(_squiggledText); 763964"];
1226 [label="sb.Append(_squiggledText); 763965"];
1227 [label="sb.Append('''); 763966"];
1228 [label="sb.Append('''); 763967"];
1229 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 763968"];
1230 [label="sb.Append(')'); 763969"];
1231 [label="sb.Append(')'); 763970"];
1232 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 763971"];
1233 [label="sb.Append('.WithArguments('); 763972"];
1234 [label="sb.Append('.WithArguments('); 763973"];
1235 [label="sb.Append('\\''); 763974"];
1236 [label="sb.Append('\\''); 763975"];
1237 [label="sb.Append(argumentStrings.Current); 763976"];
1238 [label="sb.Append(argumentStrings.Current); 763977"];
1239 [label="sb.Append('\\''); 763978"];
1240 [label="sb.Append('\\''); 763979"];
1241 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 763980"];
1242 [label="sb.Append(')'); 763981"];
1243 [label="sb.Append(')'); 763982"];
1244 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 763983"];
1245 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 763984"];
1246 [label="sb.Append('.WithLocation('); 763985"];
1247 [label="sb.Append('.WithLocation('); 763986"];
1248 [label="sb.Append(_startPosition.Value.Line + 1); 763987"];
1249 [label="sb.Append(_startPosition.Value.Line + 1); 763988"];
1250 [label="sb.Append(', '); 763989"];
1251 [label="sb.Append(', '); 763990"];
1252 [label="sb.Append(_startPosition.Value.Character + 1); 763991"];
1253 [label="sb.Append(_startPosition.Value.Character + 1); 763992"];
1254 [label="sb.Append(')'); 763993"];
1255 [label="sb.Append(')'); 763994"];
1256 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 763995"];
1257 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 763996"];
1258 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 763997"];
1259 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 763998"];
1260 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 763999"];
1261 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 764000"];
1262 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 764001"];
1263 [label="return sb.ToString(); 764002"];
1264 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 764003"];
1265 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 764004"];
1266 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 764005"];
1267 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 764006"];
1268 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 764007"];
1269 [label="assertText.AppendLine(); 764008"];
1270 [label="assertText.AppendLine('Diff:'); 764009"];
1271 [label="assertText.AppendLine('Diff:'); 764010"];
1272 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 764011"];
1273 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 764012"];
1274 [label="new[] { '\\r', '\\n' } 764013"];
1275 [label="'\\r' 764014"];
1276 [label="'\\n' 764015"];
1277 [label="new[] { '\\r', '\\n' } 764016"];
1278 [label="new[] { '\\r', '\\n' } 764017"];
1279 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 764018"];
1280 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 764019"];
1281 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 764020"];
1282 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 764021"];
1283 [label="param DiffReport(IEnumerable<T> expected) 764022"];
1284 [label="param DiffReport(IEnumerable<T> actual) 764023"];
1285 [label="param DiffReport(string separator) 764024"];
1286 [label="param DiffReport(IEqualityComparer<T> comparer = null) 764025"];
1287 [label="param DiffReport(Func<T, string> toString = null) 764026"];
1288 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 764027"];
1289 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 764028"];
1290 [label="(comparer != null) 764029"];
1291 [label="EqualityComparer<T>.Default 764030"];
1292 [label="new LCS<T>(EqualityComparer<T>.Default) 764031"];
1293 [label="param LCS(IEqualityComparer<T> comparer) 764032"];
1294 [label="param LCS(this) 764033"];
1295 [label="1 764034"];
1296 [label="DeleteCost = 1 764035"];
1297 [label="1 764036"];
1298 [label="InsertCost = 1 764037"];
1299 [label="2 764038"];
1300 [label="UpdateCost = 2 764039"];
1301 [label="param LongestCommonSubsequence(this) 764040"];
1302 [label="_comparer 764041"];
1303 [label="_comparer 764042"];
1304 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 764043"];
1305 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 764044"];
1306 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 764045"];
1307 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 764046"];
1308 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 764047"];
1309 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 764048"];
1310 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 764049"];
1311 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 764050"];
1312 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 764051"];
1313 [label="lcs.CalculateDiff(expectedList, actualList, toString) 764052"];
1314 [label="param CalculateDiff(IList<T> sequenceA) 764053"];
1315 [label="param CalculateDiff(IList<T> sequenceB) 764054"];
1316 [label="param CalculateDiff(Func<T, string> toString) 764055"];
1317 [label="param CalculateDiff(this) 764056"];
1318 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 764057"];
1319 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 764058"];
1320 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 764059"];
1321 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 764060"];
1322 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 764061"];
1323 [label="param GetEdits(TSequence sequenceA) 764062"];
1324 [label="param GetEdits(int lengthA) 764063"];
1325 [label="param GetEdits(TSequence sequenceB) 764064"];
1326 [label="param GetEdits(int lengthB) 764065"];
1327 [label="param GetEdits(this) 764066"];
1328 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 764067"];
1329 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 764068"];
1330 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 764069"];
1331 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 764070"];
1332 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 764071"];
1333 [label="param ComputeCostMatrix(TSequence sequenceA) 764072"];
1334 [label="param ComputeCostMatrix(int lengthA) 764073"];
1335 [label="param ComputeCostMatrix(TSequence sequenceB) 764074"];
1336 [label="param ComputeCostMatrix(int lengthB) 764075"];
1337 [label="param ComputeCostMatrix(this) 764076"];
1338 [label="var la = lengthA + 1; 764077"];
1339 [label="var la = lengthA + 1; 764078"];
1340 [label="var lb = lengthB + 1; 764079"];
1341 [label="var lb = lengthB + 1; 764080"];
1342 [label="var d = new int[la, lb]; 764081"];
1343 [label="d[0, 0] = 0; 764082"];
1344 [label="d[0, 0] 764083"];
1345 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 764084"];
1346 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 764085"];
1347 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 764086"];
1348 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 764087"];
1349 [label="d[i, 0] 764088"];
1350 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 764089"];
1351 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 764090"];
1352 [label="d[0, j] = d[0, j - 1] + InsertCost; 764091"];
1353 [label="d[0, j] = d[0, j - 1] + InsertCost; 764092"];
1354 [label="d[0, j] 764093"];
1355 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 764094"];
1356 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 764095"];
1357 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 764096"];
1358 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 764097"];
1359 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 764098"];
1360 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 764099"];
1361 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 764100"];
1362 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 764101"];
1363 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 764102"];
1364 [label="param ItemsEqual(IList<T> sequenceA) 764103"];
1365 [label="param ItemsEqual(int indexA) 764104"];
1366 [label="param ItemsEqual(IList<T> sequenceB) 764105"];
1367 [label="param ItemsEqual(int indexB) 764106"];
1368 [label="param ItemsEqual(this) 764107"];
1369 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 764108"];
1370 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 764109"];
1371 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 764110"];
1372 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 764111"];
1373 [label="int m2 = d[i - 1, j] + DeleteCost; 764112"];
1374 [label="int m2 = d[i - 1, j] + DeleteCost; 764113"];
1375 [label="int m3 = d[i, j - 1] + InsertCost; 764114"];
1376 [label="int m3 = d[i, j - 1] + InsertCost; 764115"];
1377 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 764116"];
1378 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 764117"];
1379 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 764118"];
1380 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 764119"];
1381 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 764120"];
1382 [label="d[i, j] 764121"];
1383 [label="return d; 764122"];
1384 [label="int i = lengthA; 764123"];
1385 [label="int j = lengthB; 764124"];
1386 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 764125"];
1387 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 764126"];
1388 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 764127"];
1389 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 764128"];
1390 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 764129"];
1391 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 764130"];
1392 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 764131"];
1393 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 764132"];
1394 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 764133"];
1395 [label="i--; 764134"];
1396 [label="j--; 764135"];
1397 [label="yield return new Edit(EditKind.Update, i, j); 764136"];
1398 [label="yield return new Edit(EditKind.Update, i, j); 764137"];
1399 [label="yield return new Edit(EditKind.Update, i, j); 764138"];
1400 [label="yield return new Edit(EditKind.Update, i, j); 764139"];
1401 [label="new Edit(EditKind.Update, i, j) 764140"];
1402 [label="param Edit(EditKind kind) 764141"];
1403 [label="param Edit(int indexA) 764142"];
1404 [label="param Edit(int indexB) 764143"];
1405 [label="param Edit(this) 764144"];
1406 [label="this.Kind 764145"];
1407 [label="this.IndexA 764146"];
1408 [label="this.IndexB 764147"];
1409 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 764148"];
1410 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 764149"];
1411 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 764150"];
1412 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 764151"];
1413 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 764152"];
1414 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 764153"];
1415 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 764154"];
1416 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 764155"];
1417 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 764156"];
1418 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 764157"];
1419 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 764158"];
1420 [label="actualText.Free(); 764159"];
1421 [label="expectedText.Free(); 764160"];
1422 [label="return assertText.ToString(); 764161"];
1423 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 764162"];
1424 [label="diagnostics.Verify(expected); 764163"];
1425 [label="VerifyAssemblyIds(c, diagnostics); 764164"];
1426 [label="VerifyAssemblyIds(c, diagnostics); 764165"];
1427 [label="VerifyAssemblyIds(c, diagnostics) 764166"];
1428 [label="param VerifyAssemblyIds(TCompilation c) 764167"];
1429 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 764168"];
1430 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 764169"];
1431 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 764170"];
1432 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 764171"];
1433 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 764172"];
1434 [label="CustomAssert.True(assemblyIds.IsEmpty); 764173"];
1435 [label="VerifyAssemblyIds(c, diagnostics); 764174"];
1436 [label="return c; 764175"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 211;
220 -> 212;
221 -> 213;
221 -> 212;
222 -> 217;
222 -> 212;
223 -> 214;
223 -> 212;
224 -> 212;
225 -> 222;
225 -> 224;
226 -> 223;
226 -> 224;
227 -> 225;
227 -> 224;
228 -> 224;
229 -> 227;
229 -> 228;
230 -> 229;
230 -> 228;
231 -> 230;
232 -> 0;
232 -> 231;
233 -> 232;
234 -> 233;
235 -> 233;
236 -> 0;
236 -> 235;
237 -> 236;
237 -> 234;
237 -> 233;
238 -> 237;
238 -> 231;
239 -> 224;
240 -> 226;
240 -> 239;
240 -> 224;
241 -> 238;
241 -> 240;
242 -> 215;
242 -> 212;
243 -> 216;
243 -> 212;
244 -> 218;
244 -> 212;
245 -> 219;
245 -> 212;
246 -> 220;
246 -> 212;
247 -> 212;
248 -> 221;
248 -> 247;
249 -> 241;
249 -> 247;
250 -> 242;
250 -> 247;
251 -> 243;
251 -> 247;
252 -> 244;
252 -> 247;
253 -> 245;
253 -> 247;
254 -> 246;
254 -> 247;
255 -> 248;
255 -> 247;
256 -> 249;
256 -> 247;
257 -> 250;
257 -> 247;
258 -> 251;
258 -> 247;
259 -> 252;
259 -> 247;
260 -> 253;
260 -> 247;
261 -> 254;
261 -> 247;
262 -> 247;
263 -> 262;
263 -> 247;
264 -> 247;
265 -> 255;
265 -> 264;
266 -> 256;
266 -> 264;
267 -> 257;
267 -> 264;
268 -> 258;
268 -> 264;
269 -> 259;
269 -> 264;
270 -> 260;
270 -> 264;
271 -> 261;
271 -> 264;
272 -> 263;
272 -> 264;
273 -> 268;
273 -> 264;
274 -> 270;
274 -> 264;
275 -> 264;
276 -> 273;
276 -> 275;
277 -> 274;
277 -> 275;
278 -> 265;
278 -> 275;
279 -> 278;
279 -> 209;
279 -> 275;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 276;
282 -> 279;
283 -> 279;
284 -> 280;
284 -> 283;
285 -> 281;
285 -> 283;
286 -> 282;
286 -> 283;
287 -> 280;
287 -> 283;
288 -> 283;
289 -> 286;
289 -> 288;
289 -> 283;
290 -> 0;
291 -> 0;
293 -> 290;
293 -> 291;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 294;
296 -> 293;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 294;
299 -> 293;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 294;
302 -> 293;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 294;
305 -> 293;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 294;
308 -> 293;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 294;
311 -> 293;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 294;
314 -> 293;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 294;
317 -> 293;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 294;
320 -> 293;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 294;
323 -> 293;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 294;
326 -> 293;
326 -> 325;
327 -> 326;
328 -> 294;
331 -> 328;
331 -> 330;
332 -> 329;
332 -> 330;
333 -> 330;
334 -> 331;
334 -> 293;
334 -> 330;
335 -> 330;
336 -> 332;
336 -> 330;
337 -> 333;
337 -> 330;
338 -> 336;
338 -> 337;
338 -> 330;
339 -> 338;
339 -> 335;
339 -> 330;
340 -> 334;
340 -> 335;
340 -> 293;
340 -> 339;
340 -> 338;
340 -> 330;
341 -> 340;
342 -> 0;
343 -> 342;
345 -> 343;
345 -> 344;
346 -> 294;
346 -> 293;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 348;
350 -> 294;
350 -> 293;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 294;
353 -> 293;
353 -> 352;
354 -> 353;
355 -> 318;
357 -> 356;
358 -> 0;
359 -> 0;
360 -> 0;
362 -> 358;
362 -> 359;
362 -> 360;
362 -> 361;
363 -> 357;
364 -> 362;
364 -> 363;
364 -> 356;
365 -> 364;
369 -> 366;
369 -> 367;
369 -> 368;
370 -> 300;
370 -> 293;
370 -> 299;
370 -> 366;
370 -> 369;
371 -> 370;
372 -> 312;
373 -> 321;
374 -> 321;
375 -> 318;
376 -> 0;
377 -> 0;
379 -> 376;
379 -> 378;
380 -> 377;
380 -> 378;
381 -> 378;
382 -> 379;
382 -> 378;
383 -> 380;
383 -> 378;
384 -> 0;
384 -> 378;
385 -> 381;
385 -> 378;
386 -> 378;
387 -> 382;
387 -> 383;
387 -> 384;
387 -> 385;
387 -> 386;
387 -> 378;
388 -> 387;
389 -> 0;
390 -> 0;
392 -> 389;
392 -> 391;
393 -> 390;
393 -> 391;
394 -> 391;
395 -> 392;
395 -> 391;
396 -> 393;
396 -> 391;
397 -> 0;
397 -> 391;
398 -> 394;
398 -> 391;
399 -> 391;
400 -> 395;
400 -> 396;
400 -> 397;
400 -> 398;
400 -> 399;
400 -> 391;
401 -> 400;
403 -> 388;
403 -> 387;
403 -> 402;
404 -> 403;
406 -> 401;
406 -> 400;
406 -> 405;
407 -> 406;
408 -> 0;
409 -> 0;
411 -> 408;
411 -> 410;
412 -> 409;
412 -> 410;
413 -> 410;
414 -> 411;
414 -> 410;
415 -> 412;
415 -> 410;
416 -> 0;
416 -> 410;
417 -> 413;
417 -> 410;
418 -> 410;
419 -> 414;
419 -> 415;
419 -> 416;
419 -> 417;
419 -> 418;
419 -> 410;
420 -> 419;
421 -> 0;
422 -> 0;
424 -> 421;
424 -> 423;
425 -> 422;
425 -> 423;
426 -> 423;
427 -> 424;
427 -> 423;
428 -> 425;
428 -> 423;
429 -> 0;
429 -> 423;
430 -> 426;
430 -> 423;
431 -> 423;
432 -> 427;
432 -> 428;
432 -> 429;
432 -> 430;
432 -> 431;
432 -> 423;
433 -> 432;
434 -> 0;
435 -> 0;
437 -> 434;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 436;
440 -> 437;
440 -> 436;
441 -> 438;
441 -> 436;
442 -> 0;
442 -> 436;
443 -> 439;
443 -> 436;
444 -> 436;
445 -> 440;
445 -> 441;
445 -> 442;
445 -> 443;
445 -> 444;
445 -> 436;
446 -> 445;
447 -> 0;
448 -> 0;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 449;
453 -> 450;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 0;
455 -> 449;
456 -> 452;
456 -> 449;
457 -> 449;
458 -> 453;
458 -> 454;
458 -> 455;
458 -> 456;
458 -> 457;
458 -> 449;
459 -> 458;
460 -> 0;
461 -> 0;
463 -> 460;
463 -> 462;
464 -> 461;
464 -> 462;
465 -> 462;
466 -> 463;
466 -> 462;
467 -> 464;
467 -> 462;
468 -> 0;
468 -> 462;
469 -> 465;
469 -> 462;
470 -> 462;
471 -> 466;
471 -> 467;
471 -> 468;
471 -> 469;
471 -> 470;
471 -> 462;
472 -> 471;
473 -> 0;
474 -> 0;
476 -> 473;
476 -> 475;
477 -> 474;
477 -> 475;
478 -> 475;
479 -> 476;
479 -> 475;
480 -> 477;
480 -> 475;
481 -> 0;
481 -> 475;
482 -> 478;
482 -> 475;
483 -> 475;
484 -> 479;
484 -> 480;
484 -> 481;
484 -> 482;
484 -> 483;
484 -> 475;
485 -> 484;
487 -> 388;
487 -> 387;
487 -> 486;
488 -> 487;
490 -> 401;
490 -> 400;
490 -> 489;
491 -> 490;
493 -> 420;
493 -> 419;
493 -> 492;
494 -> 493;
496 -> 433;
496 -> 432;
496 -> 495;
497 -> 496;
498 -> 0;
499 -> 388;
499 -> 387;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 401;
502 -> 400;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 472;
505 -> 471;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 420;
508 -> 419;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 0;
511 -> 510;
512 -> 511;
513 -> 294;
513 -> 289;
514 -> 284;
514 -> 283;
515 -> 0;
515 -> 283;
516 -> 515;
516 -> 287;
516 -> 283;
517 -> 283;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 283;
519 -> 518;
519 -> 283;
520 -> 513;
520 -> 283;
521 -> 285;
521 -> 283;
522 -> 283;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 293;
523 -> 283;
524 -> 283;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 280;
538 -> 279;
539 -> 280;
539 -> 264;
540 -> 264;
541 -> 267;
541 -> 540;
541 -> 264;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 280;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 388;
546 -> 545;
547 -> 0;
547 -> 264;
548 -> 272;
548 -> 264;
549 -> 269;
549 -> 539;
549 -> 266;
549 -> 546;
549 -> 264;
550 -> 549;
550 -> 264;
551 -> 264;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 264;
556 -> 549;
556 -> 280;
556 -> 538;
556 -> 523;
556 -> 237;
556 -> 0;
556 -> 387;
556 -> 234;
556 -> 264;
557 -> 264;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 264;
560 -> 559;
560 -> 264;
561 -> 264;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 271;
569 -> 568;
569 -> 264;
570 -> 559;
570 -> 264;
571 -> 0;
571 -> 1;
572 -> 1;
573 -> 571;
573 -> 572;
574 -> 211;
574 -> 572;
575 -> 211;
575 -> 572;
576 -> 211;
576 -> 572;
577 -> 211;
577 -> 572;
578 -> 211;
578 -> 572;
579 -> 211;
579 -> 572;
580 -> 573;
580 -> 572;
581 -> 574;
581 -> 572;
582 -> 575;
582 -> 572;
583 -> 576;
583 -> 572;
584 -> 577;
584 -> 572;
585 -> 578;
585 -> 572;
586 -> 579;
586 -> 572;
587 -> 572;
588 -> 580;
588 -> 587;
589 -> 581;
589 -> 587;
590 -> 582;
590 -> 587;
591 -> 583;
591 -> 587;
592 -> 584;
592 -> 587;
593 -> 585;
593 -> 587;
594 -> 586;
594 -> 587;
595 -> 588;
595 -> 587;
596 -> 588;
596 -> 587;
597 -> 587;
598 -> 589;
598 -> 587;
599 -> 590;
599 -> 587;
600 -> 591;
600 -> 587;
601 -> 592;
601 -> 587;
602 -> 593;
602 -> 587;
604 -> 603;
606 -> 605;
607 -> 594;
607 -> 587;
608 -> 587;
609 -> 596;
609 -> 608;
610 -> 597;
610 -> 608;
611 -> 598;
611 -> 608;
612 -> 599;
612 -> 608;
613 -> 600;
613 -> 608;
614 -> 601;
614 -> 608;
615 -> 602;
615 -> 608;
616 -> 596;
616 -> 608;
617 -> 607;
617 -> 608;
618 -> 597;
618 -> 608;
619 -> 597;
619 -> 608;
620 -> 597;
620 -> 608;
621 -> 620;
621 -> 608;
622 -> 620;
622 -> 608;
623 -> 620;
623 -> 608;
624 -> 620;
624 -> 608;
625 -> 620;
625 -> 608;
626 -> 620;
626 -> 608;
627 -> 620;
627 -> 608;
628 -> 620;
628 -> 608;
629 -> 620;
629 -> 608;
630 -> 620;
630 -> 608;
631 -> 620;
631 -> 608;
632 -> 620;
632 -> 608;
633 -> 620;
633 -> 608;
634 -> 620;
634 -> 608;
635 -> 620;
635 -> 608;
636 -> 609;
636 -> 620;
636 -> 608;
637 -> 610;
637 -> 620;
637 -> 608;
638 -> 611;
638 -> 620;
638 -> 608;
639 -> 612;
639 -> 620;
639 -> 608;
640 -> 613;
640 -> 620;
640 -> 608;
641 -> 614;
641 -> 620;
641 -> 608;
642 -> 615;
642 -> 620;
642 -> 608;
643 -> 616;
643 -> 608;
644 -> 643;
644 -> 620;
644 -> 608;
645 -> 617;
645 -> 620;
645 -> 608;
646 -> 618;
646 -> 620;
646 -> 608;
647 -> 619;
647 -> 620;
647 -> 608;
648 -> 597;
648 -> 572;
649 -> 648;
649 -> 1;
650 -> 211;
650 -> 1;
651 -> 1;
652 -> 211;
652 -> 651;
653 -> 649;
653 -> 651;
654 -> 653;
654 -> 636;
654 -> 651;
655 -> 653;
655 -> 637;
655 -> 651;
656 -> 653;
656 -> 638;
656 -> 651;
657 -> 652;
657 -> 651;
658 -> 653;
658 -> 640;
658 -> 651;
659 -> 653;
659 -> 641;
659 -> 651;
660 -> 651;
661 -> 653;
661 -> 644;
661 -> 651;
662 -> 653;
662 -> 645;
662 -> 651;
663 -> 653;
663 -> 646;
663 -> 651;
664 -> 653;
664 -> 647;
664 -> 651;
665 -> 651;
666 -> 654;
666 -> 665;
667 -> 655;
667 -> 665;
668 -> 656;
668 -> 665;
669 -> 657;
669 -> 665;
670 -> 658;
670 -> 665;
671 -> 659;
671 -> 665;
672 -> 660;
672 -> 665;
673 -> 661;
673 -> 665;
674 -> 662;
674 -> 665;
675 -> 663;
675 -> 665;
676 -> 664;
676 -> 665;
677 -> 660;
677 -> 665;
678 -> 677;
678 -> 665;
679 -> 677;
679 -> 665;
680 -> 677;
680 -> 665;
681 -> 677;
681 -> 665;
682 -> 677;
682 -> 665;
683 -> 677;
683 -> 665;
684 -> 677;
684 -> 665;
685 -> 677;
685 -> 665;
686 -> 677;
686 -> 665;
687 -> 677;
687 -> 665;
688 -> 677;
688 -> 665;
689 -> 677;
689 -> 665;
690 -> 677;
690 -> 665;
691 -> 677;
691 -> 665;
692 -> 677;
692 -> 665;
693 -> 669;
693 -> 677;
693 -> 665;
694 -> 672;
694 -> 677;
694 -> 665;
695 -> 660;
695 -> 1;
696 -> 1;
697 -> 211;
697 -> 696;
698 -> 211;
698 -> 696;
699 -> 695;
699 -> 696;
700 -> 699;
700 -> 666;
700 -> 696;
701 -> 699;
701 -> 667;
701 -> 696;
702 -> 699;
702 -> 668;
702 -> 696;
703 -> 699;
703 -> 693;
703 -> 696;
704 -> 696;
705 -> 697;
705 -> 704;
705 -> 696;
706 -> 698;
706 -> 704;
706 -> 696;
707 -> 705;
707 -> 706;
707 -> 696;
708 -> 699;
708 -> 671;
708 -> 696;
709 -> 699;
709 -> 694;
709 -> 696;
710 -> 699;
710 -> 673;
710 -> 696;
711 -> 699;
711 -> 674;
711 -> 696;
712 -> 699;
712 -> 675;
712 -> 696;
713 -> 699;
713 -> 676;
713 -> 696;
714 -> 696;
715 -> 700;
715 -> 714;
716 -> 701;
716 -> 714;
717 -> 702;
717 -> 714;
718 -> 703;
718 -> 714;
719 -> 707;
719 -> 714;
720 -> 708;
720 -> 714;
721 -> 709;
721 -> 714;
722 -> 710;
722 -> 714;
723 -> 711;
723 -> 714;
724 -> 712;
724 -> 714;
725 -> 713;
725 -> 714;
726 -> 704;
726 -> 714;
727 -> 726;
727 -> 714;
728 -> 726;
728 -> 714;
729 -> 726;
729 -> 714;
730 -> 726;
730 -> 714;
731 -> 726;
731 -> 714;
732 -> 726;
732 -> 714;
733 -> 726;
733 -> 714;
734 -> 726;
734 -> 714;
735 -> 726;
735 -> 714;
736 -> 726;
736 -> 714;
737 -> 726;
737 -> 714;
738 -> 726;
738 -> 714;
739 -> 726;
739 -> 714;
740 -> 726;
740 -> 714;
741 -> 726;
741 -> 714;
742 -> 719;
742 -> 726;
742 -> 714;
743 -> 704;
743 -> 1;
744 -> 743;
744 -> 211;
744 -> 1;
745 -> 1;
746 -> 570;
746 -> 745;
747 -> 211;
747 -> 745;
748 -> 745;
749 -> 746;
749 -> 748;
749 -> 568;
749 -> 745;
750 -> 749;
750 -> 745;
751 -> 747;
751 -> 745;
752 -> 745;
753 -> 750;
753 -> 752;
754 -> 751;
754 -> 752;
755 -> 753;
755 -> 752;
756 -> 754;
756 -> 752;
757 -> 752;
758 -> 755;
758 -> 757;
759 -> 756;
759 -> 757;
760 -> 758;
760 -> 757;
761 -> 759;
761 -> 757;
762 -> 757;
763 -> 757;
764 -> 760;
764 -> 763;
765 -> 761;
765 -> 763;
766 -> 762;
766 -> 763;
767 -> 763;
768 -> 765;
768 -> 767;
768 -> 763;
769 -> 765;
769 -> 763;
770 -> 769;
770 -> 211;
770 -> 744;
770 -> 715;
770 -> 716;
770 -> 725;
770 -> 717;
770 -> 718;
770 -> 742;
770 -> 721;
770 -> 722;
770 -> 735;
770 -> 723;
770 -> 724;
770 -> 720;
770 -> 739;
770 -> 740;
770 -> 741;
770 -> 707;
770 -> 650;
770 -> 596;
770 -> 763;
771 -> 763;
772 -> 769;
772 -> 771;
772 -> 211;
772 -> 744;
772 -> 715;
772 -> 716;
772 -> 725;
772 -> 717;
772 -> 718;
772 -> 742;
772 -> 721;
772 -> 722;
772 -> 735;
772 -> 723;
772 -> 724;
772 -> 720;
772 -> 739;
772 -> 740;
772 -> 741;
772 -> 707;
772 -> 650;
772 -> 596;
772 -> 763;
773 -> 772;
773 -> 771;
774 -> 773;
774 -> 772;
774 -> 771;
775 -> 765;
775 -> 763;
776 -> 775;
776 -> 774;
776 -> 763;
777 -> 763;
778 -> 775;
778 -> 777;
778 -> 774;
778 -> 763;
779 -> 778;
779 -> 777;
780 -> 779;
780 -> 778;
780 -> 777;
781 -> 764;
781 -> 763;
782 -> 766;
782 -> 774;
782 -> 780;
782 -> 763;
783 -> 781;
783 -> 782;
783 -> 763;
784 -> 763;
785 -> 783;
785 -> 784;
786 -> 783;
786 -> 784;
787 -> 783;
787 -> 784;
788 -> 783;
788 -> 784;
789 -> 783;
789 -> 784;
790 -> 789;
790 -> 784;
791 -> 789;
791 -> 784;
792 -> 789;
792 -> 784;
793 -> 789;
793 -> 784;
794 -> 789;
794 -> 784;
795 -> 789;
795 -> 784;
796 -> 789;
796 -> 784;
797 -> 789;
797 -> 784;
798 -> 789;
798 -> 784;
799 -> 789;
799 -> 784;
800 -> 789;
800 -> 784;
801 -> 785;
801 -> 783;
801 -> 789;
801 -> 784;
802 -> 785;
802 -> 783;
802 -> 789;
802 -> 784;
803 -> 785;
803 -> 783;
803 -> 789;
803 -> 784;
804 -> 785;
804 -> 783;
804 -> 789;
804 -> 784;
805 -> 787;
805 -> 784;
806 -> 805;
807 -> 806;
807 -> 789;
807 -> 784;
808 -> 788;
808 -> 784;
809 -> 808;
810 -> 809;
810 -> 789;
810 -> 784;
811 -> 784;
812 -> 784;
813 -> 785;
813 -> 783;
813 -> 812;
813 -> 784;
814 -> 785;
814 -> 783;
814 -> 784;
815 -> 0;
815 -> 784;
816 -> 785;
816 -> 813;
817 -> 813;
818 -> 816;
818 -> 817;
818 -> 813;
819 -> 816;
819 -> 814;
819 -> 789;
819 -> 818;
820 -> 785;
820 -> 814;
820 -> 789;
820 -> 818;
821 -> 786;
821 -> 789;
821 -> 784;
822 -> 789;
822 -> 821;
822 -> 784;
823 -> 789;
823 -> 804;
823 -> 814;
823 -> 822;
824 -> 823;
825 -> 824;
825 -> 789;
825 -> 823;
826 -> 822;
827 -> 816;
827 -> 826;
827 -> 822;
828 -> 816;
828 -> 824;
828 -> 789;
828 -> 827;
829 -> 822;
830 -> 789;
830 -> 828;
830 -> 829;
830 -> 822;
831 -> 789;
831 -> 828;
831 -> 824;
831 -> 829;
831 -> 822;
832 -> 789;
832 -> 804;
832 -> 824;
832 -> 784;
833 -> 832;
833 -> 789;
833 -> 784;
834 -> 783;
834 -> 832;
834 -> 820;
834 -> 802;
834 -> 803;
834 -> 825;
834 -> 828;
834 -> 833;
834 -> 796;
834 -> 819;
834 -> 821;
834 -> 807;
834 -> 810;
834 -> 800;
834 -> 789;
834 -> 804;
834 -> 763;
835 -> 765;
835 -> 763;
836 -> 835;
836 -> 780;
836 -> 763;
837 -> 836;
838 -> 837;
838 -> 834;
838 -> 780;
838 -> 836;
839 -> 838;
839 -> 837;
840 -> 838;
840 -> 837;
841 -> 839;
841 -> 837;
842 -> 837;
843 -> 841;
843 -> 842;
843 -> 837;
844 -> 841;
844 -> 838;
844 -> 837;
845 -> 840;
845 -> 838;
845 -> 844;
845 -> 837;
846 -> 840;
846 -> 845;
846 -> 841;
846 -> 837;
847 -> 840;
847 -> 845;
847 -> 841;
847 -> 837;
848 -> 840;
848 -> 845;
848 -> 837;
849 -> 840;
849 -> 845;
849 -> 841;
849 -> 848;
850 -> 837;
851 -> 840;
851 -> 845;
851 -> 850;
851 -> 837;
852 -> 851;
853 -> 840;
853 -> 845;
853 -> 841;
853 -> 852;
854 -> 837;
855 -> 840;
855 -> 845;
855 -> 854;
855 -> 837;
856 -> 837;
857 -> 841;
857 -> 845;
857 -> 856;
857 -> 837;
858 -> 840;
858 -> 845;
858 -> 841;
858 -> 837;
859 -> 837;
860 -> 840;
860 -> 845;
860 -> 859;
860 -> 837;
861 -> 860;
862 -> 860;
863 -> 840;
863 -> 862;
864 -> 862;
865 -> 863;
865 -> 845;
865 -> 864;
865 -> 862;
866 -> 863;
866 -> 845;
866 -> 865;
867 -> 865;
868 -> 866;
868 -> 863;
868 -> 865;
869 -> 863;
869 -> 845;
869 -> 868;
869 -> 862;
870 -> 869;
870 -> 860;
871 -> 860;
872 -> 841;
872 -> 871;
873 -> 871;
874 -> 872;
874 -> 845;
874 -> 868;
874 -> 873;
874 -> 871;
875 -> 872;
875 -> 845;
875 -> 868;
875 -> 874;
875 -> 871;
876 -> 875;
876 -> 860;
877 -> 840;
877 -> 845;
877 -> 841;
877 -> 860;
878 -> 870;
878 -> 877;
879 -> 876;
879 -> 877;
880 -> 878;
880 -> 879;
880 -> 845;
880 -> 868;
880 -> 874;
880 -> 866;
880 -> 867;
880 -> 877;
881 -> 840;
881 -> 880;
881 -> 841;
881 -> 837;
882 -> 837;
883 -> 838;
883 -> 882;
883 -> 880;
883 -> 836;
884 -> 836;
885 -> 883;
885 -> 884;
885 -> 836;
886 -> 883;
886 -> 885;
887 -> 763;
888 -> 834;
888 -> 886;
888 -> 887;
888 -> 763;
889 -> 763;
890 -> 765;
890 -> 763;
891 -> 764;
891 -> 763;
892 -> 763;
893 -> 890;
893 -> 892;
894 -> 891;
894 -> 892;
895 -> 892;
896 -> 892;
897 -> 894;
897 -> 892;
898 -> 897;
898 -> 886;
898 -> 892;
899 -> 886;
899 -> 892;
900 -> 898;
900 -> 892;
901 -> 895;
901 -> 900;
902 -> 901;
902 -> 892;
903 -> 901;
903 -> 892;
904 -> 903;
904 -> 892;
905 -> 893;
905 -> 892;
906 -> 905;
906 -> 886;
906 -> 892;
907 -> 892;
908 -> 905;
908 -> 907;
908 -> 886;
908 -> 892;
909 -> 893;
909 -> 892;
910 -> 909;
910 -> 908;
910 -> 892;
911 -> 892;
912 -> 909;
912 -> 911;
912 -> 908;
912 -> 892;
913 -> 893;
913 -> 892;
914 -> 892;
915 -> 913;
915 -> 914;
917 -> 916;
918 -> 916;
919 -> 918;
919 -> 914;
920 -> 914;
921 -> 915;
921 -> 914;
922 -> 921;
922 -> 912;
922 -> 914;
923 -> 922;
924 -> 922;
925 -> 920;
925 -> 924;
925 -> 922;
926 -> 922;
927 -> 914;
928 -> 927;
928 -> 892;
929 -> 894;
929 -> 928;
930 -> 928;
931 -> 929;
931 -> 930;
932 -> 931;
932 -> 930;
933 -> 930;
934 -> 918;
934 -> 930;
935 -> 932;
935 -> 933;
935 -> 934;
935 -> 912;
935 -> 930;
936 -> 892;
937 -> 936;
937 -> 892;
938 -> 892;
939 -> 892;
940 -> 936;
940 -> 939;
940 -> 937;
940 -> 892;
941 -> 892;
942 -> 893;
942 -> 892;
943 -> 942;
943 -> 935;
943 -> 892;
944 -> 943;
945 -> 904;
945 -> 943;
946 -> 943;
947 -> 944;
947 -> 946;
948 -> 945;
948 -> 946;
949 -> 946;
950 -> 949;
950 -> 948;
950 -> 946;
951 -> 946;
952 -> 947;
952 -> 951;
953 -> 951;
954 -> 951;
955 -> 953;
955 -> 954;
955 -> 951;
956 -> 951;
957 -> 952;
957 -> 935;
957 -> 956;
957 -> 951;
958 -> 952;
958 -> 935;
958 -> 957;
959 -> 953;
959 -> 958;
959 -> 955;
959 -> 957;
960 -> 957;
961 -> 953;
961 -> 960;
961 -> 959;
961 -> 957;
962 -> 952;
962 -> 935;
962 -> 957;
963 -> 953;
963 -> 962;
963 -> 961;
963 -> 957;
964 -> 951;
965 -> 952;
965 -> 935;
965 -> 964;
965 -> 951;
966 -> 965;
967 -> 966;
968 -> 953;
968 -> 967;
968 -> 963;
968 -> 966;
969 -> 952;
969 -> 935;
969 -> 966;
970 -> 953;
970 -> 969;
970 -> 968;
970 -> 966;
971 -> 965;
972 -> 953;
972 -> 971;
972 -> 970;
972 -> 965;
973 -> 952;
973 -> 935;
973 -> 951;
974 -> 951;
975 -> 953;
975 -> 974;
975 -> 972;
975 -> 951;
976 -> 951;
977 -> 952;
977 -> 935;
977 -> 976;
977 -> 951;
978 -> 977;
979 -> 953;
979 -> 978;
979 -> 975;
979 -> 977;
980 -> 977;
981 -> 980;
981 -> 977;
982 -> 977;
983 -> 981;
983 -> 977;
984 -> 983;
985 -> 953;
985 -> 984;
985 -> 979;
985 -> 983;
986 -> 981;
986 -> 983;
987 -> 953;
987 -> 986;
987 -> 985;
987 -> 983;
988 -> 983;
989 -> 953;
989 -> 988;
989 -> 987;
989 -> 983;
990 -> 983;
991 -> 977;
992 -> 953;
992 -> 991;
992 -> 989;
992 -> 977;
993 -> 951;
994 -> 952;
994 -> 983;
994 -> 993;
994 -> 951;
995 -> 994;
996 -> 953;
996 -> 995;
996 -> 992;
996 -> 994;
997 -> 994;
998 -> 953;
998 -> 997;
998 -> 996;
998 -> 994;
999 -> 994;
1000 -> 953;
1000 -> 999;
1000 -> 998;
1000 -> 994;
1001 -> 994;
1002 -> 953;
1002 -> 1001;
1002 -> 1000;
1002 -> 994;
1003 -> 994;
1004 -> 953;
1004 -> 1003;
1004 -> 1002;
1004 -> 994;
1005 -> 952;
1005 -> 983;
1005 -> 951;
1006 -> 951;
1007 -> 952;
1007 -> 983;
1007 -> 1006;
1007 -> 951;
1008 -> 951;
1009 -> 952;
1009 -> 983;
1009 -> 1008;
1009 -> 951;
1010 -> 951;
1011 -> 952;
1011 -> 983;
1011 -> 1010;
1011 -> 951;
1012 -> 953;
1012 -> 1004;
1012 -> 951;
1013 -> 1012;
1013 -> 946;
1014 -> 950;
1014 -> 1013;
1014 -> 946;
1015 -> 941;
1015 -> 1014;
1015 -> 943;
1016 -> 936;
1016 -> 892;
1017 -> 941;
1017 -> 892;
1018 -> 892;
1019 -> 1016;
1019 -> 1018;
1020 -> 1017;
1020 -> 1018;
1021 -> 1020;
1021 -> 1015;
1021 -> 1018;
1022 -> 1018;
1023 -> 1022;
1023 -> 1021;
1023 -> 1018;
1024 -> 1020;
1024 -> 1022;
1024 -> 1015;
1024 -> 1023;
1025 -> 1019;
1025 -> 1024;
1025 -> 940;
1025 -> 1023;
1026 -> 1023;
1027 -> 1019;
1027 -> 1025;
1027 -> 1023;
1028 -> 892;
1029 -> 892;
1030 -> 936;
1030 -> 1029;
1030 -> 1027;
1030 -> 892;
1031 -> 892;
1032 -> 935;
1032 -> 983;
1032 -> 892;
1033 -> 892;
1034 -> 1032;
1034 -> 892;
1035 -> 1034;
1035 -> 1033;
1036 -> 1034;
1036 -> 1033;
1037 -> 1034;
1037 -> 1033;
1038 -> 1033;
1039 -> 1035;
1039 -> 1038;
1039 -> 1033;
1040 -> 1033;
1041 -> 1036;
1041 -> 1040;
1041 -> 1033;
1042 -> 1036;
1042 -> 1034;
1042 -> 1033;
1043 -> 1035;
1043 -> 1034;
1043 -> 1042;
1043 -> 1033;
1044 -> 1033;
1045 -> 1043;
1045 -> 1044;
1045 -> 1033;
1046 -> 1036;
1046 -> 1034;
1046 -> 1033;
1047 -> 1035;
1047 -> 1034;
1047 -> 1046;
1047 -> 1033;
1048 -> 1036;
1048 -> 1047;
1048 -> 1033;
1049 -> 1048;
1049 -> 1044;
1049 -> 1033;
1050 -> 1032;
1050 -> 1047;
1051 -> 1050;
1051 -> 1047;
1052 -> 1051;
1052 -> 1047;
1053 -> 1047;
1054 -> 1047;
1055 -> 902;
1055 -> 1047;
1056 -> 936;
1056 -> 1055;
1057 -> 904;
1057 -> 1055;
1058 -> 1055;
1059 -> 1056;
1059 -> 1058;
1060 -> 1057;
1060 -> 1058;
1061 -> 1058;
1062 -> 1061;
1062 -> 1060;
1062 -> 1058;
1063 -> 1059;
1063 -> 1061;
1063 -> 1062;
1063 -> 1030;
1063 -> 1058;
1064 -> 1055;
1065 -> 1055;
1066 -> 936;
1066 -> 1065;
1066 -> 1063;
1066 -> 1055;
1067 -> 1050;
1067 -> 1051;
1067 -> 1055;
1068 -> 936;
1068 -> 1067;
1068 -> 1066;
1068 -> 1055;
1069 -> 1050;
1069 -> 1067;
1069 -> 1055;
1070 -> 1069;
1070 -> 1067;
1070 -> 1055;
1071 -> 936;
1071 -> 1070;
1072 -> 904;
1072 -> 1070;
1073 -> 1070;
1074 -> 1071;
1074 -> 1073;
1075 -> 1072;
1075 -> 1073;
1076 -> 1073;
1077 -> 1076;
1077 -> 1075;
1077 -> 1073;
1078 -> 1074;
1078 -> 1076;
1078 -> 1077;
1078 -> 1068;
1078 -> 1073;
1079 -> 1070;
1080 -> 1070;
1081 -> 936;
1081 -> 1080;
1081 -> 1078;
1081 -> 1070;
1082 -> 1070;
1083 -> 936;
1083 -> 1082;
1083 -> 1081;
1083 -> 1070;
1084 -> 1050;
1084 -> 1047;
1085 -> 1047;
1086 -> 906;
1086 -> 1047;
1087 -> 910;
1087 -> 1047;
1088 -> 1047;
1089 -> 1084;
1089 -> 1088;
1090 -> 1085;
1090 -> 1088;
1091 -> 1086;
1091 -> 1088;
1092 -> 1087;
1092 -> 1088;
1093 -> 1085;
1093 -> 1088;
1094 -> 1093;
1094 -> 1088;
1095 -> 1093;
1095 -> 1088;
1096 -> 1093;
1096 -> 1088;
1097 -> 1093;
1097 -> 1088;
1098 -> 1093;
1098 -> 1088;
1099 -> 1093;
1099 -> 1088;
1100 -> 1093;
1100 -> 1088;
1101 -> 1093;
1101 -> 1088;
1102 -> 1093;
1102 -> 1088;
1103 -> 1089;
1103 -> 1082;
1103 -> 1093;
1103 -> 1088;
1104 -> 1089;
1104 -> 1082;
1104 -> 1093;
1104 -> 1088;
1105 -> 1089;
1105 -> 1082;
1105 -> 1093;
1105 -> 1088;
1106 -> 1089;
1106 -> 1082;
1106 -> 1093;
1106 -> 1088;
1107 -> 1088;
1108 -> 1089;
1108 -> 1082;
1108 -> 1088;
1109 -> 1093;
1110 -> 1093;
1110 -> 1108;
1110 -> 1109;
1111 -> 1093;
1111 -> 1108;
1111 -> 1106;
1111 -> 1109;
1112 -> 1085;
1112 -> 1047;
1113 -> 893;
1113 -> 1047;
1114 -> 1085;
1114 -> 1047;
1115 -> 1113;
1115 -> 1114;
1115 -> 1106;
1115 -> 1108;
1115 -> 1104;
1115 -> 1105;
1115 -> 1093;
1115 -> 1090;
1115 -> 1091;
1115 -> 1092;
1115 -> 1047;
1116 -> 1047;
1117 -> 1116;
1118 -> 1115;
1118 -> 1117;
1118 -> 1116;
1119 -> 1115;
1119 -> 1116;
1120 -> 1115;
1120 -> 1116;
1121 -> 1115;
1121 -> 1116;
1122 -> 1115;
1122 -> 1121;
1123 -> 1116;
1124 -> 1115;
1124 -> 1123;
1124 -> 1116;
1125 -> 1124;
1126 -> 1115;
1126 -> 1125;
1127 -> 1116;
1128 -> 1115;
1128 -> 1127;
1128 -> 1116;
1129 -> 1116;
1130 -> 1115;
1130 -> 1129;
1130 -> 1116;
1131 -> 1115;
1131 -> 1116;
1132 -> 1115;
1133 -> 1115;
1133 -> 1116;
1134 -> 1047;
1135 -> 1115;
1135 -> 1134;
1135 -> 1047;
1136 -> 893;
1136 -> 1115;
1136 -> 1135;
1137 -> 1085;
1137 -> 1047;
1138 -> 904;
1138 -> 1047;
1139 -> 1047;
1140 -> 1137;
1140 -> 1139;
1141 -> 1138;
1141 -> 1139;
1142 -> 1139;
1143 -> 1142;
1143 -> 1141;
1143 -> 1139;
1144 -> 1139;
1145 -> 1139;
1146 -> 1144;
1146 -> 1145;
1146 -> 1139;
1147 -> 1139;
1148 -> 1140;
1148 -> 1115;
1148 -> 1147;
1148 -> 1139;
1149 -> 1140;
1149 -> 1115;
1149 -> 1148;
1150 -> 1144;
1150 -> 1149;
1150 -> 1146;
1150 -> 1148;
1151 -> 1148;
1152 -> 1144;
1152 -> 1151;
1152 -> 1150;
1152 -> 1148;
1153 -> 1140;
1153 -> 1115;
1153 -> 1148;
1154 -> 1144;
1154 -> 1153;
1154 -> 1152;
1154 -> 1148;
1155 -> 1139;
1156 -> 1140;
1156 -> 1115;
1156 -> 1155;
1156 -> 1139;
1157 -> 1156;
1158 -> 1157;
1159 -> 1144;
1159 -> 1158;
1159 -> 1154;
1159 -> 1157;
1160 -> 1140;
1160 -> 1115;
1160 -> 1157;
1161 -> 1144;
1161 -> 1160;
1161 -> 1159;
1161 -> 1157;
1162 -> 1156;
1163 -> 1144;
1163 -> 1162;
1163 -> 1161;
1163 -> 1156;
1164 -> 1140;
1164 -> 1115;
1164 -> 1139;
1165 -> 1139;
1166 -> 1144;
1166 -> 1165;
1166 -> 1163;
1166 -> 1139;
1167 -> 1140;
1167 -> 1115;
1167 -> 1139;
1168 -> 1167;
1169 -> 1144;
1169 -> 1168;
1169 -> 1166;
1169 -> 1167;
1170 -> 1167;
1171 -> 1144;
1171 -> 1170;
1171 -> 1169;
1171 -> 1167;
1172 -> 1167;
1173 -> 1144;
1173 -> 1172;
1173 -> 1171;
1173 -> 1167;
1174 -> 1167;
1175 -> 1144;
1175 -> 1174;
1175 -> 1173;
1175 -> 1167;
1176 -> 1167;
1177 -> 1167;
1178 -> 1144;
1178 -> 1177;
1178 -> 1175;
1178 -> 1167;
1179 -> 1139;
1180 -> 1140;
1180 -> 1167;
1180 -> 1179;
1180 -> 1139;
1181 -> 1180;
1182 -> 1144;
1182 -> 1181;
1182 -> 1178;
1182 -> 1180;
1183 -> 1180;
1184 -> 1144;
1184 -> 1183;
1184 -> 1182;
1184 -> 1180;
1185 -> 1180;
1186 -> 1144;
1186 -> 1185;
1186 -> 1184;
1186 -> 1180;
1187 -> 1180;
1188 -> 1144;
1188 -> 1187;
1188 -> 1186;
1188 -> 1180;
1189 -> 1180;
1190 -> 1144;
1190 -> 1189;
1190 -> 1188;
1190 -> 1180;
1191 -> 1140;
1191 -> 1167;
1191 -> 1139;
1192 -> 1139;
1193 -> 1140;
1193 -> 1167;
1193 -> 1192;
1193 -> 1139;
1194 -> 1139;
1195 -> 1140;
1195 -> 1167;
1195 -> 1194;
1195 -> 1139;
1196 -> 1139;
1197 -> 1140;
1197 -> 1167;
1197 -> 1196;
1197 -> 1139;
1198 -> 1144;
1198 -> 1190;
1198 -> 1139;
1199 -> 1198;
1199 -> 1139;
1200 -> 1143;
1200 -> 1199;
1200 -> 1139;
1201 -> 936;
1201 -> 1200;
1201 -> 1083;
1201 -> 1047;
1202 -> 1136;
1202 -> 1047;
1203 -> 904;
1203 -> 1047;
1204 -> 1047;
1205 -> 1202;
1205 -> 1204;
1206 -> 1203;
1206 -> 1204;
1207 -> 1204;
1208 -> 1207;
1208 -> 1206;
1208 -> 1204;
1209 -> 1204;
1210 -> 1204;
1211 -> 1209;
1211 -> 1210;
1211 -> 1204;
1212 -> 1204;
1213 -> 1205;
1213 -> 1167;
1213 -> 1212;
1213 -> 1204;
1214 -> 1205;
1214 -> 1167;
1214 -> 1213;
1215 -> 1209;
1215 -> 1214;
1215 -> 1211;
1215 -> 1213;
1216 -> 1213;
1217 -> 1209;
1217 -> 1216;
1217 -> 1215;
1217 -> 1213;
1218 -> 1205;
1218 -> 1167;
1218 -> 1213;
1219 -> 1209;
1219 -> 1218;
1219 -> 1217;
1219 -> 1213;
1220 -> 1204;
1221 -> 1205;
1221 -> 1167;
1221 -> 1220;
1221 -> 1204;
1222 -> 1221;
1223 -> 1222;
1224 -> 1209;
1224 -> 1223;
1224 -> 1219;
1224 -> 1222;
1225 -> 1205;
1225 -> 1167;
1225 -> 1222;
1226 -> 1209;
1226 -> 1225;
1226 -> 1224;
1226 -> 1222;
1227 -> 1221;
1228 -> 1209;
1228 -> 1227;
1228 -> 1226;
1228 -> 1221;
1229 -> 1205;
1229 -> 1167;
1229 -> 1204;
1230 -> 1204;
1231 -> 1209;
1231 -> 1230;
1231 -> 1228;
1231 -> 1204;
1232 -> 1205;
1232 -> 1167;
1232 -> 1204;
1233 -> 1232;
1234 -> 1209;
1234 -> 1233;
1234 -> 1231;
1234 -> 1232;
1235 -> 1232;
1236 -> 1209;
1236 -> 1235;
1236 -> 1234;
1236 -> 1232;
1237 -> 1232;
1238 -> 1209;
1238 -> 1237;
1238 -> 1236;
1238 -> 1232;
1239 -> 1232;
1240 -> 1209;
1240 -> 1239;
1240 -> 1238;
1240 -> 1232;
1241 -> 1232;
1242 -> 1232;
1243 -> 1209;
1243 -> 1242;
1243 -> 1240;
1243 -> 1232;
1244 -> 1204;
1245 -> 1205;
1245 -> 1232;
1245 -> 1244;
1245 -> 1204;
1246 -> 1245;
1247 -> 1209;
1247 -> 1246;
1247 -> 1243;
1247 -> 1245;
1248 -> 1245;
1249 -> 1209;
1249 -> 1248;
1249 -> 1247;
1249 -> 1245;
1250 -> 1245;
1251 -> 1209;
1251 -> 1250;
1251 -> 1249;
1251 -> 1245;
1252 -> 1245;
1253 -> 1209;
1253 -> 1252;
1253 -> 1251;
1253 -> 1245;
1254 -> 1245;
1255 -> 1209;
1255 -> 1254;
1255 -> 1253;
1255 -> 1245;
1256 -> 1205;
1256 -> 1232;
1256 -> 1204;
1257 -> 1204;
1258 -> 1205;
1258 -> 1232;
1258 -> 1257;
1258 -> 1204;
1259 -> 1204;
1260 -> 1205;
1260 -> 1232;
1260 -> 1259;
1260 -> 1204;
1261 -> 1204;
1262 -> 1205;
1262 -> 1232;
1262 -> 1261;
1262 -> 1204;
1263 -> 1209;
1263 -> 1255;
1263 -> 1204;
1264 -> 1263;
1264 -> 1204;
1265 -> 1208;
1265 -> 1264;
1265 -> 1204;
1266 -> 1031;
1266 -> 1265;
1266 -> 1047;
1267 -> 892;
1268 -> 1047;
1268 -> 1267;
1268 -> 892;
1269 -> 936;
1269 -> 1201;
1269 -> 1268;
1270 -> 892;
1271 -> 936;
1271 -> 1270;
1271 -> 1269;
1271 -> 892;
1272 -> 941;
1272 -> 892;
1273 -> 1031;
1273 -> 892;
1277 -> 1275;
1277 -> 1274;
1278 -> 1276;
1278 -> 1274;
1279 -> 1274;
1280 -> 0;
1280 -> 892;
1281 -> 892;
1282 -> 892;
1283 -> 1272;
1283 -> 1282;
1284 -> 1273;
1284 -> 1282;
1285 -> 1280;
1285 -> 1282;
1286 -> 1281;
1286 -> 1282;
1287 -> 1281;
1287 -> 1282;
1288 -> 1282;
1289 -> 1286;
1289 -> 1288;
1289 -> 1282;
1290 -> 1289;
1290 -> 1282;
1291 -> 0;
1293 -> 1291;
1293 -> 1292;
1294 -> 1292;
1296 -> 1295;
1298 -> 1297;
1300 -> 1299;
1301 -> 1294;
1302 -> 1294;
1302 -> 1292;
1303 -> 1293;
1303 -> 1294;
1303 -> 1292;
1304 -> 1292;
1305 -> 1282;
1306 -> 1305;
1306 -> 1287;
1306 -> 1282;
1307 -> 1283;
1307 -> 1282;
1308 -> 1284;
1308 -> 1282;
1309 -> 1285;
1309 -> 1282;
1310 -> 1307;
1310 -> 1282;
1311 -> 1308;
1311 -> 1282;
1312 -> 1306;
1312 -> 1282;
1313 -> 1282;
1314 -> 1310;
1314 -> 1313;
1315 -> 1311;
1315 -> 1313;
1316 -> 1312;
1316 -> 1313;
1317 -> 1290;
1317 -> 1313;
1318 -> 1314;
1318 -> 1313;
1319 -> 1314;
1319 -> 1307;
1319 -> 1313;
1320 -> 1315;
1320 -> 1313;
1321 -> 1315;
1321 -> 1308;
1321 -> 1313;
1322 -> 1313;
1323 -> 1318;
1323 -> 1322;
1324 -> 1319;
1324 -> 1322;
1325 -> 1320;
1325 -> 1322;
1326 -> 1321;
1326 -> 1322;
1327 -> 1317;
1327 -> 1322;
1328 -> 1323;
1328 -> 1322;
1329 -> 1324;
1329 -> 1322;
1330 -> 1325;
1330 -> 1322;
1331 -> 1326;
1331 -> 1322;
1332 -> 1322;
1333 -> 1328;
1333 -> 1332;
1334 -> 1329;
1334 -> 1332;
1335 -> 1330;
1335 -> 1332;
1336 -> 1331;
1336 -> 1332;
1337 -> 1327;
1337 -> 1332;
1338 -> 1332;
1339 -> 1334;
1339 -> 1338;
1339 -> 1332;
1340 -> 1332;
1341 -> 1336;
1341 -> 1340;
1341 -> 1332;
1342 -> 1339;
1342 -> 1341;
1342 -> 1332;
1343 -> 1332;
1344 -> 1343;
1344 -> 1342;
1344 -> 1332;
1345 -> 1332;
1346 -> 1345;
1346 -> 1334;
1346 -> 1332;
1347 -> 1346;
1348 -> 1342;
1348 -> 1344;
1348 -> 1347;
1348 -> 1346;
1349 -> 1348;
1349 -> 1345;
1349 -> 1347;
1349 -> 1342;
1349 -> 1346;
1350 -> 1332;
1351 -> 1350;
1351 -> 1336;
1351 -> 1332;
1352 -> 1351;
1353 -> 1342;
1353 -> 1344;
1353 -> 1349;
1353 -> 1352;
1353 -> 1351;
1354 -> 1353;
1354 -> 1352;
1354 -> 1350;
1354 -> 1342;
1354 -> 1351;
1355 -> 1332;
1356 -> 1355;
1356 -> 1334;
1356 -> 1332;
1357 -> 1356;
1358 -> 1357;
1358 -> 1336;
1358 -> 1356;
1359 -> 1358;
1360 -> 1342;
1360 -> 1344;
1360 -> 1349;
1360 -> 1354;
1360 -> 1359;
1360 -> 1358;
1361 -> 1333;
1361 -> 1358;
1362 -> 1335;
1362 -> 1358;
1363 -> 1358;
1364 -> 1361;
1364 -> 1363;
1365 -> 1359;
1365 -> 1363;
1366 -> 1362;
1366 -> 1363;
1367 -> 1359;
1367 -> 1363;
1368 -> 1337;
1368 -> 1363;
1369 -> 1364;
1369 -> 1307;
1369 -> 1365;
1369 -> 1363;
1370 -> 1366;
1370 -> 1308;
1370 -> 1367;
1370 -> 1363;
1371 -> 1368;
1371 -> 0;
1371 -> 1369;
1371 -> 1370;
1371 -> 1307;
1371 -> 1308;
1371 -> 1363;
1372 -> 1360;
1372 -> 1371;
1372 -> 1358;
1373 -> 1358;
1374 -> 1342;
1374 -> 1344;
1374 -> 1349;
1374 -> 1354;
1374 -> 1373;
1374 -> 1357;
1374 -> 1358;
1375 -> 1358;
1376 -> 1342;
1376 -> 1344;
1376 -> 1349;
1376 -> 1354;
1376 -> 1355;
1376 -> 1375;
1376 -> 1358;
1377 -> 1372;
1377 -> 1358;
1378 -> 1374;
1378 -> 1358;
1379 -> 1377;
1379 -> 1378;
1379 -> 1358;
1380 -> 1376;
1380 -> 1358;
1381 -> 1379;
1381 -> 1380;
1381 -> 1358;
1382 -> 1381;
1382 -> 1355;
1382 -> 1357;
1382 -> 1342;
1382 -> 1358;
1383 -> 1342;
1383 -> 1332;
1384 -> 1324;
1384 -> 1322;
1385 -> 1326;
1385 -> 1322;
1386 -> 1322;
1387 -> 1384;
1387 -> 1386;
1387 -> 1322;
1388 -> 1385;
1388 -> 1386;
1388 -> 1322;
1389 -> 1387;
1389 -> 1388;
1389 -> 1322;
1390 -> 1383;
1390 -> 1342;
1390 -> 1344;
1390 -> 1349;
1390 -> 1354;
1390 -> 1382;
1390 -> 1384;
1390 -> 1385;
1390 -> 1389;
1391 -> 1389;
1392 -> 1383;
1392 -> 1342;
1392 -> 1344;
1392 -> 1349;
1392 -> 1354;
1392 -> 1382;
1392 -> 1391;
1392 -> 1385;
1392 -> 1389;
1393 -> 1383;
1393 -> 1342;
1393 -> 1344;
1393 -> 1349;
1393 -> 1354;
1393 -> 1382;
1393 -> 1384;
1393 -> 1385;
1393 -> 1392;
1394 -> 1392;
1395 -> 1384;
1395 -> 1394;
1396 -> 1385;
1396 -> 1394;
1397 -> 1394;
1398 -> 0;
1398 -> 1394;
1399 -> 1395;
1399 -> 1394;
1400 -> 1396;
1400 -> 1394;
1401 -> 1394;
1402 -> 1398;
1402 -> 1401;
1403 -> 1399;
1403 -> 1401;
1404 -> 1400;
1404 -> 1401;
1405 -> 1397;
1405 -> 1401;
1406 -> 1402;
1406 -> 1405;
1406 -> 1401;
1407 -> 1403;
1407 -> 1405;
1407 -> 1401;
1408 -> 1404;
1408 -> 1405;
1408 -> 1401;
1409 -> 1322;
1410 -> 1395;
1410 -> 1409;
1410 -> 1322;
1411 -> 1322;
1412 -> 1396;
1412 -> 1411;
1412 -> 1322;
1413 -> 1397;
1413 -> 1406;
1413 -> 1407;
1413 -> 1408;
1413 -> 1313;
1414 -> 1413;
1415 -> 1414;
1416 -> 1315;
1416 -> 1308;
1416 -> 1371;
1416 -> 1413;
1416 -> 1414;
1417 -> 1316;
1417 -> 1416;
1417 -> 1305;
1417 -> 1414;
1418 -> 1309;
1418 -> 1415;
1418 -> 1282;
1419 -> 936;
1419 -> 1418;
1419 -> 1271;
1419 -> 892;
1420 -> 1031;
1420 -> 1266;
1420 -> 892;
1421 -> 941;
1421 -> 1024;
1421 -> 892;
1422 -> 936;
1422 -> 1419;
1422 -> 892;
1423 -> 752;
1424 -> 745;
1425 -> 746;
1425 -> 745;
1426 -> 749;
1426 -> 745;
1427 -> 745;
1428 -> 1425;
1428 -> 1427;
1429 -> 1426;
1429 -> 1427;
1430 -> 1429;
1430 -> 1427;
1431 -> 1430;
1431 -> 749;
1431 -> 1232;
1432 -> 1428;
1432 -> 1431;
1432 -> 1232;
1432 -> 1430;
1433 -> 1430;
1433 -> 1432;
1434 -> 1433;
1434 -> 1432;
1435 -> 745;
1436 -> 746;
1436 -> 745;
}